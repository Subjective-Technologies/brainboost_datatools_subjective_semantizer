[
    {
        "id": "ef9a84c3c88c77f993ffa85c60e5b599",
        "type": "source_code",
        "text": "teochew",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8afa3228481a57b925bda498590a3c5e",
        "type": "source_code",
        "text": "p. cm.",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "804ccdb59b2c057bb7bfb0cfe310fa2c",
        "type": "source_code",
        "text": "1. Java (Computer program language) I. Title.",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "732e2c635fcf48af05cf658ec5bea53b",
        "type": "source_code",
        "text": "2005036339",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "d41d8cd98f00b204e9800998ecf8427e",
        "type": "source_code",
        "text": "",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bde8d66e31670b1fcba5d1bfe0832e72",
        "type": "source_code",
        "text": "to Objects",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6ff05d73f9a15ee99b798cb4b11f0e6b",
        "type": "source_code",
        "text": "with polymorphism",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2aa729611ec523996e2357c57f3f0a0f",
        "type": "source_code",
        "text": "all the objects",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "82ea072d8b9656594f31c334b177b68d",
        "type": "source_code",
        "text": "destroy an object",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bb3e1351639f9c1482bdc578db5f0f8b",
        "type": "source_code",
        "text": "int x = 96; // Illegal",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "386c61db676dc14cf5817a44ff115fb6",
        "type": "source_code",
        "text": "and return values",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d59952dea0ce90b0f1d0b4fecf532c7c",
        "type": "source_code",
        "text": "System.out.println(\"Hello, it\u2019s: \"); \n    System.out.println(new Date());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "e013d5a7acb019bb7db4f5b0079f144d",
        "type": "source_code",
        "text": "System.getProperties().list(System.out); \n    System.out.println(System.getProperty(\"user.name\")); \n    System.out.println( \n    System.getProperty(\"java.library.path\"));",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "d59952dea0ce90b0f1d0b4fecf532c7c",
        "type": "source_code",
        "text": "System.out.println(\"Hello, it\u2019s: \"); \n    System.out.println(new Date());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "8fe5a459b8cf7a79462d079c3b9164ba",
        "type": "source_code",
        "text": "// ...",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "8fe5a459b8cf7a79462d079c3b9164ba",
        "type": "source_code",
        "text": "// ...",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "b47fec87bd41dc26ade7dfd5212cb626",
        "type": "source_code",
        "text": "print(\"Hello, it\u2019s: \"); \n    print(new Date());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "6275b948facd1f6596d30e7573029c6c",
        "type": "source_code",
        "text": "int x = 1, y = 2, z = 3; \n    int a = x + y - 2/2 + z;           // (1) \n    int b = x + (y - 2)/(2 + z);       // (2) \n    System.out.println(\"a = \" + a + \" b = \" + b);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6bf738c33ab9a37dd8c62dd84469ab97",
        "type": "source_code",
        "text": "Tank t1 = new Tank(); \n    Tank t2 = new Tank(); \n    t1.level = 9; \n    t2.level = 47; \n    print(\"1: t1.level: \" + t1.level + \n          \", t2.level: \" + t2.level); \n    t1 = t2; \n    print(\"2: t1.level: \" + t1.level + \n          \", t2.level: \" + t2.level); \n    t1.level = 27; \n    print(\"3: t1.level: \" + t1.level + \n          \", t2.level: \" + t2.level);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "c4407f85361330f201b3d8450e23f3a6",
        "type": "source_code",
        "text": "y.c = \u2018z\u2019;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7588a7bb643389b2b1f1969e2ea461d7",
        "type": "source_code",
        "text": "Letter x = new Letter(); \n    x.c = \u2018a\u2019; \n    print(\"1: x.c: \" + x.c); \n    f(x); \n    print(\"2: x.c: \" + x.c);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "261d22ba78a746944c88ce878d472cf7",
        "type": "source_code",
        "text": "// Create a seeded random number generator: \n    Random rand = new Random(47); \n    int i, j, k; \n    // Choose value from 1 to 100: \n    j = rand.nextInt(100) + 1; \n    print(\"j : \" + j); \n    k = rand.nextInt(100) + 1; \n    print(\"k : \" + k); \n    i = j + k; \n    print(\"j + k : \" + i); \n    i = j - k; \n    print(\"j - k : \" + i); \n    i = k / j; \n    print(\"k / j : \" + i); \n    i = k * j; \n    print(\"k * j : \" + i); \n    i = k % j; \n    print(\"k % j : \" + i); \n    j %= k; \n    print(\"j %= k : \" + j); \n    // Floating-point number tests: \n    float u, v, w; // Applies to doubles, too \n    v = rand.nextFloat(); \n    print(\"v : \" + v); \n    w = rand.nextFloat(); \n    print(\"w : \" + w); \n    u = v + w; \n    print(\"v + w : \" + u); \n    u = v - w; \n    print(\"v - w : \" + u); \n    u = v * w; \n    print(\"v * w : \" + u); \n    u = v / w; \n    print(\"v / w : \" + u); \n    // The following also works for char, \n    // byte, short, int, long, and double:",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "74d5588af2bba244f55e13e74b76cdeb",
        "type": "source_code",
        "text": "u += v; \n    print(\"u += v : \" + u); \n    u -= v; \n    print(\"u -= v : \" + u); \n    u *= v; \n    print(\"u *= v : \" + u); \n    u /= v; \n    print(\"u /= v : \" + u);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "24cb9c2d6c204a7acc61fb54041519a4",
        "type": "source_code",
        "text": "int i = 1; \n    print(\"i : \" + i); \n    print(\"++i : \" + ++i); // Pre-increment \n    print(\"i++ : \" + i++); // Post-increment \n    print(\"i : \" + i); \n    print(\"--i : \" + --i); // Pre-decrement \n    print(\"i-- : \" + i--); // Post-decrement \n    print(\"i : \" + i);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bb0ef2638f83f276a5f8580235b08739",
        "type": "source_code",
        "text": "Integer n1 = new Integer(47); \n    Integer n2 = new Integer(47); \n    System.out.println(n1 == n2); \n    System.out.println(n1 != n2);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fa8e2e125f14f5644724e795de5c8901",
        "type": "source_code",
        "text": "Integer n1 = new Integer(47); \n    Integer n2 = new Integer(47); \n    System.out.println(n1.equals(n2));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a76b07179ec459949a068623dd6ed743",
        "type": "source_code",
        "text": "Value v1 = new Value(); \n    Value v2 = new Value(); \n    v1.i = v2.i = 100; \n    System.out.println(v1.equals(v2));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b97e85f9669b87bf5bc805b00874f1de",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    int i = rand.nextInt(100);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c1ad09f01e9340097c782dae9cabbcb7",
        "type": "source_code",
        "text": "int j = rand.nextInt(100); \n    print(\"i = \" + i); \n    print(\"j = \" + j); \n    print(\"i > j is \" + (i > j)); \n    print(\"i < j is \" + (i < j)); \n    print(\"i >= j is \" + (i >= j)); \n    print(\"i <= j is \" + (i <= j)); \n    print(\"i == j is \" + (i == j)); \n    print(\"i != j is \" + (i != j)); \n    // Treating an int as a boolean is not legal Java:",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4f41b18a8790dbdc41cc64887e3fe40e",
        "type": "source_code",
        "text": "print(\"(i < 10) && (j < 10) is \" \n       + ((i < 10) && (j < 10)) ); \n    print(\"(i < 10) || (j < 10) is \" \n       + ((i < 10) || (j < 10)) );",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cc53aeaee754ee3cde678d36c4277d2d",
        "type": "source_code",
        "text": "print(\"test1(\" + val + \")\"); \n    print(\"result: \" + (val < 1)); \n    return val < 1;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0d4a5a4cecbb2679dbd5b80b502a0082",
        "type": "source_code",
        "text": "print(\"test2(\" + val + \")\"); \n    print(\"result: \" + (val < 2)); \n    return val < 2;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4a8b282f3ca20a4e66bfbe3ce1c07dbf",
        "type": "source_code",
        "text": "print(\"test3(\" + val + \")\"); \n    print(\"result: \" + (val < 3)); \n    return val < 3;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "6959cccfd5362d6c5182f1fd9f3f59c9",
        "type": "source_code",
        "text": "boolean b = test1(0) && test2(2) && test3(2); \n    print(\"expression is \" + b);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "037d963c68964792443de9e794c523b7",
        "type": "source_code",
        "text": "int i1 = 0x2f; // Hexadecimal (lowercase) \n    print(\"i1: \" + Integer.toBinaryString(i1)); \n    int i2 = 0X2F; // Hexadecimal (uppercase) \n    print(\"i2: \" + Integer.toBinaryString(i2)); \n    int i3 = 0177; // Octal (leading zero) \n    print(\"i3: \" + Integer.toBinaryString(i3)); \n    char c = 0xffff; // max char hex value",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "6aa45004fe21e3d7238763ec042008a8",
        "type": "source_code",
        "text": "print(\"c: \" + Integer.toBinaryString(c)); \n    byte b = 0x7f; // max byte hex value \n    print(\"b: \" + Integer.toBinaryString(b)); \n    short s = 0x7fff; // max short hex value \n    print(\"s: \" + Integer.toBinaryString(s)); \n    long n1 = 200L; // long suffix \n    long n2 = 200l; // long suffix (but can be confusing) \n    long n3 = 200; \n    float f1 = 1; \n    float f2 = 1F; // float suffix \n    float f3 = 1f; // float suffix \n    double d1 = 1d; // double suffix \n    double d2 = 1D; // double suffix \n    // (Hex and Octal also work with long)",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "3ed3a9905d28a3d8220b46b485b7cc93",
        "type": "source_code",
        "text": "// Uppercase and lowercase \u2018e\u2019 are the same: \n    float expFloat = 1.39e-43f; \n    expFloat = 1.39E-43f;",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "8b2e2f1ed406cd0b00b20895dec4786b",
        "type": "source_code",
        "text": "System.out.println(expFloat); \n    double expDouble = 47e47d; // \u2018d\u2019 is optional \n    double expDouble2 = 47e47; // Automatically double \n    System.out.println(expDouble);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7c2cf0c39f60776fb1d73594060a3ac9",
        "type": "source_code",
        "text": "int i = -1; \n    print(Integer.toBinaryString(i)); \n    i >>>= 10; \n    print(Integer.toBinaryString(i)); \n    long l = -1; \n    print(Long.toBinaryString(l)); \n    l >>>= 10; \n    print(Long.toBinaryString(l)); \n    short s = -1; \n    print(Integer.toBinaryString(s)); \n    s >>>= 10; \n    print(Integer.toBinaryString(s)); \n    byte b = -1; \n    print(Integer.toBinaryString(b)); \n    b >>>= 10; \n    print(Integer.toBinaryString(b)); \n    b = -1; \n    print(Integer.toBinaryString(b)); \n    print(Integer.toBinaryString(b>>>10));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ca884d7be3b430e818858a810bc40088",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    int i = rand.nextInt(); \n    int j = rand.nextInt(); \n    printBinaryInt(\"-1\", -1); \n    printBinaryInt(\"+1\", +1); \n    int maxpos = 2147483647; \n    printBinaryInt(\"maxpos\", maxpos); \n    int maxneg = -2147483648; \n    printBinaryInt(\"maxneg\", maxneg); \n    printBinaryInt(\"i\", i); \n    printBinaryInt(\"~i\", ~i);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "53c78d8d667a9e429fae8a6437270a74",
        "type": "source_code",
        "text": "printBinaryInt(\"-i\", -i); \n    printBinaryInt(\"j\", j); \n    printBinaryInt(\"i & j\", i & j); \n    printBinaryInt(\"i | j\", i | j); \n    printBinaryInt(\"i ^ j\", i ^ j); \n    printBinaryInt(\"i << 5\", i << 5); \n    printBinaryInt(\"i >> 5\", i >> 5); \n    printBinaryInt(\"(~i) >> 5\", (~i) >> 5); \n    printBinaryInt(\"i >>> 5\", i >>> 5); \n    printBinaryInt(\"(~i) >>> 5\", (~i) >>> 5);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "23374e2dee112d7877a97cb532aa9ac9",
        "type": "source_code",
        "text": "long l = rand.nextLong(); \n    long m = rand.nextLong(); \n    printBinaryLong(\"-1L\", -1L); \n    printBinaryLong(\"+1L\", +1L); \n    long ll = 9223372036854775807L; \n    printBinaryLong(\"maxpos\", ll); \n    long lln = -9223372036854775808L; \n    printBinaryLong(\"maxneg\", lln); \n    printBinaryLong(\"l\", l); \n    printBinaryLong(\"~l\", ~l); \n    printBinaryLong(\"-l\", -l); \n    printBinaryLong(\"m\", m); \n    printBinaryLong(\"l & m\", l & m); \n    printBinaryLong(\"l | m\", l | m); \n    printBinaryLong(\"l ^ m\", l ^ m); \n    printBinaryLong(\"l << 5\", l << 5); \n    printBinaryLong(\"l >> 5\", l >> 5); \n    printBinaryLong(\"(~l) >> 5\", (~l) >> 5); \n    printBinaryLong(\"l >>> 5\", l >>> 5); \n    printBinaryLong(\"(~l) >>> 5\", (~l) >>> 5);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "438201e22b2c22d1250b84e178e94916",
        "type": "source_code",
        "text": "print(s + \", int: \" + i + \", binary:\\n   \" + \n      Integer.toBinaryString(i));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "6a303ee665ca27b63a8e934b88c06670",
        "type": "source_code",
        "text": "print(s + \", long: \" + l + \", binary:\\n    \" + \n      Long.toBinaryString(l));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "30ea0a94eeb61cc412d9fcc56fa4be61",
        "type": "source_code",
        "text": "return i < 10 ? i * 100 : i * 10;",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "35ba5d7835748624131ee5f08e340602",
        "type": "source_code",
        "text": "if(i < 10) \n      return i * 100; \n    else \n      return i * 10;",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "bcd0a57e5ba440c865cba102f3406ef9",
        "type": "source_code",
        "text": "print(ternary(9)); \n    print(ternary(10)); \n    print(standardIfElse(9)); \n    print(standardIfElse(10));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e6b98744ac512b95e81f1134f52238b0",
        "type": "source_code",
        "text": "int x = 0, y = 1, z = 2; \n    String s = \"x, y, z \"; \n    print(s + x + y + z); \n    print(x + \" \" + s); // Converts x to a String",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "deb11650c925d1348380a1b52cdea04e",
        "type": "source_code",
        "text": "s += \"(summed) = \"; // Concatenation operator \n    print(s + (x + y + z)); \n    print(\"\" + x); // Shorthand for Integer.toString()",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "380367707aa5a0b8e15f556825b96729",
        "type": "source_code",
        "text": "int i = 200; \n    long lng = (long)i; \n    lng = i; // \"Widening,\" so cast not really required \n    long lng2 = (long)200; \n    lng2 = 200; \n    // A \"narrowing conversion\": \n    i = (int)lng2; // Cast required",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "37ea1e89736dd64c326f897f5cd1445e",
        "type": "source_code",
        "text": "double above = 0.7, below = 0.4; \n    float fabove = 0.7f, fbelow = 0.4f; \n    print(\"(int)above: \" + (int)above); \n    print(\"(int)below: \" + (int)below); \n    print(\"(int)fabove: \" + (int)fabove);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "6e61ac8305152b5fdbbd02b30d6bdadd",
        "type": "source_code",
        "text": "print(\"(int)fbelow: \" + (int)fbelow);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4ee867cb413e06c379e716d7e5f7cab6",
        "type": "source_code",
        "text": "double above = 0.7, below = 0.4; \n    float fabove = 0.7f, fbelow = 0.4f; \n    print(\"Math.round(above): \" + Math.round(above)); \n    print(\"Math.round(below): \" + Math.round(below)); \n    print(\"Math.round(fabove): \" + Math.round(fabove)); \n    print(\"Math.round(fbelow): \" + Math.round(fbelow));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7592b86bf97669fb7587540e825d5119",
        "type": "source_code",
        "text": "// Arithmetic operators: \n    //! x = x * y; \n    //! x = x / y; \n    //! x = x % y; \n    //! x = x + y; \n    //! x = x - y; \n    //! x++; \n    //! x--; \n    //! x = +y; \n    //! x = -y; \n    // Relational and logical: \n    //! f(x > y); \n    //! f(x >= y); \n    //! f(x < y); \n    //! f(x <= y); \n    f(x == y); \n    f(x != y); \n    f(!y); \n    x = x && y; \n    x = x || y; \n    // Bitwise operators: \n    //! x = ~y; \n    x = x & y; \n    x = x | y; \n    x = x ^ y; \n    //! x = x << 1; \n    //! x = x >> 1; \n    //! x = x >>> 1; \n    // Compound assignment: \n    //! x += y; \n    //! x -= y; \n    //! x *= y; \n    //! x /= y; \n    //! x %= y; \n    //! x <<= 1; \n    //! x >>= 1; \n    //! x >>>= 1; \n    x &= y; \n    x ^= y; \n    x |= y; \n    // Casting:",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "753e277ace003cff786194b39174444b",
        "type": "source_code",
        "text": "//! char c = (char)x; \n    //! byte b = (byte)x; \n    //! short s = (short)x; \n    //! int i = (int)x; \n    //! long l = (long)x; \n    //! float f = (float)x; \n    //! double d = (double)x;",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "45be1cb7e0977d99ff6e61f8ec095ead",
        "type": "source_code",
        "text": "// Arithmetic operators: \n    x = (char)(x * y); \n    x = (char)(x / y); \n    x = (char)(x % y); \n    x = (char)(x + y); \n    x = (char)(x - y); \n    x++; \n    x--; \n    x = (char)+y; \n    x = (char)-y; \n    // Relational and logical: \n    f(x > y); \n    f(x >= y); \n    f(x < y); \n    f(x <= y); \n    f(x == y); \n    f(x != y); \n    //! f(!x); \n    //! f(x && y); \n    //! f(x || y); \n    // Bitwise operators: \n    x= (char)~y; \n    x = (char)(x & y); \n    x  = (char)(x | y); \n    x = (char)(x ^ y); \n    x = (char)(x << 1); \n    x = (char)(x >> 1); \n    x = (char)(x >>> 1); \n    // Compound assignment: \n    x += y; \n    x -= y; \n    x *= y; \n    x /= y; \n    x %= y; \n    x <<= 1; \n    x >>= 1; \n    x >>>= 1; \n    x &= y; \n    x ^= y; \n    x |= y; \n    // Casting: \n    //! boolean bl = (boolean)x; \n    byte b = (byte)x; \n    short s = (short)x; \n    int i = (int)x; \n    long l = (long)x; \n    float f = (float)x; \n    double d = (double)x;",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "81d1627333e76eb837a59149455e005f",
        "type": "source_code",
        "text": "// Arithmetic operators: \n    x = (byte)(x* y); \n    x = (byte)(x / y); \n    x = (byte)(x % y);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "f005eb799919f7bb85e559aaf642cb95",
        "type": "source_code",
        "text": "x = (byte)(x + y); \n    x = (byte)(x - y); \n    x++; \n    x--; \n    x = (byte)+ y; \n    x = (byte)- y; \n    // Relational and logical: \n    f(x > y); \n    f(x >= y); \n    f(x < y); \n    f(x <= y); \n    f(x == y); \n    f(x != y); \n    //! f(!x); \n    //! f(x && y); \n    //! f(x || y); \n    // Bitwise operators: \n    x = (byte)~y; \n    x = (byte)(x & y); \n    x = (byte)(x | y); \n    x = (byte)(x ^ y); \n    x = (byte)(x << 1); \n    x = (byte)(x >> 1); \n    x = (byte)(x >>> 1); \n    // Compound assignment: \n    x += y; \n    x -= y; \n    x *= y; \n    x /= y; \n    x %= y; \n    x <<= 1; \n    x >>= 1; \n    x >>>= 1; \n    x &= y; \n    x ^= y; \n    x |= y; \n    // Casting: \n    //! boolean bl = (boolean)x; \n    char c = (char)x; \n    short s = (short)x; \n    int i = (int)x; \n    long l = (long)x; \n    float f = (float)x; \n    double d = (double)x;",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "fc8c1273ec4cb6bcd51aafc31916e5ff",
        "type": "source_code",
        "text": "// Arithmetic operators: \n    x = (short)(x * y); \n    x = (short)(x / y); \n    x = (short)(x % y); \n    x = (short)(x + y); \n    x = (short)(x - y); \n    x++; \n    x--; \n    x = (short)+y; \n    x = (short)-y; \n    // Relational and logical: \n    f(x > y); \n    f(x >= y); \n    f(x < y); \n    f(x <= y); \n    f(x == y); \n    f(x != y);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "5d27606e22932cbf3703cfe047ffd8f7",
        "type": "source_code",
        "text": "//! f(!x); \n    //! f(x && y); \n    //! f(x || y); \n    // Bitwise operators: \n    x = (short)~y; \n    x = (short)(x & y); \n    x = (short)(x | y); \n    x = (short)(x ^ y); \n    x = (short)(x << 1); \n    x = (short)(x >> 1); \n    x = (short)(x >>> 1); \n    // Compound assignment: \n    x += y; \n    x -= y; \n    x *= y; \n    x /= y; \n    x %= y; \n    x <<= 1; \n    x >>= 1; \n    x >>>= 1; \n    x &= y; \n    x ^= y; \n    x |= y; \n    // Casting: \n    //! boolean bl = (boolean)x; \n    char c = (char)x; \n    byte b = (byte)x; \n    int i = (int)x; \n    long l = (long)x; \n    float f = (float)x; \n    double d = (double)x;",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "87dd07a1192537cd8c02f3726151ff8d",
        "type": "source_code",
        "text": "// Arithmetic operators: \n    x = x * y; \n    x = x / y; \n    x = x % y; \n    x = x + y; \n    x = x - y; \n    x++; \n    x--; \n    x = +y; \n    x = -y; \n    // Relational and logical: \n    f(x > y); \n    f(x >= y); \n    f(x < y); \n    f(x <= y); \n    f(x == y); \n    f(x != y); \n    //! f(!x); \n    //! f(x && y); \n    //! f(x || y); \n    // Bitwise operators: \n    x = ~y; \n    x = x & y; \n    x = x | y; \n    x = x ^ y; \n    x = x << 1; \n    x = x >> 1; \n    x = x >>> 1; \n    // Compound assignment: \n    x += y;",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "159fa0ad9bebe55c637d45d21aad921a",
        "type": "source_code",
        "text": "x -= y; \n    x *= y; \n    x /= y; \n    x %= y; \n    x <<= 1; \n    x >>= 1; \n    x >>>= 1; \n    x &= y; \n    x ^= y; \n    x |= y; \n    // Casting: \n    //! boolean bl = (boolean)x; \n    char c = (char)x; \n    byte b = (byte)x; \n    short s = (short)x; \n    long l = (long)x; \n    float f = (float)x; \n    double d = (double)x;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4756a4cc4e661c19477282dce0bc3a1f",
        "type": "source_code",
        "text": "// Arithmetic operators: \n    x = x * y; \n    x = x / y; \n    x = x % y; \n    x = x + y; \n    x = x - y; \n    x++; \n    x--; \n    x = +y; \n    x = -y; \n    // Relational and logical: \n    f(x > y); \n    f(x >= y); \n    f(x < y); \n    f(x <= y); \n    f(x == y); \n    f(x != y); \n    //! f(!x); \n    //! f(x && y); \n    //! f(x || y); \n    // Bitwise operators: \n    x = ~y; \n    x = x & y; \n    x = x | y; \n    x = x ^ y; \n    x = x << 1; \n    x = x >> 1; \n    x = x >>> 1; \n    // Compound assignment: \n    x += y; \n    x -= y; \n    x *= y; \n    x /= y; \n    x %= y; \n    x <<= 1; \n    x >>= 1; \n    x >>>= 1; \n    x &= y; \n    x ^= y; \n    x |= y; \n    // Casting: \n    //! boolean bl = (boolean)x; \n    char c = (char)x;",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "eced2b0b2b8260e7fba02f1f76302e5b",
        "type": "source_code",
        "text": "byte b = (byte)x; \n    short s = (short)x; \n    int i = (int)x; \n    float f = (float)x; \n    double d = (double)x;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1b625b14d4700898a656e8d5ea1ee0a7",
        "type": "source_code",
        "text": "// Arithmetic operators: \n    x = x * y; \n    x = x / y; \n    x = x % y; \n    x = x + y; \n    x = x - y; \n    x++; \n    x--; \n    x = +y; \n    x = -y; \n    // Relational and logical: \n    f(x > y); \n    f(x >= y); \n    f(x < y); \n    f(x <= y); \n    f(x == y); \n    f(x != y); \n    //! f(!x); \n    //! f(x && y); \n    //! f(x || y); \n    // Bitwise operators: \n    //! x = ~y; \n    //! x = x & y; \n    //! x = x | y; \n    //! x = x ^ y; \n    //! x = x << 1; \n    //! x = x >> 1; \n    //! x = x >>> 1; \n    // Compound assignment: \n    x += y; \n    x -= y; \n    x *= y; \n    x /= y; \n    x %= y; \n    //! x <<= 1; \n    //! x >>= 1; \n    //! x >>>= 1; \n    //! x &= y; \n    //! x ^= y; \n    //! x |= y; \n    // Casting: \n    //! boolean bl = (boolean)x; \n    char c = (char)x; \n    byte b = (byte)x; \n    short s = (short)x; \n    int i = (int)x; \n    long l = (long)x; \n    double d = (double)x;",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "5a25276eedbfd3aa211f30520cabc06b",
        "type": "source_code",
        "text": "// Arithmetic operators: \n    x = x * y; \n    x = x / y; \n    x = x % y; \n    x = x + y; \n    x = x - y;",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "8b8511a251d863386d007ae16d27af7d",
        "type": "source_code",
        "text": "x++; \n    x--; \n    x = +y; \n    x = -y; \n    // Relational and logical: \n    f(x > y); \n    f(x >= y); \n    f(x < y); \n    f(x <= y); \n    f(x == y); \n    f(x != y); \n    //! f(!x); \n    //! f(x && y); \n    //! f(x || y); \n    // Bitwise operators: \n    //! x = ~y; \n    //! x = x & y; \n    //! x = x | y; \n    //! x = x ^ y; \n    //! x = x << 1; \n    //! x = x >> 1; \n    //! x = x >>> 1; \n    // Compound assignment: \n    x += y; \n    x -= y; \n    x *= y; \n    x /= y; \n    x %= y; \n    //! x <<= 1; \n    //! x >>= 1; \n    //! x >>>= 1; \n    //! x &= y; \n    //! x ^= y; \n    //! x |= y; \n    // Casting: \n    //! boolean bl = (boolean)x; \n    char c = (char)x; \n    byte b = (byte)x; \n    short s = (short)x; \n    int i = (int)x; \n    long l = (long)x; \n    float f = (float)x;",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "6a54d3d93814b48bd7851e7177f65fdc",
        "type": "source_code",
        "text": "int big = Integer.MAX_VALUE; \n    System.out.println(\"big = \" + big); \n    int bigger = big * 4; \n    System.out.println(\"bigger = \" + bigger);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "9e7149585b02a72d4fcd4148fc780927",
        "type": "source_code",
        "text": "if(testval > target)  \n      result = +1;  \n    else if(testval < target)  \n      result = -1;  \n    else  \n      result = 0; // Match",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bf5bde277ee165c53819f6bdaa1cc6f1",
        "type": "source_code",
        "text": "test(10, 5);  \n    print(result);  \n    test(5, 10);  \n    print(result);  \n    test(5, 5);  \n    print(result);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "21156c49c9cc48ae6438b65cea9131a2",
        "type": "source_code",
        "text": "boolean result = Math.random() < 0.99; \n    System.out.print(result + \", \"); \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "617e6bad9b495f952519428f97ac31b4",
        "type": "source_code",
        "text": "while(condition()) \n      System.out.println(\"Inside \u2018while\u2019\"); \n    System.out.println(\"Exited \u2018while\u2019\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d7bd6beeb238e96d295be2fac88f0941",
        "type": "source_code",
        "text": "for(char c = 0; c < 128; c++) \n      if(Character.isLowerCase(c)) \n        System.out.println(\"value: \" + (int)c + \n          \" character: \" + c);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "6fc16adedc8e1e86b4e5198beeb73f3c",
        "type": "source_code",
        "text": "for(int i = 1, j = i + 10; i < 5; i++, j = i * 2) { \n      System.out.println(\"i = \" + i + \" j = \" + j); \n    }",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "781226411cdfaa2d8833487199fbce08",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    float f[] = new float[10]; \n    for(int i = 0; i < 10; i++) \n      f[i] = rand.nextFloat(); \n    for(float x : f) \n      System.out.println(x);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "3b7165471eac035d59b8395243c2f0f3",
        "type": "source_code",
        "text": "for(char c : \"An African Swallow\".toCharArray() ) \n      System.out.print(c + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ecb0ef3ac91a3c3fc655250da5db9fd7",
        "type": "source_code",
        "text": "for(int i : range(10)) // 0..9 \n      printnb(i + \" \"); \n    print(); \n    for(int i : range(5, 10)) // 5..9 \n      printnb(i + \" \"); \n    print(); \n    for(int i : range(5, 20, 3)) // 5..20 step 3 \n      printnb(i + \" \"); \n    print();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9f046feb0233aea8002cfd3afffbdfcb",
        "type": "source_code",
        "text": "if(testval > target) \n      return +1; \n    else if(testval < target) \n      return -1; \n    else \n      return 0; // Match",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ead1548c17e29e131df9806f5b3883df",
        "type": "source_code",
        "text": "print(test(10, 5)); \n    print(test(5, 10)); \n    print(test(5, 5));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8e8fe769b5616152c4f9b6113a709c7c",
        "type": "source_code",
        "text": "for(int i = 0; i < 100; i++) { \n      if(i == 74) break; // Out of for loop \n      if(i % 9 != 0) continue; // Next iteration \n      System.out.print(i + \" \"); \n    } \n    System.out.println(); \n    // Using foreach: \n    for(int i : range(100)) { \n      if(i == 74) break; // Out of for loop \n      if(i % 9 != 0) continue; // Next iteration \n      System.out.print(i + \" \"); \n    } \n    System.out.println(); \n    int i = 0; \n    // An \"infinite loop\": \n    while(true) { \n      i++; \n      int j = i * 27; \n      if(j == 1269) break; // Out of loop \n      if(i % 10 != 0) continue; // Top of loop \n      System.out.print(i + \" \"); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "469f306c7c9e2faf15a75f452311b9d4",
        "type": "source_code",
        "text": "//...  \n    break; // (1)  \n    //...  \n    continue; // (2)  \n    //...  \n    continue label1; // (3)  \n    //...  \n    break label1; // (4)",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "eb222386370d6e44ad5535ba6ce9b713",
        "type": "source_code",
        "text": "int i = 0; \n    outer: // Can\u2019t have statements here \n    for(; true ;) { // infinite loop \n      inner: // Can\u2019t have statements here \n      for(; i < 10; i++) { \n        print(\"i = \" + i); \n        if(i == 2) { \n          print(\"continue\"); \n          continue; \n        } \n        if(i == 3) { \n          print(\"break\"); \n          i++; // Otherwise i never \n               // gets incremented. \n          break; \n        } \n        if(i == 7) { \n          print(\"continue outer\"); \n          i++; // Otherwise i never \n               // gets incremented. \n          continue outer; \n        } \n        if(i == 8) { \n          print(\"break outer\"); \n          break outer; \n        } \n        for(int k = 0; k < 5; k++) { \n          if(k == 3) { \n            print(\"continue inner\"); \n            continue inner; \n          } \n        } \n      } \n    } \n    // Can\u2019t break or continue to labels here",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "fcece291d2b2cfacc14cecab829054e5",
        "type": "source_code",
        "text": "int i = 0; \n    outer: \n    while(true) { \n      print(\"Outer while loop\"); \n      while(true) { \n        i++; \n        print(\"i = \" + i); \n        if(i == 1) { \n          print(\"continue\"); \n          continue; \n        } \n        if(i == 3) { \n          print(\"continue outer\"); \n          continue outer; \n        } \n        if(i == 5) { \n          print(\"break\"); \n          break; \n        } \n        if(i == 7) { \n          print(\"break outer\"); \n          break outer; \n        } \n      } \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "040ed926b590e4f3675fbc36e3f401c6",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    for(int i = 0; i < 100; i++) { \n      int c = rand.nextInt(26) + \u2018a\u2019; \n      printnb((char)c + \", \" + c + \": \"); \n      switch(c) { \n        case \u2018a\u2019: \n        case \u2018e\u2019: \n        case \u2018i\u2019: \n        case \u2018o\u2019: \n        case \u2018u\u2019: print(\"vowel\"); \n                  break; \n        case \u2018y\u2019: \n        case \u2018w\u2019: print(\"Sometimes a vowel\"); \n                  break; \n        default:  print(\"consonant\"); \n      } \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "c85ca5b5f6aabff9cd116bcdf13d434d",
        "type": "source_code",
        "text": "System.out.print(\"Rock \");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d8df46dbf28cf591683eee5805adafcd",
        "type": "source_code",
        "text": "for(int i = 0; i < 10; i++) \n      new Rock();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cf47eedb9a70a3b7fed5855a7b0f01d1",
        "type": "source_code",
        "text": "System.out.print(\"Rock \" + i + \" \");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e81bab9e5116dd94fa7005df5c6550c8",
        "type": "source_code",
        "text": "for(int i = 0; i < 8; i++) \n      new Rock2(i);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c73f7820bbc6ab220c9dc8513480a791",
        "type": "source_code",
        "text": "print(\"Planting a seedling\"); \n    height = 0;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8dee36fc32f49b78a8f12a7944b8a2f7",
        "type": "source_code",
        "text": "height = initialHeight; \n    print(\"Creating new Tree that is \" + \n      height + \" feet tall\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e3f528d5f07c39414ca2f27f67641770",
        "type": "source_code",
        "text": "print(\"Tree is \" + height + \" feet tall\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cb367042aeb2cf9d80f02b62540fddb9",
        "type": "source_code",
        "text": "print(s + \": Tree is \" + height + \" feet tall\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bdd0566933ad6629bb61fb2d9b105512",
        "type": "source_code",
        "text": "for(int i = 0; i < 5; i++) { \n      Tree t = new Tree(i); \n      t.info(); \n      t.info(\"overloaded method\"); \n    } \n    // Overloaded constructor: \n    new Tree();",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "b3f690d69fb970d22502b19fb693521d",
        "type": "source_code",
        "text": "print(\"String: \" + s + \", int: \" + i);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "5419c0eff5ee1369b03b95436769551a",
        "type": "source_code",
        "text": "print(\"int: \" + i + \", String: \" + s);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "3f018c2bea4840cdc7fc165ec3b53bbf",
        "type": "source_code",
        "text": "f(\"String first\", 11); \n    f(99, \"Int first\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d02cbb938c34735789338de3333f612f",
        "type": "source_code",
        "text": "printnb(\"5: \"); \n    f1(5);f2(5);f3(5);f4(5);f5(5);f6(5);f7(5); print();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "cf1d270aa929653ba21fc52e91137b70",
        "type": "source_code",
        "text": "char x = \u2018x\u2019; \n    printnb(\"char: \"); \n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "7097223444ac474d5724dca96c18c3ae",
        "type": "source_code",
        "text": "byte x = 0; \n    printnb(\"byte: \"); \n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "90aa9099f03a1bd4db85f078edc3f97f",
        "type": "source_code",
        "text": "short x = 0; \n    printnb(\"short: \"); \n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "830404056f7d36ac71f29da30da7ea41",
        "type": "source_code",
        "text": "int x = 0; \n    printnb(\"int: \"); \n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0917c1c32b403a8fa8202f55b813606d",
        "type": "source_code",
        "text": "long x = 0; \n    printnb(\"long: \"); \n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "818823f7b1e0e9544b21644bb62cd6b6",
        "type": "source_code",
        "text": "float x = 0; \n    printnb(\"float: \"); \n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "766caf01ca22520bb984ec98bf45fa2a",
        "type": "source_code",
        "text": "double x = 0; \n    printnb(\"double: \"); \n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "a9dc5df1594d08560a5715898dd09dd7",
        "type": "source_code",
        "text": "PrimitiveOverloading p = \n      new PrimitiveOverloading(); \n    p.testConstVal(); \n    p.testChar(); \n    p.testByte(); \n    p.testShort(); \n    p.testInt(); \n    p.testLong(); \n    p.testFloat(); \n    p.testDouble();",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "82ea7d4e371e9d594f49cc0bab38f544",
        "type": "source_code",
        "text": "double x = 0; \n    print(\"double argument:\"); \n    f1(x);f2((float)x);f3((long)x);f4((int)x);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "937e3c80a5f6fea75a50a4b5a9f0d229",
        "type": "source_code",
        "text": "f5((short)x);f6((byte)x);f7((char)x);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bfc182ddf4edee747602d87ae0f0a4f0",
        "type": "source_code",
        "text": "Demotion p = new Demotion(); \n    p.testDouble();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8429087dbacdd36ac212e559dbe4e50e",
        "type": "source_code",
        "text": "Bird b = new Bird(); // Default!",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c8b236482c6e8a64b0e849d63090d4a3",
        "type": "source_code",
        "text": "//! Bird2 b = new Bird2(); // No default \n    Bird2 b2 = new Bird2(1); \n    Bird2 b3 = new Bird2(1.0);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "a925130b58f30b5917662b9a925c8655",
        "type": "source_code",
        "text": "Banana a = new Banana(), \n           b = new Banana(); \n    a.peel(1); \n    b.peel(2);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "de136b9734de1d761afecb3309fadef8",
        "type": "source_code",
        "text": "i++; \n    return this;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "43a3d5381c424bbefff429e92872c5ff",
        "type": "source_code",
        "text": "System.out.println(\"i = \" + i);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "47c7b94756730489073547b654f51126",
        "type": "source_code",
        "text": "Leaf x = new Leaf(); \n    x.increment().increment().increment().print();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0677ab0eaf38128d23d1658d2b1d4e5a",
        "type": "source_code",
        "text": "Apple peeled = apple.getPeeled(); \n    System.out.println(\"Yummy\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6c9cccaf2940e59e91e68c3b33921216",
        "type": "source_code",
        "text": "// ... remove peel \n    return apple; // Peeled",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "92485c3bc22b2c937f79327f9bbb4f9d",
        "type": "source_code",
        "text": "new Person().eat(new Apple());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5c55aeb09e7b6b167a80dc2ecaf52cc3",
        "type": "source_code",
        "text": "petalCount = petals; \n    print(\"Constructor w/ int arg only, petalCount= \" \n      + petalCount);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ab97e64f9e552749a8c209bce83a7167",
        "type": "source_code",
        "text": "print(\"Constructor w/ String arg only, s = \" + ss); \n    s = ss;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "703d73a3af9c48a53b12e8043d6bf41f",
        "type": "source_code",
        "text": "this(petals);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bdd264d97c2cda43fc1df2ae7afa232c",
        "type": "source_code",
        "text": "this(s); // Can\u2019t call two! \n    this.s = s; // Another use of \"this\" \n    print(\"String & int args\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4340faab16c7c39148509c50947c658a",
        "type": "source_code",
        "text": "this(\"hi\", 47); \n    print(\"default constructor (no args)\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "6403ef10f33732d453f4bdf64f7fbc3f",
        "type": "source_code",
        "text": "print(\"petalCount = \" + petalCount + \" s = \"+ s);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5b18cab400812370a44c7a93de3ba3ca",
        "type": "source_code",
        "text": "Flower x = new Flower(); \n    x.printPetalCount();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d761b8725f9365a39362c1a15c934781",
        "type": "source_code",
        "text": "checkedOut = checkOut;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "43c4e6f8521fb451cff34e2fbe906aac",
        "type": "source_code",
        "text": "checkedOut = false;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4f34956cc3abb706623367798e1ebde",
        "type": "source_code",
        "text": "if(checkedOut) \n      System.out.println(\"Error: checked out\"); \n    // Normally, you\u2019ll also do this: \n    // super.finalize(); // Call the base-class version",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "9f18d93b90ed4e125ad7477e52142df3",
        "type": "source_code",
        "text": "Book novel = new Book(true); \n    // Proper cleanup: \n    novel.checkIn(); \n    // Drop the reference, forget to clean up: \n    new Book(true); \n    // Force garbage collection & finalization: \n    System.gc();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "b09fa867fbd1b028901415e68485b6c5",
        "type": "source_code",
        "text": "print(\"Data type      Initial value\"); \n    print(\"boolean        \" + t); \n    print(\"char           [\" + c + \"]\"); \n    print(\"byte           \" + b); \n    print(\"short          \" + s); \n    print(\"int            \" + i); \n    print(\"long           \" + l); \n    print(\"float          \" + f); \n    print(\"double         \" + d); \n    print(\"reference      \" + reference);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "9c753f2a50877577688f1f03fa6d996c",
        "type": "source_code",
        "text": "InitialValues iv = new InitialValues(); \n    iv.printInitialValues(); \n    /* You could also say: \n    new InitialValues().printInitialValues(); \n    */",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "3a5dcb943d6bc607c6b2658350526bc5",
        "type": "source_code",
        "text": "Initial value",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "68934a3e9455fa72420237eb05902327",
        "type": "source_code",
        "text": "false",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fa9497f5acccafcc3e6019657bdc5eb1",
        "type": "source_code",
        "text": "[ ]",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cfcd208495d565ef66e7dff9f98764da",
        "type": "source_code",
        "text": "0",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "cfcd208495d565ef66e7dff9f98764da",
        "type": "source_code",
        "text": "0",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "cfcd208495d565ef66e7dff9f98764da",
        "type": "source_code",
        "text": "0",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "cfcd208495d565ef66e7dff9f98764da",
        "type": "source_code",
        "text": "0",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "30565a8911a6bb487e3745c0ea3c8224",
        "type": "source_code",
        "text": "0.0",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "30565a8911a6bb487e3745c0ea3c8224",
        "type": "source_code",
        "text": "0.0",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "37a6259cc0c1dae299a7866489dff0bd",
        "type": "source_code",
        "text": "null",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5944e01c747044613a7d9a66f9548cbd",
        "type": "source_code",
        "text": "// Show that we\u2019re in the constructor: \n    print(\"House()\"); \n    w3 = new Window(33); // Reinitialize w3",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "4b1dabbd3f6ac462ac7441a289f6ec01",
        "type": "source_code",
        "text": "House h = new House(); \n    h.f(); // Shows that construction is done",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "7332c73ff7d9e3b8db3bf1162d3c7099",
        "type": "source_code",
        "text": "print(\"Bowl(\" + marker + \")\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "85192f3eb4c6e086f76d46ff94f3033f",
        "type": "source_code",
        "text": "print(\"f1(\" + marker + \")\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "622ff8cb46c973cca1da4764535e42ca",
        "type": "source_code",
        "text": "print(\"Table()\"); \n    bowl2.f1(1);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "375a02204953db04538ebc4990157523",
        "type": "source_code",
        "text": "print(\"f2(\" + marker + \")\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0593e5a7c3c67558526c00a38bd19280",
        "type": "source_code",
        "text": "print(\"Cupboard()\"); \n    bowl4.f1(2);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "439cf55042a4f7f2f1e1ccbbbc956f43",
        "type": "source_code",
        "text": "print(\"f3(\" + marker + \")\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c2a266b9a66419f28dc5eb7b5064ef70",
        "type": "source_code",
        "text": "print(\"Creating new Cupboard() in main\"); \n    new Cupboard(); \n    print(\"Creating new Cupboard() in main\"); \n    new Cupboard(); \n    table.f2(1); \n    cupboard.f3(1);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2e16a3de256a6737b30f9256b0ca005c",
        "type": "source_code",
        "text": "i = 47;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e96767a60f54ff657f0659a7b9f0931d",
        "type": "source_code",
        "text": "print(\"Cup(\" + marker + \")\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5d7faf66b9024b31e0004a3935ce732a",
        "type": "source_code",
        "text": "print(\"f(\" + marker + \")\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5ddfb748ea7566635ce9ef84b484f85b",
        "type": "source_code",
        "text": "cup1 = new Cup(1); \n    cup2 = new Cup(2);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fd33bdd267946e5e2eb831ece85e4df7",
        "type": "source_code",
        "text": "print(\"Cups()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5e7b84e41844e476921e8bf2edf3dc4c",
        "type": "source_code",
        "text": "print(\"Inside main()\"); \n    Cups.cup1.f(99);  // (1)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2e96c42e40754c96e55f865c24f4a5a6",
        "type": "source_code",
        "text": "print(\"Mug(\" + marker + \")\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5d7faf66b9024b31e0004a3935ce732a",
        "type": "source_code",
        "text": "print(\"f(\" + marker + \")\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a685c77f78a369842146facbff4d8fda",
        "type": "source_code",
        "text": "mug1 = new Mug(1); \n    mug2 = new Mug(2); \n    print(\"mug1 & mug2 initialized\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "331b4cf6e3258b8b4ffeb692bac83701",
        "type": "source_code",
        "text": "print(\"Mugs()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f3e82c49d9aa6acda0ea3487d2edfef9",
        "type": "source_code",
        "text": "print(\"Mugs(int)\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "245cf1841170226d324789b581926441",
        "type": "source_code",
        "text": "print(\"Inside main()\"); \n    new Mugs(); \n    print(\"new Mugs() completed\"); \n    new Mugs(1); \n    print(\"new Mugs(1) completed\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e1181cb2f3b680e724fca3c6bfef492a",
        "type": "source_code",
        "text": "int[] a1 = { 1, 2, 3, 4, 5 }; \n    int[] a2; \n    a2 = a1; \n    for(int i = 0; i < a2.length; i++) \n      a2[i] = a2[i] + 1; \n    for(int i = 0; i < a1.length; i++) \n      print(\"a1[\" + i + \"] = \" + a1[i]);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "bc14a6afb462d13766e04cbdfb9a9915",
        "type": "source_code",
        "text": "int[] a; \n    Random rand = new Random(47); \n    a = new int[rand.nextInt(20)]; \n    print(\"length of a = \" + a.length); \n    print(Arrays.toString(a));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9127811de7ebdd0898e4916aa601f0c3",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    Integer[] a = new Integer[rand.nextInt(20)]; \n    print(\"length of a = \" + a.length); \n    for(int i = 0; i < a.length; i++) \n      a[i] = rand.nextInt(500); // Autoboxing \n    print(Arrays.toString(a));",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "a6f455e68bad2092096487259060d8b5",
        "type": "source_code",
        "text": "Integer[] a = {",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c49995a9bb61401f052d08f51a8d9a9b",
        "type": "source_code",
        "text": "new Integer(1), \n      new Integer(2), \n      3, // Autoboxing \n    }; \n    Integer[] b = new Integer[]{ \n      new Integer(1), \n      new Integer(2), \n      3, // Autoboxing \n    }; \n    System.out.println(Arrays.toString(a)); \n    System.out.println(Arrays.toString(b));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6bd9a37ac1b222c641eb95aded0e7f52",
        "type": "source_code",
        "text": "Other.main(new String[]{ \"fiddle\", \"de\", \"dum\" });",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9c5abb8e8ea842106138e0fe14ab59d0",
        "type": "source_code",
        "text": "for(String s : args) \n      System.out.print(s + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d484718c111bd3e5a458bca015b469e9",
        "type": "source_code",
        "text": "for(Object obj : args) \n      System.out.print(obj + \" \"); \n    System.out.println();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "7169929d5cb5a2aff98f74cf992899ad",
        "type": "source_code",
        "text": "printArray(new Object[]{ \n      new Integer(47), new Float(3.14), new Double(11.11) \n    }); \n    printArray(new Object[]{\"one\", \"two\", \"three\" }); \n    printArray(new Object[]{new A(), new A(), new A()});",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d484718c111bd3e5a458bca015b469e9",
        "type": "source_code",
        "text": "for(Object obj : args) \n      System.out.print(obj + \" \"); \n    System.out.println();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bf2fbcd3c440da11fd1bee77c05fb386",
        "type": "source_code",
        "text": "// Can take individual elements: \n    printArray(new Integer(47), new Float(3.14), \n      new Double(11.11)); \n    printArray(47, 3.14F, 11.11); \n    printArray(\"one\", \"two\", \"three\"); \n    printArray(new A(), new A(), new A()); \n    // Or an array:",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "d40e2924f813bd03b662a0f1fff1b042",
        "type": "source_code",
        "text": "printArray((Object[])new Integer[]{ 1, 2, 3, 4 }); \n    printArray(); // Empty list is OK",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7553174193a732609bf28f801b2fcdd5",
        "type": "source_code",
        "text": "System.out.print(\"required: \" + required + \" \"); \n    for(String s : trailing) \n      System.out.print(s + \" \"); \n    System.out.println();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f3f572c575b9e99afe924a98b0a455dd",
        "type": "source_code",
        "text": "f(1, \"one\"); \n    f(2, \"two\", \"three\"); \n    f(0);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3957dc0ef7b239b8a97c01fd1b1638ba",
        "type": "source_code",
        "text": "System.out.print(args.getClass()); \n    System.out.println(\" length \" + args.length);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3957dc0ef7b239b8a97c01fd1b1638ba",
        "type": "source_code",
        "text": "System.out.print(args.getClass()); \n    System.out.println(\" length \" + args.length);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "44eaafa154e1c5b6071cdc6d6a07a466",
        "type": "source_code",
        "text": "f(\u2018a\u2019); \n    f(); \n    g(1); \n    g(); \n    System.out.println(\"int[]: \" + new int[0].getClass());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7b404edddce3d7d13cfb1e9c63cc4a45",
        "type": "source_code",
        "text": "for(Integer i : args) \n      System.out.print(i + \" \"); \n    System.out.println();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3fefbe7accabdc2a1fbdb8ae6c9c8f28",
        "type": "source_code",
        "text": "f(new Integer(1), new Integer(2)); \n    f(4, 5, 6, 7, 8, 9); \n    f(10, new Integer(11), 12);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4bae9d7be63ba675e4c6c405b8c2c4c5",
        "type": "source_code",
        "text": "System.out.print(\"first\"); \n    for(Character c : args) \n      System.out.print(\" \" + c); \n    System.out.println();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8bcb27ec3d7af9957dab76e54056d3f7",
        "type": "source_code",
        "text": "System.out.print(\"second\"); \n    for(Integer i : args) \n      System.out.print(\" \" + i); \n    System.out.println();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d200d90b8172e0ce066f83edb77df11c",
        "type": "source_code",
        "text": "System.out.println(\"third\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "69609d44e78d476928e99917ea35304c",
        "type": "source_code",
        "text": "f(\u2018a\u2019, \u2018b\u2019, \u2018c\u2019); \n    f(1); \n    f(2, 1); \n    f(0); \n    f(0L); \n    //! f(); // Won\u2019t compile -- ambiguous",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5a428da700a463287bc366976e01513b",
        "type": "source_code",
        "text": "System.out.println(\"first\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9db828a52529be7aba68786374ae5fc2",
        "type": "source_code",
        "text": "System.out.print(\"second\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a23a57ca88eb0cf3665c892c17df5b98",
        "type": "source_code",
        "text": "f(1, \u2018a\u2019); \n    f(\u2018a\u2019, \u2018b\u2019);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5a428da700a463287bc366976e01513b",
        "type": "source_code",
        "text": "System.out.println(\"first\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "968c928ee4fe7c2176e61abcb5b39690",
        "type": "source_code",
        "text": "System.out.println(\"second\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a23a57ca88eb0cf3665c892c17df5b98",
        "type": "source_code",
        "text": "f(1, \u2018a\u2019); \n    f(\u2018a\u2019, \u2018b\u2019);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f770bc1cf63d9597722fa0e181ceffe1",
        "type": "source_code",
        "text": "Spiciness howHot = Spiciness.MEDIUM; \n    System.out.println(howHot);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e8367272c9896d322bdfe71c91017662",
        "type": "source_code",
        "text": "for(Spiciness s : Spiciness.values()) \n      System.out.println(s + \", ordinal \" + s.ordinal());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "41f41c554b1a466d40fde5615dcdb39e",
        "type": "source_code",
        "text": "System.out.print(\"This burrito is \"); \n    switch(degree) { \n      case NOT:    System.out.println(\"not spicy at all.\"); \n                   break; \n      case MILD: \n      case MEDIUM: System.out.println(\"a little hot.\"); \n                   break; \n      case HOT: \n      case FLAMING: \n      default:     System.out.println(\"maybe too hot.\"); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "faeac1aa767d035fdcea6e6b084eb47d",
        "type": "source_code",
        "text": "Burrito \n      plain = new Burrito(Spiciness.NOT), \n      greenChile = new Burrito(Spiciness.MEDIUM), \n      jalapeno = new Burrito(Spiciness.HOT); \n    plain.describe(); \n    greenChile.describe(); \n    jalapeno.describe();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "25fb5d5f282467bce50be4bec8f3cc1d",
        "type": "source_code",
        "text": "java.util.ArrayList list = new java.util.ArrayList();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b6d7eeb1d84351419fc201dee0c3585b",
        "type": "source_code",
        "text": "ArrayList list = new java.util.ArrayList();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7f7cf63937bff8e8e1f47c4a358aa2ff",
        "type": "source_code",
        "text": "access.mypackage.MyClass m = \n      new access.mypackage.MyClass();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "e11ee059dc88260995adf2a565681b3b",
        "type": "source_code",
        "text": "MyClass m = new MyClass();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e6bfdea0270494e22d4bfe715b0b6457",
        "type": "source_code",
        "text": "System.out.println(\"net.mindview.simple.Vector\");",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "4650a80b8ab061b28711481475f07793",
        "type": "source_code",
        "text": "System.out.println(\"net.mindview.simple.List\");",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "9714149602858f805aca8995ae6e4ef2",
        "type": "source_code",
        "text": "Vector v = new Vector(); \n    List l = new List();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "31739f37657da6d6c6fe86cc6cbda7b0",
        "type": "source_code",
        "text": "System.out.println(obj);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d2f808bc8664ce2ebdfc6aabe957104d",
        "type": "source_code",
        "text": "System.out.println();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bed673f8f8595cdac7e79f16aa544dd0",
        "type": "source_code",
        "text": "System.out.print(obj);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "97b0540499c51389e0fcd94d9a073bf8",
        "type": "source_code",
        "text": "return System.out.printf(format, args);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "173c7f44c345ef4d393afd26bf0db535",
        "type": "source_code",
        "text": "print(\"Available from now on!\"); \n    print(100); \n    print(100L); \n    print(3.14159);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d5e5093ebd3d0f818e11994a789b1fb9",
        "type": "source_code",
        "text": "int[] result = new int[n]; \n    for(int i = 0; i < n; i++) \n      result[i] = i; \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "761e7a0c6b821c78434731cd44031971",
        "type": "source_code",
        "text": "int sz = end - start; \n    int[] result = new int[sz]; \n    for(int i = 0; i < sz; i++) \n      result[i] = start + i; \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "714326956da916db2be2df6c8cdb3c5d",
        "type": "source_code",
        "text": "int sz = (end - start)/step; \n    int[] result = new int[sz]; \n    for(int i = 0; i < sz; i++) \n      result[i] = start + (i * step); \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "edbf10499837f19785e769ea9f6b7c88",
        "type": "source_code",
        "text": "Cookie x = new Cookie(); \n    //! x.bite(); // Can\u2019t access",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9777c5bd76c7ec33373793dd3743ca6e",
        "type": "source_code",
        "text": "Pie x = new Pie(); \n    x.f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "25fb6ab01271250af429429ec35fec5d",
        "type": "source_code",
        "text": "return new Sundae();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2fe8d067242032a565095251e52f6aa3",
        "type": "source_code",
        "text": "//! Sundae x = new Sundae(); \n    Sundae x = Sundae.makeASundae();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "f81e4d34fce4e867045572b8b02f0058",
        "type": "source_code",
        "text": "//! bite(); // Can\u2019t access bite",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "0698b8131a18141538b7a2c784ae9b43",
        "type": "source_code",
        "text": "ChocolateChip x = new ChocolateChip(); \n    x.chomp();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0098e2ece1303e56ce8874223ef0b745",
        "type": "source_code",
        "text": "System.out.println(\"Cookie constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "12ecbce3e1ca704c896bfb0a20c98514",
        "type": "source_code",
        "text": "System.out.println(\"bite\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f69a6db9719cf1365b22ffc0ff2f2279",
        "type": "source_code",
        "text": "ChocolateChip2 x = new ChocolateChip2(); \n    x.chomp();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7f5e40fd0b554f560197e90897ad31b5",
        "type": "source_code",
        "text": "return new Soup1();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b1151460c53c61af5d6552abeb6847c3",
        "type": "source_code",
        "text": "return ps1;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e4d5e8e583fe264217162a36d3837b2b",
        "type": "source_code",
        "text": "// Can\u2019t do this! Private constructor: \n    //! Soup1 soup = new Soup1();",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "237a2456239fbf0abbd66e442cb3ccb9",
        "type": "source_code",
        "text": "Soup1 soup = Soup1.makeSoup();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f46aa7ab921e2d10375c3e4d1ec4dc4a",
        "type": "source_code",
        "text": "Soup2.access().f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "afe31ac4bb128e8897d0d9f5889c7750",
        "type": "source_code",
        "text": "System.out.println(\"Creating a packaged class\");",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "6630d2e97550494685d19f69a6c4acad",
        "type": "source_code",
        "text": "PackagedClass pc = new PackagedClass();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "48cd67e352f78596246303b4ced459d7",
        "type": "source_code",
        "text": "System.out.println(\"WaterSource()\"); \n    s = \"Constructed\";",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e70c4df10ef0983b9c8c31bd06b2a2c3",
        "type": "source_code",
        "text": "return",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cee680b9e18d79a04f7f73d1333099f0",
        "type": "source_code",
        "text": "\"valve1 = \" + valve1 + \" \" + \n      \"valve2 = \" + valve2 + \" \" + \n      \"valve3 = \" + valve3 + \" \" + \n      \"valve4 = \" + valve4 + \"\\n\" + \n      \"i = \" + i + \" \" + \"f = \" + f + \" \" + \n      \"source = \" + source;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8670a68068c44345d50c15da2eeb1647",
        "type": "source_code",
        "text": "SprinklerSystem sprinklers = new SprinklerSystem(); \n    System.out.println(sprinklers);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f5f69786957b7d36c1e475050ac5fb21",
        "type": "source_code",
        "text": "print(\"Soap()\"); \n    s = \"Constructed\";",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "99de4ec13c36b72a793587d57895b58e",
        "type": "source_code",
        "text": "s1 = \"Happy\", \n    s2 = \"Happy\", \n    s3, s4;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d5692f3a1c9e2f2e9ccbc881ce320576",
        "type": "source_code",
        "text": "print(\"Inside Bath()\"); \n    s3 = \"Joy\"; \n    toy = 3.14f; \n    castille = new Soap();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4d0723ade824d2b22b75c59b4ee1563a",
        "type": "source_code",
        "text": "if(s4 == null) // Delayed initialization: \n      s4 = \"Joy\"; \n    return \n      \"s1 = \" + s1 + \"\\n\" + \n      \"s2 = \" + s2 + \"\\n\" + \n      \"s3 = \" + s3 + \"\\n\" + \n      \"s4 = \" + s4 + \"\\n\" + \n      \"i = \" + i + \"\\n\" + \n      \"toy = \" + toy + \"\\n\" + \n      \"castille = \" + castille;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "e243778b3856121200afbdefeaae8dc1",
        "type": "source_code",
        "text": "Bath b = new Bath(); \n    print(b);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "037d252cd9c06d45ba06e865bdcaa9a9",
        "type": "source_code",
        "text": "Cleanser x = new Cleanser(); \n    x.dilute(); x.apply(); x.scrub(); \n    print(x);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8944222fb81f7ee8a62ec00f457651cc",
        "type": "source_code",
        "text": "append(\" Detergent.scrub()\"); \n    super.scrub(); // Call base-class version",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d350320f80793490eecd95645cbbd303",
        "type": "source_code",
        "text": "Detergent x = new Detergent(); \n    x.dilute(); \n    x.apply(); \n    x.scrub(); \n    x.foam(); \n    print(x); \n    print(\"Testing base class:\"); \n    Cleanser.main(args);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "a7293696cd467ed08786e6fb7769bc0d",
        "type": "source_code",
        "text": "Cartoon x = new Cartoon();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2a820390797610b1747d340dc9e3d3f6",
        "type": "source_code",
        "text": "print(\"Game constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "a61b83c1bdf30e80eee16a8e4ec964ba",
        "type": "source_code",
        "text": "super(i); \n    print(\"BoardGame constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "0e91b06933fe2e5136cc9b8968d65ec0",
        "type": "source_code",
        "text": "super(11); \n    print(\"Chess constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "fdab6ac8e5b6798345dcb5eb6181b7e5",
        "type": "source_code",
        "text": "Chess x = new Chess();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5a3e6d461a5b8209bcbbf5fc280ccd9f",
        "type": "source_code",
        "text": "SpaceShip protector = new SpaceShip(\"NSEA Protector\"); \n    protector.forward(100);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "703eb6e1ec5bb62045c4b6203b2d84ba",
        "type": "source_code",
        "text": "new SpaceShipControls();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "48dd2b276fcdf83154c38dfbcd063d72",
        "type": "source_code",
        "text": "this.name = name;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "99adeb40ed72aeed1e9a14e107e0e4a2",
        "type": "source_code",
        "text": "controls.back(velocity);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6362ead78dccbf7a2720f26a9f6564f7",
        "type": "source_code",
        "text": "controls.down(velocity);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dc929cb1d4491fafe7600217202e8473",
        "type": "source_code",
        "text": "controls.forward(velocity);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7ec403683c3166923cc8aedd10c3e562",
        "type": "source_code",
        "text": "controls.left(velocity);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "88453c85819466f3b74260103fe8bec8",
        "type": "source_code",
        "text": "controls.right(velocity);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d5b59e7bc66d6341bfcb63a30b79b3c6",
        "type": "source_code",
        "text": "controls.turboBoost();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "262ed99d7b0a5b7b5eb38981f10aed90",
        "type": "source_code",
        "text": "controls.up(velocity);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9c0b27f8e76fd3234f0f74d52dceeac3",
        "type": "source_code",
        "text": "SpaceShipDelegation protector = \n      new SpaceShipDelegation(\"NSEA Protector\"); \n    protector.forward(100);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4bcf519ab3a54ea774b6ae3c56b70fde",
        "type": "source_code",
        "text": "and inheritance",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6dbf619439e3f92f44109ca07989c9ed",
        "type": "source_code",
        "text": "print(\"Plate constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "f8a9d8bc5223e4d1a0d7433dd833e97b",
        "type": "source_code",
        "text": "super(i); \n    print(\"DinnerPlate constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "b7eaa86b24872cd8ba5ac39b96ce26d2",
        "type": "source_code",
        "text": "print(\"Utensil constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "56858595e3e82285bb06dabfa6f06e54",
        "type": "source_code",
        "text": "super(i); \n    print(\"Spoon constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "65a13c2c38d94552cd699b152fed7d67",
        "type": "source_code",
        "text": "super(i); \n    print(\"Fork constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "84e89f1c816e2f5a1abfc25726e2b908",
        "type": "source_code",
        "text": "super(i); \n    print(\"Knife constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "760ecf97525d487116b453ad460a16f3",
        "type": "source_code",
        "text": "print(\"Custom constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "41c555b6c4b715d88e3cf1b1c2b6216c",
        "type": "source_code",
        "text": "super(i + 1); \n    sp = new Spoon(i + 2); \n    frk = new Fork(i + 3); \n    kn = new Knife(i + 4); \n    pl = new DinnerPlate(i + 5); \n    print(\"PlaceSetting constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "872d845281ef0d44dbd3a0c57da59322",
        "type": "source_code",
        "text": "PlaceSetting x = new PlaceSetting(9);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "04056631cc0cc9f716fd5d47ea05f626",
        "type": "source_code",
        "text": "super(i); \n    print(\"Drawing Circle\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "45ccf1dee2f222293af1f969d7ee4cb3",
        "type": "source_code",
        "text": "print(\"Erasing Circle\"); \n    super.dispose();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7355487cbbd28c1e47e6383d21a54b16",
        "type": "source_code",
        "text": "super(i); \n    print(\"Drawing Triangle\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "230613d2add6f50e305c37329da433d8",
        "type": "source_code",
        "text": "print(\"Erasing Triangle\"); \n    super.dispose();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "33ee1c62beda1d7e1ba439937487734e",
        "type": "source_code",
        "text": "super(start); \n    this.start = start; \n    this.end = end; \n    print(\"Drawing Line: \" + start + \", \" + end);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "2ff6d3a20a633f3ac40afc699cd0fa56",
        "type": "source_code",
        "text": "print(\"Erasing Line: \" + start + \", \" + end); \n    super.dispose();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f804727c2510e5bea86394f01d94a9fc",
        "type": "source_code",
        "text": "super(i + 1);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "81257a5ab98aed2682b53e4dc11ddae4",
        "type": "source_code",
        "text": "for(int j = 0; j < lines.length; j++) \n      lines[j] = new Line(j, j*j); \n    c = new Circle(1); \n    t = new Triangle(1); \n    print(\"Combined constructor\");",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "361df9e76fa6f6197c673c813b5b6939",
        "type": "source_code",
        "text": "print(\"CADSystem.dispose()\"); \n    // The order of cleanup is the reverse \n    // of the order of initialization: \n    t.dispose(); \n    c.dispose(); \n    for(int i = lines.length - 1; i >= 0; i--) \n      lines[i].dispose(); \n    super.dispose();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "2d284c7fcddfbb35b24c8f4b1f175c38",
        "type": "source_code",
        "text": "CADSystem x = new CADSystem(47); \n    try { \n      // Code and exception handling... \n    } finally { \n      x.dispose(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6b9ea72b631efa1d6fa033e906de5a83",
        "type": "source_code",
        "text": "print(\"doh(char)\"); \n    return \u2018d\u2019;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0bc52188a93830892a38229d81469873",
        "type": "source_code",
        "text": "print(\"doh(float)\"); \n    return 1.0f;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5f42ba8783473f19e74a75e988f30436",
        "type": "source_code",
        "text": "print(\"doh(Milhouse)\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "201220eef4b5da9800f98763e118fdf5",
        "type": "source_code",
        "text": "Bart b = new Bart(); \n    b.doh(1); \n    b.doh(\u2018x\u2019); \n    b.doh(1.0f);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7e76acd928c671d2b75705d7aff2199e",
        "type": "source_code",
        "text": "b.doh(new Milhouse());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6e0082766da046589c4da6eda8fe8b21",
        "type": "source_code",
        "text": "System.out.println(\"doh(Milhouse)\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "31c8d2f11ee0472c584dc8b8fa75c45d",
        "type": "source_code",
        "text": "vs. inheritance",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "948ee191cd3bfc59ee70261c984f9bbb",
        "type": "source_code",
        "text": "left = new Door(), \n    right = new Door(); // 2-door",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b20ad638b2648aee82d5b9f78cc0c098",
        "type": "source_code",
        "text": "for(int i = 0; i < 4; i++) \n      wheel[i] = new Wheel();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "7ab3b3bf8884eaec252c134a41a19f69",
        "type": "source_code",
        "text": "Car car = new Car(); \n    car.left.window.rollup(); \n    car.wheel[0].inflate(72);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "72863a1e788016fb27ad5466872a6cf0",
        "type": "source_code",
        "text": "return \"I\u2019m a Villain and my name is \" + name;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "43393275a12ee83f464450cd312006e9",
        "type": "source_code",
        "text": "super(name); \n    this.orcNumber = orcNumber;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6ec6ac0adfd6e4a0c1d101a319b79084",
        "type": "source_code",
        "text": "set(name); // Available because it\u2019s protected \n    this.orcNumber = orcNumber;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1073d7cd9027e89139ce301770c45593",
        "type": "source_code",
        "text": "return \"Orc \" + orcNumber + \": \" + super.toString();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f838c8ec7cdde3110c762a629615690c",
        "type": "source_code",
        "text": "Orc orc = new Orc(\"Limburger\", 12); \n    print(orc); \n    orc.change(\"Bob\", 19); \n    print(orc);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fb24a749d504fc7dfc162e0a191422a0",
        "type": "source_code",
        "text": "// ... \n    i.play();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "8515b36b424c3dcbe7a6584608aafdf2",
        "type": "source_code",
        "text": "Wind flute = new Wind(); \n    Instrument.tune(flute); // Upcasting",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e7526502e17951cc39996c93eebcbf27",
        "type": "source_code",
        "text": "return id + \": \" + \"i4 = \" + i4 + \", INT_5 = \" + INT_5;",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "2bc44c3472d9e6c82c7d8e61422c4412",
        "type": "source_code",
        "text": "FinalData fd1 = new FinalData(\"fd1\"); \n    //! fd1.valueOne++; // Error: can\u2019t change value \n    fd1.v2.i++; // Object isn\u2019t constant! \n    fd1.v1 = new Value(9); // OK -- not final \n    for(int i = 0; i < fd1.a.length; i++) \n      fd1.a[i]++; // Object isn\u2019t constant! \n    //! fd1.v2 = new Value(0); // Error: Can\u2019t \n    //! fd1.VAL_3 = new Value(1); // change reference \n    //! fd1.a = new int[3]; \n    print(fd1); \n    print(\"Creating new FinalData\"); \n    FinalData fd2 = new FinalData(\"fd2\"); \n    print(fd1); \n    print(fd2);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "d53792db3738eff2c670bcbb593601d5",
        "type": "source_code",
        "text": "j = 1; // Initialize blank final \n    p = new Poppet(1); // Initialize blank final reference",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5f80c2e5073e63efc08c42d9ba4f01de",
        "type": "source_code",
        "text": "j = x; // Initialize blank final \n    p = new Poppet(x); // Initialize blank final reference",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0798821961f0ae2d2db1b95ca691fec7",
        "type": "source_code",
        "text": "new BlankFinal(); \n    new BlankFinal(47);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3ca77411f2ae8f6f2e77ad8527757eb7",
        "type": "source_code",
        "text": "//! g = new Gizmo(); // Illegal -- g is final",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "0be164683dfb9f03697c584c4bcfd35d",
        "type": "source_code",
        "text": "g = new Gizmo(); // OK -- g not final \n    g.spin();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a936bb309159061dda5ba9addb3ca257",
        "type": "source_code",
        "text": "FinalArguments bf = new FinalArguments();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7adc9819b052113101688cbf90ed9c75",
        "type": "source_code",
        "text": "bf.without(null); \n    bf.with(null);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bd8580879b1527af1b7875714e8923cb",
        "type": "source_code",
        "text": "print(\"OverridingPrivate.f()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dfc8a63bce1820d638074ef738d6a9ef",
        "type": "source_code",
        "text": "print(\"OverridingPrivate.g()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4c22a1b908caf89c5bc1d553276be55e",
        "type": "source_code",
        "text": "print(\"OverridingPrivate2.f()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ee57df4c4afc609e0aad09aded031283",
        "type": "source_code",
        "text": "print(\"OverridingPrivate2.g()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ce0bb5b9f1903a97faed7acc193589b2",
        "type": "source_code",
        "text": "OverridingPrivate2 op2 = new OverridingPrivate2(); \n    op2.f(); \n    op2.g(); \n    // You can upcast: \n    OverridingPrivate op = op2; \n    // But you can\u2019t call the methods: \n    //! op.f(); \n    //! op.g(); \n    // Same here: \n    WithFinals wf = op2; \n    //! wf.f(); \n    //! wf.g();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f3b4f2ce2fce481beccfcedb15ee11b5",
        "type": "source_code",
        "text": "Dinosaur n = new Dinosaur(); \n    n.f(); \n    n.i = 40; \n    n.j++;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "52fec0181ba763a8c2ca5544ea571d96",
        "type": "source_code",
        "text": "class loading",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "94ef7d2973079f121daf5db556c52ac3",
        "type": "source_code",
        "text": "print(\"i = \" + i + \", j = \" + j); \n    j = 39;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "61e3b24469999e97e97d5a75a8559940",
        "type": "source_code",
        "text": "printInit(\"static Insect.x1 initialized\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "26c74c3c69c612c4a7c098d631c60b8d",
        "type": "source_code",
        "text": "print(s); \n    return 47;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "484f12206ce143e77594192c1668796b",
        "type": "source_code",
        "text": "print(\"k = \" + k); \n    print(\"j = \" + j);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e47a828429670e4718c862ec243a6691",
        "type": "source_code",
        "text": "printInit(\"static Beetle.x2 initialized\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d236feb56461b901e5a4e323d615899d",
        "type": "source_code",
        "text": "print(\"Beetle constructor\"); \n    Beetle b = new Beetle();",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "1fbcbce1e61df7098fcec349961d9281",
        "type": "source_code",
        "text": "MIDDLE_C, C_SHARP, B_FLAT; // Etc.",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "d00e484cc147da8db82c8cd4fcf85c72",
        "type": "source_code",
        "text": "print(\"Instrument.play()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "73a8b2cc9dd6a03c85b70ac63bf4246f",
        "type": "source_code",
        "text": "System.out.println(\"Wind.play() \" + n);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1ed7b18f6ff44405505e177be08512c0",
        "type": "source_code",
        "text": "// ... \n    i.play(Note.MIDDLE_C);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "40ec378312c9aa9bd2ff6e2c97b62831",
        "type": "source_code",
        "text": "Wind flute = new Wind(); \n    tune(flute); // Upcasting",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2b7ae7b840ceb6a0d66e23c186d3d921",
        "type": "source_code",
        "text": "print(\"Stringed.play() \" + n);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1ab77fbbcfa5200e694117bb8233b782",
        "type": "source_code",
        "text": "print(\"Brass.play() \" + n);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "39a1dcdee3f558ee7805df19d96dba01",
        "type": "source_code",
        "text": "i.play(Note.MIDDLE_C);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "39a1dcdee3f558ee7805df19d96dba01",
        "type": "source_code",
        "text": "i.play(Note.MIDDLE_C);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "39a1dcdee3f558ee7805df19d96dba01",
        "type": "source_code",
        "text": "i.play(Note.MIDDLE_C);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "3ddfcdf4e2c5f03086482332771c19c4",
        "type": "source_code",
        "text": "Wind flute = new Wind(); \n    Stringed violin = new Stringed(); \n    Brass frenchHorn = new Brass(); \n    tune(flute); // No upcasting \n    tune(violin); \n    tune(frenchHorn);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1ed7b18f6ff44405505e177be08512c0",
        "type": "source_code",
        "text": "// ... \n    i.play(Note.MIDDLE_C);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "24012790c994dcab1eb18d74030da170",
        "type": "source_code",
        "text": "switch(rand.nextInt(3)) { \n      default: \n      case 0: return new Circle(); \n      case 1: return new Square(); \n      case 2: return new Triangle(); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "d737a4a7a8940944b9b120dbf3226ce8",
        "type": "source_code",
        "text": "new RandomShapeGenerator();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6c58b522dd2f5e7013e638147c1eb71b",
        "type": "source_code",
        "text": "Shape[] s = new Shape[9]; \n    // Fill up the array with shapes: \n    for(int i = 0; i < s.length; i++) \n      s[i] = gen.next(); \n    // Make polymorphic method calls: \n    for(Shape shp : s) \n      shp.draw();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "1ed7b18f6ff44405505e177be08512c0",
        "type": "source_code",
        "text": "// ... \n    i.play(Note.MIDDLE_C);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "4c1fbc6d3a43dc0f39df95a3cbad024a",
        "type": "source_code",
        "text": "for(Instrument i : e) \n      tune(i);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9575115749797aa5a3415bdc6f0820d9",
        "type": "source_code",
        "text": "// Upcasting during addition to the array: \n    Instrument[] orchestra = { \n      new Wind(), \n      new Percussion(), \n      new Stringed(), \n      new Brass(), \n      new Woodwind() \n    }; \n    tuneAll(orchestra);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "f8806f544f328f64bbfbf2e789826a19",
        "type": "source_code",
        "text": "PrivateOverride po = new Derived(); \n    po.f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "db8e78a714b5c65fbe85001ba85d3e4c",
        "type": "source_code",
        "text": "Super sup = new Sub(); // Upcast \n    System.out.println(\"sup.field = \" + sup.field + \n      \", sup.getField() = \" + sup.getField()); \n    Sub sub = new Sub(); \n    System.out.println(\"sub.field = \" + \n      sub.field + \", sub.getField() = \" + \n      sub.getField() + \n      \", sub.getSuperField() = \" + \n      sub.getSuperField());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "99f56fb9d6347869297ea45bab5aefc8",
        "type": "source_code",
        "text": "return \"Base staticGet()\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c21ebf40c7d278f573b5a9b623a6cfc2",
        "type": "source_code",
        "text": "return \"Base dynamicGet()\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d2d3ed26466ff8337ff1d3d02082a93d",
        "type": "source_code",
        "text": "return \"Derived staticGet()\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c5f99be01dd0c67317de7d9b78520c7f",
        "type": "source_code",
        "text": "return \"Derived dynamicGet()\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5787a2ad6fcfaaf787dd8ea7d62febc4",
        "type": "source_code",
        "text": "StaticSuper sup = new StaticSub(); // Upcast \n    System.out.println(sup.staticGet()); \n    System.out.println(sup.dynamicGet());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bf2f5725b274e5ad93cd68e62ae57e1b",
        "type": "source_code",
        "text": "new Sandwich();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2c2ff12025c1b081d4ced6a16266045b",
        "type": "source_code",
        "text": "this.s = s; \n    print(\"Creating Characteristic \" + s);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0e0f17e8118f4e1767fde911ac511746",
        "type": "source_code",
        "text": "print(\"disposing Characteristic \" + s);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e9511b0b2fdd96babcb98a90ec7ed5d5",
        "type": "source_code",
        "text": "this.s = s; \n    print(\"Creating Description \" + s);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3c1a55e1ecbfccae8a88aaf64b12b25f",
        "type": "source_code",
        "text": "print(\"disposing Description \" + s);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1e3cfaa610628dddf6510f6beab9a47a",
        "type": "source_code",
        "text": "new Characteristic(\"is alive\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2033fbac946049c7550ed13e8958ad5c",
        "type": "source_code",
        "text": "new Description(\"Basic Living Creature\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a77011f44e66210f2f1f579e310823a8",
        "type": "source_code",
        "text": "print(\"LivingCreature()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9ae692d142ced1e4a21a58825bf77826",
        "type": "source_code",
        "text": "print(\"LivingCreature dispose\"); \n    t.dispose(); \n    p.dispose();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b8fc158caadb42928fca9e72322c94c7",
        "type": "source_code",
        "text": "new Characteristic(\"has heart\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "032bd1b61910f4eed1d951da0dac2460",
        "type": "source_code",
        "text": "new Description(\"Animal not Vegetable\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e8feeb7b5d0212fd8dc059798d079ec0",
        "type": "source_code",
        "text": "print(\"Animal dispose\"); \n    t.dispose(); \n    p.dispose(); \n    super.dispose();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3bc723349ab889100cc82c3546df84f0",
        "type": "source_code",
        "text": "new Characteristic(\"can live in water\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b2c370b6464b54fa406aa70054eca32c",
        "type": "source_code",
        "text": "new Description(\"Both water and land\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "13d4f5b4476f53b448d75dcfa69f21f2",
        "type": "source_code",
        "text": "print(\"Amphibian()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ab3e1c0464f71af9c4761db22e3188e8",
        "type": "source_code",
        "text": "print(\"Amphibian dispose\"); \n    t.dispose(); \n    p.dispose(); \n    super.dispose();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2d8243cee28d14512847a8ce6d60a96e",
        "type": "source_code",
        "text": "print(\"Frog dispose\"); \n    t.dispose(); \n    p.dispose(); \n    super.dispose();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c1f3cc37e8a38489cc5a33ff2f82d7c8",
        "type": "source_code",
        "text": "Frog frog = new Frog(); \n    print(\"Bye!\"); \n    frog.dispose();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b4934f8467c018282892a28d3826dfac",
        "type": "source_code",
        "text": "print(\"Creating \" + this);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6549b5a7be246fadffa3e18a419b27bb",
        "type": "source_code",
        "text": "if(--refcount == 0) \n      print(\"Disposing \" + this);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "44101caafa6a98c31cf584dee93ffacb",
        "type": "source_code",
        "text": "print(\"Creating \" + this); \n    this.shared = shared; \n    this.shared.addRef();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e8ccc41987b356c710300b2f69e73487",
        "type": "source_code",
        "text": "print(\"disposing \" + this); \n    shared.dispose();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e457ad86d3357f17d754ca6f3ea8a751",
        "type": "source_code",
        "text": "Shared shared = new Shared(); \n    Composing[] composing = { new Composing(shared), \n      new Composing(shared), new Composing(shared), \n      new Composing(shared), new Composing(shared) }; \n    for(Composing c : composing) \n      c.dispose();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cbac118f5b81f3d46b70d5f4b4383b91",
        "type": "source_code",
        "text": "print(\"Glyph() before draw()\"); \n    draw(); \n    print(\"Glyph() after draw()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f81d6bf22b3c734e46c91f31d586b8dc",
        "type": "source_code",
        "text": "radius = r; \n    print(\"RoundGlyph.RoundGlyph(), radius = \" + radius);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0933e4e8226f5da08235cb2b55ba31ed",
        "type": "source_code",
        "text": "print(\"RoundGlyph.draw(), radius = \" + radius);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "600a24af8df51e4bb7fbe6dcc89585ef",
        "type": "source_code",
        "text": "new RoundGlyph(5);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ab86120a6fdd4492964258657b8f8212",
        "type": "source_code",
        "text": "Mill m = new Mill(); \n    Grain g = m.process(); \n    System.out.println(g); \n    m = new WheatMill(); \n    g = m.process(); \n    System.out.println(g);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "072fa68228a391ccd723876b8f59c4fc",
        "type": "source_code",
        "text": "Stage stage = new Stage(); \n    stage.performPlay(); \n    stage.change(); \n    stage.performPlay();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d5d05444a7488e96075b179061547eb5",
        "type": "source_code",
        "text": "Useful[] x = { \n      new Useful(), \n      new MoreUseful() \n    }; \n    x[0].f(); \n    x[1].g(); \n    // Compile time: method not found in Useful: \n    //! x[1].u(); \n    ((MoreUseful)x[1]).u(); // Downcast/RTTI \n    ((MoreUseful)x[0]).u(); // Exception thrown",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "06b5da9bb20b3ef8f2ac6790f219533f",
        "type": "source_code",
        "text": "and methods",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ac49615a7dfd98fb79908cd218f63376",
        "type": "source_code",
        "text": "print(\"Wind.play() \" + n);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d094ff2440591f02ac7e819b5b421552",
        "type": "source_code",
        "text": "print(\"Percussion.play() \" + n);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2b7ae7b840ceb6a0d66e23c186d3d921",
        "type": "source_code",
        "text": "print(\"Stringed.play() \" + n);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1ab77fbbcfa5200e694117bb8233b782",
        "type": "source_code",
        "text": "print(\"Brass.play() \" + n);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e49e3f18d682a296644be9e13e6098ad",
        "type": "source_code",
        "text": "print(\"Woodwind.play() \" + n);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1ed7b18f6ff44405505e177be08512c0",
        "type": "source_code",
        "text": "// ... \n    i.play(Note.MIDDLE_C);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "4c1fbc6d3a43dc0f39df95a3cbad024a",
        "type": "source_code",
        "text": "for(Instrument i : e) \n      tune(i);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6864639c4220ee4073cc123dcaea72ad",
        "type": "source_code",
        "text": "// Upcasting during addition to the array: \n    Instrument[] orchestra = { \n      new Wind(), \n      new Percussion(), \n      new Stringed(), \n      new Brass(), \n      new Woodwind() \n    };",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "8bea778fe8b5676d2f5539e69f74b3c4",
        "type": "source_code",
        "text": "tuneAll(orchestra);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5e84ff6689d410d1255df01ba4df5c8c",
        "type": "source_code",
        "text": "print(this + \".play() \" + n);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5e84ff6689d410d1255df01ba4df5c8c",
        "type": "source_code",
        "text": "print(this + \".play() \" + n);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5e84ff6689d410d1255df01ba4df5c8c",
        "type": "source_code",
        "text": "print(this + \".play() \" + n);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1ed7b18f6ff44405505e177be08512c0",
        "type": "source_code",
        "text": "// ... \n    i.play(Note.MIDDLE_C);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "4c1fbc6d3a43dc0f39df95a3cbad024a",
        "type": "source_code",
        "text": "for(Instrument i : e) \n      tune(i);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "90335a5cb256bbcc7e784b868c5e1e12",
        "type": "source_code",
        "text": "// Upcasting during addition to the array: \n    Instrument[] orchestra = { \n      new Wind(), \n      new Percussion(), \n      new Stringed(),",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "18031c7867301a3ae750c34a837a19e4",
        "type": "source_code",
        "text": "new Brass(), \n      new Woodwind() \n    }; \n    tuneAll(orchestra);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f7a42b7b8d3e8f08adc688a8af9d40a1",
        "type": "source_code",
        "text": "return getClass().getSimpleName();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "fdc62e44d4d6da2f0796e9d31edcb3e7",
        "type": "source_code",
        "text": "return ((String)input).toUpperCase();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "03424e019ce02f6ade0b5b9cc82ae487",
        "type": "source_code",
        "text": "return ((String)input).toLowerCase();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2b4dafa41406b18cfc571ca5841b203a",
        "type": "source_code",
        "text": "// The split() argument divides a String into pieces: \n    return Arrays.toString(((String)input).split(\" \"));",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "aae49febd9e036d819a20a67df1eada6",
        "type": "source_code",
        "text": "print(\"Using Processor \" + p.name()); \n    print(p.process(s));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2f1ae9d12c2904b3516903b03bafb036",
        "type": "source_code",
        "text": "\"Disagreement with beliefs is by definition incorrect\";",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "71bd6f928b38b7a946b10235b33efca0",
        "type": "source_code",
        "text": "process(new Upcase(), s); \n    process(new Downcase(), s); \n    process(new Splitter(), s);",
        "programming_language": "TASM",
        "weight": 0.0
    },
    {
        "id": "f7a42b7b8d3e8f08adc688a8af9d40a1",
        "type": "source_code",
        "text": "return getClass().getSimpleName();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "e06ee47a9340c0a700b995c82bd8fcb3",
        "type": "source_code",
        "text": "return input; // Dummy processing",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "40aaf5c3b233a67d3640fb7711477419",
        "type": "source_code",
        "text": "lowCutoff = lowCut; \n    highCutoff = highCut;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "aae49febd9e036d819a20a67df1eada6",
        "type": "source_code",
        "text": "print(\"Using Processor \" + p.name()); \n    print(p.process(s));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f7a42b7b8d3e8f08adc688a8af9d40a1",
        "type": "source_code",
        "text": "return getClass().getSimpleName();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "accf774b2da71e43f912aff76f2b5422",
        "type": "source_code",
        "text": "\"If she weighs the same as a duck, she\u2019s made of wood\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0a4369e5c82ac45dceeb2b7ff15cbd4b",
        "type": "source_code",
        "text": "Apply.process(new Upcase(), s); \n    Apply.process(new Downcase(), s); \n    Apply.process(new Splitter(), s);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fdc62e44d4d6da2f0796e9d31edcb3e7",
        "type": "source_code",
        "text": "return ((String)input).toUpperCase();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "03424e019ce02f6ade0b5b9cc82ae487",
        "type": "source_code",
        "text": "return ((String)input).toLowerCase();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "48eaefced7b1932197c4a5fac7bf693b",
        "type": "source_code",
        "text": "return Arrays.toString(((String)input).split(\" \"));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cbcc0a96a94f208d66cce6047a91e68e",
        "type": "source_code",
        "text": "this.filter = filter;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "252d31b86c8202b099254f5cfa9b38e5",
        "type": "source_code",
        "text": "return filter.process((Waveform)input);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a9a9b90adf7e846b933c9611dcf64c99",
        "type": "source_code",
        "text": "Waveform w = new Waveform(); \n    Apply.process(new FilterAdapter(new LowPass(1.0)), w); \n    Apply.process(new FilterAdapter(new HighPass(2.0)), w); \n    Apply.process( \n      new FilterAdapter(new BandPass(3.0, 4.0)), w);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "35328905f36b4ac9f689d0bf322bcb80",
        "type": "source_code",
        "text": "implements CanFight, CanSwim, CanFly {",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "58507a42fe743bc9d52a7a6848b645d9",
        "type": "source_code",
        "text": "Hero h = new Hero(); \n    t(h); // Treat it as a CanFight \n    u(h); // Treat it as a CanSwim \n    v(h); // Treat it as a CanFly \n    w(h); // Treat it as an ActionCharacter",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4f8f0b69a9b9534f385d4ba67262e72",
        "type": "source_code",
        "text": "with inheritance",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b9909ee3658bd86bd45c683ccc966545",
        "type": "source_code",
        "text": "d.menace(); \n    d.destroy();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "30a1674d0b36430914786e0253c3e0ed",
        "type": "source_code",
        "text": "DangerousMonster barney = new DragonZilla(); \n    u(barney); \n    v(barney); \n    Vampire vlad = new VeryBadVampire(); \n    u(vlad); \n    v(vlad); \n    w(vlad);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fbb4a7468d40084bdea295debcb18590",
        "type": "source_code",
        "text": "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "332c106d4770af2e4a01321dbb9c9d49",
        "type": "source_code",
        "text": "\"abcdefghijklmnopqrstuvwxyz\".toCharArray();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5095766d2638cd0d0cb156f94f1c0eaa",
        "type": "source_code",
        "text": "\"aeiou\".toCharArray();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "66874256b28e4184cb5b7e8cb17b108a",
        "type": "source_code",
        "text": "if(count-- == 0) \n      return -1; // Indicates end of input \n    cb.append(capitals[rand.nextInt(capitals.length)]); \n    for(int i = 0; i < 4; i++) { \n      cb.append(vowels[rand.nextInt(vowels.length)]); \n      cb.append(lowers[rand.nextInt(lowers.length)]); \n    } \n    cb.append(\" \"); \n    return 10; // Number of characters appended",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "55b97b0d1537190084479a6d24f8a678",
        "type": "source_code",
        "text": "Scanner s = new Scanner(new RandomWords(10)); \n    while(s.hasNext()) \n      System.out.println(s.next());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3ce3580505270fbff721baf15e1264b0",
        "type": "source_code",
        "text": "RandomDoubles rd = new RandomDoubles(); \n    for(int i = 0; i < 7; i ++) \n      System.out.print(rd.next() + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e4c0406946c9e5c4d6333b0512abfc61",
        "type": "source_code",
        "text": "JANUARY = 1, FEBRUARY = 2, MARCH = 3, \n    APRIL = 4, MAY = 5, JUNE = 6, JULY = 7, \n    AUGUST = 8, SEPTEMBER = 9, OCTOBER = 10, \n    NOVEMBER = 11, DECEMBER = 12;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "067a42489d23e82da577005d5bbdd48b",
        "type": "source_code",
        "text": "print(RandVals.RANDOM_INT); \n    print(RandVals.RANDOM_LONG); \n    print(RandVals.RANDOM_FLOAT); \n    print(RandVals.RANDOM_DOUBLE);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "1ba4a6eb73d9b10f9e4497822a17ef43",
        "type": "source_code",
        "text": "void f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4d0dafeba3a10afbb3401cf1cc261bf",
        "type": "source_code",
        "text": "public void f() {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4d0dafeba3a10afbb3401cf1cc261bf",
        "type": "source_code",
        "text": "public void f() {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1ba4a6eb73d9b10f9e4497822a17ef43",
        "type": "source_code",
        "text": "void f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4d0dafeba3a10afbb3401cf1cc261bf",
        "type": "source_code",
        "text": "public void f() {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4d0dafeba3a10afbb3401cf1cc261bf",
        "type": "source_code",
        "text": "public void f() {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1ba4a6eb73d9b10f9e4497822a17ef43",
        "type": "source_code",
        "text": "void f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4d0dafeba3a10afbb3401cf1cc261bf",
        "type": "source_code",
        "text": "public void f() {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4d0dafeba3a10afbb3401cf1cc261bf",
        "type": "source_code",
        "text": "public void f() {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "eadae6ebca9dc32dc8b5f937eaca44fc",
        "type": "source_code",
        "text": "dRef = d; \n    dRef.f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1ba4a6eb73d9b10f9e4497822a17ef43",
        "type": "source_code",
        "text": "void f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1ba4a6eb73d9b10f9e4497822a17ef43",
        "type": "source_code",
        "text": "void f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4d0dafeba3a10afbb3401cf1cc261bf",
        "type": "source_code",
        "text": "public void f() {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4d0dafeba3a10afbb3401cf1cc261bf",
        "type": "source_code",
        "text": "public void f() {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bfdae12f430695ecedc17e2c3a1c45aa",
        "type": "source_code",
        "text": "public void g() {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4d0dafeba3a10afbb3401cf1cc261bf",
        "type": "source_code",
        "text": "public void f() {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f667e1b64b1e090669b3bf65bce4a6dc",
        "type": "source_code",
        "text": "public void g() {} \n    class EG implements E.G { \n      public void f() {} \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "9425ddf5b933da18594a6e1d289f599b",
        "type": "source_code",
        "text": "A a = new A(); \n    // Can\u2019t access A.D: \n    //! A.D ad = a.getD(); \n    // Doesn\u2019t return anything but A.D: \n    //! A.DImp2 di2 = a.getD(); \n    // Cannot access a member of the interface: \n    //! a.getD().f(); \n    // Only another A can do anything with getD(): \n    A a2 = new A(); \n    a2.receiveD(a.getD());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ee381f0bc0574aca67a160af75aacf75",
        "type": "source_code",
        "text": "return new Implementation1();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "910d8681c358ef074513b933d75ab5e6",
        "type": "source_code",
        "text": "return new Implementation2();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "32714140e39b7d02d202095e6b588797",
        "type": "source_code",
        "text": "Service s = fact.getService(); \n    s.method1(); \n    s.method2();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f252d45cb7d54aaedeefd3a478d246d1",
        "type": "source_code",
        "text": "serviceConsumer(new Implementation1Factory()); \n    // Implementations are completely interchangeable: \n    serviceConsumer(new Implementation2Factory());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4099770971a6f3fb0c79f8f4e62a8cc2",
        "type": "source_code",
        "text": "print(\"Checkers move \" + moves); \n    return ++moves != MOVES;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "aa5d2e3e4610008ee9ab654eae7af3b6",
        "type": "source_code",
        "text": "print(\"Chess move \" + moves); \n    return ++moves != MOVES;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "87f4479ea9a638e71615e5cfad9782a3",
        "type": "source_code",
        "text": "Game s = factory.getGame(); \n    while(s.move()) \n      ;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ac8ee0e092721443b416ed224b5aaaac",
        "type": "source_code",
        "text": "playGame(new CheckersFactory()); \n    playGame(new ChessFactory());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dd804b0605a3faf18660515a2bf9e234",
        "type": "source_code",
        "text": "private int i = 11; \n    public int value() { return i; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "716f98796c1cc049f9f3c8d3a86be534",
        "type": "source_code",
        "text": "private String label; \n    Destination(String whereTo) { \n      label = whereTo; \n    } \n    String readLabel() { return label; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8b117a09f573bb961b8dbd88b71bb077",
        "type": "source_code",
        "text": "Contents c = new Contents(); \n    Destination d = new Destination(dest); \n    System.out.println(d.readLabel());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1217451bfab658905072ace12bd509dd",
        "type": "source_code",
        "text": "Parcel1 p = new Parcel1(); \n    p.ship(\"Tasmania\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dd804b0605a3faf18660515a2bf9e234",
        "type": "source_code",
        "text": "private int i = 11; \n    public int value() { return i; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "716f98796c1cc049f9f3c8d3a86be534",
        "type": "source_code",
        "text": "private String label; \n    Destination(String whereTo) { \n      label = whereTo; \n    } \n    String readLabel() { return label; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f3cd8371c8fee0f6e625bb4d232e83d6",
        "type": "source_code",
        "text": "return new Destination(s);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c581dbf528850fd17d0e6b040c6513d1",
        "type": "source_code",
        "text": "return new Contents();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "153deadea48281550d8742497591df02",
        "type": "source_code",
        "text": "Contents c = contents(); \n    Destination d = to(dest); \n    System.out.println(d.readLabel());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "aec3f318627d85d8cc5961ed26e9d141",
        "type": "source_code",
        "text": "Parcel2 p = new Parcel2(); \n    p.ship(\"Tasmania\"); \n    Parcel2 q = new Parcel2(); \n    // Defining references to inner classes: \n    Parcel2.Contents c = q.contents(); \n    Parcel2.Destination d = q.to(\"Borneo\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "c1488e1e89d36aa2a7430ff731a47d63",
        "type": "source_code",
        "text": "if(next < items.length) \n      items[next++] = x;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "52f2aac0b6e20608f9b542b466e98761",
        "type": "source_code",
        "text": "private int i = 0; \n    public boolean end() { return i == items.length; } \n    public Object current() { return items[i]; } \n    public void next() { if(i < items.length) i++; }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "5e092d002c9d511c4037699f7af1e1c6",
        "type": "source_code",
        "text": "return new SequenceSelector();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3c832e4d0d7d4803b80839be09f867a8",
        "type": "source_code",
        "text": "Sequence sequence = new Sequence(10); \n    for(int i = 0; i < 10; i++) \n      sequence.add(Integer.toString(i)); \n    Selector selector = sequence.selector(); \n    while(!selector.end()) { \n      System.out.print(selector.current() + \" \"); \n      selector.next(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8d0756ec9d772090d6737fc4b4746e24",
        "type": "source_code",
        "text": "public DotThis outer() { \n      return DotThis.this; \n      // A plain \"this\" would be Inner\u2019s \"this\" \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e89ba7da22d8f1b9eba7f2bead2766e6",
        "type": "source_code",
        "text": "DotThis dt = new DotThis(); \n    DotThis.Inner dti = dt.inner(); \n    dti.outer().f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "199ead1ec074acb8d589c0e8f188e56d",
        "type": "source_code",
        "text": "DotNew dn = new DotNew(); \n    DotNew.Inner dni = dn.new Inner();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dd804b0605a3faf18660515a2bf9e234",
        "type": "source_code",
        "text": "private int i = 11; \n    public int value() { return i; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "915320afe6b9f2fe7c5ae63b9f2aecb8",
        "type": "source_code",
        "text": "private String label; \n    Destination(String whereTo) { label = whereTo; } \n    String readLabel() { return label; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f03275289850a6b73f69f31d27f11fef",
        "type": "source_code",
        "text": "Parcel3 p = new Parcel3(); \n    // Must use instance of outer class \n    // to create an instance of the inner class: \n    Parcel3.Contents c = p.new Contents(); \n    Parcel3.Destination d = p.new Destination(\"Tasmania\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "dd804b0605a3faf18660515a2bf9e234",
        "type": "source_code",
        "text": "private int i = 11; \n    public int value() { return i; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ebc37539ffd9d2546d7482590d124f3d",
        "type": "source_code",
        "text": "private String label; \n    private PDestination(String whereTo) { \n      label = whereTo; \n    } \n    public String readLabel() { return label; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "14cd9a92297232a878979a0edd26e3e0",
        "type": "source_code",
        "text": "return new PDestination(s);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bb474237d95290bda7c56d60e2ad05ab",
        "type": "source_code",
        "text": "return new PContents();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2bfe8ca3aa9c43ef765145ee432d29a3",
        "type": "source_code",
        "text": "Parcel4 p = new Parcel4(); \n    Contents c = p.contents(); \n    Destination d = p.destination(\"Tasmania\"); \n    // Illegal -- can\u2019t access private class: \n    //! Parcel4.PContents pc = p.new PContents();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "56b5b105d6f45462b2ea40fd78f5962d",
        "type": "source_code",
        "text": "in methods and scopes",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "02a625cf1bbfb14156261b464cf71780",
        "type": "source_code",
        "text": "class PDestination implements Destination {",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "edfc3e48ad664e6b87605232c75ae89a",
        "type": "source_code",
        "text": "private String label; \n      private PDestination(String whereTo) { \n        label = whereTo; \n      } \n      public String readLabel() { return label; } \n    } \n    return new PDestination(s);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "79c752b4c9a930ba2ca7135c397a5561",
        "type": "source_code",
        "text": "Parcel5 p = new Parcel5(); \n    Destination d = p.destination(\"Tasmania\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f1f5fa2ce9b01b53291d85ab7a9c1068",
        "type": "source_code",
        "text": "if(b) { \n      class TrackingSlip { \n        private String id; \n        TrackingSlip(String s) { \n          id = s; \n        } \n        String getSlip() { return id; } \n      } \n      TrackingSlip ts = new TrackingSlip(\"slip\"); \n      String s = ts.getSlip(); \n    } \n    // Can\u2019t use it here! Out of scope: \n    //! TrackingSlip ts = new TrackingSlip(\"x\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0c771bc2dd0acf9b6842f2905211ff07",
        "type": "source_code",
        "text": "Parcel6 p = new Parcel6(); \n    p.track();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "49250cda8c44fea62062e7cca3cd038e",
        "type": "source_code",
        "text": "return new Contents() { // Insert a class definition \n      private int i = 11; \n      public int value() { return i; } \n    }; // Semicolon required in this case",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cd41254c807effa87448665762e707a5",
        "type": "source_code",
        "text": "Parcel7 p = new Parcel7(); \n    Contents c = p.contents();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dd804b0605a3faf18660515a2bf9e234",
        "type": "source_code",
        "text": "private int i = 11; \n    public int value() { return i; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3475653cf8fb127bebd02df5700d2b03",
        "type": "source_code",
        "text": "Parcel7b p = new Parcel7b(); \n    Contents c = p.contents();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2c8811d6dfff1b012cf2953654090944",
        "type": "source_code",
        "text": "// Base constructor call: \n    return new Wrapping(x) { // Pass constructor argument. \n      public int value() { \n        return super.value() * 47; \n      } \n    }; // Semicolon required",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "a94275850b3c166eb3bfae5e4e88d09b",
        "type": "source_code",
        "text": "Parcel8 p = new Parcel8(); \n    Wrapping w = p.wrapping(10);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "92802805df7f7012cb5b2abd920cc279",
        "type": "source_code",
        "text": "return new Destination() { \n      private String label = dest; \n      public String readLabel() { return label; } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a03a5d45278315800a2247b769cf823c",
        "type": "source_code",
        "text": "Parcel9 p = new Parcel9(); \n    Destination d = p.destination(\"Tasmania\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c86c6bba9722a8cabea231c592b417ce",
        "type": "source_code",
        "text": "print(\"Base constructor, i = \" + i);",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "9d79c3852213cf59220cb59204e228f8",
        "type": "source_code",
        "text": "return new Base(i) { \n      { print(\"Inside instance initializer\"); } \n      public void f() { \n        print(\"In anonymous f()\"); \n      } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bd1d020e55d11a999a5d8fb6698342ce",
        "type": "source_code",
        "text": "Base base = getBase(47); \n    base.f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b529962a3faa26bcfe1f6e3dbf93d2ea",
        "type": "source_code",
        "text": "return new Destination() { \n      private int cost; \n      // Instance initialization for each object: \n      { \n        cost = Math.round(price); \n        if(cost > 100) \n          System.out.println(\"Over budget!\"); \n      } \n      private String label = dest; \n      public String readLabel() { return label; } \n    };",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "fccb341c28eb61e9674ec34981d415ff",
        "type": "source_code",
        "text": "Parcel10 p = new Parcel10();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7501ce83eb5ccae7d44ba3797d5370f8",
        "type": "source_code",
        "text": "Destination d = p.destination(\"Tasmania\", 101.395F);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f4a3e1d4ced25c2c2c423be7670a5bde",
        "type": "source_code",
        "text": "new ServiceFactory() { \n      public Service getService() { \n        return new Implementation1(); \n      } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2b26825e433c59f100fac207e841e423",
        "type": "source_code",
        "text": "new ServiceFactory() { \n      public Service getService() { \n        return new Implementation2(); \n      } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "32714140e39b7d02d202095e6b588797",
        "type": "source_code",
        "text": "Service s = fact.getService(); \n    s.method1(); \n    s.method2();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "35bfc86d400bbe3ef4a67c8557501dce",
        "type": "source_code",
        "text": "serviceConsumer(Implementation1.factory); \n    // Implementations are completely interchangeable: \n    serviceConsumer(Implementation2.factory);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4099770971a6f3fb0c79f8f4e62a8cc2",
        "type": "source_code",
        "text": "print(\"Checkers move \" + moves); \n    return ++moves != MOVES;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "7592dfac9f42d352fdc50127cdc4ba7c",
        "type": "source_code",
        "text": "public Game getGame() { return new Checkers(); }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "aa5d2e3e4610008ee9ab654eae7af3b6",
        "type": "source_code",
        "text": "print(\"Chess move \" + moves); \n    return ++moves != MOVES;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "13dad5315ff5d96e14ccb0727ecaf024",
        "type": "source_code",
        "text": "public Game getGame() { return new Chess(); }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "87f4479ea9a638e71615e5cfad9782a3",
        "type": "source_code",
        "text": "Game s = factory.getGame(); \n    while(s.move()) \n      ;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b7b1ecba7eb28e0ad5010ec760eebf7f",
        "type": "source_code",
        "text": "playGame(Checkers.factory); \n    playGame(Chess.factory);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dd804b0605a3faf18660515a2bf9e234",
        "type": "source_code",
        "text": "private int i = 11; \n    public int value() { return i; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6bad51197357739d279e8f8bf99f76ce",
        "type": "source_code",
        "text": "private String label; \n    private ParcelDestination(String whereTo) { \n      label = whereTo; \n    } \n    public String readLabel() { return label; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "95e59031a78450d1b3e88c3f3d9abef6",
        "type": "source_code",
        "text": "// Nested classes can contain other static elements: \n    public static void f() {} \n    static int x = 10; \n    static class AnotherLevel { \n      public static void f() {} \n      static int x = 10; \n    }",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "3e590fc245c91ef75a622a800c4feba2",
        "type": "source_code",
        "text": "return new ParcelDestination(s);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1d82c7c194049846a44b05246136fa0a",
        "type": "source_code",
        "text": "return new ParcelContents();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9ed09a00ce0cc8874c824ae98ea8bfaa",
        "type": "source_code",
        "text": "Contents c = contents(); \n    Destination d = destination(\"Tasmania\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "59e0664ebf22f1772d44780462168bbc",
        "type": "source_code",
        "text": "public void howdy() { \n      System.out.println(\"Howdy!\"); \n    } \n    public static void main(String[] args) { \n      new Test().howdy(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "992058dea6a768ffd6da72ee084631f6",
        "type": "source_code",
        "text": "public static void main(String[] args) { \n      TestBed t = new TestBed(); \n      t.f(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3d109b7dfd34e0ecaa184641bbefec92",
        "type": "source_code",
        "text": "private void g() {} \n    public class B { \n      void h() { \n        g(); \n        f(); \n      } \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3bdacd5113fcbd0372447d0f551750e5",
        "type": "source_code",
        "text": "MNA mna = new MNA(); \n    MNA.A mnaa = mna.new A(); \n    MNA.A.B mnaab = mnaa.new B(); \n    mnaab.h();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "207691350524eb6ec24e92e1bf79eac7",
        "type": "source_code",
        "text": "// Anonymous inner class: \n    return new B() {};",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "f2cce064d38b963a47dad31987f92f67",
        "type": "source_code",
        "text": "X x = new X(); \n    Y y = new Y(); \n    takesA(x); \n    takesA(y); \n    takesB(x); \n    takesB(y.makeB());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "68f9c1ea81605b7324e27f0096ca0099",
        "type": "source_code",
        "text": "Z z = new Z(); \n    takesD(z); \n    takesE(z.makeE());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a99d8684e0e261472e64706911e0ad8b",
        "type": "source_code",
        "text": "i++; \n    print(i);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "39776613aa215db018fbfe69bece53a1",
        "type": "source_code",
        "text": "super.increment(); \n    i++; \n    print(i);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4b475ad48f0a10795680da4ed3ffb6ac",
        "type": "source_code",
        "text": "public void increment() { \n      // Specify outer-class method, otherwise \n      // you\u2019d get an infinite recursion: \n      Callee2.this.increment(); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4cd962d879374c490e0f4972506ddbc3",
        "type": "source_code",
        "text": "return new Closure();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8b657d2996f9edc0a8892b59e2c2abce",
        "type": "source_code",
        "text": "Callee1 c1 = new Callee1(); \n    Callee2 c2 = new Callee2(); \n    MyIncrement.f(c2); \n    Caller caller1 = new Caller(c1); \n    Caller caller2 = new Caller(c2.getCallbackReference()); \n    caller1.go(); \n    caller1.go(); \n    caller2.go(); \n    caller2.go();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "e64a86bbc4559d9e8d9526e6d9638eec",
        "type": "source_code",
        "text": "this.delayTime = delayTime; \n    start();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8a3b717c6f7b8124bcd6385aef4557fd",
        "type": "source_code",
        "text": "eventTime = System.nanoTime() + delayTime;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8166d6c96dfcd045cb81070800f6f75b",
        "type": "source_code",
        "text": "return System.nanoTime() >= eventTime;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "efd10428353757c724cdb5f840a44608",
        "type": "source_code",
        "text": "while(eventList.size() > 0) \n      // Make a copy so you\u2019re not modifying the list \n      // while you\u2019re selecting the elements in it: \n      for(Event e : new ArrayList<Event>(eventList)) \n        if(e.ready()) { \n          System.out.println(e); \n          e.action(); \n          eventList.remove(e); \n        }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "fbee11add0e1a0ae17cb4c33d0e5c75e",
        "type": "source_code",
        "text": "public LightOn(long delayTime) { super(delayTime); } \n    public void action() { \n      // Put hardware control code here to \n      // physically turn on the light. \n      light = true; \n    } \n    public String toString() { return \"Light is on\"; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "affb438e42c1d6e5aa5877aab51c133e",
        "type": "source_code",
        "text": "public LightOff(long delayTime) { super(delayTime); } \n    public void action() { \n      // Put hardware control code here to \n      // physically turn off the light. \n      light = false; \n    } \n    public String toString() { return \"Light is off\"; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cbcc8777799ff3191345a143c627ee26",
        "type": "source_code",
        "text": "public WaterOn(long delayTime) { super(delayTime); } \n    public void action() { \n      // Put hardware control code here. \n      water = true; \n    } \n    public String toString() { \n      return \"Greenhouse water is on\"; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "da2f07fcdc79365a7028ecb74229195b",
        "type": "source_code",
        "text": "public WaterOff(long delayTime) { super(delayTime); } \n    public void action() { \n      // Put hardware control code here. \n      water = false; \n    } \n    public String toString() { \n      return \"Greenhouse water is off\"; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8f0ebcc769fec1501f0a3057a286663c",
        "type": "source_code",
        "text": "public ThermostatNight(long delayTime) { \n      super(delayTime); \n    } \n    public void action() { \n      // Put hardware control code here. \n      thermostat = \"Night\"; \n    } \n    public String toString() { \n      return \"Thermostat on night setting\"; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1a2e1101c2938dab23e2a44dddcb26bf",
        "type": "source_code",
        "text": "public ThermostatDay(long delayTime) {",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a298481008f13bcc506183c1445a6ffb",
        "type": "source_code",
        "text": "super(delayTime); \n    } \n    public void action() { \n      // Put hardware control code here. \n      thermostat = \"Day\"; \n    } \n    public String toString() { \n      return \"Thermostat on day setting\"; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3f2a8a6b720ab16fe9063fe3fa616124",
        "type": "source_code",
        "text": "public Bell(long delayTime) { super(delayTime); } \n    public void action() { \n      addEvent(new Bell(delayTime)); \n    } \n    public String toString() { return \"Bing!\"; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f52b5028a0d879036368bbf0fc32883d",
        "type": "source_code",
        "text": "private Event[] eventList; \n    public Restart(long delayTime, Event[] eventList) { \n      super(delayTime); \n      this.eventList = eventList; \n      for(Event e : eventList) \n        addEvent(e); \n    } \n    public void action() { \n      for(Event e : eventList) { \n        e.start(); // Rerun each event \n        addEvent(e); \n      } \n      start(); // Rerun this Event \n      addEvent(this); \n    } \n    public String toString() { \n      return \"Restarting system\"; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1c9e9e5aa92d6a76622f34f644b64833",
        "type": "source_code",
        "text": "public Terminate(long delayTime) { super(delayTime); } \n    public void action() { System.exit(0); } \n    public String toString() { return \"Terminating\";  }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "64b01bee9a2cd78052aaa361bc17c3fd",
        "type": "source_code",
        "text": "GreenhouseControls gc = new GreenhouseControls(); \n    // Instead of hard-wiring, you could parse \n    // configuration information from a text file here: \n    gc.addEvent(gc.new Bell(900)); \n    Event[] eventList = { \n      gc.new ThermostatNight(0), \n      gc.new LightOn(200), \n      gc.new LightOff(400), \n      gc.new WaterOn(600), \n      gc.new WaterOff(800), \n      gc.new ThermostatDay(1400) \n    };",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "6d609548669b602cb5b3ebfa922db80d",
        "type": "source_code",
        "text": "gc.addEvent(gc.new Restart(2000, eventList)); \n    if(args.length == 1) \n      gc.addEvent( \n        new GreenhouseControls.Terminate( \n          new Integer(args[0]))); \n    gc.run();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "23ad0fde057feb175776b4a989f886dd",
        "type": "source_code",
        "text": "wi.super();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b7ad70398251c2d05fc8385e448d52f1",
        "type": "source_code",
        "text": "WithInner wi = new WithInner(); \n    InheritInner ii = new InheritInner(wi);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f401c6daf8a1dce462c30babb1da9d88",
        "type": "source_code",
        "text": "public Yolk() { print(\"Egg.Yolk()\"); }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c05d4a9f0629c026fe8a04d5b855b5e2",
        "type": "source_code",
        "text": "print(\"New Egg()\"); \n    y = new Yolk();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1287417f9ad8894112da427301609a16",
        "type": "source_code",
        "text": "public Yolk() { print(\"BigEgg.Yolk()\"); }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9863e2a965024703360dedb74cc3f30d",
        "type": "source_code",
        "text": "new BigEgg();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a36b26d15e23811f15e942dfe57176cb",
        "type": "source_code",
        "text": "public Yolk() { print(\"Egg2.Yolk()\"); } \n    public void f() { print(\"Egg2.Yolk.f()\");}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2b573a7b78a43ea596eba32378f98382",
        "type": "source_code",
        "text": "public Yolk() { print(\"BigEgg2.Yolk()\"); } \n    public void f() { print(\"BigEgg2.Yolk.f()\"); }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "150fcea330f07b5c623eb40f7232d215",
        "type": "source_code",
        "text": "Egg2 e2 = new BigEgg2(); \n    e2.g();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "985cc8eaaeda65dab6103e2393b953cb",
        "type": "source_code",
        "text": "// A local inner class: \n    class LocalCounter implements Counter { \n      public LocalCounter() { \n        // Local inner class can have a constructor \n        print(\"LocalCounter()\"); \n      } \n      public int next() { \n        printnb(name); // Access local final \n        return count++; \n      } \n    } \n    return new LocalCounter();",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "6ba5af9d68fa65c340fa0005b5129031",
        "type": "source_code",
        "text": "return new Counter() { \n      // Anonymous inner class cannot have a named \n      // constructor, only an instance initializer: \n      { \n        print(\"Counter()\"); \n      } \n      public int next() { \n        printnb(name); // Access local final \n        return count++; \n      } \n    };",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "1f9f66addeb3dac81961790432156633",
        "type": "source_code",
        "text": "LocalInnerClass lic = new LocalInnerClass(); \n    Counter \n      c1 = lic.getCounter(\"Local inner \"), \n      c2 = lic.getCounter2(\"Anonymous inner \"); \n    for(int i = 0; i < 5; i++) \n      print(c1.next()); \n    for(int i = 0; i < 5; i++)",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "dbecc3bb869b6513c2aa481ff43945a5",
        "type": "source_code",
        "text": "print(c2.next());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c8308b1eba7ba926a61b8fd802194386",
        "type": "source_code",
        "text": "Objects",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6cc4f10fae054aac43916ee8f1298a61",
        "type": "source_code",
        "text": "ArrayList apples = new ArrayList(); \n    for(int i = 0; i < 3; i++) \n      apples.add(new Apple()); \n    // Not prevented from adding an Orange to apples: \n    apples.add(new Orange()); \n    for(int i = 0; i < apples.size(); i++) \n      ((Apple)apples.get(i)).id(); \n      // Orange is detected only at run time",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "b2dce025c987104f755677cddc57929d",
        "type": "source_code",
        "text": "ArrayList<Apple> apples = new ArrayList<Apple>(); \n    for(int i = 0; i < 3; i++) \n      apples.add(new Apple()); \n    // Compile-time error: \n    // apples.add(new Orange()); \n    for(int i = 0; i < apples.size(); i++) \n      System.out.println(apples.get(i).id()); \n    // Using foreach: \n    for(Apple c : apples) \n      System.out.println(c.id());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "9ad94a4b84880ab55eb56a27cd4afe45",
        "type": "source_code",
        "text": "ArrayList<Apple> apples = new ArrayList<Apple>(); \n    apples.add(new GrannySmith());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cbcd8c7945782b691e810aa72385a1d7",
        "type": "source_code",
        "text": "apples.add(new Gala()); \n    apples.add(new Fuji()); \n    apples.add(new Braeburn()); \n    for(Apple c : apples) \n      System.out.println(c);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "455f9eea5cbc96b21c24db27bfa66be4",
        "type": "source_code",
        "text": "Collection<Integer> c = new ArrayList<Integer>(); \n    for(int i = 0; i < 10; i++) \n      c.add(i); // Autoboxing \n    for(Integer i : c) \n      System.out.print(i + \", \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "74ded722fcbdc5520b339a94cb062bab",
        "type": "source_code",
        "text": "Collection<Integer> collection =",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b3f6489c2922969ffaac2ead251017c2",
        "type": "source_code",
        "text": "new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5)); \n    Integer[] moreInts = { 6, 7, 8, 9, 10 }; \n    collection.addAll(Arrays.asList(moreInts)); \n    // Runs significantly faster, but you can\u2019t \n    // construct a Collection this way: \n    Collections.addAll(collection, 11, 12, 13, 14, 15); \n    Collections.addAll(collection, moreInts); \n    // Produces a list \"backed by\" an array: \n    List<Integer> list = Arrays.asList(16, 17, 18, 19, 20); \n    list.set(1, 99); // OK -- modify an element \n    // list.add(21); // Runtime error because the \n                     // underlying array cannot be resized.",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "28282c8b934ad80201e913883007abd2",
        "type": "source_code",
        "text": "List<Snow> snow1 = Arrays.asList( \n      new Crusty(), new Slush(), new Powder());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "766adff583a75635f9fd7461d45522ed",
        "type": "source_code",
        "text": "// Won\u2019t compile: \n    // List<Snow> snow2 = Arrays.asList( \n    //   new Light(), new Heavy()); \n    // Compiler says: \n    // found   : java.util.List<Powder> \n    // required: java.util.List<Snow>",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "b1a5a54f3b3cbdd9c78fb09aa9ca6906",
        "type": "source_code",
        "text": "// Collections.addAll() doesn\u2019t get confused: \n    List<Snow> snow3 = new ArrayList<Snow>(); \n    Collections.addAll(snow3, new Light(), new Heavy());",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "f8fc59520130984c200a330898a1ffb1",
        "type": "source_code",
        "text": "// Give a hint using an \n    // explicit type argument specification: \n    List<Snow> snow4 = Arrays.<Snow>asList( \n       new Light(), new Heavy());",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "8e68cf1fe40ddf7d82b6a801bea78fc3",
        "type": "source_code",
        "text": "collection.add(\"rat\"); \n    collection.add(\"cat\"); \n    collection.add(\"dog\"); \n    collection.add(\"dog\"); \n    return collection;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5edd6ea695f727ed2436ed9ea3e6bf0a",
        "type": "source_code",
        "text": "map.put(\"rat\", \"Fuzzy\"); \n    map.put(\"cat\", \"Rags\"); \n    map.put(\"dog\", \"Bosco\"); \n    map.put(\"dog\", \"Spot\"); \n    return map;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "12317cee32a717533a148abad08b3c7a",
        "type": "source_code",
        "text": "print(fill(new ArrayList<String>())); \n    print(fill(new LinkedList<String>())); \n    print(fill(new HashSet<String>())); \n    print(fill(new TreeSet<String>())); \n    print(fill(new LinkedHashSet<String>())); \n    print(fill(new HashMap<String,String>())); \n    print(fill(new TreeMap<String,String>())); \n    print(fill(new LinkedHashMap<String,String>()));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ad6b6a4bd38e336c683ad9ad96093c84",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    List<Pet> pets = Pets.arrayList(7); \n    print(\"1: \" + pets); \n    Hamster h = new Hamster(); \n    pets.add(h); // Automatically resizes \n    print(\"2: \" + pets); \n    print(\"3: \" + pets.contains(h)); \n    pets.remove(h); // Remove by object \n    Pet p = pets.get(2); \n    print(\"4: \" +  p + \" \" + pets.indexOf(p)); \n    Pet cymric = new Cymric(); \n    print(\"5: \" + pets.indexOf(cymric)); \n    print(\"6: \" + pets.remove(cymric)); \n    // Must be the exact object: \n    print(\"7: \" + pets.remove(p)); \n    print(\"8: \" + pets); \n    pets.add(3, new Mouse()); // Insert at an index",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1dba1126456f6d1281076f2f421b7611",
        "type": "source_code",
        "text": "print(\"9: \" + pets); \n    List<Pet> sub = pets.subList(1, 4); \n    print(\"subList: \" + sub); \n    print(\"10: \" + pets.containsAll(sub)); \n    Collections.sort(sub); // In-place sort \n    print(\"sorted subList: \" + sub); \n    // Order is not important in containsAll(): \n    print(\"11: \" + pets.containsAll(sub)); \n    Collections.shuffle(sub, rand); // Mix it up \n    print(\"shuffled subList: \" + sub); \n    print(\"12: \" + pets.containsAll(sub)); \n    List<Pet> copy = new ArrayList<Pet>(pets); \n    sub = Arrays.asList(pets.get(1), pets.get(4)); \n    print(\"sub: \" + sub); \n    copy.retainAll(sub); \n    print(\"13: \" + copy); \n    copy = new ArrayList<Pet>(pets); // Get a fresh copy \n    copy.remove(2); // Remove by index \n    print(\"14: \" + copy); \n    copy.removeAll(sub); // Only removes exact objects \n    print(\"15: \" + copy); \n    copy.set(1, new Mouse()); // Replace an element \n    print(\"16: \" + copy); \n    copy.addAll(2, sub); // Insert a list in the middle \n    print(\"17: \" + copy); \n    print(\"18: \" + pets.isEmpty()); \n    pets.clear(); // Remove all elements \n    print(\"19: \" + pets); \n    print(\"20: \" + pets.isEmpty()); \n    pets.addAll(Pets.arrayList(4)); \n    print(\"21: \" + pets); \n    Object[] o = pets.toArray(); \n    print(\"22: \" + o[3]); \n    Pet[] pa = pets.toArray(new Pet[0]); \n    print(\"23: \" + pa[3].id());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "65b263832234bbaa7448ccc8d019c568",
        "type": "source_code",
        "text": "List<Pet> pets = Pets.arrayList(12); \n    Iterator<Pet> it = pets.iterator(); \n    while(it.hasNext()) { \n      Pet p = it.next(); \n      System.out.print(p.id() + \":\" + p + \" \"); \n    } \n    System.out.println(); \n    // A simpler approach, when possible: \n    for(Pet p : pets) \n      System.out.print(p.id() + \":\" + p + \" \"); \n    System.out.println();  \n    // An Iterator can also remove elements: \n    it = pets.iterator(); \n    for(int i = 0; i < 6; i++) { \n      it.next(); \n      it.remove(); \n    } \n    System.out.println(pets);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "8a7cb9afb0417262e8254b05c1f33c42",
        "type": "source_code",
        "text": "while(it.hasNext()) { \n      Pet p = it.next(); \n      System.out.print(p.id() + \":\" + p + \" \"); \n    } \n    System.out.println();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2368d1a2766bb119a05b20e0c9fcf0ed",
        "type": "source_code",
        "text": "ArrayList<Pet> pets = Pets.arrayList(8); \n    LinkedList<Pet> petsLL = new LinkedList<Pet>(pets); \n    HashSet<Pet> petsHS = new HashSet<Pet>(pets); \n    TreeSet<Pet> petsTS = new TreeSet<Pet>(pets); \n    display(pets.iterator()); \n    display(petsLL.iterator()); \n    display(petsHS.iterator()); \n    display(petsTS.iterator());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "347a83f40575737e3acf80a778fb2bfa",
        "type": "source_code",
        "text": "List<Pet> pets = Pets.arrayList(8); \n    ListIterator<Pet> it = pets.listIterator(); \n    while(it.hasNext()) \n      System.out.print(it.next() + \", \" + it.nextIndex() + \n        \", \" + it.previousIndex() + \"; \"); \n    System.out.println(); \n    // Backwards: \n    while(it.hasPrevious()) \n      System.out.print(it.previous().id() + \" \"); \n    System.out.println(); \n    System.out.println(pets);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "21e0711023a8dd2dd7845ec019be8a44",
        "type": "source_code",
        "text": "it = pets.listIterator(3); \n    while(it.hasNext()) { \n      it.next(); \n      it.set(Pets.randomPet()); \n    } \n    System.out.println(pets);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "82c3b29423fbd48b256ec36dd1bf8b16",
        "type": "source_code",
        "text": "LinkedList<Pet> pets = \n      new LinkedList<Pet>(Pets.arrayList(5)); \n    print(pets); \n    // Identical: \n    print(\"pets.getFirst(): \" + pets.getFirst()); \n    print(\"pets.element(): \" + pets.element()); \n    // Only differs in empty-list behavior: \n    print(\"pets.peek(): \" + pets.peek()); \n    // Identical; remove and return the first element: \n    print(\"pets.remove(): \" + pets.remove()); \n    print(\"pets.removeFirst(): \" + pets.removeFirst()); \n    // Only differs in empty-list behavior: \n    print(\"pets.poll(): \" + pets.poll()); \n    print(pets); \n    pets.addFirst(new Rat()); \n    print(\"After addFirst(): \" + pets); \n    pets.offer(Pets.randomPet()); \n    print(\"After offer(): \" + pets); \n    pets.add(Pets.randomPet()); \n    print(\"After add(): \" + pets); \n    pets.addLast(new Hamster()); \n    print(\"After addLast(): \" + pets); \n    print(\"pets.removeLast(): \" + pets.removeLast());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0a31873cbf8ac5117ba17f5a12dc78e8",
        "type": "source_code",
        "text": "Stack<String> stack = new Stack<String>(); \n    for(String s : \"My dog has fleas\".split(\" \")) \n      stack.push(s); \n    while(!stack.empty()) \n      System.out.print(stack.pop() + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2dfd6a6dde1bff2fa20aa845da79d1c7",
        "type": "source_code",
        "text": "net.mindview.util.Stack<String> stack = \n      new net.mindview.util.Stack<String>(); \n    for(String s : \"My dog has fleas\".split(\" \")) \n      stack.push(s); \n    while(!stack.empty()) \n      System.out.print(stack.pop() + \" \"); \n    System.out.println(); \n    java.util.Stack<String> stack2 = \n      new java.util.Stack<String>(); \n    for(String s : \"My dog has fleas\".split(\" \")) \n      stack2.push(s); \n    while(!stack2.empty()) \n      System.out.print(stack2.pop() + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f379265f302dd03c701721d6ffc06f36",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    Set<Integer> intset = new HashSet<Integer>(); \n    for(int i = 0; i < 10000; i++) \n      intset.add(rand.nextInt(30)); \n    System.out.println(intset);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c33b9c0961fe4efc1a27f86b98f8b8b2",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    SortedSet<Integer> intset = new TreeSet<Integer>(); \n    for(int i = 0; i < 10000; i++) \n      intset.add(rand.nextInt(30)); \n    System.out.println(intset);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5b41a6cf3c0fac9d9dc8769413a13df0",
        "type": "source_code",
        "text": "Set<String> set1 = new HashSet<String>(); \n    Collections.addAll(set1, \n      \"A B C D E F G H I J K L\".split(\" \")); \n    set1.add(\"M\"); \n    print(\"H: \" + set1.contains(\"H\")); \n    print(\"N: \" + set1.contains(\"N\")); \n    Set<String> set2 = new HashSet<String>(); \n    Collections.addAll(set2, \"H I J K L\".split(\" \")); \n    print(\"set2 in set1: \" + set1.containsAll(set2)); \n    set1.remove(\"H\"); \n    print(\"set1: \" + set1); \n    print(\"set2 in set1: \" + set1.containsAll(set2)); \n    set1.removeAll(set2); \n    print(\"set2 removed from set1: \" + set1); \n    Collections.addAll(set1, \"X Y Z\".split(\" \")); \n    print(\"\u2018X Y Z\u2019 added to set1: \" + set1);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "8eac081d83af5e05e1c021d66eae376b",
        "type": "source_code",
        "text": "Set<String> words = new TreeSet<String>( \n      new TextFile(\"SetOperations.java\", \"\\\\W+\")); \n    System.out.println(words);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "aa7c824ce54e87b7c46eb041bd12258c",
        "type": "source_code",
        "text": "Set<String> words = \n      new TreeSet<String>(String.CASE_INSENSITIVE_ORDER); \n    words.addAll( \n      new TextFile(\"SetOperations.java\", \"\\\\W+\")); \n    System.out.println(words);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "8697f5b39fe8e67410d43532402d8f38",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    Map<Integer,Integer> m = \n      new HashMap<Integer,Integer>(); \n    for(int i = 0; i < 10000; i++) { \n      // Produce a number between 0 and 20: \n      int r = rand.nextInt(20); \n      Integer freq = m.get(r); \n      m.put(r, freq == null ? 1 : freq + 1); \n    } \n    System.out.println(m);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "93565da45b3c186873294d90c6a4b7da",
        "type": "source_code",
        "text": "Map<String,Pet> petMap = new HashMap<String,Pet>(); \n    petMap.put(\"My Cat\", new Cat(\"Molly\")); \n    petMap.put(\"My Dog\", new Dog(\"Ginger\")); \n    petMap.put(\"My Hamster\", new Hamster(\"Bosco\")); \n    print(petMap); \n    Pet dog = petMap.get(\"My Dog\"); \n    print(dog); \n    print(petMap.containsKey(\"My Dog\")); \n    print(petMap.containsValue(dog));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7c9d8983454f23b23a6bfa03323c4c70",
        "type": "source_code",
        "text": "petPeople = new HashMap<Person, List<? extends Pet>>();",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "f5b5f6516229a5a3f4c56d9d283c80cc",
        "type": "source_code",
        "text": "petPeople.put(new Person(\"Dawn\"), \n      Arrays.asList(new Cymric(\"Molly\"),new Mutt(\"Spot\"))); \n    petPeople.put(new Person(\"Kate\"), \n      Arrays.asList(new Cat(\"Shackleton\"), \n        new Cat(\"Elsie May\"), new Dog(\"Margrett\")));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "42cfc15b61b9745406354bb2a6b35356",
        "type": "source_code",
        "text": "petPeople.put(new Person(\"Marilyn\"), \n      Arrays.asList( \n       new Pug(\"Louie aka Louis Snorkelstein Dupree\"), \n       new Cat(\"Stanford aka Stinky el Negro\"), \n       new Cat(\"Pinkola\")));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fb8c1ec70307d4db18799b401cce27ab",
        "type": "source_code",
        "text": "petPeople.put(new Person(\"Luke\"), \n      Arrays.asList(new Rat(\"Fuzzy\"), new Rat(\"Fizzy\"))); \n    petPeople.put(new Person(\"Isaac\"), \n      Arrays.asList(new Rat(\"Freckly\")));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5b6f5b3b7e17d375232d1c5df63188e9",
        "type": "source_code",
        "text": "print(\"People: \" + petPeople.keySet()); \n    print(\"Pets: \" + petPeople.values()); \n    for(Person person : petPeople.keySet()) { \n      print(person + \" has:\"); \n      for(Pet pet : petPeople.get(person)) \n        print(\"    \" + pet); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "9a16310ab663dcf114929b021c604824",
        "type": "source_code",
        "text": "Rat Fuzzy \n    Rat Fizzy",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ca0f44a4c1a33dc58d9363d54f49f95b",
        "type": "source_code",
        "text": "Pug Louie aka Louis Snorkelstein Dupree \n    Cat Stanford aka Stinky el Negro \n    Cat Pinkola",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f00952b05d1c26ad8c8b0c6fbe58d752",
        "type": "source_code",
        "text": "Rat Freckly",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c791cef6fa56447788428730181689b9",
        "type": "source_code",
        "text": "Cymric Molly \n    Mutt Spot",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "670fce2b2df3fd3bad8563fe01e324d0",
        "type": "source_code",
        "text": "Cat Shackleton \n    Cat Elsie May \n    Dog Margrett",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b303f488ee63459e2020dd33ddc4c469",
        "type": "source_code",
        "text": "while(queue.peek() != null) \n      System.out.print(queue.remove() + \" \"); \n    System.out.println();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "dc650296f2fb034f34f0f12ed053f4ac",
        "type": "source_code",
        "text": "Queue<Integer> queue = new LinkedList<Integer>(); \n    Random rand = new Random(47); \n    for(int i = 0; i < 10; i++)",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6a0ef77b2c0bcb5ae871067ffe13f9a4",
        "type": "source_code",
        "text": "queue.offer(rand.nextInt(i + 10)); \n    printQ(queue); \n    Queue<Character> qc = new LinkedList<Character>(); \n    for(char c : \"Brontosaurus\".toCharArray()) \n      qc.offer(c); \n    printQ(qc);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d2b85b17335c9c7c42214d7367b915a6",
        "type": "source_code",
        "text": "PriorityQueue<Integer> priorityQueue = \n      new PriorityQueue<Integer>(); \n    Random rand = new Random(47); \n    for(int i = 0; i < 10; i++) \n      priorityQueue.offer(rand.nextInt(i + 10)); \n    QueueDemo.printQ(priorityQueue);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d8c6fe860959b091dbeac9ea8b992929",
        "type": "source_code",
        "text": "List<Integer> ints = Arrays.asList(25, 22, 20, \n      18, 14, 9, 3, 1, 1, 2, 3, 9, 14, 18, 21, 23, 25); \n    priorityQueue = new PriorityQueue<Integer>(ints); \n    QueueDemo.printQ(priorityQueue); \n    priorityQueue = new PriorityQueue<Integer>( \n        ints.size(), Collections.reverseOrder()); \n    priorityQueue.addAll(ints); \n    QueueDemo.printQ(priorityQueue);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a1815969e72caad581c9fc13a84c08ab",
        "type": "source_code",
        "text": "String fact = \"EDUCATION SHOULD ESCHEW OBFUSCATION\"; \n    List<String> strings = Arrays.asList(fact.split(\"\")); \n    PriorityQueue<String> stringPQ = \n      new PriorityQueue<String>(strings); \n    QueueDemo.printQ(stringPQ); \n    stringPQ = new PriorityQueue<String>( \n      strings.size(), Collections.reverseOrder()); \n    stringPQ.addAll(strings); \n    QueueDemo.printQ(stringPQ);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9f1fc09fa6520672c97888487205001a",
        "type": "source_code",
        "text": "Set<Character> charSet = new HashSet<Character>(); \n    for(char c : fact.toCharArray()) \n      charSet.add(c); // Autoboxing \n    PriorityQueue<Character> characterPQ = \n      new PriorityQueue<Character>(charSet); \n    QueueDemo.printQ(characterPQ);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0f0d5f803d8947af8e9f36c512881086",
        "type": "source_code",
        "text": "A A B C C C D D E E E F H H I I L N N O O O O S S S T T U U U W",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8a7cb9afb0417262e8254b05c1f33c42",
        "type": "source_code",
        "text": "while(it.hasNext()) { \n      Pet p = it.next(); \n      System.out.print(p.id() + \":\" + p + \" \"); \n    } \n    System.out.println();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "83c32d5c79cfe8f1a20adc093fe06fb2",
        "type": "source_code",
        "text": "for(Pet p : pets) \n      System.out.print(p.id() + \":\" + p + \" \"); \n    System.out.println();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8441d1903417ce03839aa87698f7dbbf",
        "type": "source_code",
        "text": "List<Pet> petList = Pets.arrayList(8); \n    Set<Pet> petSet = new HashSet<Pet>(petList); \n    Map<String,Pet> petMap = \n      new LinkedHashMap<String,Pet>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c355f95752c0ebbe3867cfc5ac6bfa6d",
        "type": "source_code",
        "text": "String[] names = (\"Ralph, Eric, Robin, Lacey, \" + \n      \"Britney, Sam, Spot, Fluffy\").split(\", \"); \n    for(int i = 0; i < names.length; i++) \n      petMap.put(names[i], petList.get(i)); \n    display(petList); \n    display(petSet); \n    display(petList.iterator()); \n    display(petSet.iterator()); \n    System.out.println(petMap); \n    System.out.println(petMap.keySet()); \n    display(petMap.values()); \n    display(petMap.values().iterator());",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "ab2e629489e9a91545948a09fa154539",
        "type": "source_code",
        "text": "return new Iterator<Pet>() { \n      private int index = 0; \n      public boolean hasNext() { \n        return index < pets.length; \n      } \n      public Pet next() { return pets[index++]; } \n      public void remove() { // Not implemented \n        throw new UnsupportedOperationException(); \n      }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "2145c1b6992c0d519ad223f91671329b",
        "type": "source_code",
        "text": "};",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7b5c048fa968b9dc24274015f659d88b",
        "type": "source_code",
        "text": "CollectionSequence c = new CollectionSequence(); \n    InterfaceVsIterator.display(c); \n    InterfaceVsIterator.display(c.iterator());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "23bbf440dde148ef2049e6b4ca28fb99",
        "type": "source_code",
        "text": "return new Iterator<Pet>() { \n      private int index = 0; \n      public boolean hasNext() { \n        return index < pets.length; \n      } \n      public Pet next() { return pets[index++]; } \n      public void remove() { // Not implemented \n        throw new UnsupportedOperationException(); \n      } \n    };",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "201b2a60fb5be8733668f8de10b47d2b",
        "type": "source_code",
        "text": "NonCollectionSequence nc = new NonCollectionSequence(); \n    InterfaceVsIterator.display(nc.iterator());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e27ebd6b205363ad217bc79f1d70743b",
        "type": "source_code",
        "text": "Collection<String> cs = new LinkedList<String>(); \n    Collections.addAll(cs, \n      \"Take the long way home\".split(\" \")); \n    for(String s : cs) \n      System.out.print(\"\u2018\" + s + \"\u2018 \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c6d10c0aad5888c30d8c407e140e81ed",
        "type": "source_code",
        "text": "\"we know the Earth to be banana-shaped.\").split(\" \");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dceade25b032baf42e3816b030831b11",
        "type": "source_code",
        "text": "return new Iterator<String>() { \n      private int index = 0; \n      public boolean hasNext() { \n        return index < words.length; \n      } \n      public String next() { return words[index++]; } \n      public void remove() { // Not implemented \n        throw new UnsupportedOperationException(); \n      } \n    };",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "cefd96f4043c7d69fc72dbf3a754bff2",
        "type": "source_code",
        "text": "for(String s : new IterableClass()) \n      System.out.print(s + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "74f88a859d45cb0c7df725cd102eae60",
        "type": "source_code",
        "text": "for(Map.Entry entry: System.getenv().entrySet()) { \n      System.out.println(entry.getKey() + \": \" + \n        entry.getValue()); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "12e5218f2d71f8ed48404a71ef9f98a2",
        "type": "source_code",
        "text": "for(T t : ib) \n      System.out.print(t + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "869be2b5b4ecc0de5d038a29777104dd",
        "type": "source_code",
        "text": "test(Arrays.asList(1, 2, 3)); \n    String[] strings = { \"A\", \"B\", \"C\" }; \n    // An array works in foreach, but it\u2019s not Iterable: \n    //! test(strings); \n    // You must explicitly convert it to an Iterable: \n    test(Arrays.asList(strings));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "b7ea8b8662895ae38903af2dd45dc8fa",
        "type": "source_code",
        "text": "return new Iterable<T>() { \n      public Iterator<T> iterator() { \n        return new Iterator<T>() { \n          int current = size() - 1; \n          public boolean hasNext() { return current > -1; } \n          public T next() { return get(current--); } \n          public void remove() { // Not implemented \n            throw new UnsupportedOperationException(); \n          } \n        }; \n      } \n    };",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "297f31441a1b51a04c74c626bd6d165f",
        "type": "source_code",
        "text": "ReversibleArrayList<String> ral = \n      new ReversibleArrayList<String>( \n        Arrays.asList(\"To be or not to be\".split(\" \"))); \n    // Grabs the ordinary iterator via iterator(): \n    for(String s : ral) \n      System.out.print(s + \" \"); \n    System.out.println(); \n    // Hand it the Iterable of your choice \n    for(String s : ral.reversed()) \n      System.out.print(s + \" \");",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "66d66472a08b9962f893a815012fe0d9",
        "type": "source_code",
        "text": "return new Iterable<String>() { \n      public Iterator<String> iterator() { \n        return new Iterator<String>() { \n          int current = words.length - 1; \n          public boolean hasNext() { return current > -1; } \n          public String next() { return words[current--]; } \n          public void remove() { // Not implemented \n            throw new UnsupportedOperationException(); \n          } \n        }; \n      } \n    };",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "fa87bc5c613ff276d8d650d8df541364",
        "type": "source_code",
        "text": "return new Iterable<String>() { \n      public Iterator<String> iterator() { \n        List<String> shuffled = \n          new ArrayList<String>(Arrays.asList(words)); \n        Collections.shuffle(shuffled, new Random(47)); \n        return shuffled.iterator(); \n      } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a0506c4ab647470e0ffa07ae4d53a650",
        "type": "source_code",
        "text": "MultiIterableClass mic = new MultiIterableClass(); \n    for(String s : mic.reversed()) \n      System.out.print(s + \" \"); \n    System.out.println(); \n    for(String s : mic.randomized()) \n      System.out.print(s + \" \"); \n    System.out.println(); \n    for(String s : mic) \n      System.out.print(s + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "329970ab015545f42414e00774cbd292",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    Integer[] ia = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; \n    List<Integer> list1 = \n      new ArrayList<Integer>(Arrays.asList(ia)); \n    System.out.println(\"Before shuffling: \" + list1); \n    Collections.shuffle(list1, rand); \n    System.out.println(\"After shuffling: \" + list1); \n    System.out.println(\"array: \" + Arrays.toString(ia));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "946597443c59d864b97e93ac9f86505d",
        "type": "source_code",
        "text": "List<Integer> list2 = Arrays.asList(ia); \n    System.out.println(\"Before shuffling: \" + list2); \n    Collections.shuffle(list2, rand); \n    System.out.println(\"After shuffling: \" + list2); \n    System.out.println(\"array: \" + Arrays.toString(ia));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "b2d9e7fa6ca4d2b99f8eb84f8001edd8",
        "type": "source_code",
        "text": "ContainerMethodDifferences.main(args);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4800755a86eeca07583b9d725789f75d",
        "type": "source_code",
        "text": "System.out.println(\"Throw SimpleException from f()\"); \n    throw new SimpleException();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "4c24bf932610d1229c15e3d28d1a4c0b",
        "type": "source_code",
        "text": "InheritingExceptions sed = new InheritingExceptions(); \n    try { \n      sed.f(); \n    } catch(SimpleException e) { \n      System.out.println(\"Caught it!\"); \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "39f289a1b72ea14c2ebb06f726b3862d",
        "type": "source_code",
        "text": "System.out.println(\"Throwing MyException from f()\"); \n    throw new MyException();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e7b4a2649e4bf1d3866d798a4caa9371",
        "type": "source_code",
        "text": "System.out.println(\"Throwing MyException from g()\"); \n    throw new MyException(\"Originated in g()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8ac5205c09cfbb830e476e15fa74fa75",
        "type": "source_code",
        "text": "try { \n      f(); \n    } catch(MyException e) { \n      e.printStackTrace(System.out); \n    } \n    try { \n      g(); \n    } catch(MyException e) { \n      e.printStackTrace(System.out); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a9ddaf9a07147dec11168619b98d16ce",
        "type": "source_code",
        "text": "at FullConstructors.f(FullConstructors.java:11) \n        at FullConstructors.main(FullConstructors.java:19)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a8b0f435a9dd1306fbf8acc69afcec47",
        "type": "source_code",
        "text": "at FullConstructors.g(FullConstructors.java:15) \n        at FullConstructors.main(FullConstructors.java:24)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1f6655c0be2381dc9154e8665fd0a800",
        "type": "source_code",
        "text": "Logger.getLogger(\"LoggingException\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b144ea18fd4b9254e8ea9dca2bc12d61",
        "type": "source_code",
        "text": "StringWriter trace = new StringWriter(); \n    printStackTrace(new PrintWriter(trace)); \n    logger.severe(trace.toString());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b06acd19bd29c3eb3906dcad05282e2b",
        "type": "source_code",
        "text": "try { \n      throw new LoggingException(); \n    } catch(LoggingException e) { \n      System.err.println(\"Caught \" + e); \n    } \n    try { \n      throw new LoggingException();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "99a7176b213218c557c9e8c168d582c8",
        "type": "source_code",
        "text": "} catch(LoggingException e) { \n      System.err.println(\"Caught \" + e); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "55dd994cc4825d9b500786d58477e4ea",
        "type": "source_code",
        "text": "at LoggingExceptions.main(LoggingExceptions.java:19)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2d2e72f0803e45145a950d1fd97f51a2",
        "type": "source_code",
        "text": "at LoggingExceptions.main(LoggingExceptions.java:24)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f2d86e8c0bab8550642afc224a0c6b8f",
        "type": "source_code",
        "text": "Logger.getLogger(\"LoggingExceptions2\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "915c7a7c175a65d94719d33903352957",
        "type": "source_code",
        "text": "StringWriter trace = new StringWriter(); \n    e.printStackTrace(new PrintWriter(trace)); \n    logger.severe(trace.toString());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5f588586f41daba6e2d841c067a41c96",
        "type": "source_code",
        "text": "try { \n      throw new NullPointerException(); \n    } catch(NullPointerException e) { \n      logException(e); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c6d7154294d7df9e960d2544dc0c16e4",
        "type": "source_code",
        "text": "at LoggingExceptions2.main(LoggingExceptions2.java:16)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "67941738bac78818560b9ddf3ad4a502",
        "type": "source_code",
        "text": "super(msg); \n    this.x = x;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fbd78769cdb9d1cb3d59e478d52e01cc",
        "type": "source_code",
        "text": "return \"Detail Message: \"+ x + \" \"+ super.getMessage();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4ccc0bf73d76beea929ed0ece97401a5",
        "type": "source_code",
        "text": "print(\"Throwing MyException2 from f()\"); \n    throw new MyException2();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5e659acc2a04069977ca894db40ca6d6",
        "type": "source_code",
        "text": "print(\"Throwing MyException2 from g()\"); \n    throw new MyException2(\"Originated in g()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c57c13ce8ac75a2ac85a96212615391d",
        "type": "source_code",
        "text": "print(\"Throwing MyException2 from h()\"); \n    throw new MyException2(\"Originated in h()\", 47);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "95694bb3fb35ad33fc994a630b202278",
        "type": "source_code",
        "text": "try { \n      f(); \n    } catch(MyException2 e) { \n      e.printStackTrace(System.out); \n    } \n    try { \n      g(); \n    } catch(MyException2 e) { \n      e.printStackTrace(System.out); \n    } \n    try { \n      h(); \n    } catch(MyException2 e) { \n      e.printStackTrace(System.out); \n      System.out.println(\"e.val() = \" + e.val()); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3b427d748a68a6d9c8bf16af1dcc174d",
        "type": "source_code",
        "text": "at ExtraFeatures.f(ExtraFeatures.java:22) \n        at ExtraFeatures.main(ExtraFeatures.java:34)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "03a4d088ede55fd7d4650e3f09f4122c",
        "type": "source_code",
        "text": "at ExtraFeatures.g(ExtraFeatures.java:26) \n        at ExtraFeatures.main(ExtraFeatures.java:39)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b45b987d9f5443ff16be3be5029b0cfc",
        "type": "source_code",
        "text": "at ExtraFeatures.h(ExtraFeatures.java:30) \n        at ExtraFeatures.main(ExtraFeatures.java:44)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "37e3a92d8ae4e6086383355c2abdc420",
        "type": "source_code",
        "text": "try { \n      throw new Exception(\"My Exception\"); \n    } catch(Exception e) { \n      print(\"Caught Exception\"); \n      print(\"getMessage():\" + e.getMessage()); \n      print(\"getLocalizedMessage():\" + \n        e.getLocalizedMessage()); \n      print(\"toString():\" + e); \n      print(\"printStackTrace():\"); \n      e.printStackTrace(System.out); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "35495cdfb509ce8a9dda8a222817bf33",
        "type": "source_code",
        "text": "at ExceptionMethods.main(ExceptionMethods.java:8)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "37a4ebb103188cd1d147ed3cbf77979a",
        "type": "source_code",
        "text": "// Generate an exception to fill in the stack trace \n    try { \n      throw new Exception(); \n    } catch (Exception e) { \n      for(StackTraceElement ste : e.getStackTrace()) \n        System.out.println(ste.getMethodName()); \n    }",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "9d3acd76c6f7c8e674f3e41f803892a3",
        "type": "source_code",
        "text": "f(); \n    System.out.println(\"--------------------------------\"); \n    g(); \n    System.out.println(\"--------------------------------\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0dde31554c2b7721b1cdad28f23f7ae1",
        "type": "source_code",
        "text": "h();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f9be9512250beb22b707a8c3395f4c88",
        "type": "source_code",
        "text": "System.out.println(\"originating the exception in f()\"); \n    throw new Exception(\"thrown from f()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b5b90c6b3a41fca23d0778708c5c9e33",
        "type": "source_code",
        "text": "try { \n      f(); \n    } catch(Exception e) { \n      System.out.println(\"Inside g(),e.printStackTrace()\"); \n      e.printStackTrace(System.out); \n      throw e; \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f374f16f1514eed6f3b494d57cc0e1f1",
        "type": "source_code",
        "text": "try { \n      f(); \n    } catch(Exception e) { \n      System.out.println(\"Inside h(),e.printStackTrace()\"); \n      e.printStackTrace(System.out); \n      throw (Exception)e.fillInStackTrace(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "eaf6537fd5574ab100f34c4041317856",
        "type": "source_code",
        "text": "try { \n      g(); \n    } catch(Exception e) { \n      System.out.println(\"main: printStackTrace()\"); \n      e.printStackTrace(System.out); \n    } \n    try { \n      h(); \n    } catch(Exception e) { \n      System.out.println(\"main: printStackTrace()\"); \n      e.printStackTrace(System.out); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ac615cd752064d5da935a16010ca8fb8",
        "type": "source_code",
        "text": "at Rethrowing.f(Rethrowing.java:7) \n        at Rethrowing.g(Rethrowing.java:11) \n        at Rethrowing.main(Rethrowing.java:29)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ac615cd752064d5da935a16010ca8fb8",
        "type": "source_code",
        "text": "at Rethrowing.f(Rethrowing.java:7) \n        at Rethrowing.g(Rethrowing.java:11) \n        at Rethrowing.main(Rethrowing.java:29)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a501fca8338209b40604ca8bdb85898d",
        "type": "source_code",
        "text": "at Rethrowing.f(Rethrowing.java:7) \n        at Rethrowing.h(Rethrowing.java:20) \n        at Rethrowing.main(Rethrowing.java:35)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "69cf48ff45967a13a685fd57078dd1dd",
        "type": "source_code",
        "text": "at Rethrowing.h(Rethrowing.java:24) \n        at Rethrowing.main(Rethrowing.java:35)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bf37d6c69069c4e4243888cd178dfc64",
        "type": "source_code",
        "text": "System.out.println(\"originating the exception in f()\"); \n    throw new OneException(\"thrown from f()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "50fabddd1d23a139a032571ff5f872ab",
        "type": "source_code",
        "text": "try { \n      try { \n        f(); \n      } catch(OneException e) { \n        System.out.println( \n          \"Caught in inner try, e.printStackTrace()\"); \n        e.printStackTrace(System.out); \n        throw new TwoException(\"from inner try\"); \n      } \n    } catch(TwoException e) { \n      System.out.println( \n        \"Caught in outer try, e.printStackTrace()\"); \n      e.printStackTrace(System.out); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "77bf30f306747d9d6d36209af8d99f07",
        "type": "source_code",
        "text": "at RethrowNew.f(RethrowNew.java:15) \n        at RethrowNew.main(RethrowNew.java:20)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "48d11742a77d4c58c24aa998258c0e89",
        "type": "source_code",
        "text": "at RethrowNew.main(RethrowNew.java:25)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "77a9ba56b3fd3c198bf702991c735a67",
        "type": "source_code",
        "text": "fields = new Object[initialSize][2]; \n    for(int i = 0; i < initialSize; i++) \n      fields[i] = new Object[] { null, null };",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "a1e1d3cf0bda3e8d5b07da9f14b63d58",
        "type": "source_code",
        "text": "StringBuilder result = new StringBuilder(); \n    for(Object[] obj : fields) { \n      result.append(obj[0]); \n      result.append(\": \"); \n      result.append(obj[1]); \n      result.append(\"\\n\"); \n    } \n    return result.toString();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "efb06dc66b3368d00f7061b2aab8ad7d",
        "type": "source_code",
        "text": "for(int i = 0; i < fields.length; i++) \n      if(id.equals(fields[i][0])) \n        return i; \n    return -1;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "f56d2463992ef9f57872ca68027f3f17",
        "type": "source_code",
        "text": "int fieldNum = hasField(id); \n    if(fieldNum == -1) \n      throw new NoSuchFieldException(); \n    return fieldNum;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ad0baabdc6973c407853515a01c76861",
        "type": "source_code",
        "text": "for(int i = 0; i < fields.length; i++) \n      if(fields[i][0] == null) { \n        fields[i][0] = id; \n        return i; \n      } \n    // No empty fields. Add one: \n    Object[][] tmp = new Object[fields.length + 1][2]; \n    for(int i = 0; i < fields.length; i++) \n      tmp[i] = fields[i]; \n    for(int i = fields.length; i < tmp.length; i++) \n      tmp[i] = new Object[] { null, null }; \n    fields = tmp; \n    // Recursive call with expanded fields: \n    return makeField(id);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "3bc130560c162c7e1c44fb35cd318784",
        "type": "source_code",
        "text": "return fields[getFieldNumber(id)][1];",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3606dcce7cead9c7f504222af44bb33a",
        "type": "source_code",
        "text": "if(value == null) { \n      // Most exceptions don\u2019t have a \"cause\" constructor. \n      // In these cases you must use initCause(), \n      // available in all Throwable subclasses. \n      DynamicFieldsException dfe =",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "3927086ff38ed1ae839bc984b0582086",
        "type": "source_code",
        "text": "new DynamicFieldsException(); \n      dfe.initCause(new NullPointerException()); \n      throw dfe; \n    } \n    int fieldNumber = hasField(id); \n    if(fieldNumber == -1) \n      fieldNumber = makeField(id); \n    Object result = null; \n    try { \n      result = getField(id); // Get old value \n    } catch(NoSuchFieldException e) { \n      // Use constructor that takes \"cause\": \n      throw new RuntimeException(e); \n    } \n    fields[fieldNumber][1] = value; \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "fa900a707567376bfa917eba34d2db60",
        "type": "source_code",
        "text": "DynamicFields df = new DynamicFields(3); \n    print(df); \n    try { \n      df.setField(\"d\", \"A value for d\"); \n      df.setField(\"number\", 47); \n      df.setField(\"number2\", 48); \n      print(df); \n      df.setField(\"d\", \"A new value for d\"); \n      df.setField(\"number3\", 11); \n      print(\"df: \" + df); \n      print(\"df.getField(\\\"d\\\") : \" + df.getField(\"d\")); \n      Object field = df.setField(\"d\", null); // Exception \n    } catch(NoSuchFieldException e) { \n      e.printStackTrace(System.out); \n    } catch(DynamicFieldsException e) { \n      e.printStackTrace(System.out); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "5f8d5feb086978a673622d616a08ea4b",
        "type": "source_code",
        "text": "at DynamicFields.setField(DynamicFields.java:64) \n        at DynamicFields.main(DynamicFields.java:94)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3408e629145484f9e4bb9c7bc9c9c1a1",
        "type": "source_code",
        "text": "at DynamicFields.setField(DynamicFields.java:66) \n        ... 1 more",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b84bc4e14ad12236f14eb0d36b4d0060",
        "type": "source_code",
        "text": "throw new RuntimeException(\"From f()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "252e2998ecb98daa520420e02f91e390",
        "type": "source_code",
        "text": "f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "eb739902110d7b3111cf7e94821f08ad",
        "type": "source_code",
        "text": "g();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b4e5c6fa8da540d1e29c01760d98abe8",
        "type": "source_code",
        "text": "at NeverCaught.f(NeverCaught.Java:7) \n        at NeverCaught.g(NeverCaught.Java:10) \n        at NeverCaught.main(NeverCaught.Java:13)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "63f7fba07a472392889362125262756a",
        "type": "source_code",
        "text": "with finally",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "732cf1f5b7332429581715d1ae4d4964",
        "type": "source_code",
        "text": "while(true) { \n      try {",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ab4829230ac24760243f911afde347a4",
        "type": "source_code",
        "text": "// Post-increment is zero first time: \n        if(count++ == 0) \n          throw new ThreeException(); \n        System.out.println(\"No exception\"); \n      } catch(ThreeException e) { \n        System.out.println(\"ThreeException\"); \n      } finally { \n        System.out.println(\"In finally clause\"); \n        if(count == 2) break; // out of \"while\" \n      } \n    }",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "ee0a4ac8714c164d49ce5864c1917c56",
        "type": "source_code",
        "text": "try { \n      sw.on(); \n      // Code that can throw exceptions... \n      f(); \n      sw.off(); \n    } catch(OnOffException1 e) { \n      System.out.println(\"OnOffException1\"); \n      sw.off(); \n    } catch(OnOffException2 e) { \n      System.out.println(\"OnOffException2\"); \n      sw.off(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b172b829ecb9fa6ec6ab37fc99eca7ae",
        "type": "source_code",
        "text": "try { \n      sw.on(); \n      // Code that can throw exceptions... \n      OnOffSwitch.f(); \n    } catch(OnOffException1 e) { \n      System.out.println(\"OnOffException1\"); \n    } catch(OnOffException2 e) { \n      System.out.println(\"OnOffException2\"); \n    } finally { \n      sw.off(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d28d87ec4462e3fe7e99ea2a1a844e61",
        "type": "source_code",
        "text": "print(\"Entering first try block\"); \n    try { \n      print(\"Entering second try block\"); \n      try { \n        throw new FourException(); \n      } finally { \n        print(\"finally in 2nd try block\"); \n      } \n    } catch(FourException e) { \n      System.out.println( \n        \"Caught FourException in 1st try block\"); \n    } finally { \n      System.out.println(\"finally in 1st try block\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "794d23f451b670804df9d8ab706dee48",
        "type": "source_code",
        "text": "print(\"Initialization that requires cleanup\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5792742f6bc90c48a845f805c077587c",
        "type": "source_code",
        "text": "try { \n      print(\"Point 1\"); \n      if(i == 1) return; \n      print(\"Point 2\"); \n      if(i == 2) return; \n      print(\"Point 3\"); \n      if(i == 3) return; \n      print(\"End\"); \n      return; \n    } finally { \n      print(\"Performing cleanup\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0b208c1ebb78e5bead79dbd9b5d33c12",
        "type": "source_code",
        "text": "for(int i = 1; i <= 4; i++) \n      f(i);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1b8f20538aa392f57a7a5c3e601274f4",
        "type": "source_code",
        "text": "return \"A very important exception!\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "74a9456d79e0a7ab45dae1916b235e69",
        "type": "source_code",
        "text": "return \"A trivial exception\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1c48f3d40f9d638977ad01ab99998457",
        "type": "source_code",
        "text": "throw new VeryImportantException();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7de4e0be55e790a8ba5caf85defeeae6",
        "type": "source_code",
        "text": "throw new HoHumException();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5948b526139504aa13ee652d83733b14",
        "type": "source_code",
        "text": "try { \n      LostMessage lm = new LostMessage(); \n      try { \n        lm.f(); \n      } finally { \n        lm.dispose(); \n      } \n    } catch(Exception e) { \n      System.out.println(e); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c948099599575ee4ad6bc1f60b83136b",
        "type": "source_code",
        "text": "try { \n      throw new RuntimeException(); \n    } finally { \n      // Using \u2018return\u2019 inside the finally block \n      // will silence any thrown exception. \n      return; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c840db80e2ed743d8c5f457887270dc9",
        "type": "source_code",
        "text": "// Doesn\u2019t actually have to throw anything",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "0f3793ae1114b7d616e2d822782d255b",
        "type": "source_code",
        "text": "throws RainedOut, BaseballException {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e6928e61bfa59f44ab1dfa53ca329513",
        "type": "source_code",
        "text": "throws Foul, BaseballException {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6b5fd46aa8fa94cc782de0bc03c2f156",
        "type": "source_code",
        "text": "try { \n      StormyInning si = new StormyInning(); \n      si.atBat(); \n    } catch(PopFoul e) { \n      System.out.println(\"Pop foul\"); \n    } catch(RainedOut e) { \n      System.out.println(\"Rained out\"); \n    } catch(BaseballException e) { \n      System.out.println(\"Generic baseball exception\"); \n    } \n    // Strike not thrown in derived version. \n    try { \n      // What happens if you upcast? \n      Inning i = new StormyInning(); \n      i.atBat(); \n      // You must catch the exceptions from the \n      // base-class version of the method: \n    } catch(Strike e) { \n      System.out.println(\"Strike\"); \n    } catch(Foul e) { \n      System.out.println(\"Foul\"); \n    } catch(RainedOut e) { \n      System.out.println(\"Rained out\"); \n    } catch(BaseballException e) { \n      System.out.println(\"Generic baseball exception\"); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1fb7c4347610c388f2f6240e08c69f94",
        "type": "source_code",
        "text": "try { \n      in = new BufferedReader(new FileReader(fname)); \n      // Other code that might throw exceptions \n    } catch(FileNotFoundException e) { \n      System.out.println(\"Could not open \" + fname); \n      // Wasn\u2019t open, so don\u2019t close it \n      throw e; \n    } catch(Exception e) { \n      // All other exceptions must close it \n      try { \n        in.close(); \n      } catch(IOException e2) { \n        System.out.println(\"in.close() unsuccessful\"); \n      } \n      throw e; // Rethrow \n    } finally { \n      // Don\u2019t close it here!!! \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "90c8e1e2b3d3206b4189b7d1ddf9f315",
        "type": "source_code",
        "text": "String s; \n    try { \n      s = in.readLine(); \n    } catch(IOException e) { \n      throw new RuntimeException(\"readLine() failed\"); \n    } \n    return s;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "29e35a80cc3819c0f0bb143476b6f2dc",
        "type": "source_code",
        "text": "try { \n      in.close(); \n      System.out.println(\"dispose() successful\"); \n    } catch(IOException e2) { \n      throw new RuntimeException(\"in.close() failed\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9a9674fcf21da4f9f6d844b9710834f1",
        "type": "source_code",
        "text": "try { \n      InputFile in = new InputFile(\"Cleanup.java\"); \n      try { \n        String s; \n        int i = 1; \n        while((s = in.getLine()) != null) \n          ; // Perform line-by-line processing here... \n      } catch(Exception e) { \n        System.out.println(\"Caught Exception in main\"); \n        e.printStackTrace(System.out); \n      } finally { \n        in.dispose(); \n      } \n    } catch(Exception e) { \n      System.out.println(\"InputFile construction failed\"); \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "3fc0dadb29c904fc06ee6032f47afc38",
        "type": "source_code",
        "text": "System.out.println(\"NeedsCleanup \" + id + \" disposed\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0e82632f00f3c0d7d148cd0b7184df92",
        "type": "source_code",
        "text": "// Section 1: \n    NeedsCleanup nc1 = new NeedsCleanup(); \n    try { \n      // ... \n    } finally { \n      nc1.dispose(); \n    }",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "fb773fbc56acd4667a756033f7933f22",
        "type": "source_code",
        "text": "// Section 2: \n    // If construction cannot fail you can group objects: \n    NeedsCleanup nc2 = new NeedsCleanup(); \n    NeedsCleanup nc3 = new NeedsCleanup(); \n    try { \n      // ... \n    } finally { \n      nc3.dispose(); // Reverse order of construction \n      nc2.dispose(); \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "f48d83bc37121891c2bf4ed63c7aa65e",
        "type": "source_code",
        "text": "// Section 3: \n    // If construction can fail you must guard each one: \n    try { \n      NeedsCleanup2 nc4 = new NeedsCleanup2(); \n      try { \n        NeedsCleanup2 nc5 = new NeedsCleanup2(); \n        try { \n          // ... \n        } finally { \n          nc5.dispose(); \n        } \n      } catch(ConstructionException e) { // nc5 constructor \n        System.out.println(e); \n      } finally { \n        nc4.dispose(); \n      } \n    } catch(ConstructionException e) { // nc4 constructor \n      System.out.println(e); \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "1dd273f886b2bfe06abb024a5d4e492f",
        "type": "source_code",
        "text": "// Catch the exact type: \n    try { \n      throw new Sneeze(); \n    } catch(Sneeze s) { \n      System.out.println(\"Caught Sneeze\"); \n    } catch(Annoyance a) { \n      System.out.println(\"Caught Annoyance\");",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "434e81787e4d52e0acb3c5d3d907bc1c",
        "type": "source_code",
        "text": "} \n    // Catch the base type: \n    try { \n      throw new Sneeze(); \n    } catch(Annoyance a) { \n      System.out.println(\"Caught Annoyance\"); \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "d3094c611e21b3ad549af733e402528a",
        "type": "source_code",
        "text": "// Open the file: \n    FileInputStream file = \n      new FileInputStream(\"MainException.java\"); \n    // Use the file ... \n    // Close the file: \n    file.close();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "362a0a2354f249fbb9a7819782543009",
        "type": "source_code",
        "text": "try { \n      switch(type) { \n        case 0: throw new FileNotFoundException(); \n        case 1: throw new IOException(); \n        case 2: throw new RuntimeException(\"Where am I?\"); \n        default: return; \n      } \n    } catch(Exception e) { // Adapt to unchecked: \n      throw new RuntimeException(e); \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "9488e8acb0a883819b4e878ea4b33b81",
        "type": "source_code",
        "text": "WrapCheckedException wce = new WrapCheckedException(); \n    // You can call throwRuntimeException() without a try",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4d539dcbd3f8389c174a39bbd31af1d5",
        "type": "source_code",
        "text": "// block, and let RuntimeExceptions leave the method: \n    wce.throwRuntimeException(3); \n    // Or you can choose to catch exceptions: \n    for(int i = 0; i < 4; i++) \n      try { \n        if(i < 3) \n          wce.throwRuntimeException(i); \n        else \n          throw new SomeOtherException(); \n      } catch(SomeOtherException e) { \n          print(\"SomeOtherException: \" + e); \n      } catch(RuntimeException re) { \n        try { \n          throw re.getCause(); \n        } catch(FileNotFoundException e) { \n          print(\"FileNotFoundException: \" + e); \n        } catch(IOException e) { \n          print(\"IOException: \" + e); \n        } catch(Throwable e) { \n          print(\"Throwable: \" + e); \n        } \n      }",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "7b4f9f92a5fe24183354f02ffa16d20b",
        "type": "source_code",
        "text": "return s.toUpperCase();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d38a56673e94cdf8e3d012a80146327f",
        "type": "source_code",
        "text": "String q = \"howdy\"; \n    print(q); // howdy \n    String qq = upcase(q); \n    print(qq); // HOWDY \n    print(q); // howdy",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3394d020ae36766dd427b49d9e27bb81",
        "type": "source_code",
        "text": "String mango = \"mango\"; \n    String s = \"abc\" + mango + \"def\" + 47; \n    System.out.println(s);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e8d484c470d3c59b1f502830f03d654f",
        "type": "source_code",
        "text": "ldc #2; //String mango",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "72d9699461a167f8a85603678be98362",
        "type": "source_code",
        "text": "astore_1",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "03f8d609c1edfc59ed939a9283e29efb",
        "type": "source_code",
        "text": "new #3; //class StringBuilder",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0e9f1e8e40bb79e800b0cc9433830cf4",
        "type": "source_code",
        "text": "dup",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1c2486fe65e8aa819e94e9cd73957e85",
        "type": "source_code",
        "text": "invokespecial #4; //StringBuilder.\"<init>\":()",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4bb3dd7e7bebaa337dafa4daad5ced14",
        "type": "source_code",
        "text": "invokevirtual #6; //StringBuilder.append:(String)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "40d9cf4679165e3fdb5cfea93b27762b",
        "type": "source_code",
        "text": "aload_1",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "4bb3dd7e7bebaa337dafa4daad5ced14",
        "type": "source_code",
        "text": "invokevirtual #6; //StringBuilder.append:(String)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2e5c71383cadbcec1502a916b0d2516d",
        "type": "source_code",
        "text": "ldc #7; //String def",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4bb3dd7e7bebaa337dafa4daad5ced14",
        "type": "source_code",
        "text": "invokevirtual #6; //StringBuilder.append:(String)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a7e46c5548d7f4e09441a0be10e50ffc",
        "type": "source_code",
        "text": "bipush 47",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "891b52f4fad0e32bd8d1b6c4f1894f22",
        "type": "source_code",
        "text": "invokevirtual #8; //StringBuilder.append:(I)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "584697bf2493a10dd2ecfa88cf38d62a",
        "type": "source_code",
        "text": "invokevirtual #9; //StringBuilder.toString:()",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b4df193747ed622ba2d26187365ac4a8",
        "type": "source_code",
        "text": "astore_2",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "5d8b2318557e66993aa72b90489b1f79",
        "type": "source_code",
        "text": "getstatic #10; //Field System.out:PrintStream;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "923367067e36e5f6777150ac212e93f6",
        "type": "source_code",
        "text": "aload_2",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "c1025313fd5d076bf72d218de95812cd",
        "type": "source_code",
        "text": "invokevirtual #11; // PrintStream.println:(String)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e70c4df10ef0983b9c8c31bd06b2a2c3",
        "type": "source_code",
        "text": "return",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "65a6dabb77065ba18ff8b8893e6ca519",
        "type": "source_code",
        "text": "String result = \"\"; \n    for(int i = 0; i < fields.length; i++) \n      result += fields[i]; \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "cb21da19c9eba07f832660648a2314b9",
        "type": "source_code",
        "text": "StringBuilder result = new StringBuilder(); \n    for(int i = 0; i < fields.length; i++) \n      result.append(fields[i]); \n    return result.toString();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "16ac8acd6045bbc3a39c12798562aa09",
        "type": "source_code",
        "text": "ldc #2; //String",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b4df193747ed622ba2d26187365ac4a8",
        "type": "source_code",
        "text": "astore_2",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "e80540abed255959197e6619dc02ad66",
        "type": "source_code",
        "text": "iconst_0",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "b0c581a17bf2fed59214d2c75c5f8394",
        "type": "source_code",
        "text": "istore_3",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "fe579ed248bebdcb53bf9e17529a9454",
        "type": "source_code",
        "text": "iload_3",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "40d9cf4679165e3fdb5cfea93b27762b",
        "type": "source_code",
        "text": "aload_1",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "6b657e55f4de16a07d1065e7fe9ee83b",
        "type": "source_code",
        "text": "arraylength",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0cd608d7ee59eaa4860ba95309719104",
        "type": "source_code",
        "text": "if_icmpge 38",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "fe579ed248bebdcb53bf9e17529a9454",
        "type": "source_code",
        "text": "iload_3",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "bf6ef7b13ea5e4cf8bc0e39dc62c53fe",
        "type": "source_code",
        "text": "aaload",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "be161ba84c6568df15e9c35dbcb7c35a",
        "type": "source_code",
        "text": "areturn",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "03f8d609c1edfc59ed939a9283e29efb",
        "type": "source_code",
        "text": "new #3; //class StringBuilder",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0e9f1e8e40bb79e800b0cc9433830cf4",
        "type": "source_code",
        "text": "dup",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "36ad55ef011d5ac0b1d0e39cd14858e9",
        "type": "source_code",
        "text": "invokespecial #4; // StringBuilder.\u201d<init>\u201d:()",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b4df193747ed622ba2d26187365ac4a8",
        "type": "source_code",
        "text": "astore_2",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "e80540abed255959197e6619dc02ad66",
        "type": "source_code",
        "text": "iconst_0",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "b0c581a17bf2fed59214d2c75c5f8394",
        "type": "source_code",
        "text": "istore_3",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "a5200511e8d33975c99a8695f94f89bc",
        "type": "source_code",
        "text": "invokevirtual #5; // StringBuilder.append:()",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b21afc54fb48d153c19101658f4a2a48",
        "type": "source_code",
        "text": "pop",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b025b6db3d0c0d6eaeeeee4cf91d9b8b",
        "type": "source_code",
        "text": "StringBuilder result = new StringBuilder(\"[\"); \n    for(int i = 0; i < 25; i++) { \n      result.append(rand.nextInt(100)); \n      result.append(\", \"); \n    } \n    result.delete(result.length()-2, result.length()); \n    result.append(\"]\"); \n    return result.toString();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e5abed667cfd18c8bcaa5f1ba3abe354",
        "type": "source_code",
        "text": "UsingStringBuilder usb = new UsingStringBuilder(); \n    System.out.println(usb);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "21d5922f837f03a265607cc3919f6ae2",
        "type": "source_code",
        "text": "ArrayList<Coffee> coffees = new ArrayList<Coffee>(); \n    for(Coffee c : new CoffeeGenerator(10)) \n      coffees.add(c); \n    System.out.println(coffees);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "136f5d0b442eee68748fe8d5d14ef61d",
        "type": "source_code",
        "text": "return \" InfiniteRecursion address: \" + this + \"\\n\";",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "cce97ce32f0a822713b1488b1e24017b",
        "type": "source_code",
        "text": "List<InfiniteRecursion> v = \n      new ArrayList<InfiniteRecursion>(); \n    for(int i = 0; i < 10; i++) \n      v.add(new InfiniteRecursion()); \n    System.out.println(v);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "478730a1cf857c2cbe256429135d9a4f",
        "type": "source_code",
        "text": "int x = 5; \n    double y = 5.332542; \n    // The old way: \n    System.out.println(\"Row 1: [\" + x + \" \" + y + \"]\"); \n    // The new way: \n    System.out.format(\"Row 1: [%d %f]\\n\", x, y); \n    // or \n    System.out.printf(\"Row 1: [%d %f]\\n\", x, y);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "140fa851e86bc94d267eced1591b005a",
        "type": "source_code",
        "text": "this.name = name; \n    this.f = f;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "76ab640193d5e3becd36fa20bef82ab5",
        "type": "source_code",
        "text": "f.format(\"%s The Turtle is at (%d,%d)\\n\", name, x, y);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "aca724d85ead565627f7b4e58f21f556",
        "type": "source_code",
        "text": "PrintStream outAlias = System.out; \n    Turtle tommy = new Turtle(\"Tommy\", \n      new Formatter(System.out)); \n    Turtle terry = new Turtle(\"Terry\", \n      new Formatter(outAlias)); \n    tommy.move(0,0); \n    terry.move(4,8); \n    tommy.move(3,4); \n    terry.move(2,5); \n    tommy.move(3,3); \n    terry.move(3,3);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5d5f12b3b8ed0f4b0a650598d9bc0160",
        "type": "source_code",
        "text": "f.format(\"%-15s %5s %10s\\n\", \"Item\", \"Qty\", \"Price\"); \n    f.format(\"%-15s %5s %10s\\n\", \"----\", \"---\", \"-----\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "701149d4432e4e2246deb57f5506e26b",
        "type": "source_code",
        "text": "f.format(\"%-15.15s %5d %10.2f\\n\", name, qty, price); \n    total += price;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "108e249b7419331dad5d33351865e5d1",
        "type": "source_code",
        "text": "f.format(\"%-15s %5s %10.2f\\n\", \"Tax\", \"\", total*0.06); \n    f.format(\"%-15s %5s %10s\\n\", \"\", \"\", \"-----\"); \n    f.format(\"%-15s %5s %10.2f\\n\", \"Total\", \"\", \n      total * 1.06);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "a79334d520980f1a5479976c8a74d824",
        "type": "source_code",
        "text": "Receipt receipt = new Receipt(); \n    receipt.printTitle(); \n    receipt.print(\"Jack\u2019s Magic Beans\", 4, 4.25); \n    receipt.print(\"Princess Peas\", 3, 5.1); \n    receipt.print(\"Three Bears Porridge\", 1, 14.29); \n    receipt.printTotal();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "69f9cecbc64811bbe416771f35a0f0d6",
        "type": "source_code",
        "text": "Qty      Price",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "aa1d7bbe6856c412f6455ce7ff3a5d70",
        "type": "source_code",
        "text": "---      -----",
        "programming_language": "Diff",
        "weight": 0.0
    },
    {
        "id": "991da43e211d57e25718f6605f9d42e3",
        "type": "source_code",
        "text": "4       4.25",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "53f1190c5125e8f4d8c077af23fc1c23",
        "type": "source_code",
        "text": "3       5.10",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "c05f4e6e9847272c489bb7697d32ed10",
        "type": "source_code",
        "text": "1      14.29",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "5f454c582e9e01aeef1ee40e1994c4b9",
        "type": "source_code",
        "text": "1.42 \n                           -----",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "e26bc895e5bb00237e35bd08e101a228",
        "type": "source_code",
        "text": "25.06",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "4a2961c5c0204f0bd186ddc56738f14b",
        "type": "source_code",
        "text": "Conversion Characters",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b7a9f2e5ba56c5c3ed3881d4f20faabd",
        "type": "source_code",
        "text": "d \n    Integral (as decimal) \n      c \n    Unicode character \n      b \n    Boolean value \n      s \n    String \n      f \n    Floating point (as decimal) \n      e \n    Floating point (in scientific notation) \n      x \n    Integral (as hex) \n      h \n    Hash code (as hex) \n    % \n    Literal \"%\"",
        "programming_language": "Matlab",
        "weight": 0.0
    },
    {
        "id": "b16a312c8512933eb5b18be9aa5e1c3c",
        "type": "source_code",
        "text": "Formatter f = new Formatter(System.out);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "942cd9d5c2dcaeceab84fbbfad020c3f",
        "type": "source_code",
        "text": "char u = \u2018a\u2019; \n    System.out.println(\"u = \u2018a\u2019\"); \n    f.format(\"s: %s\\n\", u); \n    // f.format(\"d: %d\\n\", u); \n    f.format(\"c: %c\\n\", u); \n    f.format(\"b: %b\\n\", u); \n    // f.format(\"f: %f\\n\", u); \n    // f.format(\"e: %e\\n\", u); \n    // f.format(\"x: %x\\n\", u); \n    f.format(\"h: %h\\n\", u);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "5122c0639ec868dd19ca2fb41c632128",
        "type": "source_code",
        "text": "int v = 121; \n    System.out.println(\"v = 121\"); \n    f.format(\"d: %d\\n\", v); \n    f.format(\"c: %c\\n\", v); \n    f.format(\"b: %b\\n\", v); \n    f.format(\"s: %s\\n\", v); \n    // f.format(\"f: %f\\n\", v); \n    // f.format(\"e: %e\\n\", v); \n    f.format(\"x: %x\\n\", v); \n    f.format(\"h: %h\\n\", v);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "20d3bcfb52b88626ce363fb5dc782cb3",
        "type": "source_code",
        "text": "BigInteger w = new BigInteger(\"50000000000000\"); \n    System.out.println( \n      \"w = new BigInteger(\\\"50000000000000\\\")\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d0fed6644d03c9c466f086a4d59b3dd3",
        "type": "source_code",
        "text": "f.format(\"d: %d\\n\", w); \n    // f.format(\"c: %c\\n\", w); \n    f.format(\"b: %b\\n\", w); \n    f.format(\"s: %s\\n\", w); \n    // f.format(\"f: %f\\n\", w); \n    // f.format(\"e: %e\\n\", w); \n    f.format(\"x: %x\\n\", w); \n    f.format(\"h: %h\\n\", w);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f805226ee3303c2e409842590a106345",
        "type": "source_code",
        "text": "double x = 179.543; \n    System.out.println(\"x = 179.543\"); \n    // f.format(\"d: %d\\n\", x); \n    // f.format(\"c: %c\\n\", x); \n    f.format(\"b: %b\\n\", x); \n    f.format(\"s: %s\\n\", x); \n    f.format(\"f: %f\\n\", x); \n    f.format(\"e: %e\\n\", x); \n    // f.format(\"x: %x\\n\", x); \n    f.format(\"h: %h\\n\", x);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "89d1410bcbab7eca2b861b99f39af929",
        "type": "source_code",
        "text": "Conversion y = new Conversion(); \n    System.out.println(\"y = new Conversion()\"); \n    // f.format(\"d: %d\\n\", y); \n    // f.format(\"c: %c\\n\", y); \n    f.format(\"b: %b\\n\", y); \n    f.format(\"s: %s\\n\", y); \n    // f.format(\"f: %f\\n\", y); \n    // f.format(\"e: %e\\n\", y); \n    // f.format(\"x: %x\\n\", y); \n    f.format(\"h: %h\\n\", y);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "fe175011ace272b38c2a66588d24a7d2",
        "type": "source_code",
        "text": "boolean z = false; \n    System.out.println(\"z = false\"); \n    // f.format(\"d: %d\\n\", z); \n    // f.format(\"c: %c\\n\", z); \n    f.format(\"b: %b\\n\", z); \n    f.format(\"s: %s\\n\", z); \n    // f.format(\"f: %f\\n\", z); \n    // f.format(\"e: %e\\n\", z); \n    // f.format(\"x: %x\\n\", z); \n    f.format(\"h: %h\\n\", z);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "7f8917c06e3ffd16823f2063490fcec9",
        "type": "source_code",
        "text": "String message) { \n    super(String.format(\"(t%d, q%d) %s\", transactionID, \n        queryID, message));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "954cf19ed64503c476ea738bc7e2b558",
        "type": "source_code",
        "text": "try { \n      throw new DatabaseException(3, 7, \"Write failed\"); \n    } catch(Exception e) { \n      System.out.println(e); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3c0f0aeabe8cea63d77d4ef6c7ee976c",
        "type": "source_code",
        "text": "StringBuilder result = new StringBuilder(); \n    int n = 0; \n    for(byte b : data) { \n      if(n % 16 == 0) \n        result.append(String.format(\"%05X: \", n)); \n      result.append(String.format(\"%02X \", b)); \n      n++; \n      if(n % 16 == 0) result.append(\"\\n\"); \n    } \n    result.append(\"\\n\"); \n    return result.toString();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0331239ee3b2aaa57a02efa528630e4a",
        "type": "source_code",
        "text": "if(args.length == 0) \n      // Test by displaying this class file: \n      System.out.println( \n        format(BinaryFile.read(\"Hex.class\"))); \n    else \n      System.out.println( \n        format(BinaryFile.read(new File(args[0]))));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ca8566c6016e33055e1296d7573bfc57",
        "type": "source_code",
        "text": "System.out.println(\"-1234\".matches(\"-?\\\\d+\")); \n    System.out.println(\"5678\".matches(\"-?\\\\d+\")); \n    System.out.println(\"+911\".matches(\"-?\\\\d+\")); \n    System.out.println(\"+911\".matches(\"(-|\\\\+)?\\\\d+\"));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "38608c7b66d6fb3cde90ae879737c070",
        "type": "source_code",
        "text": "\"Then, when you have found the shrubbery, you must \" + \n    \"cut down the mightiest tree in the forest... \" + \n    \"with... a herring!\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "49eea2c31fc9fae3f313d020044a5ac7",
        "type": "source_code",
        "text": "System.out.println( \n      Arrays.toString(knights.split(regex)));",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "2334a1f612d1e4608192e19308c18265",
        "type": "source_code",
        "text": "split(\" \"); // Doesn\u2019t have to contain regex chars \n    split(\"\\\\W+\"); // Non-word characters \n    split(\"n\\\\W+\"); // \u2018n\u2019 followed by non-word characters",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "92a10384d8d99f0e0130fd535424f668",
        "type": "source_code",
        "text": "print(s.replaceFirst(\"f\\\\w+\", \"located\")); \n    print(s.replaceAll(\"shrubbery|tree|herring\",\"banana\"));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8b88657416f0de579656a14a2420a2c8",
        "type": "source_code",
        "text": "for(String pattern : new String[]{ \"Rudolph\", \n      \"[rR]udolph\", \"[rR][aeiou][a-z]ol.*\", \"R.*\" }) \n      System.out.println(\"Rudolph\".matches(pattern));",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "df266bf90d49b6d93f303ce874b341cf",
        "type": "source_code",
        "text": "if(args.length < 2) { \n      print(\"Usage:\\njava TestRegularExpression \" + \n        \"characterSequence regularExpression+\"); \n      System.exit(0); \n    } \n    print(\"Input: \\\"\" + args[0] + \"\\\"\"); \n    for(String arg : args) { \n      print(\"Regular expression: \\\"\" + arg + \"\\\"\"); \n      Pattern p = Pattern.compile(arg); \n      Matcher m = p.matcher(args[0]); \n      while(m.find()) {",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "f02f34b7ddc576fb41ce02470d601c74",
        "type": "source_code",
        "text": "print(\"Match \\\"\" + m.group() + \"\\\" at positions \" + \n          m.start() + \"-\" + (m.end() - 1)); \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e1491daa65369b3c0e0b8d26924e8438",
        "type": "source_code",
        "text": "Matcher m = Pattern.compile(\"\\\\w+\") \n      .matcher(\"Evening is full of the linnet\u2019s wings\"); \n    while(m.find()) \n      printnb(m.group() + \" \"); \n    print(); \n    int i = 0; \n    while(m.find(i)) { \n      printnb(m.group() + \" \"); \n      i++; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "675ee5c44691c2c3136454361ad7cc8a",
        "type": "source_code",
        "text": "\"Twas brillig, and the slithy toves\\n\" + \n    \"Did gyre and gimble in the wabe.\\n\" + \n    \"All mimsy were the borogoves,\\n\" + \n    \"And the mome raths outgrabe.\\n\\n\" + \n    \"Beware the Jabberwock, my son,\\n\" + \n    \"The jaws that bite, the claws that catch.\\n\" + \n    \"Beware the Jubjub bird, and shun\\n\" + \n    \"The frumious Bandersnatch.\";",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "60f945a961254f712882634907f26a43",
        "type": "source_code",
        "text": "Matcher m = \n      Pattern.compile(\"(?m)(\\\\S+)\\\\s+((\\\\S+)\\\\s+(\\\\S+))$\") \n        .matcher(POEM); \n    while(m.find()) { \n      for(int j = 0; j <= m.groupCount(); j++) \n        printnb(\"[\" + m.group(j) + \"]\"); \n      print(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c846e33991a754336aa879eddb81fe68",
        "type": "source_code",
        "text": "\"As long as there is injustice, whenever a\\n\" + \n    \"Targathian baby cries out, wherever a distress\\n\" + \n    \"signal sounds among the stars ... We\u2019ll be there.\\n\" + \n    \"This fine ship, and this fine crew ...\\n\" + \n    \"Never give up! Never surrender!\";",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "fb579b71cf9071218ba06c8ca7aae70d",
        "type": "source_code",
        "text": "private boolean regexPrinted = false; \n    private String regex; \n    Display(String regex) { this.regex = regex; } \n    void display(String message) { \n      if(!regexPrinted) { \n        print(regex); \n        regexPrinted = true; \n      } \n      print(message); \n    }",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "60ba91ee3db5a8e61afdc81fac911b91",
        "type": "source_code",
        "text": "Display d = new Display(regex); \n    Pattern p = Pattern.compile(regex); \n    Matcher m = p.matcher(s); \n    while(m.find()) \n      d.display(\"find() \u2018\" + m.group() + \n        \"\u2018 start = \"+ m.start() + \" end = \" + m.end()); \n    if(m.lookingAt()) // No reset() necessary \n      d.display(\"lookingAt() start = \" \n        + m.start() + \" end = \" + m.end()); \n    if(m.matches()) // No reset() necessary \n      d.display(\"matches() start = \" \n        + m.start() + \" end = \" + m.end());",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "b75d3002a2b813f698395cc1df899fe9",
        "type": "source_code",
        "text": "for(String in : input.split(\"\\n\")) { \n      print(\"input : \" + in); \n      for(String regex : new String[]{\"\\\\w*ere\\\\w*\", \n        \"\\\\w*ever\", \"T\\\\w+\", \"Never.*?!\"}) \n        examine(in, regex); \n    }",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "dc36381a4858c429cff14f10ddd3e7b2",
        "type": "source_code",
        "text": "Pattern p =  Pattern.compile(\"^java\", \n      Pattern.CASE_INSENSITIVE | Pattern.MULTILINE); \n    Matcher m = p.matcher( \n      \"java has regex\\nJava has regex\\n\" + \n      \"JAVA has pretty good regular expressions\\n\" + \n      \"Regular expressions are in Java\"); \n    while(m.find()) \n      System.out.println(m.group());",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "585458220a42098c2e282f1adea75762",
        "type": "source_code",
        "text": "String input = \n      \"This!!unusual use!!of exclamation!!points\"; \n    print(Arrays.toString( \n      Pattern.compile(\"!!\").split(input))); \n    // Only do the first three: \n    print(Arrays.toString( \n      Pattern.compile(\"!!\").split(input, 3)));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "8093fdc00deeefc7150d3e7ce3fc83ef",
        "type": "source_code",
        "text": "the regular expression matcher. Note that we\u2019ll \n    first extract the block of text by looking for \n    the special delimiters, then process the \n    extracted block. !*/",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "65a09cb727bf4cd3e725e15ffcc1e3ae",
        "type": "source_code",
        "text": "String s = TextFile.read(\"TheReplacements.java\"); \n    // Match the specially commented block of text above: \n    Matcher mInput = \n      Pattern.compile(\"/\\\\*!(.*)!\\\\*/\", Pattern.DOTALL) \n        .matcher(s); \n    if(mInput.find()) \n      s = mInput.group(1); // Captured by parentheses \n    // Replace two or more spaces with a single space: \n    s = s.replaceAll(\" {2,}\", \" \"); \n    // Replace one or more spaces at the beginning of each \n    // line with no spaces. Must enable MULTILINE mode: \n    s = s.replaceAll(\"(?m)^ +\", \"\"); \n    print(s); \n    s = s.replaceFirst(\"[aeiou]\", \"(VOWEL1)\"); \n    StringBuffer sbuf = new StringBuffer(); \n    Pattern p = Pattern.compile(\"[aeiou]\"); \n    Matcher m = p.matcher(s); \n    // Process the find information as you",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "f0c98a3bfae6c2e1328d2b09fd2174b3",
        "type": "source_code",
        "text": "// perform the replacements: \n    while(m.find()) \n      m.appendReplacement(sbuf, m.group().toUpperCase()); \n    // Put in the remainder of the text: \n    m.appendTail(sbuf); \n    print(sbuf);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "6f366b00a1ca80eed780b164a82e4302",
        "type": "source_code",
        "text": "Matcher m = Pattern.compile(\"[frb][aiu][gx]\") \n      .matcher(\"fix the rug with bags\"); \n    while(m.find())",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "37d4da6b5bf792d207036446bc6796e0",
        "type": "source_code",
        "text": "System.out.print(m.group() + \" \"); \n    System.out.println(); \n    m.reset(\"fix the rig with rags\"); \n    while(m.find()) \n      System.out.print(m.group() + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9dea797a675cfef5e671564b8badbff8",
        "type": "source_code",
        "text": "if(args.length < 2) { \n      System.out.println(\"Usage: java JGrep file regex\"); \n      System.exit(0); \n    } \n    Pattern p = Pattern.compile(args[1]); \n    // Iterate through the lines of the input file: \n    int index = 0; \n    Matcher m = p.matcher(\"\"); \n    for(String line : new TextFile(args[0])) { \n      m.reset(line); \n      while(m.find()) \n        System.out.println(index++ + \": \" + \n          m.group() + \": \" + m.start()); \n    }",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "9e485682cdb450b3c2ab8c111622224a",
        "type": "source_code",
        "text": "new StringReader(\"Sir Robin of Camelot\\n22 1.61803\"));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0369fc0bc96b7655b0fb6a2c171cb860",
        "type": "source_code",
        "text": "try { \n      System.out.println(\"What is your name?\"); \n      String name = input.readLine(); \n      System.out.println(name); \n      System.out.println( \n        \"How old are you? What is your favorite double?\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4b7282a7896f68caf2a51edc433bee5a",
        "type": "source_code",
        "text": "System.out.println(\"(input: <age> <double>)\"); \n      String numbers = input.readLine(); \n      System.out.println(numbers); \n      String[] numArray = numbers.split(\" \"); \n      int age = Integer.parseInt(numArray[0]); \n      double favorite = Double.parseDouble(numArray[1]); \n      System.out.format(\"Hi %s.\\n\", name); \n      System.out.format(\"In 5 years you will be %d.\\n\", \n        age + 5); \n      System.out.format(\"My favorite double is %f.\", \n        favorite / 2); \n    } catch(IOException e) { \n      System.err.println(\"I/O exception\"); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0971b8c03b842f1e647ada051754c494",
        "type": "source_code",
        "text": "Scanner stdin = new Scanner(SimpleRead.input); \n    System.out.println(\"What is your name?\"); \n    String name = stdin.nextLine(); \n    System.out.println(name); \n    System.out.println( \n      \"How old are you? What is your favorite double?\"); \n    System.out.println(\"(input: <age> <double>)\"); \n    int age = stdin.nextInt(); \n    double favorite = stdin.nextDouble(); \n    System.out.println(age); \n    System.out.println(favorite); \n    System.out.format(\"Hi %s.\\n\", name); \n    System.out.format(\"In 5 years you will be %d.\\n\", \n      age + 5); \n    System.out.format(\"My favorite double is %f.\", \n      favorite / 2);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "8f727af9fdeaa8d2559a548765630719",
        "type": "source_code",
        "text": "Scanner scanner = new Scanner(\"12, 42, 78, 99, 42\"); \n    scanner.useDelimiter(\"\\\\s*,\\\\s*\"); \n    while(scanner.hasNextInt()) \n      System.out.println(scanner.nextInt());",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "6805b7f7f6c9c4132ce13559155292db",
        "type": "source_code",
        "text": "\"58.27.82.161@02/10/2005\\n\" + \n    \"204.45.234.40@02/11/2005\\n\" + \n    \"58.27.82.161@02/11/2005\\n\" + \n    \"58.27.82.161@02/12/2005\\n\" + \n    \"58.27.82.161@02/12/2005\\n\" + \n    \"[Next log section with different data format]\";",
        "programming_language": "Objective-C",
        "weight": 0.0
    },
    {
        "id": "1c49a575d1e6b4a1fd766ab90362fb99",
        "type": "source_code",
        "text": "Scanner scanner = new Scanner(threatData); \n    String pattern = \"(\\\\d+[.]\\\\d+[.]\\\\d+[.]\\\\d+)@\" + \n      \"(\\\\d{2}/\\\\d{2}/\\\\d{4})\"; \n    while(scanner.hasNext(pattern)) { \n      scanner.next(pattern); \n      MatchResult match = scanner.match(); \n      String ip = match.group(1); \n      String date = match.group(2); \n      System.out.format(\"Threat on %s from %s\\n\", date,ip); \n    }",
        "programming_language": "Objective-C",
        "weight": 0.0
    },
    {
        "id": "74160e17b9887979d302c425898a94a2",
        "type": "source_code",
        "text": "String input = \"But I\u2019m not dead yet! I feel happy!\"; \n    StringTokenizer stoke = new StringTokenizer(input); \n    while(stoke.hasMoreElements()) \n      System.out.print(stoke.nextToken() + \" \"); \n    System.out.println(); \n    System.out.println(Arrays.toString(input.split(\" \"))); \n    Scanner scanner = new Scanner(input); \n    while(scanner.hasNext()) \n      System.out.print(scanner.next() + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d090af746b7f9c31c591f889bb8367eb",
        "type": "source_code",
        "text": "List<Shape> shapeList = Arrays.asList( \n      new Circle(), new Square(), new Triangle() \n    ); \n    for(Shape shape : shapeList) \n      shape.draw();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e056556251158c061daf628ca5d718d5",
        "type": "source_code",
        "text": "print(\"inside main\"); \n    new Candy(); \n    print(\"After creating Candy\"); \n    try { \n      Class.forName(\"Gum\"); \n    } catch(ClassNotFoundException e) { \n      print(\"Couldn\u2019t find Gum\"); \n    } \n    print(\"After Class.forName(\\\"Gum\\\")\"); \n    new Cookie(); \n    print(\"After creating Cookie\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "38889b7d975627e8be6b626b760232c3",
        "type": "source_code",
        "text": "print(\"Class name: \" + cc.getName() + \n      \" is interface? [\" + cc.isInterface() + \"]\"); \n    print(\"Simple name: \" + cc.getSimpleName()); \n    print(\"Canonical name : \" + cc.getCanonicalName());",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "15f71e54402df66a109ebe3a5045043d",
        "type": "source_code",
        "text": "Class c = null; \n    try { \n      c = Class.forName(\"typeinfo.toys.FancyToy\"); \n    } catch(ClassNotFoundException e) { \n      print(\"Can\u2019t find FancyToy\"); \n      System.exit(1); \n    } \n    printInfo(c);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "e54e1adc655d49758d7123b372f7986a",
        "type": "source_code",
        "text": "for(Class face : c.getInterfaces()) \n      printInfo(face); \n    Class up = c.getSuperclass(); \n    Object obj = null; \n    try { \n      // Requires default constructor: \n      obj = up.newInstance(); \n    } catch(InstantiationException e) { \n      print(\"Cannot instantiate\"); \n      System.exit(1); \n    } catch(IllegalAccessException e) { \n      print(\"Cannot access\"); \n      System.exit(1); \n    } \n    printInfo(obj.getClass());",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "a38d17cbeec817dddf8cb8eba0e5ae2c",
        "type": "source_code",
        "text": "ClassInitialization.rand.nextInt(1000);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6eefd9f14de3c505108090bf865871c9",
        "type": "source_code",
        "text": "System.out.println(\"Initializing Initable\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b58977f9a56bb5c57caab7a5885d3c9d",
        "type": "source_code",
        "text": "System.out.println(\"Initializing Initable2\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "189fd98c7e3ece8da69d96c179d134b3",
        "type": "source_code",
        "text": "System.out.println(\"Initializing Initable3\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "19541e4c6e61f4e0039fa8f56aa4404a",
        "type": "source_code",
        "text": "Class initable = Initable.class; \n    System.out.println(\"After creating Initable ref\"); \n    // Does not trigger initialization: \n    System.out.println(Initable.staticFinal); \n    // Does trigger initialization: \n    System.out.println(Initable.staticFinal2); \n    // Does trigger initialization: \n    System.out.println(Initable2.staticNonFinal); \n    Class initable3 = Class.forName(\"Initable3\"); \n    System.out.println(\"After creating Initable3 ref\"); \n    System.out.println(Initable3.staticNonFinal);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "13d943f1b812abd3ffe5e431b2a481f9",
        "type": "source_code",
        "text": "Class intClass = int.class; \n    Class<Integer> genericIntClass = int.class; \n    genericIntClass = Integer.class; // Same thing \n    intClass = double.class; \n    // genericIntClass = double.class; // Illegal",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "64ddee3c1d8e9d50658d82cc288a1750",
        "type": "source_code",
        "text": "Class<?> intClass = int.class; \n    intClass = double.class;",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "4b17039810d702f8912941cf33c83eff",
        "type": "source_code",
        "text": "Class<? extends Number> bounded = int.class; \n    bounded = double.class; \n    bounded = Number.class; \n    // Or anything else derived from Number.",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "291165859396dee79acd030bc9dfdf91",
        "type": "source_code",
        "text": "List<T> result = new ArrayList<T>(); \n    try {",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "58fb2220a4f46b50119892455e869f13",
        "type": "source_code",
        "text": "for(int i = 0; i < nElements; i++) \n        result.add(type.newInstance()); \n    } catch(Exception e) { \n      throw new RuntimeException(e); \n    } \n    return result;",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "929fdb01a8fe9b7f722d01bcbcd21fcb",
        "type": "source_code",
        "text": "FilledList<CountedInteger> fl = \n      new FilledList<CountedInteger>(CountedInteger.class); \n    System.out.println(fl.create(15));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "40776bd257aa69a334afb96348f1daae",
        "type": "source_code",
        "text": "Class<FancyToy> ftClass = FancyToy.class; \n    // Produces exact type: \n    FancyToy fancyToy = ftClass.newInstance(); \n    Class<? super FancyToy> up = ftClass.getSuperclass(); \n    // This won\u2019t compile: \n    // Class<Toy> up2 = ftClass.getSuperclass(); \n    // Only produces Object: \n    Object obj = up.newInstance();",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "6c339359f274b55c38ab072bce04811a",
        "type": "source_code",
        "text": "Building b = new House(); \n    Class<House> houseType = House.class; \n    House h = houseType.cast(b); \n    h = (House)b; // ... or just do this.",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "70d7b14f26e586f0153e45d3d13f3a74",
        "type": "source_code",
        "text": "int n = rand.nextInt(types().size()); \n    try { \n      return types().get(n).newInstance(); \n    } catch(InstantiationException e) { \n      throw new RuntimeException(e); \n    } catch(IllegalAccessException e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "aed0a0221836b2f8b0cd950c178a7b04",
        "type": "source_code",
        "text": "Pet[] result = new Pet[size]; \n    for(int i = 0; i < size; i++) \n      result[i] = randomPet(); \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "886c1f45d9a7b3b02ef5c635378a8f1a",
        "type": "source_code",
        "text": "ArrayList<Pet> result = new ArrayList<Pet>(); \n    Collections.addAll(result, createArray(size)); \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cb494b234544d19d52f69e8fe6bf4092",
        "type": "source_code",
        "text": "new ArrayList<Class<? extends Pet>>();",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "6f6a203b3a063e6c48eaf4d7e3f2c77e",
        "type": "source_code",
        "text": "\"typeinfo.pets.Mutt\", \n    \"typeinfo.pets.Pug\", \n    \"typeinfo.pets.EgyptianMau\", \n    \"typeinfo.pets.Manx\", \n    \"typeinfo.pets.Cymric\",",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "32efdf1ef6fc1c1fe6ffcee622a69156",
        "type": "source_code",
        "text": "\"typeinfo.pets.Rat\", \n    \"typeinfo.pets.Mouse\", \n    \"typeinfo.pets.Hamster\"",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "14713074ea020e42a04434ae5a3eda4a",
        "type": "source_code",
        "text": "try { \n      for(String name : typeNames) \n        types.add( \n          (Class<? extends Pet>)Class.forName(name)); \n    } catch(ClassNotFoundException e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "5607419d97de8f261961424b91169be4",
        "type": "source_code",
        "text": "public void count(String type) { \n      Integer quantity = get(type); \n      if(quantity == null) \n        put(type, 1); \n      else \n        put(type, quantity + 1); \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "026385b464953c0bba93a718a54ce5cb",
        "type": "source_code",
        "text": "PetCounter counter= new PetCounter(); \n    for(Pet pet : creator.createArray(20)) { \n      // List each individual pet: \n      printnb(pet.getClass().getSimpleName() + \" \"); \n      if(pet instanceof Pet) \n        counter.count(\"Pet\"); \n      if(pet instanceof Dog) \n        counter.count(\"Dog\"); \n      if(pet instanceof Mutt) \n        counter.count(\"Mutt\"); \n      if(pet instanceof Pug) \n        counter.count(\"Pug\"); \n      if(pet instanceof Cat)",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "7fefaea7cb159975b3b497feedfd7efc",
        "type": "source_code",
        "text": "counter.count(\"Cat\"); \n      if(pet instanceof Manx) \n        counter.count(\"EgyptianMau\"); \n      if(pet instanceof Manx) \n        counter.count(\"Manx\"); \n      if(pet instanceof Manx) \n        counter.count(\"Cymric\"); \n      if(pet instanceof Rodent) \n        counter.count(\"Rodent\"); \n      if(pet instanceof Rat) \n        counter.count(\"Rat\"); \n      if(pet instanceof Mouse) \n        counter.count(\"Mouse\"); \n      if(pet instanceof Hamster) \n        counter.count(\"Hamster\"); \n    } \n    // Show the counts: \n    print(); \n    print(counter);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "dde91f644eea90056b13e0422a516197",
        "type": "source_code",
        "text": "countPets(new ForNameCreator());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0d80a118f097ba94869cddabf64e056b",
        "type": "source_code",
        "text": "Collections.unmodifiableList(Arrays.asList( \n      Pet.class, Dog.class, Cat.class,  Rodent.class, \n      Mutt.class, Pug.class, EgyptianMau.class, Manx.class, \n      Cymric.class, Rat.class, Mouse.class,Hamster.class));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3a2bafaed4ba25cbfa26ebffdf2f6b55",
        "type": "source_code",
        "text": "allTypes.subList(allTypes.indexOf(Mutt.class),",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6220786998c154787f525f4ad54b4f90",
        "type": "source_code",
        "text": "allTypes.size());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2157f59f0d0a165c62fa19197e74c583",
        "type": "source_code",
        "text": "return types;",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "6073985075c010df4849d4362cf7ff54",
        "type": "source_code",
        "text": "System.out.println(types);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "e74459999eba9f0283374e17085510a1",
        "type": "source_code",
        "text": "new LiteralPetCreator();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5b08892997a7eae04aabf74235638fc4",
        "type": "source_code",
        "text": "return creator.randomPet();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "64b5c96a82a5821adec85c1e4ca0092c",
        "type": "source_code",
        "text": "return creator.createArray(size);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "080106e222e417c584abe444d3805ff7",
        "type": "source_code",
        "text": "return creator.arrayList(size);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "35e0e16942dd265c58b18f2f83f9ded4",
        "type": "source_code",
        "text": "PetCount.countPets(Pets.creator);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "771033f4b5648ee31ec9bf7901034fd6",
        "type": "source_code",
        "text": "public PetCounter() { \n      super(MapData.map(LiteralPetCreator.allTypes, 0)); \n    } \n    public void count(Pet pet) { \n      // Class.isInstance() eliminates instanceofs: \n      for(Map.Entry<Class<? extends Pet>,Integer> pair \n          : entrySet()) \n        if(pair.getKey().isInstance(pet)) \n          put(pair.getKey(), pair.getValue() + 1); \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "c57ff60b26779dbd48964d6c4b86ea2a",
        "type": "source_code",
        "text": "public String toString() { \n      StringBuilder result = new StringBuilder(\"{\"); \n      for(Map.Entry<Class<? extends Pet>,Integer> pair \n          : entrySet()) { \n        result.append(pair.getKey().getSimpleName()); \n        result.append(\"=\"); \n        result.append(pair.getValue()); \n        result.append(\", \"); \n      } \n      result.delete(result.length()-2, result.length()); \n      result.append(\"}\"); \n      return result.toString(); \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "4f88d300b216a19993b06111e81afbb1",
        "type": "source_code",
        "text": "PetCounter petCount = new PetCounter(); \n    for(Pet pet : Pets.createArray(20)) { \n      printnb(pet.getClass().getSimpleName() + \" \"); \n      petCount.count(pet); \n    } \n    print(); \n    print(petCount);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "7583fb55f22f1698375b7997e4a53093",
        "type": "source_code",
        "text": "this.baseType = baseType;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8d54d1fa2d05870d51edc080404f1047",
        "type": "source_code",
        "text": "Class<?> type = obj.getClass(); \n    if(!baseType.isAssignableFrom(type)) \n      throw new RuntimeException(obj + \" incorrect type: \" \n        + type + \", should be type or subtype of \" \n        + baseType); \n    countClass(type);",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "edb9b4ea8c1afe1b984d49208265f4a0",
        "type": "source_code",
        "text": "Integer quantity = get(type); \n    put(type, quantity == null ? 1 : quantity + 1); \n    Class<?> superClass = type.getSuperclass(); \n    if(superClass != null && \n       baseType.isAssignableFrom(superClass)) \n      countClass(superClass);",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "08ddf61b3a8fcfd4be38aecb5cca630c",
        "type": "source_code",
        "text": "StringBuilder result = new StringBuilder(\"{\"); \n    for(Map.Entry<Class<?>,Integer> pair : entrySet()) { \n      result.append(pair.getKey().getSimpleName()); \n      result.append(\"=\"); \n      result.append(pair.getValue()); \n      result.append(\", \"); \n    } \n    result.delete(result.length()-2, result.length()); \n    result.append(\"}\"); \n    return result.toString();",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "afc296409795b48d585f3c432e904bd6",
        "type": "source_code",
        "text": "TypeCounter counter = new TypeCounter(Pet.class); \n    for(Pet pet : Pets.createArray(20)) { \n      printnb(pet.getClass().getSimpleName() + \" \"); \n      counter.count(pet); \n    } \n    print(); \n    print(counter);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "f7a42b7b8d3e8f08adc688a8af9d40a1",
        "type": "source_code",
        "text": "return getClass().getSimpleName();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "a661a98d55a8866d3a6cd7936ee487ea",
        "type": "source_code",
        "text": "new ArrayList<Factory<? extends Part>>();",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "8c67db8278fa7d7af6739d075818daf4",
        "type": "source_code",
        "text": "// Collections.addAll() gives an \"unchecked generic \n    // array creation ... for varargs parameter\" warning. \n    partFactories.add(new FuelFilter.Factory()); \n    partFactories.add(new AirFilter.Factory()); \n    partFactories.add(new CabinAirFilter.Factory()); \n    partFactories.add(new OilFilter.Factory()); \n    partFactories.add(new FanBelt.Factory()); \n    partFactories.add(new PowerSteeringBelt.Factory()); \n    partFactories.add(new GeneratorBelt.Factory());",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "90074c4ed2fcb13fb904ce85fc15e306",
        "type": "source_code",
        "text": "int n = rand.nextInt(partFactories.size()); \n    return partFactories.get(n).create();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "7ddb192605c7f7fc9abf58caad43978e",
        "type": "source_code",
        "text": "public FuelFilter create() { return new FuelFilter(); }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9d7cbcd23f12da299f56a76edda3ba2c",
        "type": "source_code",
        "text": "public AirFilter create() { return new AirFilter(); }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "36c0e396e7af6db0f1219d92401d9409",
        "type": "source_code",
        "text": "public CabinAirFilter create() { \n      return new CabinAirFilter(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d458b10b59d429f8381ceb533dd4cdca",
        "type": "source_code",
        "text": "public OilFilter create() { return new OilFilter(); }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b50e396761a6fc14aefe0d7c82b46781",
        "type": "source_code",
        "text": "public FanBelt create() { return new FanBelt(); }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a91a4a180b676358ee611d33e6d18cf0",
        "type": "source_code",
        "text": "public GeneratorBelt create() { \n      return new GeneratorBelt(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1ecc5ce3a65e3dc2765a317e9e95d239",
        "type": "source_code",
        "text": "public PowerSteeringBelt create() { \n      return new PowerSteeringBelt(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "785105bc4a6bfcd56ee38e620e0049a0",
        "type": "source_code",
        "text": "for(int i = 0; i < 10; i++) \n      System.out.println(Part.createRandom());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5ccf6d1d680f6959e559d1da53546e38",
        "type": "source_code",
        "text": "print(\"Testing x of type \" + x.getClass()); \n    print(\"x instanceof Base \" + (x instanceof Base)); \n    print(\"x instanceof Derived \"+ (x instanceof Derived)); \n    print(\"Base.isInstance(x) \"+ Base.class.isInstance(x)); \n    print(\"Derived.isInstance(x) \" + \n      Derived.class.isInstance(x)); \n    print(\"x.getClass() == Base.class \" + \n      (x.getClass() == Base.class)); \n    print(\"x.getClass() == Derived.class \" + \n      (x.getClass() == Derived.class)); \n    print(\"x.getClass().equals(Base.class)) \"+ \n      (x.getClass().equals(Base.class))); \n    print(\"x.getClass().equals(Derived.class)) \" + \n      (x.getClass().equals(Derived.class)));",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "ffc0d9fdf22afc2a93aaf8b21b787e85",
        "type": "source_code",
        "text": "test(new Base()); \n    test(new Derived());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e3a8285ea637efe94980c74740cb9a34",
        "type": "source_code",
        "text": "class information",
        "programming_language": "Perl6",
        "weight": 0.0
    },
    {
        "id": "8f53b618942054476ac20ac225f6a7af",
        "type": "source_code",
        "text": "\"usage:\\n\" + \n    \"ShowMethods qualified.class.name\\n\" + \n    \"To show all methods in class or:\\n\" + \n    \"ShowMethods qualified.class.name word\\n\" + \n    \"To search for methods involving \u2018word\u2019\";",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f0e96e1ef49e0a3dd3367f76e1a03298",
        "type": "source_code",
        "text": "if(args.length < 1) { \n      print(usage); \n      System.exit(0); \n    } \n    int lines = 0; \n    try { \n      Class<?> c = Class.forName(args[0]); \n      Method[] methods = c.getMethods(); \n      Constructor[] ctors = c.getConstructors(); \n      if(args.length == 1) { \n        for(Method method : methods) \n          print( \n            p.matcher(method.toString()).replaceAll(\"\")); \n        for(Constructor ctor : ctors) \n          print(p.matcher(ctor.toString()).replaceAll(\"\")); \n        lines = methods.length + ctors.length; \n      } else { \n        for(Method method : methods) \n          if(method.toString().indexOf(args[1]) != -1) { \n            print( \n              p.matcher(method.toString()).replaceAll(\"\")); \n            lines++; \n          } \n        for(Constructor ctor : ctors) \n          if(ctor.toString().indexOf(args[1]) != -1) { \n            print(p.matcher( \n              ctor.toString()).replaceAll(\"\")); \n            lines++; \n          } \n      } \n    } catch(ClassNotFoundException e) { \n      print(\"No such class: \" + e); \n    }",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "8ce3ca9b952032ec603415aff855c83a",
        "type": "source_code",
        "text": "print(\"somethingElse \" + arg);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "db2ae46569edaf14ded39009e81cf915",
        "type": "source_code",
        "text": "this.proxied = proxied;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ea80d62f3a1cbb2a90020fe637cbaacf",
        "type": "source_code",
        "text": "print(\"SimpleProxy doSomething\"); \n    proxied.doSomething();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "25e97f5239566ce22452d18f528e629b",
        "type": "source_code",
        "text": "print(\"SimpleProxy somethingElse \" + arg); \n    proxied.somethingElse(arg);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "a5424dee6bb237c0996ec4afe639fb6f",
        "type": "source_code",
        "text": "iface.doSomething(); \n    iface.somethingElse(\"bonobo\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3fe5a2cd028fb023f255a1b33e6894ac",
        "type": "source_code",
        "text": "consumer(new RealObject()); \n    consumer(new SimpleProxy(new RealObject()));",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "db2ae46569edaf14ded39009e81cf915",
        "type": "source_code",
        "text": "this.proxied = proxied;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b084afeaef656faebbe7f7156b99bcf7",
        "type": "source_code",
        "text": "System.out.println(\"**** proxy: \" + proxy.getClass() + \n      \", method: \" + method + \", args: \" + args); \n    if(args != null) \n      for(Object arg : args) \n        System.out.println(\"  \" + arg); \n    return method.invoke(proxied, args);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "a5424dee6bb237c0996ec4afe639fb6f",
        "type": "source_code",
        "text": "iface.doSomething(); \n    iface.somethingElse(\"bonobo\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6003e95b4152cb9415a14b0de744017c",
        "type": "source_code",
        "text": "RealObject real = new RealObject(); \n    consumer(real); \n    // Insert a proxy and call again: \n    Interface proxy = (Interface)Proxy.newProxyInstance( \n      Interface.class.getClassLoader(), \n      new Class[]{ Interface.class }, \n      new DynamicProxyHandler(real)); \n    consumer(proxy);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "db2ae46569edaf14ded39009e81cf915",
        "type": "source_code",
        "text": "this.proxied = proxied;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3e116c0d25431df3c7692517c89e6665",
        "type": "source_code",
        "text": "if(method.getName().equals(\"interesting\")) \n      print(\"Proxy detected the interesting method\"); \n    return method.invoke(proxied, args);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bac6dc816924908c9ed0b899788d5002",
        "type": "source_code",
        "text": "print(\"interesting \" + arg);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9b4653c80c44101a4fd3d0910e81f9ab",
        "type": "source_code",
        "text": "SomeMethods proxy= (SomeMethods)Proxy.newProxyInstance( \n      SomeMethods.class.getClassLoader(), \n      new Class[]{ SomeMethods.class }, \n      new MethodSelector(new Implementation())); \n    proxy.boring1(); \n    proxy.boring2(); \n    proxy.interesting(\"bonobo\"); \n    proxy.boring3();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bbc65adc1b894e53c8f062175e622c9e",
        "type": "source_code",
        "text": "this.first = first; \n    this.last = last; \n    this.address = address;",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "a18d2a2830650aebd1277c58e6e0d255",
        "type": "source_code",
        "text": "return \"Person: \" + first + \" \" + last + \" \" + address;",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "ee0fade2a63f50b64587ef9ce1f5294f",
        "type": "source_code",
        "text": "private NullPerson() { super(\"None\", \"None\", \"None\"); } \n    public String toString() { return \"NullPerson\"; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d51410445565b6826d8589e78a24eae9",
        "type": "source_code",
        "text": "title = jobTitle; \n    person = employee; \n    if(person == null) \n      person = Person.NULL;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "240a2ef72751b4201ee16cb16583868b",
        "type": "source_code",
        "text": "title = jobTitle; \n    person = Person.NULL;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c66e5c4247d4f6d5022b5232918deee2",
        "type": "source_code",
        "text": "title = newTitle;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ff74c9a920407865c8cf1f454729e2e0",
        "type": "source_code",
        "text": "person = newPerson; \n    if(person == null) \n      person = Person.NULL;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "456dc091cfb84b9b2eb0008d3048d296",
        "type": "source_code",
        "text": "return \"Position: \" + title + \" \" + person;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "3dcc8708f6d82a87ebc43c1590d22d62",
        "type": "source_code",
        "text": "add(new Position(title, person));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f91e7d7e1d45a0d982f13ce68e96810d",
        "type": "source_code",
        "text": "for(String title : titles) \n      add(new Position(title));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "250388d11a62dfd93a75db4ed56934fc",
        "type": "source_code",
        "text": "for(Position position : this) \n      if(position.getTitle().equals(title) && \n         position.getPerson() == Person.NULL) \n        return true; \n    return false;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8f8f60602a1ab17e8c5128c15b98b268",
        "type": "source_code",
        "text": "for(Position position : this) \n      if(position.getTitle().equals(title) && \n         position.getPerson() == Person.NULL) { \n        position.setPerson(hire); \n        return; \n      } \n    throw new RuntimeException( \n      \"Position \" + title + \" not available\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "943a04e08674e83a58e2a3404f092729",
        "type": "source_code",
        "text": "Staff staff = new Staff(\"President\", \"CTO\", \n      \"Marketing Manager\", \"Product Manager\", \n      \"Project Lead\", \"Software Engineer\", \n      \"Software Engineer\", \"Software Engineer\", \n      \"Software Engineer\", \"Test Engineer\", \n      \"Technical Writer\"); \n    staff.fillPosition(\"President\", \n      new Person(\"Me\", \"Last\", \"The Top, Lonely At\")); \n    staff.fillPosition(\"Project Lead\",",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e7472652187017b5cf51f7c6d7be14ce",
        "type": "source_code",
        "text": "new Person(\"Janet\", \"Planner\", \"The Burbs\")); \n    if(staff.positionAvailable(\"Software Engineer\")) \n      staff.fillPosition(\"Software Engineer\", \n        new Person(\"Bob\", \"Coder\", \"Bright Light City\")); \n    System.out.println(staff);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cce86f5e55a2f157341f000969c47c83",
        "type": "source_code",
        "text": "public static void test(Robot r) { \n      if(r instanceof Null) \n        System.out.println(\"[Null Robot]\"); \n      System.out.println(\"Robot name: \" + r.name()); \n      System.out.println(\"Robot model: \" + r.model()); \n      for(Operation operation : r.operations()) { \n        System.out.println(operation.description()); \n        operation.command(); \n      } \n    }",
        "programming_language": "Objective-C",
        "weight": 0.0
    },
    {
        "id": "fb11d8c2f008f0483484fd9db148a6a5",
        "type": "source_code",
        "text": "return Arrays.asList( \n      new Operation() { \n        public String description() { \n          return name + \" can shovel snow\"; \n        } \n        public void command() { \n          System.out.println(name + \" shoveling snow\"); \n        } \n      },",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "02957c4ebc0596de978fdc11bf4d9717",
        "type": "source_code",
        "text": "new Operation() { \n        public String description() { \n          return name + \" can chip ice\"; \n        } \n        public void command() { \n          System.out.println(name + \" chipping ice\"); \n        } \n      }, \n      new Operation() { \n        public String description() { \n          return name + \" can clear the roof\"; \n        } \n        public void command() { \n          System.out.println(name + \" clearing roof\"); \n        } \n      } \n    );",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b5243c6b08ff9674d959912f5c21e87a",
        "type": "source_code",
        "text": "Robot.Test.test(new SnowRemovalRobot(\"Slusher\"));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "30b14f45a6fd49caabd471cc0f95ac31",
        "type": "source_code",
        "text": "nullName = type.getSimpleName() + \" NullRobot\";",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "68d6e0ad7b637055dc49e09ad323c2f7",
        "type": "source_code",
        "text": "public String name() { return nullName; } \n    public String model() { return nullName; } \n    public List<Operation> operations() { \n      return Collections.emptyList(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "12b7d341fdd3483e82fb9f3a385556ee",
        "type": "source_code",
        "text": "return method.invoke(proxied, args);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3ffbd91058ab4235c9c44df4d5d13098",
        "type": "source_code",
        "text": "return (Robot)Proxy.newProxyInstance( \n      NullRobot.class.getClassLoader(), \n      new Class[]{ Null.class, Robot.class }, \n      new NullRobotProxyHandler(type));",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "dcc381cc3ce06ce5fe8f646a12891a4f",
        "type": "source_code",
        "text": "Robot[] bots = { \n      new SnowRemovalRobot(\"SnowBee\"), \n      newNullRobot(SnowRemovalRobot.class) \n    }; \n    for(Robot bot : bots) \n      Robot.Test.test(bot);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "141ceba1e225b21777b7248a9b0202da",
        "type": "source_code",
        "text": "A a = new B(); \n    a.f(); \n    // a.g(); // Compile error \n    System.out.println(a.getClass().getName()); \n    if(a instanceof B) { \n      B b = (B)a; \n      b.g(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "89c95fc109f4492023ac5597cc3162a4",
        "type": "source_code",
        "text": "A a = HiddenC.makeA(); \n    a.f(); \n    System.out.println(a.getClass().getName()); \n    // Compile error: cannot find symbol \u2018C\u2019: \n    /* if(a instanceof C) { \n      C c = (C)a; \n      c.g(); \n    } */ \n    // Oops! Reflection still allows us to call g(): \n    callHiddenMethod(a, \"g\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0d3975e181c5086fa67392eb33db8afc",
        "type": "source_code",
        "text": "// And even methods that are less accessible! \n    callHiddenMethod(a, \"u\"); \n    callHiddenMethod(a, \"v\"); \n    callHiddenMethod(a, \"w\");",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "e13c0751b92e976755fa16e5faace05b",
        "type": "source_code",
        "text": "Method g = a.getClass().getDeclaredMethod(methodName); \n    g.setAccessible(true); \n    g.invoke(a);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4a2a792009a49babdfbf6e931ca1f4ca",
        "type": "source_code",
        "text": "typeinfo.packageaccess.C(); \n    public void f( ); \n    public void g( ); \n    void u( ); \n    protected void v( ); \n    private void w();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "e99d1005ea40a8085c5f8fc896815260",
        "type": "source_code",
        "text": "public void f() { print(\"public C.f()\"); } \n    public void g() { print(\"public C.g()\"); } \n    void u() { print(\"package C.u()\"); } \n    protected void v() { print(\"protected C.v()\"); } \n    private void w() { print(\"private C.w()\"); }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "16ce10d4431ea18bc7c174b589c75147",
        "type": "source_code",
        "text": "A a = InnerA.makeA(); \n    a.f(); \n    System.out.println(a.getClass().getName()); \n    // Reflection still gets into the private class: \n    HiddenImplementation.callHiddenMethod(a, \"g\"); \n    HiddenImplementation.callHiddenMethod(a, \"u\"); \n    HiddenImplementation.callHiddenMethod(a, \"v\"); \n    HiddenImplementation.callHiddenMethod(a, \"w\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "169f5fdab1165c03fc617b56ee3ff9fa",
        "type": "source_code",
        "text": "return new A() { \n      public void f() { print(\"public C.f()\"); } \n      public void g() { print(\"public C.g()\"); } \n      void u() { print(\"package C.u()\"); } \n      protected void v() { print(\"protected C.v()\"); } \n      private void w() { print(\"private C.w()\"); } \n    };",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "b4b33d6eb0ba8d2a999eb6bb364471a7",
        "type": "source_code",
        "text": "A a = AnonymousA.makeA(); \n    a.f(); \n    System.out.println(a.getClass().getName()); \n    // Reflection still gets into the anonymous class: \n    HiddenImplementation.callHiddenMethod(a, \"g\"); \n    HiddenImplementation.callHiddenMethod(a, \"u\"); \n    HiddenImplementation.callHiddenMethod(a, \"v\"); \n    HiddenImplementation.callHiddenMethod(a, \"w\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1053a68717a632a5e83d2a036afe5863",
        "type": "source_code",
        "text": "return \"i = \" + i + \", \" + s + \", \" + s2;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8aaa48cd34646e62b8b0aaba451b7d97",
        "type": "source_code",
        "text": "WithPrivateFinalField pf = new WithPrivateFinalField(); \n    System.out.println(pf); \n    Field f = pf.getClass().getDeclaredField(\"i\"); \n    f.setAccessible(true); \n    System.out.println(\"f.getInt(pf): \" + f.getInt(pf)); \n    f.setInt(pf, 47); \n    System.out.println(pf); \n    f = pf.getClass().getDeclaredField(\"s\"); \n    f.setAccessible(true); \n    System.out.println(\"f.get(pf): \" + f.get(pf)); \n    f.set(pf, \"No, you\u2019re not!\"); \n    System.out.println(pf); \n    f = pf.getClass().getDeclaredField(\"s2\"); \n    f.setAccessible(true); \n    System.out.println(\"f.get(pf): \" + f.get(pf)); \n    f.set(pf, \"No, you\u2019re not!\"); \n    System.out.println(pf);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "739d74af9d26e1ea4254ea5a3b8c1e9e",
        "type": "source_code",
        "text": "Holder2 h2 = new Holder2(new Automobile()); \n    Automobile a = (Automobile)h2.get(); \n    h2.set(\"Not an Automobile\"); \n    String s = (String)h2.get(); \n    h2.set(1); // Autoboxes to Integer \n    Integer x = (Integer)h2.get();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3e4349e496240bf06d3a10866cc7745a",
        "type": "source_code",
        "text": "Holder3<Automobile> h3 = \n      new Holder3<Automobile>(new Automobile()); \n    Automobile a = h3.get(); // No cast needed \n    // h3.set(\"Not an Automobile\"); // Error \n    // h3.set(1); // Error",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "56805354aad537619a278d2d934be479",
        "type": "source_code",
        "text": "return \"(\" + first + \", \" + second + \")\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "02524d91d7c563c53cad2e5c6eb611df",
        "type": "source_code",
        "text": "super(a, b); \n    third = c;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "33f443365f486ab82dcca53064679f4f",
        "type": "source_code",
        "text": "return \"(\" + first + \", \" + second + \", \" + third +\")\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "acb87c1e7286466d34c14685d4f02d79",
        "type": "source_code",
        "text": "super(a, b, c); \n    fourth = d;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5b76211e900d86213744c92f30bfde36",
        "type": "source_code",
        "text": "return \"(\" + first + \", \" + second + \", \" + \n      third + \", \" + fourth + \")\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2734d7c58fc13c58bde5e5254707628c",
        "type": "source_code",
        "text": "super(a, b, c, d); \n    fifth = e;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c905fab718ff526b406e11bc5caeaad2",
        "type": "source_code",
        "text": "return \"(\" + first + \", \" + second + \", \" + \n      third + \", \" + fourth + \", \" + fifth + \")\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "594107e19226d86015a48100fedc413b",
        "type": "source_code",
        "text": "// Autoboxing converts the int to Integer: \n    return new TwoTuple<String,Integer>(\"hi\", 47);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "83dc2861df976e7775a8e0e74a1eab2f",
        "type": "source_code",
        "text": "return new ThreeTuple<Amphibian, String, Integer>( \n      new Amphibian(), \"hi\", 47);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0f8083716681e7f02666370be9ed3489",
        "type": "source_code",
        "text": "return \n      new FourTuple<Vehicle,Amphibian,String,Integer>( \n        new Vehicle(), new Amphibian(), \"hi\", 47);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "7d0f6419db7dcb26775abd30ca2e2b5d",
        "type": "source_code",
        "text": "return new \n      FiveTuple<Vehicle,Amphibian,String,Integer,Double>(",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "7ce116aabf04bb0fe36f22e33ed36c39",
        "type": "source_code",
        "text": "new Vehicle(), new Amphibian(), \"hi\", 47, 11.1);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c698d6f1ee8cd36106d058724532868c",
        "type": "source_code",
        "text": "TwoTuple<String,Integer> ttsi = f(); \n    System.out.println(ttsi); \n    // ttsi.first = \"there\"; // Compile error: final \n    System.out.println(g()); \n    System.out.println(h()); \n    System.out.println(k());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "954552ec9e0fbbeffb8ce935afaa8d03",
        "type": "source_code",
        "text": "U item; \n    Node<U> next; \n    Node() { item = null; next = null; } \n    Node(U item, Node<U> next) { \n      this.item = item; \n      this.next = next; \n    } \n    boolean end() { return item == null && next == null; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2a4d32c9a1bf4f204cd5e17eb6f1ac6a",
        "type": "source_code",
        "text": "top = new Node<T>(item, top);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a16189ffd97ed30179c60567f5299282",
        "type": "source_code",
        "text": "T result = top.item; \n    if(!top.end()) \n      top = top.next; \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e969463e64b0a09f3810396335e052ac",
        "type": "source_code",
        "text": "LinkedStack<String> lss = new LinkedStack<String>(); \n    for(String s : \"Phasers on stun!\".split(\" \")) \n      lss.push(s); \n    String s; \n    while((s = lss.pop()) != null) \n      System.out.println(s);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6605c0ee499c2892037c2daaaaaf79c5",
        "type": "source_code",
        "text": "return storage.get(rand.nextInt(storage.size()));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "10da1e02a1949d0e972ec7034d60d183",
        "type": "source_code",
        "text": "RandomList<String> rs = new RandomList<String>(); \n    for(String s: (\"The quick brown fox jumped over \" + \n        \"the lazy brown dog\").split(\" \")) \n      rs.add(s); \n    for(int i = 0; i < 11; i++) \n      System.out.print(rs.select() + \" \");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "5b9ee178e464707ae0e11e1fb27dfff2",
        "type": "source_code",
        "text": "return getClass().getSimpleName() + \" \" + id;",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "e7b4e2e89f33fda39e0b02e937dc57ff",
        "type": "source_code",
        "text": "Cappuccino.class, Americano.class, Breve.class, };",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "669d42231d3b783d842c9fc919183adb",
        "type": "source_code",
        "text": "try { \n      return (Coffee) \n        types[rand.nextInt(types.length)].newInstance(); \n      // Report programmer errors at run time: \n    } catch(Exception e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "9c297da491a69691ac98b7fe21223a81",
        "type": "source_code",
        "text": "int count = size; \n    public boolean hasNext() { return count > 0; } \n    public Coffee next() { \n      count--; \n      return CoffeeGenerator.this.next(); \n    } \n    public void remove() { // Not implemented \n      throw new UnsupportedOperationException(); \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "d63e7a58eca3fc28e7688061bf72ebd4",
        "type": "source_code",
        "text": "return new CoffeeIterator();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "7b2fac59a78b3a3a91070d048e2df26c",
        "type": "source_code",
        "text": "CoffeeGenerator gen = new CoffeeGenerator(); \n    for(int i = 0; i < 5; i++) \n      System.out.println(gen.next()); \n    for(Coffee c : new CoffeeGenerator(5)) \n      System.out.println(c);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8f3808d3f2b5c7360952f41ad516dec3",
        "type": "source_code",
        "text": "if(n < 2) return 1; \n    return fib(n-2) + fib(n-1);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "80147cf2c87c1364530b1bb340ad6da3",
        "type": "source_code",
        "text": "Fibonacci gen = new Fibonacci(); \n    for(int i = 0; i < 18; i++) \n      System.out.print(gen.next() + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "784b9e6388d1423f47dff54df75de9cb",
        "type": "source_code",
        "text": "return new Iterator<Integer>() { \n      public boolean hasNext() { return n > 0; } \n      public Integer next() { \n        n--; \n        return IterableFibonacci.this.next(); \n      } \n      public void remove() { // Not implemented \n        throw new UnsupportedOperationException();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "178b01f055543496a0958397b75fba5b",
        "type": "source_code",
        "text": "} \n    };",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "159de8c1ec026eaf896f7d1f154bfdd2",
        "type": "source_code",
        "text": "for(int i : new IterableFibonacci(18)) \n      System.out.print(i + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a41ee7e51b89e58067f9191362b23fa0",
        "type": "source_code",
        "text": "System.out.println(x.getClass().getName());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3edb607b98062c1de470dab06c559687",
        "type": "source_code",
        "text": "GenericMethods gm = new GenericMethods(); \n    gm.f(\"\"); \n    gm.f(1); \n    gm.f(1.0); \n    gm.f(1.0F); \n    gm.f(\u2018c\u2019); \n    gm.f(gm);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9489e34d8ed64e1a00c2e55ed8560f6f",
        "type": "source_code",
        "text": "return new HashMap<K,V>();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1714d30e0ecf60aa599adeddbd36b07a",
        "type": "source_code",
        "text": "return new ArrayList<T>();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "fa064c59769a09b68ebcd301e3954895",
        "type": "source_code",
        "text": "return new LinkedList<T>();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cd0ba132b630de1fdd0c8ce899606cd6",
        "type": "source_code",
        "text": "return new HashSet<T>();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "fa064c59769a09b68ebcd301e3954895",
        "type": "source_code",
        "text": "return new LinkedList<T>();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "59400f3e2236eae90e2c9ceed0b924b3",
        "type": "source_code",
        "text": "Map<String, List<String>> sls = New.map(); \n    List<String> ls = New.list(); \n    LinkedList<String> lls = New.lList(); \n    Set<String> ss = New.set(); \n    Queue<String> qs = New.queue();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "04c2fee72f3deeb844b7f624472fc407",
        "type": "source_code",
        "text": "Map<Person, List<? extends Pet>> petPeople = New.map(); \n    // Rest of the code is the same...",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "80f89a0cd74d8b9fafe492a01358900f",
        "type": "source_code",
        "text": "// f(New.map()); // Does not compile",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "eba57739308a20afad53d4c3cfc10b19",
        "type": "source_code",
        "text": "f(New.<Person, List<Pet>>map());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "93e457e6cfbf3af99f5525f531f6a016",
        "type": "source_code",
        "text": "List<T> result = new ArrayList<T>(); \n    for(T item : args) \n      result.add(item); \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f29a1ef3699dbd2fc1f539e529ccabc0",
        "type": "source_code",
        "text": "List<String> ls = makeList(\"A\"); \n    System.out.println(ls); \n    ls = makeList(\"A\", \"B\", \"C\"); \n    System.out.println(ls); \n    ls = makeList(\"ABCDEFFHIJKLMNOPQRSTUVWXYZ\".split(\"\")); \n    System.out.println(ls);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8d360c6da8e3d2a92efb0f064aadb0c2",
        "type": "source_code",
        "text": "for(int i = 0; i < n; i++) \n      coll.add(gen.next()); \n    return coll;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "04a4b10d73cda5d1b34eb73b6ad314e1",
        "type": "source_code",
        "text": "Collection<Coffee> coffee = fill( \n      new ArrayList<Coffee>(), new CoffeeGenerator(), 4); \n    for(Coffee c : coffee) \n      System.out.println(c); \n    Collection<Integer> fnumbers = fill( \n      new ArrayList<Integer>(), new Fibonacci(), 12); \n    for(int i : fnumbers) \n      System.out.print(i + \", \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1346c8411bac507ad4b3357a2a8abb80",
        "type": "source_code",
        "text": "try { \n      // Assumes type is a public class: \n      return type.newInstance(); \n    } catch(Exception e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "b22bd756810aab8bc8c78db93154753b",
        "type": "source_code",
        "text": "return new BasicGenerator<T>(type);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "ed403bdaa4cd89787bc84a4e6f3aa69a",
        "type": "source_code",
        "text": "Generator<CountedObject> gen = \n      BasicGenerator.create(CountedObject.class); \n    for(int i = 0; i < 5; i++) \n      System.out.println(gen.next());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "dc12d49dfae887c61a5fc6e711127843",
        "type": "source_code",
        "text": "return new TwoTuple<A,B>(a, b);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "42d4ba87bf7200b2aab27467f2e248d4",
        "type": "source_code",
        "text": "return new ThreeTuple<A,B,C>(a, b, c);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "39206fac976756a1d2379f79c26e83ea",
        "type": "source_code",
        "text": "return new FourTuple<A,B,C,D>(a, b, c, d);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3789d48c3478eabc026f58103133807a",
        "type": "source_code",
        "text": "return new FiveTuple<A,B,C,D,E>(a, b, c, d, e);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b48db5fff6f0ce8a58a28b343b9a6fff",
        "type": "source_code",
        "text": "return tuple(\"hi\", 47);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6dff20e39b54349391ea4518af971b81",
        "type": "source_code",
        "text": "return tuple(new Amphibian(), \"hi\", 47);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1efa32d5c0d94071ce55b828ea47cf84",
        "type": "source_code",
        "text": "return tuple(new Vehicle(), new Amphibian(), \"hi\", 47);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ceb918f7e87154dd9e6443a663250195",
        "type": "source_code",
        "text": "return tuple(new Vehicle(), new Amphibian(), \n      \"hi\", 47, 11.1);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a0e9b801062dc02309f745f687b00822",
        "type": "source_code",
        "text": "TwoTuple<String,Integer> ttsi = f(); \n    System.out.println(ttsi); \n    System.out.println(f2()); \n    System.out.println(g());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "331930c0430864c27f1d98735e1b380a",
        "type": "source_code",
        "text": "System.out.println(h()); \n    System.out.println(k());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5af8c395e8537782ebc68debd035c4a8",
        "type": "source_code",
        "text": "Set<T> result = new HashSet<T>(a); \n    result.addAll(b); \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "034096d469275e2f618307290617a6f6",
        "type": "source_code",
        "text": "Set<T> result = new HashSet<T>(a); \n    result.retainAll(b); \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "72bbb75a0cef3faac96417b5f8794a23",
        "type": "source_code",
        "text": "Set<T> result = new HashSet<T>(superset); \n    result.removeAll(subset); \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "354cd6617eddce8280ee02e79c4f24fb",
        "type": "source_code",
        "text": "return difference(union(a, b), intersection(a, b));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "03145e1cd9fe86fa7b60b349974b7bee",
        "type": "source_code",
        "text": "Set<Watercolors> set1 = \n      EnumSet.range(BRILLIANT_RED, VIRIDIAN_HUE); \n    Set<Watercolors> set2 = \n      EnumSet.range(CERULEAN_BLUE_HUE, BURNT_UMBER); \n    print(\"set1: \" + set1); \n    print(\"set2: \" + set2); \n    print(\"union(set1, set2): \" + union(set1, set2)); \n    Set<Watercolors> subset = intersection(set1, set2); \n    print(\"intersection(set1, set2): \" + subset); \n    print(\"difference(set1, subset): \" + \n      difference(set1, subset));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "15ad2b310fdd2e079148abfb6d16f7e5",
        "type": "source_code",
        "text": "print(\"difference(set2, subset): \" + \n      difference(set2, subset)); \n    print(\"complement(set1, set2): \" + \n      complement(set1, set2));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "01c8c1d0cd996415ce8b23fbac65ca23",
        "type": "source_code",
        "text": "Set<String> result = new TreeSet<String>(); \n    for(Method m : type.getMethods()) \n      result.add(m.getName()); \n    return result;",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "1e154226c3f9efbf8ffe14a6f84bc0b6",
        "type": "source_code",
        "text": "System.out.print(\"Interfaces in \" + \n      type.getSimpleName() + \": \"); \n    List<String> result = new ArrayList<String>(); \n    for(Class<?> c : type.getInterfaces()) \n      result.add(c.getSimpleName()); \n    System.out.println(result);",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "0fa64c464b5a63f5cae36b7f62e35c6e",
        "type": "source_code",
        "text": "System.out.print(superset.getSimpleName() + \n      \" extends \" + subset.getSimpleName() + \", adds: \"); \n    Set<String> comp = Sets.difference( \n      methodSet(superset), methodSet(subset)); \n    comp.removeAll(object); // Don\u2019t show \u2018Object\u2019 methods \n    System.out.println(comp); \n    interfaces(superset);",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "5faa78d1d49579d234e5c9df73eb407a",
        "type": "source_code",
        "text": "System.out.println(\"Collection: \" + \n      methodSet(Collection.class)); \n    interfaces(Collection.class); \n    difference(Set.class, Collection.class); \n    difference(HashSet.class, Set.class); \n    difference(LinkedHashSet.class, HashSet.class); \n    difference(TreeSet.class, Set.class); \n    difference(List.class, Collection.class); \n    difference(ArrayList.class, List.class); \n    difference(LinkedList.class, List.class); \n    difference(Queue.class, Collection.class); \n    difference(PriorityQueue.class, Queue.class); \n    System.out.println(\"Map: \" + methodSet(Map.class)); \n    difference(HashMap.class, Map.class);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "c8686a5808d51df8b6f820de46c22736",
        "type": "source_code",
        "text": "difference(LinkedHashMap.class, HashMap.class); \n    difference(SortedMap.class, Map.class); \n    difference(TreeMap.class, Map.class);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "433f4d18ceefe44f6204d2d1507f2195",
        "type": "source_code",
        "text": "return new Generator<Customer>() { \n      public Customer next() { return new Customer(); } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e9bc53fb030d880b2d7f271d73e8b312",
        "type": "source_code",
        "text": "new Generator<Teller>() { \n      public Teller next() { return new Teller(); } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c49e1a1b142d5c5130767e2ba4c29217",
        "type": "source_code",
        "text": "System.out.println(t + \" serves \" + c);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d1fae965665d6fc7f29590f4e50ec4bd",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    Queue<Customer> line = new LinkedList<Customer>(); \n    Generators.fill(line, Customer.generator(), 15); \n    List<Teller> tellers = new ArrayList<Teller>(); \n    Generators.fill(tellers, Teller.generator, 4);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "78f8639097faef8953f403e9c477e9df",
        "type": "source_code",
        "text": "for(Customer c : line) \n      serve(tellers.get(rand.nextInt(tellers.size())), c);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6a0d5672f886598524ddea7daf6836c6",
        "type": "source_code",
        "text": "TupleList<Vehicle, Amphibian, String, Integer> tl = \n      new TupleList<Vehicle, Amphibian, String, Integer>(); \n    tl.add(TupleTest.h()); \n    tl.add(TupleTest.h()); \n    for(FourTuple<Vehicle,Amphibian,String,Integer> i: tl) \n      System.out.println(i);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "45cf87ab4ff3bc5a3649e2a3bba31266",
        "type": "source_code",
        "text": "id = IDnumber; \n    description = descr; \n    this.price = price; \n    System.out.println(toString());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f77ffa4d3e6f0bc90425eddd4120f0be",
        "type": "source_code",
        "text": "return id + \": \" + description + \", price: $\" + price;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "327484f47c78460e6b26aa5177aace32",
        "type": "source_code",
        "text": "price += change;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "eb2869eee63fee13d1fb5ca74460a534",
        "type": "source_code",
        "text": "new Generator<Product>() { \n      private Random rand = new Random(47); \n      public Product next() { \n        return new Product(rand.nextInt(1000), \"Test\", \n          Math.round(rand.nextDouble() * 1000.0) + 0.99); \n      } \n    };",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "33e7f3be9a7f92e29a5e439001880573",
        "type": "source_code",
        "text": "Generators.fill(this, Product.generator, nProducts);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f534a522d86553f05c100d713feeff86",
        "type": "source_code",
        "text": "for(int i = 0; i < nShelves; i++) \n      add(new Shelf(nProducts));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "293daec408746a5a13039d2fbbe1eb58",
        "type": "source_code",
        "text": "new ArrayList<CheckoutStand>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b3882d11425a91becfc08f83a7f9cda1",
        "type": "source_code",
        "text": "for(int i = 0; i < nAisles; i++)",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "aa1f4b3e95e29c2c64ee8b25af9710e2",
        "type": "source_code",
        "text": "add(new Aisle(nShelves, nProducts));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0d891d18714c2a619a01f1e3bba7017a",
        "type": "source_code",
        "text": "StringBuilder result = new StringBuilder(); \n    for(Aisle a : this) \n      for(Shelf s : a) \n        for(Product p : s) { \n          result.append(p); \n          result.append(\"\\n\"); \n        } \n    return result.toString();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "23105e75c35e36d5c390583e13f6227c",
        "type": "source_code",
        "text": "System.out.println(new Store(14, 5, 10));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "64bf01cb9309df770ea7961aa4c917e7",
        "type": "source_code",
        "text": "Class c1 = new ArrayList<String>().getClass(); \n    Class c2 = new ArrayList<Integer>().getClass(); \n    System.out.println(c1 == c2);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "44b2e380ada7e006eb44c18047bee27d",
        "type": "source_code",
        "text": "List<Frob> list = new ArrayList<Frob>(); \n    Map<Frob,Fnorkle> map = new HashMap<Frob,Fnorkle>(); \n    Quark<Fnorkle> quark = new Quark<Fnorkle>(); \n    Particle<Long,Double> p = new Particle<Long,Double>(); \n    System.out.println(Arrays.toString( \n      list.getClass().getTypeParameters())); \n    System.out.println(Arrays.toString( \n      map.getClass().getTypeParameters())); \n    System.out.println(Arrays.toString( \n      quark.getClass().getTypeParameters())); \n    System.out.println(Arrays.toString( \n      p.getClass().getTypeParameters()));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "79d9411095e2679969cffbf669154736",
        "type": "source_code",
        "text": "HasF hf = new HasF();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1ffa557fb11aa01553037e8d87caf0dc",
        "type": "source_code",
        "text": "Manipulator<HasF> manipulator = \n      new Manipulator<HasF>(hf); \n    manipulator.manipulate();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7eb682e713dec242e2a4052c27e1680a",
        "type": "source_code",
        "text": "Derived2 d2 = new Derived2(); \n    Object obj = d2.get(); \n    d2.set(obj); // Warning here!",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "11bf495b203ff4cf405e9885140ed48c",
        "type": "source_code",
        "text": "return (T[])Array.newInstance(kind, size);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "65c993a4157c9ebff2d0500d1d5141c6",
        "type": "source_code",
        "text": "ArrayMaker<String> stringMaker = \n      new ArrayMaker<String>(String.class); \n    String[] stringArray = stringMaker.create(9); \n    System.out.println(Arrays.toString(stringArray));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "046d4574ca1fd04f482844d57cabbcc9",
        "type": "source_code",
        "text": "ListMaker<String> stringMaker= new ListMaker<String>(); \n    List<String> stringList = stringMaker.create();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d92c9d97df57a8014bd530a5d12e6ee6",
        "type": "source_code",
        "text": "List<T> result = new ArrayList<T>(); \n    for(int i = 0; i < n; i++) \n      result.add(t); \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "68acad738724ab4a0f2af94bd3722068",
        "type": "source_code",
        "text": "FilledListMaker<String> stringMaker = \n      new FilledListMaker<String>(); \n    List<String> list = stringMaker.create(\"Hello\", 4); \n    System.out.println(list);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "af6b984dc52218fd9a8c068eaaaf4bc7",
        "type": "source_code",
        "text": "SimpleHolder holder = new SimpleHolder(); \n    holder.set(\"Item\"); \n    String s = (String)holder.get();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "04e607d9a2e1b26ded53a02c29c5d509",
        "type": "source_code",
        "text": "aload_0",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "40d9cf4679165e3fdb5cfea93b27762b",
        "type": "source_code",
        "text": "aload_1",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "e2764625004427d0f8c2ab4108e77f43",
        "type": "source_code",
        "text": "putfield #2; //Field obj:Object;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "e70c4df10ef0983b9c8c31bd06b2a2c3",
        "type": "source_code",
        "text": "return",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "04e607d9a2e1b26ded53a02c29c5d509",
        "type": "source_code",
        "text": "aload_0",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "93e6a45d9a9da58eec3ef87cb307a67e",
        "type": "source_code",
        "text": "getfield #2; //Field obj:Object;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "be161ba84c6568df15e9c35dbcb7c35a",
        "type": "source_code",
        "text": "areturn",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "46b95b712a8411630427e33e90e1611b",
        "type": "source_code",
        "text": "new #3; //class SimpleHolder",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "0e9f1e8e40bb79e800b0cc9433830cf4",
        "type": "source_code",
        "text": "dup",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cb3efc483ca46384ab040e084d31775b",
        "type": "source_code",
        "text": "invokespecial #4; //Method \"<init>\":()V",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "72d9699461a167f8a85603678be98362",
        "type": "source_code",
        "text": "astore_1",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "40d9cf4679165e3fdb5cfea93b27762b",
        "type": "source_code",
        "text": "aload_1",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "24ab4cf1c776f07a2490a6354992acce",
        "type": "source_code",
        "text": "ldc #5; //String Item",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2c1bbf1c3ee844cbfa0f30676b7aeebf",
        "type": "source_code",
        "text": "GenericHolder<String> holder = \n      new GenericHolder<String>(); \n    holder.set(\"Item\"); \n    String s = holder.get();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "04e607d9a2e1b26ded53a02c29c5d509",
        "type": "source_code",
        "text": "aload_0",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "40d9cf4679165e3fdb5cfea93b27762b",
        "type": "source_code",
        "text": "aload_1",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "e2764625004427d0f8c2ab4108e77f43",
        "type": "source_code",
        "text": "putfield #2; //Field obj:Object;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "e70c4df10ef0983b9c8c31bd06b2a2c3",
        "type": "source_code",
        "text": "return",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "04e607d9a2e1b26ded53a02c29c5d509",
        "type": "source_code",
        "text": "aload_0",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "93e6a45d9a9da58eec3ef87cb307a67e",
        "type": "source_code",
        "text": "getfield #2; //Field obj:Object;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "be161ba84c6568df15e9c35dbcb7c35a",
        "type": "source_code",
        "text": "areturn",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ad81653b1fb1e7a1b8392fa632c9a276",
        "type": "source_code",
        "text": "new #3; //class GenericHolder",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0e9f1e8e40bb79e800b0cc9433830cf4",
        "type": "source_code",
        "text": "dup",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cb3efc483ca46384ab040e084d31775b",
        "type": "source_code",
        "text": "invokespecial #4; //Method \"<init>\":()V",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "72d9699461a167f8a85603678be98362",
        "type": "source_code",
        "text": "astore_1",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "40d9cf4679165e3fdb5cfea93b27762b",
        "type": "source_code",
        "text": "aload_1",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "24ab4cf1c776f07a2490a6354992acce",
        "type": "source_code",
        "text": "ldc #5; //String Item",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "44b5102e0c9565e7eab0ea4103307bf8",
        "type": "source_code",
        "text": "if(arg instanceof T) {}          // Error \n    T var = new T();                 // Error \n    T[] array = new T[SIZE];         // Error \n    T[] array = (T)new Object[SIZE]; // Unchecked warning",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "8aa3b060320bc037cb2a6ed3f820265e",
        "type": "source_code",
        "text": "this.kind = kind;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1695c64297a4da0d18c9a07880735522",
        "type": "source_code",
        "text": "return kind.isInstance(arg);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "72a780d9d9c93f910c8ba158407a4cb4",
        "type": "source_code",
        "text": "ClassTypeCapture<Building> ctt1 = \n      new ClassTypeCapture<Building>(Building.class); \n    System.out.println(ctt1.f(new Building())); \n    System.out.println(ctt1.f(new House())); \n    ClassTypeCapture<House> ctt2 = \n      new ClassTypeCapture<House>(House.class); \n    System.out.println(ctt2.f(new Building())); \n    System.out.println(ctt2.f(new House()));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2e9ba178fa5c9a1af85c439caeb0b1ff",
        "type": "source_code",
        "text": "try { \n      x = kind.newInstance(); \n    } catch(Exception e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a1bb5cfc59e9a8541c4e0158169d550f",
        "type": "source_code",
        "text": "ClassAsFactory<Employee> fe = \n      new ClassAsFactory<Employee>(Employee.class); \n    print(\"ClassAsFactory<Employee> succeeded\"); \n    try { \n      ClassAsFactory<Integer> fi = \n        new ClassAsFactory<Integer>(Integer.class); \n    } catch(Exception e) { \n      print(\"ClassAsFactory<Integer> failed\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4562f3ee59fcc40fc992dde5da972855",
        "type": "source_code",
        "text": "x = factory.create();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2fe93d6fa730ee4b20a9bde8bd1147bd",
        "type": "source_code",
        "text": "return new Integer(0);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "34e0b0ce666891345013d661e028d35f",
        "type": "source_code",
        "text": "public Widget create() { \n      return new Widget(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "28b2b16a3ac6135c7a0837404ef3e994",
        "type": "source_code",
        "text": "new Foo2<Integer>(new IntegerFactory()); \n    new Foo2<Widget>(new Widget.Factory());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b695ac185351491612e5764717778070",
        "type": "source_code",
        "text": "System.out.println(element.getClass().getSimpleName());",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "3f3bd15b34ae03dafac5acda0929038e",
        "type": "source_code",
        "text": "Creator c = new Creator(); \n    c.f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cfdffaa7d32abe7c42e8db634f9c78b7",
        "type": "source_code",
        "text": "// Compiles; produces ClassCastException: \n    //! gia = (Generic<Integer>[])new Object[SIZE]; \n    // Runtime type is the raw (erased) type: \n    gia = (Generic<Integer>[])new Generic[SIZE]; \n    System.out.println(gia.getClass().getSimpleName()); \n    gia[0] = new Generic<Integer>(); \n    //! gia[1] = new Object(); // Compile-time error \n    // Discovers type mismatch at compile time: \n    //! gia[2] = new Generic<Double>();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "7ef9b57e1de5c491387953154957eef5",
        "type": "source_code",
        "text": "array = (T[])new Object[sz];",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "5fcb9d456ee5604440a2bb191791d85e",
        "type": "source_code",
        "text": "array[index] = item;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "a0e015b7b9fe7314ebac82ae89a2c89d",
        "type": "source_code",
        "text": "GenericArray<Integer> gai = \n      new GenericArray<Integer>(10); \n    // This causes a ClassCastException: \n    //! Integer[] ia = gai.rep(); \n    // This is OK: \n    Object[] oa = gai.rep();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1ab066f0f99637ec916557a6e318968f",
        "type": "source_code",
        "text": "array = (T[])new Object[sz]; \n                 ^",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "97070b9f4e112af0fa680fd83b7b74f3",
        "type": "source_code",
        "text": "array = new Object[sz];",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "5fcb9d456ee5604440a2bb191791d85e",
        "type": "source_code",
        "text": "array[index] = item;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "8b9e680af433887a95c8aa0dd2b309c7",
        "type": "source_code",
        "text": "return (T[])array; // Warning: unchecked cast",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "264731888b3c58f48106f69dd7c9dd8b",
        "type": "source_code",
        "text": "GenericArray2<Integer> gai = \n      new GenericArray2<Integer>(10); \n    for(int i = 0; i < 10; i ++) \n      gai.put(i, i); \n    for(int i = 0; i < 10; i ++) \n      System.out.print(gai.get(i) + \" \"); \n    System.out.println(); \n    try { \n      Integer[] ia = gai.rep(); \n    } catch(Exception e) { System.out.println(e); }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a1256aa687f2665a453253f254ea28ce",
        "type": "source_code",
        "text": "array = (T[])Array.newInstance(type, sz);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "5fcb9d456ee5604440a2bb191791d85e",
        "type": "source_code",
        "text": "array[index] = item;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "5a261552b15a0b2e99d80285d0cf9282",
        "type": "source_code",
        "text": "GenericArrayWithTypeToken<Integer> gai = \n      new GenericArrayWithTypeToken<Integer>( \n        Integer.class, 10); \n    // This now works: \n    Integer[] ia = gai.rep();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "442665570a429381f75e65a6128d9db2",
        "type": "source_code",
        "text": "Solid<Bounded> solid = \n      new Solid<Bounded>(new Bounded()); \n    solid.color(); \n    solid.getY(); \n    solid.weight();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fb2c26941f9e7e2cb008d9c8352467e4",
        "type": "source_code",
        "text": "Solid2<Bounded> solid2 = \n      new Solid2<Bounded>(new Bounded()); \n    solid2.color(); \n    solid2.getY(); \n    solid2.weight();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4ebe05671c7f8f20922a007459004b82",
        "type": "source_code",
        "text": "hero.getPower().hearSubtleNoises();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bbfe8db844e1465f6555745832f1f296",
        "type": "source_code",
        "text": "hero.getPower().hearSubtleNoises(); \n    hero.getPower().trackBySmell();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8d69e6951d7b8134d3b3bad416aa034c",
        "type": "source_code",
        "text": "DogBoy dogBoy = new DogBoy(); \n    useSuperHearing(dogBoy); \n    superFind(dogBoy); \n    // You can do this: \n    List<? extends SuperHearing> audioBoys; \n    // But you can\u2019t do this:",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "9b102b0d5ec27c42fe4bfce6b0c51eb5",
        "type": "source_code",
        "text": "// List<? extends SuperHearing & SuperSmell> dogBoys;",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "7982de99a5a6f93a524f115ee09527d6",
        "type": "source_code",
        "text": "Fruit[] fruit = new Apple[10]; \n    fruit[0] = new Apple(); // OK \n    fruit[1] = new Jonathan(); // OK \n    // Runtime type is Apple[], not Fruit[] or Orange[]: \n    try { \n      // Compiler allows you to add Fruit: \n      fruit[0] = new Fruit(); // ArrayStoreException \n    } catch(Exception e) { System.out.println(e); } \n    try { \n      // Compiler allows you to add Oranges: \n      fruit[0] = new Orange(); // ArrayStoreException \n    } catch(Exception e) { System.out.println(e); }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "e8109df4ed55a56fb07d6813752bfcd8",
        "type": "source_code",
        "text": "// Wildcards allow covariance: \n    List<? extends Fruit> flist = new ArrayList<Apple>(); \n    // Compile Error: can\u2019t add any type of object: \n    // flist.add(new Apple()); \n    // flist.add(new Fruit()); \n    // flist.add(new Object()); \n    flist.add(null); // Legal but uninteresting \n    // We know that it returns at least Fruit: \n    Fruit f = flist.get(0);",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "e30aa16b6285db01e8417ad1e7fdfa9e",
        "type": "source_code",
        "text": "List<? extends Fruit> flist = \n      Arrays.asList(new Apple()); \n    Apple a = (Apple)flist.get(0); // No warning \n    flist.contains(new Apple()); // Argument is \u2018Object\u2019 \n    flist.indexOf(new Apple()); // Argument is \u2018Object\u2019",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "b636cfd34a3e0e96fa51f10dd99d807f",
        "type": "source_code",
        "text": "return value.equals(obj);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "489c73e4bf4fbfdf70efde910e5265df",
        "type": "source_code",
        "text": "Holder<Apple> Apple = new Holder<Apple>(new Apple()); \n    Apple d = Apple.get(); \n    Apple.set(d); \n    // Holder<Fruit> Fruit = Apple; // Cannot upcast \n    Holder<? extends Fruit> fruit = Apple; // OK \n    Fruit p = fruit.get(); \n    d = (Apple)fruit.get(); // Returns \u2018Object\u2019 \n    try { \n      Orange c = (Orange)fruit.get(); // No warning \n    } catch(Exception e) { System.out.println(e); } \n    // fruit.set(new Apple()); // Cannot call set() \n    // fruit.set(new Fruit()); // Cannot call set() \n    System.out.println(fruit.equals(d)); // OK",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "49042b85264b5090ed03cb0eddce3555",
        "type": "source_code",
        "text": "apples.add(new Apple()); \n    apples.add(new Jonathan()); \n    // apples.add(new Fruit()); // Error",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bc1fb5fb932f8f50f6179fc6a0b98a98",
        "type": "source_code",
        "text": "list.add(item);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4c8d6397c5d2e2ca553f6802ba7feb1d",
        "type": "source_code",
        "text": "writeExact(apples, new Apple()); \n    // writeExact(fruit, new Apple()); // Error: \n    // Incompatible types: found Fruit, required Apple",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "bc1fb5fb932f8f50f6179fc6a0b98a98",
        "type": "source_code",
        "text": "list.add(item);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "101703046560eabe1218500e96dd08fc",
        "type": "source_code",
        "text": "writeWithWildcard(apples, new Apple()); \n    writeWithWildcard(fruit, new Apple());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f9006ba13f1000ca7a6b6b3debe76cc4",
        "type": "source_code",
        "text": "return list.get(0);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c77a0b5baac571b742322ba79b4a5105",
        "type": "source_code",
        "text": "Apple a = readExact(apples); \n    Fruit f = readExact(fruit); \n    f = readExact(apples);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "180482b044a339eef2bd40e05f47a31d",
        "type": "source_code",
        "text": "T readExact(List<T> list) { return list.get(0); }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b87f35a79bb1708cdda9e64b38d04e98",
        "type": "source_code",
        "text": "Reader<Fruit> fruitReader = new Reader<Fruit>(); \n    Fruit f = fruitReader.readExact(fruit); \n    // Fruit a = fruitReader.readExact(apples); // Error: \n    // readExact(List<Fruit>) cannot be \n    // applied to (List<Apple>).",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b4835ff130c2e9e29915890b1d946889",
        "type": "source_code",
        "text": "T readCovariant(List<? extends T> list) { \n      return list.get(0); \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "c3fc640a8d3a4c44e8c8d5c15a3c5723",
        "type": "source_code",
        "text": "CovariantReader<Fruit> fruitReader = \n      new CovariantReader<Fruit>(); \n    Fruit f = fruitReader.readCovariant(fruit); \n    Fruit a = fruitReader.readCovariant(apples);",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "b285decbebc26a6609ca8651a6c141d9",
        "type": "source_code",
        "text": "f1(); f2(); f3();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "10757240d1320ae79111febc8db89139",
        "type": "source_code",
        "text": "list1 = list; \n    list2 = list; \n    // list3 = list; // Warning: unchecked conversion \n    // Found: List, Required: List<? extends Object>",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "ff0b7a7212c440ed6a7c81180c1acda4",
        "type": "source_code",
        "text": "list1 = list; \n    list2 = list; \n    list3 = list;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ff0b7a7212c440ed6a7c81180c1acda4",
        "type": "source_code",
        "text": "list1 = list; \n    list2 = list; \n    list3 = list;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7c06b7e5c2fd509c5865908747959e78",
        "type": "source_code",
        "text": "assign1(new ArrayList()); \n    assign2(new ArrayList()); \n    // assign3(new ArrayList()); // Warning: \n    // Unchecked conversion. Found: ArrayList \n    // Required: List<? extends Object> \n    assign1(new ArrayList<String>()); \n    assign2(new ArrayList<String>()); \n    assign3(new ArrayList<String>()); \n    // Both forms are acceptable as List<?>: \n    List<?> wildList = new ArrayList(); \n    wildList = new ArrayList<String>(); \n    assign1(wildList); \n    assign2(wildList); \n    assign3(wildList);",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "b12db094a3435c3071ec0fd58bb19510",
        "type": "source_code",
        "text": "assign1(new HashMap()); \n    assign2(new HashMap()); \n    // assign3(new HashMap()); // Warning: \n    // Unchecked conversion. Found: HashMap \n    // Required: Map<String,?> \n    assign1(new HashMap<String,Integer>()); \n    assign2(new HashMap<String,Integer>()); \n    assign3(new HashMap<String,Integer>());",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "ae11f06ed342594d976ec5fabc0e4ba3",
        "type": "source_code",
        "text": "// holder.set(arg); // Warning: \n    //   Unchecked call to set(T) as a \n    //   member of the raw type Holder \n    // holder.set(new Wildcards()); // Same warning",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "96edd9db67d20b0c49899b2758bf9daf",
        "type": "source_code",
        "text": "// Can\u2019t do this; don\u2019t have any \u2018T\u2019: \n    // T t = holder.get();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "031dad261850cee49b6e11c3dcefef4b",
        "type": "source_code",
        "text": "// OK, but type information has been lost: \n    Object obj = holder.get();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "b7f746b2e8e9a56bf626cf4375a1ffc1",
        "type": "source_code",
        "text": "// holder.set(arg); // Error: \n    //   set(capture of ?) in Holder<capture of ?> \n    //   cannot be applied to (Object) \n    // holder.set(new Wildcards()); // Same error",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "96edd9db67d20b0c49899b2758bf9daf",
        "type": "source_code",
        "text": "// Can\u2019t do this; don\u2019t have any \u2018T\u2019: \n    // T t = holder.get();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "031dad261850cee49b6e11c3dcefef4b",
        "type": "source_code",
        "text": "// OK, but type information has been lost: \n    Object obj = holder.get();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "14fb9e34c273a962283870a2ada561cd",
        "type": "source_code",
        "text": "T t = holder.get(); \n    return t;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8732f61d36a20b4768499d902d5a2667",
        "type": "source_code",
        "text": "holder.set(arg); \n    T t = holder.get(); \n    return t;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "32a67e77e8529c43a617a47067dd9a9a",
        "type": "source_code",
        "text": "// holder.set(arg); // Error: \n    //   set(capture of ? extends T) in \n    //   Holder<capture of ? extends T> \n    //   cannot be applied to (T) \n    T t = holder.get(); \n    return t;",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "68609f6cc5c4109536e47693fd46085b",
        "type": "source_code",
        "text": "holder.set(arg); \n    // T t = holder.get();  // Error: \n    //   Incompatible types: found Object, required T",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "031dad261850cee49b6e11c3dcefef4b",
        "type": "source_code",
        "text": "// OK, but type information has been lost: \n    Object obj = holder.get();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "67a08b2b16a6e85b2a3a3ff9cd647e53",
        "type": "source_code",
        "text": "Holder raw = new Holder<Long>(); \n    // Or: \n    raw = new Holder(); \n    Holder<Long> qualified = new Holder<Long>(); \n    Holder<?> unbounded = new Holder<Long>(); \n    Holder<? extends Long> bounded = new Holder<Long>(); \n    Long lng = 1L;",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "95d03c5958aa24c2b2f299d369bb8aea",
        "type": "source_code",
        "text": "rawArgs(raw, lng); \n    rawArgs(qualified, lng); \n    rawArgs(unbounded, lng); \n    rawArgs(bounded, lng);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "53ac873138dd3f42ee7ada684d38c20e",
        "type": "source_code",
        "text": "unboundedArg(raw, lng); \n    unboundedArg(qualified, lng); \n    unboundedArg(unbounded, lng);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "29d09536952bbd4a78d6fa5bb0845a79",
        "type": "source_code",
        "text": "unboundedArg(bounded, lng);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bc79bf06d5680f43ab764a1c33be16b7",
        "type": "source_code",
        "text": "// Object r1 = exact1(raw); // Warnings: \n    //   Unchecked conversion from Holder to Holder<T> \n    //   Unchecked method invocation: exact1(Holder<T>) \n    //   is applied to (Holder) \n    Long r2 = exact1(qualified); \n    Object r3 = exact1(unbounded); // Must return Object \n    Long r4 = exact1(bounded);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "6a899a1aa692dc87529a3dcb1ca0860f",
        "type": "source_code",
        "text": "// Long r5 = exact2(raw, lng); // Warnings: \n    //   Unchecked conversion from Holder to Holder<Long> \n    //   Unchecked method invocation: exact2(Holder<T>,T) \n    //   is applied to (Holder,Long) \n    Long r6 = exact2(qualified, lng); \n    // Long r7 = exact2(unbounded, lng); // Error: \n    //   exact2(Holder<T>,T) cannot be applied to \n    //   (Holder<capture of ?>,Long) \n    // Long r8 = exact2(bounded, lng); // Error: \n    //   exact2(Holder<T>,T) cannot be applied \n    //   to (Holder<capture of ? extends Long>,Long)",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "2f8a6f749058cd0c40d61d37d7c44bd7",
        "type": "source_code",
        "text": "// Long r9 = wildSubtype(raw, lng); // Warnings: \n    //   Unchecked conversion from Holder \n    //   to Holder<? extends Long> \n    //   Unchecked method invocation: \n    //   wildSubtype(Holder<? extends T>,T) is \n    //   applied to (Holder,Long) \n    Long r10 = wildSubtype(qualified, lng); \n    // OK, but can only return Object: \n    Object r11 = wildSubtype(unbounded, lng); \n    Long r12 = wildSubtype(bounded, lng);",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "f5642058afdf3220d1d667e4117188e7",
        "type": "source_code",
        "text": "// wildSupertype(raw, lng); // Warnings: \n    //   Unchecked conversion from Holder \n    //   to Holder<? super Long> \n    //   Unchecked method invocation: \n    //   wildSupertype(Holder<? super T>,T) \n    //   is applied to (Holder,Long) \n    wildSupertype(qualified, lng); \n    // wildSupertype(unbounded, lng); // Error: \n    //   wildSupertype(Holder<? super T>,T) cannot be \n    //   applied to (Holder<capture of ?>,Long) \n    // wildSupertype(bounded, lng); // Error: \n    //   wildSupertype(Holder<? super T>,T) cannot be \n    //  applied to (Holder<capture of ? extends Long>,Long)",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "88c110204948533af42a97dd81a86fc7",
        "type": "source_code",
        "text": "T t = holder.get(); \n    System.out.println(t.getClass().getSimpleName());",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "e12160f1c67e709c36d306f86a1c2c5d",
        "type": "source_code",
        "text": "f1(holder); // Call with captured type",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "01b19db9c98382604e06cc8df94d63fe",
        "type": "source_code",
        "text": "Holder raw = new Holder<Integer>(1); \n    // f1(raw); // Produces warnings \n    f2(raw); // No warnings \n    Holder rawBasic = new Holder(); \n    rawBasic.set(new Object()); // Warning \n    f2(rawBasic); // No warnings \n    // Upcast to Holder<?>, still figures it out: \n    Holder<?> wildcarded = new Holder<Double>(1.0); \n    f2(wildcarded);",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "2974ab430d92b4c6683d3f18fd4080b9",
        "type": "source_code",
        "text": "List<Integer> li = new ArrayList<Integer>(); \n    for(int i = 0; i < 5; i++) \n      li.add(i); \n    for(int i : li) \n      System.out.print(i + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d3773d35e43cb5e8c78fefe4d59184b9",
        "type": "source_code",
        "text": "new HashSet<Byte>(Arrays.asList(possibles));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ca3450c5766b37f59a23da3f3a3a2609",
        "type": "source_code",
        "text": "for(int i = 0; i < a.length; i++) \n      a[i] = gen.next(); \n    return a;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "74d8b8f29a8b033c62b65ee94074ae24",
        "type": "source_code",
        "text": "String[] strings = FArray.fill( \n      new String[7], new RandomGenerator.String(10)); \n    for(String s : strings) \n      System.out.println(s); \n    Integer[] integers = FArray.fill( \n      new Integer[7], new RandomGenerator.Integer()); \n    for(int i: integers) \n      System.out.println(i); \n    // Autoboxing won\u2019t save you here. This won\u2019t compile: \n    // int[] b = \n    //   FArray.fill(new int[7], new RandIntGenerator());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f39a32a575028c767a0216c44a730f7f",
        "type": "source_code",
        "text": "storage = new Object[size];",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "ef2918be73b5e170e580169e3a988129",
        "type": "source_code",
        "text": "FixedSizeStack<String> strings = \n      new FixedSizeStack<String>(SIZE); \n    for(String s : \"A B C D E F G H I J\".split(\" \")) \n      strings.push(s); \n    for(int i = 0; i < SIZE; i++) { \n      String s = strings.pop(); \n      System.out.print(s + \" \"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8f9dcbad595d0f1ebbfe1135e616ea8b",
        "type": "source_code",
        "text": "ObjectInputStream in = new ObjectInputStream( \n      new FileInputStream(args[0])); \n    List<Widget> shapes = (List<Widget>)in.readObject();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1d1e58554bb185e6056c692fb3b63895",
        "type": "source_code",
        "text": "List<Shape> shapes = (List<Widget>)in.readObject();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "95ea3b6d75117611416e74672e1da1b4",
        "type": "source_code",
        "text": "ObjectInputStream in = new ObjectInputStream( \n      new FileInputStream(args[0])); \n      // Won\u2019t Compile:",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "755d9a860a3db65f2a3a4a56818a0fb7",
        "type": "source_code",
        "text": "List<Widget> lw1 =",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2edc73d3b32e5c7304bb814cb1064f1c",
        "type": "source_code",
        "text": "List<Widget>.class.cast(in.readObject()); \n    List<Widget> lw2 = List.class.cast(in.readObject());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b695ac185351491612e5764717778070",
        "type": "source_code",
        "text": "System.out.println(element.getClass().getSimpleName());",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "ece3d8addc1f284a6617e0939c0363eb",
        "type": "source_code",
        "text": "Subtype st1 = new Subtype(), st2 = new Subtype(); \n    st1.set(st2); \n    Subtype st3 = st1.get(); \n    st1.f();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "1030848b8afe2894dcc6751741513934",
        "type": "source_code",
        "text": "BasicOther b = new BasicOther(), b2 = new BasicOther(); \n    b.set(new Other()); \n    Other other = b.get(); \n    b.f();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5f7d54593213009225b48b84057ff75a",
        "type": "source_code",
        "text": "element = arg; \n    return this;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "615591ccadef7bb7eb7cea6697895ee6",
        "type": "source_code",
        "text": "A a = new A(); \n    a.set(new A()); \n    a = a.set(new A()).get(); \n    a = a.get(); \n    C c = new C(); \n    c = c.setAndGet(new C());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5f7d54593213009225b48b84057ff75a",
        "type": "source_code",
        "text": "element = arg; \n    return this;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6df435de83834be9f217314218518004",
        "type": "source_code",
        "text": "return arg.set(arg).get();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a663499bbc8970c40b938bfbe9e6d634",
        "type": "source_code",
        "text": "A a = f(new A());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "52f9c652ec7d410a914ac5bb8fe15711",
        "type": "source_code",
        "text": "Derived d2 = d.get();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fe5858183cb5192aafae178bd227d99c",
        "type": "source_code",
        "text": "Getter result = g.get(); \n    GenericGetter gg = g.get(); // Also the base type",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "b7ba77f6381df990497b71de945ca3a6",
        "type": "source_code",
        "text": "System.out.println(\"OrdinarySetter.set(Base)\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8ba7fb593351707c69e1291d01b6543e",
        "type": "source_code",
        "text": "System.out.println(\"DerivedSetter.set(Derived)\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "154fbdcc5f1a884c78a7dce752c9c27e",
        "type": "source_code",
        "text": "Base base = new Base(); \n    Derived derived = new Derived(); \n    DerivedSetter ds = new DerivedSetter(); \n    ds.set(derived); \n    ds.set(base); // Compiles: overloaded, not overridden!",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "9ce39ecce3351fc2bb04c93974b27dc8",
        "type": "source_code",
        "text": "s1.set(s2); \n    // s1.set(sbs); // Error: \n    // set(Setter) in SelfBoundSetter<Setter> \n    // cannot be applied to (SelfBoundSetter)",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "cd6ded81e11ead4765c0ec4f9f0a079f",
        "type": "source_code",
        "text": "System.out.println(\"GenericSetter.set(Base)\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5fa366b8f97299d2c100c1daa2b15a74",
        "type": "source_code",
        "text": "System.out.println(\"DerivedGS.set(Derived)\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dbaf29f0cc1c6c51154e9ef104bcc7bf",
        "type": "source_code",
        "text": "Base base = new Base(); \n    Derived derived = new Derived(); \n    DerivedGS dgs = new DerivedGS(); \n    dgs.set(derived); \n    dgs.set(base); // Compiles: overloaded, not overridden!",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "702661d09a373a5717a57a99f17f11cf",
        "type": "source_code",
        "text": "probablyDogs.add(new Cat());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9c1f5058fb2e47988f80f4209b83b719",
        "type": "source_code",
        "text": "List<Dog> dogs1 = new ArrayList<Dog>(); \n    oldStyleMethod(dogs1); // Quietly accepts a Cat \n    List<Dog> dogs2 = Collections.checkedList( \n      new ArrayList<Dog>(), Dog.class); \n    try { \n      oldStyleMethod(dogs2); // Throws an exception \n    } catch(Exception e) { \n      System.out.println(e); \n    } \n    // Derived types work fine: \n    List<Pet> pets = Collections.checkedList( \n      new ArrayList<Pet>(), Pet.class); \n    pets.add(new Dog()); \n    pets.add(new Cat());",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "1d4dee8873ff0080f493eb73c9e8742a",
        "type": "source_code",
        "text": "List<T> resultCollector = new ArrayList<T>(); \n    for(Processor<T,E> processor : this) \n      processor.process(resultCollector); \n    return resultCollector;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8dcd548b8e72d54b14d5ad9083fde4f4",
        "type": "source_code",
        "text": "if(count-- > 1) \n      resultCollector.add(\"Hep!\"); \n    else \n      resultCollector.add(\"Ho!\"); \n    if(count < 0) \n       throw new Failure1();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d9485ff856327d7e7d13376a5c1e81a6",
        "type": "source_code",
        "text": "if(count-- == 0) \n      resultCollector.add(47); \n    else { \n      resultCollector.add(11); \n    } \n    if(count < 0) \n       throw new Failure2();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9239ddd04af76dfc612e4b7a8c35c156",
        "type": "source_code",
        "text": "ProcessRunner<String,Failure1> runner = \n      new ProcessRunner<String,Failure1>(); \n    for(int i = 0; i < 3; i++) \n      runner.add(new Processor1()); \n    try { \n      System.out.println(runner.processAll()); \n    } catch(Failure1 e) { \n      System.out.println(e); \n    }",
        "programming_language": "TASM",
        "weight": 0.0
    },
    {
        "id": "d6fc106cc2a2c23c46e288fc2ccd2a58",
        "type": "source_code",
        "text": "ProcessRunner<Integer,Failure2> runner2 = \n      new ProcessRunner<Integer,Failure2>(); \n    for(int i = 0; i < 3; i++) \n      runner2.add(new Processor2()); \n    try { \n      System.out.println(runner2.processAll()); \n    } catch(Failure2 e) { \n      System.out.println(e); \n    }",
        "programming_language": "TASM",
        "weight": 0.0
    },
    {
        "id": "de22e85d2035b744ad37a5901144cafa",
        "type": "source_code",
        "text": "\" \" << mixin1.getSerialNumber() << endl;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f187652ca9ac71dfefc7b17730abdeb9",
        "type": "source_code",
        "text": "\" \" << mixin2.getSerialNumber() << endl;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7b723a48f54d47e1fd78fe5692163271",
        "type": "source_code",
        "text": "timeStamp = new Date().getTime();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "fbd7200b454d048360fc9deb2511defd",
        "type": "source_code",
        "text": "new SerialNumberedImp();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4aa17dbc14e35bbca7032141024c6811",
        "type": "source_code",
        "text": "return serialNumber.getSerialNumber();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "20a11224dca59626e5312855eaeff5ea",
        "type": "source_code",
        "text": "Mixin mixin1 = new Mixin(), mixin2 = new Mixin(); \n    mixin1.set(\"test string 1\"); \n    mixin2.set(\"test string 2\"); \n    System.out.println(mixin1.get() + \" \" + \n      mixin1.getStamp() +  \" \" + mixin1.getSerialNumber()); \n    System.out.println(mixin2.get() + \" \" + \n      mixin2.getStamp() +  \" \" + mixin2.getSerialNumber());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f5ca015a0e825b4b33a874b90686d547",
        "type": "source_code",
        "text": "super(basic); \n    timeStamp = new Date().getTime();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e47d2d8ac713a82edbba6d021cc083b1",
        "type": "source_code",
        "text": "TimeStamped t = new TimeStamped(new Basic()); \n    TimeStamped t2 = new TimeStamped( \n      new SerialNumbered(new Basic())); \n    //! t2.getSerialNumber(); // Not available \n    SerialNumbered s = new SerialNumbered(new Basic()); \n    SerialNumbered s2 = new SerialNumbered( \n      new TimeStamped(new Basic())); \n    //! s2.getStamp(); // Not available",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9a362b6935bfc54af8eba5205253c362",
        "type": "source_code",
        "text": "delegatesByMethod = new HashMap<String,Object>(); \n    for(TwoTuple<Object,Class<?>> pair : pairs) { \n      for(Method method : pair.second.getMethods()) { \n        String methodName = method.getName(); \n        // The first interface in the map \n        // implements the method. \n        if (!delegatesByMethod.containsKey(methodName)) \n          delegatesByMethod.put(methodName, pair.first); \n      } \n    }",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "d9a0b18568ee89a52bbe8a2cd770e114",
        "type": "source_code",
        "text": "Object[] args) throws Throwable { \n    String methodName = method.getName(); \n    Object delegate = delegatesByMethod.get(methodName); \n    return method.invoke(delegate, args);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "140bc2d2d930436f600ca07b0dc361a0",
        "type": "source_code",
        "text": "Class[] interfaces = new Class[pairs.length]; \n    for(int i = 0; i < pairs.length; i++) { \n      interfaces[i] = (Class)pairs[i].second; \n    } \n    ClassLoader cl = \n      pairs[0].first.getClass().getClassLoader(); \n    return Proxy.newProxyInstance( \n      cl, interfaces, new MixinProxy(pairs));",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "ba891b522c4c84148d3fb7412712a5d1",
        "type": "source_code",
        "text": "Object mixin = MixinProxy.newInstance( \n      tuple(new BasicImp(), Basic.class), \n      tuple(new TimeStampedImp(), TimeStamped.class), \n      tuple(new SerialNumberedImp(),SerialNumbered.class)); \n    Basic b = (Basic)mixin; \n    TimeStamped t = (TimeStamped)mixin; \n    SerialNumbered s = (SerialNumbered)mixin; \n    b.set(\"Hello\"); \n    System.out.println(b.get()); \n    System.out.println(t.getStamp()); \n    System.out.println(s.getSerialNumber());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e547a118ec49e11721bb874430a6b7a3",
        "type": "source_code",
        "text": "def speak(self): \n        print \"Arf!\" \n    def sit(self): \n        print \"Sitting\" \n    def reproduce(self): \n        pass",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "68f4312115bc27e72d0638d27698aaa9",
        "type": "source_code",
        "text": "def speak(self): \n        print \"Click!\" \n    def sit(self): \n        print \"Clank!\" \n    def oilChange(self) : \n        pass",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "233ced92131e055e5de9d6295b2ea2d3",
        "type": "source_code",
        "text": "anything.speak() \n    anything.sit()",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "10a951969405986cf507366fbbaea71b",
        "type": "source_code",
        "text": "performer.speak(); \n    performer.sit();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ba75c54854e24d0069049661706143db",
        "type": "source_code",
        "text": "PerformingDog d = new PerformingDog(); \n    Robot r = new Robot(); \n    Communicate.perform(d); \n    Communicate.perform(r);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "10a951969405986cf507366fbbaea71b",
        "type": "source_code",
        "text": "performer.speak(); \n    performer.sit();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d7f8ee6de2fb581afa2645762a70f58a",
        "type": "source_code",
        "text": "CommunicateSimply.perform(new PerformingDog()); \n    CommunicateSimply.perform(new Robot());",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "eda83adfe3067cb908e446cf40394af3",
        "type": "source_code",
        "text": "latent typing",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d50ac31543cc9aada4454ee8c0494643",
        "type": "source_code",
        "text": "Class<?> spkr = speaker.getClass(); \n    try { \n      try { \n        Method speak = spkr.getMethod(\"speak\"); \n        speak.invoke(speaker); \n      } catch(NoSuchMethodException e) { \n        print(speaker + \" cannot speak\"); \n      } \n      try { \n        Method sit = spkr.getMethod(\"sit\"); \n        sit.invoke(speaker); \n      } catch(NoSuchMethodException e) { \n        print(speaker + \" cannot sit\"); \n      } \n    } catch(Exception e) { \n      throw new RuntimeException(speaker.toString(), e); \n    }",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "93651f84496b3b47d88c7e397937c52c",
        "type": "source_code",
        "text": "CommunicateReflectively.perform(new SmartDog()); \n    CommunicateReflectively.perform(new Robot()); \n    CommunicateReflectively.perform(new Mime());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "207e561b8b1708b17baf37dbc203c308",
        "type": "source_code",
        "text": "try { \n      for(T t: seq) \n        f.invoke(t, args); \n    } catch(Exception e) { \n      // Failures are programmer errors \n      throw new RuntimeException(e); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "71ead093bf93ec5999fbaf4c91251fa1",
        "type": "source_code",
        "text": "print(this + \" resize \" + newSize);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0f8acd8c6d244431f7eb01aca69fadfb",
        "type": "source_code",
        "text": "try { \n      for(int i = 0; i < size; i++) \n        // Assumes default constructor: \n        add(type.newInstance()); \n    } catch(Exception e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "ed5fd94b75ea2ae99aca83421f53fcbf",
        "type": "source_code",
        "text": "List<Shape> shapes = new ArrayList<Shape>(); \n    for(int i = 0; i < 10; i++) \n      shapes.add(new Shape()); \n    Apply.apply(shapes, Shape.class.getMethod(\"rotate\")); \n    Apply.apply(shapes, \n      Shape.class.getMethod(\"resize\", int.class), 5); \n    List<Square> squares = new ArrayList<Square>(); \n    for(int i = 0; i < 10; i++) \n      squares.add(new Square()); \n    Apply.apply(squares, Shape.class.getMethod(\"rotate\")); \n    Apply.apply(squares, \n      Shape.class.getMethod(\"resize\", int.class), 5);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "68fac6d6d50f8d5a45ca90ea791d89fd",
        "type": "source_code",
        "text": "Apply.apply(new FilledList<Shape>(Shape.class, 10), \n      Shape.class.getMethod(\"rotate\")); \n    Apply.apply(new FilledList<Shape>(Square.class, 10), \n      Shape.class.getMethod(\"rotate\"));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cc3bf2a390cd4878cb66f23e17ba0236",
        "type": "source_code",
        "text": "SimpleQueue<Shape> shapeQ = new SimpleQueue<Shape>(); \n    for(int i = 0; i < 5; i++) { \n      shapeQ.add(new Shape()); \n      shapeQ.add(new Square()); \n    } \n    Apply.apply(shapeQ, Shape.class.getMethod(\"rotate\"));",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "8655c1073f7ea59fee385ad3f297c170",
        "type": "source_code",
        "text": "return storage.iterator();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "faf018bede25f31560893d8ff95152af",
        "type": "source_code",
        "text": "for(int i = 0; i < size; i++) \n      // Assumes default constructor: \n      try { \n        collection.add(classToken.newInstance()); \n      } catch(Exception e) { \n        throw new RuntimeException(e); \n      }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "4dd07c6b84d4dcfecf12b328f2a2bc4e",
        "type": "source_code",
        "text": "return getClass().getName() + \" \" + id;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "722c86fdabd01abdd008d4b4f507d1b2",
        "type": "source_code",
        "text": "List<Contract> contracts = new ArrayList<Contract>(); \n    Fill.fill(contracts, Contract.class, 3); \n    Fill.fill(contracts, TitleTransfer.class, 2); \n    for(Contract c: contracts) \n      System.out.println(c); \n    SimpleQueue<Contract> contractQueue = \n      new SimpleQueue<Contract>(); \n    // Won\u2019t work. fill() is not generic enough: \n    // Fill.fill(contractQueue, Contract.class, 3);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "c7abaf414913557d8879b86388decdcd",
        "type": "source_code",
        "text": "for(int i = 0; i < size; i++) \n      try { \n        addable.add(classToken.newInstance()); \n      } catch(Exception e) { \n        throw new RuntimeException(e); \n      }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e4787e2d7328b8b3d09d306422472906",
        "type": "source_code",
        "text": "for(int i = 0; i < size; i++) \n      addable.add(generator.next());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "797bf9d3633edf565d4c1776b2610bf6",
        "type": "source_code",
        "text": "this.c = c;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b360d559d6c651f668aec736b3c5883f",
        "type": "source_code",
        "text": "return new AddableCollectionAdapter<T>(c);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f12bd2dba0a300175e1548f41286144a",
        "type": "source_code",
        "text": "// Adapt a Collection: \n    List<Coffee> carrier = new ArrayList<Coffee>(); \n    Fill2.fill( \n      new AddableCollectionAdapter<Coffee>(carrier), \n      Coffee.class, 3); \n    // Helper method captures the type: \n    Fill2.fill(Adapter.collectionAdapter(carrier), \n      Latte.class, 2); \n    for(Coffee c: carrier) \n      print(c); \n    print(\"----------------------\"); \n    // Use an adapted class: \n    AddableSimpleQueue<Coffee> coffeeQueue = \n      new AddableSimpleQueue<Coffee>(); \n    Fill2.fill(coffeeQueue, Mocha.class, 4); \n    Fill2.fill(coffeeQueue, Latte.class, 1); \n    for(Coffee c: coffeeQueue) \n      print(c);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "cffbc1eff1ec962c6fe0afc3f56145c7",
        "type": "source_code",
        "text": "strategies",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5db9ed073382c3ae68243f6a8ea6d350",
        "type": "source_code",
        "text": "Iterator<T> it = seq.iterator(); \n    if(it.hasNext()) { \n      T result = it.next(); \n      while(it.hasNext()) \n        result = combiner.combine(result, it.next()); \n      return result; \n    } \n    // If seq is the empty list: \n    return null; // Or throw exception",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "9790ab6b9e4cb6bd22bb4ac97e31384a",
        "type": "source_code",
        "text": "for(T t : seq) \n      func.function(t); \n    return func;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "de60f09432bb71a33f7caf46eb3bbbbb",
        "type": "source_code",
        "text": "List<R> result = new ArrayList<R>(); \n    for(T t : seq) \n      result.add(func.function(t)); \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "91ada42ce56b06f444a8c331ed0b4b7a",
        "type": "source_code",
        "text": "List<T> result = new ArrayList<T>(); \n    for(T t : seq) \n      if(pred.test(t)) \n        result.add(t); \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ffb9487f50df51a7d4f21f94474bf9ef",
        "type": "source_code",
        "text": "public Integer combine(Integer x, Integer y) { \n      return x + y; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "97df4d0f666f9bf7b21296ebcf2047fc",
        "type": "source_code",
        "text": "public Integer combine(Integer x, Integer y) { \n      return x - y; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "edc5446776e8a1e4e4d20fb8b3435084",
        "type": "source_code",
        "text": "public BigDecimal combine(BigDecimal x, BigDecimal y) { \n      return x.add(y); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "61817ee6839bf817bd77d2981e2793bd",
        "type": "source_code",
        "text": "public BigInteger combine(BigInteger x, BigInteger y) { \n      return x.add(y);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cbb184dd8e05c9709e5dcaedaa0495cf",
        "type": "source_code",
        "text": "}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4414b790d0e028fbfa7421a30567fc91",
        "type": "source_code",
        "text": "public AtomicLong combine(AtomicLong x, AtomicLong y) { \n      // Not clear whether this is meaningful: \n      return new AtomicLong(x.addAndGet(y.get())); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "c4fe56c829742bed33aa0f9e605c9109",
        "type": "source_code",
        "text": "public BigDecimal function(BigDecimal x) { \n      return x.ulp(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "70c1f4e03ddd15e3275b2af4579e3f4a",
        "type": "source_code",
        "text": "private T bound; \n    public GreaterThan(T bound) { this.bound = bound; } \n    public boolean test(T x) { \n      return x.compareTo(bound) > 0; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f8bdd5827ad225285cbd196dec7c0585",
        "type": "source_code",
        "text": "private Integer val = 1; \n    public Integer function(Integer x) { \n      val *= x; \n      return val; \n    } \n    public Integer result() { return val; }",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "ecb56bb1f80e2d652c7ef60c21e47474",
        "type": "source_code",
        "text": "// Generics, varargs & boxing working together: \n    List<Integer> li = Arrays.asList(1, 2, 3, 4, 5, 6, 7); \n    Integer result = reduce(li, new IntegerAdder()); \n    print(result);",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "a1b726f16557a0f577e9df8064c12dac",
        "type": "source_code",
        "text": "result = reduce(li, new IntegerSubtracter()); \n    print(result);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ea4b6dc25d1b3cf8fa3d44ae3a52608f",
        "type": "source_code",
        "text": "print(filter(li, new GreaterThan<Integer>(4)));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "94d478b620f80c028af95370bd53ef5e",
        "type": "source_code",
        "text": "print(forEach(li, \n      new MultiplyingIntegerCollector()).result());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "38ab840173eaf6cdc18be2d3c5cebbb6",
        "type": "source_code",
        "text": "print(forEach(filter(li, new GreaterThan<Integer>(4)), \n      new MultiplyingIntegerCollector()).result());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "269693ebd37ca81ca10bd5b18df4e6cd",
        "type": "source_code",
        "text": "MathContext mc = new MathContext(7); \n    List<BigDecimal> lbd = Arrays.asList( \n      new BigDecimal(1.1, mc), new BigDecimal(2.2, mc), \n      new BigDecimal(3.3, mc), new BigDecimal(4.4, mc)); \n    BigDecimal rbd = reduce(lbd, new BigDecimalAdder()); \n    print(rbd);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1cd895e35d9e64a20ab78efbbf91cdb8",
        "type": "source_code",
        "text": "print(filter(lbd, \n      new GreaterThan<BigDecimal>(new BigDecimal(3))));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c3ab9f3c38440f55edc646b107402f25",
        "type": "source_code",
        "text": "// Use the prime-generation facility of BigInteger: \n    List<BigInteger> lbi = new ArrayList<BigInteger>();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "604419b8267e0beb9db929b4e008976e",
        "type": "source_code",
        "text": "BigInteger bi = BigInteger.valueOf(11); \n    for(int i = 0; i < 11; i++) { \n      lbi.add(bi); \n      bi = bi.nextProbablePrime(); \n    } \n    print(lbi);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8348997f31f782ef6c3deeb4de520c50",
        "type": "source_code",
        "text": "BigInteger rbi = reduce(lbi, new BigIntegerAdder()); \n    print(rbi); \n    // The sum of this list of primes is also prime: \n    print(rbi.isProbablePrime(5));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1eb8ffb8b614a5e76d2d8d6a183c7514",
        "type": "source_code",
        "text": "List<AtomicLong> lal = Arrays.asList( \n      new AtomicLong(11), new AtomicLong(47), \n      new AtomicLong(74), new AtomicLong(133)); \n    AtomicLong ral = reduce(lal, new AtomicLongAdder()); \n    print(ral);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c5deaa7fc382897f3bec37823f3a26a1",
        "type": "source_code",
        "text": "print(transform(lbd,new BigDecimalUlp()));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6eab02b6ed2b29d7f21b16e1a7b0c96f",
        "type": "source_code",
        "text": "new MultiplyingIntegerCollector()).result()",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "13aa37a76727d90eae12e803b6336f43",
        "type": "source_code",
        "text": "bad?",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "52eb9ce318c4c8fa0b8be2027d17137c",
        "type": "source_code",
        "text": "BerylliumSphere[] spheres = new BerylliumSphere[10]; \n    for(int i = 0; i < 5; i++) \n      spheres[i] = new BerylliumSphere(); \n    print(Arrays.toString(spheres)); \n    print(spheres[4]);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "3d31c847a320868ab6108894c1c0bf2b",
        "type": "source_code",
        "text": "List<BerylliumSphere> sphereList = \n      new ArrayList<BerylliumSphere>(); \n    for(int i = 0; i < 5; i++) \n      sphereList.add(new BerylliumSphere()); \n    print(sphereList); \n    print(sphereList.get(4));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6c496570792f087c0012888a507a6479",
        "type": "source_code",
        "text": "int[] integers = { 0, 1, 2, 3, 4, 5 }; \n    print(Arrays.toString(integers)); \n    print(integers[4]);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4e6fb024457ba377031d4457c1603de5",
        "type": "source_code",
        "text": "List<Integer> intList = new ArrayList<Integer>( \n      Arrays.asList(0, 1, 2, 3, 4, 5)); \n    intList.add(97); \n    print(intList); \n    print(intList.get(4));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d2330122cd54ba18317c298969645b0a",
        "type": "source_code",
        "text": "// Arrays of objects: \n    BerylliumSphere[] a; // Local uninitialized variable \n    BerylliumSphere[] b = new BerylliumSphere[5]; \n    // The references inside the array are \n    // automatically initialized to null: \n    print(\"b: \" + Arrays.toString(b)); \n    BerylliumSphere[] c = new BerylliumSphere[4]; \n    for(int i = 0; i < c.length; i++) \n      if(c[i] == null) // Can test for null reference \n        c[i] = new BerylliumSphere(); \n    // Aggregate initialization: \n    BerylliumSphere[] d = { new BerylliumSphere(), \n      new BerylliumSphere(), new BerylliumSphere() \n    }; \n    // Dynamic aggregate initialization: \n    a = new BerylliumSphere[]{ \n      new BerylliumSphere(), new BerylliumSphere(), \n    }; \n    // (Trailing comma is optional in both cases) \n    print(\"a.length = \" + a.length); \n    print(\"b.length = \" + b.length); \n    print(\"c.length = \" + c.length); \n    print(\"d.length = \" + d.length); \n    a = d; \n    print(\"a.length = \" + a.length);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "bdeaa28be42d15ebfd1b60b6de3181b9",
        "type": "source_code",
        "text": "// Arrays of primitives: \n    int[] e; // Null reference \n    int[] f = new int[5]; \n    // The primitives inside the array are \n    // automatically initialized to zero: \n    print(\"f: \" + Arrays.toString(f)); \n    int[] g = new int[4]; \n    for(int i = 0; i < g.length; i++) \n      g[i] = i*i; \n    int[] h = { 11, 47, 93 }; \n    // Compile error: variable e not initialized: \n    //!print(\"e.length = \" + e.length); \n    print(\"f.length = \" + f.length); \n    print(\"g.length = \" + g.length); \n    print(\"h.length = \" + h.length); \n    e = h; \n    print(\"e.length = \" + e.length); \n    e = new int[]{ 1, 2 }; \n    print(\"e.length = \" + e.length);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "e446a83f98947a13bd61ecce0efb7112",
        "type": "source_code",
        "text": "\"Chocolate\", \"Strawberry\", \"Vanilla Fudge Swirl\", \n    \"Mint Chip\", \"Mocha Almond Fudge\", \"Rum Raisin\", \n    \"Praline Cream\", \"Mud Pie\"",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f337245ceffb76dcfdee4ceb1ed613d0",
        "type": "source_code",
        "text": "if(n > FLAVORS.length) \n      throw new IllegalArgumentException(\"Set too big\"); \n    String[] results = new String[n]; \n    boolean[] picked = new boolean[FLAVORS.length]; \n    for(int i = 0; i < n; i++) { \n      int t; \n      do \n        t = rand.nextInt(FLAVORS.length); \n      while(picked[t]); \n      results[i] = FLAVORS[t]; \n      picked[t] = true; \n    } \n    return results;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "3b482c149ba02a2638af1f271b97b3ab",
        "type": "source_code",
        "text": "for(int i = 0; i < 7; i++) \n      System.out.println(Arrays.toString(flavorSet(3)));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "45d97bfa691e0e87da6f154aa881163b",
        "type": "source_code",
        "text": "int[][] a = { \n      { 1, 2, 3, }, \n      { 4, 5, 6, }, \n    }; \n    System.out.println(Arrays.deepToString(a));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3c4ba6ff6123253ec59d01692dabeeda",
        "type": "source_code",
        "text": "// 3-D array with fixed length: \n    int[][][] a = new int[2][2][4]; \n    System.out.println(Arrays.deepToString(a));",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "7541d1c582f2983020cc7e93e63a36ef",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    // 3-D array with varied-length vectors: \n    int[][][] a = new int[rand.nextInt(7)][][]; \n    for(int i = 0; i < a.length; i++) { \n      a[i] = new int[rand.nextInt(5)][]; \n      for(int j = 0; j < a[i].length; j++) \n        a[i][j] = new int[rand.nextInt(5)]; \n    } \n    System.out.println(Arrays.deepToString(a));",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "ec870f7fdaf13e76749af9aec8f72147",
        "type": "source_code",
        "text": "BerylliumSphere[][] spheres = { \n      { new BerylliumSphere(), new BerylliumSphere() }, \n      { new BerylliumSphere(), new BerylliumSphere(), \n        new BerylliumSphere(), new BerylliumSphere() }, \n      { new BerylliumSphere(), new BerylliumSphere(), \n        new BerylliumSphere(), new BerylliumSphere(), \n        new BerylliumSphere(), new BerylliumSphere(), \n        new BerylliumSphere(), new BerylliumSphere() }, \n    }; \n    System.out.println(Arrays.deepToString(spheres));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "05d5e803839dfd2bdb1d06dcdc8857bc",
        "type": "source_code",
        "text": "Integer[][] a = { // Autoboxing: \n      { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, \n      { 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }, \n      { 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 }, \n      { 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 }, \n    }; \n    System.out.println(Arrays.deepToString(a));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0886676cb6bd970c09da76609880c917",
        "type": "source_code",
        "text": "Integer[][] a; \n    a = new Integer[3][]; \n    for(int i = 0; i < a.length; i++) { \n      a[i] = new Integer[3]; \n      for(int j = 0; j < a[i].length; j++) \n        a[i][j] = i * j; // Autoboxing \n    } \n    System.out.println(Arrays.deepToString(a));",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "3c74c8b8f9462b415419087fac548ee7",
        "type": "source_code",
        "text": "Integer[][] a1 = { // Autoboxing \n      { 1, 2, 3, }, \n      { 4, 5, 6, }, \n    }; \n    Double[][][] a2 = { // Autoboxing \n      { { 1.1, 2.2 }, { 3.3, 4.4 } }, \n      { { 5.5, 6.6 }, { 7.7, 8.8 } }, \n      { { 9.9, 1.2 }, { 2.3, 3.4 } }, \n    };",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ffcaacdf42ceb914d63be3a6613169b3",
        "type": "source_code",
        "text": "String[][] a3 = { \n      { \"The\", \"Quick\", \"Sly\", \"Fox\" }, \n      { \"Jumped\", \"Over\" }, \n      { \"The\", \"Lazy\", \"Brown\", \"Dog\", \"and\", \"friend\" }, \n    }; \n    System.out.println(\"a1: \" + Arrays.deepToString(a1)); \n    System.out.println(\"a2: \" + Arrays.deepToString(a2)); \n    System.out.println(\"a3: \" + Arrays.deepToString(a3));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f5fbd6a566a0a8127be685de44ce43b1",
        "type": "source_code",
        "text": "Integer[] ints = { 1, 2, 3, 4, 5 }; \n    Double[] doubles = { 1.1, 2.2, 3.3, 4.4, 5.5 }; \n    Integer[] ints2 = \n      new ClassParameter<Integer>().f(ints); \n    Double[] doubles2 = \n      new ClassParameter<Double>().f(doubles); \n    ints2 = MethodParameter.f(ints); \n    doubles2 = MethodParameter.f(doubles);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ecd2850dd9d85cfb960aa6310d66bcdd",
        "type": "source_code",
        "text": "List<String>[] ls; \n    List[] la = new List[10]; \n    ls = (List<String>[])la; // \"Unchecked\" warning \n    ls[0] = new ArrayList<String>(); \n    // Compile-time checking produces an error: \n    //! ls[1] = new ArrayList<Integer>();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "a4e0e38e97a4d56d028e62a43172bea7",
        "type": "source_code",
        "text": "// The problem: List<String> is a subtype of Object \n    Object[] objects = ls; // So assignment is OK \n    // Compiles and runs without complaint: \n    objects[1] = new ArrayList<Integer>();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "82afbe5fa2c5238cbde8edcec0a313bb",
        "type": "source_code",
        "text": "// However, if your needs are straightforward it is \n    // possible to create an array of generics, albeit \n    // with an \"unchecked\" warning: \n    List<BerylliumSphere>[] spheres = \n      (List<BerylliumSphere>[])new List[10]; \n    for(int i = 0; i < spheres.length; i++) \n      spheres[i] = new ArrayList<BerylliumSphere>();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "36fb4ff143321090ac15e3c3babbd29d",
        "type": "source_code",
        "text": "//! array = new T[size]; // Illegal \n    array = (T[])new Object[size]; // \"unchecked\" Warning",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "9ef66d8342f594f34f054efc74ea98a6",
        "type": "source_code",
        "text": "int size = 6; \n    boolean[] a1 = new boolean[size]; \n    byte[] a2 = new byte[size]; \n    char[] a3 = new char[size]; \n    short[] a4 = new short[size]; \n    int[] a5 = new int[size]; \n    long[] a6 = new long[size]; \n    float[] a7 = new float[size]; \n    double[] a8 = new double[size]; \n    String[] a9 = new String[size]; \n    Arrays.fill(a1, true); \n    print(\"a1 = \" + Arrays.toString(a1)); \n    Arrays.fill(a2, (byte)11); \n    print(\"a2 = \" + Arrays.toString(a2)); \n    Arrays.fill(a3, \u2018x\u2019); \n    print(\"a3 = \" + Arrays.toString(a3)); \n    Arrays.fill(a4, (short)17); \n    print(\"a4 = \" + Arrays.toString(a4)); \n    Arrays.fill(a5, 19); \n    print(\"a5 = \" + Arrays.toString(a5)); \n    Arrays.fill(a6, 23); \n    print(\"a6 = \" + Arrays.toString(a6)); \n    Arrays.fill(a7, 29); \n    print(\"a7 = \" + Arrays.toString(a7)); \n    Arrays.fill(a8, 47); \n    print(\"a8 = \" + Arrays.toString(a8)); \n    Arrays.fill(a9, \"Hello\"); \n    print(\"a9 = \" + Arrays.toString(a9)); \n    // Manipulating ranges: \n    Arrays.fill(a9, 3, 5, \"World\"); \n    print(\"a9 = \" + Arrays.toString(a9));",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "ab4526544bde6a66bca1b17082227496",
        "type": "source_code",
        "text": "private boolean value = false; \n    public java.lang.Boolean next() { \n      value = !value; // Just flips back and forth \n      return value; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e7c4e964c5dd791cd596a343938a2f95",
        "type": "source_code",
        "text": "private byte value = 0; \n    public java.lang.Byte next() { return value++; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b4627d399e32cc56bbf325e4a165b268",
        "type": "source_code",
        "text": "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").toCharArray();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4a376aa5a50fbfe801919ff712b028ee",
        "type": "source_code",
        "text": "int index = -1; \n    public java.lang.Character next() { \n      index = (index + 1) % chars.length; \n      return chars[index]; \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "188676cc1358920661b7d1378af176dc",
        "type": "source_code",
        "text": "private int length = 7;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "53d16884aa9ba921987cf6e661f18ae5",
        "type": "source_code",
        "text": "Generator<java.lang.Character> cg = new Character(); \n    public String() {} \n    public String(int length) { this.length = length; } \n    public java.lang.String next() { \n      char[] buf = new char[length]; \n      for(int i = 0; i < length; i++) \n        buf[i] = cg.next(); \n      return new java.lang.String(buf); \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "8cfc0ef6dab137cd20646d8911ec7ee9",
        "type": "source_code",
        "text": "private short value = 0; \n    public java.lang.Short next() { return value++; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "eec3805400a1adb83e299960b0c2183a",
        "type": "source_code",
        "text": "private int value = 0; \n    public java.lang.Integer next() { return value++; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "15301034fd7477fc7888e170112fdfc3",
        "type": "source_code",
        "text": "private long value = 0; \n    public java.lang.Long next() { return value++; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a216b4e152510673172ab60e986ab21c",
        "type": "source_code",
        "text": "private float value = 0; \n    public java.lang.Float next() { \n      float result = value; \n      value += 1.0; \n      return result; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cd6e365740a0ca05370b83fd76065f3a",
        "type": "source_code",
        "text": "private double value = 0.0; \n    public java.lang.Double next() { \n      double result = value; \n      value += 1.0; \n      return result; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "65f643b34550cb5b25e1e0c4b2182e15",
        "type": "source_code",
        "text": "for(Class<?> type : surroundingClass.getClasses()) { \n      System.out.print(type.getSimpleName() + \": \"); \n      try { \n        Generator<?> g = (Generator<?>)type.newInstance(); \n        for(int i = 0; i < size; i++) \n          System.out.printf(g.next() + \" \"); \n        System.out.println(); \n      } catch(Exception e) { \n        throw new RuntimeException(e); \n      } \n    }",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "0d5eed19d2f82e1c66a5079a87a88fd7",
        "type": "source_code",
        "text": "test(CountingGenerator.class);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d67ab0190380b42482bd7020a07d5e0e",
        "type": "source_code",
        "text": "public java.lang.Boolean next() { \n      return r.nextBoolean(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "fcf5bd3cd5e3a9c3ddf19b3f556adf67",
        "type": "source_code",
        "text": "public java.lang.Byte next() { \n      return (byte)r.nextInt(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e368639da28404187b879a528f3b18ee",
        "type": "source_code",
        "text": "public java.lang.Character next() { \n      return CountingGenerator.chars[ \n        r.nextInt(CountingGenerator.chars.length)];",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cbb184dd8e05c9709e5dcaedaa0495cf",
        "type": "source_code",
        "text": "}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6508de8ec114e7cd1541611481aaca40",
        "type": "source_code",
        "text": "// Plug in the random Character generator: \n    { cg = new Character(); } // Instance initializer \n    public String() {} \n    public String(int length) { super(length); }",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "878712ecd6f95748379c70a387057af9",
        "type": "source_code",
        "text": "public java.lang.Short next() { \n      return (short)r.nextInt(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "16de5867ab1996536662f7385460b456",
        "type": "source_code",
        "text": "private int mod = 10000; \n    public Integer() {} \n    public Integer(int modulo) { mod = modulo; } \n    public java.lang.Integer next() { \n      return r.nextInt(mod); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2b450b9b6e8d53bb1c97ad79361abe70",
        "type": "source_code",
        "text": "private int mod = 10000; \n    public Long() {} \n    public Long(int modulo) { mod = modulo; } \n    public java.lang.Long next() { \n      return new java.lang.Long(r.nextInt(mod)); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "4b5a667c6b030508032f698f099abb4b",
        "type": "source_code",
        "text": "public java.lang.Float next() { \n      // Trim all but the first two decimal places: \n      int trimmed = Math.round(r.nextFloat() * 100); \n      return ((float)trimmed) / 100; \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "15a357f7eb8426fd9b64b9d5166bd8cd",
        "type": "source_code",
        "text": "public java.lang.Double next() { \n      long trimmed = Math.round(r.nextDouble() * 100); \n      return ((double)trimmed) / 100; \n    }",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "778aa1be2d5620f45dbbbd5ce805e4dc",
        "type": "source_code",
        "text": "GeneratorsTest.test(RandomGenerator.class);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "deba66d09c82c38abd3083622e016844",
        "type": "source_code",
        "text": "return new CollectionData<T>(gen, a.length).toArray(a);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d2ee70ec01bb386578843ebf889ed950",
        "type": "source_code",
        "text": "Generator<T> gen, int size) { \n    T[] a = \n      (T[])java.lang.reflect.Array.newInstance(type, size); \n    return new CollectionData<T>(gen, size).toArray(a);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "670c82b996d55528c3e284bf2eede4f8",
        "type": "source_code",
        "text": "Integer[] a = { 9, 8, 7, 6 }; \n    System.out.println(Arrays.toString(a)); \n    a = Generated.array(a,new CountingGenerator.Integer()); \n    System.out.println(Arrays.toString(a)); \n    Integer[] b = Generated.array(Integer.class, \n        new CountingGenerator.Integer(), 15); \n    System.out.println(Arrays.toString(b));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5b64ad865324d9423ca0e5a1818ebc08",
        "type": "source_code",
        "text": "boolean[] result = new boolean[in.length]; \n    for(int i = 0; i < in.length; i++) \n      result[i] = in[i]; // Autounboxing \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "e6554d45c13e488ecf5550c5e66608c1",
        "type": "source_code",
        "text": "char[] result = new char[in.length]; \n    for(int i = 0; i < in.length; i++) \n      result[i] = in[i]; \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "3282fe6d59fbec73822400fae7324336",
        "type": "source_code",
        "text": "byte[] result = new byte[in.length]; \n    for(int i = 0; i < in.length; i++) \n      result[i] = in[i]; \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "a4043492252f69f8f6cebd9ed6d49865",
        "type": "source_code",
        "text": "short[] result = new short[in.length]; \n    for(int i = 0; i < in.length; i++) \n      result[i] = in[i];",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "2730b3df559d43dc48d96baf458458fc",
        "type": "source_code",
        "text": "return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5b16740c27502e0ad666ac8d3b020bf0",
        "type": "source_code",
        "text": "int[] result = new int[in.length]; \n    for(int i = 0; i < in.length; i++) \n      result[i] = in[i]; \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "26c11c088293b3f31fb638bd1e64481c",
        "type": "source_code",
        "text": "long[] result = new long[in.length]; \n    for(int i = 0; i < in.length; i++) \n      result[i] = in[i]; \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "2d7bf5a8fccecd48d7fcaffc62448106",
        "type": "source_code",
        "text": "float[] result = new float[in.length]; \n    for(int i = 0; i < in.length; i++) \n      result[i] = in[i]; \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "f224734a1948dfa72a43a82b83fee22d",
        "type": "source_code",
        "text": "double[] result = new double[in.length]; \n    for(int i = 0; i < in.length; i++) \n      result[i] = in[i]; \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "d35faf73d01df1178d898d73c77aa512",
        "type": "source_code",
        "text": "Integer[] a = Generated.array(Integer.class, \n        new CountingGenerator.Integer(), 15); \n    int[] b = ConvertTo.primitive(a); \n    System.out.println(Arrays.toString(b)); \n    boolean[] c = ConvertTo.primitive( \n      Generated.array(Boolean.class, \n        new CountingGenerator.Boolean(), 7)); \n    System.out.println(Arrays.toString(c));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a62df0464024d6200d7b65823add2cdb",
        "type": "source_code",
        "text": "int size = 6; \n    boolean[] a1 = ConvertTo.primitive(Generated.array( \n      Boolean.class, new RandomGenerator.Boolean(), size)); \n    print(\"a1 = \" + Arrays.toString(a1)); \n    byte[] a2 = ConvertTo.primitive(Generated.array( \n      Byte.class, new RandomGenerator.Byte(), size)); \n    print(\"a2 = \" + Arrays.toString(a2)); \n    char[] a3 = ConvertTo.primitive(Generated.array( \n      Character.class, \n      new RandomGenerator.Character(), size)); \n    print(\"a3 = \" + Arrays.toString(a3)); \n    short[] a4 = ConvertTo.primitive(Generated.array( \n      Short.class, new RandomGenerator.Short(), size)); \n    print(\"a4 = \" + Arrays.toString(a4)); \n    int[] a5 = ConvertTo.primitive(Generated.array( \n      Integer.class, new RandomGenerator.Integer(), size)); \n    print(\"a5 = \" + Arrays.toString(a5)); \n    long[] a6 = ConvertTo.primitive(Generated.array( \n      Long.class, new RandomGenerator.Long(), size)); \n    print(\"a6 = \" + Arrays.toString(a6)); \n    float[] a7 = ConvertTo.primitive(Generated.array( \n      Float.class, new RandomGenerator.Float(), size)); \n    print(\"a7 = \" + Arrays.toString(a7)); \n    double[] a8 = ConvertTo.primitive(Generated.array( \n      Double.class, new RandomGenerator.Double(), size)); \n    print(\"a8 = \" + Arrays.toString(a8));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9218a0ed65ee7acfc627c3acd55a0856",
        "type": "source_code",
        "text": "int[] i = new int[7]; \n    int[] j = new int[10]; \n    Arrays.fill(i, 47); \n    Arrays.fill(j, 99); \n    print(\"i = \" + Arrays.toString(i)); \n    print(\"j = \" + Arrays.toString(j)); \n    System.arraycopy(i, 0, j, 0, i.length); \n    print(\"j = \" + Arrays.toString(j)); \n    int[] k = new int[5]; \n    Arrays.fill(k, 103); \n    System.arraycopy(i, 0, k, 0, k.length); \n    print(\"k = \" + Arrays.toString(k)); \n    Arrays.fill(k, 103); \n    System.arraycopy(k, 0, i, 0, k.length); \n    print(\"i = \" + Arrays.toString(i)); \n    // Objects: \n    Integer[] u = new Integer[10]; \n    Integer[] v = new Integer[5]; \n    Arrays.fill(u, new Integer(47));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "952ed98bc373e4bd57701f5269281991",
        "type": "source_code",
        "text": "Arrays.fill(v, new Integer(99)); \n    print(\"u = \" + Arrays.toString(u)); \n    print(\"v = \" + Arrays.toString(v)); \n    System.arraycopy(v, 0, u, u.length/2, v.length); \n    print(\"u = \" + Arrays.toString(u));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0321772b7c858b30f2f71c17bbc13033",
        "type": "source_code",
        "text": "int[] a1 = new int[10]; \n    int[] a2 = new int[10]; \n    Arrays.fill(a1, 47); \n    Arrays.fill(a2, 47); \n    print(Arrays.equals(a1, a2)); \n    a2[3] = 11; \n    print(Arrays.equals(a1, a2)); \n    String[] s1 = new String[4]; \n    Arrays.fill(s1, \"Hi\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9c9f91acc0bce0cd518ef3781e627db1",
        "type": "source_code",
        "text": "String[] s2 = { new String(\"Hi\"), new String(\"Hi\"), \n      new String(\"Hi\"), new String(\"Hi\") }; \n    print(Arrays.equals(s1, s2));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5995c8322f4fdbfa38b45ef1d581bb9f",
        "type": "source_code",
        "text": "i = n1; \n    j = n2;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ae949749179839209ebc368eb13a639e",
        "type": "source_code",
        "text": "String result = \"[i = \" + i + \", j = \" + j + \"]\"; \n    if(count++ % 3 == 0) \n      result += \"\\n\"; \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e5eb10b7c470773f3d1b1410089e0df1",
        "type": "source_code",
        "text": "return (i < rv.i ? -1 : (i == rv.i ? 0 : 1));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "33b55f55c6cce6d9a60f400744721dd8",
        "type": "source_code",
        "text": "return new Generator<CompType>() { \n      public CompType next() { \n        return new CompType(r.nextInt(100),r.nextInt(100)); \n      } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "32e7ad4f1ca2f0503e51b5324587a781",
        "type": "source_code",
        "text": "CompType[] a = \n      Generated.array(new CompType[12], generator()); \n    print(\"before sorting:\"); \n    print(Arrays.toString(a)); \n    Arrays.sort(a); \n    print(\"after sorting:\"); \n    print(Arrays.toString(a));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "382ee130c2ae78c2bd44871e0892bfec",
        "type": "source_code",
        "text": "CompType[] a = Generated.array( \n      new CompType[12], CompType.generator()); \n    print(\"before sorting:\"); \n    print(Arrays.toString(a)); \n    Arrays.sort(a, Collections.reverseOrder()); \n    print(\"after sorting:\"); \n    print(Arrays.toString(a));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "7a31f6127d4ed9cf6aa764fa53ff0a1d",
        "type": "source_code",
        "text": "return (o1.j < o2.j ? -1 : (o1.j == o2.j ? 0 : 1));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f150553e7052d31733e7bb3d05573182",
        "type": "source_code",
        "text": "CompType[] a = Generated.array( \n      new CompType[12], CompType.generator()); \n    print(\"before sorting:\"); \n    print(Arrays.toString(a)); \n    Arrays.sort(a, new CompTypeComparator()); \n    print(\"after sorting:\"); \n    print(Arrays.toString(a));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "bb24a108630ac3873847de9d2b0646b5",
        "type": "source_code",
        "text": "String[] sa = Generated.array(new String[20], \n      new RandomGenerator.String(5)); \n    print(\"Before sort: \" + Arrays.toString(sa)); \n    Arrays.sort(sa); \n    print(\"After sort: \" + Arrays.toString(sa)); \n    Arrays.sort(sa, Collections.reverseOrder()); \n    print(\"Reverse sort: \" + Arrays.toString(sa)); \n    Arrays.sort(sa, String.CASE_INSENSITIVE_ORDER); \n    print(\"Case-insensitive sort: \" + Arrays.toString(sa));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1c43fabb57e9a3594a4cb024c5f3ebd2",
        "type": "source_code",
        "text": "Generator<Integer> gen = \n      new RandomGenerator.Integer(1000); \n    int[] a = ConvertTo.primitive( \n      Generated.array(new Integer[25], gen)); \n    Arrays.sort(a); \n    print(\"Sorted array: \" + Arrays.toString(a)); \n    while(true) { \n      int r = gen.next(); \n      int location = Arrays.binarySearch(a, r); \n      if(location >= 0) { \n        print(\"Location of \" + r + \" is \" + location + \n          \", a[\" + location + \"] = \" + a[location]); \n        break; // Out of while loop \n      } \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "634986c6890a1d1ad09476aacf7874dd",
        "type": "source_code",
        "text": "String[] sa = Generated.array(new String[30], \n      new RandomGenerator.String(5)); \n    Arrays.sort(sa, String.CASE_INSENSITIVE_ORDER); \n    System.out.println(Arrays.toString(sa)); \n    int index = Arrays.binarySearch(sa, sa[10], \n      String.CASE_INSENSITIVE_ORDER); \n    System.out.println(\"Index: \"+ index + \"\\n\"+ sa[index]);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "8ca4bb5797fa9c90163ffa7aca9d507d",
        "type": "source_code",
        "text": "# Define a method, \u2018this\u2019 pointer is explicit: \n    def getReversed(self): \n        reversed = self[:] # Copy list using slices \n        reversed.reverse() # Built-in list method \n        return reversed",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e589792d4b1ac97d27f22dc3834f27b7",
        "type": "source_code",
        "text": "return super.toString() + \" \" + s;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d1472aff6378676e2c9b9ae4546bca91",
        "type": "source_code",
        "text": "List<StringAddress> list= new ArrayList<StringAddress>( \n      Collections.nCopies(4, new StringAddress(\"Hello\"))); \n    System.out.println(list); \n    Collections.fill(list, new StringAddress(\"World!\")); \n    System.out.println(list);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bcee2d7a580aa09cc59eb1798270e1f2",
        "type": "source_code",
        "text": "for(int i = 0; i < quantity; i++) \n      add(gen.next());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "834be7ffd3efad41f169a3b936dcdac5",
        "type": "source_code",
        "text": "return new CollectionData<T>(gen, quantity);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "18db2674fc6534dc6331ea04babfc058",
        "type": "source_code",
        "text": "\"distributing swords is no basis for a system of \" +",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "03979697c5e0dd6391e59bc2003c442e",
        "type": "source_code",
        "text": "\"government\").split(\" \");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "22dfd913bc12ccf547afa8287ed5602a",
        "type": "source_code",
        "text": "Set<String> set = new LinkedHashSet<String>( \n      new CollectionData<String>(new Government(), 15)); \n    // Using the convenience method: \n    set.addAll(CollectionData.list(new Government(), 15)); \n    System.out.println(set);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "113cccdecaf94046e97495f9a3841cee",
        "type": "source_code",
        "text": "System.out.println(new ArrayList<String>( \n      CollectionData.list( // Convenience method \n        new RandomGenerator.String(9), 10))); \n    System.out.println(new HashSet<Integer>( \n      new CollectionData<Integer>( \n        new RandomGenerator.Integer(), 10)));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "434646eee46af15903e148b1d3d32625",
        "type": "source_code",
        "text": "key = k; \n    value = v;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "60771191d04d3d270d462a426839b873",
        "type": "source_code",
        "text": "for(int i = 0; i < quantity; i++) { \n      Pair<K,V> p = gen.next(); \n      put(p.key, p.value); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a908f474423e7e060c023f4b5014dbbf",
        "type": "source_code",
        "text": "int quantity) { \n    for(int i = 0; i < quantity; i++) { \n      put(genK.next(), genV.next()); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ebefbda27b82c497cd630d05fc2b348c",
        "type": "source_code",
        "text": "for(int i = 0; i < quantity; i++) { \n      put(genK.next(), value); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0b52382b83ab1938c9282db439e0fec2",
        "type": "source_code",
        "text": "for(K key : genK) { \n      put(key, genV.next()); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "efbc5b8f0deb6886a3f1789cb48d9058",
        "type": "source_code",
        "text": "for(K key : genK) { \n      put(key, value); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "60433fca6b50d267178849c4190d4d28",
        "type": "source_code",
        "text": "return new MapData<K,V>(gen, quantity);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "af360c64a67385aa7d10d21a622bc6eb",
        "type": "source_code",
        "text": "return new MapData<K,V>(genK, genV, quantity);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "32e946e5b83b964e3cc3863c12af1291",
        "type": "source_code",
        "text": "return new MapData<K,V>(genK, value, quantity);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3014b4053fd19e80991d84e811cf2437",
        "type": "source_code",
        "text": "return new MapData<K,V>(genK, genV);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bcd6bc193b91fb6f5d3297b83669d30e",
        "type": "source_code",
        "text": "return new MapData<K,V>(genK, value);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "379fe784d917174a35b88abb65aef9cb",
        "type": "source_code",
        "text": "return new Pair<Integer,String>( \n      number++, \"\" + letter++);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "22a016ab7d260fb7f40923a55bc8e7ac",
        "type": "source_code",
        "text": "return new Iterator<Integer>() { \n      public Integer next() { return number++; } \n      public boolean hasNext() { return number < size; } \n      public void remove() { \n        throw new UnsupportedOperationException(); \n      } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bf796b998ecb3358b246b3dbedec822f",
        "type": "source_code",
        "text": "// Pair Generator: \n    print(MapData.map(new Letters(), 11)); \n    // Two separate generators: \n    print(MapData.map(new CountingGenerator.Character(), \n      new RandomGenerator.String(3), 8)); \n    // A key Generator and a single value: \n    print(MapData.map(new CountingGenerator.Character(), \n      \"Value\", 6)); \n    // An Iterable and a value Generator: \n    print(MapData.map(new Letters(), \n      new RandomGenerator.String(3))); \n    // An Iterable and a single value: \n    print(MapData.map(new Letters(), \"Pop\"));",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "7f2be5d4cfa1ff1eaf03edff1f02f1df",
        "type": "source_code",
        "text": "// Africa \n    {\"ALGERIA\",\"Algiers\"}, {\"ANGOLA\",\"Luanda\"}, \n    {\"BENIN\",\"Porto-Novo\"}, {\"BOTSWANA\",\"Gaberone\"}, \n    {\"BURKINA FASO\",\"Ouagadougou\"}, \n    {\"BURUNDI\",\"Bujumbura\"}, \n    {\"CAMEROON\",\"Yaounde\"}, {\"CAPE VERDE\",\"Praia\"}, \n    {\"CENTRAL AFRICAN REPUBLIC\",\"Bangui\"}, \n    {\"CHAD\",\"N\u2019djamena\"},  {\"COMOROS\",\"Moroni\"},",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "26af31f177636d77ca4f11504c955f57",
        "type": "source_code",
        "text": "{\"CONGO\",\"Brazzaville\"}, {\"DJIBOUTI\",\"Dijibouti\"}, \n    {\"EGYPT\",\"Cairo\"}, {\"EQUATORIAL GUINEA\",\"Malabo\"}, \n    {\"ERITREA\",\"Asmara\"}, {\"ETHIOPIA\",\"Addis Ababa\"}, \n    {\"GABON\",\"Libreville\"}, {\"THE GAMBIA\",\"Banjul\"}, \n    {\"GHANA\",\"Accra\"}, {\"GUINEA\",\"Conakry\"}, \n    {\"BISSAU\",\"Bissau\"}, \n    {\"COTE D\u2019IVOIR (IVORY COAST)\",\"Yamoussoukro\"}, \n    {\"KENYA\",\"Nairobi\"}, {\"LESOTHO\",\"Maseru\"}, \n    {\"LIBERIA\",\"Monrovia\"}, {\"LIBYA\",\"Tripoli\"}, \n    {\"MADAGASCAR\",\"Antananarivo\"}, {\"MALAWI\",\"Lilongwe\"}, \n    {\"MALI\",\"Bamako\"}, {\"MAURITANIA\",\"Nouakchott\"}, \n    {\"MAURITIUS\",\"Port Louis\"}, {\"MOROCCO\",\"Rabat\"}, \n    {\"MOZAMBIQUE\",\"Maputo\"}, {\"NAMIBIA\",\"Windhoek\"}, \n    {\"NIGER\",\"Niamey\"}, {\"NIGERIA\",\"Abuja\"}, \n    {\"RWANDA\",\"Kigali\"}, \n    {\"SAO TOME E PRINCIPE\",\"Sao Tome\"}, \n    {\"SENEGAL\",\"Dakar\"}, {\"SEYCHELLES\",\"Victoria\"}, \n    {\"SIERRA LEONE\",\"Freetown\"}, {\"SOMALIA\",\"Mogadishu\"}, \n    {\"SOUTH AFRICA\",\"Pretoria/Cape Town\"}, \n    {\"SUDAN\",\"Khartoum\"}, \n    {\"SWAZILAND\",\"Mbabane\"}, {\"TANZANIA\",\"Dodoma\"}, \n    {\"TOGO\",\"Lome\"}, {\"TUNISIA\",\"Tunis\"}, \n    {\"UGANDA\",\"Kampala\"}, \n    {\"DEMOCRATIC REPUBLIC OF THE CONGO (ZAIRE)\", \n     \"Kinshasa\"}, \n    {\"ZAMBIA\",\"Lusaka\"}, {\"ZIMBABWE\",\"Harare\"}, \n    // Asia \n    {\"AFGHANISTAN\",\"Kabul\"}, {\"BAHRAIN\",\"Manama\"}, \n    {\"BANGLADESH\",\"Dhaka\"}, {\"BHUTAN\",\"Thimphu\"}, \n    {\"BRUNEI\",\"Bandar Seri Begawan\"}, \n    {\"CAMBODIA\",\"Phnom Penh\"}, \n    {\"CHINA\",\"Beijing\"}, {\"CYPRUS\",\"Nicosia\"}, \n    {\"INDIA\",\"New Delhi\"}, {\"INDONESIA\",\"Jakarta\"}, \n    {\"IRAN\",\"Tehran\"}, {\"IRAQ\",\"Baghdad\"}, \n    {\"ISRAEL\",\"Jerusalem\"}, {\"JAPAN\",\"Tokyo\"}, \n    {\"JORDAN\",\"Amman\"}, {\"KUWAIT\",\"Kuwait City\"}, \n    {\"LAOS\",\"Vientiane\"}, {\"LEBANON\",\"Beirut\"}, \n    {\"MALAYSIA\",\"Kuala Lumpur\"}, {\"THE MALDIVES\",\"Male\"}, \n    {\"MONGOLIA\",\"Ulan Bator\"}, \n    {\"MYANMAR (BURMA)\",\"Rangoon\"}, \n    {\"NEPAL\",\"Katmandu\"}, {\"NORTH KOREA\",\"P\u2019yongyang\"}, \n    {\"OMAN\",\"Muscat\"}, {\"PAKISTAN\",\"Islamabad\"}, \n    {\"PHILIPPINES\",\"Manila\"}, {\"QATAR\",\"Doha\"}, \n    {\"SAUDI ARABIA\",\"Riyadh\"}, {\"SINGAPORE\",\"Singapore\"}, \n    {\"SOUTH KOREA\",\"Seoul\"}, {\"SRI LANKA\",\"Colombo\"}, \n    {\"SYRIA\",\"Damascus\"}, \n    {\"TAIWAN (REPUBLIC OF CHINA)\",\"Taipei\"}, \n    {\"THAILAND\",\"Bangkok\"}, {\"TURKEY\",\"Ankara\"}, \n    {\"UNITED ARAB EMIRATES\",\"Abu Dhabi\"}, \n    {\"VIETNAM\",\"Hanoi\"}, {\"YEMEN\",\"Sana\u2019a\"}, \n    // Australia and Oceania \n    {\"AUSTRALIA\",\"Canberra\"}, {\"FIJI\",\"Suva\"}, \n    {\"KIRIBATI\",\"Bairiki\"}, \n    {\"MARSHALL ISLANDS\",\"Dalap-Uliga-Darrit\"}, \n    {\"MICRONESIA\",\"Palikir\"}, {\"NAURU\",\"Yaren\"}, \n    {\"NEW ZEALAND\",\"Wellington\"}, {\"PALAU\",\"Koror\"}, \n    {\"PAPUA NEW GUINEA\",\"Port Moresby\"}, \n    {\"SOLOMON ISLANDS\",\"Honaira\"}, {\"TONGA\",\"Nuku\u2019alofa\"}, \n    {\"TUVALU\",\"Fongafale\"}, {\"VANUATU\",\"< Port-Vila\"}, \n    {\"WESTERN SAMOA\",\"Apia\"}, \n    // Eastern Europe and former USSR \n    {\"ARMENIA\",\"Yerevan\"}, {\"AZERBAIJAN\",\"Baku\"}, \n    {\"BELARUS (BYELORUSSIA)\",\"Minsk\"},",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "26ee6c178cfd41f6809fae98c61c23b4",
        "type": "source_code",
        "text": "{\"BULGARIA\",\"Sofia\"}, {\"GEORGIA\",\"Tbilisi\"}, \n    {\"KAZAKSTAN\",\"Almaty\"}, {\"KYRGYZSTAN\",\"Alma-Ata\"}, \n    {\"MOLDOVA\",\"Chisinau\"}, {\"RUSSIA\",\"Moscow\"}, \n    {\"TAJIKISTAN\",\"Dushanbe\"}, {\"TURKMENISTAN\",\"Ashkabad\"}, \n    {\"UKRAINE\",\"Kyiv\"}, {\"UZBEKISTAN\",\"Tashkent\"}, \n    // Europe \n    {\"ALBANIA\",\"Tirana\"}, {\"ANDORRA\",\"Andorra la Vella\"}, \n    {\"AUSTRIA\",\"Vienna\"}, {\"BELGIUM\",\"Brussels\"}, \n    {\"BOSNIA\",\"-\"}, {\"HERZEGOVINA\",\"Sarajevo\"}, \n    {\"CROATIA\",\"Zagreb\"}, {\"CZECH REPUBLIC\",\"Prague\"}, \n    {\"DENMARK\",\"Copenhagen\"}, {\"ESTONIA\",\"Tallinn\"}, \n    {\"FINLAND\",\"Helsinki\"}, {\"FRANCE\",\"Paris\"}, \n    {\"GERMANY\",\"Berlin\"}, {\"GREECE\",\"Athens\"}, \n    {\"HUNGARY\",\"Budapest\"}, {\"ICELAND\",\"Reykjavik\"}, \n    {\"IRELAND\",\"Dublin\"}, {\"ITALY\",\"Rome\"}, \n    {\"LATVIA\",\"Riga\"}, {\"LIECHTENSTEIN\",\"Vaduz\"}, \n    {\"LITHUANIA\",\"Vilnius\"}, {\"LUXEMBOURG\",\"Luxembourg\"}, \n    {\"MACEDONIA\",\"Skopje\"}, {\"MALTA\",\"Valletta\"}, \n    {\"MONACO\",\"Monaco\"}, {\"MONTENEGRO\",\"Podgorica\"}, \n    {\"THE NETHERLANDS\",\"Amsterdam\"}, {\"NORWAY\",\"Oslo\"}, \n    {\"POLAND\",\"Warsaw\"}, {\"PORTUGAL\",\"Lisbon\"}, \n    {\"ROMANIA\",\"Bucharest\"}, {\"SAN MARINO\",\"San Marino\"}, \n    {\"SERBIA\",\"Belgrade\"}, {\"SLOVAKIA\",\"Bratislava\"}, \n    {\"SLOVENIA\",\"Ljuijana\"}, {\"SPAIN\",\"Madrid\"}, \n    {\"SWEDEN\",\"Stockholm\"}, {\"SWITZERLAND\",\"Berne\"}, \n    {\"UNITED KINGDOM\",\"London\"}, {\"VATICAN CITY\",\"---\"}, \n    // North and Central America \n    {\"ANTIGUA AND BARBUDA\",\"Saint John\u2019s\"}, \n    {\"BAHAMAS\",\"Nassau\"}, \n    {\"BARBADOS\",\"Bridgetown\"}, {\"BELIZE\",\"Belmopan\"}, \n    {\"CANADA\",\"Ottawa\"}, {\"COSTA RICA\",\"San Jose\"}, \n    {\"CUBA\",\"Havana\"}, {\"DOMINICA\",\"Roseau\"}, \n    {\"DOMINICAN REPUBLIC\",\"Santo Domingo\"}, \n    {\"EL SALVADOR\",\"San Salvador\"}, \n    {\"GRENADA\",\"Saint George\u2019s\"}, \n    {\"GUATEMALA\",\"Guatemala City\"}, \n    {\"HAITI\",\"Port-au-Prince\"}, \n    {\"HONDURAS\",\"Tegucigalpa\"}, {\"JAMAICA\",\"Kingston\"}, \n    {\"MEXICO\",\"Mexico City\"}, {\"NICARAGUA\",\"Managua\"}, \n    {\"PANAMA\",\"Panama City\"}, {\"ST. KITTS\",\"-\"}, \n    {\"NEVIS\",\"Basseterre\"}, {\"ST. LUCIA\",\"Castries\"}, \n    {\"ST. VINCENT AND THE GRENADINES\",\"Kingstown\"}, \n    {\"UNITED STATES OF AMERICA\",\"Washington, D.C.\"}, \n    // South America \n    {\"ARGENTINA\",\"Buenos Aires\"}, \n    {\"BOLIVIA\",\"Sucre (legal)/La Paz(administrative)\"}, \n    {\"BRAZIL\",\"Brasilia\"}, {\"CHILE\",\"Santiago\"}, \n    {\"COLOMBIA\",\"Bogota\"}, {\"ECUADOR\",\"Quito\"}, \n    {\"GUYANA\",\"Georgetown\"}, {\"PARAGUAY\",\"Asuncion\"}, \n    {\"PERU\",\"Lima\"}, {\"SURINAME\",\"Paramaribo\"}, \n    {\"TRINIDAD AND TOBAGO\",\"Port of Spain\"}, \n    {\"URUGUAY\",\"Montevideo\"}, {\"VENEZUELA\",\"Caracas\"},",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3e49c6ebd298c4c18aa488c40acd7af6",
        "type": "source_code",
        "text": "private static class Entry \n    implements Map.Entry<String,String> { \n      int index; \n      Entry(int index) { this.index = index; } \n      public boolean equals(Object o) { \n        return DATA[index][0].equals(o); \n      }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "ef51ae2e9a19c465ddd157323bd6e8d8",
        "type": "source_code",
        "text": "public String getKey() { return DATA[index][0]; } \n      public String getValue() { return DATA[index][1]; } \n      public String setValue(String value) { \n        throw new UnsupportedOperationException(); \n      } \n      public int hashCode() { \n        return DATA[index][0].hashCode(); \n      } \n    } \n    // Use AbstractSet by implementing size() & iterator() \n    static class EntrySet \n    extends AbstractSet<Map.Entry<String,String>> { \n      private int size; \n      EntrySet(int size) { \n        if(size < 0) \n          this.size = 0; \n        // Can\u2019t be any bigger than the array: \n        else if(size > DATA.length) \n          this.size = DATA.length; \n        else \n          this.size = size; \n      } \n      public int size() { return size; } \n      private class Iter \n      implements Iterator<Map.Entry<String,String>> { \n        // Only one Entry object per Iterator: \n        private Entry entry = new Entry(-1); \n        public boolean hasNext() { \n          return entry.index < size - 1; \n        } \n        public Map.Entry<String,String> next() { \n          entry.index++; \n          return entry; \n        } \n        public void remove() { \n          throw new UnsupportedOperationException(); \n        } \n      } \n      public \n      Iterator<Map.Entry<String,String>> iterator() { \n        return new Iter(); \n      } \n    } \n    private static Set<Map.Entry<String,String>> entries = \n      new EntrySet(DATA.length); \n    public Set<Map.Entry<String,String>> entrySet() { \n      return entries; \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "e022767ed4753aa55241774dc7d00d67",
        "type": "source_code",
        "text": "return new FlyweightMap() { \n      public Set<Map.Entry<String,String>> entrySet() { \n        return new EntrySet(size); \n      } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8d0c6a6821458a9669c546a0177baf44",
        "type": "source_code",
        "text": "return map; // The entire map",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "736c7a18aa96bb37a6cf3b7ef35a7c45",
        "type": "source_code",
        "text": "return select(size); // A partial map",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "57e00dd9dc4c97dce57f29e7101e48e0",
        "type": "source_code",
        "text": "new ArrayList<String>(map.keySet());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "72c5316de7f42f1f111a1a14f8d22571",
        "type": "source_code",
        "text": "return new ArrayList<String>(select(size).keySet());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "30bdd410be2b13856917e216e9460eed",
        "type": "source_code",
        "text": "print(capitals(10)); \n    print(names(10)); \n    print(new HashMap<String,String>(capitals(3))); \n    print(new LinkedHashMap<String,String>(capitals(3))); \n    print(new TreeMap<String,String>(capitals(3))); \n    print(new Hashtable<String,String>(capitals(3))); \n    print(new HashSet<String>(names(6))); \n    print(new LinkedHashSet<String>(names(6))); \n    print(new TreeSet<String>(names(6))); \n    print(new ArrayList<String>(names(6))); \n    print(new LinkedList<String>(names(6))); \n    print(capitals().get(\"BRAZIL\"));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cc4c32d6f6574cd32cf656490f1ebac4",
        "type": "source_code",
        "text": "this.size = size < 0 ? 0 : size;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "643a4840224421d8b20a23143c774a0a",
        "type": "source_code",
        "text": "return Integer.valueOf(index);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cd716836e02ffb0833fb828bcd5ff95a",
        "type": "source_code",
        "text": "System.out.println(new CountingIntegerList(30));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "880c915f9b1d93ac3759466aa744e2ba",
        "type": "source_code",
        "text": "\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\" \n    .split(\" \");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "08e3f5dcc9f7d8394aa3ca5e11c0ba61",
        "type": "source_code",
        "text": "if(size < 0) this.size = 0; \n    this.size = size;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5ba04de1336004d9200c344ad3536714",
        "type": "source_code",
        "text": "int index; \n    Entry(int index) { this.index = index; } \n    public boolean equals(Object o) { \n      return Integer.valueOf(index).equals(o); \n    } \n    public Integer getKey() { return index; } \n    public String getValue() { \n      return \n        chars[index % chars.length] + \n        Integer.toString(index / chars.length); \n    } \n    public String setValue(String value) {",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8e1466e1ffeb8190a6f1c90a0c859fda",
        "type": "source_code",
        "text": "throw new UnsupportedOperationException(); \n    } \n    public int hashCode() { \n      return Integer.valueOf(index).hashCode(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a7f7a3f636fdd91deee36bd958012122",
        "type": "source_code",
        "text": "// LinkedHashSet retains initialization order: \n    Set<Map.Entry<Integer,String>> entries = \n      new LinkedHashSet<Map.Entry<Integer,String>>(); \n    for(int i = 0; i < size; i++) \n      entries.add(new Entry(i)); \n    return entries;",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "4a82dab30f2a5f74b71a1d58d7b03679",
        "type": "source_code",
        "text": "System.out.println(new CountingMapData(60));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0db76dc62084cf4850777413185734f9",
        "type": "source_code",
        "text": "Collection<String> c = new ArrayList<String>(); \n    c.addAll(Countries.names(6)); \n    c.add(\"ten\"); \n    c.add(\"eleven\"); \n    print(c); \n    // Make an array from the List: \n    Object[] array = c.toArray(); \n    // Make a String array from the List: \n    String[] str = c.toArray(new String[0]); \n    // Find max and min elements; this means \n    // different things depending on the way \n    // the Comparable interface is implemented: \n    print(\"Collections.max(c) = \" + Collections.max(c)); \n    print(\"Collections.min(c) = \" + Collections.min(c)); \n    // Add a Collection to another Collection \n    Collection<String> c2 = new ArrayList<String>(); \n    c2.addAll(Countries.names(6)); \n    c.addAll(c2); \n    print(c); \n    c.remove(Countries.DATA[0][0]); \n    print(c); \n    c.remove(Countries.DATA[1][0]); \n    print(c); \n    // Remove all components that are \n    // in the argument collection: \n    c.removeAll(c2); \n    print(c); \n    c.addAll(c2); \n    print(c); \n    // Is an element in this Collection? \n    String val = Countries.DATA[3][0]; \n    print(\"c.contains(\" + val  + \") = \" + c.contains(val)); \n    // Is a Collection in this Collection? \n    print(\"c.containsAll(c2) = \" + c.containsAll(c2)); \n    Collection<String> c3 = \n      ((List<String>)c).subList(3, 5); \n    // Keep all the elements that are in both \n    // c2 and c3 (an intersection of sets): \n    c2.retainAll(c3); \n    print(c2); \n    // Throw away all the elements \n    // in c2 that also appear in c3: \n    c2.removeAll(c3); \n    print(\"c2.isEmpty() = \" +  c2.isEmpty()); \n    c = new ArrayList<String>(); \n    c.addAll(Countries.names(6)); \n    print(c); \n    c.clear(); // Remove all elements \n    print(\"after c.clear():\" + c);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "c5e46df9bcebbdcdfed8d731eadf3091",
        "type": "source_code",
        "text": "System.out.println(\"--- \" + msg + \" ---\"); \n    Collection<String> c = list; \n    Collection<String> subList = list.subList(1,8); \n    // Copy of the sublist: \n    Collection<String> c2 = new ArrayList<String>(subList); \n    try { c.retainAll(c2); } catch(Exception e) { \n      System.out.println(\"retainAll(): \" + e); \n    } \n    try { c.removeAll(c2); } catch(Exception e) { \n      System.out.println(\"removeAll(): \" + e); \n    } \n    try { c.clear(); } catch(Exception e) { \n      System.out.println(\"clear(): \" + e); \n    } \n    try { c.add(\"X\"); } catch(Exception e) { \n      System.out.println(\"add(): \" + e); \n    } \n    try { c.addAll(c2); } catch(Exception e) { \n      System.out.println(\"addAll(): \" + e); \n    } \n    try { c.remove(\"C\"); } catch(Exception e) {",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "218d6965e080504b47c780639f6b1b97",
        "type": "source_code",
        "text": "System.out.println(\"remove(): \" + e); \n    } \n    // The List.set() method modifies the value but \n    // doesn\u2019t change the size of the data structure: \n    try { \n      list.set(0, \"X\"); \n    } catch(Exception e) { \n      System.out.println(\"List.set(): \" + e); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "2dee7409f670fd50ebe37d1e3fd7436e",
        "type": "source_code",
        "text": "List<String> list = \n      Arrays.asList(\"A B C D E F G H I J K L\".split(\" \")); \n    test(\"Modifiable Copy\", new ArrayList<String>(list)); \n    test(\"Arrays.asList()\", list); \n    test(\"unmodifiableList()\", \n      Collections.unmodifiableList( \n        new ArrayList<String>(list)));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "eb68c3e1de0a509a94cff9edb0f51719",
        "type": "source_code",
        "text": "a.add(1, \"x\"); // Add at location 1 \n    a.add(\"x\"); // Add at end \n    // Add a collection: \n    a.addAll(Countries.names(25)); \n    // Add a collection starting at location 3: \n    a.addAll(3, Countries.names(25)); \n    b = a.contains(\"1\"); // Is it in there? \n    // Is the entire collection in there? \n    b = a.containsAll(Countries.names(25)); \n    // Lists allow random access, which is cheap \n    // for ArrayList, expensive for LinkedList: \n    s = a.get(1); // Get (typed) object at location 1 \n    i = a.indexOf(\"1\"); // Tell index of object \n    b = a.isEmpty(); // Any elements inside? \n    it = a.iterator(); // Ordinary Iterator \n    lit = a.listIterator(); // ListIterator \n    lit = a.listIterator(3); // Start at loc 3 \n    i = a.lastIndexOf(\"1\"); // Last match \n    a.remove(1); // Remove location 1 \n    a.remove(\"3\"); // Remove this object \n    a.set(1, \"y\"); // Set location 1 to \"y\" \n    // Keep everything that\u2019s in the argument \n    // (the intersection of the two sets): \n    a.retainAll(Countries.names(25)); \n    // Remove everything that\u2019s in the argument: \n    a.removeAll(Countries.names(25)); \n    i = a.size(); // How big is it? \n    a.clear(); // Remove all elements",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "d577893ba2c9f7b6fa58f6c339cd4804",
        "type": "source_code",
        "text": "ListIterator<String> it = a.listIterator(); \n    b = it.hasNext(); \n    b = it.hasPrevious(); \n    s = it.next(); \n    i = it.nextIndex(); \n    s = it.previous();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "797692d8f233b49a072c097bf7d44979",
        "type": "source_code",
        "text": "i = it.previousIndex();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d56141e52a02c29c552d6cfc75c6a697",
        "type": "source_code",
        "text": "ListIterator<String> it = a.listIterator(); \n    it.add(\"47\"); \n    // Must move to an element after add(): \n    it.next(); \n    // Remove the element after the newly produced one: \n    it.remove(); \n    // Must move to an element after remove(): \n    it.next(); \n    // Change the element after the deleted one: \n    it.set(\"47\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "2ea2cf8ae3c704cc5f70b52cbf54680a",
        "type": "source_code",
        "text": "print(a); \n    List<String> b = Countries.names(25); \n    print(\"b = \" + b); \n    a.addAll(b); \n    a.addAll(b); \n    print(a); \n    // Insert, remove, and replace elements \n    // using a ListIterator: \n    ListIterator<String> x = a.listIterator(a.size()/2); \n    x.add(\"one\"); \n    print(a); \n    print(x.next()); \n    x.remove(); \n    print(x.next()); \n    x.set(\"47\"); \n    print(a); \n    // Traverse the list backwards: \n    x = a.listIterator(a.size()); \n    while(x.hasPrevious()) \n      printnb(x.previous() + \" \"); \n    print(); \n    print(\"testVisual finished\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "9ff4e6f2403af80f791366675a8fa2a5",
        "type": "source_code",
        "text": "LinkedList<String> ll = new LinkedList<String>(); \n    ll.addAll(Countries.names(25)); \n    print(ll); \n    // Treat it like a stack, pushing: \n    ll.addFirst(\"one\"); \n    ll.addFirst(\"two\"); \n    print(ll); \n    // Like \"peeking\" at the top of a stack: \n    print(ll.getFirst()); \n    // Like popping a stack: \n    print(ll.removeFirst()); \n    print(ll.removeFirst()); \n    // Treat it like a queue, pulling elements \n    // off the tail end: \n    print(ll.removeLast()); \n    print(ll);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "763d3028a0e1ba325804ced3e754c0c9",
        "type": "source_code",
        "text": "// Make and fill a new list each time: \n    basicTest( \n      new LinkedList<String>(Countries.names(25))); \n    basicTest( \n      new ArrayList<String>(Countries.names(25)));",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "09d1b38460c846ceaeb2aaa4cb45079c",
        "type": "source_code",
        "text": "iterMotion( \n      new LinkedList<String>(Countries.names(25))); \n    iterMotion( \n      new ArrayList<String>(Countries.names(25))); \n    iterManipulation( \n      new LinkedList<String>(Countries.names(25))); \n    iterManipulation( \n      new ArrayList<String>(Countries.names(25))); \n    testVisual( \n      new LinkedList<String>(Countries.names(25))); \n    testLinkedList();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c66fa158b1cb945b9d12e892714d4263",
        "type": "source_code",
        "text": "return o instanceof SetType && (i == ((SetType)o).i);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b385b0e35b43e2f14e7d52b226421675",
        "type": "source_code",
        "text": "return (arg.i < i ? -1 : (arg.i == i ? 0 : 1));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "844bd85b8f99274109864145930e21bb",
        "type": "source_code",
        "text": "try { \n      for(int i = 0; i < 10; i++) \n          set.add( \n            type.getConstructor(int.class).newInstance(i)); \n    } catch(Exception e) { \n      throw new RuntimeException(e); \n    } \n    return set;",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "3b82739bab7dc180efe5c320031ae2fa",
        "type": "source_code",
        "text": "fill(set, type); \n    fill(set, type); // Try to add duplicates \n    fill(set, type); \n    System.out.println(set);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "21870b0179ebe86ec14704bde6d20c3e",
        "type": "source_code",
        "text": "test(new HashSet<HashType>(), HashType.class); \n    test(new LinkedHashSet<HashType>(), HashType.class); \n    test(new TreeSet<TreeType>(), TreeType.class); \n    // Things that don\u2019t work: \n    test(new HashSet<SetType>(), SetType.class); \n    test(new HashSet<TreeType>(), TreeType.class); \n    test(new LinkedHashSet<SetType>(), SetType.class); \n    test(new LinkedHashSet<TreeType>(), TreeType.class); \n    try { \n      test(new TreeSet<SetType>(), SetType.class); \n    } catch(Exception e) { \n      System.out.println(e.getMessage()); \n    } \n    try { \n      test(new TreeSet<HashType>(), HashType.class); \n    } catch(Exception e) { \n      System.out.println(e.getMessage()); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "e00f3743cfbe001089d487bb14fea257",
        "type": "source_code",
        "text": "SortedSet<String> sortedSet = new TreeSet<String>(); \n    Collections.addAll(sortedSet, \n      \"one two three four five six seven eight\" \n        .split(\" \")); \n    print(sortedSet); \n    String low = sortedSet.first(); \n    String high = sortedSet.last(); \n    print(low); \n    print(high); \n    Iterator<String> it = sortedSet.iterator(); \n    for(int i = 0; i <= 6; i++) { \n      if(i == 3) low = it.next(); \n      if(i == 6) high = it.next(); \n      else it.next(); \n    } \n    print(low); \n    print(high); \n    print(sortedSet.subSet(low, high)); \n    print(sortedSet.headSet(high)); \n    print(sortedSet.tailSet(low));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1bca6bbc7dd2ec6933cccaa8577d39a0",
        "type": "source_code",
        "text": "for(int i = 0; i < count; i++) \n      queue.offer(gen.next()); \n    while(queue.peek() != null) \n      System.out.print(queue.remove() + \" \"); \n    System.out.println();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6cb32bd5b12ad586a0028e2e904c2f46",
        "type": "source_code",
        "text": "String[] s = (\"one two three four five six seven \" + \n      \"eight nine ten\").split(\" \"); \n    int i; \n    public String next() { return s[i++]; }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8ab6e13230490617bcab82bc86994f94",
        "type": "source_code",
        "text": "test(new LinkedList<String>(), new Gen()); \n    test(new PriorityQueue<String>(), new Gen()); \n    test(new ArrayBlockingQueue<String>(count), new Gen()); \n    test(new ConcurrentLinkedQueue<String>(), new Gen()); \n    test(new LinkedBlockingQueue<String>(), new Gen()); \n    test(new PriorityBlockingQueue<String>(), new Gen());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "22db6c6efe6f6a3ae0812e5c05428abd",
        "type": "source_code",
        "text": "private char primary; \n    private int secondary; \n    private String item; \n    public ToDoItem(String td, char pri, int sec) { \n      primary = pri; \n      secondary = sec; \n      item = td; \n    } \n    public int compareTo(ToDoItem arg) { \n      if(primary > arg.primary) \n        return +1; \n      if(primary == arg.primary) \n        if(secondary > arg.secondary) \n          return +1; \n        else if(secondary == arg.secondary) \n          return 0; \n      return -1; \n    } \n    public String toString() { \n      return Character.toString(primary) + \n        secondary + \": \" + item; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8b48a37a5a1455e2b383712aa5084deb",
        "type": "source_code",
        "text": "super.add(new ToDoItem(td, pri, sec));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8f4b00bbfe00ee6296725a786932a0af",
        "type": "source_code",
        "text": "ToDoList toDoList = new ToDoList(); \n    toDoList.add(\"Empty trash\", \u2018C\u2019, 4); \n    toDoList.add(\"Feed dog\", \u2018A\u2019, 2); \n    toDoList.add(\"Feed bird\", \u2018B\u2019, 7); \n    toDoList.add(\"Mow lawn\", \u2018C\u2019, 3); \n    toDoList.add(\"Water lawn\", \u2018A\u2019, 1); \n    toDoList.add(\"Feed cat\", \u2018B\u2019, 1); \n    while(!toDoList.isEmpty()) \n      System.out.println(toDoList.remove());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f655c3e07df96bad0d27ef7aa741bf61",
        "type": "source_code",
        "text": "for(int i = 20; i < 27; i++) \n      deque.addFirst(i); \n    for(int i = 50; i < 55; i++) \n      deque.addLast(i);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ea90b9de1c1da57fc453d03c5a7c744b",
        "type": "source_code",
        "text": "Deque<Integer> di = new Deque<Integer>(); \n    fillTest(di); \n    print(di); \n    while(di.size() != 0) \n      printnb(di.removeFirst() + \" \"); \n    print(); \n    fillTest(di); \n    while(di.size() != 0) \n      printnb(di.removeLast() + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "39c3813581e7030ea63a0fec59e05d72",
        "type": "source_code",
        "text": "pairs = new Object[length][2];",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "fbcec9454f6ca6a160dc6870ce539013",
        "type": "source_code",
        "text": "if(index >= pairs.length) \n      throw new ArrayIndexOutOfBoundsException(); \n    pairs[index++] = new Object[]{ key, value };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "50c18e92d9758103f678d6d69a19fef1",
        "type": "source_code",
        "text": "for(int i = 0; i < index; i++) \n      if(key.equals(pairs[i][0])) \n        return (V)pairs[i][1]; \n    return null; // Did not find key",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "aa2b118d4489b66ba4c2cbd1db9e50e3",
        "type": "source_code",
        "text": "StringBuilder result = new StringBuilder(); \n    for(int i = 0; i < index; i++) { \n      result.append(pairs[i][0].toString()); \n      result.append(\" : \"); \n      result.append(pairs[i][1].toString()); \n      if(i < index - 1) \n        result.append(\"\\n\"); \n    } \n    return result.toString();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "b7d4a3517c4dffac946bed0e68bdea0b",
        "type": "source_code",
        "text": "AssociativeArray<String,String> map = \n      new AssociativeArray<String,String>(6); \n    map.put(\"sky\", \"blue\"); \n    map.put(\"grass\", \"green\"); \n    map.put(\"ocean\", \"dancing\"); \n    map.put(\"tree\", \"tall\"); \n    map.put(\"earth\", \"brown\"); \n    map.put(\"sun\", \"warm\"); \n    try { \n      map.put(\"extra\", \"object\"); // Past the end",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "813a67b391bd592e8b26d767d0bd58c3",
        "type": "source_code",
        "text": "} catch(ArrayIndexOutOfBoundsException e) { \n      print(\"Too many objects!\"); \n    } \n    print(map); \n    print(map.get(\"ocean\"));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "71ff1b3dc66a32fd41f9afafa5136277",
        "type": "source_code",
        "text": "printnb(\"Size = \" + map.size() + \", \"); \n    printnb(\"Keys: \"); \n    print(map.keySet()); // Produce a Set of the keys",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "393e5183ab65399c406413d083dbc4e9",
        "type": "source_code",
        "text": "print(map.getClass().getSimpleName()); \n    map.putAll(new CountingMapData(25)); \n    // Map has \u2018Set\u2019 behavior for keys: \n    map.putAll(new CountingMapData(25)); \n    printKeys(map); \n    // Producing a Collection of the values: \n    printnb(\"Values: \"); \n    print(map.values()); \n    print(map); \n    print(\"map.containsKey(11): \" + map.containsKey(11)); \n    print(\"map.get(11): \" + map.get(11)); \n    print(\"map.containsValue(\\\"F0\\\"): \" \n      + map.containsValue(\"F0\")); \n    Integer key = map.keySet().iterator().next(); \n    print(\"First key in map: \" + key); \n    map.remove(key); \n    printKeys(map); \n    map.clear(); \n    print(\"map.isEmpty(): \" + map.isEmpty()); \n    map.putAll(new CountingMapData(25)); \n    // Operations on the Set change the Map: \n    map.keySet().removeAll(map.keySet()); \n    print(\"map.isEmpty(): \" + map.isEmpty());",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "c12ac9ba7300c8099c81abff891eafb2",
        "type": "source_code",
        "text": "test(new HashMap<Integer,String>()); \n    test(new TreeMap<Integer,String>()); \n    test(new LinkedHashMap<Integer,String>()); \n    test(new IdentityHashMap<Integer,String>()); \n    test(new ConcurrentHashMap<Integer,String>()); \n    test(new WeakHashMap<Integer,String>());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c3e8b51582b4ba1751abd29c392fb5f8",
        "type": "source_code",
        "text": "TreeMap<Integer,String> sortedMap = \n      new TreeMap<Integer,String>(new CountingMapData(10)); \n    print(sortedMap); \n    Integer low = sortedMap.firstKey(); \n    Integer high = sortedMap.lastKey(); \n    print(low); \n    print(high); \n    Iterator<Integer> it = sortedMap.keySet().iterator(); \n    for(int i = 0; i <= 6; i++) {",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "42def59c1845b73d012b323a7e17d52b",
        "type": "source_code",
        "text": "if(i == 3) low = it.next(); \n      if(i == 6) high = it.next(); \n      else it.next(); \n    } \n    print(low); \n    print(high); \n    print(sortedMap.subMap(low, high)); \n    print(sortedMap.headMap(high)); \n    print(sortedMap.tailMap(low));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8bb4b7f52fefc8edd8a925ac64797afc",
        "type": "source_code",
        "text": "LinkedHashMap<Integer,String> linkedMap = \n      new LinkedHashMap<Integer,String>( \n        new CountingMapData(9)); \n    print(linkedMap); \n    // Least-recently-used order: \n    linkedMap = \n      new LinkedHashMap<Integer,String>(16, 0.75f, true); \n    linkedMap.putAll(new CountingMapData(9)); \n    print(linkedMap); \n    for(int i = 0; i < 6; i++) // Cause accesses: \n      linkedMap.get(i); \n    print(linkedMap); \n    linkedMap.get(0); \n    print(linkedMap);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f745c80e630bf7c2343655f4e9f6a9a7",
        "type": "source_code",
        "text": "return \"Groundhog #\" + number;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3d70f48290e4ea7da98639fb0fc2082e",
        "type": "source_code",
        "text": "if(shadow) \n      return \"Six more weeks of Winter!\"; \n    else \n      return \"Early Spring!\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "70d9ac3d580a87047c45f9cf89f612a1",
        "type": "source_code",
        "text": "Constructor<T> ghog = type.getConstructor(int.class); \n    Map<Groundhog,Prediction> map = \n      new HashMap<Groundhog,Prediction>(); \n    for(int i = 0; i < 10; i++) \n      map.put(ghog.newInstance(i), new Prediction()); \n    print(\"map = \" + map); \n    Groundhog gh = ghog.newInstance(3); \n    print(\"Looking up prediction for \" + gh); \n    if(map.containsKey(gh)) \n      print(map.get(gh)); \n    else \n      print(\"Key not found: \" + gh);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "dd27e1c6de4e732cbba49a2e186d13c9",
        "type": "source_code",
        "text": "detectSpring(Groundhog.class);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "48dc156ce584efb718e9f76a21f3a6af",
        "type": "source_code",
        "text": "return o instanceof Groundhog2 && \n      (number == ((Groundhog2)o).number);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b9b9402233e5d123d7757c32a9203aeb",
        "type": "source_code",
        "text": "SpringDetector.detectSpring(Groundhog2.class);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "82bce6dd11bc644630f0b05f30e58702",
        "type": "source_code",
        "text": "V oldValue = get(key); // The old value or null \n    if(!keys.contains(key)) { \n      keys.add(key); \n      values.add(value); \n    } else \n      values.set(keys.indexOf(key), value); \n    return oldValue;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ed0800f105b3073e83cb29bdf57525f5",
        "type": "source_code",
        "text": "if(!keys.contains(key)) \n      return null; \n    return values.get(keys.indexOf(key));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5a14cd98f69e1509a4fe653e7c095723",
        "type": "source_code",
        "text": "Set<Map.Entry<K,V>> set= new HashSet<Map.Entry<K,V>>(); \n    Iterator<K> ki = keys.iterator(); \n    Iterator<V> vi = values.iterator(); \n    while(ki.hasNext()) \n      set.add(new MapEntry<K,V>(ki.next(), vi.next())); \n    return set;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "94e043cbd61a3824e2bee2690b8be3b3",
        "type": "source_code",
        "text": "SlowMap<String,String> m= new SlowMap<String,String>(); \n    m.putAll(Countries.capitals(15)); \n    System.out.println(m); \n    System.out.println(m.get(\"BULGARIA\")); \n    System.out.println(m.entrySet());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "91cd5d8d0e7ac6c66ba5452f2f74de23",
        "type": "source_code",
        "text": "this.key = key; \n    this.value = value;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d21f0b8abf68a6b226ae4fd6a7ffcb99",
        "type": "source_code",
        "text": "V result = value; \n    value = v; \n    return result;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d16406343275e1ba353de13275ab9f33",
        "type": "source_code",
        "text": "return (key==null ? 0 : key.hashCode()) ^ \n      (value==null ? 0 : value.hashCode());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "97f4cb8cbfac10d1e23382a76a190958",
        "type": "source_code",
        "text": "if(!(o instanceof MapEntry)) return false; \n    MapEntry me = (MapEntry)o; \n    return \n      (key == null ? \n       me.getKey() == null : key.equals(me.getKey())) && \n      (value == null ? \n       me.getValue()== null : value.equals(me.getValue()));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3aaaf2978a91ff9fec7ab1f8cf0faa35",
        "type": "source_code",
        "text": "new LinkedList[SIZE];",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "c2e1e8e71faece2995a6b38f865865a5",
        "type": "source_code",
        "text": "V oldValue = null; \n    int index = Math.abs(key.hashCode()) % SIZE; \n    if(buckets[index] == null) \n      buckets[index] = new LinkedList<MapEntry<K,V>>(); \n    LinkedList<MapEntry<K,V>> bucket = buckets[index]; \n    MapEntry<K,V> pair = new MapEntry<K,V>(key, value); \n    boolean found = false; \n    ListIterator<MapEntry<K,V>> it = bucket.listIterator(); \n    while(it.hasNext()) { \n      MapEntry<K,V> iPair = it.next(); \n      if(iPair.getKey().equals(key)) { \n        oldValue = iPair.getValue(); \n        it.set(pair); // Replace old with new \n        found = true; \n        break; \n      } \n    } \n    if(!found) \n      buckets[index].add(pair); \n    return oldValue;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "ea89f1fae9d99723a126424cd025374a",
        "type": "source_code",
        "text": "int index = Math.abs(key.hashCode()) % SIZE; \n    if(buckets[index] == null) return null; \n    for(MapEntry<K,V> iPair : buckets[index]) \n      if(iPair.getKey().equals(key)) \n        return iPair.getValue(); \n    return null;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "4482ec6d83bc9d13c2f21d0d12bbffa5",
        "type": "source_code",
        "text": "Set<Map.Entry<K,V>> set= new HashSet<Map.Entry<K,V>>(); \n    for(LinkedList<MapEntry<K,V>> bucket : buckets) { \n      if(bucket == null) continue; \n      for(MapEntry<K,V> mpair : bucket) \n        set.add(mpair); \n    } \n    return set;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c85d2c62919ffdbb47b96fc3a7cff5f1",
        "type": "source_code",
        "text": "SimpleHashMap<String,String> m = \n      new SimpleHashMap<String,String>(); \n    m.putAll(Countries.capitals(25)); \n    System.out.println(m); \n    System.out.println(m.get(\"ERITREA\")); \n    System.out.println(m.entrySet());",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "5135719dfffe93562650f035801fa625",
        "type": "source_code",
        "text": "String[] hellos = \"Hello Hello\".split(\" \"); \n    System.out.println(hellos[0].hashCode()); \n    System.out.println(hellos[1].hashCode());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e23fc8ce8a3b9ea97030a7f9d383a795",
        "type": "source_code",
        "text": "new ArrayList<String>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f1ca858405b8dbc48ae0c551d98431ab",
        "type": "source_code",
        "text": "s = str; \n    created.add(s); \n    // id is the total number of instances \n    // of this string in use by CountedString: \n    for(String s2 : created) \n      if(s2.equals(s)) \n        id++;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "207b0af7bd5e1cb3a691a82d2dba6030",
        "type": "source_code",
        "text": "return \"String: \" + s + \" id: \" + id + \n      \" hashCode(): \" + hashCode();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "685c75ddedb1a8f450b49831ba6cd8d3",
        "type": "source_code",
        "text": "// The very simple approach: \n    // return s.hashCode() * id; \n    // Using Joshua Bloch\u2019s recipe: \n    int result = 17; \n    result = 37 * result + s.hashCode(); \n    result = 37 * result + id; \n    return result;",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "3119b38a6f774d1f2599ccba82b169ef",
        "type": "source_code",
        "text": "return o instanceof CountedString && \n      s.equals(((CountedString)o).s) && \n      id == ((CountedString)o).id;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2449fc07afbbc34709fdcebdf8a955a1",
        "type": "source_code",
        "text": "Map<CountedString,Integer> map = \n      new HashMap<CountedString,Integer>(); \n    CountedString[] cs = new CountedString[5]; \n    for(int i = 0; i < cs.length; i++) { \n      cs[i] = new CountedString(\"hi\"); \n      map.put(cs[i], i); // Autobox int -> Integer \n    } \n    print(map); \n    for(CountedString cstring : cs) { \n      print(\"Looking up \" + cstring); \n      print(map.get(cstring)); \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "d037c1baeebfcd0f6d6eb1ccdc5a3d2b",
        "type": "source_code",
        "text": "return getClass().getSimpleName() + \n      (name == null ? \"\" : \" \" + name);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "978ec0fb2019d4f3747088445ab51af2",
        "type": "source_code",
        "text": "return o instanceof Individual && \n      id == ((Individual)o).id;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ed1702550ca7a737b77032a4a15e5f4f",
        "type": "source_code",
        "text": "int result = 17; \n    if(name != null) \n      result = 37 * result + name.hashCode(); \n    result = 37 * result + (int)id; \n    return result;",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "5d290277bb3d43a6eb72764d4f911f27",
        "type": "source_code",
        "text": "// Compare by class name first: \n    String first = getClass().getSimpleName(); \n    String argFirst = arg.getClass().getSimpleName(); \n    int firstCompare = first.compareTo(argFirst); \n    if(firstCompare != 0) \n    return firstCompare; \n    if(name != null && arg.name != null) { \n      int secondCompare = name.compareTo(arg.name); \n      if(secondCompare != 0) \n        return secondCompare; \n    } \n    return (arg.id < id ? -1 : (arg.id == id ? 0 : 1));",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "3d8df477ee2260f7b860b05cdf170f29",
        "type": "source_code",
        "text": "Set<Individual> pets = new TreeSet<Individual>(); \n    for(List<? extends Pet> lp : \n        MapOfList.petPeople.values()) \n      for(Pet p : lp) \n        pets.add(p); \n    System.out.println(pets);",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "c4ca82e8f2b48a163a3ea777dcb6413a",
        "type": "source_code",
        "text": "this.size = size; \n    this.loops = loops;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "79dca8093070a179661606a8854cf766",
        "type": "source_code",
        "text": "int size = values.length/2; \n    TestParam[] result = new TestParam[size]; \n    int n = 0; \n    for(int i = 0; i < size; i++) \n      result[i] = new TestParam(values[n++], values[n++]); \n    return result;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "cabeb40999c55b08d0660b1cd969cd23",
        "type": "source_code",
        "text": "int[] vals = new int[values.length]; \n    for(int i = 0; i < vals.length; i++) \n      vals[i] = Integer.decode(values[i]); \n    return array(vals);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "e2b9440269fbb497b61e73b883f42afb",
        "type": "source_code",
        "text": "10, 5000, 100, 5000, 1000, 5000, 10000, 500);",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "5f1994edd7612af10d96252c836450fb",
        "type": "source_code",
        "text": "return \"%\" + fieldWidth + \"s\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c0e4d7d09d40a8ce7a3f7d58dbd5257f",
        "type": "source_code",
        "text": "return \"%\" + fieldWidth + \"d\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "37912687dee4db62880a92271956c78c",
        "type": "source_code",
        "text": "this.container = container; \n    this.tests = tests; \n    if(container != null) \n      headline = container.getClass().getSimpleName();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "6633edd6de66414ae297505ecfe9c392",
        "type": "source_code",
        "text": "TestParam[] paramList) { \n    this(container, tests); \n    this.paramList = paramList;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5b27629c138d9d8ff5d8b255f402fb34",
        "type": "source_code",
        "text": "headline = newHeadline;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "486868ca5f5a2b19a6a500617efe1748",
        "type": "source_code",
        "text": "new Tester<C>(cntnr, tests).timedTest();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d2b09e54ab1cfe6b5c30bf2582cdde9c",
        "type": "source_code",
        "text": "List<Test<C>> tests, TestParam[] paramList) { \n    new Tester<C>(cntnr, tests, paramList).timedTest();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "79690c9c713ece47700716a891b99d0c",
        "type": "source_code",
        "text": "// Calculate width and pad with \u2018-\u2019: \n    int width = fieldWidth * tests.size() + sizeWidth; \n    int dashLength = width - headline.length() - 1; \n    StringBuilder head = new StringBuilder(width); \n    for(int i = 0; i < dashLength/2; i++) \n      head.append(\u2018-\u2019); \n    head.append(\u2018 \u2018); \n    head.append(headline); \n    head.append(\u2018 \u2018); \n    for(int i = 0; i < dashLength/2; i++) \n      head.append(\u2018-\u2019); \n    System.out.println(head); \n    // Print column headers: \n    System.out.format(sizeField, \"size\"); \n    for(Test test : tests) \n      System.out.format(stringField(), test.name); \n    System.out.println();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "3e437e999e5655f06d298b7f2c5c99cd",
        "type": "source_code",
        "text": "displayHeader(); \n    for(TestParam param : paramList) { \n      System.out.format(sizeField, param.size); \n      for(Test<C> test : tests) { \n        C kontainer = initialize(param.size); \n        long start = System.nanoTime(); \n        // Call the overriden method: \n        int reps = test.test(kontainer, param); \n        long duration = System.nanoTime() - start; \n        long timePerRep = duration / reps; // Nanoseconds \n        System.out.format(numberField(), timePerRep); \n      } \n      System.out.println(); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ab917b01744b29b9f0ea1f040a865e5e",
        "type": "source_code",
        "text": "new ArrayList<Test<List<Integer>>>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6e4011c166e5095af8eec91bf26b15d8",
        "type": "source_code",
        "text": "new ArrayList<Test<LinkedList<Integer>>>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4980ba18962a3d18e94e8f9fcbb1bfc3",
        "type": "source_code",
        "text": "tests.add(new Test<List<Integer>>(\"add\") { \n      int test(List<Integer> list, TestParam tp) { \n        int loops = tp.loops; \n        int listSize = tp.size; \n        for(int i = 0; i < loops; i++) { \n          list.clear(); \n          for(int j = 0; j < listSize; j++) \n            list.add(j); \n        } \n        return loops * listSize; \n      } \n    }); \n    tests.add(new Test<List<Integer>>(\"get\") { \n      int test(List<Integer> list, TestParam tp) { \n        int loops = tp.loops * reps; \n        int listSize = list.size(); \n        for(int i = 0; i < loops; i++) \n          list.get(rand.nextInt(listSize)); \n        return loops; \n      } \n    }); \n    tests.add(new Test<List<Integer>>(\"set\") {",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "957b429c56aab93f0fda747bc44a0d83",
        "type": "source_code",
        "text": "int test(List<Integer> list, TestParam tp) { \n        int loops = tp.loops * reps; \n        int listSize = list.size(); \n        for(int i = 0; i < loops; i++) \n          list.set(rand.nextInt(listSize), 47); \n        return loops; \n      } \n    }); \n    tests.add(new Test<List<Integer>>(\"iteradd\") { \n      int test(List<Integer> list, TestParam tp) { \n        final int LOOPS = 1000000; \n        int half = list.size() / 2; \n        ListIterator<Integer> it = list.listIterator(half); \n        for(int i = 0; i < LOOPS; i++) \n          it.add(47); \n        return LOOPS; \n      } \n    }); \n    tests.add(new Test<List<Integer>>(\"insert\") { \n      int test(List<Integer> list, TestParam tp) { \n        int loops = tp.loops; \n        for(int i = 0; i < loops; i++) \n          list.add(5, 47); // Minimize random-access cost \n        return loops; \n      } \n    }); \n    tests.add(new Test<List<Integer>>(\"remove\") { \n      int test(List<Integer> list, TestParam tp) { \n        int loops = tp.loops; \n        int size = tp.size; \n        for(int i = 0; i < loops; i++) { \n          list.clear(); \n          list.addAll(new CountingIntegerList(size)); \n          while(list.size() > 5) \n            list.remove(5); // Minimize random-access cost \n        } \n        return loops * size; \n      } \n    }); \n    // Tests for queue behavior: \n    qTests.add(new Test<LinkedList<Integer>>(\"addFirst\") { \n      int test(LinkedList<Integer> list, TestParam tp) { \n        int loops = tp.loops; \n        int size = tp.size; \n        for(int i = 0; i < loops; i++) { \n          list.clear(); \n          for(int j = 0; j < size; j++) \n            list.addFirst(47); \n        } \n        return loops * size; \n      } \n    }); \n    qTests.add(new Test<LinkedList<Integer>>(\"addLast\") { \n      int test(LinkedList<Integer> list, TestParam tp) { \n        int loops = tp.loops; \n        int size = tp.size; \n        for(int i = 0; i < loops; i++) { \n          list.clear(); \n          for(int j = 0; j < size; j++) \n            list.addLast(47); \n        } \n        return loops * size; \n      }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f5208a8a6a13cf6ef116c00343e7ff86",
        "type": "source_code",
        "text": "}); \n    qTests.add( \n      new Test<LinkedList<Integer>>(\"rmFirst\") { \n        int test(LinkedList<Integer> list, TestParam tp) { \n          int loops = tp.loops; \n          int size = tp.size; \n          for(int i = 0; i < loops; i++) { \n            list.clear(); \n            list.addAll(new CountingIntegerList(size)); \n            while(list.size() > 0) \n              list.removeFirst(); \n          } \n          return loops * size; \n        } \n      }); \n    qTests.add(new Test<LinkedList<Integer>>(\"rmLast\") { \n      int test(LinkedList<Integer> list, TestParam tp) { \n        int loops = tp.loops; \n        int size = tp.size; \n        for(int i = 0; i < loops; i++) { \n          list.clear(); \n          list.addAll(new CountingIntegerList(size)); \n          while(list.size() > 0) \n            list.removeLast(); \n        } \n        return loops * size; \n      } \n    });",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "f13b59f44e13f8285e339d0308057d6b",
        "type": "source_code",
        "text": "public ListTester(List<Integer> container, \n        List<Test<List<Integer>>> tests) { \n      super(container, tests); \n    } \n    // Fill to the appropriate size before each test: \n    @Override protected List<Integer> initialize(int size){ \n      container.clear(); \n      container.addAll(new CountingIntegerList(size)); \n      return container; \n    } \n    // Convenience method: \n    public static void run(List<Integer> list, \n        List<Test<List<Integer>>> tests) { \n      new ListTester(list, tests).timedTest(); \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "8a8cfa70c9239fdf5a91d457bf1938fa",
        "type": "source_code",
        "text": "if(args.length > 0) \n      Tester.defaultParams = TestParam.array(args); \n    // Can only do these two tests on an array: \n    Tester<List<Integer>> arrayTest = \n      new Tester<List<Integer>>(null, tests.subList(1, 3)){ \n        // This will be called before each test. It \n        // produces a non-resizeable array-backed list: \n        @Override protected \n        List<Integer> initialize(int size) { \n          Integer[] ia = Generated.array(Integer.class, \n            new CountingGenerator.Integer(), size); \n          return Arrays.asList(ia); \n        } \n      }; \n    arrayTest.setHeadline(\"Array as List\"); \n    arrayTest.timedTest();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "d9b1e19371b2a4fc0af9262671e4b964",
        "type": "source_code",
        "text": "Tester.defaultParams= TestParam.array( \n      10, 5000, 100, 5000, 1000, 1000, 10000, 200); \n    if(args.length > 0) \n      Tester.defaultParams = TestParam.array(args); \n    ListTester.run(new ArrayList<Integer>(), tests); \n    ListTester.run(new LinkedList<Integer>(), tests); \n    ListTester.run(new Vector<Integer>(), tests); \n    Tester.fieldWidth = 12; \n    Tester<LinkedList<Integer>> qTest = \n      new Tester<LinkedList<Integer>>( \n        new LinkedList<Integer>(), qTests); \n    qTest.setHeadline(\"Queue tests\"); \n    qTest.timedTest();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "955fd07cb38c0ca8e60509d1683f7c1b",
        "type": "source_code",
        "text": "get     set",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0d20f962a7c5ab6b42cedf306a6b8d09",
        "type": "source_code",
        "text": "130     183",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "87970eab36493a9bf821d3dbdd34ff79",
        "type": "source_code",
        "text": "130     164",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "d4e887aea60f8cef0cd0f5ceb880b0b3",
        "type": "source_code",
        "text": "129     165",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "d4e887aea60f8cef0cd0f5ceb880b0b3",
        "type": "source_code",
        "text": "129     165",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "a229613be91397777994c7c6f7d831d7",
        "type": "source_code",
        "text": "add     get     set iteradd  insert  remove",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bd6e376573b5bf21764f1aec0577fc53",
        "type": "source_code",
        "text": "121     139     191     435    3952     446",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "3a5cf766b9e7cc3d2784d2c5532ec723",
        "type": "source_code",
        "text": "72     141     191     247    3934     296",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "c50f29bad14a1e330025dccbbcfe9b8d",
        "type": "source_code",
        "text": "98     141     194     839    2202     923",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "8afb5ff44a3ded708f15373424426ca5",
        "type": "source_code",
        "text": "122     144     190    6880   14042    7333",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "a229613be91397777994c7c6f7d831d7",
        "type": "source_code",
        "text": "add     get     set iteradd  insert  remove",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0bd04c89dfeb4243393a7da504025e0b",
        "type": "source_code",
        "text": "182     164     198     658     366     262",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "a1ba9838f6eb29b6e4f83c180ad39d99",
        "type": "source_code",
        "text": "106     202     230     457     108     201",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "fbdbe9d71b5143453de0bd7473aa2658",
        "type": "source_code",
        "text": "133    1289    1353     430     136     239",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "314db793e9a9ff42f3d5aa717692cedc",
        "type": "source_code",
        "text": "172   13648   13187     435     255     239",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "a229613be91397777994c7c6f7d831d7",
        "type": "source_code",
        "text": "add     get     set iteradd  insert  remove",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7ac31c9584c695ddaa995db0fe79034f",
        "type": "source_code",
        "text": "129     145     187     290    3635     253",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "387194c54cd62c3eb9ab77461435bcaf",
        "type": "source_code",
        "text": "72     144     190     263    3691     292",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "1a1ffbb73b5b5502a467892c03484734",
        "type": "source_code",
        "text": "99     145     193     846    2162     927",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "bed4d2ae813f31cc02e402a91d9081ad",
        "type": "source_code",
        "text": "108     145     186    6871   14730    7135",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "f263c7c48e43728f5830b4ae9727b81d",
        "type": "source_code",
        "text": "addFirst     addLast     rmFirst      rmLast",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8651803866452edb93b12b16dfb715f1",
        "type": "source_code",
        "text": "199         163         251         253",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "0225daff3910ace28accb6f6a87cd146",
        "type": "source_code",
        "text": "98          92         180         179",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "56974f65d9a1f8e34d62702bc0440584",
        "type": "source_code",
        "text": "99          93         216         212",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "39d5f46e7969a03dd4ca032fd9ecdee3",
        "type": "source_code",
        "text": "111         109         262         384",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "158d795e0b0ce96a05c96d55b5306656",
        "type": "source_code",
        "text": "print(\"Usage:\"); \n    print(\"\\tRandomBounds lower\"); \n    print(\"\\tRandomBounds upper\"); \n    System.exit(1);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "922e721c3f308249c5381de5224c5a8a",
        "type": "source_code",
        "text": "if(args.length != 1) usage(); \n    if(args[0].equals(\"lower\")) { \n      while(Math.random() != 0.0) \n        ; // Keep trying",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "7e23f3e8bcc02f30a25d6722934e077c",
        "type": "source_code",
        "text": "print(\"Produced 0.0!\"); \n    } \n    else if(args[0].equals(\"upper\")) { \n      while(Math.random() != 1.0) \n        ; // Keep trying \n      print(\"Produced 1.0!\"); \n    } \n    else \n      usage();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "811c11d524b95b7876aa3607284c7615",
        "type": "source_code",
        "text": "new ArrayList<Test<Set<Integer>>>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "84748b05791181fa8ea4a21f19195761",
        "type": "source_code",
        "text": "tests.add(new Test<Set<Integer>>(\"add\") { \n      int test(Set<Integer> set, TestParam tp) { \n        int loops = tp.loops; \n        int size = tp.size; \n        for(int i = 0; i < loops; i++) { \n          set.clear(); \n          for(int j = 0; j < size; j++) \n            set.add(j); \n        } \n        return loops * size; \n      } \n    }); \n    tests.add(new Test<Set<Integer>>(\"contains\") { \n      int test(Set<Integer> set, TestParam tp) { \n        int loops = tp.loops;",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "f7969f06cbe3a9bdc1198cc01cebb8e0",
        "type": "source_code",
        "text": "int span = tp.size * 2; \n        for(int i = 0; i < loops; i++) \n          for(int j = 0; j < span; j++) \n            set.contains(j); \n        return loops * span; \n      } \n    }); \n    tests.add(new Test<Set<Integer>>(\"iterate\") { \n      int test(Set<Integer> set, TestParam tp) { \n        int loops = tp.loops * 10; \n        for(int i = 0; i < loops; i++) { \n          Iterator<Integer> it = set.iterator(); \n          while(it.hasNext()) \n            it.next(); \n        } \n        return loops * set.size(); \n      } \n    });",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "027f275f8cf7eb2f36cfa695db38ea95",
        "type": "source_code",
        "text": "if(args.length > 0) \n      Tester.defaultParams = TestParam.array(args); \n    Tester.fieldWidth = 10; \n    Tester.run(new TreeSet<Integer>(), tests); \n    Tester.run(new HashSet<Integer>(), tests); \n    Tester.run(new LinkedHashSet<Integer>(), tests);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f069691159fbaecd02a409d5ee56d7fa",
        "type": "source_code",
        "text": "add  contains   iterate",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ccf32f1190bd700aaadc89e6ce973380",
        "type": "source_code",
        "text": "746       173        89",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "bf2edf989cdb9ddbc95a58f14a034220",
        "type": "source_code",
        "text": "501       264        68",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "c8c78c69563411c05f78c56765bef2ab",
        "type": "source_code",
        "text": "714       410        69",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "2fb3d723a51b1c55ce7873637a0ae17d",
        "type": "source_code",
        "text": "1975       552        69",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "f069691159fbaecd02a409d5ee56d7fa",
        "type": "source_code",
        "text": "add  contains   iterate",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d3906fc23f94380eb8669ac0ee274dd8",
        "type": "source_code",
        "text": "308        91        94",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "30877ad4618ec8089cc10ed549afe965",
        "type": "source_code",
        "text": "178        75        73",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "702b4c539c931b723d013f4d6b80611c",
        "type": "source_code",
        "text": "216       110        72",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "2d244637958bb65e4723308712386fbd",
        "type": "source_code",
        "text": "711       215       100",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "f069691159fbaecd02a409d5ee56d7fa",
        "type": "source_code",
        "text": "add  contains   iterate",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "57d90c36d950020df74ada73829695ee",
        "type": "source_code",
        "text": "350        65        83",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "54b7c320071502ef2d5a91cff79eedec",
        "type": "source_code",
        "text": "270        74        55",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "78d6527a63ab6c296b6d87409ae7e265",
        "type": "source_code",
        "text": "303       111        54",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "724d6e3e174e580288e149dcbaf9be3f",
        "type": "source_code",
        "text": "1615       256        58",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "6218b2e63e863e58cee9d69c91fe5866",
        "type": "source_code",
        "text": "new ArrayList<Test<Map<Integer,Integer>>>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0170995c41de06abea362b0886442aec",
        "type": "source_code",
        "text": "tests.add(new Test<Map<Integer,Integer>>(\"put\") { \n      int test(Map<Integer,Integer> map, TestParam tp) { \n        int loops = tp.loops; \n        int size = tp.size; \n        for(int i = 0; i < loops; i++) { \n          map.clear(); \n          for(int j = 0; j < size; j++) \n            map.put(j, j); \n        } \n        return loops * size; \n      } \n    }); \n    tests.add(new Test<Map<Integer,Integer>>(\"get\") { \n      int test(Map<Integer,Integer> map, TestParam tp) { \n        int loops = tp.loops; \n        int span = tp.size * 2; \n        for(int i = 0; i < loops; i++) \n          for(int j = 0; j < span; j++) \n            map.get(j); \n        return loops * span; \n      } \n    }); \n    tests.add(new Test<Map<Integer,Integer>>(\"iterate\") { \n      int test(Map<Integer,Integer> map, TestParam tp) { \n        int loops = tp.loops * 10; \n        for(int i = 0; i < loops; i ++) { \n          Iterator it = map.entrySet().iterator(); \n          while(it.hasNext()) \n            it.next(); \n        } \n        return loops * map.size(); \n      } \n    });",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "554ac067092b8d1aceedcaeff5d7a889",
        "type": "source_code",
        "text": "if(args.length > 0) \n      Tester.defaultParams = TestParam.array(args); \n    Tester.run(new TreeMap<Integer,Integer>(), tests); \n    Tester.run(new HashMap<Integer,Integer>(), tests); \n    Tester.run(new LinkedHashMap<Integer,Integer>(),tests); \n    Tester.run( \n      new IdentityHashMap<Integer,Integer>(), tests); \n    Tester.run(new WeakHashMap<Integer,Integer>(), tests); \n    Tester.run(new Hashtable<Integer,Integer>(), tests);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "da178a0706c67182aa355ff65fffdeb1",
        "type": "source_code",
        "text": "put     get iterate",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0f5414e312aa46513a544f41376aa24d",
        "type": "source_code",
        "text": "748     168     100",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "b849c65feafffc54bf1a01ea94594f43",
        "type": "source_code",
        "text": "506     264      76",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "36914ed1640fb1e4fd42da0726e54299",
        "type": "source_code",
        "text": "771     450      78",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "c5256829e97bb26a7d3f469695771407",
        "type": "source_code",
        "text": "2962     561      83",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "da178a0706c67182aa355ff65fffdeb1",
        "type": "source_code",
        "text": "put     get iterate",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9718e09ae641c508ea2e3ab3a492a713",
        "type": "source_code",
        "text": "281      76      93",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "ae0e6e111325eb377f71dc5ab4bbaed8",
        "type": "source_code",
        "text": "179      70      73",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "81ec9360a9406ec8d0f1f9567555c1f1",
        "type": "source_code",
        "text": "267     102      72",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "5873d1cff6099c9b5ff4f7bed2f884f5",
        "type": "source_code",
        "text": "1305     265      97",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "da178a0706c67182aa355ff65fffdeb1",
        "type": "source_code",
        "text": "put     get iterate",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0dad3fc714434f8a5f3a8e545dfc3523",
        "type": "source_code",
        "text": "354     100      72",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "f0f5daf9e7a99e3b2f1185b8d3cb9d63",
        "type": "source_code",
        "text": "273      89      50",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "56eca2cbfdd1ebc4cbea1a6c16484edc",
        "type": "source_code",
        "text": "385     222      56",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "33ded7b112be16fe500361c703c0fc96",
        "type": "source_code",
        "text": "2787     341      56",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "da178a0706c67182aa355ff65fffdeb1",
        "type": "source_code",
        "text": "put     get iterate",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ca850a09e9e01dbbb2694ff3faf2a52c",
        "type": "source_code",
        "text": "290     144     101",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "0550f49df2d93b51af839f7bd7a3dedf",
        "type": "source_code",
        "text": "204     287     132",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "f4b062d98d78b30cb354f923165cc572",
        "type": "source_code",
        "text": "508     336      77",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "4571c6d3d63e3d09561b00ab4d4ef9cf",
        "type": "source_code",
        "text": "767     266      56",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "da178a0706c67182aa355ff65fffdeb1",
        "type": "source_code",
        "text": "put     get iterate",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "11bc10f6c3cfed32d106e10fb4ff98d5",
        "type": "source_code",
        "text": "484     146     151",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "1fc6d08ee1dc045fd80b98ba8e19e858",
        "type": "source_code",
        "text": "292     126     117",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "7b6538d89262512872bb9e8d3c1bc1f2",
        "type": "source_code",
        "text": "411     136     152",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "677d90f31f7a710576ff9f91c94ffe21",
        "type": "source_code",
        "text": "2165     138     555",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "da178a0706c67182aa355ff65fffdeb1",
        "type": "source_code",
        "text": "put     get iterate",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3b8f82a209097f920488559bc24b1216",
        "type": "source_code",
        "text": "264     113     113",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "7cc66ced9b90bb8bb9c3bd1aaa649424",
        "type": "source_code",
        "text": "181     105      76",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "90ffa78b093b1089cf3a9507d5bbaf11",
        "type": "source_code",
        "text": "260     201      80",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "ee7a45715e13207636832f43392ecb91",
        "type": "source_code",
        "text": "1245     134      77",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "b7eeae050856631087e7baf06299af5c",
        "type": "source_code",
        "text": "\"one Two three Four five six one\".split(\" \"));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e5caca61f437ec2795638b30c35b7e73",
        "type": "source_code",
        "text": "print(list); \n    print(\"\u2018list\u2019 disjoint (Four)?: \" + \n      Collections.disjoint(list, \n        Collections.singletonList(\"Four\"))); \n    print(\"max: \" + Collections.max(list)); \n    print(\"min: \" + Collections.min(list)); \n    print(\"max w/ comparator: \" + Collections.max(list, \n      String.CASE_INSENSITIVE_ORDER)); \n    print(\"min w/ comparator: \" + Collections.min(list, \n      String.CASE_INSENSITIVE_ORDER)); \n    List<String> sublist = \n      Arrays.asList(\"Four five six\".split(\" \")); \n    print(\"indexOfSubList: \" + \n      Collections.indexOfSubList(list, sublist)); \n    print(\"lastIndexOfSubList: \" + \n      Collections.lastIndexOfSubList(list, sublist)); \n    Collections.replaceAll(list, \"one\", \"Yo\"); \n    print(\"replaceAll: \" + list); \n    Collections.reverse(list); \n    print(\"reverse: \" + list); \n    Collections.rotate(list, 3); \n    print(\"rotate: \" + list); \n    List<String> source = \n      Arrays.asList(\"in the matrix\".split(\" \")); \n    Collections.copy(list, source); \n    print(\"copy: \" + list); \n    Collections.swap(list, 0, list.size() - 1); \n    print(\"swap: \" + list); \n    Collections.shuffle(list, new Random(47)); \n    print(\"shuffled: \" + list); \n    Collections.fill(list, \"pop\"); \n    print(\"fill: \" + list); \n    print(\"frequency of \u2018pop\u2019: \" + \n      Collections.frequency(list, \"pop\")); \n    List<String> dups = Collections.nCopies(3, \"snap\"); \n    print(\"dups: \" + dups); \n    print(\"\u2018list\u2019 disjoint \u2018dups\u2019?: \" + \n      Collections.disjoint(list, dups)); \n    // Getting an old-style Enumeration: \n    Enumeration<String> e = Collections.enumeration(dups); \n    Vector<String> v = new Vector<String>(); \n    while(e.hasMoreElements()) \n      v.addElement(e.nextElement()); \n    // Converting an old-style Vector \n    // to a List via an Enumeration: \n    ArrayList<String> arrayList = \n      Collections.list(v.elements()); \n    print(\"arrayList: \" + arrayList);",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "7cba343d2c5c8a8a7b751abad7fb0af9",
        "type": "source_code",
        "text": "List<String> list = \n      new ArrayList<String>(Utilities.list); \n    list.addAll(Utilities.list); \n    print(list); \n    Collections.shuffle(list, new Random(47)); \n    print(\"Shuffled: \" + list); \n    // Use a ListIterator to trim off the last elements: \n    ListIterator<String> it = list.listIterator(10); \n    while(it.hasNext()) { \n      it.next(); \n      it.remove(); \n    } \n    print(\"Trimmed: \" + list); \n    Collections.sort(list); \n    print(\"Sorted: \" + list); \n    String key = list.get(7); \n    int index = Collections.binarySearch(list, key); \n    print(\"Location of \" + key + \" is \" + index + \n      \", list.get(\" + index + \") = \" + list.get(index)); \n    Collections.sort(list, String.CASE_INSENSITIVE_ORDER); \n    print(\"Case-insensitive sorted: \" + list); \n    key = list.get(7); \n    index = Collections.binarySearch(list, key, \n      String.CASE_INSENSITIVE_ORDER); \n    print(\"Location of \" + key + \" is \" + index + \n      \", list.get(\" + index + \") = \" + list.get(index));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "08e7e5e31cb56f4c9a6cf72e04f9cfff",
        "type": "source_code",
        "text": "new ArrayList<String>(Countries.names(6));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "051540090cf7b73f80dc07693d6c5a2f",
        "type": "source_code",
        "text": "Collection<String> c = \n      Collections.unmodifiableCollection( \n        new ArrayList<String>(data)); \n    print(c); // Reading is OK \n    //! c.add(\"one\"); // Can\u2019t change it",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "704c7ffefa18f37fed9b66689eb0f7fe",
        "type": "source_code",
        "text": "List<String> a = Collections.unmodifiableList(",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f391ae6c98956aaa45a8296b679cdca2",
        "type": "source_code",
        "text": "new ArrayList<String>(data)); \n    ListIterator<String> lit = a.listIterator(); \n    print(lit.next()); // Reading is OK \n    //! lit.add(\"one\"); // Can\u2019t change it",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8a3a60163a86bcd908eda0147e0108b8",
        "type": "source_code",
        "text": "Set<String> s = Collections.unmodifiableSet( \n      new HashSet<String>(data)); \n    print(s); // Reading is OK \n    //! s.add(\"one\"); // Can\u2019t change it",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "70ea828e50e9e2070b15559c40aff922",
        "type": "source_code",
        "text": "// For a SortedSet: \n    Set<String> ss = Collections.unmodifiableSortedSet( \n      new TreeSet<String>(data));",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "84357dd3c3a24e5259a1df8dab3ad16e",
        "type": "source_code",
        "text": "Map<String,String> m = Collections.unmodifiableMap( \n      new HashMap<String,String>(Countries.capitals(6))); \n    print(m); // Reading is OK \n    //! m.put(\"Ralph\", \"Howdy!\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5dee55d79822815cb2a5597ee63036d7",
        "type": "source_code",
        "text": "// For a SortedMap: \n    Map<String,String> sm = \n      Collections.unmodifiableSortedMap( \n        new TreeMap<String,String>(Countries.capitals(6)));",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "2dcc463d08c157fa4fd0405ad7cb2189",
        "type": "source_code",
        "text": "Collection<String> c = \n      Collections.synchronizedCollection( \n        new ArrayList<String>());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bfad152bd022113f4ce98af464fdd6dc",
        "type": "source_code",
        "text": "List<String> list = Collections.synchronizedList( \n      new ArrayList<String>()); \n    Set<String> s = Collections.synchronizedSet( \n      new HashSet<String>()); \n    Set<String> ss = Collections.synchronizedSortedSet( \n      new TreeSet<String>()); \n    Map<String,String> m = Collections.synchronizedMap( \n      new HashMap<String,String>()); \n    Map<String,String> sm = \n      Collections.synchronizedSortedMap( \n        new TreeMap<String,String>());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "98b2faad82c8f437f5e7424f384cea1f",
        "type": "source_code",
        "text": "Collection<String> c = new ArrayList<String>(); \n    Iterator<String> it = c.iterator(); \n    c.add(\"An object\"); \n    try { \n      String s = it.next(); \n    } catch(ConcurrentModificationException e) { \n      System.out.println(e); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "93ed4c3390b624968d09bf169741badc",
        "type": "source_code",
        "text": "System.out.println(\"Finalizing \" + ident);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2bb24351ade888dd4a8e964b0fb12b80",
        "type": "source_code",
        "text": "new ReferenceQueue<VeryBig>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ed2809b12b1b50130932c3ffb6843aaf",
        "type": "source_code",
        "text": "Reference<? extends VeryBig> inq = rq.poll(); \n    if(inq != null) \n      System.out.println(\"In queue: \" + inq.get());",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "669cdf5abd9677f4468cec2a95b69dd5",
        "type": "source_code",
        "text": "int size = 10; \n    // Or, choose size via the command line: \n    if(args.length > 0) \n      size = new Integer(args[0]); \n    LinkedList<SoftReference<VeryBig>> sa = \n      new LinkedList<SoftReference<VeryBig>>(); \n    for(int i = 0; i < size; i++) { \n      sa.add(new SoftReference<VeryBig>( \n        new VeryBig(\"Soft \" + i), rq)); \n      System.out.println(\"Just created: \" + sa.getLast()); \n      checkQueue(); \n    } \n    LinkedList<WeakReference<VeryBig>> wa = \n      new LinkedList<WeakReference<VeryBig>>(); \n    for(int i = 0; i < size; i++) { \n      wa.add(new WeakReference<VeryBig>( \n        new VeryBig(\"Weak \" + i), rq)); \n      System.out.println(\"Just created: \" + wa.getLast()); \n      checkQueue(); \n    } \n    SoftReference<VeryBig> s = \n      new SoftReference<VeryBig>(new VeryBig(\"Soft\")); \n    WeakReference<VeryBig> w = \n      new WeakReference<VeryBig>(new VeryBig(\"Weak\")); \n    System.gc(); \n    LinkedList<PhantomReference<VeryBig>> pa = \n      new LinkedList<PhantomReference<VeryBig>>(); \n    for(int i = 0; i < size; i++) { \n      pa.add(new PhantomReference<VeryBig>( \n        new VeryBig(\"Phantom \" + i), rq)); \n      System.out.println(\"Just created: \" + pa.getLast()); \n      checkQueue(); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "e4d98d70c814dacfcbcbe76810faa832",
        "type": "source_code",
        "text": "return r instanceof Element && \n      ident.equals(((Element)r).ident);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2ec63f9b70b01cf9b466cf1b72ba7279",
        "type": "source_code",
        "text": "System.out.println(\"Finalizing \" + \n      getClass().getSimpleName() + \" \" + ident);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "61e6a373e9be85012f64f7a2341b3e03",
        "type": "source_code",
        "text": "int size = 1000; \n    // Or, choose size via the command line: \n    if(args.length > 0) \n      size = new Integer(args[0]); \n    Key[] keys = new Key[size]; \n    WeakHashMap<Key,Value> map = \n      new WeakHashMap<Key,Value>(); \n    for(int i = 0; i < size; i++) { \n      Key k = new Key(Integer.toString(i)); \n      Value v = new Value(Integer.toString(i)); \n      if(i % 3 == 0) \n        keys[i] = k; // Save as \"real\" references \n      map.put(k, v); \n    } \n    System.gc();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "b9eb5cbddf5506c3f2be39c4d6a25f8a",
        "type": "source_code",
        "text": "Vector<String> v = \n      new Vector<String>(Countries.names(10)); \n    Enumeration<String> e = v.elements(); \n    while(e.hasMoreElements()) \n      System.out.print(e.nextElement() + \", \"); \n    // Produce an Enumeration from a Collection: \n    e = Collections.enumeration(new ArrayList<String>());",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "b3062ce244bc20197db6e042ce0451ff",
        "type": "source_code",
        "text": "Stack<String> stack = new Stack<String>(); \n    for(Month m : Month.values()) \n      stack.push(m.toString()); \n    print(\"stack = \" + stack); \n    // Treating a stack as a Vector: \n    stack.addElement(\"The last line\"); \n    print(\"element 5 = \" + stack.elementAt(5)); \n    print(\"popping elements:\"); \n    while(!stack.empty()) \n      printnb(stack.pop() + \" \");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "8a53196bcacf226c4ad7a7d8bc74904d",
        "type": "source_code",
        "text": "// Using a LinkedList as a Stack: \n    LinkedList<String> lstack = new LinkedList<String>(); \n    for(Month m : Month.values()) \n      lstack.addFirst(m.toString()); \n    print(\"lstack = \" + lstack); \n    while(!lstack.isEmpty()) \n      printnb(lstack.removeFirst() + \" \");",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "457d481613a4d011bd4c71b6a137c33a",
        "type": "source_code",
        "text": "// Using the Stack class from \n    // the Holding Your Objects Chapter: \n    net.mindview.util.Stack<String> stack2 = \n      new net.mindview.util.Stack<String>(); \n    for(Month m : Month.values()) \n      stack2.push(m.toString());",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "e35709b73e756f7b5965c8c8513e25f2",
        "type": "source_code",
        "text": "print(\"stack2 = \" + stack2); \n    while(!stack2.empty()) \n      printnb(stack2.pop() + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "70a31de3168ac47a4bed14084c30e776",
        "type": "source_code",
        "text": "print(\"bits: \" + b); \n    StringBuilder bbits = new StringBuilder(); \n    for(int j = 0; j < b.size() ; j++) \n      bbits.append(b.get(j) ? \"1\" : \"0\"); \n    print(\"bit pattern: \" + bbits);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "086b617435698d4f482d38a53e0ac566",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    // Take the LSB of nextInt(): \n    byte bt = (byte)rand.nextInt(); \n    BitSet bb = new BitSet(); \n    for(int i = 7; i >= 0; i--) \n      if(((1 << i) &  bt) != 0) \n        bb.set(i); \n      else \n        bb.clear(i); \n    print(\"byte value: \" + bt); \n    printBitSet(bb);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "cbbcd43b291d41a42b46426e2cdaf710",
        "type": "source_code",
        "text": "short st = (short)rand.nextInt(); \n    BitSet bs = new BitSet(); \n    for(int i = 15; i >= 0; i--) \n      if(((1 << i) &  st) != 0) \n        bs.set(i); \n      else \n        bs.clear(i); \n    print(\"short value: \" + st); \n    printBitSet(bs);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "498a3d3e8a38735948dd12f1e04d3b41",
        "type": "source_code",
        "text": "int it = rand.nextInt(); \n    BitSet bi = new BitSet(); \n    for(int i = 31; i >= 0; i--) \n      if(((1 << i) &  it) != 0) \n        bi.set(i); \n      else \n        bi.clear(i); \n    print(\"int value: \" + it); \n    printBitSet(bi);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "584b6b36de49d5060ae4be1d097a576d",
        "type": "source_code",
        "text": "// Test bitsets >= 64 bits: \n    BitSet b127 = new BitSet(); \n    b127.set(127); \n    print(\"set bit 127: \" + b127); \n    BitSet b255 = new BitSet(65); \n    b255.set(255); \n    print(\"set bit 255: \" + b255); \n    BitSet b1023 = new BitSet(512); \n    b1023.set(1023); \n    b1023.set(1024); \n    print(\"set bit 1023: \" + b1023);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "48819257d25ac6b392c8ecdc6d44ce44",
        "type": "source_code",
        "text": "File path = new File(\".\"); \n    String[] list; \n    if(args.length == 0) \n      list = path.list(); \n    else \n      list = path.list(new DirFilter(args[0])); \n    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); \n    for(String dirItem : list) \n      System.out.println(dirItem);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "d7c83682ff05b67e307299c595633c85",
        "type": "source_code",
        "text": "pattern = Pattern.compile(regex);",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "754ce78a12b3ee388d385b2cc2e72085",
        "type": "source_code",
        "text": "return pattern.matcher(name).matches();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d873ac5d88a71182293060f77761e0cf",
        "type": "source_code",
        "text": "// Creation of anonymous inner class: \n    return new FilenameFilter() { \n      private Pattern pattern = Pattern.compile(regex); \n      public boolean accept(File dir, String name) { \n        return pattern.matcher(name).matches(); \n      } \n    }; // End of anonymous inner class",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "d45390000828beaf0327ec49f427f840",
        "type": "source_code",
        "text": "File path = new File(\".\"); \n    String[] list; \n    if(args.length == 0) \n      list = path.list(); \n    else \n      list = path.list(filter(args[0])); \n    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); \n    for(String dirItem : list) \n      System.out.println(dirItem);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "bae0a2e6bdc30781099c1adb8b3d2eae",
        "type": "source_code",
        "text": "File path = new File(\".\"); \n    String[] list; \n    if(args.length == 0) \n      list = path.list(); \n    else",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f8753870ee39df4b8359f07852d45998",
        "type": "source_code",
        "text": "list = path.list(new FilenameFilter() { \n        private Pattern pattern = Pattern.compile(args[0]); \n        public boolean accept(File dir, String name) { \n          return pattern.matcher(name).matches(); \n        } \n      }); \n    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); \n    for(String dirItem : list) \n      System.out.println(dirItem);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "61cc1967df164cb29bcb8180fbb20db6",
        "type": "source_code",
        "text": "return dir.listFiles(new FilenameFilter() { \n      private Pattern pattern = Pattern.compile(regex); \n      public boolean accept(File dir, String name) { \n        return pattern.matcher( \n          new File(name).getName()).matches(); \n      } \n    });",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "389f3aa1573621416e77181246980c74",
        "type": "source_code",
        "text": "return local(new File(path), regex);",
        "programming_language": "Lasso",
        "weight": 0.0
    },
    {
        "id": "f904dbd127c988f595c0dda353b81c5d",
        "type": "source_code",
        "text": "public List<File> files = new ArrayList<File>(); \n    public List<File> dirs = new ArrayList<File>(); \n    // The default iterable element is the file list: \n    public Iterator<File> iterator() { \n      return files.iterator(); \n    } \n    void addAll(TreeInfo other) { \n      files.addAll(other.files); \n      dirs.addAll(other.dirs); \n    } \n    public String toString() { \n      return \"dirs: \" + PPrint.pformat(dirs) + \n        \"\\n\\nfiles: \" + PPrint.pformat(files); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "d64f02801687697c5cf26186aa1750aa",
        "type": "source_code",
        "text": "return recurseDirs(new File(start), regex);",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "1dd39ca35737d6767440b09bbd546b02",
        "type": "source_code",
        "text": "return recurseDirs(start, regex);",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "c1f0bd08e35e0b6d3dea2506cd246384",
        "type": "source_code",
        "text": "return recurseDirs(start, \".*\");",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "95a6fdd46aa33836d76bb70cf27fbe39",
        "type": "source_code",
        "text": "return recurseDirs(new File(start), \".*\");",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "2029967eb70c6ed6766eaa70e9cb93c2",
        "type": "source_code",
        "text": "TreeInfo result = new TreeInfo(); \n    for(File item : startDir.listFiles()) { \n      if(item.isDirectory()) { \n        result.dirs.add(item); \n        result.addAll(recurseDirs(item, regex)); \n      } else // Regular file \n        if(item.getName().matches(regex)) \n          result.files.add(item); \n    } \n    return result;",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "ecd8b2457d2764c3485e1c772c8c888c",
        "type": "source_code",
        "text": "if(args.length == 0) \n      System.out.println(walk(\".\")); \n    else \n      for(String arg : args) \n       System.out.println(walk(arg));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1dab3fb47f902e6866c73fdb660fb21c",
        "type": "source_code",
        "text": "if(c.size() == 0) return \"[]\"; \n    StringBuilder result = new StringBuilder(\"[\"); \n    for(Object elem : c) { \n      if(c.size() != 1) \n        result.append(\"\\n  \"); \n      result.append(elem); \n    } \n    if(c.size() != 1) \n      result.append(\"\\n\"); \n    result.append(\"]\"); \n    return result.toString();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0b4a701bf9a0924009f8194a6565bd96",
        "type": "source_code",
        "text": "System.out.println(pformat(c));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "73c03de4d6adc034a3e8db079ebb06d9",
        "type": "source_code",
        "text": "System.out.println(pformat(Arrays.asList(c)));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c0983edc13d6357e67918b1a9565609e",
        "type": "source_code",
        "text": "// All directories: \n    PPrint.pprint(Directory.walk(\".\").dirs); \n    // All files beginning with \u2018T\u2019 \n    for(File file : Directory.local(\".\", \"T.*\")) \n      print(file); \n    print(\"----------------------\"); \n    // All Java files beginning with \u2018T\u2019: \n    for(File file : Directory.walk(\".\", \"T.*\\\\.java\")) \n      print(file); \n    print(\"======================\"); \n    // Class files containing \"Z\" or \"z\": \n    for(File file : Directory.walk(\".\",\".*[Zz].*\\\\.class\")) \n      print(file);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "42ad324ff125c69fb25eddc52a5b8806",
        "type": "source_code",
        "text": "void process(File file);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "09c74c92f4914b4a220aa8bcb4c52195",
        "type": "source_code",
        "text": "this.strategy = strategy; \n    this.ext = ext;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b91492c6db85dbacfaf89a50baabdea1",
        "type": "source_code",
        "text": "try { \n      if(args.length == 0) \n        processDirectoryTree(new File(\".\")); \n      else \n        for(String arg : args) {",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "77cf3db4cb3ed287a1dc1068a992a629",
        "type": "source_code",
        "text": "File fileArg = new File(arg); \n          if(fileArg.isDirectory()) \n            processDirectoryTree(fileArg); \n          else { \n            // Allow user to leave off extension: \n            if(!arg.endsWith(\".\" + ext)) \n              arg += \".\" + ext; \n            strategy.process( \n              new File(arg).getCanonicalFile()); \n          } \n        } \n    } catch(IOException e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "130ebee039b04882a2c57501609d0b81",
        "type": "source_code",
        "text": "for(File file : Directory.walk( \n        root.getAbsolutePath(), \".*\\\\.\" + ext)) \n      strategy.process(file.getCanonicalFile());",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "0f01789ddc7295a040cb7b124db42927",
        "type": "source_code",
        "text": "new ProcessFiles(new ProcessFiles.Strategy() { \n      public void process(File file) { \n        System.out.println(file); \n      } \n    }, \"java\").start(args);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d12d872c7357e1a49e05c2a598b6be6a",
        "type": "source_code",
        "text": "System.err.println( \n      \"Usage:MakeDirectories path1 ...\\n\" + \n      \"Creates each path\\n\" + \n      \"Usage:MakeDirectories -d path1 ...\\n\" + \n      \"Deletes each path\\n\" + \n      \"Usage:MakeDirectories -r path1 path2\\n\" + \n      \"Renames from path1 to path2\"); \n    System.exit(1);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "01616bc321998610236f5adfdaea240b",
        "type": "source_code",
        "text": "System.out.println( \n      \"Absolute path: \" + f.getAbsolutePath() + \n      \"\\n Can read: \" + f.canRead() + \n      \"\\n Can write: \" + f.canWrite() + \n      \"\\n getName: \" + f.getName() + \n      \"\\n getParent: \" + f.getParent() + \n      \"\\n getPath: \" + f.getPath() + \n      \"\\n length: \" + f.length() + \n      \"\\n lastModified: \" + f.lastModified()); \n    if(f.isFile()) \n      System.out.println(\"It\u2019s a file\"); \n    else if(f.isDirectory()) \n      System.out.println(\"It\u2019s a directory\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "35b0c379d25555dfee32c8f8651f5f54",
        "type": "source_code",
        "text": "if(args.length < 1) usage(); \n    if(args[0].equals(\"-r\")) { \n      if(args.length != 3) usage(); \n      File \n        old = new File(args[1]), \n        rname = new File(args[2]); \n      old.renameTo(rname); \n      fileData(old); \n      fileData(rname); \n      return; // Exit main \n    } \n    int count = 0; \n    boolean del = false; \n    if(args[0].equals(\"-d\")) { \n      count++; \n      del = true; \n    } \n    count--; \n    while(++count < args.length) { \n      File f = new File(args[count]); \n      if(f.exists()) { \n        System.out.println(f + \" exists\"); \n        if(del) { \n          System.out.println(\"deleting...\" + f); \n          f.delete(); \n        } \n      } \n      else { // Doesn\u2019t exist \n        if(!del) { \n          f.mkdirs();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "8d2a1e48c2f930ee1b40e3a6253863e9",
        "type": "source_code",
        "text": "System.out.println(\"created \" + f); \n        } \n      } \n      fileData(f); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d0e38aac2744cdddd1c8b981f0e48766",
        "type": "source_code",
        "text": "and useful interfaces",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "93372e8d2fbe30f038d16a5006cb3853",
        "type": "source_code",
        "text": "RandomAccessFile",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "601b28ea203943872f86f4043b6966a4",
        "type": "source_code",
        "text": "// Reading input by lines: \n    BufferedReader in = new BufferedReader( \n      new FileReader(filename)); \n    String s; \n    StringBuilder sb = new StringBuilder(); \n    while((s = in.readLine())!= null) \n      sb.append(s + \"\\n\"); \n    in.close(); \n    return sb.toString();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "4b0e48291d81b4cdbe20b9ecea8d81c3",
        "type": "source_code",
        "text": "System.out.print(read(\"BufferedInputFile.java\"));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e25167b4ebac20c731db5e2d83b4b13b",
        "type": "source_code",
        "text": "StringReader in = new StringReader( \n      BufferedInputFile.read(\"MemoryInput.java\")); \n    int c; \n    while((c = in.read()) != -1) \n      System.out.print((char)c);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d50a3427c9fcf59834341ddb2ea63761",
        "type": "source_code",
        "text": "try { \n      DataInputStream in = new DataInputStream( \n        new ByteArrayInputStream( \n         BufferedInputFile.read( \n          \"FormattedMemoryInput.java\").getBytes())); \n      while(true) \n        System.out.print((char)in.readByte()); \n    } catch(EOFException e) { \n      System.err.println(\"End of stream\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "7043bf8b72c945bd71fc79c2cb204a0a",
        "type": "source_code",
        "text": "DataInputStream in = new DataInputStream( \n      new BufferedInputStream( \n        new FileInputStream(\"TestEOF.java\"))); \n    while(in.available() != 0)",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "87cae744d78f0de9e2e2af4ef661fa85",
        "type": "source_code",
        "text": "System.out.print((char)in.readByte());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f9b3d29c11152c7bc20fdb7f01c554b4",
        "type": "source_code",
        "text": "BufferedReader in = new BufferedReader( \n      new StringReader( \n        BufferedInputFile.read(\"BasicFileOutput.java\"))); \n    PrintWriter out = new PrintWriter( \n      new BufferedWriter(new FileWriter(file))); \n    int lineCount = 1; \n    String s; \n    while((s = in.readLine()) != null ) \n      out.println(lineCount++ + \": \" + s); \n    out.close(); \n    // Show the stored file: \n    System.out.println(BufferedInputFile.read(file));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "67e47aaade8a488ebb1ea4091ec1b23f",
        "type": "source_code",
        "text": "BufferedReader in = new BufferedReader( \n      new StringReader( \n       BufferedInputFile.read(\"FileOutputShortcut.java\"))); \n    // Here\u2019s the shortcut: \n    PrintWriter out = new PrintWriter(file); \n    int lineCount = 1; \n    String s; \n    while((s = in.readLine()) != null ) \n      out.println(lineCount++ + \": \" + s); \n    out.close(); \n    // Show the stored file: \n    System.out.println(BufferedInputFile.read(file));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "282e368dbcf3e0514b436db0bd9d4436",
        "type": "source_code",
        "text": "DataOutputStream out = new DataOutputStream( \n      new BufferedOutputStream( \n        new FileOutputStream(\"Data.txt\"))); \n    out.writeDouble(3.14159); \n    out.writeUTF(\"That was pi\"); \n    out.writeDouble(1.41413); \n    out.writeUTF(\"Square root of 2\"); \n    out.close(); \n    DataInputStream in = new DataInputStream(",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "88aee1a3d3883bbd792a5b3b1fd2e40b",
        "type": "source_code",
        "text": "new BufferedInputStream( \n        new FileInputStream(\"Data.txt\"))); \n    System.out.println(in.readDouble()); \n    // Only readUTF() will recover the \n    // Java-UTF String properly: \n    System.out.println(in.readUTF()); \n    System.out.println(in.readDouble()); \n    System.out.println(in.readUTF());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "24ad698deee03a52e7ecce25e95da19a",
        "type": "source_code",
        "text": "RandomAccessFile rf = new RandomAccessFile(file, \"r\"); \n    for(int i = 0; i < 7; i++) \n      System.out.println( \n        \"Value \" + i + \": \" + rf.readDouble()); \n    System.out.println(rf.readUTF()); \n    rf.close();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1b28d226105bcc0c333ab0aeeb3e3850",
        "type": "source_code",
        "text": "RandomAccessFile rf = new RandomAccessFile(file, \"rw\"); \n    for(int i = 0; i < 7; i++) \n      rf.writeDouble(i*1.414); \n    rf.writeUTF(\"The end of the file\"); \n    rf.close(); \n    display(); \n    rf = new RandomAccessFile(file, \"rw\"); \n    rf.seek(5*8); \n    rf.writeDouble(47.0001); \n    rf.close(); \n    display();",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "5ab902baf05927cd8839f57cfb66ca1e",
        "type": "source_code",
        "text": "StringBuilder sb = new StringBuilder(); \n    try { \n      BufferedReader in= new BufferedReader(new FileReader( \n        new File(fileName).getAbsoluteFile())); \n      try { \n        String s;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "aeb16145c44f9c91048540ec6de2dbb7",
        "type": "source_code",
        "text": "while((s = in.readLine()) != null) { \n          sb.append(s); \n          sb.append(\"\\n\"); \n        } \n      } finally { \n        in.close(); \n      } \n    } catch(IOException e) { \n      throw new RuntimeException(e); \n    } \n    return sb.toString();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "575054879f4402b3cf8b1043b17aa72f",
        "type": "source_code",
        "text": "try { \n      PrintWriter out = new PrintWriter( \n        new File(fileName).getAbsoluteFile()); \n      try { \n        out.print(text); \n      } finally { \n        out.close(); \n      } \n    } catch(IOException e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "525b32908e9fecdc3328d53da4db6fef",
        "type": "source_code",
        "text": "super(Arrays.asList(read(fileName).split(splitter))); \n    // Regular expression split() often leaves an empty \n    // String at the first position: \n    if(get(0).equals(\"\")) remove(0);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f94a81936f466f38d95ecf942b5317f5",
        "type": "source_code",
        "text": "this(fileName, \"\\n\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "61dbf08a72b9f63718c0830498e226b0",
        "type": "source_code",
        "text": "try { \n      PrintWriter out = new PrintWriter( \n        new File(fileName).getAbsoluteFile()); \n      try { \n        for(String item : this) \n          out.println(item); \n      } finally { \n        out.close(); \n      } \n    } catch(IOException e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "24b7165ee2274f12a81277fa3a61c891",
        "type": "source_code",
        "text": "String file = read(\"TextFile.java\"); \n    write(\"test.txt\", file); \n    TextFile text = new TextFile(\"test.txt\"); \n    text.write(\"test2.txt\"); \n    // Break into unique sorted list of words: \n    TreeSet<String> words = new TreeSet<String>( \n      new TextFile(\"TextFile.java\", \"\\\\W+\")); \n    // Display the capitalized words: \n    System.out.println(words.headSet(\"a\"));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "5fffa45d85c4d8b61d2078b8e5ddc711",
        "type": "source_code",
        "text": "BufferedInputStream bf = new BufferedInputStream( \n      new FileInputStream(bFile)); \n    try { \n      byte[] data = new byte[bf.available()];",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "acb9774a0ad94a59d56f0a8583593da9",
        "type": "source_code",
        "text": "bf.read(data); \n      return data; \n    } finally { \n      bf.close(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a3c00e18a9adcc1df3a67a96e4fb968a",
        "type": "source_code",
        "text": "return read(new File(bFile).getAbsoluteFile());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "74eed35681086fac8208d00b76159e67",
        "type": "source_code",
        "text": "BufferedReader stdin = new BufferedReader( \n      new InputStreamReader(System.in)); \n    String s;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a96546b7c0ebe2adc036b946e7ed629e",
        "type": "source_code",
        "text": "while((s = stdin.readLine()) != null && s.length()!= 0) \n      System.out.println(s); \n    // An empty line or Ctrl-Z terminates the program",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f5ebf055354ba50e344364bd1373533a",
        "type": "source_code",
        "text": "PrintWriter out = new PrintWriter(System.out, true); \n    out.println(\"Hello, world\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0de58a6563400a58035883f45d3c4434",
        "type": "source_code",
        "text": "PrintStream console = System.out; \n    BufferedInputStream in = new BufferedInputStream( \n      new FileInputStream(\"Redirecting.java\")); \n    PrintStream out = new PrintStream( \n      new BufferedOutputStream( \n        new FileOutputStream(\"test.out\"))); \n    System.setIn(in); \n    System.setOut(out); \n    System.setErr(out); \n    BufferedReader br = new BufferedReader( \n      new InputStreamReader(System.in)); \n    String s; \n    while((s = br.readLine()) != null) \n      System.out.println(s); \n    out.close(); // Remember this! \n    System.setOut(console);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f8d54397177e5941e53013d803eb225f",
        "type": "source_code",
        "text": "boolean err = false; \n    try { \n      Process process = \n        new ProcessBuilder(command.split(\" \")).start(); \n      BufferedReader results = new BufferedReader( \n        new InputStreamReader(process.getInputStream())); \n      String s; \n      while((s = results.readLine())!= null) \n        System.out.println(s); \n      BufferedReader errors = new BufferedReader( \n        new InputStreamReader(process.getErrorStream())); \n      // Report errors and return nonzero value \n      // to calling process if there are problems: \n      while((s = errors.readLine())!= null) { \n        System.err.println(s); \n        err = true; \n      } \n    } catch(Exception e) { \n      // Compensate for Windows 2000, which throws an \n      // exception for the default command line: \n      if(!command.startsWith(\"CMD /C\")) \n        command(\"CMD /C \" + command); \n      else \n        throw new RuntimeException(e); \n    } \n    if(err) \n      throw new OSExecuteException(\"Errors executing \" + \n        command);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "319c43c48317c2e43c55fd04a56c1d3c",
        "type": "source_code",
        "text": "OSExecute.command(\"javap OSExecuteDemo\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d0075c5ed91dbfdd491394425cf33b17",
        "type": "source_code",
        "text": "public OSExecuteDemo(); \n    public static void main(java.lang.String[]);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dc50d99721f52ac94fac8e7fae933fa7",
        "type": "source_code",
        "text": "// Write a file: \n    FileChannel fc = \n      new FileOutputStream(\"data.txt\").getChannel(); \n    fc.write(ByteBuffer.wrap(\"Some text \".getBytes()));",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "c446accc8e97ed38a9d8c80698e039f6",
        "type": "source_code",
        "text": "fc.close(); \n    // Add to the end of the file: \n    fc = \n      new RandomAccessFile(\"data.txt\", \"rw\").getChannel(); \n    fc.position(fc.size()); // Move to the end \n    fc.write(ByteBuffer.wrap(\"Some more\".getBytes())); \n    fc.close(); \n    // Read the file: \n    fc = new FileInputStream(\"data.txt\").getChannel(); \n    ByteBuffer buff = ByteBuffer.allocate(BSIZE); \n    fc.read(buff); \n    buff.flip(); \n    while(buff.hasRemaining()) \n      System.out.print((char)buff.get());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "8bd8b9cdf84ca719c5532d4f38f97508",
        "type": "source_code",
        "text": "if(args.length != 2) { \n      System.out.println(\"arguments: sourcefile destfile\"); \n      System.exit(1); \n    } \n    FileChannel \n      in = new FileInputStream(args[0]).getChannel(), \n      out = new FileOutputStream(args[1]).getChannel(); \n    ByteBuffer buffer = ByteBuffer.allocate(BSIZE); \n    while(in.read(buffer) != -1) { \n      buffer.flip(); // Prepare for writing \n      out.write(buffer); \n      buffer.clear();  // Prepare for reading \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4cff3704e7be4af046b986f54dcfa68f",
        "type": "source_code",
        "text": "if(args.length != 2) { \n      System.out.println(\"arguments: sourcefile destfile\"); \n      System.exit(1); \n    } \n    FileChannel \n      in = new FileInputStream(args[0]).getChannel(), \n      out = new FileOutputStream(args[1]).getChannel(); \n    in.transferTo(0, in.size(), out); \n    // Or: \n    // out.transferFrom(in, 0, in.size());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "9f4e3195f358e2ae0768bff418bf4914",
        "type": "source_code",
        "text": "FileChannel fc = \n      new FileOutputStream(\"data2.txt\").getChannel(); \n    fc.write(ByteBuffer.wrap(\"Some text\".getBytes())); \n    fc.close(); \n    fc = new FileInputStream(\"data2.txt\").getChannel(); \n    ByteBuffer buff = ByteBuffer.allocate(BSIZE); \n    fc.read(buff); \n    buff.flip(); \n    // Doesn\u2019t work: \n    System.out.println(buff.asCharBuffer()); \n    // Decode using this system\u2019s default Charset: \n    buff.rewind(); \n    String encoding = System.getProperty(\"file.encoding\"); \n    System.out.println(\"Decoded using \" + encoding + \": \" \n      + Charset.forName(encoding).decode(buff)); \n    // Or, we could encode with something that will print: \n    fc = new FileOutputStream(\"data2.txt\").getChannel(); \n    fc.write(ByteBuffer.wrap( \n      \"Some text\".getBytes(\"UTF-16BE\"))); \n    fc.close(); \n    // Now try reading again: \n    fc = new FileInputStream(\"data2.txt\").getChannel(); \n    buff.clear(); \n    fc.read(buff); \n    buff.flip(); \n    System.out.println(buff.asCharBuffer()); \n    // Use a CharBuffer to write through: \n    fc = new FileOutputStream(\"data2.txt\").getChannel(); \n    buff = ByteBuffer.allocate(24); // More than needed \n    buff.asCharBuffer().put(\"Some text\"); \n    fc.write(buff); \n    fc.close(); \n    // Read and display: \n    fc = new FileInputStream(\"data2.txt\").getChannel(); \n    buff.clear(); \n    fc.read(buff); \n    buff.flip(); \n    System.out.println(buff.asCharBuffer());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "e405499fe782a33daf9907bbff25250b",
        "type": "source_code",
        "text": "SortedMap<String,Charset> charSets = \n      Charset.availableCharsets(); \n    Iterator<String> it = charSets.keySet().iterator(); \n    while(it.hasNext()) { \n      String csName = it.next(); \n      printnb(csName); \n      Iterator aliases = \n        charSets.get(csName).aliases().iterator(); \n      if(aliases.hasNext()) \n        printnb(\": \"); \n      while(aliases.hasNext()) { \n        printnb(aliases.next()); \n        if(aliases.hasNext()) \n          printnb(\", \"); \n      } \n      print(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "129e99dcdcdaa4cd0c369e094cc353e4",
        "type": "source_code",
        "text": "ByteBuffer bb = ByteBuffer.allocate(BSIZE); \n    // Allocation automatically zeroes the ByteBuffer: \n    int i = 0; \n    while(i++ < bb.limit()) \n      if(bb.get() != 0) \n        print(\"nonzero\"); \n    print(\"i = \" + i); \n    bb.rewind(); \n    // Store and read a char array: \n    bb.asCharBuffer().put(\"Howdy!\"); \n    char c; \n    while((c = bb.getChar()) != 0) \n      printnb(c + \" \"); \n    print(); \n    bb.rewind(); \n    // Store and read a short: \n    bb.asShortBuffer().put((short)471142); \n    print(bb.getShort()); \n    bb.rewind(); \n    // Store and read an int: \n    bb.asIntBuffer().put(99471142); \n    print(bb.getInt()); \n    bb.rewind(); \n    // Store and read a long: \n    bb.asLongBuffer().put(99471142); \n    print(bb.getLong()); \n    bb.rewind(); \n    // Store and read a float: \n    bb.asFloatBuffer().put(99471142); \n    print(bb.getFloat()); \n    bb.rewind(); \n    // Store and read a double: \n    bb.asDoubleBuffer().put(99471142); \n    print(bb.getDouble()); \n    bb.rewind();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "fe2c210458261a228415a43d9c484771",
        "type": "source_code",
        "text": "ByteBuffer bb = ByteBuffer.allocate(BSIZE); \n    IntBuffer ib = bb.asIntBuffer(); \n    // Store an array of int: \n    ib.put(new int[]{ 11, 42, 47, 99, 143, 811, 1016 }); \n    // Absolute location read and write: \n    System.out.println(ib.get(3)); \n    ib.put(3, 1811); \n    // Setting a new limit before rewinding the buffer. \n    ib.flip(); \n    while(ib.hasRemaining()) { \n      int i = ib.get(); \n      System.out.println(i); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "a8ab5134d23292edc0aa372d943220d8",
        "type": "source_code",
        "text": "ByteBuffer bb = ByteBuffer.wrap( \n      new byte[]{ 0, 0, 0, 0, 0, 0, 0, \u2018a\u2019 }); \n    bb.rewind(); \n    printnb(\"Byte Buffer \"); \n    while(bb.hasRemaining()) \n      printnb(bb.position()+ \" -> \" + bb.get() + \", \"); \n    print(); \n    CharBuffer cb = \n      ((ByteBuffer)bb.rewind()).asCharBuffer(); \n    printnb(\"Char Buffer \"); \n    while(cb.hasRemaining()) \n      printnb(cb.position() + \" -> \" + cb.get() + \", \"); \n    print(); \n    FloatBuffer fb = \n      ((ByteBuffer)bb.rewind()).asFloatBuffer(); \n    printnb(\"Float Buffer \"); \n    while(fb.hasRemaining()) \n      printnb(fb.position()+ \" -> \" + fb.get() + \", \"); \n    print(); \n    IntBuffer ib = \n      ((ByteBuffer)bb.rewind()).asIntBuffer(); \n    printnb(\"Int Buffer \"); \n    while(ib.hasRemaining()) \n      printnb(ib.position()+ \" -> \" + ib.get() + \", \"); \n    print(); \n    LongBuffer lb = \n      ((ByteBuffer)bb.rewind()).asLongBuffer(); \n    printnb(\"Long Buffer \"); \n    while(lb.hasRemaining()) \n      printnb(lb.position()+ \" -> \" + lb.get() + \", \"); \n    print(); \n    ShortBuffer sb = \n      ((ByteBuffer)bb.rewind()).asShortBuffer(); \n    printnb(\"Short Buffer \"); \n    while(sb.hasRemaining()) \n      printnb(sb.position()+ \" -> \" + sb.get() + \", \"); \n    print(); \n    DoubleBuffer db = \n      ((ByteBuffer)bb.rewind()).asDoubleBuffer(); \n    printnb(\"Double Buffer \"); \n    while(db.hasRemaining()) \n      printnb(db.position()+ \" -> \" + db.get() + \", \");",
        "programming_language": "ECL",
        "weight": 0.0
    },
    {
        "id": "501271b36349343782e2b871f672e3c2",
        "type": "source_code",
        "text": "ByteBuffer bb = ByteBuffer.wrap(new byte[12]); \n    bb.asCharBuffer().put(\"abcdef\"); \n    print(Arrays.toString(bb.array())); \n    bb.rewind(); \n    bb.order(ByteOrder.BIG_ENDIAN); \n    bb.asCharBuffer().put(\"abcdef\"); \n    print(Arrays.toString(bb.array())); \n    bb.rewind(); \n    bb.order(ByteOrder.LITTLE_ENDIAN); \n    bb.asCharBuffer().put(\"abcdef\"); \n    print(Arrays.toString(bb.array()));",
        "programming_language": "Component Pascal",
        "weight": 0.0
    },
    {
        "id": "ba27fd9c2833146ad30ba8270c4e32eb",
        "type": "source_code",
        "text": "while(buffer.hasRemaining()) { \n      buffer.mark(); \n      char c1 = buffer.get(); \n      char c2 = buffer.get(); \n      buffer.reset(); \n      buffer.put(c2).put(c1); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a9481fea623ab0eee316eb549e9425a2",
        "type": "source_code",
        "text": "char[] data = \"UsingBuffers\".toCharArray(); \n    ByteBuffer bb = ByteBuffer.allocate(data.length * 2); \n    CharBuffer cb = bb.asCharBuffer(); \n    cb.put(data); \n    print(cb.rewind()); \n    symmetricScramble(cb); \n    print(cb.rewind()); \n    symmetricScramble(cb); \n    print(cb.rewind());",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "e3d9d79f0d7ce67d0070d19d9d76cbdf",
        "type": "source_code",
        "text": "MappedByteBuffer out = \n      new RandomAccessFile(\"test.dat\", \"rw\").getChannel() \n      .map(FileChannel.MapMode.READ_WRITE, 0, length); \n    for(int i = 0; i < length; i++) \n      out.put((byte)\u2019x\u2019); \n    print(\"Finished writing\"); \n    for(int i = length/2; i < length/2 + 6; i++) \n      printnb((char)out.get(i));",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "34f562b843c5c371c83d63f422abcd91",
        "type": "source_code",
        "text": "private String name; \n    public Tester(String name) { this.name = name; } \n    public void runTest() { \n      System.out.print(name + \": \"); \n      try { \n        long start = System.nanoTime(); \n        test(); \n        double duration = System.nanoTime() - start; \n        System.out.format(\"%.2f\\n\", duration/1.0e9); \n      } catch(IOException e) { \n        throw new RuntimeException(e); \n      }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1a09b402ca90d958df711b8b733f98c0",
        "type": "source_code",
        "text": "} \n    public abstract void test() throws IOException;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "770f7d38d837ac6e0b810660509ddaca",
        "type": "source_code",
        "text": "new Tester(\"Stream Write\") { \n      public void test() throws IOException { \n        DataOutputStream dos = new DataOutputStream( \n          new BufferedOutputStream( \n            new FileOutputStream(new File(\"temp.tmp\")))); \n        for(int i = 0; i < numOfInts; i++) \n          dos.writeInt(i); \n        dos.close(); \n      } \n    }, \n    new Tester(\"Mapped Write\") { \n      public void test() throws IOException { \n        FileChannel fc = \n          new RandomAccessFile(\"temp.tmp\", \"rw\") \n          .getChannel(); \n        IntBuffer ib = fc.map( \n          FileChannel.MapMode.READ_WRITE, 0, fc.size()) \n          .asIntBuffer(); \n        for(int i = 0; i < numOfInts; i++) \n          ib.put(i); \n        fc.close(); \n      } \n    }, \n    new Tester(\"Stream Read\") { \n      public void test() throws IOException { \n        DataInputStream dis = new DataInputStream( \n          new BufferedInputStream( \n            new FileInputStream(\"temp.tmp\"))); \n        for(int i = 0; i < numOfInts; i++) \n          dis.readInt(); \n        dis.close(); \n      } \n    }, \n    new Tester(\"Mapped Read\") { \n      public void test() throws IOException { \n        FileChannel fc = new FileInputStream( \n          new File(\"temp.tmp\")).getChannel(); \n        IntBuffer ib = fc.map( \n          FileChannel.MapMode.READ_ONLY, 0, fc.size()) \n          .asIntBuffer(); \n        while(ib.hasRemaining()) \n          ib.get(); \n        fc.close(); \n      } \n    }, \n    new Tester(\"Stream Read/Write\") { \n      public void test() throws IOException { \n        RandomAccessFile raf = new RandomAccessFile( \n          new File(\"temp.tmp\"), \"rw\"); \n        raf.writeInt(1); \n        for(int i = 0; i < numOfUbuffInts; i++) { \n          raf.seek(raf.length() - 4); \n          raf.writeInt(raf.readInt()); \n        } \n        raf.close(); \n      } \n    }, \n    new Tester(\"Mapped Read/Write\") { \n      public void test() throws IOException {",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "5c24b4db36454adbb4e9d1fa2586561a",
        "type": "source_code",
        "text": "FileChannel fc = new RandomAccessFile( \n          new File(\"temp.tmp\"), \"rw\").getChannel(); \n        IntBuffer ib = fc.map( \n          FileChannel.MapMode.READ_WRITE, 0, fc.size()) \n          .asIntBuffer(); \n        ib.put(0); \n        for(int i = 1; i < numOfUbuffInts; i++) \n          ib.put(ib.get(i - 1)); \n        fc.close(); \n      } \n    }",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "561a0bbd51f63edccd68620fe579df25",
        "type": "source_code",
        "text": "for(Tester test : tests) \n      test.runTest();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "449275412ab450e8a6d2796baa61859c",
        "type": "source_code",
        "text": "FileOutputStream fos= new FileOutputStream(\"file.txt\"); \n    FileLock fl = fos.getChannel().tryLock(); \n    if(fl != null) { \n      System.out.println(\"Locked File\"); \n      TimeUnit.MILLISECONDS.sleep(100); \n      fl.release(); \n      System.out.println(\"Released Lock\"); \n    } \n    fos.close();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "be1106168f97e9afdd39ffb61f63b1d3",
        "type": "source_code",
        "text": "fc = \n      new RandomAccessFile(\"test.dat\", \"rw\").getChannel(); \n    MappedByteBuffer out = \n      fc.map(FileChannel.MapMode.READ_WRITE, 0, LENGTH); \n    for(int i = 0; i < LENGTH; i++) \n      out.put((byte)\u2019x\u2019); \n    new LockAndModify(out, 0, 0 + LENGTH/3); \n    new LockAndModify(out, LENGTH/2, LENGTH/2 + LENGTH/4);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "9ccbdb29ea3fab780d386b4c1ab99b0a",
        "type": "source_code",
        "text": "private ByteBuffer buff; \n    private int start, end; \n    LockAndModify(ByteBuffer mbb, int start, int end) { \n      this.start = start; \n      this.end = end; \n      mbb.limit(end); \n      mbb.position(start); \n      buff = mbb.slice(); \n      start(); \n    } \n    public void run() { \n      try { \n        // Exclusive lock with no overlap: \n        FileLock fl = fc.lock(start, end, false); \n        System.out.println(\"Locked: \"+ start +\" to \"+ end); \n        // Perform modification: \n        while(buff.position() < buff.limit() - 1) \n          buff.put((byte)(buff.get() + 1)); \n        fl.release(); \n        System.out.println(\"Released: \"+start+\" to \"+ end); \n      } catch(IOException e) { \n        throw new RuntimeException(e); \n      } \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "55d5245fdfd93202056c85367b928794",
        "type": "source_code",
        "text": "if(args.length == 0) {",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6603d796e850d59c0591d36bf7a0f0af",
        "type": "source_code",
        "text": "System.out.println( \n        \"Usage: \\nGZIPcompress file\\n\" + \n        \"\\tUses GZIP compression to compress \" + \n        \"the file to test.gz\"); \n      System.exit(1); \n    } \n    BufferedReader in = new BufferedReader( \n      new FileReader(args[0])); \n    BufferedOutputStream out = new BufferedOutputStream( \n      new GZIPOutputStream( \n        new FileOutputStream(\"test.gz\"))); \n    System.out.println(\"Writing file\"); \n    int c; \n    while((c = in.read()) != -1) \n      out.write(c); \n    in.close(); \n    out.close(); \n    System.out.println(\"Reading file\"); \n    BufferedReader in2 = new BufferedReader( \n      new InputStreamReader(new GZIPInputStream( \n        new FileInputStream(\"test.gz\")))); \n    String s; \n    while((s = in2.readLine()) != null) \n      System.out.println(s);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "402b5406e99fcc517e11288934834f08",
        "type": "source_code",
        "text": "FileOutputStream f = new FileOutputStream(\"test.zip\"); \n    CheckedOutputStream csum =",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d5c97b638fbf126bb4064222b74436d5",
        "type": "source_code",
        "text": "new CheckedOutputStream(f, new Adler32()); \n     ZipOutputStream zos = new ZipOutputStream(csum); \n     BufferedOutputStream out = \n      new BufferedOutputStream(zos); \n    zos.setComment(\"A test of Java Zipping\"); \n    // No corresponding getComment(), though. \n    for(String arg : args) { \n      print(\"Writing file \" + arg); \n      BufferedReader in = \n        new BufferedReader(new FileReader(arg)); \n      zos.putNextEntry(new ZipEntry(arg)); \n      int c; \n      while((c = in.read()) != -1) \n        out.write(c); \n      in.close(); \n      out.flush(); \n    } \n    out.close(); \n    // Checksum valid only after the file has been closed! \n    print(\"Checksum: \" + csum.getChecksum().getValue()); \n    // Now extract the files: \n    print(\"Reading file\"); \n    FileInputStream fi = new FileInputStream(\"test.zip\"); \n    CheckedInputStream csumi = \n      new CheckedInputStream(fi, new Adler32()); \n    ZipInputStream in2 = new ZipInputStream(csumi); \n    BufferedInputStream bis = new BufferedInputStream(in2); \n    ZipEntry ze; \n    while((ze = in2.getNextEntry()) != null) { \n      print(\"Reading file \" + ze); \n      int x; \n      while((x = bis.read()) != -1) \n        System.out.write(x); \n    } \n    if(args.length == 1) \n    print(\"Checksum: \" + csumi.getChecksum().getValue()); \n    bis.close(); \n    // Alternative way to open and read Zip files: \n    ZipFile zf = new ZipFile(\"test.zip\"); \n    Enumeration e = zf.entries(); \n    while(e.hasMoreElements()) { \n      ZipEntry ze2 = (ZipEntry)e.nextElement(); \n      print(\"File: \" + ze2); \n      // ... and extract the data as before \n    } \n    /* if(args.length == 1) */",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ec8653b0e14e849fecc0b3bdfac47cd6",
        "type": "source_code",
        "text": "new Data(rand.nextInt(10)), \n    new Data(rand.nextInt(10)), \n    new Data(rand.nextInt(10))",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "52535fbdd10cbe6f93732b46c8da8620",
        "type": "source_code",
        "text": "print(\"Worm constructor: \" + i); \n    c = x; \n    if(--i > 0) \n      next = new Worm(i, (char)(x + 1));",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "87a6a40c49fea4b28920f31047ac33df",
        "type": "source_code",
        "text": "print(\"Default constructor\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "afc6ea7da304b9b0ca7ddba46d6bdace",
        "type": "source_code",
        "text": "StringBuilder result = new StringBuilder(\":\"); \n    result.append(c); \n    result.append(\"(\"); \n    for(Data dat : d) \n      result.append(dat); \n    result.append(\")\"); \n    if(next != null) \n      result.append(next); \n    return result.toString();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "74e6ced89353408075b9f6815b15e983",
        "type": "source_code",
        "text": "Worm w = new Worm(6, \u2018a\u2019); \n    print(\"w = \" + w); \n    ObjectOutputStream out = new ObjectOutputStream( \n      new FileOutputStream(\"worm.out\")); \n    out.writeObject(\"Worm storage\\n\"); \n    out.writeObject(w); \n    out.close(); // Also flushes output \n    ObjectInputStream in = new ObjectInputStream( \n      new FileInputStream(\"worm.out\")); \n    String s = (String)in.readObject();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2a5b6ab4898c63e046e1a63d5a592f08",
        "type": "source_code",
        "text": "Worm w2 = (Worm)in.readObject(); \n    print(s + \"w2 = \" + w2); \n    ByteArrayOutputStream bout = \n      new ByteArrayOutputStream(); \n    ObjectOutputStream out2 = new ObjectOutputStream(bout); \n    out2.writeObject(\"Worm storage\\n\"); \n    out2.writeObject(w); \n    out2.flush(); \n    ObjectInputStream in2 = new ObjectInputStream( \n      new ByteArrayInputStream(bout.toByteArray())); \n    s = (String)in2.readObject(); \n    Worm w3 = (Worm)in2.readObject(); \n    print(s + \"w3 = \" + w3);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "622c221e1c11766c41a1d801a65252d7",
        "type": "source_code",
        "text": "ObjectOutput out = new ObjectOutputStream( \n      new FileOutputStream(\"X.file\")); \n    Alien quellek = new Alien(); \n    out.writeObject(quellek);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "badacfd2dcdd33c053c7551f6c6f7c4e",
        "type": "source_code",
        "text": "ObjectInputStream in = new ObjectInputStream( \n      new FileInputStream(new File(\"..\", \"X.file\"))); \n    Object mystery = in.readObject(); \n    System.out.println(mystery.getClass());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a66aafb00c9ed62c038fd719e1b69f44",
        "type": "source_code",
        "text": "print(\"Blip1 Constructor\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "157bd2069048c9f2bd0bccd30cb998eb",
        "type": "source_code",
        "text": "throws IOException { \n    print(\"Blip1.writeExternal\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bb4e24cd049985c1bc42611e3e939bf7",
        "type": "source_code",
        "text": "throws IOException, ClassNotFoundException { \n    print(\"Blip1.readExternal\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1908bfdba685eafe556e2cb07dc126c3",
        "type": "source_code",
        "text": "print(\"Blip2 Constructor\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "596f4babb3f405060d4e1dc01f1aa1f6",
        "type": "source_code",
        "text": "throws IOException { \n    print(\"Blip2.writeExternal\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2cf0d6e2bb083d1d5b0a6bee60502693",
        "type": "source_code",
        "text": "throws IOException, ClassNotFoundException { \n    print(\"Blip2.readExternal\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2a8bccce8bd3dc2c4d77ee279f13f5f0",
        "type": "source_code",
        "text": "print(\"Constructing objects:\"); \n    Blip1 b1 = new Blip1(); \n    Blip2 b2 = new Blip2(); \n    ObjectOutputStream o = new ObjectOutputStream( \n      new FileOutputStream(\"Blips.out\")); \n    print(\"Saving objects:\"); \n    o.writeObject(b1);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "407ada06b0a9561b367e096e51b61eb7",
        "type": "source_code",
        "text": "o.writeObject(b2); \n    o.close(); \n    // Now get them back: \n    ObjectInputStream in = new ObjectInputStream( \n      new FileInputStream(\"Blips.out\")); \n    print(\"Recovering b1:\"); \n    b1 = (Blip1)in.readObject(); \n    // OOPS! Throws an exception:",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "584679e6fa809b01350eb7d53c2d94d3",
        "type": "source_code",
        "text": "print(\"Blip3 Constructor\"); \n    // s, i not initialized",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3d7a4557859680f1c4018302addc6e46",
        "type": "source_code",
        "text": "print(\"Blip3(String x, int a)\"); \n    s = x; \n    i = a; \n    // s & i initialized only in non-default constructor.",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "2695e7d4cb42e7943958dfd11d5c14c8",
        "type": "source_code",
        "text": "print(\"Blip3.writeExternal\"); \n    // You must do this: \n    out.writeObject(s); \n    out.writeInt(i);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1031d383105f7c32bdf1f42d1786d2d2",
        "type": "source_code",
        "text": "print(\"Blip3.readExternal\"); \n    // You must do this: \n    s = (String)in.readObject(); \n    i = in.readInt();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "3e5975571516633ad647b71b2758022a",
        "type": "source_code",
        "text": "print(\"Constructing objects:\"); \n    Blip3 b3 = new Blip3(\"A String \", 47); \n    print(b3); \n    ObjectOutputStream o = new ObjectOutputStream( \n      new FileOutputStream(\"Blip3.out\")); \n    print(\"Saving object:\"); \n    o.writeObject(b3); \n    o.close(); \n    // Now get it back: \n    ObjectInputStream in = new ObjectInputStream( \n      new FileInputStream(\"Blip3.out\")); \n    print(\"Recovering b3:\"); \n    b3 = (Blip3)in.readObject(); \n    print(b3);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "2015506f6075e485359a7759c78698ad",
        "type": "source_code",
        "text": "username = name; \n    password = pwd;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6998199818de058f010440e4e1625a1e",
        "type": "source_code",
        "text": "return \"logon info: \\n   username: \" + username + \n      \"\\n   date: \" + date + \"\\n   password: \" + password;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "be5b4b4d69c5908b05397f4abef5f4e4",
        "type": "source_code",
        "text": "Logon a = new Logon(\"Hulk\", \"myLittlePony\"); \n    print(\"logon a = \" + a); \n    ObjectOutputStream o = new ObjectOutputStream( \n      new FileOutputStream(\"Logon.out\")); \n    o.writeObject(a); \n    o.close(); \n    TimeUnit.SECONDS.sleep(1); // Delay \n    // Now get them back: \n    ObjectInputStream in = new ObjectInputStream( \n      new FileInputStream(\"Logon.out\"));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "379658e66510634c7f2ef0fccbad3cc3",
        "type": "source_code",
        "text": "print(\"Recovering object at \" + new Date()); \n    a = (Logon)in.readObject(); \n    print(\"logon a = \" + a);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "48c2156beb5b2697ebee2b90d10dee45",
        "type": "source_code",
        "text": "a = \"Not Transient: \" + aa; \n    b = \"Transient: \" + bb;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "60584824caea6a4afd9af335e8eeef00",
        "type": "source_code",
        "text": "stream.defaultWriteObject(); \n    stream.writeObject(b);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "66d1759771e97f932e329f2133a2fa65",
        "type": "source_code",
        "text": "stream.defaultReadObject(); \n    b = (String)stream.readObject();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "80e47d6f2cf22dc8f2cca2a3d6fc4efb",
        "type": "source_code",
        "text": "SerialCtl sc = new SerialCtl(\"Test1\", \"Test2\"); \n    System.out.println(\"Before:\\n\" + sc); \n    ByteArrayOutputStream buf= new ByteArrayOutputStream(); \n    ObjectOutputStream o = new ObjectOutputStream(buf); \n    o.writeObject(sc); \n    // Now get it back: \n    ObjectInputStream in = new ObjectInputStream( \n      new ByteArrayInputStream(buf.toByteArray())); \n    SerialCtl sc2 = (SerialCtl)in.readObject(); \n    System.out.println(\"After:\\n\" + sc2);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "aceb3e5d6ebb7e48efe2ce3f0476c90f",
        "type": "source_code",
        "text": "name = nm; \n    preferredHouse = h;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ac2541e2965c7abdc79ac8868e09f5cb",
        "type": "source_code",
        "text": "return name + \"[\" + super.toString() + \n      \"], \" + preferredHouse + \"\\n\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "adfee62276000f4c78a57a04ba966e7d",
        "type": "source_code",
        "text": "House house = new House(); \n    List<Animal> animals = new ArrayList<Animal>(); \n    animals.add(new Animal(\"Bosco the dog\", house)); \n    animals.add(new Animal(\"Ralph the hamster\", house)); \n    animals.add(new Animal(\"Molly the cat\", house)); \n    print(\"animals: \" + animals); \n    ByteArrayOutputStream buf1 = \n      new ByteArrayOutputStream(); \n    ObjectOutputStream o1 = new ObjectOutputStream(buf1); \n    o1.writeObject(animals); \n    o1.writeObject(animals); // Write a 2nd set \n    // Write to a different stream: \n    ByteArrayOutputStream buf2 = \n      new ByteArrayOutputStream(); \n    ObjectOutputStream o2 = new ObjectOutputStream(buf2); \n    o2.writeObject(animals); \n    // Now get them back: \n    ObjectInputStream in1 = new ObjectInputStream( \n      new ByteArrayInputStream(buf1.toByteArray())); \n    ObjectInputStream in2 = new ObjectInputStream( \n      new ByteArrayInputStream(buf2.toByteArray())); \n    List \n      animals1 = (List)in1.readObject(), \n      animals2 = (List)in1.readObject(), \n      animals3 = (List)in2.readObject(); \n    print(\"animals1: \" + animals1); \n    print(\"animals2: \" + animals2); \n    print(\"animals3: \" + animals3);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "5db8d342add4150df9dd0937ae231de0",
        "type": "source_code",
        "text": "xPos = xVal; \n    yPos = yVal; \n    dimension = dim;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5824391756364a45cb78a30efaec32ce",
        "type": "source_code",
        "text": "return getClass() + \n      \"color[\" + getColor() + \"] xPos[\" + xPos + \n      \"] yPos[\" + yPos + \"] dim[\" + dimension + \"]\\n\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "188a7de3e6c650b281a6b827f6c15cf3",
        "type": "source_code",
        "text": "int xVal = rand.nextInt(100); \n    int yVal = rand.nextInt(100); \n    int dim = rand.nextInt(100); \n    switch(counter++ % 3) { \n      default: \n      case 0: return new Circle(xVal, yVal, dim); \n      case 1: return new Square(xVal, yVal, dim); \n      case 2: return new Line(xVal, yVal, dim); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4008ba29c5d55d87a05341a09c05258f",
        "type": "source_code",
        "text": "super(xVal, yVal, dim);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5fd7a0e72e2f46cd15391e25ed082925",
        "type": "source_code",
        "text": "super(xVal, yVal, dim); \n    color = RED;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4008ba29c5d55d87a05341a09c05258f",
        "type": "source_code",
        "text": "super(xVal, yVal, dim);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0144ea6a05117e948c205a44698eeb91",
        "type": "source_code",
        "text": "List<Class<? extends Shape>> shapeTypes = \n      new ArrayList<Class<? extends Shape>>(); \n    // Add references to the class objects: \n    shapeTypes.add(Circle.class); \n    shapeTypes.add(Square.class); \n    shapeTypes.add(Line.class); \n    List<Shape> shapes = new ArrayList<Shape>(); \n    // Make some shapes:",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "aa89d9442e1a2d1b30423143a8bb662d",
        "type": "source_code",
        "text": "for(int i = 0; i < 10; i++) \n      shapes.add(Shape.randomFactory()); \n    // Set all the static colors to GREEN: \n    for(int i = 0; i < 10; i++) \n      ((Shape)shapes.get(i)).setColor(Shape.GREEN); \n    // Save the state vector: \n    ObjectOutputStream out = new ObjectOutputStream( \n      new FileOutputStream(\"CADState.out\")); \n    out.writeObject(shapeTypes); \n    Line.serializeStaticState(out); \n    out.writeObject(shapes); \n    // Display the shapes: \n    System.out.println(shapes);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1a7f261d5d0b72ca462d4d60b89fd37b",
        "type": "source_code",
        "text": "ObjectInputStream in = new ObjectInputStream( \n      new FileInputStream(\"CADState.out\")); \n    // Read in the same order they were written: \n    List<Class<? extends Shape>> shapeTypes = \n      (List<Class<? extends Shape>>)in.readObject(); \n    Line.deserializeStaticState(in);",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "172781a481aa7d1eff85cedd753b2a81",
        "type": "source_code",
        "text": "List<Shape> shapes = (List<Shape>)in.readObject(); \n    System.out.println(shapes);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ef8f87caeca985420caa5d6157ff29f8",
        "type": "source_code",
        "text": "this.first = first; \n    this.last = last;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "aa68e87d3721cf05eb8d619dbff62071",
        "type": "source_code",
        "text": "Element person = new Element(\"person\"); \n    Element firstName = new Element(\"first\"); \n    firstName.appendChild(first); \n    Element lastName = new Element(\"last\"); \n    lastName.appendChild(last); \n    person.appendChild(firstName); \n    person.appendChild(lastName); \n    return person;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "fcc2d04369aeb359b51e8c747172c212",
        "type": "source_code",
        "text": "first= person.getFirstChildElement(\"first\").getValue(); \n    last = person.getFirstChildElement(\"last\").getValue();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b804621c995dde495f3e16e3b76312e2",
        "type": "source_code",
        "text": "Serializer serializer= new Serializer(os,\"ISO-8859-1\"); \n    serializer.setIndent(4); \n    serializer.setMaxLength(60); \n    serializer.write(doc); \n    serializer.flush();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "412bff54d9ec70d8ab818f33671ab1f9",
        "type": "source_code",
        "text": "List<Person> people = Arrays.asList( \n      new Person(\"Dr. Bunsen\", \"Honeydew\"), \n      new Person(\"Gonzo\", \"The Great\"), \n      new Person(\"Phillip J.\", \"Fry\")); \n    System.out.println(people); \n    Element root = new Element(\"people\"); \n    for(Person p : people) \n      root.appendChild(p.getXML()); \n    Document doc = new Document(root); \n    format(System.out, doc); \n    format(new BufferedOutputStream(new FileOutputStream( \n      \"People.xml\")), doc);",
        "programming_language": "World of Warcraft TOC",
        "weight": 0.0
    },
    {
        "id": "463fcf1c857b47d0f22b75246a0930bd",
        "type": "source_code",
        "text": "<person>",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "430169ab63e9798b3a86087b1ba4c307",
        "type": "source_code",
        "text": "<first>Dr. Bunsen</first> \n        <last>Honeydew</last> \n    </person> \n    <person> \n        <first>Gonzo</first> \n        <last>The Great</last> \n    </person> \n    <person> \n        <first>Phillip J.</first> \n        <last>Fry</last> \n    </person>",
        "programming_language": "XML",
        "weight": 0.0
    },
    {
        "id": "4993f51fc538df1d0491b4e1e662f2cb",
        "type": "source_code",
        "text": "Document doc = new Builder().build(fileName); \n    Elements elements = \n      doc.getRootElement().getChildElements(); \n    for(int i = 0; i < elements.size(); i++) \n      add(new Person(elements.get(i)));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e8fcf903d379ef0f6c0cc56a32ac4dc0",
        "type": "source_code",
        "text": "People p = new People(\"People.xml\"); \n    System.out.println(p);",
        "programming_language": "World of Warcraft TOC",
        "weight": 0.0
    },
    {
        "id": "04f9b4ec4c9e91d43062fa3d58586f13",
        "type": "source_code",
        "text": "Preferences prefs = Preferences \n      .userNodeForPackage(PreferencesDemo.class); \n    prefs.put(\"Location\", \"Oz\"); \n    prefs.put(\"Footwear\", \"Ruby Slippers\"); \n    prefs.putInt(\"Companions\", 4); \n    prefs.putBoolean(\"Are there witches?\", true); \n    int usageCount = prefs.getInt(\"UsageCount\", 0); \n    usageCount++; \n    prefs.putInt(\"UsageCount\", usageCount); \n    for(String key : prefs.keys()) \n      print(key + \": \"+ prefs.get(key, null)); \n    // You must always provide a default value: \n    print(\"How many companions does Dorothy have? \" + \n      prefs.getInt(\"Companions\", 0));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "34d9ee91c0a434e69af96fea98f8d520",
        "type": "source_code",
        "text": "for(Shrubbery s : Shrubbery.values()) { \n      print(s + \" ordinal: \" + s.ordinal()); \n      printnb(s.compareTo(Shrubbery.CRAWLING) + \" \"); \n      printnb(s.equals(Shrubbery.CRAWLING) + \" \"); \n      print(s == Shrubbery.CRAWLING); \n      print(s.getDeclaringClass()); \n      print(s.name()); \n      print(\"----------------------\"); \n    } \n    // Produce an enum value from a string name: \n    for(String s : \"HANGING CRAWLING GROUND\".split(\" \")) { \n      Shrubbery shrub = Enum.valueOf(Shrubbery.class, s); \n      print(shrub); \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "c46dd6f74bfb12302201fd913b49849a",
        "type": "source_code",
        "text": "System.out.println(new Burrito(NOT)); \n    System.out.println(new Burrito(MEDIUM)); \n    System.out.println(new Burrito(HOT));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a751c5f08b94f9ea857d7e75893343ef",
        "type": "source_code",
        "text": "\"Slippers, crushed by Dorothy\u2019s house\"),",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "36b82a35fa86dd5318aa5ff50045d91e",
        "type": "source_code",
        "text": "this.description = description;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fed558b87447d5b2fccc4b419d0d4680",
        "type": "source_code",
        "text": "for(OzWitch witch : OzWitch.values()) \n      print(witch + \": \" + witch.getDescription());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8278ad869013c546dcd5e190c2e22c5e",
        "type": "source_code",
        "text": "String id = name(); \n    String lower = id.substring(1).toLowerCase(); \n    return id.charAt(0) + lower;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5f97a616ac0226130340d9508c27d0ea",
        "type": "source_code",
        "text": "for(SpaceShip s : values()) { \n      System.out.println(s); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "890ae41eac9034d525a1fc677623b292",
        "type": "source_code",
        "text": "switch(color) { \n      // Note that you don\u2019t have to say Signal.RED \n      // in the case statement: \n      case RED:    color = Signal.GREEN; \n                   break; \n      case GREEN:  color = Signal.YELLOW; \n                   break; \n      case YELLOW: color = Signal.RED; \n                   break; \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "2c59f7e8cc6606912bfc0075265e8ed8",
        "type": "source_code",
        "text": "return \"The traffic light is \" + color;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a9eb60604f833c2362da2f285a8f0099",
        "type": "source_code",
        "text": "TrafficLight t = new TrafficLight(); \n    for(int i = 0; i < 7; i++) { \n      print(t); \n      t.change(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "99db0879490b74483ebcc3008d52bd9f",
        "type": "source_code",
        "text": "print(\"----- Analyzing \" + enumClass + \" -----\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "66fceff8a9e7c8edd9076501a3adc440",
        "type": "source_code",
        "text": "print(\"Interfaces:\"); \n    for(Type t : enumClass.getGenericInterfaces()) \n      print(t); \n    print(\"Base: \" + enumClass.getSuperclass()); \n    print(\"Methods: \"); \n    Set<String> methods = new TreeSet<String>(); \n    for(Method m : enumClass.getMethods()) \n      methods.add(m.getName()); \n    print(methods); \n    return methods;",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "aa7db23789a13ab3d8ef267a9308a784",
        "type": "source_code",
        "text": "Set<String> exploreMethods = analyze(Explore.class); \n    Set<String> enumMethods = analyze(Enum.class); \n    print(\"Explore.containsAll(Enum)? \" + \n      exploreMethods.containsAll(enumMethods)); \n    printnb(\"Explore.removeAll(Enum): \"); \n    exploreMethods.removeAll(enumMethods); \n    print(exploreMethods); \n    // Decompile the code for the enum: \n    OSExecute.command(\"javap Explore\");",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "68f88f1f97fb8ab0081ed3886c387e9a",
        "type": "source_code",
        "text": "public static final Explore HERE; \n    public static final Explore THERE; \n    public static final Explore[] values(); \n    public static Explore valueOf(java.lang.String); \n    static {};",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cb3db90aca0032cc0e289b27ce0b2455",
        "type": "source_code",
        "text": "Search[] vals = Search.values(); \n    Enum e = Search.HITHER; // Upcast \n    // e.values(); // No values() in Enum \n    for(Enum en : e.getClass().getEnumConstants()) \n      System.out.println(en);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "409a12463275e0b3bfcd0ae0f8146c66",
        "type": "source_code",
        "text": "Class<Integer> intClass = Integer.class; \n    try { \n      for(Object en : intClass.getEnumConstants()) \n        System.out.println(en); \n    } catch(Exception e) { \n      System.out.println(e); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "920643eec066de3cff40ec5d59152a42",
        "type": "source_code",
        "text": "return values()[rand.nextInt(values().length)];",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bab1eb6dec625d6d1b109de9628e908b",
        "type": "source_code",
        "text": "System.out.print(rg.next() + \", \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "788cb8535e1dcd9b0f895b3b73f636ed",
        "type": "source_code",
        "text": "// Choose any instance: \n    CartoonCharacter cc = CartoonCharacter.BOB; \n    for(int i = 0; i < 10; i++) \n      printNext(cc);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "b55d8a8a5fabf3cd0f27e92efee397ff",
        "type": "source_code",
        "text": "return random(ec.getEnumConstants());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "46e5f42c560d33305177702b474f7429",
        "type": "source_code",
        "text": "return values[rand.nextInt(values.length)];",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cdd4668d64fa3adaf34c45e23259e4cf",
        "type": "source_code",
        "text": "for(int i = 0; i < 20; i++) \n      System.out.print(Enums.random(Activity.class) + \" \");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1ae2a7af4058f0e623c85211fa01e877",
        "type": "source_code",
        "text": "SALAD, SOUP, SPRING_ROLLS;",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "2c8f489cbefdb3c8702c300517e983a9",
        "type": "source_code",
        "text": "LASAGNE, BURRITO, PAD_THAI, \n    LENTILS, HUMMOUS, VINDALOO;",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "3cdad0233ff597aa1122fda7da5386ec",
        "type": "source_code",
        "text": "TIRAMISU, GELATO, BLACK_FOREST_CAKE, \n    FRUIT, CREME_CARAMEL;",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "6b0c0f53db6d19c0e92c80318ef377e3",
        "type": "source_code",
        "text": "BLACK_COFFEE, DECAF_COFFEE, ESPRESSO, \n    LATTE, CAPPUCCINO, TEA, HERB_TEA;",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "8894291a341de98c14adf340e70a49ca",
        "type": "source_code",
        "text": "Food food = Appetizer.SALAD; \n    food = MainCourse.LASAGNE; \n    food = Dessert.GELATO; \n    food = Coffee.CAPPUCCINO;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4f24e63465f6d0b5b2ebe93220ea6d71",
        "type": "source_code",
        "text": "values = kind.getEnumConstants();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9ce76e3a4c678ea383878e5cbfab3aa3",
        "type": "source_code",
        "text": "return Enums.random(values);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "444679e10c2e13b02e19a5e4935d0a04",
        "type": "source_code",
        "text": "for(int i = 0; i < 5; i++) { \n      for(Course course : Course.values()) { \n        Food food = course.randomSelection(); \n        System.out.println(food); \n      } \n      System.out.println(\"---\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "4f24e63465f6d0b5b2ebe93220ea6d71",
        "type": "source_code",
        "text": "values = kind.getEnumConstants();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8d9eb615c8fd4fa2b90eefcb0b87bf33",
        "type": "source_code",
        "text": "enum Stock implements Security { SHORT, LONG, MARGIN } \n    enum Bond implements Security { MUNICIPAL, JUNK }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "9ce76e3a4c678ea383878e5cbfab3aa3",
        "type": "source_code",
        "text": "return Enums.random(values);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "851b15bd09f9741cc428cdd62ec8c417",
        "type": "source_code",
        "text": "for(int i = 0; i < 10; i++) { \n      SecurityCategory category = \n        Enums.random(SecurityCategory.class); \n      System.out.println(category + \": \" + \n        category.randomSelection()); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "4f24e63465f6d0b5b2ebe93220ea6d71",
        "type": "source_code",
        "text": "values = kind.getEnumConstants();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dabcb7fee2cccf62e57dea264e249497",
        "type": "source_code",
        "text": "enum Appetizer implements Food { \n      SALAD, SOUP, SPRING_ROLLS; \n    } \n    enum MainCourse implements Food { \n      LASAGNE, BURRITO, PAD_THAI, \n      LENTILS, HUMMOUS, VINDALOO; \n    } \n    enum Dessert implements Food { \n      TIRAMISU, GELATO, BLACK_FOREST_CAKE, \n      FRUIT, CREME_CARAMEL; \n    } \n    enum Coffee implements Food { \n      BLACK_COFFEE, DECAF_COFFEE, ESPRESSO, \n      LATTE, CAPPUCCINO, TEA, HERB_TEA; \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "9ce76e3a4c678ea383878e5cbfab3aa3",
        "type": "source_code",
        "text": "return Enums.random(values);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "766e6a78401b242982199b5c149a325b",
        "type": "source_code",
        "text": "for(int i = 0; i < 5; i++) { \n      for(Meal2 meal : Meal2.values()) { \n        Food food = meal.randomSelection(); \n        System.out.println(food); \n      } \n      System.out.println(\"---\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9435a48e798779f307b4839a6b4ecf1c",
        "type": "source_code",
        "text": "EnumSet<AlarmPoints> points = \n      EnumSet.noneOf(AlarmPoints.class); // Empty set \n    points.add(BATHROOM); \n    print(points); \n    points.addAll(EnumSet.of(STAIR1, STAIR2, KITCHEN)); \n    print(points); \n    points = EnumSet.allOf(AlarmPoints.class); \n    points.removeAll(EnumSet.of(STAIR1, STAIR2, KITCHEN)); \n    print(points); \n    points.removeAll(EnumSet.range(OFFICE1, OFFICE4)); \n    print(points); \n    points = EnumSet.complementOf(points); \n    print(points);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d07fb7bb4ed5ed09b67ec368ae1072c0",
        "type": "source_code",
        "text": "A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, \n    A22, A23, A24, A25, A26, A27, A28, A29, A30, A31, A32, \n    A33, A34, A35, A36, A37, A38, A39, A40, A41, A42, A43, \n    A44, A45, A46, A47, A48, A49, A50, A51, A52, A53, A54, \n    A55, A56, A57, A58, A59, A60, A61, A62, A63, A64, A65, \n    A66, A67, A68, A69, A70, A71, A72, A73, A74, A75 }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "63525907ac263b25be31447ed2324d05",
        "type": "source_code",
        "text": "EnumSet<Big> bigEnumSet = EnumSet.allOf(Big.class); \n    System.out.println(bigEnumSet);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b29b6fff611252d50a5bbec02f957d99",
        "type": "source_code",
        "text": "EnumMap<AlarmPoints,Command> em = \n      new EnumMap<AlarmPoints,Command>(AlarmPoints.class); \n    em.put(KITCHEN, new Command() { \n      public void action() { print(\"Kitchen fire!\"); } \n    }); \n    em.put(BATHROOM, new Command() { \n      public void action() { print(\"Bathroom alert!\"); } \n    }); \n    for(Map.Entry<AlarmPoints,Command> e : em.entrySet()) { \n      printnb(e.getKey() + \": \"); \n      e.getValue().action(); \n    } \n    try { // If there\u2019s no value for a particular key: \n      em.get(UTILITY).action(); \n    } catch(Exception e) { \n      print(e); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "7f7fce118a85b76c7cb64dc5eb7b3ee2",
        "type": "source_code",
        "text": "String getInfo() { \n      return \n        DateFormat.getDateInstance().format(new Date()); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "38988002c01163d8302123b9913d9feb",
        "type": "source_code",
        "text": "String getInfo() { \n      return System.getenv(\"CLASSPATH\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cbb184dd8e05c9709e5dcaedaa0495cf",
        "type": "source_code",
        "text": "}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "561772829f3a2b35a7f3eeea708093d1",
        "type": "source_code",
        "text": "String getInfo() { \n      return System.getProperty(\"java.version\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "00843c22892fbbd98bd2e614710530c1",
        "type": "source_code",
        "text": "for(ConstantSpecificMethod csm : values()) \n      System.out.println(csm.getInfo());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c66842b3dfaa73d7fcf3c0f22a4865da",
        "type": "source_code",
        "text": "UNDERBODY { \n      void action() { print(\"Spraying the underbody\"); } \n    }, \n    WHEELWASH { \n      void action() { print(\"Washing the wheels\"); } \n    }, \n    PREWASH { \n      void action() { print(\"Loosening the dirt\"); } \n    }, \n    BASIC { \n      void action() { print(\"The basic wash\"); } \n    }, \n    HOTWAX { \n      void action() { print(\"Applying hot wax\"); } \n    }, \n    RINSE { \n      void action() { print(\"Rinsing\"); } \n    }, \n    BLOWDRY { \n      void action() { print(\"Blowing dry\"); } \n    }; \n    abstract void action();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "776c6b2ca44b861b1e5a4da6263fd318",
        "type": "source_code",
        "text": "EnumSet.of(Cycle.BASIC, Cycle.RINSE);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ccfde6802471a3e309b06e598951827f",
        "type": "source_code",
        "text": "for(Cycle c : cycles) \n      c.action();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "507241cba0c5f6eb6c691c6e81830ce3",
        "type": "source_code",
        "text": "CarWash wash = new CarWash(); \n    print(wash); \n    wash.washCar(); \n    // Order of addition is unimportant: \n    wash.add(Cycle.BLOWDRY); \n    wash.add(Cycle.BLOWDRY); // Duplicates ignored \n    wash.add(Cycle.RINSE); \n    wash.add(Cycle.HOTWAX); \n    print(wash); \n    wash.washCar();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "37233c462cd8af5ee87ec14bf9bbf354",
        "type": "source_code",
        "text": "void f() { print(\"Overridden method\"); }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d84b0c024d3ede3fddc66a9c8e7fc8cd",
        "type": "source_code",
        "text": "for(OverrideConstantSpecific ocs : values()) { \n      printnb(ocs + \": \"); \n      ocs.f(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "7038893393ecdfe255b255dac4b4b01c",
        "type": "source_code",
        "text": "return toString() + \n      \", General Delivery: \" + generalDelivery + \n      \", Address Scanability: \" + scannability + \n      \", Address Readability: \" + readability + \n      \", Address Address: \" + address + \n      \", Return address: \" + returnAddress;",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "61407ba4d61134f491fb69c0e6ab8ef9",
        "type": "source_code",
        "text": "Mail m = new Mail(); \n    m.generalDelivery= Enums.random(GeneralDelivery.class); \n    m.scannability = Enums.random(Scannability.class); \n    m.readability = Enums.random(Readability.class); \n    m.address = Enums.random(Address.class); \n    m.returnAddress = Enums.random(ReturnAddress.class); \n    return m;",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "0fc75aefe1f481ba56bb0ac7ff5c2a23",
        "type": "source_code",
        "text": "return new Iterable<Mail>() { \n      int n = count; \n      public Iterator<Mail> iterator() { \n        return new Iterator<Mail>() { \n          public boolean hasNext() { return n-- > 0; } \n          public Mail next() { return randomMail(); } \n          public void remove() { // Not implemented \n            throw new UnsupportedOperationException(); \n          } \n        }; \n      } \n    };",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "ed0cfcabf78d03605c9c7f74a3c4ca1a",
        "type": "source_code",
        "text": "GENERAL_DELIVERY { \n      boolean handle(Mail m) { \n        switch(m.generalDelivery) { \n          case YES: \n            print(\"Using general delivery for \" + m); \n            return true; \n          default: return false; \n        }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "c6b49ac9397618dbfd74a6e03420e2a6",
        "type": "source_code",
        "text": "} \n    }, \n    MACHINE_SCAN { \n      boolean handle(Mail m) { \n        switch(m.scannability) { \n          case UNSCANNABLE: return false; \n          default: \n            switch(m.address) { \n              case INCORRECT: return false; \n              default: \n                print(\"Delivering \"+ m + \" automatically\"); \n                return true; \n            } \n        } \n      } \n    }, \n    VISUAL_INSPECTION { \n      boolean handle(Mail m) { \n        switch(m.readability) { \n          case ILLEGIBLE: return false; \n          default: \n            switch(m.address) { \n              case INCORRECT: return false; \n              default: \n                print(\"Delivering \" + m + \" normally\"); \n                return true; \n            } \n        } \n      } \n    }, \n    RETURN_TO_SENDER { \n      boolean handle(Mail m) { \n        switch(m.returnAddress) { \n          case MISSING: return false; \n          default: \n            print(\"Returning \" + m + \" to sender\"); \n            return true; \n        } \n      } \n    }; \n    abstract boolean handle(Mail m);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "250015f2b0a8e21fd04fc0fde3b3b2ac",
        "type": "source_code",
        "text": "for(MailHandler handler : MailHandler.values()) \n      if(handler.handle(m)) \n        return; \n    print(m + \" is a dead letter\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3dfac4c25083b710480dee3632fb7e2a",
        "type": "source_code",
        "text": "for(Mail mail : Mail.generator(10)) { \n      print(mail.details()); \n      handle(mail); \n      print(\"*****\"); \n    }",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "f1035709e91fa4e207f7f6a225e828a5",
        "type": "source_code",
        "text": "public int amount() { // Disallow \n      throw new RuntimeException(\"ABORT.amount()\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "330e5cf5755889cabe50f97203d43bd1",
        "type": "source_code",
        "text": "public int amount() { // Disallow \n      throw new RuntimeException(\"SHUT_DOWN.amount()\"); \n    }",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "fba2174db6ec5f4d8d5abfb159964306",
        "type": "source_code",
        "text": "// Don\u2019t include STOP: \n    return values()[rand.nextInt(values().length - 1)];",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "65f8706c0e139ea4f3597133146d3372",
        "type": "source_code",
        "text": "new EnumMap<Input,Category>(Input.class);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d09f31997957aebe763b66a0c30ef8f4",
        "type": "source_code",
        "text": "for(Category c : Category.class.getEnumConstants()) \n      for(Input type : c.values) \n        categories.put(type, c);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "96c93c96d9bcd4f78aea14c5b62ed3f6",
        "type": "source_code",
        "text": "return categories.get(input);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "35e182433b27904da33b246d2be2733a",
        "type": "source_code",
        "text": "RESTING { \n      void next(Input input) { \n        switch(Category.categorize(input)) { \n          case MONEY: \n            amount += input.amount(); \n            state = ADDING_MONEY; \n            break; \n          case SHUT_DOWN: \n            state = TERMINAL; \n          default: \n        } \n      } \n    },",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "aad6c1dfa7a686b5fbe12e7b69d7f0cc",
        "type": "source_code",
        "text": "ADDING_MONEY { \n      void next(Input input) { \n        switch(Category.categorize(input)) { \n          case MONEY: \n            amount += input.amount(); \n            break; \n          case ITEM_SELECTION: \n            selection = input; \n            if(amount < selection.amount()) \n              print(\"Insufficient money for \" + selection); \n            else state = DISPENSING; \n            break; \n          case QUIT_TRANSACTION: \n            state = GIVING_CHANGE; \n            break; \n          case SHUT_DOWN: \n            state = TERMINAL; \n          default: \n        } \n      } \n    },",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4927872571033a0c42010779476c479b",
        "type": "source_code",
        "text": "DISPENSING(StateDuration.TRANSIENT) { \n      void next() { \n        print(\"here is your \" + selection); \n        amount -= selection.amount(); \n        state = GIVING_CHANGE; \n      } \n    }, \n    GIVING_CHANGE(StateDuration.TRANSIENT) { \n      void next() { \n        if(amount > 0) {",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "07a66a781ee9e04dbf768c4b41d01ef4",
        "type": "source_code",
        "text": "print(\"Your change: \" + amount); \n          amount = 0; \n        } \n        state = RESTING; \n      } \n    },",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "5b43725c3f6a048f7987d8c8d56c67b1",
        "type": "source_code",
        "text": "TERMINAL { void output() { print(\"Halted\"); } }; \n    private boolean isTransient = false; \n    State() {} \n    State(StateDuration trans) { isTransient = true; } \n    void next(Input input) { \n      throw new RuntimeException(\"Only call \" + \n        \"next(Input input) for non-transient states\"); \n    } \n    void next() { \n      throw new RuntimeException(\"Only call next() for \" + \n        \"StateDuration.TRANSIENT states\"); \n    } \n    void output() { print(amount); }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "91b00e99128b7fa4bd1eda3b7706cbac",
        "type": "source_code",
        "text": "while(state != State.TERMINAL) { \n      state.next(gen.next()); \n      while(state.isTransient) \n        state.next(); \n      state.output(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "57d3402c26dc71f9141d6f8e80b81719",
        "type": "source_code",
        "text": "Generator<Input> gen = new RandomInputGenerator(); \n    if(args.length == 1) \n      gen = new FileInputGenerator(args[0]); \n    run(gen);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "12c5dffc399d58ae1460a5f2ba1d9e1e",
        "type": "source_code",
        "text": "input = new TextFile(fileName, \";\").iterator();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "43a12216e6c4f84e1d5e255f84438467",
        "type": "source_code",
        "text": "if(!input.hasNext()) \n      return null; \n    return Enum.valueOf(Input.class, input.next().trim());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "74fece90dbc56e2b19588b31ad6444bf",
        "type": "source_code",
        "text": "switch(rand.nextInt(3)) { \n      default: \n      case 0: return new Scissors(); \n      case 1: return new Paper(); \n      case 2: return new Rock(); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4807c048a4b6874390311ce749e8425c",
        "type": "source_code",
        "text": "System.out.println( \n      a + \" vs. \" + b + \": \" +  a.compete(b));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e3be2f1c2e2ba0c96f9f22d044532d56",
        "type": "source_code",
        "text": "for(int i = 0; i < SIZE; i++) \n      match(newItem(), newItem());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ebc691222e869d8c8f732450af11a6da",
        "type": "source_code",
        "text": "this.vPAPER = paper; \n    this.vSCISSORS = scissors; \n    this.vROCK = rock;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "494f0d9530f8b61686dd3a78bd1faa10",
        "type": "source_code",
        "text": "switch(it) { \n      default: \n      case PAPER: return vPAPER; \n      case SCISSORS: return vSCISSORS; \n      case ROCK: return vROCK; \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ad21e401e36bba35fed0abb5bfb6dd60",
        "type": "source_code",
        "text": "RoShamBo.play(RoShamBo2.class, 20);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4807c048a4b6874390311ce749e8425c",
        "type": "source_code",
        "text": "System.out.println( \n      a + \" vs. \" + b + \": \" +  a.compete(b));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "73ce99faa7bd0d2b5daa1bc1c3141b75",
        "type": "source_code",
        "text": "for(int i = 0; i < size; i++)",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1f40d31319ae1188d752b313353de17b",
        "type": "source_code",
        "text": "match( \n        Enums.random(rsbClass),Enums.random(rsbClass));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c7dc5cb3fe78eb6101263c90786771a8",
        "type": "source_code",
        "text": "public Outcome compete(RoShamBo3 it) { \n      switch(it) { \n        default: // To placate the compiler \n        case PAPER: return DRAW; \n        case SCISSORS: return LOSE; \n        case ROCK: return WIN; \n      } \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "65e7a055502957d3f1424aa59d5f7a4e",
        "type": "source_code",
        "text": "public Outcome compete(RoShamBo3 it) { \n      switch(it) { \n        default: \n        case PAPER: return WIN; \n        case SCISSORS: return DRAW; \n        case ROCK: return LOSE; \n      } \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "c82b0cfc8ffbb2767b0c173b79753125",
        "type": "source_code",
        "text": "public Outcome compete(RoShamBo3 it) { \n      switch(it) { \n        default: \n        case PAPER: return LOSE; \n        case SCISSORS: return WIN; \n        case ROCK: return DRAW; \n      } \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f270ce870381a109111a82152713f0a2",
        "type": "source_code",
        "text": "RoShamBo.play(RoShamBo3.class, 20);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dbbfc3cd1360c7f9a1f93bbf6a1f9537",
        "type": "source_code",
        "text": "public Outcome compete(RoShamBo4 opponent) { \n      return compete(SCISSORS, opponent); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ce37f8b0e39b482736fbccd656a8d889",
        "type": "source_code",
        "text": "public Outcome compete(RoShamBo4 opponent) { \n      return compete(PAPER, opponent); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "db1fb8e4848c32ee45d16a19de4c96a9",
        "type": "source_code",
        "text": "public Outcome compete(RoShamBo4 opponent) { \n      return compete(ROCK, opponent); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f07cbe353bfbeddc5880a07b7a39c85e",
        "type": "source_code",
        "text": "return ((opponent == this) ? Outcome.DRAW \n        : ((opponent == loser) ? Outcome.WIN \n                               : Outcome.LOSE));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6b6ea9ade6d0f416ce9a52cfcb5ab457",
        "type": "source_code",
        "text": "RoShamBo.play(RoShamBo4.class, 20);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "68aa36b7b6d1932c11fa4b4223a6f856",
        "type": "source_code",
        "text": "table = new EnumMap<RoShamBo5, \n      EnumMap<RoShamBo5,Outcome>>(RoShamBo5.class);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7872322fcd69bbc5dbc6fdd177fdead5",
        "type": "source_code",
        "text": "for(RoShamBo5 it : RoShamBo5.values()) \n      table.put(it, \n        new EnumMap<RoShamBo5,Outcome>(RoShamBo5.class)); \n    initRow(PAPER, DRAW, LOSE, WIN);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2c12b0f82767b2825a05d40568bd61fb",
        "type": "source_code",
        "text": "initRow(SCISSORS, WIN, DRAW, LOSE); \n    initRow(ROCK, LOSE, WIN, DRAW);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "512026adbf3ab68a9faad9910d3ebd0f",
        "type": "source_code",
        "text": "Outcome vPAPER, Outcome vSCISSORS, Outcome vROCK) { \n    EnumMap<RoShamBo5,Outcome> row = \n      RoShamBo5.table.get(it); \n    row.put(RoShamBo5.PAPER, vPAPER); \n    row.put(RoShamBo5.SCISSORS, vSCISSORS); \n    row.put(RoShamBo5.ROCK, vROCK);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8d55e03f79662c9d456de8d9a8a30e3b",
        "type": "source_code",
        "text": "return table.get(this).get(it);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6511c25b2cc1abfc69db573e0b95faa5",
        "type": "source_code",
        "text": "RoShamBo.play(RoShamBo5.class, 20);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cfbb4006ab957db3165d5cd40bc42a2b",
        "type": "source_code",
        "text": "{ DRAW, LOSE, WIN }, // PAPER \n    { WIN, DRAW, LOSE }, // SCISSORS \n    { LOSE, WIN, DRAW }, // ROCK",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b4cedb0e8b897b71296bab77aff4f4b6",
        "type": "source_code",
        "text": "return table[this.ordinal()][other.ordinal()];",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a388558f9d64f20bc3b3b7444a1ee5ea",
        "type": "source_code",
        "text": "RoShamBo.play(RoShamBo6.class, 20);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "772dcd07b7719a68638d5bd7f6618efc",
        "type": "source_code",
        "text": "System.out.println(\"Executing..\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "197cf2e83d66f7a35db305f2638cd48d",
        "type": "source_code",
        "text": "return (password.matches(\"\\\\w*\\\\d\\\\w*\"));",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "df734656c1da983975b198986d7c16d7",
        "type": "source_code",
        "text": "List<String> prevPasswords, String password) { \n    return !prevPasswords.contains(password);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6aee58e84a9e66a800439f8af2a6a1d4",
        "type": "source_code",
        "text": "for(Method m : cl.getDeclaredMethods()) { \n      UseCase uc = m.getAnnotation(UseCase.class); \n      if(uc != null) { \n        System.out.println(\"Found Use Case:\" + uc.id() + \n          \" \" + uc.description()); \n        useCases.remove(new Integer(uc.id())); \n      } \n    } \n    for(int i : useCases) { \n      System.out.println(\"Warning: Missing use case-\" + i); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "bacea7bf3d028a0f646927ddac604e5c",
        "type": "source_code",
        "text": "List<Integer> useCases = new ArrayList<Integer>(); \n    Collections.addAll(useCases, 47, 48, 49, 50); \n    trackUseCases(useCases, PasswordUtils.class);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "78a7d84181aa3a69cf91bec55258ffd4",
        "type": "source_code",
        "text": "default @Constraints(unique=true);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "6933f1ad8a3396cf9d9fe99ed5282f18",
        "type": "source_code",
        "text": "if(args.length < 1) { \n      System.out.println(\"arguments: annotated classes\"); \n      System.exit(0); \n    } \n    for(String className : args) { \n      Class<?> cl = Class.forName(className); \n      DBTable dbTable = cl.getAnnotation(DBTable.class); \n      if(dbTable == null) { \n        System.out.println( \n          \"No DBTable annotations in class \" + className); \n        continue; \n      } \n      String tableName = dbTable.name(); \n      // If the name is empty, use the Class name: \n      if(tableName.length() < 1) \n        tableName = cl.getName().toUpperCase(); \n      List<String> columnDefs = new ArrayList<String>(); \n      for(Field field : cl.getDeclaredFields()) { \n        String columnName = null; \n        Annotation[] anns = field.getDeclaredAnnotations(); \n        if(anns.length < 1) \n          continue; // Not a db table column \n        if(anns[0] instanceof SQLInteger) { \n          SQLInteger sInt = (SQLInteger) anns[0]; \n          // Use field name if name not specified \n          if(sInt.name().length() < 1) \n            columnName = field.getName().toUpperCase(); \n          else \n            columnName = sInt.name(); \n          columnDefs.add(columnName + \" INT\" + \n            getConstraints(sInt.constraints())); \n        } \n        if(anns[0] instanceof SQLString) { \n          SQLString sString = (SQLString) anns[0]; \n          // Use field name if name not specified. \n          if(sString.name().length() < 1) \n            columnName = field.getName().toUpperCase(); \n          else \n            columnName = sString.name(); \n          columnDefs.add(columnName + \" VARCHAR(\" + \n            sString.value() + \")\" + \n            getConstraints(sString.constraints())); \n        } \n        StringBuilder createCommand = new StringBuilder( \n          \"CREATE TABLE \" + tableName + \"(\"); \n        for(String columnDef : columnDefs) \n          createCommand.append(\"\\n    \" + columnDef + \",\"); \n        // Remove trailing comma \n        String tableCreate = createCommand.substring( \n          0, createCommand.length() - 1) + \");\"; \n        System.out.println(\"Table Creation SQL for \" + \n          className + \" is :\\n\" + tableCreate); \n      } \n    }",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "e53cd8c5998bf422835d5e2673e53360",
        "type": "source_code",
        "text": "String constraints = \"\"; \n    if(!con.allowNull()) \n      constraints += \" NOT NULL\"; \n    if(con.primaryKey()) \n      constraints += \" PRIMARY KEY\"; \n    if(con.unique()) \n      constraints += \" UNIQUE\"; \n    return constraints;",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "e41df977a4223097fba08cfc654b1593",
        "type": "source_code",
        "text": "FIRSTNAME VARCHAR(30));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d4cf4d4d1c3f01223f59eda4efccf92b",
        "type": "source_code",
        "text": "FIRSTNAME VARCHAR(30), \n    LASTNAME VARCHAR(50));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f5323e8adfd3ca98d50566592d79b3c5",
        "type": "source_code",
        "text": "FIRSTNAME VARCHAR(30), \n    LASTNAME VARCHAR(50), \n    AGE INT);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b62756b24a2f2439c8db0ae6e9dade90",
        "type": "source_code",
        "text": "FIRSTNAME VARCHAR(30), \n    LASTNAME VARCHAR(50), \n    AGE INT, \n    HANDLE VARCHAR(30) PRIMARY KEY);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "15bf7d2a91d659789db95737c499cbea",
        "type": "source_code",
        "text": "int total = 0; \n    for(int i = 0; i < x; i++) \n      total = add(total, y); \n    return total;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5f40f82cb8bfbd966121c9951e39e3af",
        "type": "source_code",
        "text": "Multiplier m = new Multiplier(); \n    System.out.println(\"11*16 = \" + m.multiply(11, 16));",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "5ca07ef55cbbdded42091429807003fe",
        "type": "source_code",
        "text": "new ArrayList<MethodDeclaration>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f59d2f9b4a2fd42ed37b58c10128ba3c",
        "type": "source_code",
        "text": "AnnotationProcessorEnvironment env) { this.env = env; }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b78d4897afe724c55497d8c5daa09fea",
        "type": "source_code",
        "text": "for(TypeDeclaration typeDecl : \n      env.getSpecifiedTypeDeclarations()) { \n      ExtractInterface annot = \n        typeDecl.getAnnotation(ExtractInterface.class); \n      if(annot == null) \n        break; \n      for(MethodDeclaration m : typeDecl.getMethods()) \n        if(m.getModifiers().contains(Modifier.PUBLIC) && \n           !(m.getModifiers().contains(Modifier.STATIC))) \n          interfaceMethods.add(m); \n      if(interfaceMethods.size() > 0) {",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "e770fe3163afea4cab95b8d0afa134dd",
        "type": "source_code",
        "text": "try { \n          PrintWriter writer = \n            env.getFiler().createSourceFile(annot.value()); \n          writer.println(\"package \" + \n            typeDecl.getPackage().getQualifiedName() +\";\"); \n          writer.println(\"public interface \" + \n            annot.value() + \" {\"); \n          for(MethodDeclaration m : interfaceMethods) { \n            writer.print(\"  public \"); \n            writer.print(m.getReturnType() + \" \"); \n            writer.print(m.getSimpleName() + \" (\"); \n            int i = 0; \n            for(ParameterDeclaration parm : \n              m.getParameters()) { \n              writer.print(parm.getType() + \" \" + \n                parm.getSimpleName()); \n              if(++i < m.getParameters().size()) \n                writer.print(\", \"); \n            } \n            writer.println(\");\"); \n          } \n          writer.println(\"}\"); \n          writer.close(); \n        } catch(IOException ioe) { \n          throw new RuntimeException(ioe); \n        } \n      } \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "683c0246e4bd95f921a45ce41ac3f049",
        "type": "source_code",
        "text": "Set<AnnotationTypeDeclaration> atds, \n    AnnotationProcessorEnvironment env) { \n    return new InterfaceExtractorProcessor(env);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b0841999f78412be4e878de23a41445d",
        "type": "source_code",
        "text": "return \n     Collections.singleton(\"annotations.ExtractInterface\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e1e2831dea4273ba6008da7f925bb00d",
        "type": "source_code",
        "text": "return Collections.emptySet();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1b668af8506c5dcd6f43829f80dabcff",
        "type": "source_code",
        "text": "Set<AnnotationTypeDeclaration> atds, \n    AnnotationProcessorEnvironment env) { \n    return new TableCreationProcessor(env);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "81253b8000b01e3f04f78c875bfac8b5",
        "type": "source_code",
        "text": "return Arrays.asList( \n      \"annotations.database.DBTable\", \n      \"annotations.database.Constraints\", \n      \"annotations.database.SQLString\", \n      \"annotations.database.SQLInteger\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e1e2831dea4273ba6008da7f925bb00d",
        "type": "source_code",
        "text": "return Collections.emptySet();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "29a0b50c9e57a188c08768cd626edd8c",
        "type": "source_code",
        "text": "implements AnnotationProcessor { \n    private final AnnotationProcessorEnvironment env; \n    private String sql = \"\"; \n    public TableCreationProcessor( \n      AnnotationProcessorEnvironment env) { \n      this.env = env; \n    } \n    public void process() { \n      for(TypeDeclaration typeDecl : \n        env.getSpecifiedTypeDeclarations()) { \n        typeDecl.accept(getDeclarationScanner( \n          new TableCreationVisitor(), NO_OP)); \n        sql = sql.substring(0, sql.length() - 1) + \");\"; \n        System.out.println(\"creation SQL is :\\n\" + sql); \n        sql = \"\"; \n      } \n    } \n    private class TableCreationVisitor \n      extends SimpleDeclarationVisitor { \n      public void visitClassDeclaration( \n        ClassDeclaration d) { \n        DBTable dbTable = d.getAnnotation(DBTable.class);",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "2bae6df8aa191978b15b1de1f7589779",
        "type": "source_code",
        "text": "if(dbTable != null) { \n          sql += \"CREATE TABLE \"; \n          sql += (dbTable.name().length() < 1) \n            ? d.getSimpleName().toUpperCase() \n            : dbTable.name(); \n          sql += \" (\"; \n        } \n      } \n      public void visitFieldDeclaration( \n        FieldDeclaration d) { \n        String columnName = \"\"; \n        if(d.getAnnotation(SQLInteger.class) != null) { \n          SQLInteger sInt = d.getAnnotation( \n              SQLInteger.class); \n          // Use field name if name not specified \n          if(sInt.name().length() < 1) \n            columnName = d.getSimpleName().toUpperCase(); \n          else \n            columnName = sInt.name(); \n          sql += \"\\n    \" + columnName + \" INT\" + \n            getConstraints(sInt.constraints()) + \",\"; \n        } \n        if(d.getAnnotation(SQLString.class) != null) { \n          SQLString sString = d.getAnnotation( \n              SQLString.class); \n          // Use field name if name not specified. \n          if(sString.name().length() < 1) \n            columnName = d.getSimpleName().toUpperCase(); \n          else \n            columnName = sString.name(); \n          sql += \"\\n    \" + columnName + \" VARCHAR(\" + \n            sString.value() + \")\" + \n            getConstraints(sString.constraints()) + \",\"; \n        } \n      } \n      private String getConstraints(Constraints con) { \n        String constraints = \"\"; \n        if(!con.allowNull()) \n          constraints += \" NOT NULL\"; \n        if(con.primaryKey()) \n          constraints += \" PRIMARY KEY\"; \n        if(con.unique()) \n          constraints += \" UNIQUE\"; \n        return constraints; \n      } \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "dbff25dfbbc5fd0ff42dc2c8dbe2fa26",
        "type": "source_code",
        "text": "return \"This is methodOne\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d3f797645c0516001b91c01ad4204b97",
        "type": "source_code",
        "text": "System.out.println(\"This is methodTwo\"); \n    return 2;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "72d2804551db4c0bd92246fb15f6d2a0",
        "type": "source_code",
        "text": "return methodOne().equals(\"This is methodOne\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "7dbacef8ed39d916fd600de0d76e862d",
        "type": "source_code",
        "text": "OSExecute.command( \n      \"java net.mindview.atunit.AtUnit AtUnitExample1\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "72d2804551db4c0bd92246fb15f6d2a0",
        "type": "source_code",
        "text": "return methodOne().equals(\"This is methodOne\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f9badbe8b2a8588b734ff1e743a442a4",
        "type": "source_code",
        "text": "OSExecute.command( \n     \"java net.mindview.atunit.AtUnit AtUnitExternalTest\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "706327ad3208ef914a161d378bf7ab35",
        "type": "source_code",
        "text": "return \n      testObject.methodOne().equals(\"This is methodOne\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a93f4d9e769866eb02b660979ed9dae0",
        "type": "source_code",
        "text": "return testObject.methodTwo() == 2;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a32588524a7b10cc34d65e014ffb85a5",
        "type": "source_code",
        "text": "OSExecute.command( \n     \"java net.mindview.atunit.AtUnit AtUnitComposition\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dbff25dfbbc5fd0ff42dc2c8dbe2fa26",
        "type": "source_code",
        "text": "return \"This is methodOne\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d3f797645c0516001b91c01ad4204b97",
        "type": "source_code",
        "text": "System.out.println(\"This is methodTwo\"); \n    return 2;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c98c1715d67f3451bcc5bfdfe7e5eb71",
        "type": "source_code",
        "text": "assert methodOne().equals(\"This is methodOne\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b8e04b00b23133496c09a007fee0f500",
        "type": "source_code",
        "text": "assert 1 == 2: \"What a surprise!\";",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "eaa44db3f0b0e8a8e2feaedc8f510844",
        "type": "source_code",
        "text": "new FileInputStream(\"nofile.txt\"); // Throws",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c30846a78327c0efd481615c41cb1396",
        "type": "source_code",
        "text": "// Assertion with message: \n    assert methodTwo() == 2: \"methodTwo must equal 2\"; \n    return methodOne().equals(\"This is methodOne\");",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "c6ec7931916373c6571ef579b403010d",
        "type": "source_code",
        "text": "OSExecute.command( \n      \"java net.mindview.atunit.AtUnit AtUnitExample2\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "365ca66dd66060ed175a2ad280f8c26d",
        "type": "source_code",
        "text": "assert testObject.isEmpty();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b246e501b18e26d663ad436d4541de83",
        "type": "source_code",
        "text": "testObject.add(\"one\"); \n    assert testObject.contains(\"one\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7a6776bc80f6257c97fbc68f82928036",
        "type": "source_code",
        "text": "testObject.add(\"one\"); \n    testObject.remove(\"one\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "365ca66dd66060ed175a2ad280f8c26d",
        "type": "source_code",
        "text": "assert testObject.isEmpty();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "239ed760111e5f8fd949e714cae616b0",
        "type": "source_code",
        "text": "OSExecute.command( \n      \"java net.mindview.atunit.AtUnit HashSetTest\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dbff25dfbbc5fd0ff42dc2c8dbe2fa26",
        "type": "source_code",
        "text": "return \"This is methodOne\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d3f797645c0516001b91c01ad4204b97",
        "type": "source_code",
        "text": "System.out.println(\"This is methodTwo\"); \n    return 2;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "27ba9f212f257778f427e5aa530b73c3",
        "type": "source_code",
        "text": "return new AtUnitExample3(47);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "72d2804551db4c0bd92246fb15f6d2a0",
        "type": "source_code",
        "text": "return methodOne().equals(\"This is methodOne\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e123247ab97acc78c155d116cec5b306",
        "type": "source_code",
        "text": "OSExecute.command( \n      \"java net.mindview.atunit.AtUnit AtUnitExample3\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b1c892bb50c7521ad4510e15e86b39f2",
        "type": "source_code",
        "text": "\"are thin at one end, much MUCH thicker in the \" + \n    \"middle, and then thin again at the far end.\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3595830ad6d838af28ecb8404177cdac",
        "type": "source_code",
        "text": "List<Character> chars = new ArrayList<Character>(); \n    for(Character c : word.toCharArray()) \n      chars.add(c); \n    Collections.shuffle(chars, rand); \n    StringBuilder result = new StringBuilder(); \n    for(char ch : chars) \n      result.append(ch); \n    return result.toString();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "67dbeab4a9dc4a1d19fa0f226368a317",
        "type": "source_code",
        "text": "Arrays.asList(theory.split(\" \"));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ed593573ae2830dc8d82ca552b120abb",
        "type": "source_code",
        "text": "static Iterator<String> words = input.iterator();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fc0dcfa8c8f912e65fee7062ade90ee3",
        "type": "source_code",
        "text": "if(words.hasNext()) \n      return new AtUnitExample4(words.next()); \n    else \n      return null;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8c9f4b8134c420f418d4d7f4f89ac711",
        "type": "source_code",
        "text": "print(\"\u2018\" + getWord() + \"\u2018\"); \n    return getWord().equals(\"are\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "70a135068e63dfdbf18d47fb2b5d1838",
        "type": "source_code",
        "text": "// Change to a specific seed to get verifiable results: \n    rand = new Random(47); \n    print(\"\u2018\" + getWord() + \"\u2018\"); \n    String scrambled = scrambleWord(); \n    print(scrambled);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "fcdb0dc8ca74ee9d4e6909245a5e666c",
        "type": "source_code",
        "text": "return scrambled.equals(\"lAl\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "fccef3dfc0dd233eac1b0fd33f8204b7",
        "type": "source_code",
        "text": "rand = new Random(74); \n    print(\"\u2018\" + getWord() + \"\u2018\"); \n    String scrambled = scrambleWord(); \n    print(scrambled); \n    return scrambled.equals(\"tsaeborornussu\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9eb103ce0f78f4726d5a91bb67c875ed",
        "type": "source_code",
        "text": "System.out.println(\"starting\"); \n    OSExecute.command( \n      \"java net.mindview.atunit.AtUnit AtUnitExample4\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "243d5c5eb82b21b316cb43e082183cf9",
        "type": "source_code",
        "text": "String id = Integer.toString(counter++); \n    try { \n      output = new PrintWriter(\"Test\" + id + \".txt\"); \n    } catch(IOException e) { \n      throw new RuntimeException(e); \n    } \n    return new AtUnitExample5(id);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "da830b0818293e12e13b0107c07f41b6",
        "type": "source_code",
        "text": "System.out.println(\"Running cleanup\"); \n    output.close();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e1a52165e7cfb2bab4963733b47f9a49",
        "type": "source_code",
        "text": "output.print(\"test1\"); \n    return true;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f7bfd3b879213a833ab6662c1ca38b2a",
        "type": "source_code",
        "text": "output.print(\"test2\"); \n    return true;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "462c49acfa6392970e59372f8cd3be14",
        "type": "source_code",
        "text": "output.print(\"test3\"); \n    return true;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3eb29b0f7cab52b5aeab2fb53ee9c285",
        "type": "source_code",
        "text": "OSExecute.command( \n      \"java net.mindview.atunit.AtUnit AtUnitExample5\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "baa7ff533389858714ad15b615c88793",
        "type": "source_code",
        "text": "push(\"one\"); \n    assert top().equals(\"one\"); \n    push(\"two\"); \n    assert top().equals(\"two\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5a4f0366cdbc2062929fdf5e9eaef746",
        "type": "source_code",
        "text": "push(\"one\"); \n    push(\"two\"); \n    assert pop().equals(\"two\"); \n    assert pop().equals(\"one\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1289dc5c3881fd7d5b2d5bf59534387b",
        "type": "source_code",
        "text": "push(\"A\"); \n    push(\"B\"); \n    assert top().equals(\"B\"); \n    assert top().equals(\"B\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c8e9b526a495281c0215bc7a523c4859",
        "type": "source_code",
        "text": "OSExecute.command( \n      \"java net.mindview.atunit.AtUnit StackLStringTest\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "94649c3666f8fb307cb34531c412b493",
        "type": "source_code",
        "text": "ClassLoader.getSystemClassLoader() \n      .setDefaultAssertionStatus(true); // Enable asserts \n    new ProcessFiles(new AtUnit(), \"class\").start(args);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e1a41e0897567f135fb7a2838b30ad98",
        "type": "source_code",
        "text": "if(failures == 0) \n      print(\"OK (\" + testsRun + \" tests)\"); \n    else { \n      print(\"(\" + testsRun + \" tests)\"); \n      print(\"\\n>>> \" + failures + \" FAILURE\" + \n        (failures > 1 ? \"S\" : \"\") + \" <<<\"); \n      for(String failed : failedTests) \n        print(\"  \" + failed); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "085d9b06b23d5d1b3609d1082981f882",
        "type": "source_code",
        "text": "try { \n      String cName = ClassNameFinder.thisClass( \n        BinaryFile.read(cFile)); \n      if(!cName.contains(\".\")) \n        return; // Ignore unpackaged classes \n      testClass = Class.forName(cName); \n    } catch(Exception e) { \n      throw new RuntimeException(e); \n    } \n    TestMethods testMethods = new TestMethods(); \n    Method creator = null; \n    Method cleanup = null; \n    for(Method m : testClass.getDeclaredMethods()) { \n      testMethods.addIfTestMethod(m); \n      if(creator == null) \n        creator = checkForCreatorMethod(m); \n      if(cleanup == null) \n        cleanup = checkForCleanupMethod(m); \n    } \n    if(testMethods.size() > 0) { \n      if(creator == null) \n        try { \n          if(!Modifier.isPublic(testClass \n             .getDeclaredConstructor().getModifiers())) { \n            print(\"Error: \" + testClass + \n              \" default constructor must be public\"); \n            System.exit(1); \n          } \n        } catch(NoSuchMethodException e) { \n          // Synthesized default constructor; OK \n        } \n      print(testClass.getName()); \n    } \n    for(Method m : testMethods) { \n      printnb(\"  . \" + m.getName() + \" \"); \n      try { \n        Object testObject = createTestObject(creator); \n        boolean success = false; \n        try { \n          if(m.getReturnType().equals(boolean.class)) \n            success = (Boolean)m.invoke(testObject); \n          else { \n            m.invoke(testObject); \n            success = true; // If no assert fails \n          } \n        } catch(InvocationTargetException e) { \n          // Actual exception is inside e: \n          print(e.getCause()); \n        } \n        print(success ? \"\" : \"(failed)\"); \n        testsRun++; \n        if(!success) {",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "97612051fb5c3e9413687bbb565c262a",
        "type": "source_code",
        "text": "failures++; \n          failedTests.add(testClass.getName() + \n            \": \" + m.getName()); \n        } \n        if(cleanup != null) \n          cleanup.invoke(testObject, testObject); \n      } catch(Exception e) { \n        throw new RuntimeException(e); \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "938df96c59aa51a4bdb0b5da7fd9b68e",
        "type": "source_code",
        "text": "void addIfTestMethod(Method m) { \n      if(m.getAnnotation(Test.class) == null) \n        return; \n      if(!(m.getReturnType().equals(boolean.class) || \n          m.getReturnType().equals(void.class))) \n        throw new RuntimeException(\"@Test method\" + \n          \" must return boolean or void\"); \n      m.setAccessible(true); // In case it\u2019s private, etc. \n      add(m); \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "08bbce02f6f94a0dfede9b14f96ce4a7",
        "type": "source_code",
        "text": "if(m.getAnnotation(TestObjectCreate.class) == null) \n      return null; \n    if(!m.getReturnType().equals(testClass)) \n      throw new RuntimeException(\"@TestObjectCreate \" + \n        \"must return instance of Class to be tested\"); \n    if((m.getModifiers() & \n         java.lang.reflect.Modifier.STATIC) < 1) \n      throw new RuntimeException(\"@TestObjectCreate \" + \n        \"must be static.\"); \n    m.setAccessible(true); \n    return m;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "e20d92db27977d9889064cf2f9ca54cc",
        "type": "source_code",
        "text": "if(m.getAnnotation(TestObjectCleanup.class) == null) \n      return null; \n    if(!m.getReturnType().equals(void.class)) \n      throw new RuntimeException(\"@TestObjectCleanup \" + \n        \"must return void\"); \n    if((m.getModifiers() & \n        java.lang.reflect.Modifier.STATIC) < 1) \n      throw new RuntimeException(\"@TestObjectCleanup \" + \n        \"must be static.\"); \n    if(m.getParameterTypes().length == 0 || \n       m.getParameterTypes()[0] != testClass) \n      throw new RuntimeException(\"@TestObjectCleanup \" + \n        \"must take an argument of the tested type.\"); \n    m.setAccessible(true); \n    return m;",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "0992c104dd64f106d07b7c1c69e346d8",
        "type": "source_code",
        "text": "if(creator != null) { \n      try { \n        return creator.invoke(testClass); \n      } catch(Exception e) { \n        throw new RuntimeException(\"Couldn\u2019t run \" + \n          \"@TestObject (creator) method.\"); \n      } \n    } else { // Use the default constructor: \n      try {",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "c198772b6f4b51d4745031df6e512e43",
        "type": "source_code",
        "text": "return testClass.newInstance(); \n      } catch(Exception e) { \n        throw new RuntimeException(\"Couldn\u2019t create a \" + \n          \"test object. Try using a @TestObject method.\"); \n      } \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "f7df4acf8c90d1fd33bcd924b0713d36",
        "type": "source_code",
        "text": "Map<Integer,Integer> offsetTable = \n      new HashMap<Integer,Integer>(); \n    Map<Integer,String> classNameTable = \n      new HashMap<Integer,String>(); \n    try { \n      DataInputStream data = new DataInputStream( \n        new ByteArrayInputStream(classBytes)); \n      int magic = data.readInt();  // 0xcafebabe \n      int minorVersion = data.readShort(); \n      int majorVersion = data.readShort(); \n      int constant_pool_count = data.readShort(); \n      int[] constant_pool = new int[constant_pool_count]; \n      for(int i = 1; i < constant_pool_count; i++) { \n        int tag = data.read(); \n        int tableSize; \n        switch(tag) { \n          case 1: // UTF \n            int length = data.readShort(); \n            char[] bytes = new char[length]; \n            for(int k = 0; k < bytes.length; k++) \n              bytes[k] = (char)data.read();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "49f72261838e79c010bf817b417cd787",
        "type": "source_code",
        "text": "String className = new String(bytes); \n            classNameTable.put(i, className); \n            break; \n          case 5: // LONG \n          case 6: // DOUBLE \n            data.readLong(); // discard 8 bytes \n            i++; // Special skip necessary \n            break; \n          case 7: // CLASS \n            int offset = data.readShort(); \n            offsetTable.put(i, offset); \n            break; \n          case 8: // STRING \n            data.readShort(); // discard 2 bytes \n            break; \n          case 3:  // INTEGER \n          case 4:  // FLOAT \n          case 9:  // FIELD_REF \n          case 10: // METHOD_REF \n          case 11: // INTERFACE_METHOD_REF \n          case 12: // NAME_AND_TYPE \n            data.readInt(); // discard 4 bytes; \n            break; \n          default: \n            throw new RuntimeException(\"Bad tag \" + tag); \n        } \n      } \n      short access_flags = data.readShort(); \n      int this_class = data.readShort(); \n      int super_class = data.readShort(); \n      return classNameTable.get( \n        offsetTable.get(this_class)).replace(\u2018/\u2019, \u2018.\u2019); \n    } catch(Exception e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "cc8ff2bda97d20f41071a00e447b6b5c",
        "type": "source_code",
        "text": "if(args.length > 0) { \n      for(String arg : args) \n        print(thisClass(BinaryFile.read(new File(arg)))); \n    } else \n      // Walk the entire tree: \n      for(File klass : Directory.walk(\".\", \".*\\\\.class\")) \n        print(thisClass(BinaryFile.read(klass)));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "f30f62e13b16f87c979a443d0dd5da8e",
        "type": "source_code",
        "text": "if(args.length > 0 && args[0].equals(\"-r\")) { \n      remove = true; \n      String[] nargs = new String[args.length - 1]; \n      System.arraycopy(args, 1, nargs, 0, nargs.length); \n      args = nargs; \n    } \n    new ProcessFiles( \n      new AtUnitRemover(), \"class\").start(args);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6111412d5d575bacbb37a296e64afbcd",
        "type": "source_code",
        "text": "boolean modified = false; \n    try { \n      String cName = ClassNameFinder.thisClass( \n        BinaryFile.read(cFile)); \n      if(!cName.contains(\".\")) \n        return; // Ignore unpackaged classes \n      ClassPool cPool = ClassPool.getDefault(); \n      CtClass ctClass = cPool.get(cName); \n      for(CtMethod method : ctClass.getDeclaredMethods()) { \n        MethodInfo mi = method.getMethodInfo(); \n        AnnotationsAttribute attr = (AnnotationsAttribute) \n          mi.getAttribute(AnnotationsAttribute.visibleTag); \n        if(attr == null) continue; \n        for(Annotation ann : attr.getAnnotations()) { \n          if(ann.getTypeName() \n             .startsWith(\"net.mindview.atunit\")) { \n            print(ctClass.getName() + \" Method: \" \n              + mi.getName() + \" \" + ann); \n            if(remove) { \n              ctClass.removeMethod(method); \n              modified = true; \n            } \n          } \n        } \n      } \n      // Fields are not removed in this version (see text). \n      if(modified) \n        ctClass.toBytecode(new DataOutputStream( \n          new FileOutputStream(cFile))); \n      ctClass.detach(); \n    } catch(Exception e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "66d762c0051ed18ae9a30cbe3d95d224",
        "type": "source_code",
        "text": "this.countDown = countDown;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "97b4bef9ac8144ae020fc30fff05d5d4",
        "type": "source_code",
        "text": "return \"#\" + id + \"(\" + \n      (countDown > 0 ? countDown : \"Liftoff!\") + \"), \";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5130cd6fec271ba9669a6a0e44bd958e",
        "type": "source_code",
        "text": "while(countDown-- > 0) { \n      System.out.print(status()); \n      Thread.yield(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "af201b4d8492eb8544807b956bcef8b8",
        "type": "source_code",
        "text": "LiftOff launch = new LiftOff(); \n    launch.run();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e626c4768c303f77450d256d8385edc4",
        "type": "source_code",
        "text": "Thread t = new Thread(new LiftOff()); \n    t.start(); \n    System.out.println(\"Waiting for LiftOff\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2afc5ec968902969f6229c07323430a5",
        "type": "source_code",
        "text": "for(int i = 0; i < 5; i++) \n      new Thread(new LiftOff()).start(); \n    System.out.println(\"Waiting for LiftOff\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d59e48c33d5eb6437686f3c8ea46c806",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    for(int i = 0; i < 5; i++) \n      exec.execute(new LiftOff());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "134c4ec3581b9696dd8a23c9f9cd5440",
        "type": "source_code",
        "text": "exec.shutdown();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f86490c54038249ce1a49cded5cccf5d",
        "type": "source_code",
        "text": "// Constructor argument is number of threads: \n    ExecutorService exec = Executors.newFixedThreadPool(5); \n    for(int i = 0; i < 5; i++) \n      exec.execute(new LiftOff()); \n    exec.shutdown();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "37f8cc5611317aa9b2d728e0dab44852",
        "type": "source_code",
        "text": "ExecutorService exec = \n      Executors.newSingleThreadExecutor(); \n    for(int i = 0; i < 5; i++) \n      exec.execute(new LiftOff()); \n    exec.shutdown();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b2fa80087ef70e58c5af49a892930cfe",
        "type": "source_code",
        "text": "this.id = id;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e9f90c035e180cbc4edc1979355b117e",
        "type": "source_code",
        "text": "return \"result of TaskWithResult \" + id;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6417fbbcc7232a0cc215e16586da8432",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    ArrayList<Future<String>> results = \n      new ArrayList<Future<String>>(); \n    for(int i = 0; i < 10; i++) \n      results.add(exec.submit(new TaskWithResult(i))); \n    for(Future<String> fs : results) \n      try { \n        // get() blocks until completion: \n        System.out.println(fs.get()); \n      } catch(InterruptedException e) { \n        System.out.println(e); \n        return; \n      } catch(ExecutionException e) { \n        System.out.println(e); \n      } finally { \n        exec.shutdown(); \n      }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "63de354725a02e544d3b4127c8b44ae7",
        "type": "source_code",
        "text": "try { \n      while(countDown-- > 0) { \n        System.out.print(status()); \n        // Old-style: \n        // Thread.sleep(100); \n        // Java SE5/6-style: \n        TimeUnit.MILLISECONDS.sleep(100); \n      } \n    } catch(InterruptedException e) { \n      System.err.println(\"Interrupted\"); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "17a00f24bc314d5f8865280eccce12e4",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    for(int i = 0; i < 5; i++) \n      exec.execute(new SleepingTask()); \n    exec.shutdown();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f039f6061feb99ba41e2143cae9807c8",
        "type": "source_code",
        "text": "this.priority = priority;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bdc56cfe8e400961490258e7d22cf28e",
        "type": "source_code",
        "text": "return Thread.currentThread() + \": \" + countDown;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0a4a737a886b760d478a58465ff4c0b8",
        "type": "source_code",
        "text": "Thread.currentThread().setPriority(priority); \n    while(true) { \n      // An expensive, interruptable operation: \n      for(int i = 1; i < 100000; i++) { \n        d += (Math.PI + Math.E) / (double)i; \n        if(i % 1000 == 0) \n          Thread.yield(); \n      } \n      System.out.println(this); \n      if(--countDown == 0) return; \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0a0108aaa7d9112f3f8b02806144b87a",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    for(int i = 0; i < 5; i++) \n      exec.execute( \n        new SimplePriorities(Thread.MIN_PRIORITY)); \n    exec.execute( \n        new SimplePriorities(Thread.MAX_PRIORITY)); \n    exec.shutdown();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "ae6bc3813fb13be8b0793be4c0881fe7",
        "type": "source_code",
        "text": "try { \n      while(true) { \n        TimeUnit.MILLISECONDS.sleep(100); \n        print(Thread.currentThread() + \" \" + this); \n      } \n    } catch(InterruptedException e) { \n      print(\"sleep() interrupted\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "78f395d3725a390c0f940dcee23dc87f",
        "type": "source_code",
        "text": "for(int i = 0; i < 10; i++) { \n      Thread daemon = new Thread(new SimpleDaemons()); \n      daemon.setDaemon(true); // Must call before start() \n      daemon.start(); \n    } \n    print(\"All daemons started\"); \n    TimeUnit.MILLISECONDS.sleep(175);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "64b00e5d246ab7c791a295d25e1a6195",
        "type": "source_code",
        "text": "Thread t = new Thread(r); \n    t.setDaemon(true); \n    return t;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "25363bb52a0b7fd15d155bd6900d4e25",
        "type": "source_code",
        "text": "try { \n      while(true) { \n        TimeUnit.MILLISECONDS.sleep(100); \n        print(Thread.currentThread() + \" \" + this); \n      } \n    } catch(InterruptedException e) { \n      print(\"Interrupted\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c27fa977525c374ff3f98d3908e3e4dc",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool( \n      new DaemonThreadFactory()); \n    for(int i = 0; i < 10; i++) \n      exec.execute(new DaemonFromFactory()); \n    print(\"All daemons started\"); \n    TimeUnit.MILLISECONDS.sleep(500); // Run for a while",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0b1459b6a6aeb0dc48a27bd7c5ff62b3",
        "type": "source_code",
        "text": "super(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, \n      new SynchronousQueue<Runnable>(), \n      new DaemonThreadFactory());",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "ee23f2dc35f6e5168c8212ac5d55389a",
        "type": "source_code",
        "text": "for(int i = 0; i < t.length; i++) { \n      t[i] = new Thread(new DaemonSpawn()); \n      t[i].start(); \n      printnb(\"DaemonSpawn \" + i + \" started, \"); \n    } \n    for(int i = 0; i < t.length; i++) \n      printnb(\"t[\" + i + \"].isDaemon() = \" + \n        t[i].isDaemon() + \", \"); \n    while(true) \n      Thread.yield();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "34c0ff7f682905cecccb82109a9b8d44",
        "type": "source_code",
        "text": "while(true) \n      Thread.yield();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "12fae38b460a5a9153cf9dcf6c7ae532",
        "type": "source_code",
        "text": "Thread d = new Thread(new Daemon()); \n    d.setDaemon(true); \n    d.start(); \n    printnb(\"d.isDaemon() = \" + d.isDaemon() + \", \"); \n    // Allow the daemon threads to \n    // finish their startup processes: \n    TimeUnit.SECONDS.sleep(1);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "3d9b8302590940bd7e4f0eb127645c10",
        "type": "source_code",
        "text": "try { \n      print(\"Starting ADaemon\"); \n      TimeUnit.SECONDS.sleep(1); \n    } catch(InterruptedException e) { \n      print(\"Exiting via InterruptedException\"); \n    } finally { \n      print(\"This should always run?\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ebc2382bd6fe9f33906f4b689f76b22e",
        "type": "source_code",
        "text": "Thread t = new Thread(new ADaemon()); \n    t.setDaemon(true); \n    t.start();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "156e6e906d945ae7206c6ac75ea218e7",
        "type": "source_code",
        "text": "// Store the thread name: \n    super(Integer.toString(++threadCount)); \n    start();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "51bead45308595f2d6bacfff7e6af87a",
        "type": "source_code",
        "text": "return \"#\" + getName() + \"(\" + countDown + \"), \";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "931183693de9f843c79cc4cb8df98ae7",
        "type": "source_code",
        "text": "while(true) { \n      System.out.print(this); \n      if(--countDown == 0) \n        return; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a67850f82f8d279336cb09cc3ab42ce3",
        "type": "source_code",
        "text": "for(int i = 0; i < 5; i++) \n      new SimpleThread();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "22c892789bdfc0d6a4724291e4b6b4c6",
        "type": "source_code",
        "text": "return Thread.currentThread().getName() + \n      \"(\" + countDown + \"), \";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "931183693de9f843c79cc4cb8df98ae7",
        "type": "source_code",
        "text": "while(true) { \n      System.out.print(this); \n      if(--countDown == 0) \n        return; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "55727f2d6411a546875cc314ed9176cb",
        "type": "source_code",
        "text": "for(int i = 0; i < 5; i++) \n      new SelfManaged();",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "f261626e79e8c4b3b1663459b52bb74a",
        "type": "source_code",
        "text": "Inner(String name) { \n      super(name); \n      start(); \n    } \n    public void run() { \n      try { \n        while(true) { \n          print(this); \n          if(--countDown == 0) return; \n          sleep(10); \n        } \n      } catch(InterruptedException e) { \n        print(\"interrupted\"); \n      } \n    } \n    public String toString() { \n      return getName() + \": \" + countDown; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c995ec9c79738cfeabc3f7cf8b3f2c05",
        "type": "source_code",
        "text": "inner = new Inner(name);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "86f0e13141e0555e1f44c86349ffde87",
        "type": "source_code",
        "text": "t = new Thread(name) { \n      public void run() { \n        try { \n          while(true) { \n            print(this); \n            if(--countDown == 0) return; \n            sleep(10); \n          } \n        } catch(InterruptedException e) {",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d2dd5f5df1657efad5ceeec634798906",
        "type": "source_code",
        "text": "print(\"sleep() interrupted\"); \n        } \n      } \n      public String toString() { \n        return getName() + \": \" + countDown; \n      } \n    }; \n    t.start();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5fed381baa07732ed895dad09c4db783",
        "type": "source_code",
        "text": "Thread t; \n    Inner(String name) { \n      t = new Thread(this, name); \n      t.start(); \n    } \n    public void run() { \n      try { \n        while(true) { \n          print(this); \n          if(--countDown == 0) return; \n          TimeUnit.MILLISECONDS.sleep(10); \n        } \n      } catch(InterruptedException e) { \n        print(\"sleep() interrupted\"); \n      } \n    } \n    public String toString() { \n      return t.getName() + \": \" + countDown; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c995ec9c79738cfeabc3f7cf8b3f2c05",
        "type": "source_code",
        "text": "inner = new Inner(name);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6e85a1b284c62d5f5d9904a911e073a7",
        "type": "source_code",
        "text": "t = new Thread(new Runnable() { \n      public void run() { \n        try { \n          while(true) { \n            print(this); \n            if(--countDown == 0) return; \n            TimeUnit.MILLISECONDS.sleep(10); \n          } \n        } catch(InterruptedException e) { \n          print(\"sleep() interrupted\"); \n        } \n      } \n      public String toString() { \n        return Thread.currentThread().getName() + \n          \": \" + countDown; \n      } \n    }, name);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b74982e8b7edc1e1f7120e2ae4408150",
        "type": "source_code",
        "text": "t.start();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1e63759bfdd235d9128c711f8ece620e",
        "type": "source_code",
        "text": "if(t == null) { \n      t = new Thread(name) { \n        public void run() { \n          try { \n            while(true) { \n              print(this); \n              if(--countDown == 0) return; \n              sleep(10); \n            } \n          } catch(InterruptedException e) { \n            print(\"sleep() interrupted\"); \n          } \n        } \n        public String toString() { \n          return getName() + \": \" + countDown; \n        } \n      }; \n      t.start(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "12b7ea7dbb66247108b0c50d8748cecb",
        "type": "source_code",
        "text": "new InnerThread1(\"InnerThread1\"); \n    new InnerThread2(\"InnerThread2\"); \n    new InnerRunnable1(\"InnerRunnable1\"); \n    new InnerRunnable2(\"InnerRunnable2\"); \n    new ThreadMethod(\"ThreadMethod\").runTask();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5a95a7e98ce1b633c44448773b0f882c",
        "type": "source_code",
        "text": "super(name); \n    duration = sleepTime; \n    start();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "71aafc072160d822f6a5027663788965",
        "type": "source_code",
        "text": "try { \n      sleep(duration); \n    } catch(InterruptedException e) { \n      print(getName() + \" was interrupted. \" + \n        \"isInterrupted(): \" + isInterrupted()); \n      return; \n    } \n    print(getName() + \" has awakened\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "642e2097c9345095db144f6c50810a19",
        "type": "source_code",
        "text": "super(name); \n    this.sleeper = sleeper; \n    start();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bf5c850fe8c2a5a56e117cdc2a2799fa",
        "type": "source_code",
        "text": "sleeper.join(); \n    } catch(InterruptedException e) { \n      print(\"Interrupted\"); \n    } \n    print(getName() + \" join completed\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1e9b651a30322a0d34dda748ec53975b",
        "type": "source_code",
        "text": "Sleeper \n      sleepy = new Sleeper(\"Sleepy\", 1500), \n      grumpy = new Sleeper(\"Grumpy\", 1500); \n    Joiner \n      dopey = new Joiner(\"Dopey\", sleepy), \n      doc = new Joiner(\"Doc\", grumpy); \n    grumpy.interrupt();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9f1531cc39788496fa8e59d70c94f6bd",
        "type": "source_code",
        "text": "while(d > 0) \n      d = d + (Math.PI + Math.E) / d; \n    System.in.read(); // Never gets here",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "57724a2fd2f4c74ac3154f6ebcb5dd39",
        "type": "source_code",
        "text": "setDaemon(true); \n    start();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f3d0e7f88a67f9eb29c5b6135cf2bb51",
        "type": "source_code",
        "text": "while(true) { \n      d = d + (Math.PI + Math.E) / d; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c091001eb64193d170e7f59f08f135b2",
        "type": "source_code",
        "text": "//! new UnresponsiveUI(); // Must kill this process \n    new ResponsiveUI(); \n    System.in.read(); \n    System.out.println(d); // Shows progress",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "0662d71e46c81756a163bb44d06718c8",
        "type": "source_code",
        "text": "throw new RuntimeException();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "800cfb5ea5b487bf2bf72fe093456300",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    exec.execute(new ExceptionThread());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8ec05739fc2050ea5c829ee3f42eefc5",
        "type": "source_code",
        "text": "at ExceptionThread.run(ExceptionThread.java:7) \n       at ThreadPoolExecutor$Worker.runTask(Unknown Source) \n       at ThreadPoolExecutor$Worker.run(Unknown Source) \n       at Java.lang.Thread.run(Unknown Source)",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "951648e4fb807286f9d9763f684fcf39",
        "type": "source_code",
        "text": "try { \n      ExecutorService exec = \n        Executors.newCachedThreadPool(); \n      exec.execute(new ExceptionThread()); \n    } catch(RuntimeException ue) { \n      // This statement will NOT execute! \n      System.out.println(\"Exception has been handled!\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "4f085de7f7eb5a395af550d5bcbea4f1",
        "type": "source_code",
        "text": "Thread t = Thread.currentThread(); \n    System.out.println(\"run() by \" + t); \n    System.out.println( \n      \"eh = \" + t.getUncaughtExceptionHandler()); \n    throw new RuntimeException();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "24eb4dbf70a4b603ee2875d60b0caab2",
        "type": "source_code",
        "text": "System.out.println(\"caught \" + e);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "83de4f6c14d9d6a468748f36931715a9",
        "type": "source_code",
        "text": "System.out.println(this + \" creating new Thread\"); \n    Thread t = new Thread(r); \n    System.out.println(\"created \" + t); \n    t.setUncaughtExceptionHandler(",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bcf8f48dd007d9b9a7172eb56162c241",
        "type": "source_code",
        "text": "new MyUncaughtExceptionHandler()); \n    System.out.println( \n      \"eh = \" + t.getUncaughtExceptionHandler()); \n    return t;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c8da874469b11fb0e15ceb699d8ac286",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool( \n      new HandlerThreadFactory()); \n    exec.execute(new ExceptionThread2());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ad5eb12d2029ee99445e7b5d9db8d2aa",
        "type": "source_code",
        "text": "Thread.setDefaultUncaughtExceptionHandler( \n      new MyUncaughtExceptionHandler()); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    exec.execute(new ExceptionThread());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bd88acb4766374ccdc8c6695965cabc1",
        "type": "source_code",
        "text": "generator = g; \n    id = ident;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9bdc9a5f9e49cda48cd11eaedfeb914a",
        "type": "source_code",
        "text": "while(!generator.isCanceled()) { \n      int val = generator.next(); \n      if(val % 2 != 0) { \n        System.out.println(val + \" not even!\"); \n        generator.cancel(); // Cancels all EvenCheckers \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "4d4182fe6cb7aba74ed4d0d941ec7757",
        "type": "source_code",
        "text": "System.out.println(\"Press Control-C to exit\"); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    for(int i = 0; i < count; i++)",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f915a8df3a19d75ac463a43d447e6cb6",
        "type": "source_code",
        "text": "exec.execute(new EvenChecker(gp, i)); \n    exec.shutdown();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f95d2daef13903aa785b459a03800bcc",
        "type": "source_code",
        "text": "test(gp, 10);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6c79a651461fb5efd766a4a618b86cc8",
        "type": "source_code",
        "text": "++currentEvenValue; // Danger point here! \n    ++currentEvenValue; \n    return currentEvenValue;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a54a9f9de110dc90394686f7e97dfab8",
        "type": "source_code",
        "text": "EvenChecker.test(new EvenGenerator());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8a3991aa5424de321f47b3c2c1e804a4",
        "type": "source_code",
        "text": "++currentEvenValue; \n    Thread.yield(); // Cause failure faster \n    ++currentEvenValue; \n    return currentEvenValue;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8603fe5ee76c976f197fe9e52b000f9f",
        "type": "source_code",
        "text": "EvenChecker.test(new SynchronizedEvenGenerator());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4b30a63d1cf66ee5ee9140998242460f",
        "type": "source_code",
        "text": "lock.lock(); \n    try { \n      ++currentEvenValue; \n      Thread.yield(); // Cause failure faster \n      ++currentEvenValue; \n      return currentEvenValue; \n    } finally { \n      lock.unlock(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "72f43d72cc6c3863758105e1fc4d23dc",
        "type": "source_code",
        "text": "EvenChecker.test(new MutexEvenGenerator());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1c7ee6a14b921479238d46b1d9397f03",
        "type": "source_code",
        "text": "boolean captured = lock.tryLock(); \n    try { \n      System.out.println(\"tryLock(): \" + captured); \n    } finally { \n      if(captured) \n        lock.unlock(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "61ea34aeab957053328285969a343bff",
        "type": "source_code",
        "text": "boolean captured = false; \n    try { \n      captured = lock.tryLock(2, TimeUnit.SECONDS); \n    } catch(InterruptedException e) { \n      throw new RuntimeException(e); \n    } \n    try { \n      System.out.println(\"tryLock(2, TimeUnit.SECONDS): \" + \n        captured); \n    } finally { \n      if(captured) \n        lock.unlock(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a6cd89e12a2b51fe93a36af98f17140e",
        "type": "source_code",
        "text": "final AttemptLocking al = new AttemptLocking(); \n    al.untimed(); // True -- lock is available \n    al.timed();   // True -- lock is available",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bef1741d064a89db288aca581b94de87",
        "type": "source_code",
        "text": "// Now create a separate task to grab the lock: \n    new Thread() { \n      { setDaemon(true); } \n      public void run() { \n        al.lock.lock(); \n        System.out.println(\"acquired\"); \n      } \n    }.start(); \n    Thread.yield(); // Give the 2nd task a chance \n    al.untimed(); // False -- lock grabbed by task \n    al.timed();   // False -- lock grabbed by task",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "04e607d9a2e1b26ded53a02c29c5d509",
        "type": "source_code",
        "text": "aload_0",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "0e9f1e8e40bb79e800b0cc9433830cf4",
        "type": "source_code",
        "text": "dup",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4ccbc63128d1c1614bef322b6b5fbaa5",
        "type": "source_code",
        "text": "getfield        #2; //Field i:I",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0cc183fae42dc900511347c0fe5b171a",
        "type": "source_code",
        "text": "iconst_1",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "26492ed3ca1d3e998caa8e1392d161db",
        "type": "source_code",
        "text": "iadd",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e7c90a03c7648afe51b3265143ff5c0a",
        "type": "source_code",
        "text": "putfield        #2; //Field i:I",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e70c4df10ef0983b9c8c31bd06b2a2c3",
        "type": "source_code",
        "text": "return",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "04e607d9a2e1b26ded53a02c29c5d509",
        "type": "source_code",
        "text": "aload_0",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "0e9f1e8e40bb79e800b0cc9433830cf4",
        "type": "source_code",
        "text": "dup",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4ccbc63128d1c1614bef322b6b5fbaa5",
        "type": "source_code",
        "text": "getfield        #2; //Field i:I",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bb5d96a02f87a20b126d1afe5bffca07",
        "type": "source_code",
        "text": "iconst_3",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "26492ed3ca1d3e998caa8e1392d161db",
        "type": "source_code",
        "text": "iadd",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e7c90a03c7648afe51b3265143ff5c0a",
        "type": "source_code",
        "text": "putfield        #2; //Field i:I",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e70c4df10ef0983b9c8c31bd06b2a2c3",
        "type": "source_code",
        "text": "return",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "24906763d50b920a7556d071e6c0805b",
        "type": "source_code",
        "text": "while(true) \n      evenIncrement();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d9021635a256d459711e4878b2b860ad",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    AtomicityTest at = new AtomicityTest(); \n    exec.execute(at); \n    while(true) { \n      int val = at.getValue(); \n      if(val % 2 != 0) { \n        System.out.println(val); \n        System.exit(0); \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e3c57bd9f8c7e4607369ec2ebb53bb3d",
        "type": "source_code",
        "text": "return serialNumber++; // Not thread-safe",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "34e3bc22bf15dcccd8bb067931e3d8a5",
        "type": "source_code",
        "text": "array = new int[size]; \n    len = size; \n    // Initialize to a value not produced \n    // by the SerialNumberGenerator: \n    for(int i = 0; i < size; i++) \n      array[i] = -1;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "88917e67b93bdc7218804314cff22e08",
        "type": "source_code",
        "text": "array[index] = i; \n    // Wrap index and write over old elements: \n    index = ++index % len;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "e1b076b6adf9fc02d4a9c0face294f57",
        "type": "source_code",
        "text": "for(int i = 0; i < len; i++) \n      if(array[i] == val) return true; \n    return false;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "23f0487dfe81cd3ee0e55f40db105aa6",
        "type": "source_code",
        "text": "new CircularSet(1000);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c23539246db1546d265aafaea3f738aa",
        "type": "source_code",
        "text": "Executors.newCachedThreadPool();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a5d17244925e0330a1b9185905886f11",
        "type": "source_code",
        "text": "public void run() { \n      while(true) { \n        int serial = \n          SerialNumberGenerator.nextSerialNumber(); \n        if(serials.contains(serial)) { \n          System.out.println(\"Duplicate: \" + serial); \n          System.exit(0); \n        } \n        serials.add(serial); \n      } \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "fd42208fe56e43590f338903fff1c61f",
        "type": "source_code",
        "text": "for(int i = 0; i < SIZE; i++) \n      exec.execute(new SerialChecker());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5e8a6f094d22440d80a04c612dcab70d",
        "type": "source_code",
        "text": "// Stop after n seconds if there\u2019s an argument: \n    if(args.length > 0) { \n      TimeUnit.SECONDS.sleep(new Integer(args[0])); \n      System.out.println(\"No duplicates detected\"); \n      System.exit(0); \n    }",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "24906763d50b920a7556d071e6c0805b",
        "type": "source_code",
        "text": "while(true) \n      evenIncrement();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "7f31ca731a3b44cd95836c48015b7dd0",
        "type": "source_code",
        "text": "new Timer().schedule(new TimerTask() { \n      public void run() { \n        System.err.println(\"Aborting\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "eaf02c5946979eb206a89f596bce46de",
        "type": "source_code",
        "text": "System.exit(0); \n      } \n    }, 5000); // Terminate after 5 seconds \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    AtomicIntegerTest ait = new AtomicIntegerTest(); \n    exec.execute(ait); \n    while(true) { \n      int val = ait.getValue(); \n      if(val % 2 != 0) { \n        System.out.println(val); \n        System.exit(0); \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e89e8124007727d9aa09c257db1652fb",
        "type": "source_code",
        "text": "new AtomicInteger(0);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9a8a8dccbb0fd51a184366ada9ad4529",
        "type": "source_code",
        "text": "return currentEvenValue.addAndGet(2);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "fdd609b02654e0f4cf5b9117df5fad99",
        "type": "source_code",
        "text": "EvenChecker.test(new AtomicEvenGenerator());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c545aac2548cbfbb4ec9343ac8753c25",
        "type": "source_code",
        "text": "this.x = x; \n    this.y = y;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "530b433ff8a7e779301ec0f18cb33a55",
        "type": "source_code",
        "text": "return \"x: \" + x + \", y: \" + y;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "a0aa9dd9879597cf592003e1961fc36a",
        "type": "source_code",
        "text": "public PairValuesNotEqualException() { \n      super(\"Pair values not equal: \" + Pair.this); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "47b1754556a2d31b0f8decacdf5ff384",
        "type": "source_code",
        "text": "if(x != y) \n      throw new PairValuesNotEqualException();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a781fef368bdb7996dad0743f2e6120d",
        "type": "source_code",
        "text": "Collections.synchronizedList(new ArrayList<Pair>());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ced82e7024dd71e43c08d32e7d0a1ccc",
        "type": "source_code",
        "text": "// Make a copy to keep the original safe: \n    return new Pair(p.getX(), p.getY());",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "70523dde549d274772b5389747dc56fc",
        "type": "source_code",
        "text": "storage.add(p); \n    try { \n      TimeUnit.MILLISECONDS.sleep(50);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e963e2cee5e66abcd30c4d1ff01ee06b",
        "type": "source_code",
        "text": "} catch(InterruptedException ignore) {}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "96e8453f03bd397e67f6582b8a921ff6",
        "type": "source_code",
        "text": "p.incrementX(); \n    p.incrementY(); \n    store(getPair());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "65945887088b842f5670175ec1f8b5e6",
        "type": "source_code",
        "text": "Pair temp; \n    synchronized(this) { \n      p.incrementX(); \n      p.incrementY(); \n      temp = getPair(); \n    } \n    store(temp);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "94132ef3b1500d1fdae057a7eb6e8f2e",
        "type": "source_code",
        "text": "this.pm = pm;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3ab1fc981c0a5475acbc0592b34a110a",
        "type": "source_code",
        "text": "while(true) \n      pm.increment();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "55ea3cf71d4ea7fb555b893395bbbed5",
        "type": "source_code",
        "text": "return \"Pair: \" + pm.getPair() + \n      \" checkCounter = \" + pm.checkCounter.get();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "94132ef3b1500d1fdae057a7eb6e8f2e",
        "type": "source_code",
        "text": "this.pm = pm;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "414725acaa15ae387624c357d28ffc59",
        "type": "source_code",
        "text": "while(true) { \n      pm.checkCounter.incrementAndGet(); \n      pm.getPair().checkState(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "512c421b2a2b9974f0972a55b8c2cee5",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    PairManipulator \n      pm1 = new PairManipulator(pman1), \n      pm2 = new PairManipulator(pman2);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1f5aeefa0f8e54e26d25f08ca9a25e41",
        "type": "source_code",
        "text": "PairChecker \n      pcheck1 = new PairChecker(pman1), \n      pcheck2 = new PairChecker(pman2); \n    exec.execute(pm1); \n    exec.execute(pm2); \n    exec.execute(pcheck1); \n    exec.execute(pcheck2); \n    try { \n      TimeUnit.MILLISECONDS.sleep(500); \n    } catch(InterruptedException e) { \n      System.out.println(\"Sleep interrupted\"); \n    } \n    System.out.println(\"pm1: \" + pm1 + \"\\npm2: \" + pm2); \n    System.exit(0);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "53f097b5712124c8489313ce5ec63232",
        "type": "source_code",
        "text": "PairManager \n      pman1 = new PairManager1(), \n      pman2 = new PairManager2(); \n    testApproaches(pman1, pman2);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "530db6c3dd5606138c1af185dc79954d",
        "type": "source_code",
        "text": "lock.lock(); \n    try { \n      p.incrementX(); \n      p.incrementY(); \n      store(getPair()); \n    } finally { \n      lock.unlock(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fa4fb19a22b6df2cf4b6edde6c3736c2",
        "type": "source_code",
        "text": "Pair temp; \n    lock.lock(); \n    try { \n      p.incrementX(); \n      p.incrementY(); \n      temp = getPair(); \n    } finally { \n      lock.unlock(); \n    } \n    store(temp);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a04ce6ca067c1d4a08bfb0259ac94b7d",
        "type": "source_code",
        "text": "PairManager \n      pman1 = new ExplicitPairManager1(), \n      pman2 = new ExplicitPairManager2(); \n    CriticalSection.testApproaches(pman1, pman2);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e30864aecfc132dbffbfcd7ab1e7b5ac",
        "type": "source_code",
        "text": "for(int i = 0; i < 5; i++) { \n      print(\"f()\"); \n      Thread.yield(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8b68f4d8b79e6c4f6ff20353068b5520",
        "type": "source_code",
        "text": "synchronized(syncObject) { \n      for(int i = 0; i < 5; i++) { \n        print(\"g()\"); \n        Thread.yield(); \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5a531dde565db1f53ef7262105ceca21",
        "type": "source_code",
        "text": "final DualSynch ds = new DualSynch(); \n    new Thread() { \n      public void run() { \n        ds.f(); \n      } \n    }.start(); \n    ds.g();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0cfc5f12c68c0da2129057896012afda",
        "type": "source_code",
        "text": "while(!Thread.currentThread().isInterrupted()) { \n      ThreadLocalVariableHolder.increment(); \n      System.out.println(this); \n      Thread.yield(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e37699e0f93bed8e335cee0f9fd6ea72",
        "type": "source_code",
        "text": "return \"#\" + id + \": \" + \n      ThreadLocalVariableHolder.get();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e2e8cfd499e564f3ef6a1b2888ec1256",
        "type": "source_code",
        "text": "new ThreadLocal<Integer>() { \n      private Random rand = new Random(47); \n      protected synchronized Integer initialValue() { \n        return rand.nextInt(10000); \n      } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "656c4a6d74652834cd97608fc602d76e",
        "type": "source_code",
        "text": "value.set(value.get() + 1);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f3a11069e972c32f0af6a8b2706a27c2",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    for(int i = 0; i < 5; i++) \n      exec.execute(new Accessor(i)); \n    TimeUnit.SECONDS.sleep(3);  // Run for a while \n    exec.shutdownNow();         // All Accessors will quit",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f4034dee9952b28f70acf3c6b64c557b",
        "type": "source_code",
        "text": "int temp = count; \n    if(rand.nextBoolean()) // Yield half the time \n      Thread.yield(); \n    return (count = ++temp);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0ab243673ad59002421d58ce25e3160f",
        "type": "source_code",
        "text": "new ArrayList<Entrance>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bc2fd7e0d050b9ef62a61159106ea502",
        "type": "source_code",
        "text": "this.id = id; \n    // Keep this task in a list. Also prevents \n    // garbage collection of dead tasks: \n    entrances.add(this);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "9b65cb373dd96121b9e4898bfbe3983b",
        "type": "source_code",
        "text": "while(!canceled) { \n      synchronized(this) { \n        ++number; \n      } \n      print(this + \" Total: \" + count.increment()); \n      try { \n        TimeUnit.MILLISECONDS.sleep(100); \n      } catch(InterruptedException e) { \n        print(\"sleep interrupted\"); \n      } \n    } \n    print(\"Stopping \" + this);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "4ec3110b2113cbb0e09c0c4c441da521",
        "type": "source_code",
        "text": "return \"Entrance \" + id + \": \" + getValue();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e35c0b88b5e3488479a7e3bc9876911e",
        "type": "source_code",
        "text": "return count.value();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f2b463e6161bcfe471166965dcfad777",
        "type": "source_code",
        "text": "int sum = 0; \n    for(Entrance entrance : entrances) \n      sum += entrance.getValue(); \n    return sum;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "97de44cbd1c6cc01f6c998e6123ee943",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    for(int i = 0; i < 5; i++) \n      exec.execute(new Entrance(i)); \n    // Run for a while, then stop and collect the data: \n    TimeUnit.SECONDS.sleep(3); \n    Entrance.cancel(); \n    exec.shutdown(); \n    if(!exec.awaitTermination(250, TimeUnit.MILLISECONDS)) \n      print(\"Some tasks were not terminated!\"); \n    print(\"Total: \" + Entrance.getTotalCount()); \n    print(\"Sum of Entrances: \" + Entrance.sumEntrances());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "5f241bba367e3792650229ccd0e99c0e",
        "type": "source_code",
        "text": "try { \n      TimeUnit.SECONDS.sleep(100); \n    } catch(InterruptedException e) { \n      print(\"InterruptedException\"); \n    } \n    print(\"Exiting SleepBlocked.run()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a3f78b674d8bfb7237866bf2ba265de4",
        "type": "source_code",
        "text": "try { \n      print(\"Waiting for read():\"); \n      in.read(); \n    } catch(IOException e) { \n      if(Thread.currentThread().isInterrupted()) { \n        print(\"Interrupted from blocked I/O\"); \n      } else { \n        throw new RuntimeException(e); \n      } \n    } \n    print(\"Exiting IOBlocked.run()\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bdc4c65b75de2c495ed05fee08357de7",
        "type": "source_code",
        "text": "while(true) // Never releases lock \n      Thread.yield();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ccdf35ec7c2c4a6b10aee7f46afc0ca1",
        "type": "source_code",
        "text": "new Thread() { \n      public void run() { \n        f(); // Lock acquired by this thread \n      } \n    }.start();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5fec22a584964be835c19e3f51840f87",
        "type": "source_code",
        "text": "print(\"Trying to call f()\"); \n    f(); \n    print(\"Exiting SynchronizedBlocked.run()\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c23539246db1546d265aafaea3f738aa",
        "type": "source_code",
        "text": "Executors.newCachedThreadPool();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "15d2f260bbf35e369520e1b36a21831a",
        "type": "source_code",
        "text": "Future<?> f = exec.submit(r); \n    TimeUnit.MILLISECONDS.sleep(100); \n    print(\"Interrupting \" + r.getClass().getName()); \n    f.cancel(true); // Interrupts if running \n    print(\"Interrupt sent to \" + r.getClass().getName());",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "7e20e4430a429f44b026c2251bfe4270",
        "type": "source_code",
        "text": "test(new SleepBlocked()); \n    test(new IOBlocked(System.in)); \n    test(new SynchronizedBlocked()); \n    TimeUnit.SECONDS.sleep(3); \n    print(\"Aborting with System.exit(0)\"); \n    System.exit(0); // ... since last 2 interrupts failed",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ba035f0f06a3ee90558a1bcc189c69f2",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    ServerSocket server = new ServerSocket(8080); \n    InputStream socketInput = \n      new Socket(\"localhost\", 8080).getInputStream(); \n    exec.execute(new IOBlocked(socketInput)); \n    exec.execute(new IOBlocked(System.in)); \n    TimeUnit.MILLISECONDS.sleep(100); \n    print(\"Shutting down all threads\"); \n    exec.shutdownNow(); \n    TimeUnit.SECONDS.sleep(1); \n    print(\"Closing \" + socketInput.getClass().getName()); \n    socketInput.close(); // Releases blocked thread \n    TimeUnit.SECONDS.sleep(1); \n    print(\"Closing \" + System.in.getClass().getName()); \n    System.in.close(); // Releases blocked thread",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "389fd8b8070ea2c14fa01bcd9c32e4bc",
        "type": "source_code",
        "text": "try { \n      print(\"Waiting for read() in \" + this); \n      sc.read(ByteBuffer.allocate(1)); \n    } catch(ClosedByInterruptException e) { \n      print(\"ClosedByInterruptException\"); \n    } catch(AsynchronousCloseException e) { \n      print(\"AsynchronousCloseException\"); \n    } catch(IOException e) { \n      throw new RuntimeException(e); \n    } \n    print(\"Exiting NIOBlocked.run() \" + this);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3414ef9437f5d6fc8c2508939453675f",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    ServerSocket server = new ServerSocket(8080); \n    InetSocketAddress isa = \n      new InetSocketAddress(\"localhost\", 8080); \n    SocketChannel sc1 = SocketChannel.open(isa); \n    SocketChannel sc2 = SocketChannel.open(isa); \n    Future<?> f = exec.submit(new NIOBlocked(sc1)); \n    exec.execute(new NIOBlocked(sc2)); \n    exec.shutdown(); \n    TimeUnit.SECONDS.sleep(1); \n    // Produce an interrupt via cancel: \n    f.cancel(true); \n    TimeUnit.SECONDS.sleep(1); \n    // Release the block by closing the channel: \n    sc2.close();",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "11be93e59becbcdc5943dfcd801dd435",
        "type": "source_code",
        "text": "if(count-- > 0) {",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "78738ba43155aee4904b48c159f705b7",
        "type": "source_code",
        "text": "print(\"f1() calling f2() with count \" + count); \n      f2(count); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d8159b4d9fed9c20c25e09f34ac6d651",
        "type": "source_code",
        "text": "if(count-- > 0) { \n      print(\"f2() calling f1() with count \" + count); \n      f1(count); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1f9e72a11872466b59efe948268d7bc9",
        "type": "source_code",
        "text": "final MultiLock multiLock = new MultiLock(); \n    new Thread() { \n      public void run() { \n        multiLock.f1(10); \n      } \n    }.start();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6ecb8d26c5aa2673e7d33649ef310924",
        "type": "source_code",
        "text": "// Acquire it right away, to demonstrate interruption \n    // of a task blocked on a ReentrantLock: \n    lock.lock();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "4387cb8ab7010163fda722c74e566e5b",
        "type": "source_code",
        "text": "try { \n      // This will never be available to a second task \n      lock.lockInterruptibly(); // Special call \n      print(\"lock acquired in f()\"); \n    } catch(InterruptedException e) {",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "34219125fcc96ecc920a7127bd8ec76d",
        "type": "source_code",
        "text": "print(\"Interrupted from lock acquisition in f()\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6daf637065e041db6af332b8b757d556",
        "type": "source_code",
        "text": "print(\"Waiting for f() in BlockedMutex\"); \n    blocked.f(); \n    print(\"Broken out of blocked call\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "913870e8b4f3de26d924cd7aa938ba26",
        "type": "source_code",
        "text": "Thread t = new Thread(new Blocked2()); \n    t.start(); \n    TimeUnit.SECONDS.sleep(1); \n    System.out.println(\"Issuing t.interrupt()\"); \n    t.interrupt();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8122176c6db0c2805c4f62e958da5dd2",
        "type": "source_code",
        "text": "id = ident; \n    print(\"NeedsCleanup \" + id);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9ada2181ab1e136ef132175bbba42f04",
        "type": "source_code",
        "text": "print(\"Cleaning up \" + id);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e598ad3e6430cb4ee87693bd2bf758e3",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        // point1 \n        NeedsCleanup n1 = new NeedsCleanup(1); \n        // Start try-finally immediately after definition \n        // of n1, to guarantee proper cleanup of n1: \n        try { \n          print(\"Sleeping\"); \n          TimeUnit.SECONDS.sleep(1); \n          // point2 \n          NeedsCleanup n2 = new NeedsCleanup(2); \n          // Guarantee proper cleanup of n2: \n          try { \n            print(\"Calculating\"); \n            // A time-consuming, non-blocking operation: \n            for(int i = 1; i < 2500000; i++) \n              d = d + (Math.PI + Math.E) / d; \n            print(\"Finished time-consuming operation\"); \n          } finally { \n            n2.cleanup(); \n          } \n        } finally { \n          n1.cleanup(); \n        } \n      } \n      print(\"Exiting via while() test\"); \n    } catch(InterruptedException e) { \n      print(\"Exiting via InterruptedException\"); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "01c73133283cbe40199e867affe677e2",
        "type": "source_code",
        "text": "if(args.length != 1) { \n      print(\"usage: java InterruptingIdiom delay-in-mS\"); \n      System.exit(1); \n    } \n    Thread t = new Thread(new Blocked3()); \n    t.start(); \n    TimeUnit.MILLISECONDS.sleep(new Integer(args[0])); \n    t.interrupt();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "b238e79777f7fe3deccafb1337ccbfd6",
        "type": "source_code",
        "text": "waxOn = true; // Ready to buff \n    notifyAll();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c4bcc827807174a34742f091eadac06d",
        "type": "source_code",
        "text": "waxOn = false; // Ready for another coat of wax \n    notifyAll();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "4b5deceead0bbeb84b1434aad169bede",
        "type": "source_code",
        "text": "while(waxOn == false) \n      wait();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "09848c97bb414a97ad8cc850d8aa29c5",
        "type": "source_code",
        "text": "while(waxOn == true) \n      wait();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bd220bc39a149bff3dc4f5240e24a581",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        printnb(\"Wax On! \"); \n        TimeUnit.MILLISECONDS.sleep(200); \n        car.waxed(); \n        car.waitForBuffing(); \n      } \n    } catch(InterruptedException e) { \n      print(\"Exiting via interrupt\"); \n    } \n    print(\"Ending Wax On task\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a4eef89eca0cd771d75a71311b13b923",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        car.waitForWaxing(); \n        printnb(\"Wax Off! \"); \n        TimeUnit.MILLISECONDS.sleep(200); \n        car.buffed(); \n      } \n    } catch(InterruptedException e) { \n      print(\"Exiting via interrupt\"); \n    } \n    print(\"Ending Wax Off task\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "377f3c0fec6cdd984a2d216ba1c9e411",
        "type": "source_code",
        "text": "Car car = new Car(); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    exec.execute(new WaxOff(car)); \n    exec.execute(new WaxOn(car)); \n    TimeUnit.SECONDS.sleep(5); // Run for a while... \n    exec.shutdownNow(); // Interrupt all tasks",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "14a917d97c6796426a76fb4c9b0b44bd",
        "type": "source_code",
        "text": "sharedMonitor.wait();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "14a917d97c6796426a76fb4c9b0b44bd",
        "type": "source_code",
        "text": "sharedMonitor.wait();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8600ffff4a84f14285cab730734b763d",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        wait(); \n        System.out.print(Thread.currentThread() + \" \"); \n      } \n    } catch(InterruptedException e) { \n      // OK to exit this way \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9c51aa20d422b9a40c70f07da29dbbf1",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    for(int i = 0; i < 5; i++) \n      exec.execute(new Task()); \n    exec.execute(new Task2()); \n    Timer timer = new Timer(); \n    timer.scheduleAtFixedRate(new TimerTask() { \n      boolean prod = true; \n      public void run() { \n        if(prod) { \n          System.out.print(\"\\nnotify() \"); \n          Task.blocker.prod(); \n          prod = false; \n        } else { \n          System.out.print(\"\\nnotifyAll() \"); \n          Task.blocker.prodAll(); \n          prod = true; \n        } \n      } \n    }, 400, 400); // Run every .4 second \n    TimeUnit.SECONDS.sleep(5); // Run for a while... \n    timer.cancel(); \n    System.out.println(\"\\nTimer canceled\"); \n    TimeUnit.MILLISECONDS.sleep(500); \n    System.out.print(\"Task2.blocker.prodAll() \"); \n    Task2.blocker.prodAll(); \n    TimeUnit.MILLISECONDS.sleep(500); \n    System.out.println(\"\\nShutting down\"); \n    exec.shutdownNow(); // Interrupt all tasks",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1ebb0a7419916f488ee36cbb8ed60d89",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        synchronized(this) { \n          while(restaurant.meal == null) \n            wait(); // ... for the chef to produce a meal \n        } \n        print(\"Waitperson got \" + restaurant.meal); \n        synchronized(restaurant.chef) { \n          restaurant.meal = null; \n          restaurant.chef.notifyAll(); // Ready for another \n        } \n      } \n    } catch(InterruptedException e) { \n      print(\"WaitPerson interrupted\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e54058ea39ef7f27959c6f0bb082435b",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        synchronized(this) { \n          while(restaurant.meal != null) \n            wait(); // ... for the meal to be taken \n        } \n        if(++count == 10) { \n          print(\"Out of food, closing\"); \n          restaurant.exec.shutdownNow(); \n        } \n        printnb(\"Order up! \"); \n        synchronized(restaurant.waitPerson) { \n          restaurant.meal = new Meal(count); \n          restaurant.waitPerson.notifyAll(); \n        } \n        TimeUnit.MILLISECONDS.sleep(100); \n      } \n    } catch(InterruptedException e) { \n      print(\"Chef interrupted\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "11989219699e74aa9394dfb6c2fb3e45",
        "type": "source_code",
        "text": "exec.execute(chef); \n    exec.execute(waitPerson);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "4f55d9c06832ff9947fd498fb91a542d",
        "type": "source_code",
        "text": "new Restaurant();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b37e65619eeb1494c22692565e271a12",
        "type": "source_code",
        "text": "lock.lock(); \n    try { \n      waxOn = true; // Ready to buff \n      condition.signalAll(); \n    } finally {",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "227a23b99b423e00ec3638723cc1d7e4",
        "type": "source_code",
        "text": "lock.unlock(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b6f861d9bff2e969398bb3f3dc8bf9fa",
        "type": "source_code",
        "text": "lock.lock(); \n    try { \n      waxOn = false; // Ready for another coat of wax \n      condition.signalAll(); \n    } finally { \n      lock.unlock(); \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "9b3d72528bc62f7dff4ed9152b22b804",
        "type": "source_code",
        "text": "lock.lock(); \n    try { \n      while(waxOn == false) \n        condition.await(); \n    } finally { \n      lock.unlock(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "5522c506dbb90f440b9f5a7789dd37b6",
        "type": "source_code",
        "text": "lock.lock(); \n    try { \n      while(waxOn == true) \n        condition.await(); \n    } finally { \n      lock.unlock(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bd220bc39a149bff3dc4f5240e24a581",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        printnb(\"Wax On! \"); \n        TimeUnit.MILLISECONDS.sleep(200); \n        car.waxed(); \n        car.waitForBuffing(); \n      } \n    } catch(InterruptedException e) { \n      print(\"Exiting via interrupt\"); \n    } \n    print(\"Ending Wax On task\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "045fc706ba4b9a2ea544f05a4420c9a8",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        car.waitForWaxing(); \n        printnb(\"Wax Off! \"); \n        TimeUnit.MILLISECONDS.sleep(200); \n        car.buffed(); \n      } \n    } catch(InterruptedException e) { \n      print(\"Exiting via interrupt\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2e60d7ed5f1e43ea5c53bf87e0f50e76",
        "type": "source_code",
        "text": "} \n    print(\"Ending Wax Off task\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "565c1a3096b92333e12f9fe19a5e9faa",
        "type": "source_code",
        "text": "Car car = new Car(); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    exec.execute(new WaxOff(car)); \n    exec.execute(new WaxOn(car)); \n    TimeUnit.SECONDS.sleep(5); \n    exec.shutdownNow();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "130ed8c671d0ba23cd288a6c9198aca9",
        "type": "source_code",
        "text": "rockets = queue;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4aa42fe45140fbfae2c38ca48f19a849",
        "type": "source_code",
        "text": "try { \n      rockets.put(lo); \n    } catch(InterruptedException e) { \n      print(\"Interrupted during put()\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "57e98a356d25ff03457ae62a681245a6",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        LiftOff rocket = rockets.take(); \n        rocket.run(); // Use this thread \n      } \n    } catch(InterruptedException e) { \n      print(\"Waking from take()\"); \n    } \n    print(\"Exiting LiftOffRunner\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "39fe4ff15afc71f755a2a76112c93b6f",
        "type": "source_code",
        "text": "try { \n      // Compensate for Windows/Linux difference in the \n      // length of the result produced by the Enter key: \n      new BufferedReader( \n        new InputStreamReader(System.in)).readLine(); \n    } catch(java.io.IOException e) { \n      throw new RuntimeException(e); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "2518dfbf8a48a40e53059f05a7ca1ef0",
        "type": "source_code",
        "text": "print(message); \n    getkey();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a0a0a415618c28b4bcf70fcf27c2b099",
        "type": "source_code",
        "text": "print(msg); \n    LiftOffRunner runner = new LiftOffRunner(queue); \n    Thread t = new Thread(runner); \n    t.start(); \n    for(int i = 0; i < 5; i++) \n      runner.add(new LiftOff(5)); \n    getkey(\"Press \u2018Enter\u2019 (\" + msg + \")\"); \n    t.interrupt(); \n    print(\"Finished \" + msg + \" test\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0c649c28f4b9934882c07888bbe09642",
        "type": "source_code",
        "text": "test(\"LinkedBlockingQueue\", // Unlimited size",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d1a0f3f8d99b7b918c9db333e4d39756",
        "type": "source_code",
        "text": "new LinkedBlockingQueue<LiftOff>()); \n    test(\"ArrayBlockingQueue\", // Fixed size \n      new ArrayBlockingQueue<LiftOff>(3)); \n    test(\"SynchronousQueue\", // Size of 1 \n      new SynchronousQueue<LiftOff>());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "880cff4dd97b80af81d3a0ee9e950b45",
        "type": "source_code",
        "text": "return \"Toast \" + id + \": \" + status;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d5d337a79c295e3a15b2a603e5693e7c",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        TimeUnit.MILLISECONDS.sleep( \n          100 + rand.nextInt(500)); \n        // Make toast \n        Toast t = new Toast(count++); \n        print(t); \n        // Insert into queue \n        toastQueue.put(t); \n      } \n    } catch(InterruptedException e) { \n      print(\"Toaster interrupted\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "02c9ab397aa850646734780c649d1730",
        "type": "source_code",
        "text": "} \n    print(\"Toaster off\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3779001ce7ae291f7268a4ec0b45fc91",
        "type": "source_code",
        "text": "dryQueue = dry; \n    butteredQueue = buttered;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "581e6ac2c48f43858b5fe040b05ab5d7",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        // Blocks until next piece of toast is available: \n        Toast t = dryQueue.take(); \n        t.butter(); \n        print(t); \n        butteredQueue.put(t); \n      } \n    } catch(InterruptedException e) { \n      print(\"Butterer interrupted\"); \n    } \n    print(\"Butterer off\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0dccb5d26e328c18dc2612274bd48d12",
        "type": "source_code",
        "text": "butteredQueue = buttered; \n    finishedQueue = finished;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f732e84d07b74ab23f2a4c4eb35ad226",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        // Blocks until next piece of toast is available: \n        Toast t = butteredQueue.take(); \n        t.jam(); \n        print(t); \n        finishedQueue.put(t); \n      } \n    } catch(InterruptedException e) { \n      print(\"Jammer interrupted\"); \n    } \n    print(\"Jammer off\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "d999a01a844534ebd4bb1b8564b0742d",
        "type": "source_code",
        "text": "finishedQueue = finished;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "00713cce6257931b055f206de5862f63",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        // Blocks until next piece of toast is available: \n        Toast t = finishedQueue.take();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "def7db329009984ddcc61f3cfaf9bc0f",
        "type": "source_code",
        "text": "// Verify that the toast is coming in order, \n        // and that all pieces are getting jammed: \n        if(t.getId() != counter++ || \n           t.getStatus() != Toast.Status.JAMMED) { \n          print(\">>>> Error: \" + t); \n          System.exit(1); \n        } else \n          print(\"Chomp! \" + t); \n      } \n    } catch(InterruptedException e) { \n      print(\"Eater interrupted\"); \n    } \n    print(\"Eater off\");",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "5a46d62890b796aa93c552ecf12192f1",
        "type": "source_code",
        "text": "ToastQueue dryQueue = new ToastQueue(), \n               butteredQueue = new ToastQueue(), \n               finishedQueue = new ToastQueue(); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    exec.execute(new Toaster(dryQueue)); \n    exec.execute(new Butterer(dryQueue, butteredQueue)); \n    exec.execute(new Jammer(butteredQueue, finishedQueue)); \n    exec.execute(new Eater(finishedQueue)); \n    TimeUnit.SECONDS.sleep(5); \n    exec.shutdownNow();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "4d467ecadc6dd38ff87d2d11a760faf2",
        "type": "source_code",
        "text": "try { \n      while(true) \n        for(char c = \u2018A\u2019; c <= \u2018z\u2019; c++) { \n          out.write(c); \n          TimeUnit.MILLISECONDS.sleep(rand.nextInt(500)); \n        } \n    } catch(IOException e) { \n      print(e + \" Sender write exception\"); \n    } catch(InterruptedException e) { \n      print(e + \" Sender sleep interrupted\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e5575a0966853f1ee38a8ee1d21536aa",
        "type": "source_code",
        "text": "in = new PipedReader(sender.getPipedWriter());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3f61d39a92576ca7e9fe1510224c3919",
        "type": "source_code",
        "text": "try { \n      while(true) { \n        // Blocks until characters are there: \n        printnb(\"Read: \" + (char)in.read() + \", \"); \n      } \n    } catch(IOException e) { \n      print(e + \" Receiver read exception\"); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "e69fcbf5a4f612f6d9356cec4080dc98",
        "type": "source_code",
        "text": "Sender sender = new Sender(); \n    Receiver receiver = new Receiver(sender); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    exec.execute(sender); \n    exec.execute(receiver); \n    TimeUnit.SECONDS.sleep(4); \n    exec.shutdownNow();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2c75f177fbfc1223cd7e9815e0751ac9",
        "type": "source_code",
        "text": "while(taken) \n      wait(); \n    taken = true;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6c46a34ca90af94342a586bd4e2639b4",
        "type": "source_code",
        "text": "taken = false; \n    notifyAll();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "738598ba4dcb38e6e25b50d21a8b3996",
        "type": "source_code",
        "text": "if(ponderFactor == 0) return; \n    TimeUnit.MILLISECONDS.sleep( \n      rand.nextInt(ponderFactor * 250));",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "51fcae841e8636842c50ffa15e442a3d",
        "type": "source_code",
        "text": "int ident, int ponder) { \n    this.left = left; \n    this.right = right; \n    id = ident; \n    ponderFactor = ponder;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8a35c7cd3b69b6f866ddee827854e8f9",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        print(this + \" \" + \"thinking\"); \n        pause(); \n        // Philosopher becomes hungry \n        print(this + \" \" + \"grabbing right\"); \n        right.take(); \n        print(this + \" \" + \"grabbing left\"); \n        left.take(); \n        print(this + \" \" + \"eating\"); \n        pause(); \n        right.drop(); \n        left.drop(); \n      } \n    } catch(InterruptedException e) { \n      print(this + \" \" + \"exiting via interrupt\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cf332b32d4db648acfc2256411c8bc27",
        "type": "source_code",
        "text": "int ponder = 5; \n    if(args.length > 0) \n      ponder = Integer.parseInt(args[0]); \n    int size = 5; \n    if(args.length > 1) \n      size = Integer.parseInt(args[1]); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    Chopstick[] sticks = new Chopstick[size]; \n    for(int i = 0; i < size; i++) \n      sticks[i] = new Chopstick(); \n    for(int i = 0; i < size; i++) \n      exec.execute(new Philosopher( \n        sticks[i], sticks[(i+1) % size], i, ponder)); \n    if(args.length == 3 && args[2].equals(\"timeout\")) \n      TimeUnit.SECONDS.sleep(5); \n    else { \n      System.out.println(\"Press \u2018Enter\u2019 to quit\"); \n      System.in.read(); \n    } \n    exec.shutdownNow();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "002dabdd003247d3c74baeb9b82d7003",
        "type": "source_code",
        "text": "int ponder = 5; \n    if(args.length > 0) \n      ponder = Integer.parseInt(args[0]); \n    int size = 5; \n    if(args.length > 1) \n      size = Integer.parseInt(args[1]); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    Chopstick[] sticks = new Chopstick[size]; \n    for(int i = 0; i < size; i++) \n      sticks[i] = new Chopstick(); \n    for(int i = 0; i < size; i++) \n      if(i < (size-1)) \n        exec.execute(new Philosopher( \n          sticks[i], sticks[i+1], i, ponder)); \n      else",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "9acc305afe715f3bfae94c52b0c4a080",
        "type": "source_code",
        "text": "exec.execute(new Philosopher( \n          sticks[0], sticks[i], i, ponder)); \n    if(args.length == 3 && args[2].equals(\"timeout\")) \n      TimeUnit.SECONDS.sleep(5); \n    else { \n      System.out.println(\"Press \u2018Enter\u2019 to quit\"); \n      System.in.read(); \n    } \n    exec.shutdownNow();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "f0a8d250b43864eb82008e9bc71e1e5f",
        "type": "source_code",
        "text": "this.latch = latch;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cee1e80e049c37640c4c27763f9e87af",
        "type": "source_code",
        "text": "try { \n      doWork(); \n      latch.countDown(); \n    } catch(InterruptedException ex) { \n      // Acceptable way to exit \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "95b1347c222d6e47b8efe5de8c635061",
        "type": "source_code",
        "text": "TimeUnit.MILLISECONDS.sleep(rand.nextInt(2000));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8dae5d825b45f53b750bdf03baa42719",
        "type": "source_code",
        "text": "print(this + \"completed\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3a73f9bb6c21d52741f4a94bc7e9ef1f",
        "type": "source_code",
        "text": "return String.format(\"%1$-3d \", id);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f0a8d250b43864eb82008e9bc71e1e5f",
        "type": "source_code",
        "text": "this.latch = latch;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a4e02a8eab4ca43d0f4fd7ef23302bdd",
        "type": "source_code",
        "text": "try { \n      latch.await(); \n      print(\"Latch barrier passed for \" + this); \n    } catch(InterruptedException ex) { \n      print(this + \" interrupted\"); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "78340414f1628aa2a450fa55dca223b2",
        "type": "source_code",
        "text": "return String.format(\"WaitingTask %1$-3d \", id);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "97db21d0b18052d8d808e6a5bdc2601f",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    // All must share a single CountDownLatch object: \n    CountDownLatch latch = new CountDownLatch(SIZE); \n    for(int i = 0; i < 10; i++) \n      exec.execute(new WaitingTask(latch)); \n    for(int i = 0; i < SIZE; i++) \n      exec.execute(new TaskPortion(latch)); \n    print(\"Launched all tasks\"); \n    exec.shutdown(); // Quit when all tasks complete",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "5cf99f3895603530349a4c8a73bcb26d",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        synchronized(this) { \n          strides += rand.nextInt(3); // Produces 0, 1 or 2 \n        } \n        barrier.await(); \n      } \n    } catch(InterruptedException e) { \n      // A legitimate way to exit \n    } catch(BrokenBarrierException e) { \n      // This one we want to know about \n      throw new RuntimeException(e); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b02762675d5eac10602f4ef2aa9d2424",
        "type": "source_code",
        "text": "StringBuilder s = new StringBuilder(); \n    for(int i = 0; i < getStrides(); i++) \n      s.append(\"*\"); \n    s.append(id); \n    return s.toString();",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "c23539246db1546d265aafaea3f738aa",
        "type": "source_code",
        "text": "Executors.newCachedThreadPool();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1b5aa6c6a94bee8492ce702f5a698935",
        "type": "source_code",
        "text": "barrier = new CyclicBarrier(nHorses, new Runnable() { \n      public void run() { \n        StringBuilder s = new StringBuilder(); \n        for(int i = 0; i < FINISH_LINE; i++) \n          s.append(\"=\"); // The fence on the racetrack \n        print(s); \n        for(Horse horse : horses) \n          print(horse.tracks()); \n        for(Horse horse : horses) \n          if(horse.getStrides() >= FINISH_LINE) { \n            print(horse + \"won!\"); \n            exec.shutdownNow(); \n            return; \n          } \n        try { \n          TimeUnit.MILLISECONDS.sleep(pause); \n        } catch(InterruptedException e) { \n          print(\"barrier-action sleep interrupted\"); \n        } \n      } \n    }); \n    for(int i = 0; i < nHorses; i++) { \n      Horse horse = new Horse(barrier); \n      horses.add(horse); \n      exec.execute(horse); \n    }",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "efb5fa13a396f7bd35f1495202be4d8b",
        "type": "source_code",
        "text": "int nHorses = 7; \n    int pause = 200; \n    if(args.length > 0) { // Optional argument \n      int n = new Integer(args[0]); \n      nHorses = n > 0 ? n : nHorses; \n    } \n    if(args.length > 1) { // Optional argument \n      int p = new Integer(args[1]); \n      pause = p > -1 ? p : pause; \n    } \n    new HorseRace(nHorses, pause);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6fc8b08197e6408f24b49917a144bdc0",
        "type": "source_code",
        "text": "new ArrayList<DelayedTask>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "21fc34d52945fbcb30380c7efb687de6",
        "type": "source_code",
        "text": "delta = delayInMilliseconds; \n    trigger = System.nanoTime() + \n      NANOSECONDS.convert(delta, MILLISECONDS); \n    sequence.add(this);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b6f28db01e3e76d31509299893c31385",
        "type": "source_code",
        "text": "return unit.convert( \n      trigger - System.nanoTime(), NANOSECONDS);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "07e3d547030565cb6874c485e6f4cac5",
        "type": "source_code",
        "text": "DelayedTask that = (DelayedTask)arg; \n    if(trigger < that.trigger) return -1; \n    if(trigger > that.trigger) return 1; \n    return 0;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a8f87619fd6382750fb38d14104ef415",
        "type": "source_code",
        "text": "return String.format(\"[%1$-4d]\", delta) + \n      \" Task \" + id;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1645bf36ddf519b3f78d8cf1ee9eb1c0",
        "type": "source_code",
        "text": "return \"(\" + id + \":\" + delta + \")\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "666bd6374a7df3b3b86b12e580a039f1",
        "type": "source_code",
        "text": "private ExecutorService exec; \n    public EndSentinel(int delay, ExecutorService e) { \n      super(delay); \n      exec = e;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8c0a5cd65e80f9f16df9c43d856c8f68",
        "type": "source_code",
        "text": "} \n    public void run() { \n      for(DelayedTask pt : sequence) { \n        printnb(pt.summary() + \" \"); \n      } \n      print(); \n      print(this + \" Calling shutdownNow()\"); \n      exec.shutdownNow(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "35521bf385eaeea66179c779d8f59393",
        "type": "source_code",
        "text": "this.q = q;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5bfc634efb1409d0096700144f81caff",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) \n        q.take().run(); // Run task with the current thread \n    } catch(InterruptedException e) { \n      // Acceptable way to exit \n    } \n    print(\"Finished DelayedTaskConsumer\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "278fcbfe5372d9c1ece8f754acf6b54b",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    DelayQueue<DelayedTask> queue = \n      new DelayQueue<DelayedTask>(); \n    // Fill with tasks that have random delays: \n    for(int i = 0; i < 20; i++) \n      queue.put(new DelayedTask(rand.nextInt(5000))); \n    // Set the stopping point \n    queue.add(new DelayedTask.EndSentinel(5000, exec)); \n    exec.execute(new DelayedTaskConsumer(queue));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "b828fc3db9413a8d8d2e91f0fffb430d",
        "type": "source_code",
        "text": "NANOSECONDS.convert(delta, MILLISECONDS);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7c617125f81570c0947928e2d5e62afc",
        "type": "source_code",
        "text": "new ArrayList<PrioritizedTask>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6b7dd0f94b72189f9870b984206af4cf",
        "type": "source_code",
        "text": "this.priority = priority; \n    sequence.add(this);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9fca97a52e5b68632de1e790f13109e5",
        "type": "source_code",
        "text": "return priority < arg.priority ? 1 : \n      (priority > arg.priority ? -1 : 0);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8e6bd36746fa1aeddb5eabcd28479c21",
        "type": "source_code",
        "text": "try { \n      TimeUnit.MILLISECONDS.sleep(rand.nextInt(250)); \n    } catch(InterruptedException e) { \n      // Acceptable way to exit \n    } \n    print(this);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2b9e542376b2c176a44a48e00b2bdea3",
        "type": "source_code",
        "text": "return String.format(\"[%1$-3d]\", priority) + \n      \" Task \" + id;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a3878a71d767bc23e634b2f8ccae06d8",
        "type": "source_code",
        "text": "return \"(\" + id + \":\" + priority + \")\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f004d44f572ef53cde89e9ab7f81e0ef",
        "type": "source_code",
        "text": "private ExecutorService exec; \n    public EndSentinel(ExecutorService e) { \n      super(-1); // Lowest priority in this program \n      exec = e; \n    } \n    public void run() { \n      int count = 0; \n      for(PrioritizedTask pt : sequence) { \n        printnb(pt.summary()); \n        if(++count % 5 == 0) \n          print(); \n      } \n      print(); \n      print(this + \" Calling shutdownNow()\"); \n      exec.shutdownNow(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b05bf9976403c7f5e3b9c0fa204ae71f",
        "type": "source_code",
        "text": "Queue<Runnable> q, ExecutorService e) { \n    queue = q; \n    exec = e; // Used for EndSentinel",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e28335cb6355e98823b208d19dd93d86",
        "type": "source_code",
        "text": "// Unbounded queue; never blocks. \n    // Fill it up fast with random priorities: \n    for(int i = 0; i < 20; i++) { \n      queue.add(new PrioritizedTask(rand.nextInt(10))); \n      Thread.yield(); \n    } \n    // Trickle in highest-priority jobs: \n    try { \n      for(int i = 0; i < 10; i++) { \n        TimeUnit.MILLISECONDS.sleep(250); \n        queue.add(new PrioritizedTask(10)); \n      } \n      // Add jobs, lowest priority first: \n      for(int i = 0; i < 10; i++) \n        queue.add(new PrioritizedTask(i)); \n      // A sentinel to stop all the tasks: \n      queue.add(new PrioritizedTask.EndSentinel(exec)); \n    } catch(InterruptedException e) { \n      // Acceptable way to exit \n    } \n    print(\"Finished PrioritizedTaskProducer\");",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "55e56680b507f47495e26d02fb3254a8",
        "type": "source_code",
        "text": "PriorityBlockingQueue<Runnable> q) { \n    this.q = q;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "43ce54cdda826741b28533781a6f0675",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) \n        // Use current thread to run the task: \n        q.take().run(); \n    } catch(InterruptedException e) { \n      // Acceptable way to exit \n    } \n    print(\"Finished PrioritizedTaskConsumer\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "789b77c4e6418a43c67989059a3f347f",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    PriorityBlockingQueue<Runnable> queue = \n      new PriorityBlockingQueue<Runnable>(); \n    exec.execute(new PrioritizedTaskProducer(queue, exec)); \n    exec.execute(new PrioritizedTaskConsumer(queue));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d4e66c4b84b67f292c8e0bb4bd72cf7a",
        "type": "source_code",
        "text": "return thermostat;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3408292caadd7d8f304eb659e876083f",
        "type": "source_code",
        "text": "thermostat = value;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0b90aee8ad9b4d53acd430b0a20da28d",
        "type": "source_code",
        "text": "new ScheduledThreadPoolExecutor(10);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d89528a7547a79f84290278099499015",
        "type": "source_code",
        "text": "scheduler.schedule(event,delay,TimeUnit.MILLISECONDS);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "aec0c5540d4a6d4abb648f48765be59f",
        "type": "source_code",
        "text": "scheduler.scheduleAtFixedRate( \n      event, initialDelay, period, TimeUnit.MILLISECONDS);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1979cfd06a34dac8dff20449c5950c80",
        "type": "source_code",
        "text": "public void run() { \n      // Put hardware control code here to \n      // physically turn on the light. \n      System.out.println(\"Turning on lights\"); \n      light = true; \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bb928dfe868965c5cbc9f33eb7a824cc",
        "type": "source_code",
        "text": "public void run() { \n      // Put hardware control code here to \n      // physically turn off the light. \n      System.out.println(\"Turning off lights\"); \n      light = false; \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "25ea0c9c1f5024d9f2001fbf582e35b5",
        "type": "source_code",
        "text": "public void run() { \n      // Put hardware control code here. \n      System.out.println(\"Turning greenhouse water on\"); \n      water = true; \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "696eb3aadae75a5055274ee85b365392",
        "type": "source_code",
        "text": "public void run() { \n      // Put hardware control code here. \n      System.out.println(\"Turning greenhouse water off\"); \n      water = false; \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ebf393b5d638cc1fcce0e0b6b5ef18ce",
        "type": "source_code",
        "text": "public void run() { \n      // Put hardware control code here. \n      System.out.println(\"Thermostat to night setting\"); \n      setThermostat(\"Night\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c39ad0477e5b207d5929543d44416587",
        "type": "source_code",
        "text": "public void run() { \n      // Put hardware control code here. \n      System.out.println(\"Thermostat to day setting\"); \n      setThermostat(\"Day\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "98088f4ef99ba76bc5c76c2506fe978d",
        "type": "source_code",
        "text": "public void run() { System.out.println(\"Bing!\"); }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "225966bfa57f7e5e20138b40f0dd2c59",
        "type": "source_code",
        "text": "public void run() { \n      System.out.println(\"Terminating\"); \n      scheduler.shutdownNow(); \n      // Must start a separate task to do this job, \n      // since the scheduler has been shut down: \n      new Thread() { \n        public void run() { \n          for(DataPoint d : data) \n            System.out.println(d); \n        } \n      }.start(); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0057f9ec438266d1c1c41745760c3e17",
        "type": "source_code",
        "text": "final Calendar time; \n    final float temperature; \n    final float humidity; \n    public DataPoint(Calendar d, float temp, float hum) { \n      time = d; \n      temperature = temp; \n      humidity = hum; \n    } \n    public String toString() { \n      return time.getTime() + \n        String.format( \n          \" temperature: %1$.1f humidity: %2$.2f\", \n          temperature, humidity); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "7354a90b4047b51c73121a4f17e1eeb4",
        "type": "source_code",
        "text": "lastTime.set(Calendar.MINUTE, 30); \n    lastTime.set(Calendar.SECOND, 00);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "727c79de89bf5b57e5c2c08ff4b355fd",
        "type": "source_code",
        "text": "new ArrayList<DataPoint>());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f3e67f9254e8d4d7dd503bc6c3085988",
        "type": "source_code",
        "text": "public void run() { \n      System.out.println(\"Collecting data\"); \n      synchronized(GreenhouseScheduler.this) { \n        // Pretend the interval is longer than it is: \n        lastTime.set(Calendar.MINUTE, \n          lastTime.get(Calendar.MINUTE) + 30); \n        // One in 5 chances of reversing the direction: \n        if(rand.nextInt(5) == 4) \n          tempDirection = -tempDirection; \n        // Store previous value: \n        lastTemp = lastTemp + \n          tempDirection * (1.0f + rand.nextFloat()); \n        if(rand.nextInt(5) == 4) \n          humidityDirection = -humidityDirection; \n        lastHumidity = lastHumidity + \n          humidityDirection * rand.nextFloat();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "622bbc158020099dc0d826d7f423bce4",
        "type": "source_code",
        "text": "// Calendar must be cloned, otherwise all \n        // DataPoints hold references to the same lastTime. \n        // For a basic object like Calendar, clone() is OK. \n        data.add(new DataPoint((Calendar)lastTime.clone(), \n          lastTemp, lastHumidity)); \n      } \n    }",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "a22d0eec8d1671650e05dbe9b2229119",
        "type": "source_code",
        "text": "GreenhouseScheduler gh = new GreenhouseScheduler(); \n    gh.schedule(gh.new Terminate(), 5000); \n    // Former \"Restart\" class not necessary: \n    gh.repeat(gh.new Bell(), 0, 1000); \n    gh.repeat(gh.new ThermostatNight(), 0, 2000); \n    gh.repeat(gh.new LightOn(), 0, 200); \n    gh.repeat(gh.new LightOff(), 0, 400); \n    gh.repeat(gh.new WaterOn(), 0, 600); \n    gh.repeat(gh.new WaterOff(), 0, 800); \n    gh.repeat(gh.new ThermostatDay(), 0, 1400); \n    gh.repeat(gh.new CollectData(), 500, 500);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "9045ffe84c064f830f8213a94c5b438c",
        "type": "source_code",
        "text": "this.size = size; \n    checkedOut = new boolean[size]; \n    available = new Semaphore(size, true); \n    // Load pool with objects that can be checked out: \n    for(int i = 0; i < size; ++i) \n      try { \n        // Assumes a default constructor: \n        items.add(classObject.newInstance()); \n      } catch(Exception e) { \n        throw new RuntimeException(e); \n      }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "050465bb9f61f2ddc6874732ebe2c017",
        "type": "source_code",
        "text": "available.acquire(); \n    return getItem();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e5d5b322fbc9dddfc8b17a58f312ac48",
        "type": "source_code",
        "text": "if(releaseItem(x)) \n      available.release();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c53bb68a50387472b039f5edf49a49c6",
        "type": "source_code",
        "text": "for(int i = 0; i < size; ++i) \n      if(!checkedOut[i]) { \n        checkedOut[i] = true; \n        return items.get(i); \n      } \n    return null; // Semaphore prevents reaching here",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "9740b0f65a325065c2152830dd573fd0",
        "type": "source_code",
        "text": "int index = items.indexOf(item); \n    if(index == -1) return false; // Not in the list \n    if(checkedOut[index]) { \n      checkedOut[index] = false; \n      return true; \n    } \n    return false; // Wasn\u2019t checked out",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "2e3f50b316c1c3b1630595d228177cc6",
        "type": "source_code",
        "text": "// Expensive, interruptible operation: \n    for(int i = 1; i < 10000; i++) { \n      d += (Math.PI + Math.E) / (double)i; \n    }",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "01d54da70bb133b26b44491a43cbeae7",
        "type": "source_code",
        "text": "this.pool = pool;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "85bb85c1b1bc7096672250cbba204292",
        "type": "source_code",
        "text": "try { \n      T item = pool.checkOut(); \n      print(this + \"checked out \" + item); \n      TimeUnit.SECONDS.sleep(1); \n      print(this +\"checking in \" + item); \n      pool.checkIn(item); \n    } catch(InterruptedException e) { \n      // Acceptable way to terminate \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7039b29bb1f56388fb3ee92caab97872",
        "type": "source_code",
        "text": "return \"CheckoutTask \" + id + \" \";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "45707effac40329836eee90eae66b459",
        "type": "source_code",
        "text": "final Pool<Fat> pool = \n      new Pool<Fat>(Fat.class, SIZE); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    for(int i = 0; i < SIZE; i++) \n      exec.execute(new CheckoutTask<Fat>(pool)); \n    print(\"All CheckoutTasks created\"); \n    List<Fat> list = new ArrayList<Fat>(); \n    for(int i = 0; i < SIZE; i++) { \n      Fat f = pool.checkOut(); \n      printnb(i + \": main() thread checked out \"); \n      f.operation(); \n      list.add(f); \n    } \n    Future<?> blocked = exec.submit(new Runnable() { \n      public void run() { \n        try {",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "df2495da1922d984db09b8fa08456478",
        "type": "source_code",
        "text": "// Semaphore prevents additional checkout, \n          // so call is blocked: \n          pool.checkOut(); \n        } catch(InterruptedException e) { \n          print(\"checkOut() Interrupted\"); \n        } \n      } \n    }); \n    TimeUnit.SECONDS.sleep(2); \n    blocked.cancel(true); // Break out of blocked call \n    print(\"Checking in objects in \" + list); \n    for(Fat f : list) \n      pool.checkIn(f); \n    for(Fat f : list) \n      pool.checkIn(f); // Second checkIn ignored \n    exec.shutdown();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "42022eda712b2a6538f2260539a72a0b",
        "type": "source_code",
        "text": "exchanger = exchg;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "57e8aa45ee8423c9f0a3499408037946",
        "type": "source_code",
        "text": "generator = gen; \n    this.holder = holder;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bff42c50924e60989f5e6f8823d2982a",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        for(int i = 0; i < ExchangerDemo.size; i++) \n          holder.add(generator.next()); \n        // Exchange full for empty: \n        holder = exchanger.exchange(holder); \n      } \n    } catch(InterruptedException e) { \n      // OK to terminate this way. \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ecf9550fd87af399777c33d5db65fba8",
        "type": "source_code",
        "text": "exchanger = ex; \n    this.holder = holder;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f5d2b5046d46660b842ca93b0187922c",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        holder = exchanger.exchange(holder); \n        for(T x : holder) { \n          value = x; // Fetch out value \n          holder.remove(x); // OK for CopyOnWriteArrayList \n        } \n      } \n    } catch(InterruptedException e) { \n      // OK to terminate this way. \n    } \n    System.out.println(\"Final value: \" + value);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ff987a0a56c1ef3cdca2419cb5f09582",
        "type": "source_code",
        "text": "if(args.length > 0) \n      size = new Integer(args[0]); \n    if(args.length > 1) \n      delay = new Integer(args[1]); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    Exchanger<List<Fat>> xc = new Exchanger<List<Fat>>(); \n    List<Fat> \n      producerList = new CopyOnWriteArrayList<Fat>(), \n      consumerList = new CopyOnWriteArrayList<Fat>(); \n    exec.execute(new ExchangerProducer<Fat>(xc, \n      BasicGenerator.create(Fat.class), producerList)); \n    exec.execute( \n      new ExchangerConsumer<Fat>(xc,consumerList)); \n    TimeUnit.SECONDS.sleep(delay); \n    exec.shutdownNow();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "64f88112347e181a5ddbbc0a32095721",
        "type": "source_code",
        "text": "return \"[\" + serviceTime + \"]\";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "dbb5230d13ebe13717246cee36d19f3b",
        "type": "source_code",
        "text": "super(maxLineSize);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4e70e0bc05ea6c57d922a0de71de458c",
        "type": "source_code",
        "text": "if(this.size() == 0) \n      return \"[Empty]\"; \n    StringBuilder result = new StringBuilder(); \n    for(Customer customer : this) \n      result.append(customer); \n    return result.toString();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "371ab31b31d992625a2651d1733184ab",
        "type": "source_code",
        "text": "customers = cq;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e1c43c214f517a5eccfd3b9f14d9ff13",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        TimeUnit.MILLISECONDS.sleep(rand.nextInt(300)); \n        customers.put(new Customer(rand.nextInt(1000))); \n      } \n    } catch(InterruptedException e) { \n      System.out.println(\"CustomerGenerator interrupted\"); \n    } \n    System.out.println(\"CustomerGenerator terminating\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "4e312d4153f8757c542d170862e3b3e8",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        Customer customer = customers.take(); \n        TimeUnit.MILLISECONDS.sleep( \n          customer.getServiceTime()); \n        synchronized(this) { \n          customersServed++; \n          while(!servingCustomerLine) \n            wait(); \n        } \n      } \n    } catch(InterruptedException e) { \n      System.out.println(this + \"interrupted\"); \n    } \n    System.out.println(this + \"terminating\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "041af52ddb8069bb179b63407da333ae",
        "type": "source_code",
        "text": "customersServed = 0; \n    servingCustomerLine = false;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "624618b378a8cdd5df71ed29f81ab606",
        "type": "source_code",
        "text": "assert !servingCustomerLine:\"already serving: \" + this; \n    servingCustomerLine = true; \n    notifyAll();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "0add99a07c86929a625d56bae207f8b4",
        "type": "source_code",
        "text": "return customersServed < other.customersServed ? -1 : \n      (customersServed == other.customersServed ? 0 : 1);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "dd3935ad2931472319aede1f3427fb5f",
        "type": "source_code",
        "text": "new PriorityQueue<Teller>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0780808549326a8733e98ef20039edad",
        "type": "source_code",
        "text": "new LinkedList<Teller>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "64f855b6f7241c15ab592bff4128f818",
        "type": "source_code",
        "text": "CustomerLine customers, int adjustmentPeriod) { \n    exec = e; \n    this.customers = customers; \n    this.adjustmentPeriod = adjustmentPeriod; \n    // Start with a single teller: \n    Teller teller = new Teller(customers); \n    exec.execute(teller); \n    workingTellers.add(teller);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "fb059bb470f11c1618515d677caf6f04",
        "type": "source_code",
        "text": "// This is actually a control system. By adjusting \n    // the numbers, you can reveal stability issues in \n    // the control mechanism. \n    // If line is too long, add another teller: \n    if(customers.size() / workingTellers.size() > 2) { \n        // If tellers are on break or doing \n        // another job, bring one back: \n        if(tellersDoingOtherThings.size() > 0) { \n          Teller teller = tellersDoingOtherThings.remove(); \n          teller.serveCustomerLine(); \n          workingTellers.offer(teller); \n          return; \n        } \n      // Else create (hire) a new teller \n      Teller teller = new Teller(customers); \n      exec.execute(teller); \n      workingTellers.add(teller); \n      return; \n    } \n    // If line is short enough, remove a teller: \n    if(workingTellers.size() > 1 && \n      customers.size() / workingTellers.size() < 2) \n        reassignOneTeller(); \n    // If there is no line, we only need one teller: \n    if(customers.size() == 0) \n      while(workingTellers.size() > 1) \n        reassignOneTeller();",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "73ddc239273d10b3aa277c42d44895f1",
        "type": "source_code",
        "text": "Teller teller = workingTellers.poll(); \n    teller.doSomethingElse(); \n    tellersDoingOtherThings.offer(teller);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "86030c81bc991f57e2c977d0d1c409e9",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        TimeUnit.MILLISECONDS.sleep(adjustmentPeriod); \n        adjustTellerNumber(); \n        System.out.print(customers + \" { \"); \n        for(Teller teller : workingTellers) \n          System.out.print(teller.shortString() + \" \"); \n        System.out.println(\"}\"); \n      } \n    } catch(InterruptedException e) { \n      System.out.println(this + \"interrupted\"); \n    } \n    System.out.println(this + \"terminating\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "317d041e510912a9b813d42a01656701",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    // If line is too long, customers will leave: \n    CustomerLine customers = \n      new CustomerLine(MAX_LINE_SIZE); \n    exec.execute(new CustomerGenerator(customers)); \n    // Manager will add and remove tellers as necessary: \n    exec.execute(new TellerManager( \n      exec, customers, ADJUSTMENT_PERIOD)); \n    if(args.length > 0) // Optional argument \n      TimeUnit.SECONDS.sleep(new Integer(args[0])); \n    else { \n      System.out.println(\"Press \u2018Enter\u2019 to quit\"); \n      System.in.read(); \n    } \n    exec.shutdownNow();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "78ea26c79e9364b371a9082c7dc14038",
        "type": "source_code",
        "text": "customer = cust; \n    waitPerson = wp; \n    food = f;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "829cbd91d6b69bda510fd5f1bcee5c26",
        "type": "source_code",
        "text": "return \"Order: \" + id + \" item: \" + food + \n      \" for: \" + customer + \n      \" served by: \" + waitPerson;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "d307eb3dedb89995572fd53a5b23b36c",
        "type": "source_code",
        "text": "order = ord; \n    food = f;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f909382599428ddd14b7a1f1943462af",
        "type": "source_code",
        "text": "new SynchronousQueue<Plate>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5c82bae1e83abb38dd7cd0654c30bae2",
        "type": "source_code",
        "text": "// Only blocks if customer is still \n    // eating the previous course: \n    placeSetting.put(p);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "33a10929b959b0e863c55cd331c52842",
        "type": "source_code",
        "text": "for(Course course : Course.values()) { \n      Food food = course.randomSelection(); \n      try { \n        waitPerson.placeOrder(this, food); \n        // Blocks until course has been delivered: \n        print(this + \"eating \" + placeSetting.take()); \n      } catch(InterruptedException e) { \n        print(this + \"waiting for \" + \n          course + \" interrupted\"); \n        break; \n      } \n    } \n    print(this + \"finished meal, leaving\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "22048b57ff08a3648026764fcea1f48a",
        "type": "source_code",
        "text": "return \"Customer \" + id + \" \";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "797cfdafeac6c07c7fe225fe4e4aa2d3",
        "type": "source_code",
        "text": "new LinkedBlockingQueue<Plate>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "440ec8d196263d8b71853c45497d80ba",
        "type": "source_code",
        "text": "try { \n      // Shouldn\u2019t actually block because this is \n      // a LinkedBlockingQueue with no size limit: \n      restaurant.orders.put(new Order(cust, this, food)); \n    } catch(InterruptedException e) { \n      print(this + \" placeOrder interrupted\"); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "c97a883b7882ba87b594902b25613994",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        // Blocks until a course is ready \n        Plate plate = filledOrders.take(); \n        print(this + \"received \" + plate + \n          \" delivering to \" + \n          plate.getOrder().getCustomer()); \n        plate.getOrder().getCustomer().deliver(plate); \n      } \n    } catch(InterruptedException e) { \n      print(this + \" interrupted\"); \n    } \n    print(this + \" off duty\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "15153fce6fe3ad34fa69c630efcc05b9",
        "type": "source_code",
        "text": "return \"WaitPerson \" + id + \" \";",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e0ac9c094b74aac78c37ec2f470cd727",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        // Blocks until an order appears: \n        Order order = restaurant.orders.take(); \n        Food requestedItem = order.item(); \n        // Time to prepare order: \n        TimeUnit.MILLISECONDS.sleep(rand.nextInt(500)); \n        Plate plate = new Plate(order, requestedItem); \n        order.getWaitPerson().filledOrders.put(plate); \n      } \n    } catch(InterruptedException e) { \n      print(this + \" interrupted\"); \n    } \n    print(this + \" off duty\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1d0ffe867a6d7d970c79348e036870e2",
        "type": "source_code",
        "text": "new ArrayList<WaitPerson>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "eaf96908bf150b9078a2ea67de83b1ee",
        "type": "source_code",
        "text": "orders = new LinkedBlockingQueue<Order>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7cb76451dfa580f38a430b5dd79ed288",
        "type": "source_code",
        "text": "int nChefs) { \n    exec = e; \n    for(int i = 0; i < nWaitPersons; i++) { \n      WaitPerson waitPerson = new WaitPerson(this); \n      waitPersons.add(waitPerson); \n      exec.execute(waitPerson); \n    } \n    for(int i = 0; i < nChefs; i++) { \n      Chef chef = new Chef(this); \n      chefs.add(chef);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8d3b3eb0b9669d0f2cd6dbdc876b110a",
        "type": "source_code",
        "text": "exec.execute(chef); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "64d7311478e528b5296494191ec8786b",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        // A new customer arrives; assign a WaitPerson: \n        WaitPerson wp = waitPersons.get( \n          rand.nextInt(waitPersons.size())); \n        Customer c = new Customer(wp); \n        exec.execute(c); \n        TimeUnit.MILLISECONDS.sleep(100); \n      } \n    } catch(InterruptedException e) { \n      print(\"Restaurant interrupted\"); \n    } \n    print(\"Restaurant closing\");",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "b9346daa9586ce1c2f3f0ddebc3b135c",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    Restaurant restaurant = new Restaurant(exec, 5, 2); \n    exec.execute(restaurant); \n    if(args.length > 0) // Optional argument \n      TimeUnit.SECONDS.sleep(new Integer(args[0])); \n    else { \n      print(\"Press \u2018Enter\u2019 to quit\"); \n      System.in.read(); \n    } \n    exec.shutdownNow();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "3e58e861fbfe4cf9d0d6123b3c513952",
        "type": "source_code",
        "text": "engine = false, driveTrain = false, wheels = false;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d0a259c2bc59371ed5f01fbfb8814797",
        "type": "source_code",
        "text": "driveTrain = true;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bdd87bce761dfa5802b8cd34ff960239",
        "type": "source_code",
        "text": "return \"Car \" + id + \" [\" + \" engine: \" + engine \n      + \" driveTrain: \" + driveTrain \n      + \" wheels: \" + wheels + \" ]\";",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1c02ff8bc4179e9e48f2b4c7a33dd2b1",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        TimeUnit.MILLISECONDS.sleep(500); \n        // Make chassis: \n        Car c = new Car(counter++); \n        print(\"ChassisBuilder created \" + c); \n        // Insert into queue \n        carQueue.put(c); \n      } \n    } catch(InterruptedException e) { \n      print(\"Interrupted: ChassisBuilder\"); \n    } \n    print(\"ChassisBuilder off\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "b710dfcda039d7a2f78501c1722e8675",
        "type": "source_code",
        "text": "chassisQueue = cq; \n    finishingQueue = fq; \n    robotPool = rp;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d27ce9e9351a001735ec34610f4f9dd8",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        // Blocks until chassis is available: \n        car = chassisQueue.take(); \n        // Hire robots to perform work: \n        robotPool.hire(EngineRobot.class, this); \n        robotPool.hire(DriveTrainRobot.class, this); \n        robotPool.hire(WheelRobot.class, this); \n        barrier.await(); // Until the robots finish \n        // Put car into finishingQueue for further work \n        finishingQueue.put(car); \n      } \n    } catch(InterruptedException e) { \n      print(\"Exiting Assembler via interrupt\"); \n    } catch(BrokenBarrierException e) { \n      // This one we want to know about \n      throw new RuntimeException(e); \n    } \n    print(\"Assembler off\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1820609a6a1d7c432a7dd48f52c16d4e",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        print(carQueue.take()); \n      } \n    } catch(InterruptedException e) { \n      print(\"Exiting Reporter via interrupt\"); \n    } \n    print(\"Reporter off\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e5f22779b8bbe157c96655a8bbcd410c",
        "type": "source_code",
        "text": "this.assembler = assembler; \n    return this;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a44ad6ca642af81fc584c582122a1960",
        "type": "source_code",
        "text": "engage = true; \n    notifyAll();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "42857719988a08c9d24a9c40c81038c6",
        "type": "source_code",
        "text": "try { \n      powerDown(); // Wait until needed",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8a787bccdcf5476444d5506e9bf804d3",
        "type": "source_code",
        "text": "while(!Thread.interrupted()) { \n        performService(); \n        assembler.barrier().await(); // Synchronize \n        // We\u2019re done with that job... \n        powerDown(); \n      } \n    } catch(InterruptedException e) { \n      print(\"Exiting \" + this + \" via interrupt\"); \n    } catch(BrokenBarrierException e) { \n      // This one we want to know about \n      throw new RuntimeException(e); \n    } \n    print(this + \" off\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "190c210a4b987aabc08a3ac98c565634",
        "type": "source_code",
        "text": "engage = false; \n    assembler = null; // Disconnect from the Assembler \n    // Put ourselves back in the available pool: \n    pool.release(this); \n    while(engage == false)  // Power down \n      wait();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "af63721faee3c16e540d809d4bcff45b",
        "type": "source_code",
        "text": "print(this + \" installing engine\"); \n    assembler.car().addEngine();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0e138a94b87082eb6d349eed4a936796",
        "type": "source_code",
        "text": "print(this + \" installing DriveTrain\"); \n    assembler.car().addDriveTrain();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d586158f85d4beaef0da46cc0b638f27",
        "type": "source_code",
        "text": "print(this + \" installing Wheels\"); \n    assembler.car().addWheels();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "40535d1f65316e194d2ad8bc31bb84d9",
        "type": "source_code",
        "text": "pool.add(r); \n    notifyAll();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2177ba80bedbb365be91fbb10edec260",
        "type": "source_code",
        "text": "for(Robot r : pool) \n      if(r.getClass().equals(robotType)) { \n        pool.remove(r);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "48ee08bceab687d5dbb1944a82560a74",
        "type": "source_code",
        "text": "r.assignAssembler(d); \n        r.engage(); // Power it up to do the task \n        return; \n      } \n    wait(); // None available \n    hire(robotType, d); // Try again, recursively",
        "programming_language": "verilog",
        "weight": 0.0
    },
    {
        "id": "d1cf870736230c2d345bee0470b32160",
        "type": "source_code",
        "text": "CarQueue chassisQueue = new CarQueue(), \n             finishingQueue = new CarQueue(); \n    ExecutorService exec = Executors.newCachedThreadPool(); \n    RobotPool robotPool = new RobotPool(); \n    exec.execute(new EngineRobot(robotPool)); \n    exec.execute(new DriveTrainRobot(robotPool)); \n    exec.execute(new WheelRobot(robotPool)); \n    exec.execute(new Assembler( \n      chassisQueue, finishingQueue, robotPool)); \n    exec.execute(new Reporter(finishingQueue)); \n    // Start everything running by producing chassis: \n    exec.execute(new ChassisBuilder(chassisQueue)); \n    TimeUnit.SECONDS.sleep(7); \n    exec.shutdownNow();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "86c20b1286968fc7a756bfbf5ec3563c",
        "type": "source_code",
        "text": "lock.lock(); \n    try { \n      ++counter; \n    } finally { \n      lock.unlock(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "345fbd74d5bfbb97fa1ec668ddd5c94b",
        "type": "source_code",
        "text": "long start = System.nanoTime(); \n    for(long i = 0; i < 10000000L; i++) \n      incr.increment(); \n    return System.nanoTime() - start;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "670b55d820b9771a3120c6680375c459",
        "type": "source_code",
        "text": "long synchTime = test(new SynchronizingTest()); \n    long lockTime = test(new LockingTest()); \n    System.out.printf(\"synchronized: %1$10d\\n\", synchTime); \n    System.out.printf(\"Lock:         %1$10d\\n\", lockTime); \n    System.out.printf(\"Lock/synchronized = %1$.3f\", \n      (double)lockTime/(double)synchTime);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ba9371ef0e003ad81cac7d3f978b59f5",
        "type": "source_code",
        "text": "939098964",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "5f3a67e5b2268867ae6e8bb3fa657876",
        "type": "source_code",
        "text": "Executors.newFixedThreadPool(N*2);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "38860bbc6713bdf6be68759aee38f11a",
        "type": "source_code",
        "text": "new CyclicBarrier(N*2 + 1);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "d36dd0b78a931aabdc0bd3a97fc0ad96",
        "type": "source_code",
        "text": "// Load the array of random numbers:",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "8213b5eba516ea425bf103df2fd8e453",
        "type": "source_code",
        "text": "Random rand = new Random(47); \n    for(int i = 0; i < SIZE; i++) \n      preLoaded[i] = rand.nextInt();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "c9bded6c9ce3e33669fc7de5f603f70c",
        "type": "source_code",
        "text": "public void run() { \n      for(long i = 0; i < cycles; i++) \n        accumulate(); \n      try { \n        barrier.await(); \n      } catch(Exception e) { \n        throw new RuntimeException(e); \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "fcc93bf64e1dee84bc6de1fb16bed63f",
        "type": "source_code",
        "text": "private volatile long value; \n    public void run() { \n      for(long i = 0; i < cycles; i++) \n        value = read(); \n      try { \n        barrier.await(); \n      } catch(Exception e) { \n        throw new RuntimeException(e); \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "355be9d760a344468b8da65f5776d235",
        "type": "source_code",
        "text": "long start = System.nanoTime(); \n    for(int i = 0; i < N; i++) { \n      exec.execute(new Modifier()); \n      exec.execute(new Reader()); \n    } \n    try { \n      barrier.await(); \n    } catch(Exception e) { \n      throw new RuntimeException(e); \n    } \n    duration = System.nanoTime() - start; \n    printf(\"%-13s: %13d\\n\", id, duration);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "453aa8ca6f4c9369a22ff41ef5a4f03b",
        "type": "source_code",
        "text": "printf(\"%-22s: %.2f\\n\", acc1.id + \"/\" + acc2.id, \n      (double)acc1.duration/(double)acc2.duration);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "57a99c03954aa09ab5242b5b00776727",
        "type": "source_code",
        "text": "value += preLoaded[index++]; \n    if(index >= SIZE) index = 0;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ae07cb0df2f07d94203b74a9acad30f0",
        "type": "source_code",
        "text": "value += preLoaded[index++];",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d8471a7148c4f28908988d170da1e7e1",
        "type": "source_code",
        "text": "if(index >= SIZE) index = 0;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b7a71c53eb1fd797e31c55762a8a7b63",
        "type": "source_code",
        "text": "return value;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d7eb731f2cc19d99b00f632aef425328",
        "type": "source_code",
        "text": "lock.lock(); \n    try { \n      value += preLoaded[index++]; \n      if(index >= SIZE) index = 0; \n    } finally { \n      lock.unlock(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9d6dd66aced3cec479f884ce88fcfa9b",
        "type": "source_code",
        "text": "lock.lock(); \n    try { \n      return value; \n    } finally { \n      lock.unlock(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "941579c1f3dab0c7bac11fdd9fdba7fb",
        "type": "source_code",
        "text": "// Oops! Relying on more than one Atomic at \n    // a time doesn\u2019t work. But it still gives us \n    // a performance indicator: \n    int i = index.getAndIncrement(); \n    value.getAndAdd(preLoaded[i]); \n    if(++i >= SIZE) \n      index.set(0);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "fcda5c5bbac0d6b7991a255f1b3c9a7a",
        "type": "source_code",
        "text": "print(\"============================\"); \n    printf(\"%-12s : %13d\\n\", \"Cycles\", Accumulator.cycles); \n    baseLine.timedTest(); \n    synch.timedTest(); \n    lock.timedTest(); \n    atomic.timedTest(); \n    Accumulator.report(synch, baseLine); \n    Accumulator.report(lock, baseLine); \n    Accumulator.report(atomic, baseLine); \n    Accumulator.report(synch, lock); \n    Accumulator.report(synch, atomic); \n    Accumulator.report(lock, atomic);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5cfa5cf7dbdfac9087582bdbbf9ed069",
        "type": "source_code",
        "text": "int iterations = 5; // Default \n    if(args.length > 0) // Optionally change iterations \n      iterations = new Integer(args[0]); \n    // The first time fills the thread pool: \n    print(\"Warmup\"); \n    baseLine.timedTest(); \n    // Now the initial test doesn\u2019t include the cost \n    // of starting the threads for the first time. \n    // Produce multiple data points: \n    for(int i = 0; i < iterations; i++) { \n      test(); \n      Accumulator.cycles *= 2; \n    } \n    Accumulator.exec.shutdown();",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "60f07395211046d8507fd1c903cd17de",
        "type": "source_code",
        "text": ":      34237033",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8ac01565ff87f7a077f1cff5a3d5b09d",
        "type": "source_code",
        "text": ":         50000",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7f61cfd6ed884e1d016a9e9c4e58b3c0",
        "type": "source_code",
        "text": ":      20966632",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2fe2bdfcb93a18d41e32946665d90e16",
        "type": "source_code",
        "text": "24326555",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "f1c7481999942156c569148cc151ea6e",
        "type": "source_code",
        "text": ":      53669950",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a46e6e2e3dcccefa838b8965218ea924",
        "type": "source_code",
        "text": ":      30552487",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0058c0f35f0520227478d8f0d802a2cf",
        "type": "source_code",
        "text": ": 2.56",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6a8c46e4b107906fbfa62e30825b26b1",
        "type": "source_code",
        "text": ": 1.46",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f888df6e4093ea128f130548cadb2934",
        "type": "source_code",
        "text": ": 0.45",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4476dade336d1f9ad974e7d45fadca55",
        "type": "source_code",
        "text": ": 1.76",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d174402c3ff18cc8e495b5ed5cc1ac76",
        "type": "source_code",
        "text": ":        100000",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3987fcf3ef654d5ceb5b4ac0e30c5631",
        "type": "source_code",
        "text": ":      41512818",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "544ad6e7e47dd8800abb24178ca9ebd5",
        "type": "source_code",
        "text": "43843003",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "9e0a3503bd19b3eebd7d02ec0220608a",
        "type": "source_code",
        "text": ":      87430386",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "46147e6b871fcdf8962fd0e3881bc8d8",
        "type": "source_code",
        "text": ":      51892350",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d78821c3daa6ee73d2e2e2280ffc34fe",
        "type": "source_code",
        "text": ": 2.11",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ff7d3a2921b0787288bb71436b6e1efd",
        "type": "source_code",
        "text": ": 1.25",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1c29550686c79b2d19284ba1e148ab8a",
        "type": "source_code",
        "text": ": 0.50",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "59cb5ff78a8aca5566d00e9ea9d90eeb",
        "type": "source_code",
        "text": ": 1.68",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b8ac9c21c0ffb47a57af1b8c194afb2a",
        "type": "source_code",
        "text": ":        200000",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "07c9c19292cce47bd3d3edd1f281ebe1",
        "type": "source_code",
        "text": ":      80176670",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "611aeab8fafd637c510a9859b97324e8",
        "type": "source_code",
        "text": "5455046661",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "e94fcf9abbb15b5553401932bc600157",
        "type": "source_code",
        "text": ":     177686829",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "52a841e4d4e57498879363eac0cbe5a2",
        "type": "source_code",
        "text": ":     101789194",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "19fbeb166a60162a89df37a5c1ae7ef6",
        "type": "source_code",
        "text": ": 2.22",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9a002b194fce2eedb5e4f04270d13169",
        "type": "source_code",
        "text": ": 1.27",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "eb05ab2714c48312de6c34b20826f8b4",
        "type": "source_code",
        "text": ": 30.70",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2c006fd9ef42d75116da1070321c21c0",
        "type": "source_code",
        "text": ": 1.75",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6303f16a49a07a9c534e9b508f844837",
        "type": "source_code",
        "text": ":        400000",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e5cc765ddfdae97293fc78971b07cdb1",
        "type": "source_code",
        "text": ":     160383513",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "27b80f9092b3874262d4b09c3f0101bd",
        "type": "source_code",
        "text": "780052493",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "5e93455fa28165e5ea0a1855f91052d4",
        "type": "source_code",
        "text": ":     362187652",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dfe15e65227e3884c87f77c70f4e68f6",
        "type": "source_code",
        "text": ":     202030984",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ea333e01cdc832c9e3499f0a751e9b31",
        "type": "source_code",
        "text": ": 2.26",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c7ab3f6d551ceea21f05df4f2d5be831",
        "type": "source_code",
        "text": ": 1.26",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "72147155bdc3067e815d8cb2d24f0555",
        "type": "source_code",
        "text": ": 2.15",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "83b072c8b1117c0896805c7a0b6a0010",
        "type": "source_code",
        "text": ": 1.79",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "033653ad5f5faee111e58263f0902381",
        "type": "source_code",
        "text": ":        800000",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0e9bf73ada624168328d46e8bc3f8286",
        "type": "source_code",
        "text": ":     322064955",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c1ed411367b88d2955a0a6d196fa8b01",
        "type": "source_code",
        "text": "336155014",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "cc5ef88c6b96c0ece204873bfb920413",
        "type": "source_code",
        "text": ":     704615531",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "87e8fe0e091b9ba74b794ef53132a27f",
        "type": "source_code",
        "text": ":     393231542",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2e9c979dd300d1d138a17712da9eb912",
        "type": "source_code",
        "text": ": 2.19",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "050a61b80bd176c23f68c8c2e62c254b",
        "type": "source_code",
        "text": ": 1.22",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d36546a7daa2462c1d33f365ada1de5f",
        "type": "source_code",
        "text": ": 0.47",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "83b072c8b1117c0896805c7a0b6a0010",
        "type": "source_code",
        "text": ": 1.79",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0d3ee3c239724f06ef442ca05bd58f4f",
        "type": "source_code",
        "text": ":       1600000",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a2c26ba474f05d99a39f380651a3f320",
        "type": "source_code",
        "text": ":     650004120",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "320a638aaf83e3f230969c8dc2e1d9aa",
        "type": "source_code",
        "text": ":    1419602771",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b7f847e581831ddf3d8e709c7fda7d2a",
        "type": "source_code",
        "text": ":     796950171",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "509d711006ba213d349a7ba85b3fc29a",
        "type": "source_code",
        "text": ": 2.18",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ae3088a6ed16f051eadc2ecb411de995",
        "type": "source_code",
        "text": ": 1.23",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "33f95ea506712f9765907a70888ff8b7",
        "type": "source_code",
        "text": ": 36.80",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fe66bc6a4a7dcde75903cc53429af8c0",
        "type": "source_code",
        "text": ": 1.78",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "aa3bc363477cd9b6d198d41d2db3eab3",
        "type": "source_code",
        "text": ":       3200000",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "94ac0263e85ba16740cc5dbcab7f2916",
        "type": "source_code",
        "text": ":    1285664519",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4fa6767a4fd7c6e10029bd131f055f4c",
        "type": "source_code",
        "text": ":    2846988654",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0e5017f56d7d778fae4c0fb3603c8e71",
        "type": "source_code",
        "text": ":    1590545726",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "632f87295bf78230be8c7a8a35faf3e8",
        "type": "source_code",
        "text": ": 2.21",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fba770baba9408c7320b76738f16cee6",
        "type": "source_code",
        "text": ": 1.24",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f601f557ffb1649a2bcca4b33653e76f",
        "type": "source_code",
        "text": ": 33.84",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "83b072c8b1117c0896805c7a0b6a0010",
        "type": "source_code",
        "text": ": 1.79",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c23539246db1546d265aafaea3f738aa",
        "type": "source_code",
        "text": "Executors.newCachedThreadPool();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c269780a30d06a291a2a71287a8ba83a",
        "type": "source_code",
        "text": "this.testId = testId + \" \" + \n      nReaders + \"r \" + nWriters + \"w\"; \n    this.nReaders = nReaders; \n    this.nWriters = nWriters; \n    writeData = Generated.array(Integer.class, \n      new RandomGenerator.Integer(), containerSize); \n    for(int i = 0; i < testReps; i++) { \n      runTest(); \n      readTime = 0; \n      writeTime = 0; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c9648b11de077f4e68c69533fa3080a0",
        "type": "source_code",
        "text": "endLatch = new CountDownLatch(nReaders + nWriters); \n    testContainer = containerInitializer(); \n    startReadersAndWriters(); \n    try { \n      endLatch.await(); \n    } catch(InterruptedException ex) { \n      System.out.println(\"endLatch interrupted\"); \n    } \n    System.out.printf(\"%-27s %14d %14d\\n\", \n      testId, readTime, writeTime); \n    if(readTime != 0 && writeTime != 0) \n      System.out.printf(\"%-27s %14d\\n\", \n        \"readTime + writeTime =\", readTime + writeTime);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e72a098348dd4e3e345b745c97f55259",
        "type": "source_code",
        "text": "abstract void test(); \n    abstract void putResults(); \n    long duration; \n    public void run() { \n      long startTime = System.nanoTime(); \n      test(); \n      duration = System.nanoTime() - startTime; \n      synchronized(Tester.this) { \n        putResults(); \n      } \n      endLatch.countDown(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "580e6971a51adce605f0bf423a346266",
        "type": "source_code",
        "text": "if(args.length > 0) \n      testReps = new Integer(args[0]); \n    if(args.length > 1) \n      testCycles = new Integer(args[1]); \n    if(args.length > 2) \n      containerSize = new Integer(args[2]); \n    System.out.printf(\"%-27s %14s %14s\\n\",",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2c98d4271f7b02c8ddc419d02537cc5f",
        "type": "source_code",
        "text": "\"Type\", \"Read time\", \"Write time\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f62d2003dbebee9c77fd35de0d38ea1e",
        "type": "source_code",
        "text": "super(testId, nReaders, nWriters);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8beaa4033189baf23bd188f5e727c66d",
        "type": "source_code",
        "text": "long result = 0; \n    void test() { \n      for(long i = 0; i < testCycles; i++) \n        for(int index = 0; index < containerSize; index++) \n          result += testContainer.get(index); \n    } \n    void putResults() { \n      readResult += result; \n      readTime += duration; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a74d2e23670b03e486fd780a0a8335f0",
        "type": "source_code",
        "text": "void test() { \n      for(long i = 0; i < testCycles; i++) \n        for(int index = 0; index < containerSize; index++) \n          testContainer.set(index, writeData[index]); \n    } \n    void putResults() { \n      writeTime += duration; \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "c34518c16fc15b7a56010e89fe4a4fe8",
        "type": "source_code",
        "text": "for(int i = 0; i < nReaders; i++) \n      exec.execute(new Reader());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c741e99766f8aea79eb5f2cdb17ec151",
        "type": "source_code",
        "text": "for(int i = 0; i < nWriters; i++) \n      exec.execute(new Writer());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0be46112da611da3c185c258d0cf5fec",
        "type": "source_code",
        "text": "return Collections.synchronizedList( \n      new ArrayList<Integer>( \n        new CountingIntegerList(containerSize)));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "69805076084223ed72513ddfa2d71b78",
        "type": "source_code",
        "text": "super(\"Synched ArrayList\", nReaders, nWriters);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9a7914a00456eded2a635d291eab9c19",
        "type": "source_code",
        "text": "return new CopyOnWriteArrayList<Integer>( \n      new CountingIntegerList(containerSize));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "4e700fe6d90c20e73101143ad2bf6290",
        "type": "source_code",
        "text": "super(\"CopyOnWriteArrayList\", nReaders, nWriters);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6b0927f0aa80d33cb3b884f23c20f598",
        "type": "source_code",
        "text": "Tester.initMain(args); \n    new SynchronizedArrayListTest(10, 0); \n    new SynchronizedArrayListTest(9, 1); \n    new SynchronizedArrayListTest(5, 5); \n    new CopyOnWriteArrayListTest(10, 0); \n    new CopyOnWriteArrayListTest(9, 1); \n    new CopyOnWriteArrayListTest(5, 5); \n    Tester.exec.shutdown();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a5879be05d91b298151146cacf4f9bc8",
        "type": "source_code",
        "text": "Read time     Write time",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f0065b23b9407c7f6f82d387bfdc9a3c",
        "type": "source_code",
        "text": "232158294700              0",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "6d85047f6fff5f094d2b1f2225f828e8",
        "type": "source_code",
        "text": "198947618203    24918613399",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "fc637b18ab21aa9f5a19a5174ab47454",
        "type": "source_code",
        "text": "223866231602",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "242be2c8027b402bf9b000d75b15aa53",
        "type": "source_code",
        "text": "117367305062   132176613508",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "3f36585e7505ff12e069e35b1c3c88ad",
        "type": "source_code",
        "text": "249543918570",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "af245fd7635ab16f8682538b8194ee49",
        "type": "source_code",
        "text": "758386889              0",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "2a7625c9d52f076966b6cdb64a8b23f0",
        "type": "source_code",
        "text": "741305671      136145237",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "ec109e18f484215cd5a959af422119b2",
        "type": "source_code",
        "text": "877450908",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "83b5ea0018fc95fe1a00b1856b1fc318",
        "type": "source_code",
        "text": "212763075    67967464300",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "087444caa7c1f46988328c67ece1a9e0",
        "type": "source_code",
        "text": "68180227375",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "f62d2003dbebee9c77fd35de0d38ea1e",
        "type": "source_code",
        "text": "super(testId, nReaders, nWriters);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8beaa4033189baf23bd188f5e727c66d",
        "type": "source_code",
        "text": "long result = 0; \n    void test() { \n      for(long i = 0; i < testCycles; i++) \n        for(int index = 0; index < containerSize; index++) \n          result += testContainer.get(index); \n    } \n    void putResults() { \n      readResult += result; \n      readTime += duration; \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6b524bd548d4a7e1467798c97530ca96",
        "type": "source_code",
        "text": "void test() { \n      for(long i = 0; i < testCycles; i++) \n        for(int index = 0; index < containerSize; index++) \n          testContainer.put(index, writeData[index]); \n    } \n    void putResults() { \n      writeTime += duration; \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "26914bc0b344725397c56301231b1940",
        "type": "source_code",
        "text": "for(int i = 0; i < nReaders; i++) \n      exec.execute(new Reader()); \n    for(int i = 0; i < nWriters; i++) \n      exec.execute(new Writer());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "fb2205d424fb8b8fba58db308022f4af",
        "type": "source_code",
        "text": "return Collections.synchronizedMap( \n      new HashMap<Integer,Integer>( \n        MapData.map( \n          new CountingGenerator.Integer(), \n          new CountingGenerator.Integer(), \n          containerSize)));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d0bcd9561743357391be31bed0d1f4b8",
        "type": "source_code",
        "text": "super(\"Synched HashMap\", nReaders, nWriters);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "26d250a21b2cbf06f4c2f5aee405756a",
        "type": "source_code",
        "text": "return new ConcurrentHashMap<Integer,Integer>( \n      MapData.map( \n        new CountingGenerator.Integer(), \n        new CountingGenerator.Integer(), containerSize));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "867734f075c807b9f7ecc50f02f00016",
        "type": "source_code",
        "text": "super(\"ConcurrentHashMap\", nReaders, nWriters);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ae1fea7d9249eb4fe185565b3369acbe",
        "type": "source_code",
        "text": "Tester.initMain(args); \n    new SynchronizedHashMapTest(10, 0); \n    new SynchronizedHashMapTest(9, 1); \n    new SynchronizedHashMapTest(5, 5); \n    new ConcurrentHashMapTest(10, 0); \n    new ConcurrentHashMapTest(9, 1); \n    new ConcurrentHashMapTest(5, 5); \n    Tester.exec.shutdown();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "a5879be05d91b298151146cacf4f9bc8",
        "type": "source_code",
        "text": "Read time     Write time",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b2964fc8509b035cde268b56f4040ef1",
        "type": "source_code",
        "text": "306052025049              0",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "a4b6a6fbc1f034a19b9e9003ad585ed2",
        "type": "source_code",
        "text": "428319156207    47697347568",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "6127f58c873bf74975933b7fff2eb70a",
        "type": "source_code",
        "text": "476016503775",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "9db0b4cce343bb353f71079f6340b4f9",
        "type": "source_code",
        "text": "243956877760   244012003202",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "1afe8826994a592d162e7459118d75b8",
        "type": "source_code",
        "text": "487968880962",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "d09a09f93eb48d6254c1f586f341b9a0",
        "type": "source_code",
        "text": "23352654318              0",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "32e3581f443e962078074770813a6629",
        "type": "source_code",
        "text": "18833089400     1541853224",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "e0babe64bc19cc5cc8609fa60677eeb4",
        "type": "source_code",
        "text": "20374942624",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "c44700123109e30b5b4ed0a89fd7f3bf",
        "type": "source_code",
        "text": "12037625732    11850489099",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "537280019e81f1a9b5a7592a276b03e8",
        "type": "source_code",
        "text": "23888114831",
        "programming_language": "CBM BASIC V2",
        "weight": 0.0
    },
    {
        "id": "da6dab1e1cdf6104b23edb9246a28b64",
        "type": "source_code",
        "text": "new AtomicInteger[N_ELEMENTS][N_GENES];",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "33b8154650fc861a7f01c1e2d293b61b",
        "type": "source_code",
        "text": "public void run() { \n      while(!Thread.interrupted()) { \n        // Randomly select an element to work on: \n        int element = rand.nextInt(N_ELEMENTS); \n        for(int i = 0; i < N_GENES; i++) { \n          int previous = element - 1; \n          if(previous < 0) previous = N_ELEMENTS - 1; \n          int next = element + 1; \n          if(next >= N_ELEMENTS) next = 0; \n          int oldvalue = GRID[element][i].get();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "6ebcbd056fed5ee2e6af572ba9d32528",
        "type": "source_code",
        "text": "// Perform some kind of modeling calculation: \n          int newvalue = oldvalue + \n            GRID[previous][i].get() + GRID[next][i].get(); \n          newvalue /= 3; // Average the three values \n          if(!GRID[element][i] \n            .compareAndSet(oldvalue, newvalue)) { \n            // Policy here to deal with failure. Here, we \n            // just report it and ignore it; our model \n            // will eventually deal with it. \n            print(\"Old value changed from \" + oldvalue); \n          } \n        } \n      } \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "fdb59fce5108e9d3bea324745697887e",
        "type": "source_code",
        "text": "ExecutorService exec = Executors.newCachedThreadPool(); \n    for(int i = 0; i < N_ELEMENTS; i++) \n      for(int j = 0; j < N_GENES; j++) \n        GRID[i][j] = new AtomicInteger(rand.nextInt(1000)); \n    for(int i = 0; i < N_EVOLVERS; i++) \n      exec.execute(new Evolver()); \n    TimeUnit.SECONDS.sleep(5); \n    exec.shutdownNow();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "e9f1a20e73949cdbb204ad64f731f0e6",
        "type": "source_code",
        "text": "new ReentrantReadWriteLock(true);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3d408110ed0231e163c3d46e276bda84",
        "type": "source_code",
        "text": "lockedList = new ArrayList<T>( \n      Collections.nCopies(size, initialValue));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "91ee0114d1b00abbf87f50a2613f071f",
        "type": "source_code",
        "text": "Lock wlock = lock.writeLock(); \n    wlock.lock(); \n    try { \n      return lockedList.set(index, element); \n    } finally { \n      wlock.unlock(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "48d3e2379aef2104cb79e66ed8f740e9",
        "type": "source_code",
        "text": "Lock rlock = lock.readLock(); \n    rlock.lock(); \n    try { \n      // Show that multiple readers \n      // may acquire the read lock: \n      if(lock.getReadLockCount() > 1) \n        print(lock.getReadLockCount()); \n      return lockedList.get(index); \n    } finally { \n      rlock.unlock(); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "1ace27d78b98c55ca93406d1c837648c",
        "type": "source_code",
        "text": "new ReaderWriterListTest(30, 1);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7e5fcdfca994be1ac0d9adae2b17cdc2",
        "type": "source_code",
        "text": "new ReaderWriterList<Integer>(SIZE, 0);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4dc69060569c2caf8136dda4b628db45",
        "type": "source_code",
        "text": "public void run() { \n      try { \n        for(int i = 0; i < 20; i++) { // 2 second test \n          list.set(i, rand.nextInt()); \n          TimeUnit.MILLISECONDS.sleep(100); \n        } \n      } catch(InterruptedException e) { \n        // Acceptable way to exit \n      } \n      print(\"Writer finished, shutting down\"); \n      exec.shutdownNow(); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9a129c2f9c031018ce4e33a9ea0ea66d",
        "type": "source_code",
        "text": "public void run() { \n      try { \n        while(!Thread.interrupted()) { \n          for(int i = 0; i < SIZE; i++) { \n            list.get(i); \n            TimeUnit.MILLISECONDS.sleep(1); \n          }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "957574976ef3bd320c531684a438e27d",
        "type": "source_code",
        "text": "} \n      } catch(InterruptedException e) { \n        // Acceptable way to exit \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "735eba1af2ab716440bf2bef593c55c3",
        "type": "source_code",
        "text": "for(int i = 0; i < readers; i++) \n      exec.execute(new Reader()); \n    for(int i = 0; i < writers; i++) \n      exec.execute(new Writer());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c1023bf6a8e582f63e6e1546bd8b024c",
        "type": "source_code",
        "text": "Executors.newSingleThreadExecutor();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "987954e2fe6fda6db94c928cbf87629d",
        "type": "source_code",
        "text": "try { \n      TimeUnit.MILLISECONDS.sleep( \n        100 + rand.nextInt(factor)); \n    } catch(InterruptedException e) { \n      print(\"sleep() interrupted\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c1acce789b7c5ad481eab10031f51579",
        "type": "source_code",
        "text": "return ex.submit(new Callable<Integer>() { \n      public Integer call() { \n        print(\"starting \" + x + \" + \" + y); \n        pause(500); \n        return x + y; \n      } \n    });",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "53df489a956a66c893866a50afa720ac",
        "type": "source_code",
        "text": "return ex.submit(new Callable<Float>() { \n      public Float call() { \n        print(\"starting \" + x + \" + \" + y); \n        pause(2000); \n        return x + y; \n      } \n    });",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "dc47b7bd35c8a95e2dcb1f971a03203b",
        "type": "source_code",
        "text": "ActiveObjectDemo d1 = new ActiveObjectDemo(); \n    // Prevents ConcurrentModificationException: \n    List<Future<?>> results = \n      new CopyOnWriteArrayList<Future<?>>(); \n    for(float f = 0.0f; f < 1.0f; f += 0.2f) \n      results.add(d1.calculateFloat(f, f)); \n    for(int i = 0; i < 5; i++) \n      results.add(d1.calculateInt(i, i)); \n    print(\"All asynch calls made\"); \n    while(results.size() > 0) {",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "3d8a3b3eed5e8dbb51f26a42db7b2dcf",
        "type": "source_code",
        "text": "for(Future<?> f : results) \n        if(f.isDone()) { \n          try { \n            print(f.get()); \n          } catch(Exception e) { \n            throw new RuntimeException(e); \n          } \n          results.remove(f); \n        } \n    } \n    d1.shutdown();",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "756640f0aea5f5bea1cbe250a9d08989",
        "type": "source_code",
        "text": "Interfaces",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "885ffbe314b8be471040b1ae58a8ee8a",
        "type": "source_code",
        "text": "JFrame frame = new JFrame(\"Hello Swing\"); \n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \n    frame.setSize(300, 100); \n    frame.setVisible(true);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "a980bda21ba9b5edc34c5519b8ab104c",
        "type": "source_code",
        "text": "JFrame frame = new JFrame(\"Hello Swing\"); \n    JLabel label = new JLabel(\"A Label\"); \n    frame.add(label); \n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \n    frame.setSize(300, 100); \n    frame.setVisible(true); \n    TimeUnit.SECONDS.sleep(1); \n    label.setText(\"Hey! This is Different!\");",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "bc5500e27183e46ebabe2f71a6e72c1f",
        "type": "source_code",
        "text": "JFrame frame = new JFrame(\"Hello Swing\"); \n    final JLabel label = new JLabel(\"A Label\"); \n    frame.add(label); \n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \n    frame.setSize(300, 100); \n    frame.setVisible(true); \n    TimeUnit.SECONDS.sleep(1); \n    SwingUtilities.invokeLater(new Runnable() { \n      public void run() { \n        label.setText(\"Hey! This is Different!\"); \n      } \n    });",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "47ade092b2e15390a11c1b71239835a6",
        "type": "source_code",
        "text": "super(\"Hello Swing\"); \n    label = new JLabel(\"A Label\"); \n    add(label); \n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \n    setSize(300, 100); \n    setVisible(true);",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "c1e41befd9d98269c970c1ce40ca4c80",
        "type": "source_code",
        "text": "SwingUtilities.invokeLater(new Runnable() { \n      public void run() { ssp = new SubmitSwingProgram(); } \n    }); \n    TimeUnit.SECONDS.sleep(1); \n    SwingUtilities.invokeLater(new Runnable() { \n      public void run() { \n        ssp.label.setText(\"Hey! This is Different!\"); \n      } \n    });",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6391bbf2fe5c5b0875e01e9a3cfef075",
        "type": "source_code",
        "text": "SwingUtilities.invokeLater(new Runnable() { \n      public void run() { \n        f.setTitle(f.getClass().getSimpleName()); \n        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \n        f.setSize(width, height); \n        f.setVisible(true); \n      } \n    });",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "197ee3a588d76c244978d190cb7201fb",
        "type": "source_code",
        "text": "b1 = new JButton(\"Button 1\"), \n    b2 = new JButton(\"Button 2\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2c3e371d59438e6154955c9689ac1055",
        "type": "source_code",
        "text": "setLayout(new FlowLayout()); \n    add(b1); \n    add(b2);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8d03a46440c85e48332e5a36f7344859",
        "type": "source_code",
        "text": "run(new Button1(), 200, 100);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "197ee3a588d76c244978d190cb7201fb",
        "type": "source_code",
        "text": "b1 = new JButton(\"Button 1\"), \n    b2 = new JButton(\"Button 2\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6669bd4244a898d3f4380c866f65a32b",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      String name = ((JButton)e.getSource()).getText(); \n      txt.setText(name);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cbb184dd8e05c9709e5dcaedaa0495cf",
        "type": "source_code",
        "text": "}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "650ebc6b08d1514cc79c1a8a5fd16183",
        "type": "source_code",
        "text": "b1.addActionListener(bl); \n    b2.addActionListener(bl); \n    setLayout(new FlowLayout()); \n    add(b1); \n    add(b2); \n    add(txt);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4e2f278d54f51491c5551e6dcf151570",
        "type": "source_code",
        "text": "run(new Button2(), 200, 150);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "197ee3a588d76c244978d190cb7201fb",
        "type": "source_code",
        "text": "b1 = new JButton(\"Button 1\"), \n    b2 = new JButton(\"Button 2\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3ebe3bf28f31906ba61f226f5b24b621",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      String name = ((JButton)e.getSource()).getText(); \n      txt.setText(name); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "650ebc6b08d1514cc79c1a8a5fd16183",
        "type": "source_code",
        "text": "b1.addActionListener(bl); \n    b2.addActionListener(bl); \n    setLayout(new FlowLayout()); \n    add(b1); \n    add(b2); \n    add(txt);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a98952242f8e39e714655bef7b928bf6",
        "type": "source_code",
        "text": "run(new Button2b(), 200, 150);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0ccb214a7e6d10283628c8eefc2a7232",
        "type": "source_code",
        "text": "b = new JButton(\"Add Data\"), \n    c = new JButton(\"Clear Data\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "92b65223ceb9ca351e2b5a497beb363e",
        "type": "source_code",
        "text": "new HashMap<String,String>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5885d24a0ec6cfcbc884e9c7458471ea",
        "type": "source_code",
        "text": "// Use up all the data: \n    m.putAll(Countries.capitals()); \n    b.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        for(Map.Entry me : m.entrySet()) \n          t.append(me.getKey() + \": \"+ me.getValue()+\"\\n\"); \n      } \n    }); \n    c.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        t.setText(\"\"); \n      } \n    }); \n    setLayout(new FlowLayout()); \n    add(new JScrollPane(t)); \n    add(b); \n    add(c);",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "d6251e168d3eed98e62081744fe5e2de",
        "type": "source_code",
        "text": "run(new TextArea(), 475, 425);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b0afac17cfc82195fceccab8a8b43319",
        "type": "source_code",
        "text": "add(BorderLayout.NORTH, new JButton(\"North\")); \n    add(BorderLayout.SOUTH, new JButton(\"South\")); \n    add(BorderLayout.EAST, new JButton(\"East\")); \n    add(BorderLayout.WEST, new JButton(\"West\")); \n    add(BorderLayout.CENTER, new JButton(\"Center\"));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e68b63cf1e63223dfcefd3cb7c90ff6b",
        "type": "source_code",
        "text": "run(new BorderLayout1(), 300, 250);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3bc460ab9ddb02bedcc7770f03f8c8d0",
        "type": "source_code",
        "text": "setLayout(new FlowLayout()); \n    for(int i = 0; i < 20; i++) \n      add(new JButton(\"Button \" + i));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "e9c6031ee5c93d404999e29d4b0cfabc",
        "type": "source_code",
        "text": "run(new FlowLayout1(), 300, 300);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b590d11e921f113a1941f8055147c71f",
        "type": "source_code",
        "text": "setLayout(new GridLayout(7,3)); \n    for(int i = 0; i < 20; i++) \n      add(new JButton(\"Button \" + i));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ddede31aaec2af3ffb7e73b1a9425abf",
        "type": "source_code",
        "text": "run(new GridLayout1(), 300, 300);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "20436b342d1a3649e3d0a754ff1a63c6",
        "type": "source_code",
        "text": "Pattern.compile(\"(add\\\\w+?Listener\\\\(.*?\\\\))\");",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "d7e68a389b748cd05690a098060707b5",
        "type": "source_code",
        "text": "Pattern.compile(\"\\\\w+\\\\.\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b75e3b6adadc295cbfd8ad7c27fb46fe",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      String nm = name.getText().trim(); \n      if(nm.length() == 0) { \n        results.setText(\"No match\"); \n        return; \n      } \n      Class<?> kind; \n      try { \n        kind = Class.forName(\"javax.swing.\" + nm); \n      } catch(ClassNotFoundException ex) { \n        results.setText(\"No match\"); \n        return; \n      } \n      Method[] methods = kind.getMethods(); \n      results.setText(\"\"); \n      for(Method m : methods) { \n        Matcher matcher = \n          addListener.matcher(m.toString()); \n        if(matcher.find()) \n          results.append(qualifier.matcher( \n            matcher.group(1)).replaceAll(\"\") + \"\\n\"); \n      } \n    }",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "96348983c34545ed4fd59399f82ef3be",
        "type": "source_code",
        "text": "NameL nameListener = new NameL(); \n    name.addActionListener(nameListener); \n    JPanel top = new JPanel(); \n    top.add(new JLabel(\"Swing class name (press Enter):\")); \n    top.add(name); \n    add(BorderLayout.NORTH, top); \n    add(new JScrollPane(results)); \n    // Initial data and test: \n    name.setText(\"JTextArea\"); \n    nameListener.actionPerformed( \n      new ActionEvent(\"\", 0 ,\"\"));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "32c8ffa5350c2d8ba4c48a890d8bc45d",
        "type": "source_code",
        "text": "run(new ShowAddListeners(), 500, 400);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ed99379da9fc03b91f03a42b4bdf3341",
        "type": "source_code",
        "text": "// Respond to mouse click...",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "ed99379da9fc03b91f03a42b4bdf3341",
        "type": "source_code",
        "text": "// Respond to mouse click...",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "fabedd9f1a7fc551eefa04c2f5f9a119",
        "type": "source_code",
        "text": "new HashMap<String,JTextField>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "db46bd4dc080c3ac4084f615dfa32778",
        "type": "source_code",
        "text": "\"focusGained\", \"focusLost\", \"keyPressed\", \n    \"keyReleased\", \"keyTyped\", \"mouseClicked\", \n    \"mouseEntered\", \"mouseExited\", \"mousePressed\", \n    \"mouseReleased\", \"mouseDragged\", \"mouseMoved\"",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c2cfd974d2606a3d919afe68c21bbfa9",
        "type": "source_code",
        "text": "b1 = new MyButton(Color.BLUE, \"test1\"), \n    b2 = new MyButton(Color.RED, \"test2\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "342efe64693ac59fa51c02bac6d79b2b",
        "type": "source_code",
        "text": "void report(String field, String msg) { \n      h.get(field).setText(msg); \n    } \n    FocusListener fl = new FocusListener() { \n      public void focusGained(FocusEvent e) { \n        report(\"focusGained\", e.paramString()); \n      } \n      public void focusLost(FocusEvent e) { \n        report(\"focusLost\", e.paramString()); \n      } \n    }; \n    KeyListener kl = new KeyListener() { \n      public void keyPressed(KeyEvent e) { \n        report(\"keyPressed\", e.paramString());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "d3d2fb067fd91fad1adf8d682d8e7c98",
        "type": "source_code",
        "text": "} \n      public void keyReleased(KeyEvent e) { \n        report(\"keyReleased\", e.paramString()); \n      } \n      public void keyTyped(KeyEvent e) { \n        report(\"keyTyped\", e.paramString()); \n      } \n    }; \n    MouseListener ml = new MouseListener() { \n      public void mouseClicked(MouseEvent e) { \n        report(\"mouseClicked\", e.paramString()); \n      } \n      public void mouseEntered(MouseEvent e) { \n        report(\"mouseEntered\", e.paramString()); \n      } \n      public void mouseExited(MouseEvent e) { \n        report(\"mouseExited\", e.paramString()); \n      } \n      public void mousePressed(MouseEvent e) { \n        report(\"mousePressed\", e.paramString()); \n      } \n      public void mouseReleased(MouseEvent e) { \n        report(\"mouseReleased\", e.paramString()); \n      } \n    }; \n    MouseMotionListener mml = new MouseMotionListener() { \n      public void mouseDragged(MouseEvent e) { \n        report(\"mouseDragged\", e.paramString()); \n      } \n      public void mouseMoved(MouseEvent e) { \n        report(\"mouseMoved\", e.paramString()); \n      } \n    }; \n    public MyButton(Color color, String label) { \n      super(label); \n      setBackground(color); \n      addFocusListener(fl); \n      addKeyListener(kl); \n      addMouseListener(ml); \n      addMouseMotionListener(mml); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8ec8b26bfd426ca9f5ae98ae8ceae295",
        "type": "source_code",
        "text": "setLayout(new GridLayout(event.length + 1, 2)); \n    for(String evt : event) { \n      JTextField t = new JTextField(); \n      t.setEditable(false); \n      add(new JLabel(evt, JLabel.RIGHT)); \n      add(t); \n      h.put(evt, t); \n    } \n    add(b1); \n    add(b2);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "809bf26f47a94adbf06136dfba627a64",
        "type": "source_code",
        "text": "run(new TrackEvent(), 700, 500);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1e8cf20b461950dc8f52ea36b203b544",
        "type": "source_code",
        "text": "up = new BasicArrowButton(BasicArrowButton.NORTH), \n    down = new BasicArrowButton(BasicArrowButton.SOUTH), \n    right = new BasicArrowButton(BasicArrowButton.EAST), \n    left = new BasicArrowButton(BasicArrowButton.WEST);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "31a8a0606e413740a31c425aa125a430",
        "type": "source_code",
        "text": "setLayout(new FlowLayout()); \n    add(jb); \n    add(new JToggleButton(\"JToggleButton\")); \n    add(new JCheckBox(\"JCheckBox\")); \n    add(new JRadioButton(\"JRadioButton\")); \n    JPanel jp = new JPanel(); \n    jp.setBorder(new TitledBorder(\"Directions\")); \n    jp.add(up); \n    jp.add(down); \n    jp.add(left); \n    jp.add(right); \n    add(jp);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c6120cff48ae5e52eae53d5a09714357",
        "type": "source_code",
        "text": "run(new Buttons(), 350, 200);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6d961ec120ab732a38569f9a8ebe611c",
        "type": "source_code",
        "text": "\"June\", \"Ward\", \"Beaver\", \"Wally\", \"Eddie\", \"Lumpy\"",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1c83d47d39366aeb76a1d76f31a41e0b",
        "type": "source_code",
        "text": "Class<? extends AbstractButton> kind, String[] ids) { \n    ButtonGroup bg = new ButtonGroup(); \n    JPanel jp = new JPanel(); \n    String title = kind.getName(); \n    title = title.substring(title.lastIndexOf(\u2018.\u2019) + 1); \n    jp.setBorder(new TitledBorder(title)); \n    for(String id : ids) { \n      AbstractButton ab = new JButton(\"failed\"); \n      try { \n        // Get the dynamic constructor method \n        // that takes a String argument: \n        Constructor ctor = \n          kind.getConstructor(String.class); \n        // Create a new object: \n        ab = (AbstractButton)ctor.newInstance(id); \n      } catch(Exception ex) { \n        System.err.println(\"can\u2019t create \" + kind); \n      } \n      bg.add(ab); \n      jp.add(ab); \n    } \n    return jp;",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "4eb651bc1fbcefd162adc743948dcfe9",
        "type": "source_code",
        "text": "setLayout(new FlowLayout()); \n    add(makeBPanel(JButton.class, ids)); \n    add(makeBPanel(JToggleButton.class, ids)); \n    add(makeBPanel(JCheckBox.class, ids)); \n    add(makeBPanel(JRadioButton.class, ids));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "03aae7b5b6a3988c728fd02ed5bd93f3",
        "type": "source_code",
        "text": "run(new ButtonGroups(), 500, 350);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dd184b81cde5fc1109a4a389d6e35914",
        "type": "source_code",
        "text": "faces = new Icon[]{ \n      new ImageIcon(getClass().getResource(\"Face0.gif\")), \n      new ImageIcon(getClass().getResource(\"Face1.gif\")), \n      new ImageIcon(getClass().getResource(\"Face2.gif\")), \n      new ImageIcon(getClass().getResource(\"Face3.gif\")), \n      new ImageIcon(getClass().getResource(\"Face4.gif\")), \n    }; \n    jb = new JButton(\"JButton\", faces[3]); \n    setLayout(new FlowLayout()); \n    jb.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        if(mad) { \n          jb.setIcon(faces[3]); \n          mad = false; \n        } else { \n          jb.setIcon(faces[0]); \n          mad = true; \n        } \n        jb.setVerticalAlignment(JButton.TOP); \n        jb.setHorizontalAlignment(JButton.LEFT); \n      } \n    }); \n    jb.setRolloverEnabled(true); \n    jb.setRolloverIcon(faces[1]); \n    jb.setPressedIcon(faces[2]); \n    jb.setDisabledIcon(faces[4]); \n    jb.setToolTipText(\"Yow!\"); \n    add(jb); \n    jb2.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        if(jb.isEnabled()) { \n          jb.setEnabled(false); \n          jb2.setText(\"Enable\"); \n        } else { \n          jb.setEnabled(true); \n          jb2.setText(\"Disable\"); \n        } \n      } \n    }); \n    add(jb2);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "90953faef6a7c40a88e7410bf1dcde4b",
        "type": "source_code",
        "text": "run(new Faces(), 250, 125);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "66e90206518dbc3bc7c7b150df5a4507",
        "type": "source_code",
        "text": "b1 = new JButton(\"Get Text\"), \n    b2 = new JButton(\"Set Text\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "70bf7717000f14b9b4b5fc814d91cf25",
        "type": "source_code",
        "text": "t1 = new JTextField(30), \n    t2 = new JTextField(30), \n    t3 = new JTextField(30);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ef6a632c0902373b05033a5fe5294bfe",
        "type": "source_code",
        "text": "t1.setDocument(ucd); \n    ucd.addDocumentListener(new T1()); \n    b1.addActionListener(new B1()); \n    b2.addActionListener(new B2()); \n    t1.addActionListener(new T1A()); \n    setLayout(new FlowLayout()); \n    add(b1); \n    add(b2); \n    add(t1); \n    add(t2); \n    add(t3);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "69cceddb22a19250e82e23ae1b213f0e",
        "type": "source_code",
        "text": "public void changedUpdate(DocumentEvent e) {} \n    public void insertUpdate(DocumentEvent e) { \n      t2.setText(t1.getText()); \n      t3.setText(\"Text: \"+ t1.getText());",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ab0fb55041ad30a862c224866a64ab4a",
        "type": "source_code",
        "text": "} \n    public void removeUpdate(DocumentEvent e) { \n      t2.setText(t1.getText()); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c717f46c452d0a505644d76f8369ff46",
        "type": "source_code",
        "text": "private int count = 0; \n    public void actionPerformed(ActionEvent e) { \n      t3.setText(\"t1 Action Event \" + count++); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3cd942eec059de48c992414c71bdec69",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      if(t1.getSelectedText() == null) \n        s = t1.getText(); \n      else \n        s = t1.getSelectedText(); \n      t1.setEditable(true); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c22d649bf55793183950b2444e5b5f83",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      ucd.setUpperCase(false); \n      t1.setText(\"Inserted by Button 2: \" + s); \n      ucd.setUpperCase(true); \n      t1.setEditable(false); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "e7dd73d74412a1098edc942e26e041d0",
        "type": "source_code",
        "text": "run(new TextFields(), 375, 200);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "352a91c3414a4838e4e4ef5c3896868b",
        "type": "source_code",
        "text": "upperCase = flag;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9ffea183953caa27ddd0332dd4956e10",
        "type": "source_code",
        "text": "if(upperCase) str = str.toUpperCase(); \n    super.insertString(offset, str, attSet);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "bc7b28a3611acb148b7a95a27984f04d",
        "type": "source_code",
        "text": "JPanel jp = new JPanel(); \n    jp.setLayout(new BorderLayout()); \n    String nm = b.getClass().toString(); \n    nm = nm.substring(nm.lastIndexOf(\u2018.\u2019) + 1); \n    jp.add(new JLabel(nm, JLabel.CENTER), \n      BorderLayout.CENTER); \n    jp.setBorder(b); \n    return jp;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ad991f079c3e356752a7125dacab4bfd",
        "type": "source_code",
        "text": "setLayout(new GridLayout(2,4)); \n    add(showBorder(new TitledBorder(\"Title\"))); \n    add(showBorder(new EtchedBorder())); \n    add(showBorder(new LineBorder(Color.BLUE))); \n    add(showBorder( \n      new MatteBorder(5,5,30,30,Color.GREEN))); \n    add(showBorder( \n      new BevelBorder(BevelBorder.RAISED))); \n    add(showBorder( \n      new SoftBevelBorder(BevelBorder.LOWERED))); \n    add(showBorder(new CompoundBorder( \n      new EtchedBorder(), \n      new LineBorder(Color.RED))));",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c5e95ea88b56b37b51930f05e253029f",
        "type": "source_code",
        "text": "run(new Borders(), 500, 300);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5965cbd298357ba4dcf0f387ae83db4a",
        "type": "source_code",
        "text": "new RandomGenerator.String(7);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "da84fdeed8589f69d615199f399b7372",
        "type": "source_code",
        "text": "b.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        for(int i = 1; i < 10; i++) \n          tp.setText(tp.getText() + sg.next() + \"\\n\"); \n      } \n    }); \n    add(new JScrollPane(tp)); \n    add(BorderLayout.SOUTH, b);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "33cc7288abdae6e8bd58236f6c8ba918",
        "type": "source_code",
        "text": "run(new TextPane(), 475, 425);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8c79e50fb046fb91ccee72b2bdd19287",
        "type": "source_code",
        "text": "cb1 = new JCheckBox(\"Check Box 1\"), \n    cb2 = new JCheckBox(\"Check Box 2\"), \n    cb3 = new JCheckBox(\"Check Box 3\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "585e0a720776f7486747b0e4a8d2dbe7",
        "type": "source_code",
        "text": "cb1.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        trace(\"1\", cb1); \n      } \n    }); \n    cb2.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        trace(\"2\", cb2); \n      } \n    }); \n    cb3.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        trace(\"3\", cb3); \n      } \n    }); \n    setLayout(new FlowLayout()); \n    add(new JScrollPane(t)); \n    add(cb1); \n    add(cb2); \n    add(cb3);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e4d16dce6033cf0eeda02f2568bb266c",
        "type": "source_code",
        "text": "if(cb.isSelected()) \n      t.append(\"Box \" + b + \" Set\\n\"); \n    else \n      t.append(\"Box \" + b + \" Cleared\\n\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2ae863d0aafd2cc7b5b7d9819369265e",
        "type": "source_code",
        "text": "run(new CheckBoxes(), 200, 300);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f6eedad0d5026667e7a2449daa2b461f",
        "type": "source_code",
        "text": "rb1 = new JRadioButton(\"one\", false), \n    rb2 = new JRadioButton(\"two\", false), \n    rb3 = new JRadioButton(\"three\", false);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "228e31f8259f3d3665a304a7729825ce",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      t.setText(\"Radio button \" + \n        ((JRadioButton)e.getSource()).getText()); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7edad8e0683023ecc9f5050ed80a9e96",
        "type": "source_code",
        "text": "rb1.addActionListener(al); \n    rb2.addActionListener(al); \n    rb3.addActionListener(al); \n    g.add(rb1); g.add(rb2); g.add(rb3); \n    t.setEditable(false); \n    setLayout(new FlowLayout()); \n    add(t); \n    add(rb1); \n    add(rb2); \n    add(rb3);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5c3db051a9be3a0585cbe373e92ce0da",
        "type": "source_code",
        "text": "run(new RadioButtons(), 200, 125);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cdc5e30b858d13dd42f3d1e889fd9a9c",
        "type": "source_code",
        "text": "\"Ebullient\", \"Obtuse\", \"Recalcitrant\", \"Brilliant\", \n    \"Somnescent\", \"Timorous\", \"Florid\", \"Putrescent\"",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e2509444524c57ff9766c2de7851be09",
        "type": "source_code",
        "text": "for(int i = 0; i < 4; i++) \n      c.addItem(description[count++]); \n    t.setEditable(false); \n    b.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        if(count < description.length) \n          c.addItem(description[count++]); \n      } \n    }); \n    c.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        t.setText(\"index: \"+ c.getSelectedIndex() + \"   \" + \n         ((JComboBox)e.getSource()).getSelectedItem()); \n      } \n    }); \n    setLayout(new FlowLayout()); \n    add(t); \n    add(c); \n    add(b);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "cd06cf7b7c97df0d242533864756f9b7",
        "type": "source_code",
        "text": "run(new ComboBoxes(), 200, 175);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e446a83f98947a13bd61ecce0efb7112",
        "type": "source_code",
        "text": "\"Chocolate\", \"Strawberry\", \"Vanilla Fudge Swirl\", \n    \"Mint Chip\", \"Mocha Almond Fudge\", \"Rum Raisin\", \n    \"Praline Cream\", \"Mud Pie\"",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "44c8381d4903c00cf809663464eaaac2",
        "type": "source_code",
        "text": "new JTextArea(flavors.length, 20);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "90e4cc2fc73a162b6c405c658c39f4bc",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      if(count < flavors.length) { \n        lItems.add(0, flavors[count++]); \n      } else { \n        // Disable, since there are no more \n        // flavors left to be added to the List \n        b.setEnabled(false); \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "39cc849f6da5e4ff7dcac954ec6617fe",
        "type": "source_code",
        "text": "new ListSelectionListener() { \n      public void valueChanged(ListSelectionEvent e) { \n        if(e.getValueIsAdjusting()) return; \n        t.setText(\"\"); \n        for(Object item : lst.getSelectedValues()) \n          t.append(item + \"\\n\"); \n      } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "478af28d39fac9b66daf5e26cc51435f",
        "type": "source_code",
        "text": "t.setEditable(false); \n    setLayout(new FlowLayout()); \n    // Create Borders for components: \n    Border brd = BorderFactory.createMatteBorder( \n      1, 1, 2, 2, Color.BLACK); \n    lst.setBorder(brd); \n    t.setBorder(brd); \n    // Add the first four items to the List \n    for(int i = 0; i < 4; i++) \n      lItems.addElement(flavors[count++]); \n    add(t); \n    add(lst); \n    add(b); \n    // Register event listeners \n    lst.addListSelectionListener(ll); \n    b.addActionListener(bl);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "d038c326abf499f93c28f34ef3fdc85a",
        "type": "source_code",
        "text": "run(new List(), 250, 375);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e446a83f98947a13bd61ecce0efb7112",
        "type": "source_code",
        "text": "\"Chocolate\", \"Strawberry\", \"Vanilla Fudge Swirl\", \n    \"Mint Chip\", \"Mocha Almond Fudge\", \"Rum Raisin\", \n    \"Praline Cream\", \"Mud Pie\"",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f9a662e9803790766ea1d3bcd3c4cd68",
        "type": "source_code",
        "text": "int i = 0; \n    for(String flavor : flavors) \n      tabs.addTab(flavors[i], \n        new JButton(\"Tabbed pane \" + i++)); \n    tabs.addChangeListener(new ChangeListener() { \n      public void stateChanged(ChangeEvent e) { \n        txt.setText(\"Tab selected: \" + \n          tabs.getSelectedIndex()); \n      } \n    }); \n    add(BorderLayout.SOUTH, txt); \n    add(tabs);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "e80a9596ac8ef7a2b75ee404a009bec7",
        "type": "source_code",
        "text": "run(new TabbedPane1(), 400, 250);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8cfe2b301e97e93bc6ab28f4e08867da",
        "type": "source_code",
        "text": "new JButton(\"Alert\"), new JButton(\"Yes/No\"), \n    new JButton(\"Color\"), new JButton(\"Input\"), \n    new JButton(\"3 Vals\")",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "08c73267bb29f6a79a4f0e5d0759d640",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      String id = ((JButton)e.getSource()).getText(); \n      if(id.equals(\"Alert\")) \n        JOptionPane.showMessageDialog(null, \n          \"There\u2019s a bug on you!\", \"Hey!\", \n          JOptionPane.ERROR_MESSAGE); \n      else if(id.equals(\"Yes/No\")) \n        JOptionPane.showConfirmDialog(null, \n          \"or no\", \"choose yes\", \n          JOptionPane.YES_NO_OPTION); \n      else if(id.equals(\"Color\")) { \n        Object[] options = { \"Red\", \"Green\" }; \n        int sel = JOptionPane.showOptionDialog( \n          null, \"Choose a Color!\", \"Warning\", \n          JOptionPane.DEFAULT_OPTION, \n          JOptionPane.WARNING_MESSAGE, null, \n          options, options[0]); \n        if(sel != JOptionPane.CLOSED_OPTION) \n          txt.setText(\"Color Selected: \" + options[sel]); \n      } else if(id.equals(\"Input\")) { \n        String val = JOptionPane.showInputDialog( \n            \"How many fingers do you see?\"); \n        txt.setText(val); \n      } else if(id.equals(\"3 Vals\")) { \n        Object[] selections = {\"First\", \"Second\", \"Third\"}; \n        Object val = JOptionPane.showInputDialog( \n          null, \"Choose one\", \"Input\", \n          JOptionPane.INFORMATION_MESSAGE, \n          null, selections, selections[0]); \n        if(val != null) \n          txt.setText(val.toString()); \n      } \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "de9c883645144c3e4c0935ac652e6a5b",
        "type": "source_code",
        "text": "setLayout(new FlowLayout()); \n    for(int i = 0; i < b.length; i++) { \n      b[i].addActionListener(al); \n      add(b[i]); \n    } \n    add(txt);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "d3433da08180fc17d1599314d3779891",
        "type": "source_code",
        "text": "run(new MessageBoxes(), 200, 200);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6922fc514229bc854dc1be87c8004582",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      t.setText(((JMenuItem)e.getSource()).getText()); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e0bd154c5561fa9aabbb928c88f2145f",
        "type": "source_code",
        "text": "new JMenu(\"Winken\"), new JMenu(\"Blinken\"), \n    new JMenu(\"Nod\")",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8ed6d157593d3e519233d46958744707",
        "type": "source_code",
        "text": "new JMenuItem(\"Fee\"), new JMenuItem(\"Fi\"), \n    new JMenuItem(\"Fo\"),  new JMenuItem(\"Zip\"), \n    new JMenuItem(\"Zap\"), new JMenuItem(\"Zot\"), \n    new JMenuItem(\"Olly\"), new JMenuItem(\"Oxen\"), \n    new JMenuItem(\"Free\")",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e543d31833fedbc951d19c11c1f3695e",
        "type": "source_code",
        "text": "for(int i = 0; i < items.length; i++) { \n      items[i].addActionListener(al); \n      menus[i % 3].add(items[i]); \n    } \n    JMenuBar mb = new JMenuBar();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "2477bdd270f03a472352adb77b4c3607",
        "type": "source_code",
        "text": "for(JMenu jm : menus) \n      mb.add(jm); \n    setJMenuBar(mb); \n    setLayout(new FlowLayout()); \n    add(t);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "137b617df3a2a0e81bf262f800bd218b",
        "type": "source_code",
        "text": "run(new SimpleMenus(), 200, 150);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "e446a83f98947a13bd61ecce0efb7112",
        "type": "source_code",
        "text": "\"Chocolate\", \"Strawberry\", \"Vanilla Fudge Swirl\", \n    \"Mint Chip\", \"Mocha Almond Fudge\", \"Rum Raisin\", \n    \"Praline Cream\", \"Mud Pie\"",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "85fe6cd6edd51e1c456ff14382d1a7c7",
        "type": "source_code",
        "text": "f = new JMenu(\"File\"), \n    m = new JMenu(\"Flavors\"), \n    s = new JMenu(\"Safety\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c8a34585b016b5ea1b2854d43ea95499",
        "type": "source_code",
        "text": "new JCheckBoxMenuItem(\"Guard\"), \n    new JCheckBoxMenuItem(\"Hide\")",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8208eddbe45aca6d4c14fd8c4520cc37",
        "type": "source_code",
        "text": "// Adding a menu shortcut (mnemonic) is very \n    // simple, but only JMenuItems can have them \n    // in their constructors: \n    new JMenuItem(\"Foo\", KeyEvent.VK_F), \n    new JMenuItem(\"Bar\", KeyEvent.VK_A),",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "3b7f54e8784e91520c6c7544c37822bc",
        "type": "source_code",
        "text": "// No shortcut: \n    new JMenuItem(\"Baz\"),",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "0f09b7cfb035bad8b2d1db0d9d0d7a83",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      JMenuBar m = getJMenuBar(); \n      setJMenuBar(m == mb1 ? mb2 : mb1); \n      validate(); // Refresh the frame \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "054aa64af52bca0661d3ffecbee50e2a",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      JMenuItem target = (JMenuItem)e.getSource(); \n      String actionCommand = target.getActionCommand(); \n      if(actionCommand.equals(\"Open\")) { \n        String s = t.getText(); \n        boolean chosen = false; \n        for(String flavor : flavors) \n          if(s.equals(flavor)) \n            chosen = true; \n        if(!chosen) \n          t.setText(\"Choose a flavor first!\"); \n        else \n          t.setText(\"Opening \" + s + \". Mmm, mm!\"); \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "32aab663a4efc4615afee2e8d46d2430",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      JMenuItem target = (JMenuItem)e.getSource(); \n      t.setText(target.getText()); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dcd2b2198bc3b75ca3f73678917388d2",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      t.setText(\"Foo selected\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b922b06c8a672b24f7a2d26ae559b6fb",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      t.setText(\"Bar selected\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "09374ed3c6ac9da20c5b18d8a6ac6a5f",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      t.setText(\"Baz selected\"); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "87bf1c6ab6ab2a97db9a3e4c035506ec",
        "type": "source_code",
        "text": "public void itemStateChanged(ItemEvent e) { \n      JCheckBoxMenuItem target = \n        (JCheckBoxMenuItem)e.getSource(); \n      String actionCommand = target.getActionCommand(); \n      if(actionCommand.equals(\"Guard\")) \n        t.setText(\"Guard the Ice Cream! \" + \n          \"Guarding is \" + target.getState()); \n      else if(actionCommand.equals(\"Hide\")) \n        t.setText(\"Hide the Ice Cream! \" + \n          \"Is it hidden? \" + target.getState());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "cbb184dd8e05c9709e5dcaedaa0495cf",
        "type": "source_code",
        "text": "}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dfa7c63eae6cc9df3a84d464ef79053f",
        "type": "source_code",
        "text": "ML ml = new ML(); \n    CMIL cmil = new CMIL(); \n    safety[0].setActionCommand(\"Guard\"); \n    safety[0].setMnemonic(KeyEvent.VK_G); \n    safety[0].addItemListener(cmil); \n    safety[1].setActionCommand(\"Hide\"); \n    safety[1].setMnemonic(KeyEvent.VK_H); \n    safety[1].addItemListener(cmil); \n    other[0].addActionListener(new FooL()); \n    other[1].addActionListener(new BarL()); \n    other[2].addActionListener(new BazL()); \n    FL fl = new FL(); \n    int n = 0; \n    for(String flavor : flavors) { \n      JMenuItem mi = new JMenuItem(flavor); \n      mi.addActionListener(fl); \n      m.add(mi); \n      // Add separators at intervals: \n      if((n++ + 1) % 3 == 0) \n        m.addSeparator(); \n    } \n    for(JCheckBoxMenuItem sfty : safety) \n      s.add(sfty); \n    s.setMnemonic(KeyEvent.VK_A); \n    f.add(s); \n    f.setMnemonic(KeyEvent.VK_F); \n    for(int i = 0; i < file.length; i++) { \n      file[i].addActionListener(ml); \n      f.add(file[i]); \n    } \n    mb1.add(f); \n    mb1.add(m); \n    setJMenuBar(mb1); \n    t.setEditable(false); \n    add(t, BorderLayout.CENTER); \n    // Set up the system for swapping menus: \n    b.addActionListener(new BL()); \n    b.setMnemonic(KeyEvent.VK_S); \n    add(b, BorderLayout.NORTH); \n    for(JMenuItem oth : other) \n      fooBar.add(oth); \n    fooBar.setMnemonic(KeyEvent.VK_B); \n    mb2.add(fooBar);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "af32cf0439546a0e18f9f207657a2783",
        "type": "source_code",
        "text": "run(new Menus(), 300, 200);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b33ff0a349e66b78a9b800f6e15e2a0a",
        "type": "source_code",
        "text": "setLayout(new FlowLayout()); \n    add(t); \n    ActionListener al = new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        t.setText(((JMenuItem)e.getSource()).getText()); \n      } \n    }; \n    JMenuItem m = new JMenuItem(\"Hither\"); \n    m.addActionListener(al); \n    popup.add(m); \n    m = new JMenuItem(\"Yon\"); \n    m.addActionListener(al); \n    popup.add(m); \n    m = new JMenuItem(\"Afar\"); \n    m.addActionListener(al); \n    popup.add(m); \n    popup.addSeparator(); \n    m = new JMenuItem(\"Stay Here\"); \n    m.addActionListener(al); \n    popup.add(m); \n    PopupListener pl = new PopupListener(); \n    addMouseListener(pl); \n    t.addMouseListener(pl);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "09a3678566d9573dd011b2b8fb8a9e96",
        "type": "source_code",
        "text": "public void mousePressed(MouseEvent e) { \n      maybeShowPopup(e); \n    } \n    public void mouseReleased(MouseEvent e) { \n      maybeShowPopup(e); \n    } \n    private void maybeShowPopup(MouseEvent e) { \n      if(e.isPopupTrigger()) \n        popup.show(e.getComponent(), e.getX(), e.getY()); \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0d6946a0f92a3b1e1cfb85a7cf7dc7e4",
        "type": "source_code",
        "text": "run(new Popup(), 300, 200);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e5d8b895fcde3b2db899c6784101526a",
        "type": "source_code",
        "text": "super.paintComponent(g); \n    int maxWidth = getWidth(); \n    double hstep = (double)maxWidth / (double)points; \n    int maxHeight = getHeight(); \n    pts = new int[points]; \n    for(int i = 0; i < points; i++) \n      pts[i] = \n        (int)(sines[i] * maxHeight/2 * .95 + maxHeight/2); \n    g.setColor(Color.RED); \n    for(int i = 1; i < points; i++) { \n      int x1 = (int)((i - 1) * hstep); \n      int x2 = (int)(i * hstep); \n      int y1 = pts[i-1]; \n      int y2 = pts[i];",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "9cc67c4546b862f666a668d552b68ddf",
        "type": "source_code",
        "text": "g.drawLine(x1, y1, x2, y2); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "571c24c042b7e26c1ee0032674463bbd",
        "type": "source_code",
        "text": "cycles = newCycles; \n    points = SCALEFACTOR * cycles * 2; \n    sines = new double[points]; \n    for(int i = 0; i < points; i++) { \n      double radians = (Math.PI / SCALEFACTOR) * i; \n      sines[i] = Math.sin(radians); \n    } \n    repaint();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "1885f801a086ad144de52cd266407363",
        "type": "source_code",
        "text": "add(sines); \n    adjustCycles.addChangeListener(new ChangeListener() { \n      public void stateChanged(ChangeEvent e) { \n        sines.setCycles( \n          ((JSlider)e.getSource()).getValue()); \n      } \n    }); \n    add(BorderLayout.SOUTH, adjustCycles);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "40589fc7743d82c2cbced06bca0a6dc5",
        "type": "source_code",
        "text": "run(new SineWave(), 700, 400);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "dbe1d82b00bb551051c22c2cd6f217af",
        "type": "source_code",
        "text": "super(parent, \"My dialog\", true); \n    setLayout(new FlowLayout()); \n    add(new JLabel(\"Here is my dialog\")); \n    JButton ok = new JButton(\"OK\"); \n    ok.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        dispose(); // Closes the dialog \n      } \n    }); \n    add(ok); \n    setSize(150,125);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e36160d0d508c31c4e3a201a3b420a51",
        "type": "source_code",
        "text": "b1.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        dlg.setVisible(true); \n      } \n    }); \n    add(b1);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6b1ad931f3fd3e239f88f6ee90766987",
        "type": "source_code",
        "text": "run(new Dialogs(), 125, 75);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a74a21e93235b30fd1b35367c44095fe",
        "type": "source_code",
        "text": "rows = new JTextField(\"3\"),",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "8c3bfc74d8b5762f26479c88ae3164e5",
        "type": "source_code",
        "text": "cols = new JTextField(\"3\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "aafbdcd07616b4133686baa49ce3140c",
        "type": "source_code",
        "text": "private State turn = State.XX; // Start with x\u2019s turn \n    ToeDialog(int cellsWide, int cellsHigh) { \n      setTitle(\"The game itself\"); \n      setLayout(new GridLayout(cellsWide, cellsHigh)); \n      for(int i = 0; i < cellsWide * cellsHigh; i++) \n        add(new ToeButton()); \n      setSize(cellsWide * 50, cellsHigh * 50); \n      setDefaultCloseOperation(DISPOSE_ON_CLOSE); \n    } \n    class ToeButton extends JPanel { \n      private State state = State.BLANK; \n      public ToeButton() { addMouseListener(new ML()); } \n      public void paintComponent(Graphics g) { \n        super.paintComponent(g); \n        int \n          x1 = 0, y1 = 0, \n          x2 = getSize().width - 1, \n          y2 = getSize().height - 1; \n        g.drawRect(x1, y1, x2, y2); \n        x1 = x2/4; \n        y1 = y2/4; \n        int wide = x2/2, high = y2/2; \n        if(state == State.XX) { \n          g.drawLine(x1, y1, x1 + wide, y1 + high); \n          g.drawLine(x1, y1 + high, x1 + wide, y1); \n        } \n        if(state == State.OO) \n          g.drawOval(x1, y1, x1 + wide/2, y1 + high/2); \n      } \n      class ML extends MouseAdapter { \n        public void mousePressed(MouseEvent e) { \n          if(state == State.BLANK) { \n            state = turn; \n            turn = \n              (turn == State.XX ? State.OO : State.XX); \n          } \n          else \n            state = \n              (state == State.XX ? State.OO : State.XX); \n          repaint(); \n        } \n      } \n    }",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "91f3cb2aa9728fcf16a4aadb2aa4432d",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      JDialog d = new ToeDialog( \n        new Integer(rows.getText()), \n        new Integer(cols.getText())); \n      d.setVisible(true); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "07729b583598d57b2b438604521ef007",
        "type": "source_code",
        "text": "JPanel p = new JPanel(); \n    p.setLayout(new GridLayout(2,2)); \n    p.add(new JLabel(\"Rows\", JLabel.CENTER)); \n    p.add(rows); \n    p.add(new JLabel(\"Columns\", JLabel.CENTER)); \n    p.add(cols); \n    add(p, BorderLayout.NORTH);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9c8cc4095a166a3ff3c3edf90c8d1a22",
        "type": "source_code",
        "text": "JButton b = new JButton(\"go\"); \n    b.addActionListener(new BL()); \n    add(b, BorderLayout.SOUTH);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "889f68ffda7342b5ebfa9eeb41e2f982",
        "type": "source_code",
        "text": "run(new TicTacToe(), 200, 200);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "216f8592058b79e412680ceb345c643b",
        "type": "source_code",
        "text": "fileName = new JTextField(), \n    dir = new JTextField();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "459ff1856ad7be7e50968852e7b180ac",
        "type": "source_code",
        "text": "open = new JButton(\"Open\"), \n    save = new JButton(\"Save\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "160bf59e42147b43d0d88f2a02692f4e",
        "type": "source_code",
        "text": "JPanel p = new JPanel();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "38f49458d83268a3a907abc56d116366",
        "type": "source_code",
        "text": "open.addActionListener(new OpenL()); \n    p.add(open); \n    save.addActionListener(new SaveL()); \n    p.add(save); \n    add(p, BorderLayout.SOUTH); \n    dir.setEditable(false); \n    fileName.setEditable(false); \n    p = new JPanel(); \n    p.setLayout(new GridLayout(2,1)); \n    p.add(fileName); \n    p.add(dir); \n    add(p, BorderLayout.NORTH);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "cc6313a96b45182309c9e71eae88d718",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      JFileChooser c = new JFileChooser(); \n      // Demonstrate \"Open\" dialog: \n      int rVal = c.showOpenDialog(FileChooserTest.this); \n      if(rVal == JFileChooser.APPROVE_OPTION) { \n        fileName.setText(c.getSelectedFile().getName()); \n        dir.setText(c.getCurrentDirectory().toString()); \n      } \n      if(rVal == JFileChooser.CANCEL_OPTION) { \n        fileName.setText(\"You pressed cancel\"); \n        dir.setText(\"\"); \n      } \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ebe4f8a59c77bf13ef6042c5f6ebc3eb",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      JFileChooser c = new JFileChooser(); \n      // Demonstrate \"Save\" dialog: \n      int rVal = c.showSaveDialog(FileChooserTest.this); \n      if(rVal == JFileChooser.APPROVE_OPTION) { \n        fileName.setText(c.getSelectedFile().getName()); \n        dir.setText(c.getCurrentDirectory().toString()); \n      } \n      if(rVal == JFileChooser.CANCEL_OPTION) { \n        fileName.setText(\"You pressed cancel\"); \n        dir.setText(\"\"); \n      } \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "d9522e52e280e0a2a16bd2610d68486f",
        "type": "source_code",
        "text": "run(new FileChooserTest(), 250, 150);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f9bb96572924447d347360bd0e5c2bde",
        "type": "source_code",
        "text": "\"<html><b><font size=+2>\" + \n    \"<center>Hello!<br><i>Press me now!\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "64af36135484723bcfd6ff57e615e3f6",
        "type": "source_code",
        "text": "b.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        add(new JLabel(\"<html>\" + \n          \"<i><font size=+4>Kapow!\")); \n        // Force a re-layout to include the new label: \n        validate(); \n      } \n    }); \n    setLayout(new FlowLayout()); \n    add(b);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "49c7dadbf818ac08efc483ae0e982d36",
        "type": "source_code",
        "text": "run(new HTMLButton(), 200, 500);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ff182c155ea10ba645a9f1863e7ea4a0",
        "type": "source_code",
        "text": "this, \"Monitoring Progress\", \"Test\", 0, 100);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "fcf0364fefe7387028498c2575cffaab",
        "type": "source_code",
        "text": "new JSlider(JSlider.HORIZONTAL, 0, 100, 60);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ef4e11cd3fee6419fb064529b86d6655",
        "type": "source_code",
        "text": "setLayout(new GridLayout(2,1)); \n    add(pb); \n    pm.setProgress(0); \n    pm.setMillisToPopup(1000); \n    sb.setValue(0); \n    sb.setPaintTicks(true); \n    sb.setMajorTickSpacing(20); \n    sb.setMinorTickSpacing(5); \n    sb.setBorder(new TitledBorder(\"Slide Me\")); \n    pb.setModel(sb.getModel()); // Share model \n    add(sb); \n    sb.addChangeListener(new ChangeListener() { \n      public void stateChanged(ChangeEvent e) { \n        pm.setProgress(sb.getValue()); \n      } \n    });",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0477ab4054a343fd111c2b3387358ef3",
        "type": "source_code",
        "text": "run(new Progress(), 300, 200);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "584e63b573b60fad8c14e1b755982e54",
        "type": "source_code",
        "text": "\"Eeny Meeny Minnie Mickey Moe Larry Curly\".split(\" \");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ea340a6383f06f4799a77007e196ea1a",
        "type": "source_code",
        "text": "new JButton(\"JButton\"), \n    new JTextField(\"JTextField\"), \n    new JLabel(\"JLabel\"), \n    new JCheckBox(\"JCheckBox\"), \n    new JRadioButton(\"Radio\"), \n    new JComboBox(choices), \n    new JList(choices),",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "1a65c23bbf27886d0b81d296ae34841e",
        "type": "source_code",
        "text": "super(\"Look And Feel\"); \n    setLayout(new FlowLayout()); \n    for(Component component : samples) \n      add(component);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "1d2c9dc0c8ab9141bf5470f254eabbc5",
        "type": "source_code",
        "text": "System.out.println( \n      \"Usage:LookAndFeel [cross|system|motif]\");",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "be9b362ddf64f7529eb9f8f53fbf813d",
        "type": "source_code",
        "text": "System.exit(1);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "dfce50342b49d5dba87875d967a129ad",
        "type": "source_code",
        "text": "if(args.length == 0) usageError(); \n    if(args[0].equals(\"cross\")) { \n      try { \n        UIManager.setLookAndFeel(UIManager. \n          getCrossPlatformLookAndFeelClassName()); \n      } catch(Exception e) { \n        e.printStackTrace(); \n      } \n    } else if(args[0].equals(\"system\")) { \n      try { \n        UIManager.setLookAndFeel(UIManager. \n          getSystemLookAndFeelClassName()); \n      } catch(Exception e) { \n        e.printStackTrace(); \n      } \n    } else if(args[0].equals(\"motif\")) { \n      try { \n        UIManager.setLookAndFeel(\"com.sun.java.\"+ \n          \"swing.plaf.motif.MotifLookAndFeel\"); \n      } catch(Exception e) { \n        e.printStackTrace(); \n      } \n    } else usageError(); \n    // Note the look & feel must be set before \n    // any components are created. \n    run(new LookAndFeel(), 300, 300);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "459ff1856ad7be7e50968852e7b180ac",
        "type": "source_code",
        "text": "open = new JButton(\"Open\"), \n    save = new JButton(\"Save\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "998288ced6117f2a024ab30bed695c0c",
        "type": "source_code",
        "text": "JPanel p = new JPanel(); \n    open.addActionListener(new OpenL()); \n    p.add(open); \n    save.addActionListener(new SaveL()); \n    p.add(save); \n    jsp.getViewport().add(ep); \n    add(jsp, BorderLayout.CENTER); \n    add(p, BorderLayout.SOUTH); \n    fileName.setEditable(false); \n    p = new JPanel(); \n    p.setLayout(new GridLayout(2,1)); \n    p.add(fileName); \n    add(p, BorderLayout.NORTH); \n    ep.setContentType(\"text\"); \n    save.setEnabled(false);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bc301acbc3c05f94553287e805ac3d01",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      FileOpenService fs = null; \n      try { \n        fs = (FileOpenService)ServiceManager.lookup( \n          \"javax.jnlp.FileOpenService\"); \n      } catch(UnavailableServiceException use) { \n        throw new RuntimeException(use); \n      } \n      if(fs != null) { \n        try { \n          fileContents = fs.openFileDialog(\".\", \n            new String[]{\"txt\", \"*\"}); \n          if(fileContents == null) \n            return; \n          fileName.setText(fileContents.getName()); \n          ep.read(fileContents.getInputStream(), null); \n        } catch(Exception exc) { \n          throw new RuntimeException(exc); \n        } \n        save.setEnabled(true); \n      } \n    }",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "f9158f6f2e6e7d22da0823d2c011fa3c",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      FileSaveService fs = null; \n      try { \n        fs = (FileSaveService)ServiceManager.lookup( \n          \"javax.jnlp.FileSaveService\"); \n      } catch(UnavailableServiceException use) { \n        throw new RuntimeException(use); \n      } \n      if(fs != null) { \n        try { \n          fileContents = fs.saveFileDialog(\".\", \n            new String[]{\"txt\"}, \n            new ByteArrayInputStream( \n              ep.getText().getBytes()), \n            fileContents.getName());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "46385796b95aebe76fd6e1aedbbbf669",
        "type": "source_code",
        "text": "if(fileContents == null) \n            return; \n          fileName.setText(fileContents.getName()); \n        } catch(Exception exc) { \n          throw new RuntimeException(exc); \n        } \n      } \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f20e45e16f8ff14610872d5bbd63f1ea",
        "type": "source_code",
        "text": "JnlpFileChooser fc = new JnlpFileChooser(); \n    fc.setSize(400, 300); \n    fc.setVisible(true);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4f3d887236d4976f735c80aa478ff3e4",
        "type": "source_code",
        "text": "<title>FileChooser demo application</title> \n    <vendor>Mindview Inc.</vendor> \n    <description> \n      Jnlp File chooser Application \n    </description> \n    <description kind=\"short\"> \n      Demonstrates opening, reading and writing a text file \n    </description> \n    <icon href=\"mindview.gif\"/> \n    <offline-allowed/>",
        "programming_language": "XML",
        "weight": 0.0
    },
    {
        "id": "42380f4ea8e6d61bfdce8900a1b27237",
        "type": "source_code",
        "text": "<j2se version=\"1.3+\" \n      href=\"http://java.sun.com/products/autodl/j2se\"/> \n    <jar href=\"jnlpfilechooser.jar\" download=\"eager\"/>",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "372aaf063df499d0095a03e94ec7b97d",
        "type": "source_code",
        "text": "main-class=\"gui.jnlp.JnlpFileChooser\"/>",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "210e2f63d75f29f4ef0fcfb4ccac6731",
        "type": "source_code",
        "text": "b1 = new JButton(\"Start Long Running Task\"), \n    b2 = new JButton(\"End Long Running Task\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "f0adca0d7149895befb627f25d5a22fb",
        "type": "source_code",
        "text": "b1.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent evt) { \n        try { \n          TimeUnit.SECONDS.sleep(3); \n        } catch(InterruptedException e) { \n          System.out.println(\"Task interrupted\"); \n          return; \n        } \n        System.out.println(\"Task completed\"); \n      } \n    }); \n    b2.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent evt) { \n        // Interrupt yourself? \n        Thread.currentThread().interrupt(); \n      } \n    }); \n    setLayout(new FlowLayout()); \n    add(b1); \n    add(b2);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "b4a46ac20e084b97417267ed62ccf91a",
        "type": "source_code",
        "text": "run(new LongRunningTask(), 200, 150);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f892d671df56c71507ce4594602bf306",
        "type": "source_code",
        "text": "System.out.println(this + \" started\"); \n    try { \n      TimeUnit.SECONDS.sleep(3); \n    } catch(InterruptedException e) { \n      System.out.println(this + \" interrupted\"); \n      return; \n    } \n    System.out.println(this + \" completed\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "210e2f63d75f29f4ef0fcfb4ccac6731",
        "type": "source_code",
        "text": "b1 = new JButton(\"Start Long Running Task\"), \n    b2 = new JButton(\"End Long Running Task\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c1023bf6a8e582f63e6e1546bd8b024c",
        "type": "source_code",
        "text": "Executors.newSingleThreadExecutor();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "04f316aeac8bf510a20433382dba1e21",
        "type": "source_code",
        "text": "b1.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        Task task = new Task(); \n        executor.execute(task); \n        System.out.println(task + \" added to the queue\"); \n      } \n    }); \n    b2.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        executor.shutdownNow(); // Heavy-handed \n      } \n    }); \n    setLayout(new FlowLayout()); \n    add(b1); \n    add(b2);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6c48aae89c2c9dfcb1db478978e84a3a",
        "type": "source_code",
        "text": "run(new InterruptableLongRunningTask(), 200, 150);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f220879a0aa3e1435e1e3b4d4fcaa7ea",
        "type": "source_code",
        "text": "this.future = future; \n    this.task = task;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "c1023bf6a8e582f63e6e1546bd8b024c",
        "type": "source_code",
        "text": "Executors.newSingleThreadExecutor();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0df9a57fc4cb3c617e5d0b6796900537",
        "type": "source_code",
        "text": "add(new TaskItem<R,C>(exec.submit(task),task));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "8d5b97fee302f4f5ebe40db6d5da1d07",
        "type": "source_code",
        "text": "Iterator<TaskItem<R,C>> items = iterator(); \n    List<R> results = new ArrayList<R>(); \n    while(items.hasNext()) { \n      TaskItem<R,C> item = items.next(); \n      if(item.future.isDone()) { \n        try { \n          results.add(item.future.get()); \n        } catch(Exception e) { \n          throw new RuntimeException(e); \n        } \n        items.remove(); \n      } \n    } \n    return results;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ecff1c2c2f693319e5c845008ae366b6",
        "type": "source_code",
        "text": "Iterator<TaskItem<R,C>> items = iterator(); \n    List<String> results = new ArrayList<String>(); \n    while(items.hasNext()) { \n      TaskItem<R,C> item = items.next(); \n      // Leave completed tasks for results reporting: \n      if(!item.future.isDone()) { \n        results.add(\"Cancelling \" + item.task); \n        item.future.cancel(true); // May interrupt \n        items.remove(); \n      } \n    } \n    return results;",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "da2cd2e94eefd7081eec0e3c54a120ab",
        "type": "source_code",
        "text": "run(); \n    return \"Return value of \" + this;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ec8ca8e65e1f7973adb8a8e679bee009",
        "type": "source_code",
        "text": "b1 = new JButton(\"Start Long Running Task\"), \n    b2 = new JButton(\"End Long Running Task\"), \n    b3 = new JButton(\"Get results\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "86efe55a1ca8184fc4d5db4f58c3b80b",
        "type": "source_code",
        "text": "new TaskManager<String,CallableTask>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "87b037ccbbec545049c6fd6ff21fa4ff",
        "type": "source_code",
        "text": "b1.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        CallableTask task = new CallableTask(); \n        manager.add(task); \n        System.out.println(task + \" added to the queue\"); \n      } \n    }); \n    b2.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        for(String result : manager.purge()) \n          System.out.println(result);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "ab4641d82835b5e9c8475599231a2962",
        "type": "source_code",
        "text": "} \n    }); \n    b3.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        // Sample call to a Task method: \n        for(TaskItem<String,CallableTask> tt : \n            manager) \n          tt.task.id(); // No cast required \n        for(String result : manager.getResults()) \n          System.out.println(result); \n      } \n    }); \n    setLayout(new FlowLayout()); \n    add(b1); \n    add(b2); \n    add(b3);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "a3203fc6cdb367e86016d842348eaf4e",
        "type": "source_code",
        "text": "run(new InterruptableLongRunningCallable(), 200, 150);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "05719ac69f7e313c2ca2ff664fb8dd89",
        "type": "source_code",
        "text": "this.monitor = monitor; \n    monitor.setNote(toString()); \n    monitor.setMaximum(MAX - 1); \n    monitor.setMillisToPopup(500);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "92dec778f606e014919f6ece131a1b5d",
        "type": "source_code",
        "text": "System.out.println(this + \" started\"); \n    try { \n      for(int i = 0; i < MAX; i++) { \n        TimeUnit.MILLISECONDS.sleep(500); \n        if(monitor.isCanceled()) \n          Thread.currentThread().interrupt();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "6557ff17fcac41c61d4d37ba895f74c4",
        "type": "source_code",
        "text": "final int progress = i; \n        SwingUtilities.invokeLater( \n          new Runnable() { \n            public void run() { \n              monitor.setProgress(progress); \n            } \n          } \n        ); \n      } \n    } catch(InterruptedException e) { \n      monitor.close(); \n      System.out.println(this + \" interrupted\"); \n      return \"Result: \" + this + \" interrupted\"; \n    } \n    System.out.println(this + \" completed\"); \n    return \"Result: \" + this + \" completed\";",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "ec8ca8e65e1f7973adb8a8e679bee009",
        "type": "source_code",
        "text": "b1 = new JButton(\"Start Long Running Task\"), \n    b2 = new JButton(\"End Long Running Task\"), \n    b3 = new JButton(\"Get results\");",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "890d1cbbfab7add00dc394bcd27985e5",
        "type": "source_code",
        "text": "new TaskManager<String,MonitoredCallable>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "849f4f98a1bb6f5b9c8afa033f04d73a",
        "type": "source_code",
        "text": "b1.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        MonitoredCallable task = new MonitoredCallable( \n          new ProgressMonitor( \n            MonitoredLongRunningCallable.this, \n            \"Long-Running Task\", \"\", 0, 0) \n        ); \n        manager.add(task); \n        System.out.println(task + \" added to the queue\"); \n      } \n    }); \n    b2.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        for(String result : manager.purge()) \n          System.out.println(result); \n      } \n    }); \n    b3.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        for(String result : manager.getResults()) \n          System.out.println(result); \n      } \n    }); \n    setLayout(new FlowLayout()); \n    add(b1); \n    add(b2); \n    add(b3);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "488054d189aba75697710bfd0aea8d46",
        "type": "source_code",
        "text": "run(new MonitoredLongRunningCallable(), 200, 500);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "455a868e60b52e1d24b50379d80911bd",
        "type": "source_code",
        "text": "g.setColor(color); \n    Dimension s = getSize(); \n    g.fillRect(0, 0, s.width, s.height);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "75eb06032be0c533b939a0842b4dbd05",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        color = new Color(rand.nextInt(0xFFFFFF)); \n        repaint(); // Asynchronously request a paint() \n        TimeUnit.MILLISECONDS.sleep(pause); \n      } \n    } catch(InterruptedException e) { \n      // Acceptable way to exit \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "c23539246db1546d265aafaea3f738aa",
        "type": "source_code",
        "text": "Executors.newCachedThreadPool();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a5f3645c2c8012baf46ec0520131ab27",
        "type": "source_code",
        "text": "setLayout(new GridLayout(grid, grid)); \n    for(int i = 0; i < grid * grid; i++) { \n      CBox cb = new CBox(pause); \n      add(cb); \n      exec.execute(cb); \n    }",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "9dfe884102abe316daf3d822f1fb2969",
        "type": "source_code",
        "text": "ColorBoxes boxes = new ColorBoxes(); \n    if(args.length > 0) \n      boxes.grid = new Integer(args[0]); \n    if(args.length > 1) \n      boxes.pause = new Integer(args[1]); \n    boxes.setUp(); \n    run(boxes, 500, 400);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "93a9a0dd419805253c6fb2f58a6bb9ab",
        "type": "source_code",
        "text": "and JavaBeans",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7d7eea4a0102ae9df5c591370f9d7b0b",
        "type": "source_code",
        "text": "jumps = newJumps;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6eed0067fd440a15608264c822280a5d",
        "type": "source_code",
        "text": "color = newColor;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "2ca81bdb25f3d42ec4c126f5240e3313",
        "type": "source_code",
        "text": "spots = newSpots;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "329527aecf585ceb2e5f3b36effd6fea",
        "type": "source_code",
        "text": "//...",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "8fe5a459b8cf7a79462d079c3b9164ba",
        "type": "source_code",
        "text": "// ...",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "8fe5a459b8cf7a79462d079c3b9164ba",
        "type": "source_code",
        "text": "// ...",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "8fe5a459b8cf7a79462d079c3b9164ba",
        "type": "source_code",
        "text": "// ...",
        "programming_language": "Scilab",
        "weight": 0.0
    },
    {
        "id": "e2f96c9d7951f1a832f7b878177ab1dc",
        "type": "source_code",
        "text": "System.out.println(\"Ribbet!\");",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "f1a9d0da6c954452354529e3f773069a",
        "type": "source_code",
        "text": "results.setText(\"\"); \n    BeanInfo bi = null; \n    try { \n      bi = Introspector.getBeanInfo(bean, Object.class); \n    } catch(IntrospectionException e) { \n      print(\"Couldn\u2019t introspect \" +  bean.getName()); \n      return; \n    } \n    for(PropertyDescriptor d: bi.getPropertyDescriptors()){ \n      Class<?> p = d.getPropertyType(); \n      if(p == null) continue; \n      print(\"Property type:\\n  \" + p.getName() + \n        \"Property name:\\n  \" + d.getName()); \n      Method readMethod = d.getReadMethod(); \n      if(readMethod != null) \n        print(\"Read method:\\n  \" + readMethod); \n      Method writeMethod = d.getWriteMethod(); \n      if(writeMethod != null) \n        print(\"Write method:\\n  \" + writeMethod); \n      print(\"====================\"); \n    } \n    print(\"Public methods:\"); \n    for(MethodDescriptor m : bi.getMethodDescriptors()) \n      print(m.getMethod().toString()); \n    print(\"======================\"); \n    print(\"Event support:\"); \n    for(EventSetDescriptor e: bi.getEventSetDescriptors()){ \n      print(\"Listener type:\\n  \" + \n        e.getListenerType().getName()); \n      for(Method lm : e.getListenerMethods()) \n        print(\"Listener method:\\n  \" + lm.getName()); \n      for(MethodDescriptor lmd : \n          e.getListenerMethodDescriptors() ) \n        print(\"Method descriptor:\\n  \" + lmd.getMethod()); \n      Method addListener= e.getAddListenerMethod(); \n      print(\"Add Listener Method:\\n  \" + addListener); \n      Method removeListener = e.getRemoveListenerMethod(); \n      print(\"Remove Listener Method:\\n  \"+ removeListener); \n      print(\"====================\");",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "cbb184dd8e05c9709e5dcaedaa0495cf",
        "type": "source_code",
        "text": "}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1534c9f4b2c68a6116a9faa00b89c5ad",
        "type": "source_code",
        "text": "public void actionPerformed(ActionEvent e) { \n      String name = query.getText(); \n      Class<?> c = null; \n      try { \n        c = Class.forName(name); \n      } catch(ClassNotFoundException ex) { \n        results.setText(\"Couldn\u2019t find \" + name); \n        return; \n      } \n      dump(c); \n    }",
        "programming_language": "JavaScript+PHP",
        "weight": 0.0
    },
    {
        "id": "3f8cbbf57e3ec1f21ccd4f085cadc0d6",
        "type": "source_code",
        "text": "JPanel p = new JPanel(); \n    p.setLayout(new FlowLayout()); \n    p.add(new JLabel(\"Qualified bean name:\")); \n    p.add(query); \n    add(BorderLayout.NORTH, p); \n    add(new JScrollPane(results)); \n    Dumper dmpr = new Dumper(); \n    query.addActionListener(dmpr); \n    query.setText(\"frogbean.Frog\"); \n    // Force evaluation \n    dmpr.actionPerformed(new ActionEvent(dmpr, 0, \"\"));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "aa3a955ecb7b5abdfd15e1f69bd69404",
        "type": "source_code",
        "text": "run(new BeanDumper(), 600, 500);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "892940ca8752940426107e4cc2386c12",
        "type": "source_code",
        "text": "addMouseListener(new ML()); \n    addMouseMotionListener(new MML());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e99551fda5dffe60ce6ca38613dc9086",
        "type": "source_code",
        "text": "cSize = newSize;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "07ff35ad90fffbc6564cc1eb3beddf1b",
        "type": "source_code",
        "text": "text = newText;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "09214a48f79a6d1e4743b176ea3f9cb8",
        "type": "source_code",
        "text": "fontSize = newSize;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1bdb02e7b703325e98d0c0465b2b0c93",
        "type": "source_code",
        "text": "tColor = newColor;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9b522b4b6f6560ebe9173b305abab142",
        "type": "source_code",
        "text": "super.paintComponent(g); \n    g.setColor(Color.BLACK); \n    g.drawOval(xm - cSize/2, ym - cSize/2, cSize, cSize);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b5c85031655bc300cd1cfc8339c5ed84",
        "type": "source_code",
        "text": "if(actionListener != null) \n      throw new TooManyListenersException(); \n    actionListener = l;",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "44abdafb318fb182e6169e0a3dd162d1",
        "type": "source_code",
        "text": "actionListener = null;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "51a3fdc3ffcd73f942d9bdde9cf58011",
        "type": "source_code",
        "text": "public void mousePressed(MouseEvent e) { \n      Graphics g = getGraphics(); \n      g.setColor(tColor); \n      g.setFont( \n        new Font(\"TimesRoman\", Font.BOLD, fontSize)); \n      int width = g.getFontMetrics().stringWidth(text); \n      g.drawString(text, (getSize().width - width) /2, \n        getSize().height/2); \n      g.dispose(); \n      // Call the listener\u2019s method: \n      if(actionListener != null) \n        actionListener.actionPerformed( \n          new ActionEvent(BangBean.this, \n            ActionEvent.ACTION_PERFORMED, null)); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "c4f7255d65eb7cf7ea5b5f7436307d25",
        "type": "source_code",
        "text": "public void mouseMoved(MouseEvent e) { \n      xm = e.getX(); \n      ym = e.getY();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9d3f0538eb3a8a1b3541ac30b7e4e459",
        "type": "source_code",
        "text": "repaint(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7525077d100e832c78c5a0adb8417592",
        "type": "source_code",
        "text": "return new Dimension(200, 200);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "048704892935debe74cd49687e1e5e06",
        "type": "source_code",
        "text": "private int count = 0; \n    public void actionPerformed(ActionEvent e) { \n      txt.setText(\"BangBean action \"+ count++); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ced142d411c585e569ed64d338a284a4",
        "type": "source_code",
        "text": "BangBean bb = new BangBean(); \n    try { \n      bb.addActionListener(new BBL()); \n    } catch(TooManyListenersException e) { \n      txt.setText(\"Too many listeners\"); \n    } \n    add(bb); \n    add(BorderLayout.SOUTH, txt);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "0222c94a2ec2b56c51c45861ab557f67",
        "type": "source_code",
        "text": "run(new BangBeanTest(), 400, 500);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1800f5262668c3ad13482cba8cc511bc",
        "type": "source_code",
        "text": "new ArrayList<ActionListener>();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "4ebf480df3fdb65f0b730879e40013c5",
        "type": "source_code",
        "text": "addMouseListener(new ML()); \n    addMouseMotionListener(new MM());",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e99551fda5dffe60ce6ca38613dc9086",
        "type": "source_code",
        "text": "cSize = newSize;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "07ff35ad90fffbc6564cc1eb3beddf1b",
        "type": "source_code",
        "text": "text = newText;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "09214a48f79a6d1e4743b176ea3f9cb8",
        "type": "source_code",
        "text": "fontSize = newSize;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1bdb02e7b703325e98d0c0465b2b0c93",
        "type": "source_code",
        "text": "tColor = newColor;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9b522b4b6f6560ebe9173b305abab142",
        "type": "source_code",
        "text": "super.paintComponent(g); \n    g.setColor(Color.BLACK); \n    g.drawOval(xm - cSize/2, ym - cSize/2, cSize, cSize);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "43e4633e18984ddbefe6383f9f3e0d09",
        "type": "source_code",
        "text": "actionListeners.add(l);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "3419aa2a7f9b11826a01f978cf18de67",
        "type": "source_code",
        "text": "actionListeners.remove(l);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5fbada9b44d8431aa7b8f174c7d200d7",
        "type": "source_code",
        "text": "ActionEvent a = new ActionEvent(BangBean2.this, \n      ActionEvent.ACTION_PERFORMED, null); \n    ArrayList<ActionListener> lv = null; \n    // Make a shallow copy of the List in case \n    // someone adds a listener while we\u2019re \n    // calling listeners: \n    synchronized(this) { \n      lv = new ArrayList<ActionListener>(actionListeners); \n    } \n    // Call all the listener methods: \n    for(ActionListener al : lv) \n      al.actionPerformed(a);",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "73256f600e5ad9918d00fe3a5b184794",
        "type": "source_code",
        "text": "public void mousePressed(MouseEvent e) { \n      Graphics g = getGraphics(); \n      g.setColor(tColor); \n      g.setFont( \n        new Font(\"TimesRoman\", Font.BOLD, fontSize)); \n      int width = g.getFontMetrics().stringWidth(text); \n      g.drawString(text, (getSize().width - width) /2, \n        getSize().height/2); \n      g.dispose();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "545049d188235ce6b8b70e54746802bf",
        "type": "source_code",
        "text": "notifyListeners(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "32bc850da06395f129d188c1e555eaf2",
        "type": "source_code",
        "text": "public void mouseMoved(MouseEvent e) { \n      xm = e.getX(); \n      ym = e.getY(); \n      repaint(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "564b6a16e55963d7127300f07e1a4874",
        "type": "source_code",
        "text": "BangBean2 bb2 = new BangBean2(); \n    bb2.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        System.out.println(\"ActionEvent\" + e); \n      } \n    }); \n    bb2.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        System.out.println(\"BangBean2 action\"); \n      } \n    }); \n    bb2.addActionListener(new ActionListener() { \n      public void actionPerformed(ActionEvent e) { \n        System.out.println(\"More action\"); \n      } \n    }); \n    JFrame frame = new JFrame(); \n    frame.add(bb2); \n    run(frame, 300, 300);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "09d2bd168181f1e64c2b1651a80a8aa8",
        "type": "source_code",
        "text": "Flex",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "bdfa731a0f1ffebdb1b2f10a68f9883f",
        "type": "source_code",
        "text": "<![CDATA[ \n    function updateOutput() { \n      output.text = \"Hello! \" + input.text; \n    } \n    ]]>",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "548b967f878ef06a5a1722e5e3f5305b",
        "type": "source_code",
        "text": "change=\"updateOutput()\" />",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "b279a44439c70c144133e66f4b442f88",
        "type": "source_code",
        "text": "titleStyleDeclaration=\"headerText\" \n    title=\"Flex MP3 Library\"> \n    <mx:HBox verticalAlign=\"bottom\"> \n      <mx:DataGrid id=\"songGrid\" \n        cellPress=\"selectSong(event)\" rowCount=\"8\"> \n        <mx:columns> \n          <mx:Array> \n            <mx:DataGridColumn columnName=\"name\" \n              headerText=\"Song Name\" width=\"120\" /> \n            <mx:DataGridColumn columnName=\"artist\" \n              headerText=\"Artist\" width=\"180\" /> \n            <mx:DataGridColumn columnName=\"album\" \n              headerText=\"Album\" width=\"160\" /> \n          </mx:Array> \n        </mx:columns> \n      </mx:DataGrid> \n      <mx:VBox> \n        <mx:HBox height=\"100\" > \n          <mx:Image id=\"albumImage\" source=\"\" \n            height=\"80\" width=\"100\" \n            mouseOverEffect=\"resizeBig\" \n            mouseOutEffect=\"resizeSmall\" /> \n          <mx:TextArea id=\"songInfo\" \n            styleName=\"boldText\" height=\"100%\" width=\"120\" \n            vScrollPolicy=\"off\" borderStyle=\"none\" /> \n        </mx:HBox> \n        <mx:MediaPlayback id=\"songPlayer\" \n          contentPath=\"\" \n          mediaType=\"MP3\" \n          height=\"70\" \n          width=\"230\" \n          controllerPolicy=\"on\" \n          autoPlay=\"false\" \n          visible=\"false\" /> \n      </mx:VBox> \n    </mx:HBox> \n    <mx:ControlBar horizontalAlign=\"right\"> \n      <mx:Button id=\"refreshSongsButton\" \n        label=\"Refresh Songs\" width=\"100\" \n        toolTip=\"Refresh Song List\" \n        click=\"songService.getSongs()\" /> \n    </mx:ControlBar>",
        "programming_language": "XML",
        "weight": 0.0
    },
    {
        "id": "c627f60c28a37600fb835fec8aea65da",
        "type": "source_code",
        "text": "<mx:Resize name=\"resizeBig\" heightTo=\"100\" \n      duration=\"500\"/> \n    <mx:Resize name=\"resizeSmall\" heightTo=\"80\" \n      duration=\"500\"/>",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "9e8b4bb2ea615c45e2b91684fcfd6dfe",
        "type": "source_code",
        "text": "source=\"gui.flex.SongService\" \n    result=\"onSongs(event.result)\" \n    fault=\"alert(event.fault.faultstring, \u2018Error\u2019)\"> \n    <mx:method name=\"getSongs\"/>",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "e9ba325307aa3922c70bc0be51baf62f",
        "type": "source_code",
        "text": "addSong(new Song(\"Chocolate\", \"Snow Patrol\", \n      \"Final Straw\", \"sp-final-straw.jpg\", \n      \"chocolate.mp3\")); \n    addSong(new Song(\"Concerto No. 2 in E\", \"Hilary Hahn\", \n      \"Bach: Violin Concertos\", \"hahn.jpg\", \n      \"bachviolin2.mp3\")); \n    addSong(new Song(\"\u2018Round Midnight\", \"Wes Montgomery\", \n      \"The Artistry of Wes Montgomery\", \n      \"wesmontgomery.jpg\", \"roundmidnight.mp3\"));",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "2ffb128b831d91cf0a95212eaf7d0c2a",
        "type": "source_code",
        "text": "this.name = name; \n    this.artist = artist; \n    this.album = album; \n    this.albumImageUrl = albumImageUrl; \n    this.songMediaUrl = songMediaUrl;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a3dd2796a9f269e607f0f4155141bdc3",
        "type": "source_code",
        "text": "this.albumImageUrl = albumImageUrl;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "a05a235740ef66b99cb6c0cce390e084",
        "type": "source_code",
        "text": "this.artist = artist;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "6b906cfcd282b91e04efc126420d4746",
        "type": "source_code",
        "text": "this.songMediaUrl = songMediaUrl;",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "1293491b922b282b98deccc8baceca49",
        "type": "source_code",
        "text": "Display display = new Display(); \n    Shell shell = new Shell(display); \n    shell.setText(\"Hi there, SWT!\"); // Title bar \n    shell.open(); \n    while(!shell.isDisposed()) \n      if(!display.readAndDispatch()) \n        display.sleep(); \n    display.dispose();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "32094b590d1c45f943895a88e568a3ce",
        "type": "source_code",
        "text": "Display display = new Display(); \n    for(int i = 0; i < shells.length; i++) { \n      shells[i] = new Shell(display); \n      shells[i].setText(\"Shell #\" + i); \n      shells[i].open(); \n    } \n    while(!shellsDisposed()) \n      if(!display.readAndDispatch()) \n        display.sleep(); \n    display.dispose();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "d8148be3bad4c49c8c41583608e523f5",
        "type": "source_code",
        "text": "for(int i = 0; i < shells.length; i++) \n      if(shells[i].isDisposed()) \n        return true; \n    return false;",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "422af3526ee79249b1d82ab39ec59b50",
        "type": "source_code",
        "text": "Display display = new Display(); \n    Shell shell = new Shell(display); \n    shell.setText(\"Display Properties\"); \n    shell.setLayout(new FillLayout()); \n    Text text = new Text(shell, SWT.WRAP | SWT.V_SCROLL); \n    StringWriter props = new StringWriter(); \n    System.getProperties().list(new PrintWriter(props));",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "8d17e8ecd836909289897fae3da77516",
        "type": "source_code",
        "text": "text.setText(props.toString()); \n    shell.open(); \n    while(!shell.isDisposed()) \n      if(!display.readAndDispatch()) \n        display.sleep(); \n    display.dispose();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "09f297bc405b0f1d7301c29a314c45e1",
        "type": "source_code",
        "text": "Display display = new Display(); \n    Shell shell = new Shell(display); \n    shell.setText(swtApp.getClass().getSimpleName()); \n    swtApp.createContents(shell);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "21373efbad32f3e8ef5c0106d5f35bac",
        "type": "source_code",
        "text": "shell.setSize(width, height); \n    shell.open(); \n    while(!shell.isDisposed()) { \n      if(!display.readAndDispatch()) \n        display.sleep(); \n    } \n    display.dispose();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "403a6582b806ac457cc8e06c43cef407",
        "type": "source_code",
        "text": "parent.setLayout(new FillLayout()); \n    Text text = new Text(parent, SWT.WRAP | SWT.V_SCROLL); \n    for(Map.Entry entry: System.getenv().entrySet()) { \n      text.append(entry.getKey() + \": \" + \n        entry.getValue() + \"\\n\"); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "3a94f03c8ade7639de0e2c6d4fab2bc0",
        "type": "source_code",
        "text": "SWTConsole.run(new DisplayEnvironment(), 800, 600);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "00b6642e13242eede096986e047aab7b",
        "type": "source_code",
        "text": "shell = parent.getShell(); \n    Menu bar = new Menu(shell, SWT.BAR); \n    shell.setMenuBar(bar); \n    Set<String> words = new TreeSet<String>( \n      new TextFile(\"Menus.java\", \"\\\\W+\")); \n    Iterator<String> it = words.iterator(); \n    while(it.next().matches(\"[0-9]+\")) \n      ; // Move past the numbers. \n    MenuItem[] mItem = new MenuItem[7]; \n    for(int i = 0; i < mItem.length; i++) { \n      mItem[i] = new MenuItem(bar, SWT.CASCADE); \n      mItem[i].setText(it.next()); \n      Menu submenu = new Menu(shell, SWT.DROP_DOWN); \n      mItem[i].setMenu(submenu); \n    } \n    int i = 0; \n    while(it.hasNext()) { \n      addItem(bar, it, mItem[i]); \n      i = (i + 1) % mItem.length; \n    }",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "f687ec10603d19b03d4c73239e9c9e7f",
        "type": "source_code",
        "text": "public void handleEvent(Event e) { \n      System.out.println(e.toString()); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "388e4fa8fda10ddaebd9d141022b0505",
        "type": "source_code",
        "text": "MenuItem item = new MenuItem(mItem.getMenu(),SWT.PUSH); \n    item.addListener(SWT.Selection, listener); \n    item.setText(it.next());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "9a1e3a8ad44b615eb0e26d77922bf120",
        "type": "source_code",
        "text": "SWTConsole.run(new Menus(), 600, 200);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "25e1cda0b1769a2bc80a650e03a80d7e",
        "type": "source_code",
        "text": "shell = parent.getShell(); \n    parent.setLayout(new FillLayout()); \n    folder = new TabFolder(shell, SWT.BORDER); \n    labelTab(); \n    directoryDialogTab(); \n    buttonTab(); \n    sliderTab(); \n    scribbleTab(); \n    browserTab();",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "12b49afaa56195975936ad5e3b77c649",
        "type": "source_code",
        "text": "TabItem tab = new TabItem(folder, SWT.CLOSE); \n    tab.setText(\"A Label\"); // Text on the tab \n    tab.setToolTipText(\"A simple label\"); \n    Label label = new Label(folder, SWT.CENTER); \n    label.setText(\"Label text\"); \n    tab.setControl(label);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "104d91e981106111f3719f83daf58e6f",
        "type": "source_code",
        "text": "TabItem tab = new TabItem(folder, SWT.CLOSE); \n    tab.setText(\"Directory Dialog\"); \n    tab.setToolTipText(\"Select a directory\"); \n    final Button b = new Button(folder, SWT.PUSH); \n    b.setText(\"Select a Directory\"); \n    b.addListener(SWT.MouseDown, new Listener() { \n        public void handleEvent(Event e) { \n          DirectoryDialog dd = new DirectoryDialog(shell); \n          String path = dd.open(); \n          if(path != null) \n            b.setText(path); \n        } \n      }); \n    tab.setControl(b);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0fcdb21db35d41935f4f852c8543b51e",
        "type": "source_code",
        "text": "TabItem tab = new TabItem(folder, SWT.CLOSE); \n    tab.setText(\"Buttons\"); \n    tab.setToolTipText(\"Different kinds of Buttons\"); \n    Composite composite = new Composite(folder, SWT.NONE); \n    composite.setLayout(new GridLayout(4, true)); \n    for(int dir : new int[]{ \n        SWT.UP, SWT.RIGHT, SWT.LEFT, SWT.DOWN \n      }) { \n      Button b = new Button(composite, SWT.ARROW | dir); \n      b.addListener(SWT.MouseDown, listener);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "88f1c488e11ce574f9fd7ed5b034f4f4",
        "type": "source_code",
        "text": "} \n    newButton(composite, SWT.CHECK, \"Check button\"); \n    newButton(composite, SWT.PUSH, \"Push button\"); \n    newButton(composite, SWT.RADIO, \"Radio button\"); \n    newButton(composite, SWT.TOGGLE, \"Toggle button\"); \n    newButton(composite, SWT.FLAT, \"Flat button\"); \n    tab.setControl(composite);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "37d93288b362c57f5e37bb78f3b7f1d7",
        "type": "source_code",
        "text": "public void handleEvent(Event e) { \n        MessageBox m = new MessageBox(shell, SWT.OK); \n        m.setMessage(e.toString()); \n        m.open(); \n      } \n    };",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "76fd278ccf62cd493d4ff4b9e80ddb10",
        "type": "source_code",
        "text": "int type, String label) { \n    Button b = new Button(composite, type); \n    b.setText(label); \n    b.addListener(SWT.MouseDown, listener);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "64017dfae10df1a2f7d209efdd083dfa",
        "type": "source_code",
        "text": "TabItem tab = new TabItem(folder, SWT.CLOSE); \n    tab.setText(\"Sliders and Progress bars\"); \n    tab.setToolTipText(\"Tied Slider to ProgressBar\"); \n    Composite composite = new Composite(folder, SWT.NONE); \n    composite.setLayout(new GridLayout(2, true)); \n    final Slider slider = \n      new Slider(composite, SWT.HORIZONTAL); \n    final ProgressBar progress = \n      new ProgressBar(composite, SWT.HORIZONTAL); \n    slider.addSelectionListener(new SelectionAdapter() { \n        public void widgetSelected(SelectionEvent event) { \n          progress.setSelection(slider.getSelection()); \n        } \n      }); \n    tab.setControl(composite);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "ef7b9c561093c3a60d4e6217620841a4",
        "type": "source_code",
        "text": "TabItem tab = new TabItem(folder, SWT.CLOSE); \n    tab.setText(\"Scribble\"); \n    tab.setToolTipText(\"Simple graphics: drawing\"); \n    final Canvas canvas = new Canvas(folder, SWT.NONE); \n    ScribbleMouseListener sml= new ScribbleMouseListener(); \n    canvas.addMouseListener(sml); \n    canvas.addMouseMoveListener(sml); \n    tab.setControl(canvas);",
        "programming_language": "Carbon",
        "weight": 0.0
    },
    {
        "id": "3e4000034bef741ecc4f8862ea1fc270",
        "type": "source_code",
        "text": "extends MouseAdapter implements MouseMoveListener { \n    private Point p = new Point(0, 0); \n    public void mouseMove(MouseEvent e) { \n      if((e.stateMask & SWT.BUTTON1) == 0) \n        return; \n      GC gc = new GC((Canvas)e.widget); \n      gc.drawLine(p.x, p.y, e.x, e.y); \n      gc.dispose(); \n      updatePoint(e); \n    } \n    public void mouseDown(MouseEvent e) { updatePoint(e); } \n    private void updatePoint(MouseEvent e) { \n      p.x = e.x; \n      p.y = e.y;",
        "programming_language": "GDScript",
        "weight": 0.0
    },
    {
        "id": "cbb184dd8e05c9709e5dcaedaa0495cf",
        "type": "source_code",
        "text": "}",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "7a1794b61984e0e0ff142e9ec7b0c7b9",
        "type": "source_code",
        "text": "TabItem tab = new TabItem(folder, SWT.CLOSE); \n    tab.setText(\"A Browser\"); \n    tab.setToolTipText(\"A Web browser\"); \n    Browser browser = null; \n    try { \n      browser = new Browser(folder, SWT.NONE); \n    } catch(SWTError e) { \n      Label label = new Label(folder, SWT.BORDER); \n      label.setText(\"Could not initialize browser\"); \n      tab.setControl(label); \n    } \n    if(browser != null) { \n      browser.setUrl(\"http://www.mindview.net\"); \n      tab.setControl(browser); \n    }",
        "programming_language": "CSS+Lasso",
        "weight": 0.0
    },
    {
        "id": "98cd42d7f72ab02076d4b2724f6938e1",
        "type": "source_code",
        "text": "SWTConsole.run(new TabbedPane(), 800, 600);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "54cd9c7bf0f0f46c99ddde08fafad5aa",
        "type": "source_code",
        "text": "super(parent, style); \n    addPaintListener(new PaintListener() { \n      public void paintControl(PaintEvent e) { \n        int maxWidth = getSize().x; \n        double hstep = (double)maxWidth / (double)points; \n        int maxHeight = getSize().y; \n        pts = new int[points]; \n        for(int i = 0; i < points; i++) \n          pts[i] = (int)((sines[i] * maxHeight / 2 * .95) \n            + (maxHeight / 2)); \n        e.gc.setForeground( \n          e.display.getSystemColor(SWT.COLOR_RED)); \n        for(int i = 1; i < points; i++) { \n          int x1 = (int)((i - 1) * hstep); \n          int x2 = (int)(i * hstep); \n          int y1 = pts[i - 1]; \n          int y2 = pts[i]; \n          e.gc.drawLine(x1, y1, x2, y2); \n        } \n      } \n    }); \n    setCycles(5);",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "a6e79f110f0ef7541fe0a1fab778221f",
        "type": "source_code",
        "text": "cycles = newCycles; \n    points = SCALEFACTOR * cycles * 2; \n    sines = new double[points]; \n    for(int i = 0; i < points; i++) { \n      double radians = (Math.PI / SCALEFACTOR) * i; \n      sines[i] = Math.sin(radians); \n    } \n    redraw();",
        "programming_language": "Transact-SQL",
        "weight": 0.0
    },
    {
        "id": "a8a778867253d2a00c4d5e3f426ac88e",
        "type": "source_code",
        "text": "parent.setLayout(new GridLayout(1, true)); \n    sines = new SineDraw(parent, SWT.NONE); \n    sines.setLayoutData( \n      new GridData(SWT.FILL, SWT.FILL, true, true)); \n    sines.setFocus(); \n    slider = new Slider(parent, SWT.HORIZONTAL); \n    slider.setValues(5, 1, 30, 1, 1, 1); \n    slider.setLayoutData( \n      new GridData(SWT.FILL, SWT.DEFAULT, true, false)); \n    slider.addSelectionListener(new SelectionAdapter() { \n      public void widgetSelected(SelectionEvent event) { \n        sines.setCycles(slider.getSelection()); \n      } \n    });",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "87cb624c4996c2ec7e09d1f23c257b7b",
        "type": "source_code",
        "text": "SWTConsole.run(new SineWave(), 700, 400);",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "5c98009f128544675cc942a3fad72a16",
        "type": "source_code",
        "text": "public void paintControl(PaintEvent e) { \n      Color color = new Color(e.display, cColor); \n      e.gc.setBackground(color); \n      Point size = getSize(); \n      e.gc.fillRectangle(0, 0, size.x, size.y); \n      color.dispose(); \n    }",
        "programming_language": "Text only",
        "weight": 0.0
    },
    {
        "id": "89325c0d21691686bad245ba08c028ed",
        "type": "source_code",
        "text": "return new RGB(rand.nextInt(255), \n      rand.nextInt(255), rand.nextInt(255));",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "0162a305ead26703fb472d10670c6daa",
        "type": "source_code",
        "text": "super(parent, SWT.NONE); \n    this.pause = pause; \n    addPaintListener(new CBoxPaintListener());",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "2c11eb8879cce13555cda384a17073fc",
        "type": "source_code",
        "text": "try { \n      while(!Thread.interrupted()) { \n        cColor = newColor();",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "d59062dd7c6a33a62b293a3c264b33bb",
        "type": "source_code",
        "text": "getDisplay().asyncExec(new Runnable() { \n          public void run() { \n            try { redraw(); } catch(SWTException e) {} \n            // SWTException is OK when the parent \n            // is terminated from under us. \n          } \n        }); \n        TimeUnit.MILLISECONDS.sleep(pause); \n      } \n    } catch(InterruptedException e) { \n      // Acceptable way to exit \n    } catch(SWTException e) { \n      // Acceptable way to exit: our parent \n      // was terminated from under us. \n    }",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    },
    {
        "id": "94c53dc171071800472c3d9f209d963f",
        "type": "source_code",
        "text": "GridLayout gridLayout = new GridLayout(grid, true); \n    gridLayout.horizontalSpacing = 0; \n    gridLayout.verticalSpacing = 0; \n    parent.setLayout(gridLayout); \n    ExecutorService exec = new DaemonThreadPoolExecutor(); \n    for(int i = 0; i < (grid * grid); i++) { \n      final CBox cb = new CBox(parent, pause); \n      cb.setLayoutData(new GridData(GridData.FILL_BOTH)); \n      exec.execute(cb); \n    }",
        "programming_language": "scdoc",
        "weight": 0.0
    },
    {
        "id": "1947a9b51ba46fc43798a05026e608f1",
        "type": "source_code",
        "text": "ColorBoxes boxes = new ColorBoxes(); \n    if(args.length > 0) \n      boxes.grid = new Integer(args[0]); \n    if(args.length > 1) \n      boxes.pause = new Integer(args[1]); \n    SWTConsole.run(boxes, 500, 400);",
        "programming_language": "Tera Term macro",
        "weight": 0.0
    }
]