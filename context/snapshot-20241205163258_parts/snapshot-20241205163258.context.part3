 { \\n        // Only one Entry object per Iterator: \\n        private Entry entry = new Entry(-1); \\n        public boolean hasNext() { \\n          return entry.index < size - 1; \\n        } \\n        public Map.Entry<String,String> next() { \\n          entry.index++; \\n          return entry; \\n        } \\n        public void remove() { \\n          throw new UnsupportedOperationException(); \\n        } \\n      } \\n      public \\n      Iterator<Map.Entry<String,String>> iterator() { \\n        return new Iter(); \\n      } \\n    } \\n    private static Set<Map.Entry<String,String>> entries = \\n      new EntrySet(DATA.length); \\n    public Set<Map.Entry<String,String>> entrySet() { \\n      return entries; \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e022767ed4753aa55241774dc7d00d67\",\n        \"type\": \"source_code\",\n        \"text\": \"return new FlyweightMap() { \\n      public Set<Map.Entry<String,String>> entrySet() { \\n        return new EntrySet(size); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d0c6a6821458a9669c546a0177baf44\",\n        \"type\": \"source_code\",\n        \"text\": \"return map; // The entire map\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"736c7a18aa96bb37a6cf3b7ef35a7c45\",\n        \"type\": \"source_code\",\n        \"text\": \"return select(size); // A partial map\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57e00dd9dc4c97dce57f29e7101e48e0\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<String>(map.keySet());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72c5316de7f42f1f111a1a14f8d22571\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ArrayList<String>(select(size).keySet());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30bdd410be2b13856917e216e9460eed\",\n        \"type\": \"source_code\",\n        \"text\": \"print(capitals(10)); \\n    print(names(10)); \\n    print(new HashMap<String,String>(capitals(3))); \\n    print(new LinkedHashMap<String,String>(capitals(3))); \\n    print(new TreeMap<String,String>(capitals(3))); \\n    print(new Hashtable<String,String>(capitals(3))); \\n    print(new HashSet<String>(names(6))); \\n    print(new LinkedHashSet<String>(names(6))); \\n    print(new TreeSet<String>(names(6))); \\n    print(new ArrayList<String>(names(6))); \\n    print(new LinkedList<String>(names(6))); \\n    print(capitals().get(\\\"BRAZIL\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc4c32d6f6574cd32cf656490f1ebac4\",\n        \"type\": \"source_code\",\n        \"text\": \"this.size = size < 0 ? 0 : size;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"643a4840224421d8b20a23143c774a0a\",\n        \"type\": \"source_code\",\n        \"text\": \"return Integer.valueOf(index);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd716836e02ffb0833fb828bcd5ff95a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(new CountingIntegerList(30));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"880c915f9b1d93ac3759466aa744e2ba\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\\" \\n    .split(\\\" \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"08e3f5dcc9f7d8394aa3ca5e11c0ba61\",\n        \"type\": \"source_code\",\n        \"text\": \"if(size < 0) this.size = 0; \\n    this.size = size;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5ba04de1336004d9200c344ad3536714\",\n        \"type\": \"source_code\",\n        \"text\": \"int index; \\n    Entry(int index) { this.index = index; } \\n    public boolean equals(Object o) { \\n      return Integer.valueOf(index).equals(o); \\n    } \\n    public Integer getKey() { return index; } \\n    public String getValue() { \\n      return \\n        chars[index % chars.length] + \\n        Integer.toString(index / chars.length); \\n    } \\n    public String setValue(String value) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8e1466e1ffeb8190a6f1c90a0c859fda\",\n        \"type\": \"source_code\",\n        \"text\": \"throw new UnsupportedOperationException(); \\n    } \\n    public int hashCode() { \\n      return Integer.valueOf(index).hashCode(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a7f7a3f636fdd91deee36bd958012122\",\n        \"type\": \"source_code\",\n        \"text\": \"// LinkedHashSet retains initialization order: \\n    Set<Map.Entry<Integer,String>> entries = \\n      new LinkedHashSet<Map.Entry<Integer,String>>(); \\n    for(int i = 0; i < size; i++) \\n      entries.add(new Entry(i)); \\n    return entries;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4a82dab30f2a5f74b71a1d58d7b03679\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(new CountingMapData(60));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0db76dc62084cf4850777413185734f9\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<String> c = new ArrayList<String>(); \\n    c.addAll(Countries.names(6)); \\n    c.add(\\\"ten\\\"); \\n    c.add(\\\"eleven\\\"); \\n    print(c); \\n    // Make an array from the List: \\n    Object[] array = c.toArray(); \\n    // Make a String array from the List: \\n    String[] str = c.toArray(new String[0]); \\n    // Find max and min elements; this means \\n    // different things depending on the way \\n    // the Comparable interface is implemented: \\n    print(\\\"Collections.max(c) = \\\" + Collections.max(c)); \\n    print(\\\"Collections.min(c) = \\\" + Collections.min(c)); \\n    // Add a Collection to another Collection \\n    Collection<String> c2 = new ArrayList<String>(); \\n    c2.addAll(Countries.names(6)); \\n    c.addAll(c2); \\n    print(c); \\n    c.remove(Countries.DATA[0][0]); \\n    print(c); \\n    c.remove(Countries.DATA[1][0]); \\n    print(c); \\n    // Remove all components that are \\n    // in the argument collection: \\n    c.removeAll(c2); \\n    print(c); \\n    c.addAll(c2); \\n    print(c); \\n    // Is an element in this Collection? \\n    String val = Countries.DATA[3][0]; \\n    print(\\\"c.contains(\\\" + val  + \\\") = \\\" + c.contains(val)); \\n    // Is a Collection in this Collection? \\n    print(\\\"c.containsAll(c2) = \\\" + c.containsAll(c2)); \\n    Collection<String> c3 = \\n      ((List<String>)c).subList(3, 5); \\n    // Keep all the elements that are in both \\n    // c2 and c3 (an intersection of sets): \\n    c2.retainAll(c3); \\n    print(c2); \\n    // Throw away all the elements \\n    // in c2 that also appear in c3: \\n    c2.removeAll(c3); \\n    print(\\\"c2.isEmpty() = \\\" +  c2.isEmpty()); \\n    c = new ArrayList<String>(); \\n    c.addAll(Countries.names(6)); \\n    print(c); \\n    c.clear(); // Remove all elements \\n    print(\\\"after c.clear():\\\" + c);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c5e46df9bcebbdcdfed8d731eadf3091\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"--- \\\" + msg + \\\" ---\\\"); \\n    Collection<String> c = list; \\n    Collection<String> subList = list.subList(1,8); \\n    // Copy of the sublist: \\n    Collection<String> c2 = new ArrayList<String>(subList); \\n    try { c.retainAll(c2); } catch(Exception e) { \\n      System.out.println(\\\"retainAll(): \\\" + e); \\n    } \\n    try { c.removeAll(c2); } catch(Exception e) { \\n      System.out.println(\\\"removeAll(): \\\" + e); \\n    } \\n    try { c.clear(); } catch(Exception e) { \\n      System.out.println(\\\"clear(): \\\" + e); \\n    } \\n    try { c.add(\\\"X\\\"); } catch(Exception e) { \\n      System.out.println(\\\"add(): \\\" + e); \\n    } \\n    try { c.addAll(c2); } catch(Exception e) { \\n      System.out.println(\\\"addAll(): \\\" + e); \\n    } \\n    try { c.remove(\\\"C\\\"); } catch(Exception e) {\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"218d6965e080504b47c780639f6b1b97\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"remove(): \\\" + e); \\n    } \\n    // The List.set() method modifies the value but \\n    // doesn\\u2019t change the size of the data structure: \\n    try { \\n      list.set(0, \\\"X\\\"); \\n    } catch(Exception e) { \\n      System.out.println(\\\"List.set(): \\\" + e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2dee7409f670fd50ebe37d1e3fd7436e\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> list = \\n      Arrays.asList(\\\"A B C D E F G H I J K L\\\".split(\\\" \\\")); \\n    test(\\\"Modifiable Copy\\\", new ArrayList<String>(list)); \\n    test(\\\"Arrays.asList()\\\", list); \\n    test(\\\"unmodifiableList()\\\", \\n      Collections.unmodifiableList( \\n        new ArrayList<String>(list)));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eb68c3e1de0a509a94cff9edb0f51719\",\n        \"type\": \"source_code\",\n        \"text\": \"a.add(1, \\\"x\\\"); // Add at location 1 \\n    a.add(\\\"x\\\"); // Add at end \\n    // Add a collection: \\n    a.addAll(Countries.names(25)); \\n    // Add a collection starting at location 3: \\n    a.addAll(3, Countries.names(25)); \\n    b = a.contains(\\\"1\\\"); // Is it in there? \\n    // Is the entire collection in there? \\n    b = a.containsAll(Countries.names(25)); \\n    // Lists allow random access, which is cheap \\n    // for ArrayList, expensive for LinkedList: \\n    s = a.get(1); // Get (typed) object at location 1 \\n    i = a.indexOf(\\\"1\\\"); // Tell index of object \\n    b = a.isEmpty(); // Any elements inside? \\n    it = a.iterator(); // Ordinary Iterator \\n    lit = a.listIterator(); // ListIterator \\n    lit = a.listIterator(3); // Start at loc 3 \\n    i = a.lastIndexOf(\\\"1\\\"); // Last match \\n    a.remove(1); // Remove location 1 \\n    a.remove(\\\"3\\\"); // Remove this object \\n    a.set(1, \\\"y\\\"); // Set location 1 to \\\"y\\\" \\n    // Keep everything that\\u2019s in the argument \\n    // (the intersection of the two sets): \\n    a.retainAll(Countries.names(25)); \\n    // Remove everything that\\u2019s in the argument: \\n    a.removeAll(Countries.names(25)); \\n    i = a.size(); // How big is it? \\n    a.clear(); // Remove all elements\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d577893ba2c9f7b6fa58f6c339cd4804\",\n        \"type\": \"source_code\",\n        \"text\": \"ListIterator<String> it = a.listIterator(); \\n    b = it.hasNext(); \\n    b = it.hasPrevious(); \\n    s = it.next(); \\n    i = it.nextIndex(); \\n    s = it.previous();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"797692d8f233b49a072c097bf7d44979\",\n        \"type\": \"source_code\",\n        \"text\": \"i = it.previousIndex();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d56141e52a02c29c552d6cfc75c6a697\",\n        \"type\": \"source_code\",\n        \"text\": \"ListIterator<String> it = a.listIterator(); \\n    it.add(\\\"47\\\"); \\n    // Must move to an element after add(): \\n    it.next(); \\n    // Remove the element after the newly produced one: \\n    it.remove(); \\n    // Must move to an element after remove(): \\n    it.next(); \\n    // Change the element after the deleted one: \\n    it.set(\\\"47\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ea2cf8ae3c704cc5f70b52cbf54680a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(a); \\n    List<String> b = Countries.names(25); \\n    print(\\\"b = \\\" + b); \\n    a.addAll(b); \\n    a.addAll(b); \\n    print(a); \\n    // Insert, remove, and replace elements \\n    // using a ListIterator: \\n    ListIterator<String> x = a.listIterator(a.size()/2); \\n    x.add(\\\"one\\\"); \\n    print(a); \\n    print(x.next()); \\n    x.remove(); \\n    print(x.next()); \\n    x.set(\\\"47\\\"); \\n    print(a); \\n    // Traverse the list backwards: \\n    x = a.listIterator(a.size()); \\n    while(x.hasPrevious()) \\n      printnb(x.previous() + \\\" \\\"); \\n    print(); \\n    print(\\\"testVisual finished\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ff4e6f2403af80f791366675a8fa2a5\",\n        \"type\": \"source_code\",\n        \"text\": \"LinkedList<String> ll = new LinkedList<String>(); \\n    ll.addAll(Countries.names(25)); \\n    print(ll); \\n    // Treat it like a stack, pushing: \\n    ll.addFirst(\\\"one\\\"); \\n    ll.addFirst(\\\"two\\\"); \\n    print(ll); \\n    // Like \\\"peeking\\\" at the top of a stack: \\n    print(ll.getFirst()); \\n    // Like popping a stack: \\n    print(ll.removeFirst()); \\n    print(ll.removeFirst()); \\n    // Treat it like a queue, pulling elements \\n    // off the tail end: \\n    print(ll.removeLast()); \\n    print(ll);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"763d3028a0e1ba325804ced3e754c0c9\",\n        \"type\": \"source_code\",\n        \"text\": \"// Make and fill a new list each time: \\n    basicTest( \\n      new LinkedList<String>(Countries.names(25))); \\n    basicTest( \\n      new ArrayList<String>(Countries.names(25)));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09d1b38460c846ceaeb2aaa4cb45079c\",\n        \"type\": \"source_code\",\n        \"text\": \"iterMotion( \\n      new LinkedList<String>(Countries.names(25))); \\n    iterMotion( \\n      new ArrayList<String>(Countries.names(25))); \\n    iterManipulation( \\n      new LinkedList<String>(Countries.names(25))); \\n    iterManipulation( \\n      new ArrayList<String>(Countries.names(25))); \\n    testVisual( \\n      new LinkedList<String>(Countries.names(25))); \\n    testLinkedList();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c66fa158b1cb945b9d12e892714d4263\",\n        \"type\": \"source_code\",\n        \"text\": \"return o instanceof SetType && (i == ((SetType)o).i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b385b0e35b43e2f14e7d52b226421675\",\n        \"type\": \"source_code\",\n        \"text\": \"return (arg.i < i ? -1 : (arg.i == i ? 0 : 1));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"844bd85b8f99274109864145930e21bb\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      for(int i = 0; i < 10; i++) \\n          set.add( \\n            type.getConstructor(int.class).newInstance(i)); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    } \\n    return set;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b82739bab7dc180efe5c320031ae2fa\",\n        \"type\": \"source_code\",\n        \"text\": \"fill(set, type); \\n    fill(set, type); // Try to add duplicates \\n    fill(set, type); \\n    System.out.println(set);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21870b0179ebe86ec14704bde6d20c3e\",\n        \"type\": \"source_code\",\n        \"text\": \"test(new HashSet<HashType>(), HashType.class); \\n    test(new LinkedHashSet<HashType>(), HashType.class); \\n    test(new TreeSet<TreeType>(), TreeType.class); \\n    // Things that don\\u2019t work: \\n    test(new HashSet<SetType>(), SetType.class); \\n    test(new HashSet<TreeType>(), TreeType.class); \\n    test(new LinkedHashSet<SetType>(), SetType.class); \\n    test(new LinkedHashSet<TreeType>(), TreeType.class); \\n    try { \\n      test(new TreeSet<SetType>(), SetType.class); \\n    } catch(Exception e) { \\n      System.out.println(e.getMessage()); \\n    } \\n    try { \\n      test(new TreeSet<HashType>(), HashType.class); \\n    } catch(Exception e) { \\n      System.out.println(e.getMessage()); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e00f3743cfbe001089d487bb14fea257\",\n        \"type\": \"source_code\",\n        \"text\": \"SortedSet<String> sortedSet = new TreeSet<String>(); \\n    Collections.addAll(sortedSet, \\n      \\\"one two three four five six seven eight\\\" \\n        .split(\\\" \\\")); \\n    print(sortedSet); \\n    String low = sortedSet.first(); \\n    String high = sortedSet.last(); \\n    print(low); \\n    print(high); \\n    Iterator<String> it = sortedSet.iterator(); \\n    for(int i = 0; i <= 6; i++) { \\n      if(i == 3) low = it.next(); \\n      if(i == 6) high = it.next(); \\n      else it.next(); \\n    } \\n    print(low); \\n    print(high); \\n    print(sortedSet.subSet(low, high)); \\n    print(sortedSet.headSet(high)); \\n    print(sortedSet.tailSet(low));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1bca6bbc7dd2ec6933cccaa8577d39a0\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < count; i++) \\n      queue.offer(gen.next()); \\n    while(queue.peek() != null) \\n      System.out.print(queue.remove() + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6cb32bd5b12ad586a0028e2e904c2f46\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] s = (\\\"one two three four five six seven \\\" + \\n      \\\"eight nine ten\\\").split(\\\" \\\"); \\n    int i; \\n    public String next() { return s[i++]; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ab6e13230490617bcab82bc86994f94\",\n        \"type\": \"source_code\",\n        \"text\": \"test(new LinkedList<String>(), new Gen()); \\n    test(new PriorityQueue<String>(), new Gen()); \\n    test(new ArrayBlockingQueue<String>(count), new Gen()); \\n    test(new ConcurrentLinkedQueue<String>(), new Gen()); \\n    test(new LinkedBlockingQueue<String>(), new Gen()); \\n    test(new PriorityBlockingQueue<String>(), new Gen());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"22db6c6efe6f6a3ae0812e5c05428abd\",\n        \"type\": \"source_code\",\n        \"text\": \"private char primary; \\n    private int secondary; \\n    private String item; \\n    public ToDoItem(String td, char pri, int sec) { \\n      primary = pri; \\n      secondary = sec; \\n      item = td; \\n    } \\n    public int compareTo(ToDoItem arg) { \\n      if(primary > arg.primary) \\n        return +1; \\n      if(primary == arg.primary) \\n        if(secondary > arg.secondary) \\n          return +1; \\n        else if(secondary == arg.secondary) \\n          return 0; \\n      return -1; \\n    } \\n    public String toString() { \\n      return Character.toString(primary) + \\n        secondary + \\\": \\\" + item; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b48a37a5a1455e2b383712aa5084deb\",\n        \"type\": \"source_code\",\n        \"text\": \"super.add(new ToDoItem(td, pri, sec));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f4b00bbfe00ee6296725a786932a0af\",\n        \"type\": \"source_code\",\n        \"text\": \"ToDoList toDoList = new ToDoList(); \\n    toDoList.add(\\\"Empty trash\\\", \\u2018C\\u2019, 4); \\n    toDoList.add(\\\"Feed dog\\\", \\u2018A\\u2019, 2); \\n    toDoList.add(\\\"Feed bird\\\", \\u2018B\\u2019, 7); \\n    toDoList.add(\\\"Mow lawn\\\", \\u2018C\\u2019, 3); \\n    toDoList.add(\\\"Water lawn\\\", \\u2018A\\u2019, 1); \\n    toDoList.add(\\\"Feed cat\\\", \\u2018B\\u2019, 1); \\n    while(!toDoList.isEmpty()) \\n      System.out.println(toDoList.remove());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f655c3e07df96bad0d27ef7aa741bf61\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 20; i < 27; i++) \\n      deque.addFirst(i); \\n    for(int i = 50; i < 55; i++) \\n      deque.addLast(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea90b9de1c1da57fc453d03c5a7c744b\",\n        \"type\": \"source_code\",\n        \"text\": \"Deque<Integer> di = new Deque<Integer>(); \\n    fillTest(di); \\n    print(di); \\n    while(di.size() != 0) \\n      printnb(di.removeFirst() + \\\" \\\"); \\n    print(); \\n    fillTest(di); \\n    while(di.size() != 0) \\n      printnb(di.removeLast() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39c3813581e7030ea63a0fec59e05d72\",\n        \"type\": \"source_code\",\n        \"text\": \"pairs = new Object[length][2];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbcec9454f6ca6a160dc6870ce539013\",\n        \"type\": \"source_code\",\n        \"text\": \"if(index >= pairs.length) \\n      throw new ArrayIndexOutOfBoundsException(); \\n    pairs[index++] = new Object[]{ key, value };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"50c18e92d9758103f678d6d69a19fef1\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < index; i++) \\n      if(key.equals(pairs[i][0])) \\n        return (V)pairs[i][1]; \\n    return null; // Did not find key\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa2b118d4489b66ba4c2cbd1db9e50e3\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(); \\n    for(int i = 0; i < index; i++) { \\n      result.append(pairs[i][0].toString()); \\n      result.append(\\\" : \\\"); \\n      result.append(pairs[i][1].toString()); \\n      if(i < index - 1) \\n        result.append(\\\"\\\\n\\\"); \\n    } \\n    return result.toString();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7d4a3517c4dffac946bed0e68bdea0b\",\n        \"type\": \"source_code\",\n        \"text\": \"AssociativeArray<String,String> map = \\n      new AssociativeArray<String,String>(6); \\n    map.put(\\\"sky\\\", \\\"blue\\\"); \\n    map.put(\\\"grass\\\", \\\"green\\\"); \\n    map.put(\\\"ocean\\\", \\\"dancing\\\"); \\n    map.put(\\\"tree\\\", \\\"tall\\\"); \\n    map.put(\\\"earth\\\", \\\"brown\\\"); \\n    map.put(\\\"sun\\\", \\\"warm\\\"); \\n    try { \\n      map.put(\\\"extra\\\", \\\"object\\\"); // Past the end\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"813a67b391bd592e8b26d767d0bd58c3\",\n        \"type\": \"source_code\",\n        \"text\": \"} catch(ArrayIndexOutOfBoundsException e) { \\n      print(\\\"Too many objects!\\\"); \\n    } \\n    print(map); \\n    print(map.get(\\\"ocean\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"71ff1b3dc66a32fd41f9afafa5136277\",\n        \"type\": \"source_code\",\n        \"text\": \"printnb(\\\"Size = \\\" + map.size() + \\\", \\\"); \\n    printnb(\\\"Keys: \\\"); \\n    print(map.keySet()); // Produce a Set of the keys\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"393e5183ab65399c406413d083dbc4e9\",\n        \"type\": \"source_code\",\n        \"text\": \"print(map.getClass().getSimpleName()); \\n    map.putAll(new CountingMapData(25)); \\n    // Map has \\u2018Set\\u2019 behavior for keys: \\n    map.putAll(new CountingMapData(25)); \\n    printKeys(map); \\n    // Producing a Collection of the values: \\n    printnb(\\\"Values: \\\"); \\n    print(map.values()); \\n    print(map); \\n    print(\\\"map.containsKey(11): \\\" + map.containsKey(11)); \\n    print(\\\"map.get(11): \\\" + map.get(11)); \\n    print(\\\"map.containsValue(\\\\\\\"F0\\\\\\\"): \\\" \\n      + map.containsValue(\\\"F0\\\")); \\n    Integer key = map.keySet().iterator().next(); \\n    print(\\\"First key in map: \\\" + key); \\n    map.remove(key); \\n    printKeys(map); \\n    map.clear(); \\n    print(\\\"map.isEmpty(): \\\" + map.isEmpty()); \\n    map.putAll(new CountingMapData(25)); \\n    // Operations on the Set change the Map: \\n    map.keySet().removeAll(map.keySet()); \\n    print(\\\"map.isEmpty(): \\\" + map.isEmpty());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c12ac9ba7300c8099c81abff891eafb2\",\n        \"type\": \"source_code\",\n        \"text\": \"test(new HashMap<Integer,String>()); \\n    test(new TreeMap<Integer,String>()); \\n    test(new LinkedHashMap<Integer,String>()); \\n    test(new IdentityHashMap<Integer,String>()); \\n    test(new ConcurrentHashMap<Integer,String>()); \\n    test(new WeakHashMap<Integer,String>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c3e8b51582b4ba1751abd29c392fb5f8\",\n        \"type\": \"source_code\",\n        \"text\": \"TreeMap<Integer,String> sortedMap = \\n      new TreeMap<Integer,String>(new CountingMapData(10)); \\n    print(sortedMap); \\n    Integer low = sortedMap.firstKey(); \\n    Integer high = sortedMap.lastKey(); \\n    print(low); \\n    print(high); \\n    Iterator<Integer> it = sortedMap.keySet().iterator(); \\n    for(int i = 0; i <= 6; i++) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42def59c1845b73d012b323a7e17d52b\",\n        \"type\": \"source_code\",\n        \"text\": \"if(i == 3) low = it.next(); \\n      if(i == 6) high = it.next(); \\n      else it.next(); \\n    } \\n    print(low); \\n    print(high); \\n    print(sortedMap.subMap(low, high)); \\n    print(sortedMap.headMap(high)); \\n    print(sortedMap.tailMap(low));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8bb4b7f52fefc8edd8a925ac64797afc\",\n        \"type\": \"source_code\",\n        \"text\": \"LinkedHashMap<Integer,String> linkedMap = \\n      new LinkedHashMap<Integer,String>( \\n        new CountingMapData(9)); \\n    print(linkedMap); \\n    // Least-recently-used order: \\n    linkedMap = \\n      new LinkedHashMap<Integer,String>(16, 0.75f, true); \\n    linkedMap.putAll(new CountingMapData(9)); \\n    print(linkedMap); \\n    for(int i = 0; i < 6; i++) // Cause accesses: \\n      linkedMap.get(i); \\n    print(linkedMap); \\n    linkedMap.get(0); \\n    print(linkedMap);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f745c80e630bf7c2343655f4e9f6a9a7\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Groundhog #\\\" + number;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d70f48290e4ea7da98639fb0fc2082e\",\n        \"type\": \"source_code\",\n        \"text\": \"if(shadow) \\n      return \\\"Six more weeks of Winter!\\\"; \\n    else \\n      return \\\"Early Spring!\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70d9ac3d580a87047c45f9cf89f612a1\",\n        \"type\": \"source_code\",\n        \"text\": \"Constructor<T> ghog = type.getConstructor(int.class); \\n    Map<Groundhog,Prediction> map = \\n      new HashMap<Groundhog,Prediction>(); \\n    for(int i = 0; i < 10; i++) \\n      map.put(ghog.newInstance(i), new Prediction()); \\n    print(\\\"map = \\\" + map); \\n    Groundhog gh = ghog.newInstance(3); \\n    print(\\\"Looking up prediction for \\\" + gh); \\n    if(map.containsKey(gh)) \\n      print(map.get(gh)); \\n    else \\n      print(\\\"Key not found: \\\" + gh);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd27e1c6de4e732cbba49a2e186d13c9\",\n        \"type\": \"source_code\",\n        \"text\": \"detectSpring(Groundhog.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48dc156ce584efb718e9f76a21f3a6af\",\n        \"type\": \"source_code\",\n        \"text\": \"return o instanceof Groundhog2 && \\n      (number == ((Groundhog2)o).number);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b9b9402233e5d123d7757c32a9203aeb\",\n        \"type\": \"source_code\",\n        \"text\": \"SpringDetector.detectSpring(Groundhog2.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"82bce6dd11bc644630f0b05f30e58702\",\n        \"type\": \"source_code\",\n        \"text\": \"V oldValue = get(key); // The old value or null \\n    if(!keys.contains(key)) { \\n      keys.add(key); \\n      values.add(value); \\n    } else \\n      values.set(keys.indexOf(key), value); \\n    return oldValue;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed0800f105b3073e83cb29bdf57525f5\",\n        \"type\": \"source_code\",\n        \"text\": \"if(!keys.contains(key)) \\n      return null; \\n    return values.get(keys.indexOf(key));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a14cd98f69e1509a4fe653e7c095723\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<Map.Entry<K,V>> set= new HashSet<Map.Entry<K,V>>(); \\n    Iterator<K> ki = keys.iterator(); \\n    Iterator<V> vi = values.iterator(); \\n    while(ki.hasNext()) \\n      set.add(new MapEntry<K,V>(ki.next(), vi.next())); \\n    return set;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94e043cbd61a3824e2bee2690b8be3b3\",\n        \"type\": \"source_code\",\n        \"text\": \"SlowMap<String,String> m= new SlowMap<String,String>(); \\n    m.putAll(Countries.capitals(15)); \\n    System.out.println(m); \\n    System.out.println(m.get(\\\"BULGARIA\\\")); \\n    System.out.println(m.entrySet());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"91cd5d8d0e7ac6c66ba5452f2f74de23\",\n        \"type\": \"source_code\",\n        \"text\": \"this.key = key; \\n    this.value = value;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d21f0b8abf68a6b226ae4fd6a7ffcb99\",\n        \"type\": \"source_code\",\n        \"text\": \"V result = value; \\n    value = v; \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d16406343275e1ba353de13275ab9f33\",\n        \"type\": \"source_code\",\n        \"text\": \"return (key==null ? 0 : key.hashCode()) ^ \\n      (value==null ? 0 : value.hashCode());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97f4cb8cbfac10d1e23382a76a190958\",\n        \"type\": \"source_code\",\n        \"text\": \"if(!(o instanceof MapEntry)) return false; \\n    MapEntry me = (MapEntry)o; \\n    return \\n      (key == null ? \\n       me.getKey() == null : key.equals(me.getKey())) && \\n      (value == null ? \\n       me.getValue()== null : value.equals(me.getValue()));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3aaaf2978a91ff9fec7ab1f8cf0faa35\",\n        \"type\": \"source_code\",\n        \"text\": \"new LinkedList[SIZE];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c2e1e8e71faece2995a6b38f865865a5\",\n        \"type\": \"source_code\",\n        \"text\": \"V oldValue = null; \\n    int index = Math.abs(key.hashCode()) % SIZE; \\n    if(buckets[index] == null) \\n      buckets[index] = new LinkedList<MapEntry<K,V>>(); \\n    LinkedList<MapEntry<K,V>> bucket = buckets[index]; \\n    MapEntry<K,V> pair = new MapEntry<K,V>(key, value); \\n    boolean found = false; \\n    ListIterator<MapEntry<K,V>> it = bucket.listIterator(); \\n    while(it.hasNext()) { \\n      MapEntry<K,V> iPair = it.next(); \\n      if(iPair.getKey().equals(key)) { \\n        oldValue = iPair.getValue(); \\n        it.set(pair); // Replace old with new \\n        found = true; \\n        break; \\n      } \\n    } \\n    if(!found) \\n      buckets[index].add(pair); \\n    return oldValue;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea89f1fae9d99723a126424cd025374a\",\n        \"type\": \"source_code\",\n        \"text\": \"int index = Math.abs(key.hashCode()) % SIZE; \\n    if(buckets[index] == null) return null; \\n    for(MapEntry<K,V> iPair : buckets[index]) \\n      if(iPair.getKey().equals(key)) \\n        return iPair.getValue(); \\n    return null;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4482ec6d83bc9d13c2f21d0d12bbffa5\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<Map.Entry<K,V>> set= new HashSet<Map.Entry<K,V>>(); \\n    for(LinkedList<MapEntry<K,V>> bucket : buckets) { \\n      if(bucket == null) continue; \\n      for(MapEntry<K,V> mpair : bucket) \\n        set.add(mpair); \\n    } \\n    return set;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c85d2c62919ffdbb47b96fc3a7cff5f1\",\n        \"type\": \"source_code\",\n        \"text\": \"SimpleHashMap<String,String> m = \\n      new SimpleHashMap<String,String>(); \\n    m.putAll(Countries.capitals(25)); \\n    System.out.println(m); \\n    System.out.println(m.get(\\\"ERITREA\\\")); \\n    System.out.println(m.entrySet());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5135719dfffe93562650f035801fa625\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] hellos = \\\"Hello Hello\\\".split(\\\" \\\"); \\n    System.out.println(hellos[0].hashCode()); \\n    System.out.println(hellos[1].hashCode());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e23fc8ce8a3b9ea97030a7f9d383a795\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<String>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f1ca858405b8dbc48ae0c551d98431ab\",\n        \"type\": \"source_code\",\n        \"text\": \"s = str; \\n    created.add(s); \\n    // id is the total number of instances \\n    // of this string in use by CountedString: \\n    for(String s2 : created) \\n      if(s2.equals(s)) \\n        id++;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"207b0af7bd5e1cb3a691a82d2dba6030\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"String: \\\" + s + \\\" id: \\\" + id + \\n      \\\" hashCode(): \\\" + hashCode();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"685c75ddedb1a8f450b49831ba6cd8d3\",\n        \"type\": \"source_code\",\n        \"text\": \"// The very simple approach: \\n    // return s.hashCode() * id; \\n    // Using Joshua Bloch\\u2019s recipe: \\n    int result = 17; \\n    result = 37 * result + s.hashCode(); \\n    result = 37 * result + id; \\n    return result;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3119b38a6f774d1f2599ccba82b169ef\",\n        \"type\": \"source_code\",\n        \"text\": \"return o instanceof CountedString && \\n      s.equals(((CountedString)o).s) && \\n      id == ((CountedString)o).id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2449fc07afbbc34709fdcebdf8a955a1\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<CountedString,Integer> map = \\n      new HashMap<CountedString,Integer>(); \\n    CountedString[] cs = new CountedString[5]; \\n    for(int i = 0; i < cs.length; i++) { \\n      cs[i] = new CountedString(\\\"hi\\\"); \\n      map.put(cs[i], i); // Autobox int -> Integer \\n    } \\n    print(map); \\n    for(CountedString cstring : cs) { \\n      print(\\\"Looking up \\\" + cstring); \\n      print(map.get(cstring)); \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d037c1baeebfcd0f6d6eb1ccdc5a3d2b\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName() + \\n      (name == null ? \\\"\\\" : \\\" \\\" + name);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"978ec0fb2019d4f3747088445ab51af2\",\n        \"type\": \"source_code\",\n        \"text\": \"return o instanceof Individual && \\n      id == ((Individual)o).id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed1702550ca7a737b77032a4a15e5f4f\",\n        \"type\": \"source_code\",\n        \"text\": \"int result = 17; \\n    if(name != null) \\n      result = 37 * result + name.hashCode(); \\n    result = 37 * result + (int)id; \\n    return result;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d290277bb3d43a6eb72764d4f911f27\",\n        \"type\": \"source_code\",\n        \"text\": \"// Compare by class name first: \\n    String first = getClass().getSimpleName(); \\n    String argFirst = arg.getClass().getSimpleName(); \\n    int firstCompare = first.compareTo(argFirst); \\n    if(firstCompare != 0) \\n    return firstCompare; \\n    if(name != null && arg.name != null) { \\n      int secondCompare = name.compareTo(arg.name); \\n      if(secondCompare != 0) \\n        return secondCompare; \\n    } \\n    return (arg.id < id ? -1 : (arg.id == id ? 0 : 1));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d8df477ee2260f7b860b05cdf170f29\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<Individual> pets = new TreeSet<Individual>(); \\n    for(List<? extends Pet> lp : \\n        MapOfList.petPeople.values()) \\n      for(Pet p : lp) \\n        pets.add(p); \\n    System.out.println(pets);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c4ca82e8f2b48a163a3ea777dcb6413a\",\n        \"type\": \"source_code\",\n        \"text\": \"this.size = size; \\n    this.loops = loops;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"79dca8093070a179661606a8854cf766\",\n        \"type\": \"source_code\",\n        \"text\": \"int size = values.length/2; \\n    TestParam[] result = new TestParam[size]; \\n    int n = 0; \\n    for(int i = 0; i < size; i++) \\n      result[i] = new TestParam(values[n++], values[n++]); \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cabeb40999c55b08d0660b1cd969cd23\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] vals = new int[values.length]; \\n    for(int i = 0; i < vals.length; i++) \\n      vals[i] = Integer.decode(values[i]); \\n    return array(vals);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2b9440269fbb497b61e73b883f42afb\",\n        \"type\": \"source_code\",\n        \"text\": \"10, 5000, 100, 5000, 1000, 5000, 10000, 500);\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f1994edd7612af10d96252c836450fb\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"%\\\" + fieldWidth + \\\"s\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c0e4d7d09d40a8ce7a3f7d58dbd5257f\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"%\\\" + fieldWidth + \\\"d\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37912687dee4db62880a92271956c78c\",\n        \"type\": \"source_code\",\n        \"text\": \"this.container = container; \\n    this.tests = tests; \\n    if(container != null) \\n      headline = container.getClass().getSimpleName();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6633edd6de66414ae297505ecfe9c392\",\n        \"type\": \"source_code\",\n        \"text\": \"TestParam[] paramList) { \\n    this(container, tests); \\n    this.paramList = paramList;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b27629c138d9d8ff5d8b255f402fb34\",\n        \"type\": \"source_code\",\n        \"text\": \"headline = newHeadline;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"486868ca5f5a2b19a6a500617efe1748\",\n        \"type\": \"source_code\",\n        \"text\": \"new Tester<C>(cntnr, tests).timedTest();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2b09e54ab1cfe6b5c30bf2582cdde9c\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Test<C>> tests, TestParam[] paramList) { \\n    new Tester<C>(cntnr, tests, paramList).timedTest();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"79690c9c713ece47700716a891b99d0c\",\n        \"type\": \"source_code\",\n        \"text\": \"// Calculate width and pad with \\u2018-\\u2019: \\n    int width = fieldWidth * tests.size() + sizeWidth; \\n    int dashLength = width - headline.length() - 1; \\n    StringBuilder head = new StringBuilder(width); \\n    for(int i = 0; i < dashLength/2; i++) \\n      head.append(\\u2018-\\u2019); \\n    head.append(\\u2018 \\u2018); \\n    head.append(headline); \\n    head.append(\\u2018 \\u2018); \\n    for(int i = 0; i < dashLength/2; i++) \\n      head.append(\\u2018-\\u2019); \\n    System.out.println(head); \\n    // Print column headers: \\n    System.out.format(sizeField, \\\"size\\\"); \\n    for(Test test : tests) \\n      System.out.format(stringField(), test.name); \\n    System.out.println();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e437e999e5655f06d298b7f2c5c99cd\",\n        \"type\": \"source_code\",\n        \"text\": \"displayHeader(); \\n    for(TestParam param : paramList) { \\n      System.out.format(sizeField, param.size); \\n      for(Test<C> test : tests) { \\n        C kontainer = initialize(param.size); \\n        long start = System.nanoTime(); \\n        // Call the overriden method: \\n        int reps = test.test(kontainer, param); \\n        long duration = System.nanoTime() - start; \\n        long timePerRep = duration / reps; // Nanoseconds \\n        System.out.format(numberField(), timePerRep); \\n      } \\n      System.out.println(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab917b01744b29b9f0ea1f040a865e5e\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Test<List<Integer>>>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6e4011c166e5095af8eec91bf26b15d8\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Test<LinkedList<Integer>>>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4980ba18962a3d18e94e8f9fcbb1bfc3\",\n        \"type\": \"source_code\",\n        \"text\": \"tests.add(new Test<List<Integer>>(\\\"add\\\") { \\n      int test(List<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        int listSize = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          list.clear(); \\n          for(int j = 0; j < listSize; j++) \\n            list.add(j); \\n        } \\n        return loops * listSize; \\n      } \\n    }); \\n    tests.add(new Test<List<Integer>>(\\\"get\\\") { \\n      int test(List<Integer> list, TestParam tp) { \\n        int loops = tp.loops * reps; \\n        int listSize = list.size(); \\n        for(int i = 0; i < loops; i++) \\n          list.get(rand.nextInt(listSize)); \\n        return loops; \\n      } \\n    }); \\n    tests.add(new Test<List<Integer>>(\\\"set\\\") {\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"957b429c56aab93f0fda747bc44a0d83\",\n        \"type\": \"source_code\",\n        \"text\": \"int test(List<Integer> list, TestParam tp) { \\n        int loops = tp.loops * reps; \\n        int listSize = list.size(); \\n        for(int i = 0; i < loops; i++) \\n          list.set(rand.nextInt(listSize), 47); \\n        return loops; \\n      } \\n    }); \\n    tests.add(new Test<List<Integer>>(\\\"iteradd\\\") { \\n      int test(List<Integer> list, TestParam tp) { \\n        final int LOOPS = 1000000; \\n        int half = list.size() / 2; \\n        ListIterator<Integer> it = list.listIterator(half); \\n        for(int i = 0; i < LOOPS; i++) \\n          it.add(47); \\n        return LOOPS; \\n      } \\n    }); \\n    tests.add(new Test<List<Integer>>(\\\"insert\\\") { \\n      int test(List<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        for(int i = 0; i < loops; i++) \\n          list.add(5, 47); // Minimize random-access cost \\n        return loops; \\n      } \\n    }); \\n    tests.add(new Test<List<Integer>>(\\\"remove\\\") { \\n      int test(List<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          list.clear(); \\n          list.addAll(new CountingIntegerList(size)); \\n          while(list.size() > 5) \\n            list.remove(5); // Minimize random-access cost \\n        } \\n        return loops * size; \\n      } \\n    }); \\n    // Tests for queue behavior: \\n    qTests.add(new Test<LinkedList<Integer>>(\\\"addFirst\\\") { \\n      int test(LinkedList<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          list.clear(); \\n          for(int j = 0; j < size; j++) \\n            list.addFirst(47); \\n        } \\n        return loops * size; \\n      } \\n    }); \\n    qTests.add(new Test<LinkedList<Integer>>(\\\"addLast\\\") { \\n      int test(LinkedList<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          list.clear(); \\n          for(int j = 0; j < size; j++) \\n            list.addLast(47); \\n        } \\n        return loops * size; \\n      }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5208a8a6a13cf6ef116c00343e7ff86\",\n        \"type\": \"source_code\",\n        \"text\": \"}); \\n    qTests.add( \\n      new Test<LinkedList<Integer>>(\\\"rmFirst\\\") { \\n        int test(LinkedList<Integer> list, TestParam tp) { \\n          int loops = tp.loops; \\n          int size = tp.size; \\n          for(int i = 0; i < loops; i++) { \\n            list.clear(); \\n            list.addAll(new CountingIntegerList(size)); \\n            while(list.size() > 0) \\n              list.removeFirst(); \\n          } \\n          return loops * size; \\n        } \\n      }); \\n    qTests.add(new Test<LinkedList<Integer>>(\\\"rmLast\\\") { \\n      int test(LinkedList<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          list.clear(); \\n          list.addAll(new CountingIntegerList(size)); \\n          while(list.size() > 0) \\n            list.removeLast(); \\n        } \\n        return loops * size; \\n      } \\n    });\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f13b59f44e13f8285e339d0308057d6b\",\n        \"type\": \"source_code\",\n        \"text\": \"public ListTester(List<Integer> container, \\n        List<Test<List<Integer>>> tests) { \\n      super(container, tests); \\n    } \\n    // Fill to the appropriate size before each test: \\n    @Override protected List<Integer> initialize(int size){ \\n      container.clear(); \\n      container.addAll(new CountingIntegerList(size)); \\n      return container; \\n    } \\n    // Convenience method: \\n    public static void run(List<Integer> list, \\n        List<Test<List<Integer>>> tests) { \\n      new ListTester(list, tests).timedTest(); \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a8cfa70c9239fdf5a91d457bf1938fa\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) \\n      Tester.defaultParams = TestParam.array(args); \\n    // Can only do these two tests on an array: \\n    Tester<List<Integer>> arrayTest = \\n      new Tester<List<Integer>>(null, tests.subList(1, 3)){ \\n        // This will be called before each test. It \\n        // produces a non-resizeable array-backed list: \\n        @Override protected \\n        List<Integer> initialize(int size) { \\n          Integer[] ia = Generated.array(Integer.class, \\n            new CountingGenerator.Integer(), size); \\n          return Arrays.asList(ia); \\n        } \\n      }; \\n    arrayTest.setHeadline(\\\"Array as List\\\"); \\n    arrayTest.timedTest();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d9b1e19371b2a4fc0af9262671e4b964\",\n        \"type\": \"source_code\",\n        \"text\": \"Tester.defaultParams= TestParam.array( \\n      10, 5000, 100, 5000, 1000, 1000, 10000, 200); \\n    if(args.length > 0) \\n      Tester.defaultParams = TestParam.array(args); \\n    ListTester.run(new ArrayList<Integer>(), tests); \\n    ListTester.run(new LinkedList<Integer>(), tests); \\n    ListTester.run(new Vector<Integer>(), tests); \\n    Tester.fieldWidth = 12; \\n    Tester<LinkedList<Integer>> qTest = \\n      new Tester<LinkedList<Integer>>( \\n        new LinkedList<Integer>(), qTests); \\n    qTest.setHeadline(\\\"Queue tests\\\"); \\n    qTest.timedTest();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"955fd07cb38c0ca8e60509d1683f7c1b\",\n        \"type\": \"source_code\",\n        \"text\": \"get     set\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d20f962a7c5ab6b42cedf306a6b8d09\",\n        \"type\": \"source_code\",\n        \"text\": \"130     183\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87970eab36493a9bf821d3dbdd34ff79\",\n        \"type\": \"source_code\",\n        \"text\": \"130     164\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d4e887aea60f8cef0cd0f5ceb880b0b3\",\n        \"type\": \"source_code\",\n        \"text\": \"129     165\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d4e887aea60f8cef0cd0f5ceb880b0b3\",\n        \"type\": \"source_code\",\n        \"text\": \"129     165\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a229613be91397777994c7c6f7d831d7\",\n        \"type\": \"source_code\",\n        \"text\": \"add     get     set iteradd  insert  remove\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd6e376573b5bf21764f1aec0577fc53\",\n        \"type\": \"source_code\",\n        \"text\": \"121     139     191     435    3952     446\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3a5cf766b9e7cc3d2784d2c5532ec723\",\n        \"type\": \"source_code\",\n        \"text\": \"72     141     191     247    3934     296\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c50f29bad14a1e330025dccbbcfe9b8d\",\n        \"type\": \"source_code\",\n        \"text\": \"98     141     194     839    2202     923\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8afb5ff44a3ded708f15373424426ca5\",\n        \"type\": \"source_code\",\n        \"text\": \"122     144     190    6880   14042    7333\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a229613be91397777994c7c6f7d831d7\",\n        \"type\": \"source_code\",\n        \"text\": \"add     get     set iteradd  insert  remove\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0bd04c89dfeb4243393a7da504025e0b\",\n        \"type\": \"source_code\",\n        \"text\": \"182     164     198     658     366     262\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1ba9838f6eb29b6e4f83c180ad39d99\",\n        \"type\": \"source_code\",\n        \"text\": \"106     202     230     457     108     201\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbdbe9d71b5143453de0bd7473aa2658\",\n        \"type\": \"source_code\",\n        \"text\": \"133    1289    1353     430     136     239\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"314db793e9a9ff42f3d5aa717692cedc\",\n        \"type\": \"source_code\",\n        \"text\": \"172   13648   13187     435     255     239\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a229613be91397777994c7c6f7d831d7\",\n        \"type\": \"source_code\",\n        \"text\": \"add     get     set iteradd  insert  remove\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ac31c9584c695ddaa995db0fe79034f\",\n        \"type\": \"source_code\",\n        \"text\": \"129     145     187     290    3635     253\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"387194c54cd62c3eb9ab77461435bcaf\",\n        \"type\": \"source_code\",\n        \"text\": \"72     144     190     263    3691     292\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1a1ffbb73b5b5502a467892c03484734\",\n        \"type\": \"source_code\",\n        \"text\": \"99     145     193     846    2162     927\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bed4d2ae813f31cc02e402a91d9081ad\",\n        \"type\": \"source_code\",\n        \"text\": \"108     145     186    6871   14730    7135\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f263c7c48e43728f5830b4ae9727b81d\",\n        \"type\": \"source_code\",\n        \"text\": \"addFirst     addLast     rmFirst      rmLast\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8651803866452edb93b12b16dfb715f1\",\n        \"type\": \"source_code\",\n        \"text\": \"199         163         251         253\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0225daff3910ace28accb6f6a87cd146\",\n        \"type\": \"source_code\",\n        \"text\": \"98          92         180         179\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"56974f65d9a1f8e34d62702bc0440584\",\n        \"type\": \"source_code\",\n        \"text\": \"99          93         216         212\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39d5f46e7969a03dd4ca032fd9ecdee3\",\n        \"type\": \"source_code\",\n        \"text\": \"111         109         262         384\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"158d795e0b0ce96a05c96d55b5306656\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Usage:\\\"); \\n    print(\\\"\\\\tRandomBounds lower\\\"); \\n    print(\\\"\\\\tRandomBounds upper\\\"); \\n    System.exit(1);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"922e721c3f308249c5381de5224c5a8a\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length != 1) usage(); \\n    if(args[0].equals(\\\"lower\\\")) { \\n      while(Math.random() != 0.0) \\n        ; // Keep trying\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7e23f3e8bcc02f30a25d6722934e077c\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Produced 0.0!\\\"); \\n    } \\n    else if(args[0].equals(\\\"upper\\\")) { \\n      while(Math.random() != 1.0) \\n        ; // Keep trying \\n      print(\\\"Produced 1.0!\\\"); \\n    } \\n    else \\n      usage();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"811c11d524b95b7876aa3607284c7615\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Test<Set<Integer>>>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"84748b05791181fa8ea4a21f19195761\",\n        \"type\": \"source_code\",\n        \"text\": \"tests.add(new Test<Set<Integer>>(\\\"add\\\") { \\n      int test(Set<Integer> set, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          set.clear(); \\n          for(int j = 0; j < size; j++) \\n            set.add(j); \\n        } \\n        return loops * size; \\n      } \\n    }); \\n    tests.add(new Test<Set<Integer>>(\\\"contains\\\") { \\n      int test(Set<Integer> set, TestParam tp) { \\n        int loops = tp.loops;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7969f06cbe3a9bdc1198cc01cebb8e0\",\n        \"type\": \"source_code\",\n        \"text\": \"int span = tp.size * 2; \\n        for(int i = 0; i < loops; i++) \\n          for(int j = 0; j < span; j++) \\n            set.contains(j); \\n        return loops * span; \\n      } \\n    }); \\n    tests.add(new Test<Set<Integer>>(\\\"iterate\\\") { \\n      int test(Set<Integer> set, TestParam tp) { \\n        int loops = tp.loops * 10; \\n        for(int i = 0; i < loops; i++) { \\n          Iterator<Integer> it = set.iterator(); \\n          while(it.hasNext()) \\n            it.next(); \\n        } \\n        return loops * set.size(); \\n      } \\n    });\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"027f275f8cf7eb2f36cfa695db38ea95\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) \\n      Tester.defaultParams = TestParam.array(args); \\n    Tester.fieldWidth = 10; \\n    Tester.run(new TreeSet<Integer>(), tests); \\n    Tester.run(new HashSet<Integer>(), tests); \\n    Tester.run(new LinkedHashSet<Integer>(), tests);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f069691159fbaecd02a409d5ee56d7fa\",\n        \"type\": \"source_code\",\n        \"text\": \"add  contains   iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ccf32f1190bd700aaadc89e6ce973380\",\n        \"type\": \"source_code\",\n        \"text\": \"746       173        89\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf2edf989cdb9ddbc95a58f14a034220\",\n        \"type\": \"source_code\",\n        \"text\": \"501       264        68\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8c78c69563411c05f78c56765bef2ab\",\n        \"type\": \"source_code\",\n        \"text\": \"714       410        69\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2fb3d723a51b1c55ce7873637a0ae17d\",\n        \"type\": \"source_code\",\n        \"text\": \"1975       552        69\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f069691159fbaecd02a409d5ee56d7fa\",\n        \"type\": \"source_code\",\n        \"text\": \"add  contains   iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3906fc23f94380eb8669ac0ee274dd8\",\n        \"type\": \"source_code\",\n        \"text\": \"308        91        94\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30877ad4618ec8089cc10ed549afe965\",\n        \"type\": \"source_code\",\n        \"text\": \"178        75        73\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"702b4c539c931b723d013f4d6b80611c\",\n        \"type\": \"source_code\",\n        \"text\": \"216       110        72\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2d244637958bb65e4723308712386fbd\",\n        \"type\": \"source_code\",\n        \"text\": \"711       215       100\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f069691159fbaecd02a409d5ee56d7fa\",\n        \"type\": \"source_code\",\n        \"text\": \"add  contains   iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57d90c36d950020df74ada73829695ee\",\n        \"type\": \"source_code\",\n        \"text\": \"350        65        83\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"54b7c320071502ef2d5a91cff79eedec\",\n        \"type\": \"source_code\",\n        \"text\": \"270        74        55\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78d6527a63ab6c296b6d87409ae7e265\",\n        \"type\": \"source_code\",\n        \"text\": \"303       111        54\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"724d6e3e174e580288e149dcbaf9be3f\",\n        \"type\": \"source_code\",\n        \"text\": \"1615       256        58\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6218b2e63e863e58cee9d69c91fe5866\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Test<Map<Integer,Integer>>>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0170995c41de06abea362b0886442aec\",\n        \"type\": \"source_code\",\n        \"text\": \"tests.add(new Test<Map<Integer,Integer>>(\\\"put\\\") { \\n      int test(Map<Integer,Integer> map, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          map.clear(); \\n          for(int j = 0; j < size; j++) \\n            map.put(j, j); \\n        } \\n        return loops * size; \\n      } \\n    }); \\n    tests.add(new Test<Map<Integer,Integer>>(\\\"get\\\") { \\n      int test(Map<Integer,Integer> map, TestParam tp) { \\n        int loops = tp.loops; \\n        int span = tp.size * 2; \\n        for(int i = 0; i < loops; i++) \\n          for(int j = 0; j < span; j++) \\n            map.get(j); \\n        return loops * span; \\n      } \\n    }); \\n    tests.add(new Test<Map<Integer,Integer>>(\\\"iterate\\\") { \\n      int test(Map<Integer,Integer> map, TestParam tp) { \\n        int loops = tp.loops * 10; \\n        for(int i = 0; i < loops; i ++) { \\n          Iterator it = map.entrySet().iterator(); \\n          while(it.hasNext()) \\n            it.next(); \\n        } \\n        return loops * map.size(); \\n      } \\n    });\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"554ac067092b8d1aceedcaeff5d7a889\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) \\n      Tester.defaultParams = TestParam.array(args); \\n    Tester.run(new TreeMap<Integer,Integer>(), tests); \\n    Tester.run(new HashMap<Integer,Integer>(), tests); \\n    Tester.run(new LinkedHashMap<Integer,Integer>(),tests); \\n    Tester.run( \\n      new IdentityHashMap<Integer,Integer>(), tests); \\n    Tester.run(new WeakHashMap<Integer,Integer>(), tests); \\n    Tester.run(new Hashtable<Integer,Integer>(), tests);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f5414e312aa46513a544f41376aa24d\",\n        \"type\": \"source_code\",\n        \"text\": \"748     168     100\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b849c65feafffc54bf1a01ea94594f43\",\n        \"type\": \"source_code\",\n        \"text\": \"506     264      76\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"36914ed1640fb1e4fd42da0726e54299\",\n        \"type\": \"source_code\",\n        \"text\": \"771     450      78\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c5256829e97bb26a7d3f469695771407\",\n        \"type\": \"source_code\",\n        \"text\": \"2962     561      83\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9718e09ae641c508ea2e3ab3a492a713\",\n        \"type\": \"source_code\",\n        \"text\": \"281      76      93\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae0e6e111325eb377f71dc5ab4bbaed8\",\n        \"type\": \"source_code\",\n        \"text\": \"179      70      73\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"81ec9360a9406ec8d0f1f9567555c1f1\",\n        \"type\": \"source_code\",\n        \"text\": \"267     102      72\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5873d1cff6099c9b5ff4f7bed2f884f5\",\n        \"type\": \"source_code\",\n        \"text\": \"1305     265      97\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0dad3fc714434f8a5f3a8e545dfc3523\",\n        \"type\": \"source_code\",\n        \"text\": \"354     100      72\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0f5daf9e7a99e3b2f1185b8d3cb9d63\",\n        \"type\": \"source_code\",\n        \"text\": \"273      89      50\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"56eca2cbfdd1ebc4cbea1a6c16484edc\",\n        \"type\": \"source_code\",\n        \"text\": \"385     222      56\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33ded7b112be16fe500361c703c0fc96\",\n        \"type\": \"source_code\",\n        \"text\": \"2787     341      56\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ca850a09e9e01dbbb2694ff3faf2a52c\",\n        \"type\": \"source_code\",\n        \"text\": \"290     144     101\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0550f49df2d93b51af839f7bd7a3dedf\",\n        \"type\": \"source_code\",\n        \"text\": \"204     287     132\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f4b062d98d78b30cb354f923165cc572\",\n        \"type\": \"source_code\",\n        \"text\": \"508     336      77\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4571c6d3d63e3d09561b00ab4d4ef9cf\",\n        \"type\": \"source_code\",\n        \"text\": \"767     266      56\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"11bc10f6c3cfed32d106e10fb4ff98d5\",\n        \"type\": \"source_code\",\n        \"text\": \"484     146     151\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1fc6d08ee1dc045fd80b98ba8e19e858\",\n        \"type\": \"source_code\",\n        \"text\": \"292     126     117\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b6538d89262512872bb9e8d3c1bc1f2\",\n        \"type\": \"source_code\",\n        \"text\": \"411     136     152\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"677d90f31f7a710576ff9f91c94ffe21\",\n        \"type\": \"source_code\",\n        \"text\": \"2165     138     555\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b8f82a209097f920488559bc24b1216\",\n        \"type\": \"source_code\",\n        \"text\": \"264     113     113\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7cc66ced9b90bb8bb9c3bd1aaa649424\",\n        \"type\": \"source_code\",\n        \"text\": \"181     105      76\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90ffa78b093b1089cf3a9507d5bbaf11\",\n        \"type\": \"source_code\",\n        \"text\": \"260     201      80\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee7a45715e13207636832f43392ecb91\",\n        \"type\": \"source_code\",\n        \"text\": \"1245     134      77\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7eeae050856631087e7baf06299af5c\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"one Two three Four five six one\\\".split(\\\" \\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5caca61f437ec2795638b30c35b7e73\",\n        \"type\": \"source_code\",\n        \"text\": \"print(list); \\n    print(\\\"\\u2018list\\u2019 disjoint (Four)?: \\\" + \\n      Collections.disjoint(list, \\n        Collections.singletonList(\\\"Four\\\"))); \\n    print(\\\"max: \\\" + Collections.max(list)); \\n    print(\\\"min: \\\" + Collections.min(list)); \\n    print(\\\"max w/ comparator: \\\" + Collections.max(list, \\n      String.CASE_INSENSITIVE_ORDER)); \\n    print(\\\"min w/ comparator: \\\" + Collections.min(list, \\n      String.CASE_INSENSITIVE_ORDER)); \\n    List<String> sublist = \\n      Arrays.asList(\\\"Four five six\\\".split(\\\" \\\")); \\n    print(\\\"indexOfSubList: \\\" + \\n      Collections.indexOfSubList(list, sublist)); \\n    print(\\\"lastIndexOfSubList: \\\" + \\n      Collections.lastIndexOfSubList(list, sublist)); \\n    Collections.replaceAll(list, \\\"one\\\", \\\"Yo\\\"); \\n    print(\\\"replaceAll: \\\" + list); \\n    Collections.reverse(list); \\n    print(\\\"reverse: \\\" + list); \\n    Collections.rotate(list, 3); \\n    print(\\\"rotate: \\\" + list); \\n    List<String> source = \\n      Arrays.asList(\\\"in the matrix\\\".split(\\\" \\\")); \\n    Collections.copy(list, source); \\n    print(\\\"copy: \\\" + list); \\n    Collections.swap(list, 0, list.size() - 1); \\n    print(\\\"swap: \\\" + list); \\n    Collections.shuffle(list, new Random(47)); \\n    print(\\\"shuffled: \\\" + list); \\n    Collections.fill(list, \\\"pop\\\"); \\n    print(\\\"fill: \\\" + list); \\n    print(\\\"frequency of \\u2018pop\\u2019: \\\" + \\n      Collections.frequency(list, \\\"pop\\\")); \\n    List<String> dups = Collections.nCopies(3, \\\"snap\\\"); \\n    print(\\\"dups: \\\" + dups); \\n    print(\\\"\\u2018list\\u2019 disjoint \\u2018dups\\u2019?: \\\" + \\n      Collections.disjoint(list, dups)); \\n    // Getting an old-style Enumeration: \\n    Enumeration<String> e = Collections.enumeration(dups); \\n    Vector<String> v = new Vector<String>(); \\n    while(e.hasMoreElements()) \\n      v.addElement(e.nextElement()); \\n    // Converting an old-style Vector \\n    // to a List via an Enumeration: \\n    ArrayList<String> arrayList = \\n      Collections.list(v.elements()); \\n    print(\\\"arrayList: \\\" + arrayList);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7cba343d2c5c8a8a7b751abad7fb0af9\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> list = \\n      new ArrayList<String>(Utilities.list); \\n    list.addAll(Utilities.list); \\n    print(list); \\n    Collections.shuffle(list, new Random(47)); \\n    print(\\\"Shuffled: \\\" + list); \\n    // Use a ListIterator to trim off the last elements: \\n    ListIterator<String> it = list.listIterator(10); \\n    while(it.hasNext()) { \\n      it.next(); \\n      it.remove(); \\n    } \\n    print(\\\"Trimmed: \\\" + list); \\n    Collections.sort(list); \\n    print(\\\"Sorted: \\\" + list); \\n    String key = list.get(7); \\n    int index = Collections.binarySearch(list, key); \\n    print(\\\"Location of \\\" + key + \\\" is \\\" + index + \\n      \\\", list.get(\\\" + index + \\\") = \\\" + list.get(index)); \\n    Collections.sort(list, String.CASE_INSENSITIVE_ORDER); \\n    print(\\\"Case-insensitive sorted: \\\" + list); \\n    key = list.get(7); \\n    index = Collections.binarySearch(list, key, \\n      String.CASE_INSENSITIVE_ORDER); \\n    print(\\\"Location of \\\" + key + \\\" is \\\" + index + \\n      \\\", list.get(\\\" + index + \\\") = \\\" + list.get(index));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"08e7e5e31cb56f4c9a6cf72e04f9cfff\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<String>(Countries.names(6));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"051540090cf7b73f80dc07693d6c5a2f\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<String> c = \\n      Collections.unmodifiableCollection( \\n        new ArrayList<String>(data)); \\n    print(c); // Reading is OK \\n    //! c.add(\\\"one\\\"); // Can\\u2019t change it\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"704c7ffefa18f37fed9b66689eb0f7fe\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> a = Collections.unmodifiableList(\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f391ae6c98956aaa45a8296b679cdca2\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<String>(data)); \\n    ListIterator<String> lit = a.listIterator(); \\n    print(lit.next()); // Reading is OK \\n    //! lit.add(\\\"one\\\"); // Can\\u2019t change it\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a3a60163a86bcd908eda0147e0108b8\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> s = Collections.unmodifiableSet( \\n      new HashSet<String>(data)); \\n    print(s); // Reading is OK \\n    //! s.add(\\\"one\\\"); // Can\\u2019t change it\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70ea828e50e9e2070b15559c40aff922\",\n        \"type\": \"source_code\",\n        \"text\": \"// For a SortedSet: \\n    Set<String> ss = Collections.unmodifiableSortedSet( \\n      new TreeSet<String>(data));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"84357dd3c3a24e5259a1df8dab3ad16e\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<String,String> m = Collections.unmodifiableMap( \\n      new HashMap<String,String>(Countries.capitals(6))); \\n    print(m); // Reading is OK \\n    //! m.put(\\\"Ralph\\\", \\\"Howdy!\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5dee55d79822815cb2a5597ee63036d7\",\n        \"type\": \"source_code\",\n        \"text\": \"// For a SortedMap: \\n    Map<String,String> sm = \\n      Collections.unmodifiableSortedMap( \\n        new TreeMap<String,String>(Countries.capitals(6)));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2dcc463d08c157fa4fd0405ad7cb2189\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<String> c = \\n      Collections.synchronizedCollection( \\n        new ArrayList<String>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bfad152bd022113f4ce98af464fdd6dc\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> list = Collections.synchronizedList( \\n      new ArrayList<String>()); \\n    Set<String> s = Collections.synchronizedSet( \\n      new HashSet<String>()); \\n    Set<String> ss = Collections.synchronizedSortedSet( \\n      new TreeSet<String>()); \\n    Map<String,String> m = Collections.synchronizedMap( \\n      new HashMap<String,String>()); \\n    Map<String,String> sm = \\n      Collections.synchronizedSortedMap( \\n        new TreeMap<String,String>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"98b2faad82c8f437f5e7424f384cea1f\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<String> c = new ArrayList<String>(); \\n    Iterator<String> it = c.iterator(); \\n    c.add(\\\"An object\\\"); \\n    try { \\n      String s = it.next(); \\n    } catch(ConcurrentModificationException e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93ed4c3390b624968d09bf169741badc\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Finalizing \\\" + ident);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2bb24351ade888dd4a8e964b0fb12b80\",\n        \"type\": \"source_code\",\n        \"text\": \"new ReferenceQueue<VeryBig>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed2809b12b1b50130932c3ffb6843aaf\",\n        \"type\": \"source_code\",\n        \"text\": \"Reference<? extends VeryBig> inq = rq.poll(); \\n    if(inq != null) \\n      System.out.println(\\\"In queue: \\\" + inq.get());\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"669cdf5abd9677f4468cec2a95b69dd5\",\n        \"type\": \"source_code\",\n        \"text\": \"int size = 10; \\n    // Or, choose size via the command line: \\n    if(args.length > 0) \\n      size = new Integer(args[0]); \\n    LinkedList<SoftReference<VeryBig>> sa = \\n      new LinkedList<SoftReference<VeryBig>>(); \\n    for(int i = 0; i < size; i++) { \\n      sa.add(new SoftReference<VeryBig>( \\n        new VeryBig(\\\"Soft \\\" + i), rq)); \\n      System.out.println(\\\"Just created: \\\" + sa.getLast()); \\n      checkQueue(); \\n    } \\n    LinkedList<WeakReference<VeryBig>> wa = \\n      new LinkedList<WeakReference<VeryBig>>(); \\n    for(int i = 0; i < size; i++) { \\n      wa.add(new WeakReference<VeryBig>( \\n        new VeryBig(\\\"Weak \\\" + i), rq)); \\n      System.out.println(\\\"Just created: \\\" + wa.getLast()); \\n      checkQueue(); \\n    } \\n    SoftReference<VeryBig> s = \\n      new SoftReference<VeryBig>(new VeryBig(\\\"Soft\\\")); \\n    WeakReference<VeryBig> w = \\n      new WeakReference<VeryBig>(new VeryBig(\\\"Weak\\\")); \\n    System.gc(); \\n    LinkedList<PhantomReference<VeryBig>> pa = \\n      new LinkedList<PhantomReference<VeryBig>>(); \\n    for(int i = 0; i < size; i++) { \\n      pa.add(new PhantomReference<VeryBig>( \\n        new VeryBig(\\\"Phantom \\\" + i), rq)); \\n      System.out.println(\\\"Just created: \\\" + pa.getLast()); \\n      checkQueue(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d98d70c814dacfcbcbe76810faa832\",\n        \"type\": \"source_code\",\n        \"text\": \"return r instanceof Element && \\n      ident.equals(((Element)r).ident);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ec63f9b70b01cf9b466cf1b72ba7279\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Finalizing \\\" + \\n      getClass().getSimpleName() + \\\" \\\" + ident);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61e6a373e9be85012f64f7a2341b3e03\",\n        \"type\": \"source_code\",\n        \"text\": \"int size = 1000; \\n    // Or, choose size via the command line: \\n    if(args.length > 0) \\n      size = new Integer(args[0]); \\n    Key[] keys = new Key[size]; \\n    WeakHashMap<Key,Value> map = \\n      new WeakHashMap<Key,Value>(); \\n    for(int i = 0; i < size; i++) { \\n      Key k = new Key(Integer.toString(i)); \\n      Value v = new Value(Integer.toString(i)); \\n      if(i % 3 == 0) \\n        keys[i] = k; // Save as \\\"real\\\" references \\n      map.put(k, v); \\n    } \\n    System.gc();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b9eb5cbddf5506c3f2be39c4d6a25f8a\",\n        \"type\": \"source_code\",\n        \"text\": \"Vector<String> v = \\n      new Vector<String>(Countries.names(10)); \\n    Enumeration<String> e = v.elements(); \\n    while(e.hasMoreElements()) \\n      System.out.print(e.nextElement() + \\\", \\\"); \\n    // Produce an Enumeration from a Collection: \\n    e = Collections.enumeration(new ArrayList<String>());\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b3062ce244bc20197db6e042ce0451ff\",\n        \"type\": \"source_code\",\n        \"text\": \"Stack<String> stack = new Stack<String>(); \\n    for(Month m : Month.values()) \\n      stack.push(m.toString()); \\n    print(\\\"stack = \\\" + stack); \\n    // Treating a stack as a Vector: \\n    stack.addElement(\\\"The last line\\\"); \\n    print(\\\"element 5 = \\\" + stack.elementAt(5)); \\n    print(\\\"popping elements:\\\"); \\n    while(!stack.empty()) \\n      printnb(stack.pop() + \\\" \\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a53196bcacf226c4ad7a7d8bc74904d\",\n        \"type\": \"source_code\",\n        \"text\": \"// Using a LinkedList as a Stack: \\n    LinkedList<String> lstack = new LinkedList<String>(); \\n    for(Month m : Month.values()) \\n      lstack.addFirst(m.toString()); \\n    print(\\\"lstack = \\\" + lstack); \\n    while(!lstack.isEmpty()) \\n      printnb(lstack.removeFirst() + \\\" \\\");\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"457d481613a4d011bd4c71b6a137c33a\",\n        \"type\": \"source_code\",\n        \"text\": \"// Using the Stack class from \\n    // the Holding Your Objects Chapter: \\n    net.mindview.util.Stack<String> stack2 = \\n      new net.mindview.util.Stack<String>(); \\n    for(Month m : Month.values()) \\n      stack2.push(m.toString());\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e35709b73e756f7b5965c8c8513e25f2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"stack2 = \\\" + stack2); \\n    while(!stack2.empty()) \\n      printnb(stack2.pop() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70a31de3168ac47a4bed14084c30e776\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"bits: \\\" + b); \\n    StringBuilder bbits = new StringBuilder(); \\n    for(int j = 0; j < b.size() ; j++) \\n      bbits.append(b.get(j) ? \\\"1\\\" : \\\"0\\\"); \\n    print(\\\"bit pattern: \\\" + bbits);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"086b617435698d4f482d38a53e0ac566\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    // Take the LSB of nextInt(): \\n    byte bt = (byte)rand.nextInt(); \\n    BitSet bb = new BitSet(); \\n    for(int i = 7; i >= 0; i--) \\n      if(((1 << i) &  bt) != 0) \\n        bb.set(i); \\n      else \\n        bb.clear(i); \\n    print(\\\"byte value: \\\" + bt); \\n    printBitSet(bb);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbbcd43b291d41a42b46426e2cdaf710\",\n        \"type\": \"source_code\",\n        \"text\": \"short st = (short)rand.nextInt(); \\n    BitSet bs = new BitSet(); \\n    for(int i = 15; i >= 0; i--) \\n      if(((1 << i) &  st) != 0) \\n        bs.set(i); \\n      else \\n        bs.clear(i); \\n    print(\\\"short value: \\\" + st); \\n    printBitSet(bs);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"498a3d3e8a38735948dd12f1e04d3b41\",\n        \"type\": \"source_code\",\n        \"text\": \"int it = rand.nextInt(); \\n    BitSet bi = new BitSet(); \\n    for(int i = 31; i >= 0; i--) \\n      if(((1 << i) &  it) != 0) \\n        bi.set(i); \\n      else \\n        bi.clear(i); \\n    print(\\\"int value: \\\" + it); \\n    printBitSet(bi);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"584b6b36de49d5060ae4be1d097a576d\",\n        \"type\": \"source_code\",\n        \"text\": \"// Test bitsets >= 64 bits: \\n    BitSet b127 = new BitSet(); \\n    b127.set(127); \\n    print(\\\"set bit 127: \\\" + b127); \\n    BitSet b255 = new BitSet(65); \\n    b255.set(255); \\n    print(\\\"set bit 255: \\\" + b255); \\n    BitSet b1023 = new BitSet(512); \\n    b1023.set(1023); \\n    b1023.set(1024); \\n    print(\\\"set bit 1023: \\\" + b1023);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48819257d25ac6b392c8ecdc6d44ce44\",\n        \"type\": \"source_code\",\n        \"text\": \"File path = new File(\\\".\\\"); \\n    String[] list; \\n    if(args.length == 0) \\n      list = path.list(); \\n    else \\n      list = path.list(new DirFilter(args[0])); \\n    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); \\n    for(String dirItem : list) \\n      System.out.println(dirItem);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d7c83682ff05b67e307299c595633c85\",\n        \"type\": \"source_code\",\n        \"text\": \"pattern = Pattern.compile(regex);\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"754ce78a12b3ee388d385b2cc2e72085\",\n        \"type\": \"source_code\",\n        \"text\": \"return pattern.matcher(name).matches();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d873ac5d88a71182293060f77761e0cf\",\n        \"type\": \"source_code\",\n        \"text\": \"// Creation of anonymous inner class: \\n    return new FilenameFilter() { \\n      private Pattern pattern = Pattern.compile(regex); \\n      public boolean accept(File dir, String name) { \\n        return pattern.matcher(name).matches(); \\n      } \\n    }; // End of anonymous inner class\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d45390000828beaf0327ec49f427f840\",\n        \"type\": \"source_code\",\n        \"text\": \"File path = new File(\\\".\\\"); \\n    String[] list; \\n    if(args.length == 0) \\n      list = path.list(); \\n    else \\n      list = path.list(filter(args[0])); \\n    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); \\n    for(String dirItem : list) \\n      System.out.println(dirItem);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bae0a2e6bdc30781099c1adb8b3d2eae\",\n        \"type\": \"source_code\",\n        \"text\": \"File path = new File(\\\".\\\"); \\n    String[] list; \\n    if(args.length == 0) \\n      list = path.list(); \\n    else\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8753870ee39df4b8359f07852d45998\",\n        \"type\": \"source_code\",\n        \"text\": \"list = path.list(new FilenameFilter() { \\n        private Pattern pattern = Pattern.compile(args[0]); \\n        public boolean accept(File dir, String name) { \\n          return pattern.matcher(name).matches(); \\n        } \\n      }); \\n    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); \\n    for(String dirItem : list) \\n      System.out.println(dirItem);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61cc1967df164cb29bcb8180fbb20db6\",\n        \"type\": \"source_code\",\n        \"text\": \"return dir.listFiles(new FilenameFilter() { \\n      private Pattern pattern = Pattern.compile(regex); \\n      public boolean accept(File dir, String name) { \\n        return pattern.matcher( \\n          new File(name).getName()).matches(); \\n      } \\n    });\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"389f3aa1573621416e77181246980c74\",\n        \"type\": \"source_code\",\n        \"text\": \"return local(new File(path), regex);\",\n        \"programming_language\": \"Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f904dbd127c988f595c0dda353b81c5d\",\n        \"type\": \"source_code\",\n        \"text\": \"public List<File> files = new ArrayList<File>(); \\n    public List<File> dirs = new ArrayList<File>(); \\n    // The default iterable element is the file list: \\n    public Iterator<File> iterator() { \\n      return files.iterator(); \\n    } \\n    void addAll(TreeInfo other) { \\n      files.addAll(other.files); \\n      dirs.addAll(other.dirs); \\n    } \\n    public String toString() { \\n      return \\\"dirs: \\\" + PPrint.pformat(dirs) + \\n        \\\"\\\\n\\\\nfiles: \\\" + PPrint.pformat(files); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d64f02801687697c5cf26186aa1750aa\",\n        \"type\": \"source_code\",\n        \"text\": \"return recurseDirs(new File(start), regex);\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1dd39ca35737d6767440b09bbd546b02\",\n        \"type\": \"source_code\",\n        \"text\": \"return recurseDirs(start, regex);\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1f0bd08e35e0b6d3dea2506cd246384\",\n        \"type\": \"source_code\",\n        \"text\": \"return recurseDirs(start, \\\".*\\\");\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95a6fdd46aa33836d76bb70cf27fbe39\",\n        \"type\": \"source_code\",\n        \"text\": \"return recurseDirs(new File(start), \\\".*\\\");\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2029967eb70c6ed6766eaa70e9cb93c2\",\n        \"type\": \"source_code\",\n        \"text\": \"TreeInfo result = new TreeInfo(); \\n    for(File item : startDir.listFiles()) { \\n      if(item.isDirectory()) { \\n        result.dirs.add(item); \\n        result.addAll(recurseDirs(item, regex)); \\n      } else // Regular file \\n        if(item.getName().matches(regex)) \\n          result.files.add(item); \\n    } \\n    return result;\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecd8b2457d2764c3485e1c772c8c888c\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length == 0) \\n      System.out.println(walk(\\\".\\\")); \\n    else \\n      for(String arg : args) \\n       System.out.println(walk(arg));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1dab3fb47f902e6866c73fdb660fb21c\",\n        \"type\": \"source_code\",\n        \"text\": \"if(c.size() == 0) return \\\"[]\\\"; \\n    StringBuilder result = new StringBuilder(\\\"[\\\"); \\n    for(Object elem : c) { \\n      if(c.size() != 1) \\n        result.append(\\\"\\\\n  \\\"); \\n      result.append(elem); \\n    } \\n    if(c.size() != 1) \\n      result.append(\\\"\\\\n\\\"); \\n    result.append(\\\"]\\\"); \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0b4a701bf9a0924009f8194a6565bd96\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(pformat(c));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"73c03de4d6adc034a3e8db079ebb06d9\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(pformat(Arrays.asList(c)));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c0983edc13d6357e67918b1a9565609e\",\n        \"type\": \"source_code\",\n        \"text\": \"// All directories: \\n    PPrint.pprint(Directory.walk(\\\".\\\").dirs); \\n    // All files beginning with \\u2018T\\u2019 \\n    for(File file : Directory.local(\\\".\\\", \\\"T.*\\\")) \\n      print(file); \\n    print(\\\"----------------------\\\"); \\n    // All Java files beginning with \\u2018T\\u2019: \\n    for(File file : Directory.walk(\\\".\\\", \\\"T.*\\\\\\\\.java\\\")) \\n      print(file); \\n    print(\\\"======================\\\"); \\n    // Class files containing \\\"Z\\\" or \\\"z\\\": \\n    for(File file : Directory.walk(\\\".\\\",\\\".*[Zz].*\\\\\\\\.class\\\")) \\n      print(file);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42ad324ff125c69fb25eddc52a5b8806\",\n        \"type\": \"source_code\",\n        \"text\": \"void process(File file);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09c74c92f4914b4a220aa8bcb4c52195\",\n        \"type\": \"source_code\",\n        \"text\": \"this.strategy = strategy; \\n    this.ext = ext;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b91492c6db85dbacfaf89a50baabdea1\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      if(args.length == 0) \\n        processDirectoryTree(new File(\\\".\\\")); \\n      else \\n        for(String arg : args) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"77cf3db4cb3ed287a1dc1068a992a629\",\n        \"type\": \"source_code\",\n        \"text\": \"File fileArg = new File(arg); \\n          if(fileArg.isDirectory()) \\n            processDirectoryTree(fileArg); \\n          else { \\n            // Allow user to leave off extension: \\n            if(!arg.endsWith(\\\".\\\" + ext)) \\n              arg += \\\".\\\" + ext; \\n            strategy.process( \\n              new File(arg).getCanonicalFile()); \\n          } \\n        } \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"130ebee039b04882a2c57501609d0b81\",\n        \"type\": \"source_code\",\n        \"text\": \"for(File file : Directory.walk( \\n        root.getAbsolutePath(), \\\".*\\\\\\\\.\\\" + ext)) \\n      strategy.process(file.getCanonicalFile());\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f01789ddc7295a040cb7b124db42927\",\n        \"type\": \"source_code\",\n        \"text\": \"new ProcessFiles(new ProcessFiles.Strategy() { \\n      public void process(File file) { \\n        System.out.println(file); \\n      } \\n    }, \\\"java\\\").start(args);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d12d872c7357e1a49e05c2a598b6be6a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.err.println( \\n      \\\"Usage:MakeDirectories path1 ...\\\\n\\\" + \\n      \\\"Creates each path\\\\n\\\" + \\n      \\\"Usage:MakeDirectories -d path1 ...\\\\n\\\" + \\n      \\\"Deletes each path\\\\n\\\" + \\n      \\\"Usage:MakeDirectories -r path1 path2\\\\n\\\" + \\n      \\\"Renames from path1 to path2\\\"); \\n    System.exit(1);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"01616bc321998610236f5adfdaea240b\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n      \\\"Absolute path: \\\" + f.getAbsolutePath() + \\n      \\\"\\\\n Can read: \\\" + f.canRead() + \\n      \\\"\\\\n Can write: \\\" + f.canWrite() + \\n      \\\"\\\\n getName: \\\" + f.getName() + \\n      \\\"\\\\n getParent: \\\" + f.getParent() + \\n      \\\"\\\\n getPath: \\\" + f.getPath() + \\n      \\\"\\\\n length: \\\" + f.length() + \\n      \\\"\\\\n lastModified: \\\" + f.lastModified()); \\n    if(f.isFile()) \\n      System.out.println(\\\"It\\u2019s a file\\\"); \\n    else if(f.isDirectory()) \\n      System.out.println(\\\"It\\u2019s a directory\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35b0c379d25555dfee32c8f8651f5f54\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length < 1) usage(); \\n    if(args[0].equals(\\\"-r\\\")) { \\n      if(args.length != 3) usage(); \\n      File \\n        old = new File(args[1]), \\n        rname = new File(args[2]); \\n      old.renameTo(rname); \\n      fileData(old); \\n      fileData(rname); \\n      return; // Exit main \\n    } \\n    int count = 0; \\n    boolean del = false; \\n    if(args[0].equals(\\\"-d\\\")) { \\n      count++; \\n      del = true; \\n    } \\n    count--; \\n    while(++count < args.length) { \\n      File f = new File(args[count]); \\n      if(f.exists()) { \\n        System.out.println(f + \\\" exists\\\"); \\n        if(del) { \\n          System.out.println(\\\"deleting...\\\" + f); \\n          f.delete(); \\n        } \\n      } \\n      else { // Doesn\\u2019t exist \\n        if(!del) { \\n          f.mkdirs();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d2a1e48c2f930ee1b40e3a6253863e9\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"created \\\" + f); \\n        } \\n      } \\n      fileData(f); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d0e38aac2744cdddd1c8b981f0e48766\",\n        \"type\": \"source_code\",\n        \"text\": \"and useful interfaces\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93372e8d2fbe30f038d16a5006cb3853\",\n        \"type\": \"source_code\",\n        \"text\": \"RandomAccessFile\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"601b28ea203943872f86f4043b6966a4\",\n        \"type\": \"source_code\",\n        \"text\": \"// Reading input by lines: \\n    BufferedReader in = new BufferedReader( \\n      new FileReader(filename)); \\n    String s; \\n    StringBuilder sb = new StringBuilder(); \\n    while((s = in.readLine())!= null) \\n      sb.append(s + \\\"\\\\n\\\"); \\n    in.close(); \\n    return sb.toString();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b0e48291d81b4cdbe20b9ecea8d81c3\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(read(\\\"BufferedInputFile.java\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e25167b4ebac20c731db5e2d83b4b13b\",\n        \"type\": \"source_code\",\n        \"text\": \"StringReader in = new StringReader( \\n      BufferedInputFile.read(\\\"MemoryInput.java\\\")); \\n    int c; \\n    while((c = in.read()) != -1) \\n      System.out.print((char)c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d50a3427c9fcf59834341ddb2ea63761\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      DataInputStream in = new DataInputStream( \\n        new ByteArrayInputStream( \\n         BufferedInputFile.read( \\n          \\\"FormattedMemoryInput.java\\\").getBytes())); \\n      while(true) \\n        System.out.print((char)in.readByte()); \\n    } catch(EOFException e) { \\n      System.err.println(\\\"End of stream\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7043bf8b72c945bd71fc79c2cb204a0a\",\n        \"type\": \"source_code\",\n        \"text\": \"DataInputStream in = new DataInputStream( \\n      new BufferedInputStream( \\n        new FileInputStream(\\\"TestEOF.java\\\"))); \\n    while(in.available() != 0)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87cae744d78f0de9e2e2af4ef661fa85\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print((char)in.readByte());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9b3d29c11152c7bc20fdb7f01c554b4\",\n        \"type\": \"source_code\",\n        \"text\": \"BufferedReader in = new BufferedReader( \\n      new StringReader( \\n        BufferedInputFile.read(\\\"BasicFileOutput.java\\\"))); \\n    PrintWriter out = new PrintWriter( \\n      new BufferedWriter(new FileWriter(file))); \\n    int lineCount = 1; \\n    String s; \\n    while((s = in.readLine()) != null ) \\n      out.println(lineCount++ + \\\": \\\" + s); \\n    out.close(); \\n    // Show the stored file: \\n    System.out.println(BufferedInputFile.read(file));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"67e47aaade8a488ebb1ea4091ec1b23f\",\n        \"type\": \"source_code\",\n        \"text\": \"BufferedReader in = new BufferedReader( \\n      new StringReader( \\n       BufferedInputFile.read(\\\"FileOutputShortcut.java\\\"))); \\n    // Here\\u2019s the shortcut: \\n    PrintWriter out = new PrintWriter(file); \\n    int lineCount = 1; \\n    String s; \\n    while((s = in.readLine()) != null ) \\n      out.println(lineCount++ + \\\": \\\" + s); \\n    out.close(); \\n    // Show the stored file: \\n    System.out.println(BufferedInputFile.read(file));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"282e368dbcf3e0514b436db0bd9d4436\",\n        \"type\": \"source_code\",\n        \"text\": \"DataOutputStream out = new DataOutputStream( \\n      new BufferedOutputStream( \\n        new FileOutputStream(\\\"Data.txt\\\"))); \\n    out.writeDouble(3.14159); \\n    out.writeUTF(\\\"That was pi\\\"); \\n    out.writeDouble(1.41413); \\n    out.writeUTF(\\\"Square root of 2\\\"); \\n    out.close(); \\n    DataInputStream in = new DataInputStream(\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"88aee1a3d3883bbd792a5b3b1fd2e40b\",\n        \"type\": \"source_code\",\n        \"text\": \"new BufferedInputStream( \\n        new FileInputStream(\\\"Data.txt\\\"))); \\n    System.out.println(in.readDouble()); \\n    // Only readUTF() will recover the \\n    // Java-UTF String properly: \\n    System.out.println(in.readUTF()); \\n    System.out.println(in.readDouble()); \\n    System.out.println(in.readUTF());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24ad698deee03a52e7ecce25e95da19a\",\n        \"type\": \"source_code\",\n        \"text\": \"RandomAccessFile rf = new RandomAccessFile(file, \\\"r\\\"); \\n    for(int i = 0; i < 7; i++) \\n      System.out.println( \\n        \\\"Value \\\" + i + \\\": \\\" + rf.readDouble()); \\n    System.out.println(rf.readUTF()); \\n    rf.close();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1b28d226105bcc0c333ab0aeeb3e3850\",\n        \"type\": \"source_code\",\n        \"text\": \"RandomAccessFile rf = new RandomAccessFile(file, \\\"rw\\\"); \\n    for(int i = 0; i < 7; i++) \\n      rf.writeDouble(i*1.414); \\n    rf.writeUTF(\\\"The end of the file\\\"); \\n    rf.close(); \\n    display(); \\n    rf = new RandomAccessFile(file, \\\"rw\\\"); \\n    rf.seek(5*8); \\n    rf.writeDouble(47.0001); \\n    rf.close(); \\n    display();\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5ab902baf05927cd8839f57cfb66ca1e\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder sb = new StringBuilder(); \\n    try { \\n      BufferedReader in= new BufferedReader(new FileReader( \\n        new File(fileName).getAbsoluteFile())); \\n      try { \\n        String s;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aeb16145c44f9c91048540ec6de2dbb7\",\n        \"type\": \"source_code\",\n        \"text\": \"while((s = in.readLine()) != null) { \\n          sb.append(s); \\n          sb.append(\\\"\\\\n\\\"); \\n        } \\n      } finally { \\n        in.close(); \\n      } \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    } \\n    return sb.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"575054879f4402b3cf8b1043b17aa72f\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      PrintWriter out = new PrintWriter( \\n        new File(fileName).getAbsoluteFile()); \\n      try { \\n        out.print(text); \\n      } finally { \\n        out.close(); \\n      } \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"525b32908e9fecdc3328d53da4db6fef\",\n        \"type\": \"source_code\",\n        \"text\": \"super(Arrays.asList(read(fileName).split(splitter))); \\n    // Regular expression split() often leaves an empty \\n    // String at the first position: \\n    if(get(0).equals(\\\"\\\")) remove(0);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f94a81936f466f38d95ecf942b5317f5\",\n        \"type\": \"source_code\",\n        \"text\": \"this(fileName, \\\"\\\\n\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61dbf08a72b9f63718c0830498e226b0\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      PrintWriter out = new PrintWriter( \\n        new File(fileName).getAbsoluteFile()); \\n      try { \\n        for(String item : this) \\n          out.println(item); \\n      } finally { \\n        out.close(); \\n      } \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24b7165ee2274f12a81277fa3a61c891\",\n        \"type\": \"source_code\",\n        \"text\": \"String file = read(\\\"TextFile.java\\\"); \\n    write(\\\"test.txt\\\", file); \\n    TextFile text = new TextFile(\\\"test.txt\\\"); \\n    text.write(\\\"test2.txt\\\"); \\n    // Break into unique sorted list of words: \\n    TreeSet<String> words = new TreeSet<String>( \\n      new TextFile(\\\"TextFile.java\\\", \\\"\\\\\\\\W+\\\")); \\n    // Display the capitalized words: \\n    System.out.println(words.headSet(\\\"a\\\"));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fffa45d85c4d8b61d2078b8e5ddc711\",\n        \"type\": \"source_code\",\n        \"text\": \"BufferedInputStream bf = new BufferedInputStream( \\n      new FileInputStream(bFile)); \\n    try { \\n      byte[] data = new byte[bf.available()];\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"acb9774a0ad94a59d56f0a8583593da9\",\n        \"type\": \"source_code\",\n        \"text\": \"bf.read(data); \\n      return data; \\n    } finally { \\n      bf.close(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a3c00e18a9adcc1df3a67a96e4fb968a\",\n        \"type\": \"source_code\",\n        \"text\": \"return read(new File(bFile).getAbsoluteFile());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74eed35681086fac8208d00b76159e67\",\n        \"type\": \"source_code\",\n        \"text\": \"BufferedReader stdin = new BufferedReader( \\n      new InputStreamReader(System.in)); \\n    String s;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a96546b7c0ebe2adc036b946e7ed629e\",\n        \"type\": \"source_code\",\n        \"text\": \"while((s = stdin.readLine()) != null && s.length()!= 0) \\n      System.out.println(s); \\n    // An empty line or Ctrl-Z terminates the program\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5ebf055354ba50e344364bd1373533a\",\n        \"type\": \"source_code\",\n        \"text\": \"PrintWriter out = new PrintWriter(System.out, true); \\n    out.println(\\\"Hello, world\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0de58a6563400a58035883f45d3c4434\",\n        \"type\": \"source_code\",\n        \"text\": \"PrintStream console = System.out; \\n    BufferedInputStream in = new BufferedInputStream( \\n      new FileInputStream(\\\"Redirecting.java\\\")); \\n    PrintStream out = new PrintStream( \\n      new BufferedOutputStream( \\n        new FileOutputStream(\\\"test.out\\\"))); \\n    System.setIn(in); \\n    System.setOut(out); \\n    System.setErr(out); \\n    BufferedReader br = new BufferedReader( \\n      new InputStreamReader(System.in)); \\n    String s; \\n    while((s = br.readLine()) != null) \\n      System.out.println(s); \\n    out.close(); // Remember this! \\n    System.setOut(console);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8d54397177e5941e53013d803eb225f\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean err = false; \\n    try { \\n      Process process = \\n        new ProcessBuilder(command.split(\\\" \\\")).start(); \\n      BufferedReader results = new BufferedReader( \\n        new InputStreamReader(process.getInputStream())); \\n      String s; \\n      while((s = results.readLine())!= null) \\n        System.out.println(s); \\n      BufferedReader errors = new BufferedReader( \\n        new InputStreamReader(process.getErrorStream())); \\n      // Report errors and return nonzero value \\n      // to calling process if there are problems: \\n      while((s = errors.readLine())!= null) { \\n        System.err.println(s); \\n        err = true; \\n      } \\n    } catch(Exception e) { \\n      // Compensate for Windows 2000, which throws an \\n      // exception for the default command line: \\n      if(!command.startsWith(\\\"CMD /C\\\")) \\n        command(\\\"CMD /C \\\" + command); \\n      else \\n        throw new RuntimeException(e); \\n    } \\n    if(err) \\n      throw new OSExecuteException(\\\"Errors executing \\\" + \\n        command);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"319c43c48317c2e43c55fd04a56c1d3c\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command(\\\"javap OSExecuteDemo\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d0075c5ed91dbfdd491394425cf33b17\",\n        \"type\": \"source_code\",\n        \"text\": \"public OSExecuteDemo(); \\n    public static void main(java.lang.String[]);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc50d99721f52ac94fac8e7fae933fa7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Write a file: \\n    FileChannel fc = \\n      new FileOutputStream(\\\"data.txt\\\").getChannel(); \\n    fc.write(ByteBuffer.wrap(\\\"Some text \\\".getBytes()));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c446accc8e97ed38a9d8c80698e039f6\",\n        \"type\": \"source_code\",\n        \"text\": \"fc.close(); \\n    // Add to the end of the file: \\n    fc = \\n      new RandomAccessFile(\\\"data.txt\\\", \\\"rw\\\").getChannel(); \\n    fc.position(fc.size()); // Move to the end \\n    fc.write(ByteBuffer.wrap(\\\"Some more\\\".getBytes())); \\n    fc.close(); \\n    // Read the file: \\n    fc = new FileInputStream(\\\"data.txt\\\").getChannel(); \\n    ByteBuffer buff = ByteBuffer.allocate(BSIZE); \\n    fc.read(buff); \\n    buff.flip(); \\n    while(buff.hasRemaining()) \\n      System.out.print((char)buff.get());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8bd8b9cdf84ca719c5532d4f38f97508\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length != 2) { \\n      System.out.println(\\\"arguments: sourcefile destfile\\\"); \\n      System.exit(1); \\n    } \\n    FileChannel \\n      in = new FileInputStream(args[0]).getChannel(), \\n      out = new FileOutputStream(args[1]).getChannel(); \\n    ByteBuffer buffer = ByteBuffer.allocate(BSIZE); \\n    while(in.read(buffer) != -1) { \\n      buffer.flip(); // Prepare for writing \\n      out.write(buffer); \\n      buffer.clear();  // Prepare for reading \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4cff3704e7be4af046b986f54dcfa68f\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length != 2) { \\n      System.out.println(\\\"arguments: sourcefile destfile\\\"); \\n      System.exit(1); \\n    } \\n    FileChannel \\n      in = new FileInputStream(args[0]).getChannel(), \\n      out = new FileOutputStream(args[1]).getChannel(); \\n    in.transferTo(0, in.size(), out); \\n    // Or: \\n    // out.transferFrom(in, 0, in.size());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9f4e3195f358e2ae0768bff418bf4914\",\n        \"type\": \"source_code\",\n        \"text\": \"FileChannel fc = \\n      new FileOutputStream(\\\"data2.txt\\\").getChannel(); \\n    fc.write(ByteBuffer.wrap(\\\"Some text\\\".getBytes())); \\n    fc.close(); \\n    fc = new FileInputStream(\\\"data2.txt\\\").getChannel(); \\n    ByteBuffer buff = ByteBuffer.allocate(BSIZE); \\n    fc.read(buff); \\n    buff.flip(); \\n    // Doesn\\u2019t work: \\n    System.out.println(buff.asCharBuffer()); \\n    // Decode using this system\\u2019s default Charset: \\n    buff.rewind(); \\n    String encoding = System.getProperty(\\\"file.encoding\\\"); \\n    System.out.println(\\\"Decoded using \\\" + encoding + \\\": \\\" \\n      + Charset.forName(encoding).decode(buff)); \\n    // Or, we could encode with something that will print: \\n    fc = new FileOutputStream(\\\"data2.txt\\\").getChannel(); \\n    fc.write(ByteBuffer.wrap( \\n      \\\"Some text\\\".getBytes(\\\"UTF-16BE\\\"))); \\n    fc.close(); \\n    // Now try reading again: \\n    fc = new FileInputStream(\\\"data2.txt\\\").getChannel(); \\n    buff.clear(); \\n    fc.read(buff); \\n    buff.flip(); \\n    System.out.println(buff.asCharBuffer()); \\n    // Use a CharBuffer to write through: \\n    fc = new FileOutputStream(\\\"data2.txt\\\").getChannel(); \\n    buff = ByteBuffer.allocate(24); // More than needed \\n    buff.asCharBuffer().put(\\\"Some text\\\"); \\n    fc.write(buff); \\n    fc.close(); \\n    // Read and display: \\n    fc = new FileInputStream(\\\"data2.txt\\\").getChannel(); \\n    buff.clear(); \\n    fc.read(buff); \\n    buff.flip(); \\n    System.out.println(buff.asCharBuffer());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e405499fe782a33daf9907bbff25250b\",\n        \"type\": \"source_code\",\n        \"text\": \"SortedMap<String,Charset> charSets = \\n      Charset.availableCharsets(); \\n    Iterator<String> it = charSets.keySet().iterator(); \\n    while(it.hasNext()) { \\n      String csName = it.next(); \\n      printnb(csName); \\n      Iterator aliases = \\n        charSets.get(csName).aliases().iterator(); \\n      if(aliases.hasNext()) \\n        printnb(\\\": \\\"); \\n      while(aliases.hasNext()) { \\n        printnb(aliases.next()); \\n        if(aliases.hasNext()) \\n          printnb(\\\", \\\"); \\n      } \\n      print(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"129e99dcdcdaa4cd0c369e094cc353e4\",\n        \"type\": \"source_code\",\n        \"text\": \"ByteBuffer bb = ByteBuffer.allocate(BSIZE); \\n    // Allocation automatically zeroes the ByteBuffer: \\n    int i = 0; \\n    while(i++ < bb.limit()) \\n      if(bb.get() != 0) \\n        print(\\\"nonzero\\\"); \\n    print(\\\"i = \\\" + i); \\n    bb.rewind(); \\n    // Store and read a char array: \\n    bb.asCharBuffer().put(\\\"Howdy!\\\"); \\n    char c; \\n    while((c = bb.getChar()) != 0) \\n      printnb(c + \\\" \\\"); \\n    print(); \\n    bb.rewind(); \\n    // Store and read a short: \\n    bb.asShortBuffer().put((short)471142); \\n    print(bb.getShort()); \\n    bb.rewind(); \\n    // Store and read an int: \\n    bb.asIntBuffer().put(99471142); \\n    print(bb.getInt()); \\n    bb.rewind(); \\n    // Store and read a long: \\n    bb.asLongBuffer().put(99471142); \\n    print(bb.getLong()); \\n    bb.rewind(); \\n    // Store and read a float: \\n    bb.asFloatBuffer().put(99471142); \\n    print(bb.getFloat()); \\n    bb.rewind(); \\n    // Store and read a double: \\n    bb.asDoubleBuffer().put(99471142); \\n    print(bb.getDouble()); \\n    bb.rewind();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe2c210458261a228415a43d9c484771\",\n        \"type\": \"source_code\",\n        \"text\": \"ByteBuffer bb = ByteBuffer.allocate(BSIZE); \\n    IntBuffer ib = bb.asIntBuffer(); \\n    // Store an array of int: \\n    ib.put(new int[]{ 11, 42, 47, 99, 143, 811, 1016 }); \\n    // Absolute location read and write: \\n    System.out.println(ib.get(3)); \\n    ib.put(3, 1811); \\n    // Setting a new limit before rewinding the buffer. \\n    ib.flip(); \\n    while(ib.hasRemaining()) { \\n      int i = ib.get(); \\n      System.out.println(i); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a8ab5134d23292edc0aa372d943220d8\",\n        \"type\": \"source_code\",\n        \"text\": \"ByteBuffer bb = ByteBuffer.wrap( \\n      new byte[]{ 0, 0, 0, 0, 0, 0, 0, \\u2018a\\u2019 }); \\n    bb.rewind(); \\n    printnb(\\\"Byte Buffer \\\"); \\n    while(bb.hasRemaining()) \\n      printnb(bb.position()+ \\\" -> \\\" + bb.get() + \\\", \\\"); \\n    print(); \\n    CharBuffer cb = \\n      ((ByteBuffer)bb.rewind()).asCharBuffer(); \\n    printnb(\\\"Char Buffer \\\"); \\n    while(cb.hasRemaining()) \\n      printnb(cb.position() + \\\" -> \\\" + cb.get() + \\\", \\\"); \\n    print(); \\n    FloatBuffer fb = \\n      ((ByteBuffer)bb.rewind()).asFloatBuffer(); \\n    printnb(\\\"Float Buffer \\\"); \\n    while(fb.hasRemaining()) \\n      printnb(fb.position()+ \\\" -> \\\" + fb.get() + \\\", \\\"); \\n    print(); \\n    IntBuffer ib = \\n      ((ByteBuffer)bb.rewind()).asIntBuffer(); \\n    printnb(\\\"Int Buffer \\\"); \\n    while(ib.hasRemaining()) \\n      printnb(ib.position()+ \\\" -> \\\" + ib.get() + \\\", \\\"); \\n    print(); \\n    LongBuffer lb = \\n      ((ByteBuffer)bb.rewind()).asLongBuffer(); \\n    printnb(\\\"Long Buffer \\\"); \\n    while(lb.hasRemaining()) \\n      printnb(lb.position()+ \\\" -> \\\" + lb.get() + \\\", \\\"); \\n    print(); \\n    ShortBuffer sb = \\n      ((ByteBuffer)bb.rewind()).asShortBuffer(); \\n    printnb(\\\"Short Buffer \\\"); \\n    while(sb.hasRemaining()) \\n      printnb(sb.position()+ \\\" -> \\\" + sb.get() + \\\", \\\"); \\n    print(); \\n    DoubleBuffer db = \\n      ((ByteBuffer)bb.rewind()).asDoubleBuffer(); \\n    printnb(\\\"Double Buffer \\\"); \\n    while(db.hasRemaining()) \\n      printnb(db.position()+ \\\" -> \\\" + db.get() + \\\", \\\");\",\n        \"programming_language\": \"ECL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"501271b36349343782e2b871f672e3c2\",\n        \"type\": \"source_code\",\n        \"text\": \"ByteBuffer bb = ByteBuffer.wrap(new byte[12]); \\n    bb.asCharBuffer().put(\\\"abcdef\\\"); \\n    print(Arrays.toString(bb.array())); \\n    bb.rewind(); \\n    bb.order(ByteOrder.BIG_ENDIAN); \\n    bb.asCharBuffer().put(\\\"abcdef\\\"); \\n    print(Arrays.toString(bb.array())); \\n    bb.rewind(); \\n    bb.order(ByteOrder.LITTLE_ENDIAN); \\n    bb.asCharBuffer().put(\\\"abcdef\\\"); \\n    print(Arrays.toString(bb.array()));\",\n        \"programming_language\": \"Component Pascal\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ba27fd9c2833146ad30ba8270c4e32eb\",\n        \"type\": \"source_code\",\n        \"text\": \"while(buffer.hasRemaining()) { \\n      buffer.mark(); \\n      char c1 = buffer.get(); \\n      char c2 = buffer.get(); \\n      buffer.reset(); \\n      buffer.put(c2).put(c1); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a9481fea623ab0eee316eb549e9425a2\",\n        \"type\": \"source_code\",\n        \"text\": \"char[] data = \\\"UsingBuffers\\\".toCharArray(); \\n    ByteBuffer bb = ByteBuffer.allocate(data.length * 2); \\n    CharBuffer cb = bb.asCharBuffer(); \\n    cb.put(data); \\n    print(cb.rewind()); \\n    symmetricScramble(cb); \\n    print(cb.rewind()); \\n    symmetricScramble(cb); \\n    print(cb.rewind());\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e3d9d79f0d7ce67d0070d19d9d76cbdf\",\n        \"type\": \"source_code\",\n        \"text\": \"MappedByteBuffer out = \\n      new RandomAccessFile(\\\"test.dat\\\", \\\"rw\\\").getChannel() \\n      .map(FileChannel.MapMode.READ_WRITE, 0, length); \\n    for(int i = 0; i < length; i++) \\n      out.put((byte)\\u2019x\\u2019); \\n    print(\\\"Finished writing\\\"); \\n    for(int i = length/2; i < length/2 + 6; i++) \\n      printnb((char)out.get(i));\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34f562b843c5c371c83d63f422abcd91\",\n        \"type\": \"source_code\",\n        \"text\": \"private String name; \\n    public Tester(String name) { this.name = name; } \\n    public void runTest() { \\n      System.out.print(name + \\\": \\\"); \\n      try { \\n        long start = System.nanoTime(); \\n        test(); \\n        double duration = System.nanoTime() - start; \\n        System.out.format(\\\"%.2f\\\\n\\\", duration/1.0e9); \\n      } catch(IOException e) { \\n        throw new RuntimeException(e); \\n      }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1a09b402ca90d958df711b8b733f98c0\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    public abstract void test() throws IOException;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"770f7d38d837ac6e0b810660509ddaca\",\n        \"type\": \"source_code\",\n        \"text\": \"new Tester(\\\"Stream Write\\\") { \\n      public void test() throws IOException { \\n        DataOutputStream dos = new DataOutputStream( \\n          new BufferedOutputStream( \\n            new FileOutputStream(new File(\\\"temp.tmp\\\")))); \\n        for(int i = 0; i < numOfInts; i++) \\n          dos.writeInt(i); \\n        dos.close(); \\n      } \\n    }, \\n    new Tester(\\\"Mapped Write\\\") { \\n      public void test() throws IOException { \\n        FileChannel fc = \\n          new RandomAccessFile(\\\"temp.tmp\\\", \\\"rw\\\") \\n          .getChannel(); \\n        IntBuffer ib = fc.map( \\n          FileChannel.MapMode.READ_WRITE, 0, fc.size()) \\n          .asIntBuffer(); \\n        for(int i = 0; i < numOfInts; i++) \\n          ib.put(i); \\n        fc.close(); \\n      } \\n    }, \\n    new Tester(\\\"Stream Read\\\") { \\n      public void test() throws IOException { \\n        DataInputStream dis = new DataInputStream( \\n          new BufferedInputStream( \\n            new FileInputStream(\\\"temp.tmp\\\"))); \\n        for(int i = 0; i < numOfInts; i++) \\n          dis.readInt(); \\n        dis.close(); \\n      } \\n    }, \\n    new Tester(\\\"Mapped Read\\\") { \\n      public void test() throws IOException { \\n        FileChannel fc = new FileInputStream( \\n          new File(\\\"temp.tmp\\\")).getChannel(); \\n        IntBuffer ib = fc.map( \\n          FileChannel.MapMode.READ_ONLY, 0, fc.size()) \\n          .asIntBuffer(); \\n        while(ib.hasRemaining()) \\n          ib.get(); \\n        fc.close(); \\n      } \\n    }, \\n    new Tester(\\\"Stream Read/Write\\\") { \\n      public void test() throws IOException { \\n        RandomAccessFile raf = new RandomAccessFile( \\n          new File(\\\"temp.tmp\\\"), \\\"rw\\\"); \\n        raf.writeInt(1); \\n        for(int i = 0; i < numOfUbuffInts; i++) { \\n          raf.seek(raf.length() - 4); \\n          raf.writeInt(raf.readInt()); \\n        } \\n        raf.close(); \\n      } \\n    }, \\n    new Tester(\\\"Mapped Read/Write\\\") { \\n      public void test() throws IOException {\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5c24b4db36454adbb4e9d1fa2586561a\",\n        \"type\": \"source_code\",\n        \"text\": \"FileChannel fc = new RandomAccessFile( \\n          new File(\\\"temp.tmp\\\"), \\\"rw\\\").getChannel(); \\n        IntBuffer ib = fc.map( \\n          FileChannel.MapMode.READ_WRITE, 0, fc.size()) \\n          .asIntBuffer(); \\n        ib.put(0); \\n        for(int i = 1; i < numOfUbuffInts; i++) \\n          ib.put(ib.get(i - 1)); \\n        fc.close(); \\n      } \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"561a0bbd51f63edccd68620fe579df25\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Tester test : tests) \\n      test.runTest();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"449275412ab450e8a6d2796baa61859c\",\n        \"type\": \"source_code\",\n        \"text\": \"FileOutputStream fos= new FileOutputStream(\\\"file.txt\\\"); \\n    FileLock fl = fos.getChannel().tryLock(); \\n    if(fl != null) { \\n      System.out.println(\\\"Locked File\\\"); \\n      TimeUnit.MILLISECONDS.sleep(100); \\n      fl.release(); \\n      System.out.println(\\\"Released Lock\\\"); \\n    } \\n    fos.close();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be1106168f97e9afdd39ffb61f63b1d3\",\n        \"type\": \"source_code\",\n        \"text\": \"fc = \\n      new RandomAccessFile(\\\"test.dat\\\", \\\"rw\\\").getChannel(); \\n    MappedByteBuffer out = \\n      fc.map(FileChannel.MapMode.READ_WRITE, 0, LENGTH); \\n    for(int i = 0; i < LENGTH; i++) \\n      out.put((byte)\\u2019x\\u2019); \\n    new LockAndModify(out, 0, 0 + LENGTH/3); \\n    new LockAndModify(out, LENGTH/2, LENGTH/2 + LENGTH/4);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ccbdb29ea3fab780d386b4c1ab99b0a\",\n        \"type\": \"source_code\",\n        \"text\": \"private ByteBuffer buff; \\n    private int start, end; \\n    LockAndModify(ByteBuffer mbb, int start, int end) { \\n      this.start = start; \\n      this.end = end; \\n      mbb.limit(end); \\n      mbb.position(start); \\n      buff = mbb.slice(); \\n      start(); \\n    } \\n    public void run() { \\n      try { \\n        // Exclusive lock with no overlap: \\n        FileLock fl = fc.lock(start, end, false); \\n        System.out.println(\\\"Locked: \\\"+ start +\\\" to \\\"+ end); \\n        // Perform modification: \\n        while(buff.position() < buff.limit() - 1) \\n          buff.put((byte)(buff.get() + 1)); \\n        fl.release(); \\n        System.out.println(\\\"Released: \\\"+start+\\\" to \\\"+ end); \\n      } catch(IOException e) { \\n        throw new RuntimeException(e); \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55d5245fdfd93202056c85367b928794\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length == 0) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6603d796e850d59c0591d36bf7a0f0af\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n        \\\"Usage: \\\\nGZIPcompress file\\\\n\\\" + \\n        \\\"\\\\tUses GZIP compression to compress \\\" + \\n        \\\"the file to test.gz\\\"); \\n      System.exit(1); \\n    } \\n    BufferedReader in = new BufferedReader( \\n      new FileReader(args[0])); \\n    BufferedOutputStream out = new BufferedOutputStream( \\n      new GZIPOutputStream( \\n        new FileOutputStream(\\\"test.gz\\\"))); \\n    System.out.println(\\\"Writing file\\\"); \\n    int c; \\n    while((c = in.read()) != -1) \\n      out.write(c); \\n    in.close(); \\n    out.close(); \\n    System.out.println(\\\"Reading file\\\"); \\n    BufferedReader in2 = new BufferedReader( \\n      new InputStreamReader(new GZIPInputStream( \\n        new FileInputStream(\\\"test.gz\\\")))); \\n    String s; \\n    while((s = in2.readLine()) != null) \\n      System.out.println(s);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"402b5406e99fcc517e11288934834f08\",\n        \"type\": \"source_code\",\n        \"text\": \"FileOutputStream f = new FileOutputStream(\\\"test.zip\\\"); \\n    CheckedOutputStream csum =\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5c97b638fbf126bb4064222b74436d5\",\n        \"type\": \"source_code\",\n        \"text\": \"new CheckedOutputStream(f, new Adler32()); \\n     ZipOutputStream zos = new ZipOutputStream(csum); \\n     BufferedOutputStream out = \\n      new BufferedOutputStream(zos); \\n    zos.setComment(\\\"A test of Java Zipping\\\"); \\n    // No corresponding getComment(), though. \\n    for(String arg : args) { \\n      print(\\\"Writing file \\\" + arg); \\n      BufferedReader in = \\n        new BufferedReader(new FileReader(arg)); \\n      zos.putNextEntry(new ZipEntry(arg)); \\n      int c; \\n      while((c = in.read()) != -1) \\n        out.write(c); \\n      in.close(); \\n      out.flush(); \\n    } \\n    out.close(); \\n    // Checksum valid only after the file has been closed! \\n    print(\\\"Checksum: \\\" + csum.getChecksum().getValue()); \\n    // Now extract the files: \\n    print(\\\"Reading file\\\"); \\n    FileInputStream fi = new FileInputStream(\\\"test.zip\\\"); \\n    CheckedInputStream csumi = \\n      new CheckedInputStream(fi, new Adler32()); \\n    ZipInputStream in2 = new ZipInputStream(csumi); \\n    BufferedInputStream bis = new BufferedInputStream(in2); \\n    ZipEntry ze; \\n    while((ze = in2.getNextEntry()) != null) { \\n      print(\\\"Reading file \\\" + ze); \\n      int x; \\n      while((x = bis.read()) != -1) \\n        System.out.write(x); \\n    } \\n    if(args.length == 1) \\n    print(\\\"Checksum: \\\" + csumi.getChecksum().getValue()); \\n    bis.close(); \\n    // Alternative way to open and read Zip files: \\n    ZipFile zf = new ZipFile(\\\"test.zip\\\"); \\n    Enumeration e = zf.entries(); \\n    while(e.hasMoreElements()) { \\n      ZipEntry ze2 = (ZipEntry)e.nextElement(); \\n      print(\\\"File: \\\" + ze2); \\n      // ... and extract the data as before \\n    } \\n    /* if(args.length == 1) */\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ec8653b0e14e849fecc0b3bdfac47cd6\",\n        \"type\": \"source_code\",\n        \"text\": \"new Data(rand.nextInt(10)), \\n    new Data(rand.nextInt(10)), \\n    new Data(rand.nextInt(10))\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52535fbdd10cbe6f93732b46c8da8620\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Worm constructor: \\\" + i); \\n    c = x; \\n    if(--i > 0) \\n      next = new Worm(i, (char)(x + 1));\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87a6a40c49fea4b28920f31047ac33df\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Default constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"afc6ea7da304b9b0ca7ddba46d6bdace\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(\\\":\\\"); \\n    result.append(c); \\n    result.append(\\\"(\\\"); \\n    for(Data dat : d) \\n      result.append(dat); \\n    result.append(\\\")\\\"); \\n    if(next != null) \\n      result.append(next); \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74e6ced89353408075b9f6815b15e983\",\n        \"type\": \"source_code\",\n        \"text\": \"Worm w = new Worm(6, \\u2018a\\u2019); \\n    print(\\\"w = \\\" + w); \\n    ObjectOutputStream out = new ObjectOutputStream( \\n      new FileOutputStream(\\\"worm.out\\\")); \\n    out.writeObject(\\\"Worm storage\\\\n\\\"); \\n    out.writeObject(w); \\n    out.close(); // Also flushes output \\n    ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(\\\"worm.out\\\")); \\n    String s = (String)in.readObject();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2a5b6ab4898c63e046e1a63d5a592f08\",\n        \"type\": \"source_code\",\n        \"text\": \"Worm w2 = (Worm)in.readObject(); \\n    print(s + \\\"w2 = \\\" + w2); \\n    ByteArrayOutputStream bout = \\n      new ByteArrayOutputStream(); \\n    ObjectOutputStream out2 = new ObjectOutputStream(bout); \\n    out2.writeObject(\\\"Worm storage\\\\n\\\"); \\n    out2.writeObject(w); \\n    out2.flush(); \\n    ObjectInputStream in2 = new ObjectInputStream( \\n      new ByteArrayInputStream(bout.toByteArray())); \\n    s = (String)in2.readObject(); \\n    Worm w3 = (Worm)in2.readObject(); \\n    print(s + \\\"w3 = \\\" + w3);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"622c221e1c11766c41a1d801a65252d7\",\n        \"type\": \"source_code\",\n        \"text\": \"ObjectOutput out = new ObjectOutputStream( \\n      new FileOutputStream(\\\"X.file\\\")); \\n    Alien quellek = new Alien(); \\n    out.writeObject(quellek);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"badacfd2dcdd33c053c7551f6c6f7c4e\",\n        \"type\": \"source_code\",\n        \"text\": \"ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(new File(\\\"..\\\", \\\"X.file\\\"))); \\n    Object mystery = in.readObject(); \\n    System.out.println(mystery.getClass());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a66aafb00c9ed62c038fd719e1b69f44\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip1 Constructor\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"157bd2069048c9f2bd0bccd30cb998eb\",\n        \"type\": \"source_code\",\n        \"text\": \"throws IOException { \\n    print(\\\"Blip1.writeExternal\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb4e24cd049985c1bc42611e3e939bf7\",\n        \"type\": \"source_code\",\n        \"text\": \"throws IOException, ClassNotFoundException { \\n    print(\\\"Blip1.readExternal\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1908bfdba685eafe556e2cb07dc126c3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip2 Constructor\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"596f4babb3f405060d4e1dc01f1aa1f6\",\n        \"type\": \"source_code\",\n        \"text\": \"throws IOException { \\n    print(\\\"Blip2.writeExternal\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2cf0d6e2bb083d1d5b0a6bee60502693\",\n        \"type\": \"source_code\",\n        \"text\": \"throws IOException, ClassNotFoundException { \\n    print(\\\"Blip2.readExternal\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2a8bccce8bd3dc2c4d77ee279f13f5f0\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Constructing objects:\\\"); \\n    Blip1 b1 = new Blip1(); \\n    Blip2 b2 = new Blip2(); \\n    ObjectOutputStream o = new ObjectOutputStream( \\n      new FileOutputStream(\\\"Blips.out\\\")); \\n    print(\\\"Saving objects:\\\"); \\n    o.writeObject(b1);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"407ada06b0a9561b367e096e51b61eb7\",\n        \"type\": \"source_code\",\n        \"text\": \"o.writeObject(b2); \\n    o.close(); \\n    // Now get them back: \\n    ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(\\\"Blips.out\\\")); \\n    print(\\\"Recovering b1:\\\"); \\n    b1 = (Blip1)in.readObject(); \\n    // OOPS! Throws an exception:\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"584679e6fa809b01350eb7d53c2d94d3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip3 Constructor\\\"); \\n    // s, i not initialized\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d7a4557859680f1c4018302addc6e46\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip3(String x, int a)\\\"); \\n    s = x; \\n    i = a; \\n    // s & i initialized only in non-default constructor.\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2695e7d4cb42e7943958dfd11d5c14c8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip3.writeExternal\\\"); \\n    // You must do this: \\n    out.writeObject(s); \\n    out.writeInt(i);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1031d383105f7c32bdf1f42d1786d2d2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip3.readExternal\\\"); \\n    // You must do this: \\n    s = (String)in.readObject(); \\n    i = in.readInt();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e5975571516633ad647b71b2758022a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Constructing objects:\\\"); \\n    Blip3 b3 = new Blip3(\\\"A String \\\", 47); \\n    print(b3); \\n    ObjectOutputStream o = new ObjectOutputStream( \\n      new FileOutputStream(\\\"Blip3.out\\\")); \\n    print(\\\"Saving object:\\\"); \\n    o.writeObject(b3); \\n    o.close(); \\n    // Now get it back: \\n    ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(\\\"Blip3.out\\\")); \\n    print(\\\"Recovering b3:\\\"); \\n    b3 = (Blip3)in.readObject(); \\n    print(b3);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2015506f6075e485359a7759c78698ad\",\n        \"type\": \"source_code\",\n        \"text\": \"username = name; \\n    password = pwd;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6998199818de058f010440e4e1625a1e\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"logon info: \\\\n   username: \\\" + username + \\n      \\\"\\\\n   date: \\\" + date + \\\"\\\\n   password: \\\" + password;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be5b4b4d69c5908b05397f4abef5f4e4\",\n        \"type\": \"source_code\",\n        \"text\": \"Logon a = new Logon(\\\"Hulk\\\", \\\"myLittlePony\\\"); \\n    print(\\\"logon a = \\\" + a); \\n    ObjectOutputStream o = new ObjectOutputStream( \\n      new FileOutputStream(\\\"Logon.out\\\")); \\n    o.writeObject(a); \\n    o.close(); \\n    TimeUnit.SECONDS.sleep(1); // Delay \\n    // Now get them back: \\n    ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(\\\"Logon.out\\\"));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"379658e66510634c7f2ef0fccbad3cc3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Recovering object at \\\" + new Date()); \\n    a = (Logon)in.readObject(); \\n    print(\\\"logon a = \\\" + a);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48c2156beb5b2697ebee2b90d10dee45\",\n        \"type\": \"source_code\",\n        \"text\": \"a = \\\"Not Transient: \\\" + aa; \\n    b = \\\"Transient: \\\" + bb;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60584824caea6a4afd9af335e8eeef00\",\n        \"type\": \"source_code\",\n        \"text\": \"stream.defaultWriteObject(); \\n    stream.writeObject(b);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66d1759771e97f932e329f2133a2fa65\",\n        \"type\": \"source_code\",\n        \"text\": \"stream.defaultReadObject(); \\n    b = (String)stream.readObject();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"80e47d6f2cf22dc8f2cca2a3d6fc4efb\",\n        \"type\": \"source_code\",\n        \"text\": \"SerialCtl sc = new SerialCtl(\\\"Test1\\\", \\\"Test2\\\"); \\n    System.out.println(\\\"Before:\\\\n\\\" + sc); \\n    ByteArrayOutputStream buf= new ByteArrayOutputStream(); \\n    ObjectOutputStream o = new ObjectOutputStream(buf); \\n    o.writeObject(sc); \\n    // Now get it back: \\n    ObjectInputStream in = new ObjectInputStream( \\n      new ByteArrayInputStream(buf.toByteArray())); \\n    SerialCtl sc2 = (SerialCtl)in.readObject(); \\n    System.out.println(\\\"After:\\\\n\\\" + sc2);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aceb3e5d6ebb7e48efe2ce3f0476c90f\",\n        \"type\": \"source_code\",\n        \"text\": \"name = nm; \\n    preferredHouse = h;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ac2541e2965c7abdc79ac8868e09f5cb\",\n        \"type\": \"source_code\",\n        \"text\": \"return name + \\\"[\\\" + super.toString() + \\n      \\\"], \\\" + preferredHouse + \\\"\\\\n\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"adfee62276000f4c78a57a04ba966e7d\",\n        \"type\": \"source_code\",\n        \"text\": \"House house = new House(); \\n    List<Animal> animals = new ArrayList<Animal>(); \\n    animals.add(new Animal(\\\"Bosco the dog\\\", house)); \\n    animals.add(new Animal(\\\"Ralph the hamster\\\", house)); \\n    animals.add(new Animal(\\\"Molly the cat\\\", house)); \\n    print(\\\"animals: \\\" + animals); \\n    ByteArrayOutputStream buf1 = \\n      new ByteArrayOutputStream(); \\n    ObjectOutputStream o1 = new ObjectOutputStream(buf1); \\n    o1.writeObject(animals); \\n    o1.writeObject(animals); // Write a 2nd set \\n    // Write to a different stream: \\n    ByteArrayOutputStream buf2 = \\n      new ByteArrayOutputStream(); \\n    ObjectOutputStream o2 = new ObjectOutputStream(buf2); \\n    o2.writeObject(animals); \\n    // Now get them back: \\n    ObjectInputStream in1 = new ObjectInputStream( \\n      new ByteArrayInputStream(buf1.toByteArray())); \\n    ObjectInputStream in2 = new ObjectInputStream( \\n      new ByteArrayInputStream(buf2.toByteArray())); \\n    List \\n      animals1 = (List)in1.readObject(), \\n      animals2 = (List)in1.readObject(), \\n      animals3 = (List)in2.readObject(); \\n    print(\\\"animals1: \\\" + animals1); \\n    print(\\\"animals2: \\\" + animals2); \\n    print(\\\"animals3: \\\" + animals3);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5db8d342add4150df9dd0937ae231de0\",\n        \"type\": \"source_code\",\n        \"text\": \"xPos = xVal; \\n    yPos = yVal; \\n    dimension = dim;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5824391756364a45cb78a30efaec32ce\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass() + \\n      \\\"color[\\\" + getColor() + \\\"] xPos[\\\" + xPos + \\n      \\\"] yPos[\\\" + yPos + \\\"] dim[\\\" + dimension + \\\"]\\\\n\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"188a7de3e6c650b281a6b827f6c15cf3\",\n        \"type\": \"source_code\",\n        \"text\": \"int xVal = rand.nextInt(100); \\n    int yVal = rand.nextInt(100); \\n    int dim = rand.nextInt(100); \\n    switch(counter++ % 3) { \\n      default: \\n      case 0: return new Circle(xVal, yVal, dim); \\n      case 1: return new Square(xVal, yVal, dim); \\n      case 2: return new Line(xVal, yVal, dim); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4008ba29c5d55d87a05341a09c05258f\",\n        \"type\": \"source_code\",\n        \"text\": \"super(xVal, yVal, dim);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fd7a0e72e2f46cd15391e25ed082925\",\n        \"type\": \"source_code\",\n        \"text\": \"super(xVal, yVal, dim); \\n    color = RED;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4008ba29c5d55d87a05341a09c05258f\",\n        \"type\": \"source_code\",\n        \"text\": \"super(xVal, yVal, dim);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0144ea6a05117e948c205a44698eeb91\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Class<? extends Shape>> shapeTypes = \\n      new ArrayList<Class<? extends Shape>>(); \\n    // Add references to the class objects: \\n    shapeTypes.add(Circle.class); \\n    shapeTypes.add(Square.class); \\n    shapeTypes.add(Line.class); \\n    List<Shape> shapes = new ArrayList<Shape>(); \\n    // Make some shapes:\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa89d9442e1a2d1b30423143a8bb662d\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 10; i++) \\n      shapes.add(Shape.randomFactory()); \\n    // Set all the static colors to GREEN: \\n    for(int i = 0; i < 10; i++) \\n      ((Shape)shapes.get(i)).setColor(Shape.GREEN); \\n    // Save the state vector: \\n    ObjectOutputStream out = new ObjectOutputStream( \\n      new FileOutputStream(\\\"CADState.out\\\")); \\n    out.writeObject(shapeTypes); \\n    Line.serializeStaticState(out); \\n    out.writeObject(shapes); \\n    // Display the shapes: \\n    System.out.println(shapes);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1a7f261d5d0b72ca462d4d60b89fd37b\",\n        \"type\": \"source_code\",\n        \"text\": \"ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(\\\"CADState.out\\\")); \\n    // Read in the same order they were written: \\n    List<Class<? extends Shape>> shapeTypes = \\n      (List<Class<? extends Shape>>)in.readObject(); \\n    Line.deserializeStaticState(in);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"172781a481aa7d1eff85cedd753b2a81\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Shape> shapes = (List<Shape>)in.readObject(); \\n    System.out.println(shapes);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef8f87caeca985420caa5d6157ff29f8\",\n        \"type\": \"source_code\",\n        \"text\": \"this.first = first; \\n    this.last = last;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa68e87d3721cf05eb8d619dbff62071\",\n        \"type\": \"source_code\",\n        \"text\": \"Element person = new Element(\\\"person\\\"); \\n    Element firstName = new Element(\\\"first\\\"); \\n    firstName.appendChild(first); \\n    Element lastName = new Element(\\\"last\\\"); \\n    lastName.appendChild(last); \\n    person.appendChild(firstName); \\n    person.appendChild(lastName); \\n    return person;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcc2d04369aeb359b51e8c747172c212\",\n        \"type\": \"source_code\",\n        \"text\": \"first= person.getFirstChildElement(\\\"first\\\").getValue(); \\n    last = person.getFirstChildElement(\\\"last\\\").getValue();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b804621c995dde495f3e16e3b76312e2\",\n        \"type\": \"source_code\",\n        \"text\": \"Serializer serializer= new Serializer(os,\\\"ISO-8859-1\\\"); \\n    serializer.setIndent(4); \\n    serializer.setMaxLength(60); \\n    serializer.write(doc); \\n    serializer.flush();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"412bff54d9ec70d8ab818f33671ab1f9\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Person> people = Arrays.asList( \\n      new Person(\\\"Dr. Bunsen\\\", \\\"Honeydew\\\"), \\n      new Person(\\\"Gonzo\\\", \\\"The Great\\\"), \\n      new Person(\\\"Phillip J.\\\", \\\"Fry\\\")); \\n    System.out.println(people); \\n    Element root = new Element(\\\"people\\\"); \\n    for(Person p : people) \\n      root.appendChild(p.getXML()); \\n    Document doc = new Document(root); \\n    format(System.out, doc); \\n    format(new BufferedOutputStream(new FileOutputStream( \\n      \\\"People.xml\\\")), doc);\",\n        \"programming_language\": \"World of Warcraft TOC\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"463fcf1c857b47d0f22b75246a0930bd\",\n        \"type\": \"source_code\",\n        \"text\": \"<person>\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"430169ab63e9798b3a86087b1ba4c307\",\n        \"type\": \"source_code\",\n        \"text\": \"<first>Dr. Bunsen</first> \\n        <last>Honeydew</last> \\n    </person> \\n    <person> \\n        <first>Gonzo</first> \\n        <last>The Great</last> \\n    </person> \\n    <person> \\n        <first>Phillip J.</first> \\n        <last>Fry</last> \\n    </person>\",\n        \"programming_language\": \"XML\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4993f51fc538df1d0491b4e1e662f2cb\",\n        \"type\": \"source_code\",\n        \"text\": \"Document doc = new Builder().build(fileName); \\n    Elements elements = \\n      doc.getRootElement().getChildElements(); \\n    for(int i = 0; i < elements.size(); i++) \\n      add(new Person(elements.get(i)));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8fcf903d379ef0f6c0cc56a32ac4dc0\",\n        \"type\": \"source_code\",\n        \"text\": \"People p = new People(\\\"People.xml\\\"); \\n    System.out.println(p);\",\n        \"programming_language\": \"World of Warcraft TOC\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04f9b4ec4c9e91d43062fa3d58586f13\",\n        \"type\": \"source_code\",\n        \"text\": \"Preferences prefs = Preferences \\n      .userNodeForPackage(PreferencesDemo.class); \\n    prefs.put(\\\"Location\\\", \\\"Oz\\\"); \\n    prefs.put(\\\"Footwear\\\", \\\"Ruby Slippers\\\"); \\n    prefs.putInt(\\\"Companions\\\", 4); \\n    prefs.putBoolean(\\\"Are there witches?\\\", true); \\n    int usageCount = prefs.getInt(\\\"UsageCount\\\", 0); \\n    usageCount++; \\n    prefs.putInt(\\\"UsageCount\\\", usageCount); \\n    for(String key : prefs.keys()) \\n      print(key + \\\": \\\"+ prefs.get(key, null)); \\n    // You must always provide a default value: \\n    print(\\\"How many companions does Dorothy have? \\\" + \\n      prefs.getInt(\\\"Companions\\\", 0));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34d9ee91c0a434e69af96fea98f8d520\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Shrubbery s : Shrubbery.values()) { \\n      print(s + \\\" ordinal: \\\" + s.ordinal()); \\n      printnb(s.compareTo(Shrubbery.CRAWLING) + \\\" \\\"); \\n      printnb(s.equals(Shrubbery.CRAWLING) + \\\" \\\"); \\n      print(s == Shrubbery.CRAWLING); \\n      print(s.getDeclaringClass()); \\n      print(s.name()); \\n      print(\\\"----------------------\\\"); \\n    } \\n    // Produce an enum value from a string name: \\n    for(String s : \\\"HANGING CRAWLING GROUND\\\".split(\\\" \\\")) { \\n      Shrubbery shrub = Enum.valueOf(Shrubbery.class, s); \\n      print(shrub); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c46dd6f74bfb12302201fd913b49849a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(new Burrito(NOT)); \\n    System.out.println(new Burrito(MEDIUM)); \\n    System.out.println(new Burrito(HOT));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a751c5f08b94f9ea857d7e75893343ef\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Slippers, crushed by Dorothy\\u2019s house\\\"),\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"36b82a35fa86dd5318aa5ff50045d91e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.description = description;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fed558b87447d5b2fccc4b419d0d4680\",\n        \"type\": \"source_code\",\n        \"text\": \"for(OzWitch witch : OzWitch.values()) \\n      print(witch + \\\": \\\" + witch.getDescription());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8278ad869013c546dcd5e190c2e22c5e\",\n        \"type\": \"source_code\",\n        \"text\": \"String id = name(); \\n    String lower = id.substring(1).toLowerCase(); \\n    return id.charAt(0) + lower;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f97a616ac0226130340d9508c27d0ea\",\n        \"type\": \"source_code\",\n        \"text\": \"for(SpaceShip s : values()) { \\n      System.out.println(s); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"890ae41eac9034d525a1fc677623b292\",\n        \"type\": \"source_code\",\n        \"text\": \"switch(color) { \\n      // Note that you don\\u2019t have to say Signal.RED \\n      // in the case statement: \\n      case RED:    color = Signal.GREEN; \\n                   break; \\n      case GREEN:  color = Signal.YELLOW; \\n                   break; \\n      case YELLOW: color = Signal.RED; \\n                   break; \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c59f7e8cc6606912bfc0075265e8ed8\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"The traffic light is \\\" + color;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a9eb60604f833c2362da2f285a8f0099\",\n        \"type\": \"source_code\",\n        \"text\": \"TrafficLight t = new TrafficLight(); \\n    for(int i = 0; i < 7; i++) { \\n      print(t); \\n      t.change(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"99db0879490b74483ebcc3008d52bd9f\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"----- Analyzing \\\" + enumClass + \\\" -----\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66fceff8a9e7c8edd9076501a3adc440\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Interfaces:\\\"); \\n    for(Type t : enumClass.getGenericInterfaces()) \\n      print(t); \\n    print(\\\"Base: \\\" + enumClass.getSuperclass()); \\n    print(\\\"Methods: \\\"); \\n    Set<String> methods = new TreeSet<String>(); \\n    for(Method m : enumClass.getMethods()) \\n      methods.add(m.getName()); \\n    print(methods); \\n    return methods;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa7db23789a13ab3d8ef267a9308a784\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> exploreMethods = analyze(Explore.class); \\n    Set<String> enumMethods = analyze(Enum.class); \\n    print(\\\"Explore.containsAll(Enum)? \\\" + \\n      exploreMethods.containsAll(enumMethods)); \\n    printnb(\\\"Explore.removeAll(Enum): \\\"); \\n    exploreMethods.removeAll(enumMethods); \\n    print(exploreMethods); \\n    // Decompile the code for the enum: \\n    OSExecute.command(\\\"javap Explore\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68f88f1f97fb8ab0081ed3886c387e9a\",\n        \"type\": \"source_code\",\n        \"text\": \"public static final Explore HERE; \\n    public static final Explore THERE; \\n    public static final Explore[] values(); \\n    public static Explore valueOf(java.lang.String); \\n    static {};\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb3db90aca0032cc0e289b27ce0b2455\",\n        \"type\": \"source_code\",\n        \"text\": \"Search[] vals = Search.values(); \\n    Enum e = Search.HITHER; // Upcast \\n    // e.values(); // No values() in Enum \\n    for(Enum en : e.getClass().getEnumConstants()) \\n      System.out.println(en);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"409a12463275e0b3bfcd0ae0f8146c66\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<Integer> intClass = Integer.class; \\n    try { \\n      for(Object en : intClass.getEnumConstants()) \\n        System.out.println(en); \\n    } catch(Exception e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"920643eec066de3cff40ec5d59152a42\",\n        \"type\": \"source_code\",\n        \"text\": \"return values()[rand.nextInt(values().length)];\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bab1eb6dec625d6d1b109de9628e908b\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(rg.next() + \\\", \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"788cb8535e1dcd9b0f895b3b73f636ed\",\n        \"type\": \"source_code\",\n        \"text\": \"// Choose any instance: \\n    CartoonCharacter cc = CartoonCharacter.BOB; \\n    for(int i = 0; i < 10; i++) \\n      printNext(cc);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b55d8a8a5fabf3cd0f27e92efee397ff\",\n        \"type\": \"source_code\",\n        \"text\": \"return random(ec.getEnumConstants());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"46e5f42c560d33305177702b474f7429\",\n        \"type\": \"source_code\",\n        \"text\": \"return values[rand.nextInt(values.length)];\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cdd4668d64fa3adaf34c45e23259e4cf\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 20; i++) \\n      System.out.print(Enums.random(Activity.class) + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ae2a7af4058f0e623c85211fa01e877\",\n        \"type\": \"source_code\",\n        \"text\": \"SALAD, SOUP, SPRING_ROLLS;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c8f489cbefdb3c8702c300517e983a9\",\n        \"type\": \"source_code\",\n        \"text\": \"LASAGNE, BURRITO, PAD_THAI, \\n    LENTILS, HUMMOUS, VINDALOO;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3cdad0233ff597aa1122fda7da5386ec\",\n        \"type\": \"source_code\",\n        \"text\": \"TIRAMISU, GELATO, BLACK_FOREST_CAKE, \\n    FRUIT, CREME_CARAMEL;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b0c0f53db6d19c0e92c80318ef377e3\",\n        \"type\": \"source_code\",\n        \"text\": \"BLACK_COFFEE, DECAF_COFFEE, ESPRESSO, \\n    LATTE, CAPPUCCINO, TEA, HERB_TEA;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8894291a341de98c14adf340e70a49ca\",\n        \"type\": \"source_code\",\n        \"text\": \"Food food = Appetizer.SALAD; \\n    food = MainCourse.LASAGNE; \\n    food = Dessert.GELATO; \\n    food = Coffee.CAPPUCCINO;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f24e63465f6d0b5b2ebe93220ea6d71\",\n        \"type\": \"source_code\",\n        \"text\": \"values = kind.getEnumConstants();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ce76e3a4c678ea383878e5cbfab3aa3\",\n        \"type\": \"source_code\",\n        \"text\": \"return Enums.random(values);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"444679e10c2e13b02e19a5e4935d0a04\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) { \\n      for(Course course : Course.values()) { \\n        Food food = course.randomSelection(); \\n        System.out.println(food); \\n      } \\n      System.out.println(\\\"---\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f24e63465f6d0b5b2ebe93220ea6d71\",\n        \"type\": \"source_code\",\n        \"text\": \"values = kind.getEnumConstants();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d9eb615c8fd4fa2b90eefcb0b87bf33\",\n        \"type\": \"source_code\",\n        \"text\": \"enum Stock implements Security { SHORT, LONG, MARGIN } \\n    enum Bond implements Security { MUNICIPAL, JUNK }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ce76e3a4c678ea383878e5cbfab3aa3\",\n        \"type\": \"source_code\",\n        \"text\": \"return Enums.random(values);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"851b15bd09f9741cc428cdd62ec8c417\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 10; i++) { \\n      SecurityCategory category = \\n        Enums.random(SecurityCategory.class); \\n      System.out.println(category + \\