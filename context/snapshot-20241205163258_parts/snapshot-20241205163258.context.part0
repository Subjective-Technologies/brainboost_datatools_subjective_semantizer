{
    "project_name": "brainboost_datatools_subjective_semantizer",
    "programming_language": "python",
    "project_tree_structure": {
        "directory_name": "brainboost_datatools_subjective_semantizer",
        "children": [
            {
                "file_name": "pdf_to_knowledge_hooks_llama.py"
            },
            {
                "file_name": "find_language.py"
            },
            {
                "file_name": "tools_process_pdfs.py"
            },
            {
                "file_name": "code_snippets.json"
            },
            {
                "file_name": "pdf_to_knowledgehooks.py"
            },
            {
                "file_name": "README.md"
            },
            {
                "file_name": "pdf_to_dependency_graph.py"
            },
            {
                "file_name": "convert_llama_weights.py"
            },
            {
                "file_name": "tools_context.py"
            },
            {
                "file_name": "tools_gpu.py"
            },
            {
                "file_name": "download_tutorial_html.py"
            },
            {
                "file_name": "html_to_text.py"
            },
            {
                "file_name": ".gitignore"
            },
            {
                "file_name": "initialize_environment.sh"
            },
            {
                "directory_name": "context",
                "children": []
            },
            {
                "directory_name": "com_worktwins_test",
                "children": [
                    {
                        "file_name": "test_languages.py"
                    },
                    {
                        "file_name": "test_model_use.py"
                    },
                    {
                        "file_name": "test_pdf_to_text.py"
                    },
                    {
                        "directory_name": ".pytest_cache",
                        "children": [
                            {
                                "file_name": "README.md"
                            },
                            {
                                "file_name": ".gitignore"
                            },
                            {
                                "directory_name": "v",
                                "children": [
                                    {
                                        "directory_name": "cache",
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "directory_name": "com_worktwins_languages",
                "children": [
                    {
                        "file_name": "Language.py"
                    },
                    {
                        "file_name": "languages_improved.json"
                    }
                ]
            },
            {
                "directory_name": ".git",
                "children": [
                    {
                        "directory_name": "logs",
                        "children": [
                            {
                                "directory_name": "refs",
                                "children": [
                                    {
                                        "directory_name": "remotes",
                                        "children": [
                                            {
                                                "directory_name": "origin",
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "directory_name": "heads",
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "directory_name": "hooks",
                        "children": []
                    },
                    {
                        "directory_name": "objects",
                        "children": [
                            {
                                "directory_name": "21",
                                "children": []
                            },
                            {
                                "directory_name": "be",
                                "children": []
                            },
                            {
                                "directory_name": "2e",
                                "children": []
                            },
                            {
                                "directory_name": "87",
                                "children": []
                            },
                            {
                                "directory_name": "ac",
                                "children": []
                            },
                            {
                                "directory_name": "15",
                                "children": []
                            },
                            {
                                "directory_name": "3b",
                                "children": []
                            },
                            {
                                "directory_name": "93",
                                "children": []
                            },
                            {
                                "directory_name": "fe",
                                "children": []
                            },
                            {
                                "directory_name": "a9",
                                "children": []
                            },
                            {
                                "directory_name": "31",
                                "children": []
                            },
                            {
                                "directory_name": "12",
                                "children": []
                            },
                            {
                                "directory_name": "fc",
                                "children": []
                            },
                            {
                                "directory_name": "9b",
                                "children": []
                            },
                            {
                                "directory_name": "48",
                                "children": []
                            },
                            {
                                "directory_name": "3c",
                                "children": []
                            },
                            {
                                "directory_name": "5e",
                                "children": []
                            },
                            {
                                "directory_name": "3e",
                                "children": []
                            },
                            {
                                "directory_name": "91",
                                "children": []
                            },
                            {
                                "directory_name": "16",
                                "children": []
                            },
                            {
                                "directory_name": "13",
                                "children": []
                            },
                            {
                                "directory_name": "b5",
                                "children": []
                            },
                            {
                                "directory_name": "b8",
                                "children": []
                            },
                            {
                                "directory_name": "cd",
                                "children": []
                            },
                            {
                                "directory_name": "a0",
                                "children": []
                            },
                            {
                                "directory_name": "fb",
                                "children": []
                            },
                            {
                                "directory_name": "9f",
                                "children": []
                            },
                            {
                                "directory_name": "d9",
                                "children": []
                            },
                            {
                                "directory_name": "0c",
                                "children": []
                            },
                            {
                                "directory_name": "0b",
                                "children": []
                            },
                            {
                                "directory_name": "41",
                                "children": []
                            },
                            {
                                "directory_name": "b1",
                                "children": []
                            },
                            {
                                "directory_name": "64",
                                "children": []
                            },
                            {
                                "directory_name": "f8",
                                "children": []
                            },
                            {
                                "directory_name": "7d",
                                "children": []
                            },
                            {
                                "directory_name": "d6",
                                "children": []
                            },
                            {
                                "directory_name": "72",
                                "children": []
                            },
                            {
                                "directory_name": "08",
                                "children": []
                            },
                            {
                                "directory_name": "73",
                                "children": []
                            },
                            {
                                "directory_name": "e4",
                                "children": []
                            },
                            {
                                "directory_name": "c9",
                                "children": []
                            },
                            {
                                "directory_name": "0f",
                                "children": []
                            },
                            {
                                "directory_name": "0a",
                                "children": []
                            },
                            {
                                "directory_name": "85",
                                "children": []
                            },
                            {
                                "directory_name": "68",
                                "children": []
                            },
                            {
                                "directory_name": "pack",
                                "children": []
                            },
                            {
                                "directory_name": "e9",
                                "children": []
                            },
                            {
                                "directory_name": "42",
                                "children": []
                            },
                            {
                                "directory_name": "30",
                                "children": []
                            },
                            {
                                "directory_name": "d0",
                                "children": []
                            },
                            {
                                "directory_name": "94",
                                "children": []
                            },
                            {
                                "directory_name": "49",
                                "children": []
                            },
                            {
                                "directory_name": "9c",
                                "children": []
                            },
                            {
                                "directory_name": "44",
                                "children": []
                            },
                            {
                                "directory_name": "c4",
                                "children": []
                            },
                            {
                                "directory_name": "5c",
                                "children": []
                            },
                            {
                                "directory_name": "4b",
                                "children": []
                            },
                            {
                                "directory_name": "bc",
                                "children": []
                            },
                            {
                                "directory_name": "e6",
                                "children": []
                            },
                            {
                                "directory_name": "f2",
                                "children": []
                            },
                            {
                                "directory_name": "a6",
                                "children": []
                            },
                            {
                                "directory_name": "6d",
                                "children": []
                            },
                            {
                                "directory_name": "info",
                                "children": []
                            }
                        ]
                    },
                    {
                        "directory_name": "refs",
                        "children": [
                            {
                                "directory_name": "remotes",
                                "children": [
                                    {
                                        "directory_name": "origin",
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "directory_name": "heads",
                                "children": []
                            },
                            {
                                "directory_name": "tags",
                                "children": []
                            }
                        ]
                    },
                    {
                        "directory_name": "branches",
                        "children": []
                    },
                    {
                        "directory_name": "info",
                        "children": []
                    }
                ]
            },
            {
                "directory_name": ".pytest_cache",
                "children": [
                    {
                        "file_name": "README.md"
                    },
                    {
                        "file_name": ".gitignore"
                    },
                    {
                        "directory_name": "v",
                        "children": [
                            {
                                "directory_name": "cache",
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "directory_name": "com_worktwins_data_source",
                "children": [
                    {
                        "file_name": "PDFBook.py"
                    },
                    {
                        "file_name": "HTMLPage.py"
                    }
                ]
            },
            {
                "directory_name": ".vscode",
                "children": [
                    {
                        "file_name": "settings.json"
                    }
                ]
            },
            {
                "directory_name": "com_worktwins_data",
                "children": [
                    {
                        "file_name": "languages.json"
                    },
                    {
                        "file_name": "yml_to_json.py"
                    },
                    {
                        "file_name": "languages.yml"
                    },
                    {
                        "directory_name": "books_html",
                        "children": []
                    }
                ]
            },
            {
                "directory_name": "com_worktwins_pipe",
                "children": [
                    {
                        "file_name": "SentenceFromParagraphPipe.py"
                    },
                    {
                        "file_name": "SourceCodeExtractorPipe.py"
                    },
                    {
                        "file_name": "WordFrequenciesPipe.py"
                    },
                    {
                        "file_name": "SemanticTreePipe.py"
                    },
                    {
                        "file_name": "SemanticNormalizationPipe.py"
                    },
                    {
                        "file_name": "Pipe.py"
                    },
                    {
                        "file_name": "ParagraphsPipe.py"
                    }
                ]
            }
        ]
    },
    "project_sources": [
        {
            "file": {
                "File": "pdf_to_knowledge_hooks_llama.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/pdf_to_knowledge_hooks_llama.py",
                "Relative Path": "pdf_to_knowledge_hooks_llama.py",
                "Size": 5397,
                "Last Modified": "2024-11-25 15:40:35",
                "Lines": 145,
                "Source_Code": "import fitz  # PyMuPDF\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\nimport json\nimport os\n\n# Paths\nPDF_PATH = \"com_worktwins_data/books_pdf/Scott Chacon - Pro Git.pdf\"\nEXTRACTED_TEXT_PATH = \"git1.txt\"\nKNOWLEDGE_HOOKS_OUTPUT_PATH = \"knowledgehooks.json\"\nRAW_OUTPUT_PATH = \"raw_outputs.json\"\nLLAMA_MODEL_PATH = \"/home/golden/.llama/checkpoints/Llama3.2-3B-Instruct-HF\"\nTEMP_PROGRESS_FILE = \"progress.json\"  # Temporary file to save progress\nCHUNK_SIZE = 1000  # Characters per chunk to feed into the model\n\n\ndef extract_text_from_pdf(pdf_path, output_path):\n    \"\"\"\n    Extracts text from a PDF and saves it to a text file.\n    \"\"\"\n    with fitz.open(pdf_path) as pdf:\n        text_content = []\n        for page_num in range(pdf.page_count):\n            page = pdf[page_num]\n            text = page.get_text(\"text\")\n            text_content.append(text)\n            print(f\"Extracted text from page {page_num + 1}/{pdf.page_count}\")\n\n    with open(output_path, \"w\", encoding=\"utf-8\") as output_file:\n        output_file.write(\"\\n\\n\".join(text_content))\n\n    print(f\"Text extracted and saved to {output_path}\")\n    return \"\\n\\n\".join(text_content)\n\n\ndef generate_knowledge_hooks(\n    text, model_path, output_path, raw_output_path, temp_progress_file\n):\n    \"\"\"\n    Generate knowledge hooks from the provided text using a language model.\n    \"\"\"\n    # Load tokenizer and model\n    tokenizer = AutoTokenizer.from_pretrained(model_path)\n    model = AutoModelForCausalLM.from_pretrained(model_path)\n\n    # Split the text into manageable chunks\n    def split_text_into_chunks(text, max_chunk_size=512):\n        \"\"\"\n        Split text into chunks of manageable size for the model.\n        \"\"\"\n        words = text.split()\n        chunks = []\n        current_chunk = []\n        current_length = 0\n\n        for word in words:\n            word_length = len(word) + 1  # Account for space\n            if current_length + word_length <= max_chunk_size:\n                current_chunk.append(word)\n                current_length += word_length\n            else:\n                chunks.append(\" \".join(current_chunk))\n                current_chunk = [word]\n                current_length = word_length\n\n        if current_chunk:\n            chunks.append(\" \".join(current_chunk))\n        return chunks\n\n    chunks = split_text_into_chunks(text)\n    knowledge_hooks = []\n    raw_outputs = []\n\n    # Resume progress if a temporary file exists\n    if os.path.exists(temp_progress_file):\n        with open(temp_progress_file, \"r\") as f:\n            progress_data = json.load(f)\n            start_chunk = progress_data.get(\"last_processed_chunk\", 0)\n            print(f\"Resuming from chunk {start_chunk + 1}/{len(chunks)}...\")\n    else:\n        start_chunk = 0\n        print(\"No previous progress found. Starting fresh.\")\n\n    # Process each chunk\n    for i, chunk in enumerate(chunks[start_chunk:], start=start_chunk):\n        print(f\"Processing chunk {i + 1}/{len(chunks)}...\")\n        prompt = (\n            \"Generate a JSON array of knowledge hooks from the following text. Each knowledge hook should include:\\n\"\n            \"1. 'description': A concise summary of the main idea.\\n\"\n            \"2. 'keywords': Relevant keywords.\\n\"\n            \"Format the output as a JSON array.\\n\\n\"\n            f\"Text:\\n{chunk}\"\n        )\n\n        inputs = tokenizer(prompt, return_tensors=\"pt\", truncation=True)\n        outputs = model.generate(**inputs, max_length=512, temperature=0.7, do_sample=True)\n\n        generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)\n        raw_outputs.append(generated_text)\n\n        try:\n            hooks = json.loads(generated_text)\n            if isinstance(hooks, list):\n                knowledge_hooks.extend(hooks)\n            else:\n                print(f\"Chunk {i + 1} did not generate a valid JSON array. Skipping...\")\n        except json.JSONDecodeError:\n            print(f\"Chunk {i + 1} generated invalid JSON. Skipping...\")\n\n        # Save progress to the temporary file\n        with open(temp_progress_file, \"w\") as f:\n            json.dump({\"last_processed_chunk\": i}, f)\n\n    # Save final outputs and remove the temporary progress file\n    with open(output_path, \"w\") as f:\n        json.dump(knowledge_hooks, f, indent=4)\n\n    with open(raw_output_path, \"w\") as f:\n        json.dump(raw_outputs, f, indent=4)\n\n    print(f\"Knowledge hooks saved to {output_path}\")\n    print(f\"Raw model outputs saved to {raw_output_path}\")\n\n    if os.path.exists(temp_progress_file):\n        os.remove(temp_progress_file)  # Clean up after completion\n        print(f\"Temporary progress file {temp_progress_file} removed.\")\n\n\nif __name__ == \"__main__\":\n    # Step 1: Extract text or load existing text file\n    if not os.path.exists(EXTRACTED_TEXT_PATH):\n        print(f\"File {EXTRACTED_TEXT_PATH} not found. Extracting text from the PDF...\")\n        extracted_text = extract_text_from_pdf(PDF_PATH, EXTRACTED_TEXT_PATH)\n    else:\n        print(f\"Found existing {EXTRACTED_TEXT_PATH}. Skipping text extraction.\")\n        with open(EXTRACTED_TEXT_PATH, \"r\", encoding=\"utf-8\") as f:\n            extracted_text = f.read()\n\n    # Step 2: Generate knowledge hooks from the extracted text\n    generate_knowledge_hooks(\n        extracted_text,\n        LLAMA_MODEL_PATH,\n        KNOWLEDGE_HOOKS_OUTPUT_PATH,\n        RAW_OUTPUT_PATH,\n        TEMP_PROGRESS_FILE,\n    )\n"
            }
        },
        {
            "file": {
                "File": "find_language.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/find_language.py",
                "Relative Path": "find_language.py",
                "Size": 1077,
                "Last Modified": "2024-11-04 14:50:06",
                "Lines": 30,
                "Source_Code": "from com_worktwins_languages.Language import Language\n\n\n# Usage example:\nif __name__ == \"__main__\":\n    language_file = 'com_worktwins_data/languages.yml'  # Path to your YAML file\n    lang = Language(language_file)\n\n    # Find language by name\n    language_name = 'C++'\n    attributes = lang.get_language_attributes(language_name)\n    if attributes:\n        print(f\"Attributes for {language_name}:\")\n        for key, value in attributes.items():\n            print(f\"{key}: {value}\")\n\n    # Find languages by file extension\n    extension = '.py'\n    languages_by_extension = lang.find_by_extension(extension)\n    print(f\"Languages with extension '{extension}': {languages_by_extension}\")\n\n    # Find languages by alias\n    alias = 'python3'\n    languages_by_alias = lang.find_by_alias(alias)\n    print(f\"Languages with alias '{alias}': {languages_by_alias}\")\n\n    # Find languages by interpreter\n    interpreter = 'python3'\n    languages_by_interpreter = lang.find_by_interpreter(interpreter)\n    print(f\"Languages with interpreter '{interpreter}': {languages_by_interpreter}\")"
            }
        },
        {
            "file": {
                "File": "tools_process_pdfs.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/tools_process_pdfs.py",
                "Relative Path": "tools_process_pdfs.py",
                "Size": 9123,
                "Last Modified": "2024-11-25 16:29:26",
                "Lines": 224,
                "Source_Code": "import os\nimport pandas as pd\nfrom collections import defaultdict\nfrom hashlib import sha256\nfrom wordfreq import word_frequency\nfrom alive_progress import alive_bar\nfrom com_worktwins_data_source.PDFBook import PDFBook\nimport spacy\nimport unicodedata\nimport json\n\n# Constants\nBOOKS_DIR = \"com_worktwins_data/books_pdf\"  # Directory containing the PDFs\nMIN_BOOK_FREQUENCY = 10  # Minimum frequency in the book for inclusion\nENGLISH_TOP_PERCENTILE = 0.9  # Top 10% of English frequency\nBOOK_TOP_PERCENTILE = 0.9  # Top 10% of book frequency\n\n# Load spaCy model\nnlp = spacy.load(\"en_core_web_sm\")\n\n\ndef save_to_txt(data, output_path):\n    \"\"\"\n    Save raw text data to a .txt file.\n    \"\"\"\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(data)\n    print(f\"Saved TXT to {output_path}\")\n\n\ndef save_to_json(data, output_path):\n    \"\"\"\n    Save data to a JSON file.\n    \"\"\"\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f, indent=4)\n    print(f\"Saved JSON to {output_path}\")\n\n\ndef generate_content_hash(sentence, book_freq_df, english_freq_df):\n    \"\"\"\n    Generate a hash based on sorted words by their frequency in the book and English language.\n    \"\"\"\n    words = [word.lower() for word in sentence.split() if word.isalnum()]\n    frequencies = [(word, book_freq_df.get(word, float('inf')), english_freq_df.get(word, float('inf')))\n                   for word in words]\n    sorted_words = sorted(frequencies, key=lambda x: (x[1], x[2]))\n    sorted_word_list = [word for word, _, _ in sorted_words]\n    joined_words = \" \".join(sorted_word_list)\n    return sha256(joined_words.encode()).hexdigest()[:8]\n\n\ndef clean_text(text):\n    \"\"\"\n    Clean the text by normalizing Unicode characters and removing unwanted symbols.\n    \"\"\"\n    text = unicodedata.normalize(\"NFKC\", text)\n    words = text.split()\n    words = [word for word in words if word.isalnum() and not word.isdigit()]\n    return \" \".join(words)\n\n\ndef extract_keywords(sentence, book_freq_df, english_freq_df):\n    \"\"\"\n    Extract the most meaningful keywords for a sentence.\n    \"\"\"\n    words = [word.lower() for word in sentence.split() if word.isalnum() and len(word) >= 3]\n    word_data = [\n        {\n            \"word\": word,\n            \"book_frequency\": book_freq_df.get(word, 0),\n            \"english_frequency\": english_freq_df.get(word, float(\"inf\")),\n        }\n        for word in words\n    ]\n    sorted_words = sorted(word_data, key=lambda x: (-x[\"book_frequency\"], x[\"english_frequency\"]))\n    seen_words = set()\n    top_keywords = []\n    for item in sorted_words:\n        if item[\"word\"] not in seen_words:\n            top_keywords.append(item[\"word\"])\n            seen_words.add(item[\"word\"])\n        if len(top_keywords) == 10:\n            break\n    return top_keywords\n\n\ndef generate_frequencies(book_text):\n    \"\"\"\n    Generate word frequencies and related data from the book text.\n    \"\"\"\n    paragraphs = [para.strip() for para in book_text.split(\"\\n\\n\") if para.strip()]\n    paragraph_ids = [sha256(para.encode()).hexdigest()[:8] for para in paragraphs]\n    paragraphs_df = pd.DataFrame({\"id\": paragraph_ids, \"text\": paragraphs})\n\n    word_counts = defaultdict(int)\n    word_paragraph_map = defaultdict(set)\n\n    with alive_bar(len(paragraphs), title=\"Processing paragraphs\") as bar:\n        for pid, para in zip(paragraph_ids, paragraphs):\n            words = [word.lower() for word in para.split() if word.isalnum()]\n            for word in words:\n                word_counts[word] += 1\n                word_paragraph_map[word].add(pid)\n            bar()\n\n    book_freq_df = pd.DataFrame(\n        [(word, count, list(word_paragraph_map[word])) for word, count in word_counts.items()],\n        columns=[\"word\", \"book_frequency\", \"paragraphs\"],\n    )\n    book_freq_df[\"english_frequency\"] = book_freq_df[\"word\"].apply(lambda word: word_frequency(word, \"en\"))\n\n    english_top_threshold = book_freq_df[\"english_frequency\"].quantile(ENGLISH_TOP_PERCENTILE)\n    book_top_threshold = book_freq_df[\"book_frequency\"].quantile(BOOK_TOP_PERCENTILE)\n\n    excluded_connectors = book_freq_df[\n        (book_freq_df[\"english_frequency\"] >= english_top_threshold) &\n        (book_freq_df[\"book_frequency\"] >= book_top_threshold)\n    ]\n    excluded_non_english = book_freq_df[\n        (book_freq_df[\"english_frequency\"] == 0) & (book_freq_df[\"book_frequency\"] < MIN_BOOK_FREQUENCY)\n    ]\n    excluded_words_df = pd.concat([excluded_connectors, excluded_non_english]).drop_duplicates(subset=[\"word\"])\n    book_freq_df = book_freq_df[~book_freq_df[\"word\"].isin(excluded_words_df[\"word\"])]\n    book_freq_df = book_freq_df.sort_values(by=\"book_frequency\", ascending=False)\n    english_freq_df = book_freq_df[[\"word\", \"english_frequency\"]].sort_values(by=\"english_frequency\", ascending=False)\n\n    return paragraphs_df, book_freq_df, excluded_words_df, english_freq_df\n\n\ndef process_paragraphs(paragraphs_df, book_freq_df, english_freq_df):\n    \"\"\"\n    Process paragraphs and split them into sentences, generating content-based hashes and paragraph-level keywords.\n    \"\"\"\n    book_freq_dict = book_freq_df.set_index(\"word\")[\"book_frequency\"].to_dict()\n    english_freq_dict = english_freq_df.set_index(\"word\")[\"english_frequency\"].to_dict()\n\n    enriched_paragraphs = []\n    with alive_bar(len(paragraphs_df), title=\"Processing sentences\") as bar:\n        for _, paragraph in paragraphs_df.iterrows():\n            paragraph_id = paragraph[\"id\"]\n            paragraph_text = clean_text(paragraph[\"text\"])\n\n            doc = nlp(paragraph_text)\n            sentences = []\n            paragraph_keywords = set()\n\n            for sent in doc.sents:\n                sentence_text = clean_text(sent.text)\n                keywords = extract_keywords(sentence_text, book_freq_dict, english_freq_dict)\n                sentence_hash = f\"{paragraph_id}_{generate_content_hash(sentence_text, book_freq_dict, english_freq_dict)}\"\n\n                sentences.append({\n                    \"id\": sentence_hash,\n                    \"type\": \"sentence\",\n                    \"text\": sentence_text,\n                    \"keywords\": keywords,\n                    \"weight\": 0.0\n                })\n                paragraph_keywords.update(keywords)\n\n            sorted_paragraph_keywords = sorted(\n                paragraph_keywords,\n                key=lambda word: (-book_freq_dict.get(word, 0), english_freq_dict.get(word, float('inf')))\n            )\n\n            enriched_paragraphs.append({\n                \"id\": paragraph_id,\n                \"type\": \"paragraph\",\n                \"text\": paragraph_text,\n                \"keywords\": sorted_paragraph_keywords,\n                \"weight\": 0.0,\n                \"sentences\": sentences\n            })\n            bar()\n\n    return enriched_paragraphs\n\n\ndef process_all_pdfs(directory):\n    \"\"\"\n    Process all PDFs in a given directory.\n    \"\"\"\n    for filename in os.listdir(directory):\n        if filename.endswith(\".pdf\"):\n            pdf_path = os.path.join(directory, filename)\n            pdf_name = os.path.splitext(filename)[0]\n            output_dir = os.path.join(directory, pdf_name)\n            os.makedirs(output_dir, exist_ok=True)\n\n            book = PDFBook(pdf_path)\n\n            # Save raw text\n            raw_text = book.extract_raw()\n            save_to_txt(raw_text, os.path.join(output_dir, f\"{pdf_name}.txt\"))\n\n            # Extract and save code blocks\n            print(f\"Extracting code blocks for {pdf_name}...\")\n            code_blocks = book.extract_code_blocks()\n            save_to_json(code_blocks, os.path.join(output_dir, f\"{pdf_name}_code_blocks.json\"))\n            book.save_code_blocks_as_python_script(code_blocks, os.path.join(output_dir, f\"{pdf_name}_code_blocks.py\"))\n\n            # Normalize text and generate frequencies\n            normalized_text = book.extract_normalized()\n            print(f\"Generating frequencies and paragraphs for {pdf_name}...\")\n            paragraphs_df, book_freq_df, excluded_words_df, english_freq_df = generate_frequencies(normalized_text)\n\n            # Save results to JSON\n            save_to_json(paragraphs_df.to_dict(orient=\"records\"), os.path.join(output_dir, f\"{pdf_name}_paragraphs.json\"))\n            save_to_json(book_freq_df[[\"word\", \"book_frequency\", \"paragraphs\"]].to_dict(orient=\"records\"),\n                         os.path.join(output_dir, f\"{pdf_name}_frequencies.json\"))\n            save_to_json(english_freq_df.to_dict(orient=\"records\"),\n                         os.path.join(output_dir, f\"{pdf_name}_english_frequencies.json\"))\n            save_to_json(excluded_words_df[[\"word\", \"paragraphs\"]].to_dict(orient=\"records\"),\n                         os.path.join(output_dir, f\"{pdf_name}_excluded_words.json\"))\n\n            # Process paragraphs into sentences\n            print(f\"Processing sentences for {pdf_name}...\")\n            enriched_paragraphs = process_paragraphs(paragraphs_df, book_freq_df, english_freq_df)\n            save_to_json(enriched_paragraphs, os.path.join(output_dir, f\"{pdf_name}_enriched_paragraphs.json\"))\n\n\nif __name__ == \"__main__\":\n    process_all_pdfs(BOOKS_DIR)\n"
            }
        },
        {
            "file": {
                "File": "code_snippets.json",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/code_snippets.json",
                "Relative Path": "code_snippets.json",
                "Size": 933853,
                "Last Modified": "2024-11-28 15:38:39",
                "Lines": 18643,
                "Source_Code": "[\n    {\n        \"id\": \"ef9a84c3c88c77f993ffa85c60e5b599\",\n        \"type\": \"source_code\",\n        \"text\": \"teochew\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8afa3228481a57b925bda498590a3c5e\",\n        \"type\": \"source_code\",\n        \"text\": \"p. cm.\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"804ccdb59b2c057bb7bfb0cfe310fa2c\",\n        \"type\": \"source_code\",\n        \"text\": \"1. Java (Computer program language) I. Title.\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"732e2c635fcf48af05cf658ec5bea53b\",\n        \"type\": \"source_code\",\n        \"text\": \"2005036339\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d41d8cd98f00b204e9800998ecf8427e\",\n        \"type\": \"source_code\",\n        \"text\": \"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bde8d66e31670b1fcba5d1bfe0832e72\",\n        \"type\": \"source_code\",\n        \"text\": \"to Objects\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6ff05d73f9a15ee99b798cb4b11f0e6b\",\n        \"type\": \"source_code\",\n        \"text\": \"with polymorphism\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2aa729611ec523996e2357c57f3f0a0f\",\n        \"type\": \"source_code\",\n        \"text\": \"all the objects\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"82ea072d8b9656594f31c334b177b68d\",\n        \"type\": \"source_code\",\n        \"text\": \"destroy an object\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb3e1351639f9c1482bdc578db5f0f8b\",\n        \"type\": \"source_code\",\n        \"text\": \"int x = 96; // Illegal\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"386c61db676dc14cf5817a44ff115fb6\",\n        \"type\": \"source_code\",\n        \"text\": \"and return values\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d59952dea0ce90b0f1d0b4fecf532c7c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Hello, it\\u2019s: \\\"); \\n    System.out.println(new Date());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e013d5a7acb019bb7db4f5b0079f144d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.getProperties().list(System.out); \\n    System.out.println(System.getProperty(\\\"user.name\\\")); \\n    System.out.println( \\n    System.getProperty(\\\"java.library.path\\\"));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d59952dea0ce90b0f1d0b4fecf532c7c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Hello, it\\u2019s: \\\"); \\n    System.out.println(new Date());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8fe5a459b8cf7a79462d079c3b9164ba\",\n        \"type\": \"source_code\",\n        \"text\": \"// ...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8fe5a459b8cf7a79462d079c3b9164ba\",\n        \"type\": \"source_code\",\n        \"text\": \"// ...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b47fec87bd41dc26ade7dfd5212cb626\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Hello, it\\u2019s: \\\"); \\n    print(new Date());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6275b948facd1f6596d30e7573029c6c\",\n        \"type\": \"source_code\",\n        \"text\": \"int x = 1, y = 2, z = 3; \\n    int a = x + y - 2/2 + z;           // (1) \\n    int b = x + (y - 2)/(2 + z);       // (2) \\n    System.out.println(\\\"a = \\\" + a + \\\" b = \\\" + b);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6bf738c33ab9a37dd8c62dd84469ab97\",\n        \"type\": \"source_code\",\n        \"text\": \"Tank t1 = new Tank(); \\n    Tank t2 = new Tank(); \\n    t1.level = 9; \\n    t2.level = 47; \\n    print(\\\"1: t1.level: \\\" + t1.level + \\n          \\\", t2.level: \\\" + t2.level); \\n    t1 = t2; \\n    print(\\\"2: t1.level: \\\" + t1.level + \\n          \\\", t2.level: \\\" + t2.level); \\n    t1.level = 27; \\n    print(\\\"3: t1.level: \\\" + t1.level + \\n          \\\", t2.level: \\\" + t2.level);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c4407f85361330f201b3d8450e23f3a6\",\n        \"type\": \"source_code\",\n        \"text\": \"y.c = \\u2018z\\u2019;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7588a7bb643389b2b1f1969e2ea461d7\",\n        \"type\": \"source_code\",\n        \"text\": \"Letter x = new Letter(); \\n    x.c = \\u2018a\\u2019; \\n    print(\\\"1: x.c: \\\" + x.c); \\n    f(x); \\n    print(\\\"2: x.c: \\\" + x.c);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"261d22ba78a746944c88ce878d472cf7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Create a seeded random number generator: \\n    Random rand = new Random(47); \\n    int i, j, k; \\n    // Choose value from 1 to 100: \\n    j = rand.nextInt(100) + 1; \\n    print(\\\"j : \\\" + j); \\n    k = rand.nextInt(100) + 1; \\n    print(\\\"k : \\\" + k); \\n    i = j + k; \\n    print(\\\"j + k : \\\" + i); \\n    i = j - k; \\n    print(\\\"j - k : \\\" + i); \\n    i = k / j; \\n    print(\\\"k / j : \\\" + i); \\n    i = k * j; \\n    print(\\\"k * j : \\\" + i); \\n    i = k % j; \\n    print(\\\"k % j : \\\" + i); \\n    j %= k; \\n    print(\\\"j %= k : \\\" + j); \\n    // Floating-point number tests: \\n    float u, v, w; // Applies to doubles, too \\n    v = rand.nextFloat(); \\n    print(\\\"v : \\\" + v); \\n    w = rand.nextFloat(); \\n    print(\\\"w : \\\" + w); \\n    u = v + w; \\n    print(\\\"v + w : \\\" + u); \\n    u = v - w; \\n    print(\\\"v - w : \\\" + u); \\n    u = v * w; \\n    print(\\\"v * w : \\\" + u); \\n    u = v / w; \\n    print(\\\"v / w : \\\" + u); \\n    // The following also works for char, \\n    // byte, short, int, long, and double:\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74d5588af2bba244f55e13e74b76cdeb\",\n        \"type\": \"source_code\",\n        \"text\": \"u += v; \\n    print(\\\"u += v : \\\" + u); \\n    u -= v; \\n    print(\\\"u -= v : \\\" + u); \\n    u *= v; \\n    print(\\\"u *= v : \\\" + u); \\n    u /= v; \\n    print(\\\"u /= v : \\\" + u);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24cb9c2d6c204a7acc61fb54041519a4\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = 1; \\n    print(\\\"i : \\\" + i); \\n    print(\\\"++i : \\\" + ++i); // Pre-increment \\n    print(\\\"i++ : \\\" + i++); // Post-increment \\n    print(\\\"i : \\\" + i); \\n    print(\\\"--i : \\\" + --i); // Pre-decrement \\n    print(\\\"i-- : \\\" + i--); // Post-decrement \\n    print(\\\"i : \\\" + i);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb0ef2638f83f276a5f8580235b08739\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer n1 = new Integer(47); \\n    Integer n2 = new Integer(47); \\n    System.out.println(n1 == n2); \\n    System.out.println(n1 != n2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa8e2e125f14f5644724e795de5c8901\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer n1 = new Integer(47); \\n    Integer n2 = new Integer(47); \\n    System.out.println(n1.equals(n2));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a76b07179ec459949a068623dd6ed743\",\n        \"type\": \"source_code\",\n        \"text\": \"Value v1 = new Value(); \\n    Value v2 = new Value(); \\n    v1.i = v2.i = 100; \\n    System.out.println(v1.equals(v2));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b97e85f9669b87bf5bc805b00874f1de\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    int i = rand.nextInt(100);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1ad09f01e9340097c782dae9cabbcb7\",\n        \"type\": \"source_code\",\n        \"text\": \"int j = rand.nextInt(100); \\n    print(\\\"i = \\\" + i); \\n    print(\\\"j = \\\" + j); \\n    print(\\\"i > j is \\\" + (i > j)); \\n    print(\\\"i < j is \\\" + (i < j)); \\n    print(\\\"i >= j is \\\" + (i >= j)); \\n    print(\\\"i <= j is \\\" + (i <= j)); \\n    print(\\\"i == j is \\\" + (i == j)); \\n    print(\\\"i != j is \\\" + (i != j)); \\n    // Treating an int as a boolean is not legal Java:\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f41b18a8790dbdc41cc64887e3fe40e\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"(i < 10) && (j < 10) is \\\" \\n       + ((i < 10) && (j < 10)) ); \\n    print(\\\"(i < 10) || (j < 10) is \\\" \\n       + ((i < 10) || (j < 10)) );\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc53aeaee754ee3cde678d36c4277d2d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"test1(\\\" + val + \\\")\\\"); \\n    print(\\\"result: \\\" + (val < 1)); \\n    return val < 1;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d4a5a4cecbb2679dbd5b80b502a0082\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"test2(\\\" + val + \\\")\\\"); \\n    print(\\\"result: \\\" + (val < 2)); \\n    return val < 2;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4a8b282f3ca20a4e66bfbe3ce1c07dbf\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"test3(\\\" + val + \\\")\\\"); \\n    print(\\\"result: \\\" + (val < 3)); \\n    return val < 3;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6959cccfd5362d6c5182f1fd9f3f59c9\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean b = test1(0) && test2(2) && test3(2); \\n    print(\\\"expression is \\\" + b);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"037d963c68964792443de9e794c523b7\",\n        \"type\": \"source_code\",\n        \"text\": \"int i1 = 0x2f; // Hexadecimal (lowercase) \\n    print(\\\"i1: \\\" + Integer.toBinaryString(i1)); \\n    int i2 = 0X2F; // Hexadecimal (uppercase) \\n    print(\\\"i2: \\\" + Integer.toBinaryString(i2)); \\n    int i3 = 0177; // Octal (leading zero) \\n    print(\\\"i3: \\\" + Integer.toBinaryString(i3)); \\n    char c = 0xffff; // max char hex value\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6aa45004fe21e3d7238763ec042008a8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"c: \\\" + Integer.toBinaryString(c)); \\n    byte b = 0x7f; // max byte hex value \\n    print(\\\"b: \\\" + Integer.toBinaryString(b)); \\n    short s = 0x7fff; // max short hex value \\n    print(\\\"s: \\\" + Integer.toBinaryString(s)); \\n    long n1 = 200L; // long suffix \\n    long n2 = 200l; // long suffix (but can be confusing) \\n    long n3 = 200; \\n    float f1 = 1; \\n    float f2 = 1F; // float suffix \\n    float f3 = 1f; // float suffix \\n    double d1 = 1d; // double suffix \\n    double d2 = 1D; // double suffix \\n    // (Hex and Octal also work with long)\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ed3a9905d28a3d8220b46b485b7cc93\",\n        \"type\": \"source_code\",\n        \"text\": \"// Uppercase and lowercase \\u2018e\\u2019 are the same: \\n    float expFloat = 1.39e-43f; \\n    expFloat = 1.39E-43f;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b2e2f1ed406cd0b00b20895dec4786b\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(expFloat); \\n    double expDouble = 47e47d; // \\u2018d\\u2019 is optional \\n    double expDouble2 = 47e47; // Automatically double \\n    System.out.println(expDouble);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7c2cf0c39f60776fb1d73594060a3ac9\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = -1; \\n    print(Integer.toBinaryString(i)); \\n    i >>>= 10; \\n    print(Integer.toBinaryString(i)); \\n    long l = -1; \\n    print(Long.toBinaryString(l)); \\n    l >>>= 10; \\n    print(Long.toBinaryString(l)); \\n    short s = -1; \\n    print(Integer.toBinaryString(s)); \\n    s >>>= 10; \\n    print(Integer.toBinaryString(s)); \\n    byte b = -1; \\n    print(Integer.toBinaryString(b)); \\n    b >>>= 10; \\n    print(Integer.toBinaryString(b)); \\n    b = -1; \\n    print(Integer.toBinaryString(b)); \\n    print(Integer.toBinaryString(b>>>10));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ca884d7be3b430e818858a810bc40088\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    int i = rand.nextInt(); \\n    int j = rand.nextInt(); \\n    printBinaryInt(\\\"-1\\\", -1); \\n    printBinaryInt(\\\"+1\\\", +1); \\n    int maxpos = 2147483647; \\n    printBinaryInt(\\\"maxpos\\\", maxpos); \\n    int maxneg = -2147483648; \\n    printBinaryInt(\\\"maxneg\\\", maxneg); \\n    printBinaryInt(\\\"i\\\", i); \\n    printBinaryInt(\\\"~i\\\", ~i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53c78d8d667a9e429fae8a6437270a74\",\n        \"type\": \"source_code\",\n        \"text\": \"printBinaryInt(\\\"-i\\\", -i); \\n    printBinaryInt(\\\"j\\\", j); \\n    printBinaryInt(\\\"i & j\\\", i & j); \\n    printBinaryInt(\\\"i | j\\\", i | j); \\n    printBinaryInt(\\\"i ^ j\\\", i ^ j); \\n    printBinaryInt(\\\"i << 5\\\", i << 5); \\n    printBinaryInt(\\\"i >> 5\\\", i >> 5); \\n    printBinaryInt(\\\"(~i) >> 5\\\", (~i) >> 5); \\n    printBinaryInt(\\\"i >>> 5\\\", i >>> 5); \\n    printBinaryInt(\\\"(~i) >>> 5\\\", (~i) >>> 5);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"23374e2dee112d7877a97cb532aa9ac9\",\n        \"type\": \"source_code\",\n        \"text\": \"long l = rand.nextLong(); \\n    long m = rand.nextLong(); \\n    printBinaryLong(\\\"-1L\\\", -1L); \\n    printBinaryLong(\\\"+1L\\\", +1L); \\n    long ll = 9223372036854775807L; \\n    printBinaryLong(\\\"maxpos\\\", ll); \\n    long lln = -9223372036854775808L; \\n    printBinaryLong(\\\"maxneg\\\", lln); \\n    printBinaryLong(\\\"l\\\", l); \\n    printBinaryLong(\\\"~l\\\", ~l); \\n    printBinaryLong(\\\"-l\\\", -l); \\n    printBinaryLong(\\\"m\\\", m); \\n    printBinaryLong(\\\"l & m\\\", l & m); \\n    printBinaryLong(\\\"l | m\\\", l | m); \\n    printBinaryLong(\\\"l ^ m\\\", l ^ m); \\n    printBinaryLong(\\\"l << 5\\\", l << 5); \\n    printBinaryLong(\\\"l >> 5\\\", l >> 5); \\n    printBinaryLong(\\\"(~l) >> 5\\\", (~l) >> 5); \\n    printBinaryLong(\\\"l >>> 5\\\", l >>> 5); \\n    printBinaryLong(\\\"(~l) >>> 5\\\", (~l) >>> 5);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"438201e22b2c22d1250b84e178e94916\",\n        \"type\": \"source_code\",\n        \"text\": \"print(s + \\\", int: \\\" + i + \\\", binary:\\\\n   \\\" + \\n      Integer.toBinaryString(i));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a303ee665ca27b63a8e934b88c06670\",\n        \"type\": \"source_code\",\n        \"text\": \"print(s + \\\", long: \\\" + l + \\\", binary:\\\\n    \\\" + \\n      Long.toBinaryString(l));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30ea0a94eeb61cc412d9fcc56fa4be61\",\n        \"type\": \"source_code\",\n        \"text\": \"return i < 10 ? i * 100 : i * 10;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35ba5d7835748624131ee5f08e340602\",\n        \"type\": \"source_code\",\n        \"text\": \"if(i < 10) \\n      return i * 100; \\n    else \\n      return i * 10;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bcd0a57e5ba440c865cba102f3406ef9\",\n        \"type\": \"source_code\",\n        \"text\": \"print(ternary(9)); \\n    print(ternary(10)); \\n    print(standardIfElse(9)); \\n    print(standardIfElse(10));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e6b98744ac512b95e81f1134f52238b0\",\n        \"type\": \"source_code\",\n        \"text\": \"int x = 0, y = 1, z = 2; \\n    String s = \\\"x, y, z \\\"; \\n    print(s + x + y + z); \\n    print(x + \\\" \\\" + s); // Converts x to a String\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"deb11650c925d1348380a1b52cdea04e\",\n        \"type\": \"source_code\",\n        \"text\": \"s += \\\"(summed) = \\\"; // Concatenation operator \\n    print(s + (x + y + z)); \\n    print(\\\"\\\" + x); // Shorthand for Integer.toString()\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"380367707aa5a0b8e15f556825b96729\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = 200; \\n    long lng = (long)i; \\n    lng = i; // \\\"Widening,\\\" so cast not really required \\n    long lng2 = (long)200; \\n    lng2 = 200; \\n    // A \\\"narrowing conversion\\\": \\n    i = (int)lng2; // Cast required\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37ea1e89736dd64c326f897f5cd1445e\",\n        \"type\": \"source_code\",\n        \"text\": \"double above = 0.7, below = 0.4; \\n    float fabove = 0.7f, fbelow = 0.4f; \\n    print(\\\"(int)above: \\\" + (int)above); \\n    print(\\\"(int)below: \\\" + (int)below); \\n    print(\\\"(int)fabove: \\\" + (int)fabove);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6e61ac8305152b5fdbbd02b30d6bdadd\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"(int)fbelow: \\\" + (int)fbelow);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ee867cb413e06c379e716d7e5f7cab6\",\n        \"type\": \"source_code\",\n        \"text\": \"double above = 0.7, below = 0.4; \\n    float fabove = 0.7f, fbelow = 0.4f; \\n    print(\\\"Math.round(above): \\\" + Math.round(above)); \\n    print(\\\"Math.round(below): \\\" + Math.round(below)); \\n    print(\\\"Math.round(fabove): \\\" + Math.round(fabove)); \\n    print(\\\"Math.round(fbelow): \\\" + Math.round(fbelow));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7592b86bf97669fb7587540e825d5119\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    //! x = x * y; \\n    //! x = x / y; \\n    //! x = x % y; \\n    //! x = x + y; \\n    //! x = x - y; \\n    //! x++; \\n    //! x--; \\n    //! x = +y; \\n    //! x = -y; \\n    // Relational and logical: \\n    //! f(x > y); \\n    //! f(x >= y); \\n    //! f(x < y); \\n    //! f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    f(!y); \\n    x = x && y; \\n    x = x || y; \\n    // Bitwise operators: \\n    //! x = ~y; \\n    x = x & y; \\n    x = x | y; \\n    x = x ^ y; \\n    //! x = x << 1; \\n    //! x = x >> 1; \\n    //! x = x >>> 1; \\n    // Compound assignment: \\n    //! x += y; \\n    //! x -= y; \\n    //! x *= y; \\n    //! x /= y; \\n    //! x %= y; \\n    //! x <<= 1; \\n    //! x >>= 1; \\n    //! x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting:\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"753e277ace003cff786194b39174444b\",\n        \"type\": \"source_code\",\n        \"text\": \"//! char c = (char)x; \\n    //! byte b = (byte)x; \\n    //! short s = (short)x; \\n    //! int i = (int)x; \\n    //! long l = (long)x; \\n    //! float f = (float)x; \\n    //! double d = (double)x;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"45be1cb7e0977d99ff6e61f8ec095ead\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = (char)(x * y); \\n    x = (char)(x / y); \\n    x = (char)(x % y); \\n    x = (char)(x + y); \\n    x = (char)(x - y); \\n    x++; \\n    x--; \\n    x = (char)+y; \\n    x = (char)-y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    x= (char)~y; \\n    x = (char)(x & y); \\n    x  = (char)(x | y); \\n    x = (char)(x ^ y); \\n    x = (char)(x << 1); \\n    x = (char)(x >> 1); \\n    x = (char)(x >>> 1); \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    x <<= 1; \\n    x >>= 1; \\n    x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    byte b = (byte)x; \\n    short s = (short)x; \\n    int i = (int)x; \\n    long l = (long)x; \\n    float f = (float)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"81d1627333e76eb837a59149455e005f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = (byte)(x* y); \\n    x = (byte)(x / y); \\n    x = (byte)(x % y);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f005eb799919f7bb85e559aaf642cb95\",\n        \"type\": \"source_code\",\n        \"text\": \"x = (byte)(x + y); \\n    x = (byte)(x - y); \\n    x++; \\n    x--; \\n    x = (byte)+ y; \\n    x = (byte)- y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    x = (byte)~y; \\n    x = (byte)(x & y); \\n    x = (byte)(x | y); \\n    x = (byte)(x ^ y); \\n    x = (byte)(x << 1); \\n    x = (byte)(x >> 1); \\n    x = (byte)(x >>> 1); \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    x <<= 1; \\n    x >>= 1; \\n    x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x; \\n    short s = (short)x; \\n    int i = (int)x; \\n    long l = (long)x; \\n    float f = (float)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fc8c1273ec4cb6bcd51aafc31916e5ff\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = (short)(x * y); \\n    x = (short)(x / y); \\n    x = (short)(x % y); \\n    x = (short)(x + y); \\n    x = (short)(x - y); \\n    x++; \\n    x--; \\n    x = (short)+y; \\n    x = (short)-y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d27606e22932cbf3703cfe047ffd8f7\",\n        \"type\": \"source_code\",\n        \"text\": \"//! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    x = (short)~y; \\n    x = (short)(x & y); \\n    x = (short)(x | y); \\n    x = (short)(x ^ y); \\n    x = (short)(x << 1); \\n    x = (short)(x >> 1); \\n    x = (short)(x >>> 1); \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    x <<= 1; \\n    x >>= 1; \\n    x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x; \\n    byte b = (byte)x; \\n    int i = (int)x; \\n    long l = (long)x; \\n    float f = (float)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87dd07a1192537cd8c02f3726151ff8d\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = x * y; \\n    x = x / y; \\n    x = x % y; \\n    x = x + y; \\n    x = x - y; \\n    x++; \\n    x--; \\n    x = +y; \\n    x = -y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    x = ~y; \\n    x = x & y; \\n    x = x | y; \\n    x = x ^ y; \\n    x = x << 1; \\n    x = x >> 1; \\n    x = x >>> 1; \\n    // Compound assignment: \\n    x += y;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"159fa0ad9bebe55c637d45d21aad921a\",\n        \"type\": \"source_code\",\n        \"text\": \"x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    x <<= 1; \\n    x >>= 1; \\n    x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x; \\n    byte b = (byte)x; \\n    short s = (short)x; \\n    long l = (long)x; \\n    float f = (float)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4756a4cc4e661c19477282dce0bc3a1f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = x * y; \\n    x = x / y; \\n    x = x % y; \\n    x = x + y; \\n    x = x - y; \\n    x++; \\n    x--; \\n    x = +y; \\n    x = -y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    x = ~y; \\n    x = x & y; \\n    x = x | y; \\n    x = x ^ y; \\n    x = x << 1; \\n    x = x >> 1; \\n    x = x >>> 1; \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    x <<= 1; \\n    x >>= 1; \\n    x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eced2b0b2b8260e7fba02f1f76302e5b\",\n        \"type\": \"source_code\",\n        \"text\": \"byte b = (byte)x; \\n    short s = (short)x; \\n    int i = (int)x; \\n    float f = (float)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1b625b14d4700898a656e8d5ea1ee0a7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = x * y; \\n    x = x / y; \\n    x = x % y; \\n    x = x + y; \\n    x = x - y; \\n    x++; \\n    x--; \\n    x = +y; \\n    x = -y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    //! x = ~y; \\n    //! x = x & y; \\n    //! x = x | y; \\n    //! x = x ^ y; \\n    //! x = x << 1; \\n    //! x = x >> 1; \\n    //! x = x >>> 1; \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    //! x <<= 1; \\n    //! x >>= 1; \\n    //! x >>>= 1; \\n    //! x &= y; \\n    //! x ^= y; \\n    //! x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x; \\n    byte b = (byte)x; \\n    short s = (short)x; \\n    int i = (int)x; \\n    long l = (long)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a25276eedbfd3aa211f30520cabc06b\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = x * y; \\n    x = x / y; \\n    x = x % y; \\n    x = x + y; \\n    x = x - y;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b8511a251d863386d007ae16d27af7d\",\n        \"type\": \"source_code\",\n        \"text\": \"x++; \\n    x--; \\n    x = +y; \\n    x = -y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    //! x = ~y; \\n    //! x = x & y; \\n    //! x = x | y; \\n    //! x = x ^ y; \\n    //! x = x << 1; \\n    //! x = x >> 1; \\n    //! x = x >>> 1; \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    //! x <<= 1; \\n    //! x >>= 1; \\n    //! x >>>= 1; \\n    //! x &= y; \\n    //! x ^= y; \\n    //! x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x; \\n    byte b = (byte)x; \\n    short s = (short)x; \\n    int i = (int)x; \\n    long l = (long)x; \\n    float f = (float)x;\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a54d3d93814b48bd7851e7177f65fdc\",\n        \"type\": \"source_code\",\n        \"text\": \"int big = Integer.MAX_VALUE; \\n    System.out.println(\\\"big = \\\" + big); \\n    int bigger = big * 4; \\n    System.out.println(\\\"bigger = \\\" + bigger);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9e7149585b02a72d4fcd4148fc780927\",\n        \"type\": \"source_code\",\n        \"text\": \"if(testval > target)  \\n      result = +1;  \\n    else if(testval < target)  \\n      result = -1;  \\n    else  \\n      result = 0; // Match\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf5bde277ee165c53819f6bdaa1cc6f1\",\n        \"type\": \"source_code\",\n        \"text\": \"test(10, 5);  \\n    print(result);  \\n    test(5, 10);  \\n    print(result);  \\n    test(5, 5);  \\n    print(result);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21156c49c9cc48ae6438b65cea9131a2\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean result = Math.random() < 0.99; \\n    System.out.print(result + \\\", \\\"); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"617e6bad9b495f952519428f97ac31b4\",\n        \"type\": \"source_code\",\n        \"text\": \"while(condition()) \\n      System.out.println(\\\"Inside \\u2018while\\u2019\\\"); \\n    System.out.println(\\\"Exited \\u2018while\\u2019\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d7bd6beeb238e96d295be2fac88f0941\",\n        \"type\": \"source_code\",\n        \"text\": \"for(char c = 0; c < 128; c++) \\n      if(Character.isLowerCase(c)) \\n        System.out.println(\\\"value: \\\" + (int)c + \\n          \\\" character: \\\" + c);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6fc16adedc8e1e86b4e5198beeb73f3c\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 1, j = i + 10; i < 5; i++, j = i * 2) { \\n      System.out.println(\\\"i = \\\" + i + \\\" j = \\\" + j); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"781226411cdfaa2d8833487199fbce08\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    float f[] = new float[10]; \\n    for(int i = 0; i < 10; i++) \\n      f[i] = rand.nextFloat(); \\n    for(float x : f) \\n      System.out.println(x);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b7165471eac035d59b8395243c2f0f3\",\n        \"type\": \"source_code\",\n        \"text\": \"for(char c : \\\"An African Swallow\\\".toCharArray() ) \\n      System.out.print(c + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecb0ef3ac91a3c3fc655250da5db9fd7\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i : range(10)) // 0..9 \\n      printnb(i + \\\" \\\"); \\n    print(); \\n    for(int i : range(5, 10)) // 5..9 \\n      printnb(i + \\\" \\\"); \\n    print(); \\n    for(int i : range(5, 20, 3)) // 5..20 step 3 \\n      printnb(i + \\\" \\\"); \\n    print();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9f046feb0233aea8002cfd3afffbdfcb\",\n        \"type\": \"source_code\",\n        \"text\": \"if(testval > target) \\n      return +1; \\n    else if(testval < target) \\n      return -1; \\n    else \\n      return 0; // Match\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ead1548c17e29e131df9806f5b3883df\",\n        \"type\": \"source_code\",\n        \"text\": \"print(test(10, 5)); \\n    print(test(5, 10)); \\n    print(test(5, 5));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8e8fe769b5616152c4f9b6113a709c7c\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 100; i++) { \\n      if(i == 74) break; // Out of for loop \\n      if(i % 9 != 0) continue; // Next iteration \\n      System.out.print(i + \\\" \\\"); \\n    } \\n    System.out.println(); \\n    // Using foreach: \\n    for(int i : range(100)) { \\n      if(i == 74) break; // Out of for loop \\n      if(i % 9 != 0) continue; // Next iteration \\n      System.out.print(i + \\\" \\\"); \\n    } \\n    System.out.println(); \\n    int i = 0; \\n    // An \\\"infinite loop\\\": \\n    while(true) { \\n      i++; \\n      int j = i * 27; \\n      if(j == 1269) break; // Out of loop \\n      if(i % 10 != 0) continue; // Top of loop \\n      System.out.print(i + \\\" \\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"469f306c7c9e2faf15a75f452311b9d4\",\n        \"type\": \"source_code\",\n        \"text\": \"//...  \\n    break; // (1)  \\n    //...  \\n    continue; // (2)  \\n    //...  \\n    continue label1; // (3)  \\n    //...  \\n    break label1; // (4)\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eb222386370d6e44ad5535ba6ce9b713\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = 0; \\n    outer: // Can\\u2019t have statements here \\n    for(; true ;) { // infinite loop \\n      inner: // Can\\u2019t have statements here \\n      for(; i < 10; i++) { \\n        print(\\\"i = \\\" + i); \\n        if(i == 2) { \\n          print(\\\"continue\\\"); \\n          continue; \\n        } \\n        if(i == 3) { \\n          print(\\\"break\\\"); \\n          i++; // Otherwise i never \\n               // gets incremented. \\n          break; \\n        } \\n        if(i == 7) { \\n          print(\\\"continue outer\\\"); \\n          i++; // Otherwise i never \\n               // gets incremented. \\n          continue outer; \\n        } \\n        if(i == 8) { \\n          print(\\\"break outer\\\"); \\n          break outer; \\n        } \\n        for(int k = 0; k < 5; k++) { \\n          if(k == 3) { \\n            print(\\\"continue inner\\\"); \\n            continue inner; \\n          } \\n        } \\n      } \\n    } \\n    // Can\\u2019t break or continue to labels here\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcece291d2b2cfacc14cecab829054e5\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = 0; \\n    outer: \\n    while(true) { \\n      print(\\\"Outer while loop\\\"); \\n      while(true) { \\n        i++; \\n        print(\\\"i = \\\" + i); \\n        if(i == 1) { \\n          print(\\\"continue\\\"); \\n          continue; \\n        } \\n        if(i == 3) { \\n          print(\\\"continue outer\\\"); \\n          continue outer; \\n        } \\n        if(i == 5) { \\n          print(\\\"break\\\"); \\n          break; \\n        } \\n        if(i == 7) { \\n          print(\\\"break outer\\\"); \\n          break outer; \\n        } \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"040ed926b590e4f3675fbc36e3f401c6\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    for(int i = 0; i < 100; i++) { \\n      int c = rand.nextInt(26) + \\u2018a\\u2019; \\n      printnb((char)c + \\\", \\\" + c + \\\": \\\"); \\n      switch(c) { \\n        case \\u2018a\\u2019: \\n        case \\u2018e\\u2019: \\n        case \\u2018i\\u2019: \\n        case \\u2018o\\u2019: \\n        case \\u2018u\\u2019: print(\\\"vowel\\\"); \\n                  break; \\n        case \\u2018y\\u2019: \\n        case \\u2018w\\u2019: print(\\\"Sometimes a vowel\\\"); \\n                  break; \\n        default:  print(\\\"consonant\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c85ca5b5f6aabff9cd116bcdf13d434d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"Rock \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d8df46dbf28cf591683eee5805adafcd\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 10; i++) \\n      new Rock();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cf47eedb9a70a3b7fed5855a7b0f01d1\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"Rock \\\" + i + \\\" \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e81bab9e5116dd94fa7005df5c6550c8\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 8; i++) \\n      new Rock2(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c73f7820bbc6ab220c9dc8513480a791\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Planting a seedling\\\"); \\n    height = 0;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8dee36fc32f49b78a8f12a7944b8a2f7\",\n        \"type\": \"source_code\",\n        \"text\": \"height = initialHeight; \\n    print(\\\"Creating new Tree that is \\\" + \\n      height + \\\" feet tall\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e3f528d5f07c39414ca2f27f67641770\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Tree is \\\" + height + \\\" feet tall\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb367042aeb2cf9d80f02b62540fddb9\",\n        \"type\": \"source_code\",\n        \"text\": \"print(s + \\\": Tree is \\\" + height + \\\" feet tall\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdd0566933ad6629bb61fb2d9b105512\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) { \\n      Tree t = new Tree(i); \\n      t.info(); \\n      t.info(\\\"overloaded method\\\"); \\n    } \\n    // Overloaded constructor: \\n    new Tree();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b3f690d69fb970d22502b19fb693521d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"String: \\\" + s + \\\", int: \\\" + i);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5419c0eff5ee1369b03b95436769551a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"int: \\\" + i + \\\", String: \\\" + s);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f018c2bea4840cdc7fc165ec3b53bbf\",\n        \"type\": \"source_code\",\n        \"text\": \"f(\\\"String first\\\", 11); \\n    f(99, \\\"Int first\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d02cbb938c34735789338de3333f612f\",\n        \"type\": \"source_code\",\n        \"text\": \"printnb(\\\"5: \\\"); \\n    f1(5);f2(5);f3(5);f4(5);f5(5);f6(5);f7(5); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cf1d270aa929653ba21fc52e91137b70\",\n        \"type\": \"source_code\",\n        \"text\": \"char x = \\u2018x\\u2019; \\n    printnb(\\\"char: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7097223444ac474d5724dca96c18c3ae\",\n        \"type\": \"source_code\",\n        \"text\": \"byte x = 0; \\n    printnb(\\\"byte: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90aa9099f03a1bd4db85f078edc3f97f\",\n        \"type\": \"source_code\",\n        \"text\": \"short x = 0; \\n    printnb(\\\"short: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"830404056f7d36ac71f29da30da7ea41\",\n        \"type\": \"source_code\",\n        \"text\": \"int x = 0; \\n    printnb(\\\"int: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0917c1c32b403a8fa8202f55b813606d\",\n        \"type\": \"source_code\",\n        \"text\": \"long x = 0; \\n    printnb(\\\"long: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"818823f7b1e0e9544b21644bb62cd6b6\",\n        \"type\": \"source_code\",\n        \"text\": \"float x = 0; \\n    printnb(\\\"float: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"766caf01ca22520bb984ec98bf45fa2a\",\n        \"type\": \"source_code\",\n        \"text\": \"double x = 0; \\n    printnb(\\\"double: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a9dc5df1594d08560a5715898dd09dd7\",\n        \"type\": \"source_code\",\n        \"text\": \"PrimitiveOverloading p = \\n      new PrimitiveOverloading(); \\n    p.testConstVal(); \\n    p.testChar(); \\n    p.testByte(); \\n    p.testShort(); \\n    p.testInt(); \\n    p.testLong(); \\n    p.testFloat(); \\n    p.testDouble();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"82ea7d4e371e9d594f49cc0bab38f544\",\n        \"type\": \"source_code\",\n        \"text\": \"double x = 0; \\n    print(\\\"double argument:\\\"); \\n    f1(x);f2((float)x);f3((long)x);f4((int)x);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"937e3c80a5f6fea75a50a4b5a9f0d229\",\n        \"type\": \"source_code\",\n        \"text\": \"f5((short)x);f6((byte)x);f7((char)x);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bfc182ddf4edee747602d87ae0f0a4f0\",\n        \"type\": \"source_code\",\n        \"text\": \"Demotion p = new Demotion(); \\n    p.testDouble();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8429087dbacdd36ac212e559dbe4e50e\",\n        \"type\": \"source_code\",\n        \"text\": \"Bird b = new Bird(); // Default!\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8b236482c6e8a64b0e849d63090d4a3\",\n        \"type\": \"source_code\",\n        \"text\": \"//! Bird2 b = new Bird2(); // No default \\n    Bird2 b2 = new Bird2(1); \\n    Bird2 b3 = new Bird2(1.0);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a925130b58f30b5917662b9a925c8655\",\n        \"type\": \"source_code\",\n        \"text\": \"Banana a = new Banana(), \\n           b = new Banana(); \\n    a.peel(1); \\n    b.peel(2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"de136b9734de1d761afecb3309fadef8\",\n        \"type\": \"source_code\",\n        \"text\": \"i++; \\n    return this;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43a3d5381c424bbefff429e92872c5ff\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"i = \\\" + i);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"47c7b94756730489073547b654f51126\",\n        \"type\": \"source_code\",\n        \"text\": \"Leaf x = new Leaf(); \\n    x.increment().increment().increment().print();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0677ab0eaf38128d23d1658d2b1d4e5a\",\n        \"type\": \"source_code\",\n        \"text\": \"Apple peeled = apple.getPeeled(); \\n    System.out.println(\\\"Yummy\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c9cccaf2940e59e91e68c3b33921216\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... remove peel \\n    return apple; // Peeled\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"92485c3bc22b2c937f79327f9bbb4f9d\",\n        \"type\": \"source_code\",\n        \"text\": \"new Person().eat(new Apple());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5c55aeb09e7b6b167a80dc2ecaf52cc3\",\n        \"type\": \"source_code\",\n        \"text\": \"petalCount = petals; \\n    print(\\\"Constructor w/ int arg only, petalCount= \\\" \\n      + petalCount);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab97e64f9e552749a8c209bce83a7167\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Constructor w/ String arg only, s = \\\" + ss); \\n    s = ss;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"703d73a3af9c48a53b12e8043d6bf41f\",\n        \"type\": \"source_code\",\n        \"text\": \"this(petals);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdd264d97c2cda43fc1df2ae7afa232c\",\n        \"type\": \"source_code\",\n        \"text\": \"this(s); // Can\\u2019t call two! \\n    this.s = s; // Another use of \\\"this\\\" \\n    print(\\\"String & int args\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4340faab16c7c39148509c50947c658a\",\n        \"type\": \"source_code\",\n        \"text\": \"this(\\\"hi\\\", 47); \\n    print(\\\"default constructor (no args)\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6403ef10f33732d453f4bdf64f7fbc3f\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"petalCount = \\\" + petalCount + \\\" s = \\\"+ s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b18cab400812370a44c7a93de3ba3ca\",\n        \"type\": \"source_code\",\n        \"text\": \"Flower x = new Flower(); \\n    x.printPetalCount();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d761b8725f9365a39362c1a15c934781\",\n        \"type\": \"source_code\",\n        \"text\": \"checkedOut = checkOut;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43c4e6f8521fb451cff34e2fbe906aac\",\n        \"type\": \"source_code\",\n        \"text\": \"checkedOut = false;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4f34956cc3abb706623367798e1ebde\",\n        \"type\": \"source_code\",\n        \"text\": \"if(checkedOut) \\n      System.out.println(\\\"Error: checked out\\\"); \\n    // Normally, you\\u2019ll also do this: \\n    // super.finalize(); // Call the base-class version\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9f18d93b90ed4e125ad7477e52142df3\",\n        \"type\": \"source_code\",\n        \"text\": \"Book novel = new Book(true); \\n    // Proper cleanup: \\n    novel.checkIn(); \\n    // Drop the reference, forget to clean up: \\n    new Book(true); \\n    // Force garbage collection & finalization: \\n    System.gc();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b09fa867fbd1b028901415e68485b6c5\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Data type      Initial value\\\"); \\n    print(\\\"boolean        \\\" + t); \\n    print(\\\"char           [\\\" + c + \\\"]\\\"); \\n    print(\\\"byte           \\\" + b); \\n    print(\\\"short          \\\" + s); \\n    print(\\\"int            \\\" + i); \\n    print(\\\"long           \\\" + l); \\n    print(\\\"float          \\\" + f); \\n    print(\\\"double         \\\" + d); \\n    print(\\\"reference      \\\" + reference);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c753f2a50877577688f1f03fa6d996c\",\n        \"type\": \"source_code\",\n        \"text\": \"InitialValues iv = new InitialValues(); \\n    iv.printInitialValues(); \\n    /* You could also say: \\n    new InitialValues().printInitialValues(); \\n    */\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3a5dcb943d6bc607c6b2658350526bc5\",\n        \"type\": \"source_code\",\n        \"text\": \"Initial value\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68934a3e9455fa72420237eb05902327\",\n        \"type\": \"source_code\",\n        \"text\": \"false\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa9497f5acccafcc3e6019657bdc5eb1\",\n        \"type\": \"source_code\",\n        \"text\": \"[ ]\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfcd208495d565ef66e7dff9f98764da\",\n        \"type\": \"source_code\",\n        \"text\": \"0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfcd208495d565ef66e7dff9f98764da\",\n        \"type\": \"source_code\",\n        \"text\": \"0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfcd208495d565ef66e7dff9f98764da\",\n        \"type\": \"source_code\",\n        \"text\": \"0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfcd208495d565ef66e7dff9f98764da\",\n        \"type\": \"source_code\",\n        \"text\": \"0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30565a8911a6bb487e3745c0ea3c8224\",\n        \"type\": \"source_code\",\n        \"text\": \"0.0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30565a8911a6bb487e3745c0ea3c8224\",\n        \"type\": \"source_code\",\n        \"text\": \"0.0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37a6259cc0c1dae299a7866489dff0bd\",\n        \"type\": \"source_code\",\n        \"text\": \"null\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5944e01c747044613a7d9a66f9548cbd\",\n        \"type\": \"source_code\",\n        \"text\": \"// Show that we\\u2019re in the constructor: \\n    print(\\\"House()\\\"); \\n    w3 = new Window(33); // Reinitialize w3\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b1dabbd3f6ac462ac7441a289f6ec01\",\n        \"type\": \"source_code\",\n        \"text\": \"House h = new House(); \\n    h.f(); // Shows that construction is done\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7332c73ff7d9e3b8db3bf1162d3c7099\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Bowl(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"85192f3eb4c6e086f76d46ff94f3033f\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f1(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"622ff8cb46c973cca1da4764535e42ca\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Table()\\\"); \\n    bowl2.f1(1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"375a02204953db04538ebc4990157523\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f2(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0593e5a7c3c67558526c00a38bd19280\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Cupboard()\\\"); \\n    bowl4.f1(2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"439cf55042a4f7f2f1e1ccbbbc956f43\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f3(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c2a266b9a66419f28dc5eb7b5064ef70\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Creating new Cupboard() in main\\\"); \\n    new Cupboard(); \\n    print(\\\"Creating new Cupboard() in main\\\"); \\n    new Cupboard(); \\n    table.f2(1); \\n    cupboard.f3(1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e16a3de256a6737b30f9256b0ca005c\",\n        \"type\": \"source_code\",\n        \"text\": \"i = 47;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e96767a60f54ff657f0659a7b9f0931d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Cup(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d7faf66b9024b31e0004a3935ce732a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5ddfb748ea7566635ce9ef84b484f85b\",\n        \"type\": \"source_code\",\n        \"text\": \"cup1 = new Cup(1); \\n    cup2 = new Cup(2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fd33bdd267946e5e2eb831ece85e4df7\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Cups()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e7b84e41844e476921e8bf2edf3dc4c\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Inside main()\\\"); \\n    Cups.cup1.f(99);  // (1)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e96c42e40754c96e55f865c24f4a5a6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Mug(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d7faf66b9024b31e0004a3935ce732a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a685c77f78a369842146facbff4d8fda\",\n        \"type\": \"source_code\",\n        \"text\": \"mug1 = new Mug(1); \\n    mug2 = new Mug(2); \\n    print(\\\"mug1 & mug2 initialized\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"331b4cf6e3258b8b4ffeb692bac83701\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Mugs()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3e82c49d9aa6acda0ea3487d2edfef9\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Mugs(int)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"245cf1841170226d324789b581926441\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Inside main()\\\"); \\n    new Mugs(); \\n    print(\\\"new Mugs() completed\\\"); \\n    new Mugs(1); \\n    print(\\\"new Mugs(1) completed\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1181cb2f3b680e724fca3c6bfef492a\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] a1 = { 1, 2, 3, 4, 5 }; \\n    int[] a2; \\n    a2 = a1; \\n    for(int i = 0; i < a2.length; i++) \\n      a2[i] = a2[i] + 1; \\n    for(int i = 0; i < a1.length; i++) \\n      print(\\\"a1[\\\" + i + \\\"] = \\\" + a1[i]);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc14a6afb462d13766e04cbdfb9a9915\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] a; \\n    Random rand = new Random(47); \\n    a = new int[rand.nextInt(20)]; \\n    print(\\\"length of a = \\\" + a.length); \\n    print(Arrays.toString(a));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9127811de7ebdd0898e4916aa601f0c3\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    Integer[] a = new Integer[rand.nextInt(20)]; \\n    print(\\\"length of a = \\\" + a.length); \\n    for(int i = 0; i < a.length; i++) \\n      a[i] = rand.nextInt(500); // Autoboxing \\n    print(Arrays.toString(a));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a6f455e68bad2092096487259060d8b5\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[] a = {\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c49995a9bb61401f052d08f51a8d9a9b\",\n        \"type\": \"source_code\",\n        \"text\": \"new Integer(1), \\n      new Integer(2), \\n      3, // Autoboxing \\n    }; \\n    Integer[] b = new Integer[]{ \\n      new Integer(1), \\n      new Integer(2), \\n      3, // Autoboxing \\n    }; \\n    System.out.println(Arrays.toString(a)); \\n    System.out.println(Arrays.toString(b));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6bd9a37ac1b222c641eb95aded0e7f52\",\n        \"type\": \"source_code\",\n        \"text\": \"Other.main(new String[]{ \\\"fiddle\\\", \\\"de\\\", \\\"dum\\\" });\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c5abb8e8ea842106138e0fe14ab59d0\",\n        \"type\": \"source_code\",\n        \"text\": \"for(String s : args) \\n      System.out.print(s + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d484718c111bd3e5a458bca015b469e9\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Object obj : args) \\n      System.out.print(obj + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7169929d5cb5a2aff98f74cf992899ad\",\n        \"type\": \"source_code\",\n        \"text\": \"printArray(new Object[]{ \\n      new Integer(47), new Float(3.14), new Double(11.11) \\n    }); \\n    printArray(new Object[]{\\\"one\\\", \\\"two\\\", \\\"three\\\" }); \\n    printArray(new Object[]{new A(), new A(), new A()});\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d484718c111bd3e5a458bca015b469e9\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Object obj : args) \\n      System.out.print(obj + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf2fbcd3c440da11fd1bee77c05fb386\",\n        \"type\": \"source_code\",\n        \"text\": \"// Can take individual elements: \\n    printArray(new Integer(47), new Float(3.14), \\n      new Double(11.11)); \\n    printArray(47, 3.14F, 11.11); \\n    printArray(\\\"one\\\", \\\"two\\\", \\\"three\\\"); \\n    printArray(new A(), new A(), new A()); \\n    // Or an array:\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d40e2924f813bd03b662a0f1fff1b042\",\n        \"type\": \"source_code\",\n        \"text\": \"printArray((Object[])new Integer[]{ 1, 2, 3, 4 }); \\n    printArray(); // Empty list is OK\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7553174193a732609bf28f801b2fcdd5\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"required: \\\" + required + \\\" \\\"); \\n    for(String s : trailing) \\n      System.out.print(s + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3f572c575b9e99afe924a98b0a455dd\",\n        \"type\": \"source_code\",\n        \"text\": \"f(1, \\\"one\\\"); \\n    f(2, \\\"two\\\", \\\"three\\\"); \\n    f(0);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3957dc0ef7b239b8a97c01fd1b1638ba\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(args.getClass()); \\n    System.out.println(\\\" length \\\" + args.length);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3957dc0ef7b239b8a97c01fd1b1638ba\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(args.getClass()); \\n    System.out.println(\\\" length \\\" + args.length);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44eaafa154e1c5b6071cdc6d6a07a466\",\n        \"type\": \"source_code\",\n        \"text\": \"f(\\u2018a\\u2019); \\n    f(); \\n    g(1); \\n    g(); \\n    System.out.println(\\\"int[]: \\\" + new int[0].getClass());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b404edddce3d7d13cfb1e9c63cc4a45\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Integer i : args) \\n      System.out.print(i + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3fefbe7accabdc2a1fbdb8ae6c9c8f28\",\n        \"type\": \"source_code\",\n        \"text\": \"f(new Integer(1), new Integer(2)); \\n    f(4, 5, 6, 7, 8, 9); \\n    f(10, new Integer(11), 12);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4bae9d7be63ba675e4c6c405b8c2c4c5\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"first\\\"); \\n    for(Character c : args) \\n      System.out.print(\\\" \\\" + c); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8bcb27ec3d7af9957dab76e54056d3f7\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"second\\\"); \\n    for(Integer i : args) \\n      System.out.print(\\\" \\\" + i); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d200d90b8172e0ce066f83edb77df11c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"third\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"69609d44e78d476928e99917ea35304c\",\n        \"type\": \"source_code\",\n        \"text\": \"f(\\u2018a\\u2019, \\u2018b\\u2019, \\u2018c\\u2019); \\n    f(1); \\n    f(2, 1); \\n    f(0); \\n    f(0L); \\n    //! f(); // Won\\u2019t compile -- ambiguous\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a428da700a463287bc366976e01513b\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"first\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9db828a52529be7aba68786374ae5fc2\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"second\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a23a57ca88eb0cf3665c892c17df5b98\",\n        \"type\": \"source_code\",\n        \"text\": \"f(1, \\u2018a\\u2019); \\n    f(\\u2018a\\u2019, \\u2018b\\u2019);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a428da700a463287bc366976e01513b\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"first\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"968c928ee4fe7c2176e61abcb5b39690\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"second\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a23a57ca88eb0cf3665c892c17df5b98\",\n        \"type\": \"source_code\",\n        \"text\": \"f(1, \\u2018a\\u2019); \\n    f(\\u2018a\\u2019, \\u2018b\\u2019);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f770bc1cf63d9597722fa0e181ceffe1\",\n        \"type\": \"source_code\",\n        \"text\": \"Spiciness howHot = Spiciness.MEDIUM; \\n    System.out.println(howHot);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8367272c9896d322bdfe71c91017662\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Spiciness s : Spiciness.values()) \\n      System.out.println(s + \\\", ordinal \\\" + s.ordinal());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"41f41c554b1a466d40fde5615dcdb39e\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"This burrito is \\\"); \\n    switch(degree) { \\n      case NOT:    System.out.println(\\\"not spicy at all.\\\"); \\n                   break; \\n      case MILD: \\n      case MEDIUM: System.out.println(\\\"a little hot.\\\"); \\n                   break; \\n      case HOT: \\n      case FLAMING: \\n      default:     System.out.println(\\\"maybe too hot.\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"faeac1aa767d035fdcea6e6b084eb47d\",\n        \"type\": \"source_code\",\n        \"text\": \"Burrito \\n      plain = new Burrito(Spiciness.NOT), \\n      greenChile = new Burrito(Spiciness.MEDIUM), \\n      jalapeno = new Burrito(Spiciness.HOT); \\n    plain.describe(); \\n    greenChile.describe(); \\n    jalapeno.describe();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25fb5d5f282467bce50be4bec8f3cc1d\",\n        \"type\": \"source_code\",\n        \"text\": \"java.util.ArrayList list = new java.util.ArrayList();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b6d7eeb1d84351419fc201dee0c3585b\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList list = new java.util.ArrayList();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f7cf63937bff8e8e1f47c4a358aa2ff\",\n        \"type\": \"source_code\",\n        \"text\": \"access.mypackage.MyClass m = \\n      new access.mypackage.MyClass();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e11ee059dc88260995adf2a565681b3b\",\n        \"type\": \"source_code\",\n        \"text\": \"MyClass m = new MyClass();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e6bfdea0270494e22d4bfe715b0b6457\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"net.mindview.simple.Vector\\\");\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4650a80b8ab061b28711481475f07793\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"net.mindview.simple.List\\\");\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9714149602858f805aca8995ae6e4ef2\",\n        \"type\": \"source_code\",\n        \"text\": \"Vector v = new Vector(); \\n    List l = new List();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"31739f37657da6d6c6fe86cc6cbda7b0\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(obj);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2f808bc8664ce2ebdfc6aabe957104d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bed673f8f8595cdac7e79f16aa544dd0\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(obj);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97b0540499c51389e0fcd94d9a073bf8\",\n        \"type\": \"source_code\",\n        \"text\": \"return System.out.printf(format, args);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"173c7f44c345ef4d393afd26bf0db535\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Available from now on!\\\"); \\n    print(100); \\n    print(100L); \\n    print(3.14159);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5e5093ebd3d0f818e11994a789b1fb9\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] result = new int[n]; \\n    for(int i = 0; i < n; i++) \\n      result[i] = i; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"761e7a0c6b821c78434731cd44031971\",\n        \"type\": \"source_code\",\n        \"text\": \"int sz = end - start; \\n    int[] result = new int[sz]; \\n    for(int i = 0; i < sz; i++) \\n      result[i] = start + i; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"714326956da916db2be2df6c8cdb3c5d\",\n        \"type\": \"source_code\",\n        \"text\": \"int sz = (end - start)/step; \\n    int[] result = new int[sz]; \\n    for(int i = 0; i < sz; i++) \\n      result[i] = start + (i * step); \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"edbf10499837f19785e769ea9f6b7c88\",\n        \"type\": \"source_code\",\n        \"text\": \"Cookie x = new Cookie(); \\n    //! x.bite(); // Can\\u2019t access\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9777c5bd76c7ec33373793dd3743ca6e\",\n        \"type\": \"source_code\",\n        \"text\": \"Pie x = new Pie(); \\n    x.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25fb6ab01271250af429429ec35fec5d\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Sundae();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2fe8d067242032a565095251e52f6aa3\",\n        \"type\": \"source_code\",\n        \"text\": \"//! Sundae x = new Sundae(); \\n    Sundae x = Sundae.makeASundae();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f81e4d34fce4e867045572b8b02f0058\",\n        \"type\": \"source_code\",\n        \"text\": \"//! bite(); // Can\\u2019t access bite\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0698b8131a18141538b7a2c784ae9b43\",\n        \"type\": \"source_code\",\n        \"text\": \"ChocolateChip x = new ChocolateChip(); \\n    x.chomp();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0098e2ece1303e56ce8874223ef0b745\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Cookie constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12ecbce3e1ca704c896bfb0a20c98514\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"bite\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f69a6db9719cf1365b22ffc0ff2f2279\",\n        \"type\": \"source_code\",\n        \"text\": \"ChocolateChip2 x = new ChocolateChip2(); \\n    x.chomp();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f5e40fd0b554f560197e90897ad31b5\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Soup1();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b1151460c53c61af5d6552abeb6847c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return ps1;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d5e8e583fe264217162a36d3837b2b\",\n        \"type\": \"source_code\",\n        \"text\": \"// Can\\u2019t do this! Private constructor: \\n    //! Soup1 soup = new Soup1();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"237a2456239fbf0abbd66e442cb3ccb9\",\n        \"type\": \"source_code\",\n        \"text\": \"Soup1 soup = Soup1.makeSoup();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f46aa7ab921e2d10375c3e4d1ec4dc4a\",\n        \"type\": \"source_code\",\n        \"text\": \"Soup2.access().f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"afe31ac4bb128e8897d0d9f5889c7750\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Creating a packaged class\\\");\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6630d2e97550494685d19f69a6c4acad\",\n        \"type\": \"source_code\",\n        \"text\": \"PackagedClass pc = new PackagedClass();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48cd67e352f78596246303b4ced459d7\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"WaterSource()\\\"); \\n    s = \\\"Constructed\\\";\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cee680b9e18d79a04f7f73d1333099f0\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"valve1 = \\\" + valve1 + \\\" \\\" + \\n      \\\"valve2 = \\\" + valve2 + \\\" \\\" + \\n      \\\"valve3 = \\\" + valve3 + \\\" \\\" + \\n      \\\"valve4 = \\\" + valve4 + \\\"\\\\n\\\" + \\n      \\\"i = \\\" + i + \\\" \\\" + \\\"f = \\\" + f + \\\" \\\" + \\n      \\\"source = \\\" + source;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8670a68068c44345d50c15da2eeb1647\",\n        \"type\": \"source_code\",\n        \"text\": \"SprinklerSystem sprinklers = new SprinklerSystem(); \\n    System.out.println(sprinklers);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5f69786957b7d36c1e475050ac5fb21\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Soap()\\\"); \\n    s = \\\"Constructed\\\";\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"99de4ec13c36b72a793587d57895b58e\",\n        \"type\": \"source_code\",\n        \"text\": \"s1 = \\\"Happy\\\", \\n    s2 = \\\"Happy\\\", \\n    s3, s4;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5692f3a1c9e2f2e9ccbc881ce320576\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Inside Bath()\\\"); \\n    s3 = \\\"Joy\\\"; \\n    toy = 3.14f; \\n    castille = new Soap();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4d0723ade824d2b22b75c59b4ee1563a\",\n        \"type\": \"source_code\",\n        \"text\": \"if(s4 == null) // Delayed initialization: \\n      s4 = \\\"Joy\\\"; \\n    return \\n      \\\"s1 = \\\" + s1 + \\\"\\\\n\\\" + \\n      \\\"s2 = \\\" + s2 + \\\"\\\\n\\\" + \\n      \\\"s3 = \\\" + s3 + \\\"\\\\n\\\" + \\n      \\\"s4 = \\\" + s4 + \\\"\\\\n\\\" + \\n      \\\"i = \\\" + i + \\\"\\\\n\\\" + \\n      \\\"toy = \\\" + toy + \\\"\\\\n\\\" + \\n      \\\"castille = \\\" + castille;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e243778b3856121200afbdefeaae8dc1\",\n        \"type\": \"source_code\",\n        \"text\": \"Bath b = new Bath(); \\n    print(b);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"037d252cd9c06d45ba06e865bdcaa9a9\",\n        \"type\": \"source_code\",\n        \"text\": \"Cleanser x = new Cleanser(); \\n    x.dilute(); x.apply(); x.scrub(); \\n    print(x);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8944222fb81f7ee8a62ec00f457651cc\",\n        \"type\": \"source_code\",\n        \"text\": \"append(\\\" Detergent.scrub()\\\"); \\n    super.scrub(); // Call base-class version\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d350320f80793490eecd95645cbbd303\",\n        \"type\": \"source_code\",\n        \"text\": \"Detergent x = new Detergent(); \\n    x.dilute(); \\n    x.apply(); \\n    x.scrub(); \\n    x.foam(); \\n    print(x); \\n    print(\\\"Testing base class:\\\"); \\n    Cleanser.main(args);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a7293696cd467ed08786e6fb7769bc0d\",\n        \"type\": \"source_code\",\n        \"text\": \"Cartoon x = new Cartoon();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2a820390797610b1747d340dc9e3d3f6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Game constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a61b83c1bdf30e80eee16a8e4ec964ba\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"BoardGame constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e91b06933fe2e5136cc9b8968d65ec0\",\n        \"type\": \"source_code\",\n        \"text\": \"super(11); \\n    print(\\\"Chess constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fdab6ac8e5b6798345dcb5eb6181b7e5\",\n        \"type\": \"source_code\",\n        \"text\": \"Chess x = new Chess();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a3e6d461a5b8209bcbbf5fc280ccd9f\",\n        \"type\": \"source_code\",\n        \"text\": \"SpaceShip protector = new SpaceShip(\\\"NSEA Protector\\\"); \\n    protector.forward(100);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"703eb6e1ec5bb62045c4b6203b2d84ba\",\n        \"type\": \"source_code\",\n        \"text\": \"new SpaceShipControls();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48dd2b276fcdf83154c38dfbcd063d72\",\n        \"type\": \"source_code\",\n        \"text\": \"this.name = name;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"99adeb40ed72aeed1e9a14e107e0e4a2\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.back(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6362ead78dccbf7a2720f26a9f6564f7\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.down(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc929cb1d4491fafe7600217202e8473\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.forward(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ec403683c3166923cc8aedd10c3e562\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.left(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"88453c85819466f3b74260103fe8bec8\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.right(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5b59e7bc66d6341bfcb63a30b79b3c6\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.turboBoost();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"262ed99d7b0a5b7b5eb38981f10aed90\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.up(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c0b27f8e76fd3234f0f74d52dceeac3\",\n        \"type\": \"source_code\",\n        \"text\": \"SpaceShipDelegation protector = \\n      new SpaceShipDelegation(\\\"NSEA Protector\\\"); \\n    protector.forward(100);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4bcf519ab3a54ea774b6ae3c56b70fde\",\n        \"type\": \"source_code\",\n        \"text\": \"and inheritance\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6dbf619439e3f92f44109ca07989c9ed\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Plate constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8a9d8bc5223e4d1a0d7433dd833e97b\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"DinnerPlate constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7eaa86b24872cd8ba5ac39b96ce26d2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Utensil constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"56858595e3e82285bb06dabfa6f06e54\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"Spoon constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65a13c2c38d94552cd699b152fed7d67\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"Fork constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"84e89f1c816e2f5a1abfc25726e2b908\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"Knife constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"760ecf97525d487116b453ad460a16f3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Custom constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"41c555b6c4b715d88e3cf1b1c2b6216c\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i + 1); \\n    sp = new Spoon(i + 2); \\n    frk = new Fork(i + 3); \\n    kn = new Knife(i + 4); \\n    pl = new DinnerPlate(i + 5); \\n    print(\\\"PlaceSetting constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"872d845281ef0d44dbd3a0c57da59322\",\n        \"type\": \"source_code\",\n        \"text\": \"PlaceSetting x = new PlaceSetting(9);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04056631cc0cc9f716fd5d47ea05f626\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"Drawing Circle\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"45ccf1dee2f222293af1f969d7ee4cb3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Erasing Circle\\\"); \\n    super.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7355487cbbd28c1e47e6383d21a54b16\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"Drawing Triangle\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"230613d2add6f50e305c37329da433d8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Erasing Triangle\\\"); \\n    super.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33ee1c62beda1d7e1ba439937487734e\",\n        \"type\": \"source_code\",\n        \"text\": \"super(start); \\n    this.start = start; \\n    this.end = end; \\n    print(\\\"Drawing Line: \\\" + start + \\\", \\\" + end);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ff6d3a20a633f3ac40afc699cd0fa56\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Erasing Line: \\\" + start + \\\", \\\" + end); \\n    super.dispose();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f804727c2510e5bea86394f01d94a9fc\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i + 1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"81257a5ab98aed2682b53e4dc11ddae4\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int j = 0; j < lines.length; j++) \\n      lines[j] = new Line(j, j*j); \\n    c = new Circle(1); \\n    t = new Triangle(1); \\n    print(\\\"Combined constructor\\\");\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"361df9e76fa6f6197c673c813b5b6939\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"CADSystem.dispose()\\\"); \\n    // The order of cleanup is the reverse \\n    // of the order of initialization: \\n    t.dispose(); \\n    c.dispose(); \\n    for(int i = lines.length - 1; i >= 0; i--) \\n      lines[i].dispose(); \\n    super.dispose();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2d284c7fcddfbb35b24c8f4b1f175c38\",\n        \"type\": \"source_code\",\n        \"text\": \"CADSystem x = new CADSystem(47); \\n    try { \\n      // Code and exception handling... \\n    } finally { \\n      x.dispose(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b9ea72b631efa1d6fa033e906de5a83\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"doh(char)\\\"); \\n    return \\u2018d\\u2019;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0bc52188a93830892a38229d81469873\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"doh(float)\\\"); \\n    return 1.0f;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f42ba8783473f19e74a75e988f30436\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"doh(Milhouse)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"201220eef4b5da9800f98763e118fdf5\",\n        \"type\": \"source_code\",\n        \"text\": \"Bart b = new Bart(); \\n    b.doh(1); \\n    b.doh(\\u2018x\\u2019); \\n    b.doh(1.0f);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7e76acd928c671d2b75705d7aff2199e\",\n        \"type\": \"source_code\",\n        \"text\": \"b.doh(new Milhouse());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6e0082766da046589c4da6eda8fe8b21\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"doh(Milhouse)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"31c8d2f11ee0472c584dc8b8fa75c45d\",\n        \"type\": \"source_code\",\n        \"text\": \"vs. inheritance\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"948ee191cd3bfc59ee70261c984f9bbb\",\n        \"type\": \"source_code\",\n        \"text\": \"left = new Door(), \\n    right = new Door(); // 2-door\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b20ad638b2648aee82d5b9f78cc0c098\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 4; i++) \\n      wheel[i] = new Wheel();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ab3b3bf8884eaec252c134a41a19f69\",\n        \"type\": \"source_code\",\n        \"text\": \"Car car = new Car(); \\n    car.left.window.rollup(); \\n    car.wheel[0].inflate(72);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72863a1e788016fb27ad5466872a6cf0\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"I\\u2019m a Villain and my name is \\\" + name;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43393275a12ee83f464450cd312006e9\",\n        \"type\": \"source_code\",\n        \"text\": \"super(name); \\n    this.orcNumber = orcNumber;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6ec6ac0adfd6e4a0c1d101a319b79084\",\n        \"type\": \"source_code\",\n        \"text\": \"set(name); // Available because it\\u2019s protected \\n    this.orcNumber = orcNumber;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1073d7cd9027e89139ce301770c45593\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Orc \\\" + orcNumber + \\\": \\\" + super.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f838c8ec7cdde3110c762a629615690c\",\n        \"type\": \"source_code\",\n        \"text\": \"Orc orc = new Orc(\\\"Limburger\\\", 12); \\n    print(orc); \\n    orc.change(\\\"Bob\\\", 19); \\n    print(orc);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb24a749d504fc7dfc162e0a191422a0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8515b36b424c3dcbe7a6584608aafdf2\",\n        \"type\": \"source_code\",\n        \"text\": \"Wind flute = new Wind(); \\n    Instrument.tune(flute); // Upcasting\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7526502e17951cc39996c93eebcbf27\",\n        \"type\": \"source_code\",\n        \"text\": \"return id + \\\": \\\" + \\\"i4 = \\\" + i4 + \\\", INT_5 = \\\" + INT_5;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2bc44c3472d9e6c82c7d8e61422c4412\",\n        \"type\": \"source_code\",\n        \"text\": \"FinalData fd1 = new FinalData(\\\"fd1\\\"); \\n    //! fd1.valueOne++; // Error: can\\u2019t change value \\n    fd1.v2.i++; // Object isn\\u2019t constant! \\n    fd1.v1 = new Value(9); // OK -- not final \\n    for(int i = 0; i < fd1.a.length; i++) \\n      fd1.a[i]++; // Object isn\\u2019t constant! \\n    //! fd1.v2 = new Value(0); // Error: Can\\u2019t \\n    //! fd1.VAL_3 = new Value(1); // change reference \\n    //! fd1.a = new int[3]; \\n    print(fd1); \\n    print(\\\"Creating new FinalData\\\"); \\n    FinalData fd2 = new FinalData(\\\"fd2\\\"); \\n    print(fd1); \\n    print(fd2);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d53792db3738eff2c670bcbb593601d5\",\n        \"type\": \"source_code\",\n        \"text\": \"j = 1; // Initialize blank final \\n    p = new Poppet(1); // Initialize blank final reference\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f80c2e5073e63efc08c42d9ba4f01de\",\n        \"type\": \"source_code\",\n        \"text\": \"j = x; // Initialize blank final \\n    p = new Poppet(x); // Initialize blank final reference\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0798821961f0ae2d2db1b95ca691fec7\",\n        \"type\": \"source_code\",\n        \"text\": \"new BlankFinal(); \\n    new BlankFinal(47);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ca77411f2ae8f6f2e77ad8527757eb7\",\n        \"type\": \"source_code\",\n        \"text\": \"//! g = new Gizmo(); // Illegal -- g is final\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0be164683dfb9f03697c584c4bcfd35d\",\n        \"type\": \"source_code\",\n        \"text\": \"g = new Gizmo(); // OK -- g not final \\n    g.spin();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a936bb309159061dda5ba9addb3ca257\",\n        \"type\": \"source_code\",\n        \"text\": \"FinalArguments bf = new FinalArguments();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7adc9819b052113101688cbf90ed9c75\",\n        \"type\": \"source_code\",\n        \"text\": \"bf.without(null); \\n    bf.with(null);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd8580879b1527af1b7875714e8923cb\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"OverridingPrivate.f()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dfc8a63bce1820d638074ef738d6a9ef\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"OverridingPrivate.g()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c22a1b908caf89c5bc1d553276be55e\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"OverridingPrivate2.f()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee57df4c4afc609e0aad09aded031283\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"OverridingPrivate2.g()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ce0bb5b9f1903a97faed7acc193589b2\",\n        \"type\": \"source_code\",\n        \"text\": \"OverridingPrivate2 op2 = new OverridingPrivate2(); \\n    op2.f(); \\n    op2.g(); \\n    // You can upcast: \\n    OverridingPrivate op = op2; \\n    // But you can\\u2019t call the methods: \\n    //! op.f(); \\n    //! op.g(); \\n    // Same here: \\n    WithFinals wf = op2; \\n    //! wf.f(); \\n    //! wf.g();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3b4f2ce2fce481beccfcedb15ee11b5\",\n        \"type\": \"source_code\",\n        \"text\": \"Dinosaur n = new Dinosaur(); \\n    n.f(); \\n    n.i = 40; \\n    n.j++;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52fec0181ba763a8c2ca5544ea571d96\",\n        \"type\": \"source_code\",\n        \"text\": \"class loading\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94ef7d2973079f121daf5db556c52ac3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"i = \\\" + i + \\\", j = \\\" + j); \\n    j = 39;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61e3b24469999e97e97d5a75a8559940\",\n        \"type\": \"source_code\",\n        \"text\": \"printInit(\\\"static Insect.x1 initialized\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26c74c3c69c612c4a7c098d631c60b8d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(s); \\n    return 47;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"484f12206ce143e77594192c1668796b\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"k = \\\" + k); \\n    print(\\\"j = \\\" + j);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e47a828429670e4718c862ec243a6691\",\n        \"type\": \"source_code\",\n        \"text\": \"printInit(\\\"static Beetle.x2 initialized\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d236feb56461b901e5a4e323d615899d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Beetle constructor\\\"); \\n    Beetle b = new Beetle();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1fbcbce1e61df7098fcec349961d9281\",\n        \"type\": \"source_code\",\n        \"text\": \"MIDDLE_C, C_SHARP, B_FLAT; // Etc.\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d00e484cc147da8db82c8cd4fcf85c72\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Instrument.play()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"73a8b2cc9dd6a03c85b70ac63bf4246f\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Wind.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ed7b18f6ff44405505e177be08512c0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40ec378312c9aa9bd2ff6e2c97b62831\",\n        \"type\": \"source_code\",\n        \"text\": \"Wind flute = new Wind(); \\n    tune(flute); // Upcasting\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b7ae7b840ceb6a0d66e23c186d3d921\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Stringed.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ab77fbbcfa5200e694117bb8233b782\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Brass.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39a1dcdee3f558ee7805df19d96dba01\",\n        \"type\": \"source_code\",\n        \"text\": \"i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39a1dcdee3f558ee7805df19d96dba01\",\n        \"type\": \"source_code\",\n        \"text\": \"i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39a1dcdee3f558ee7805df19d96dba01\",\n        \"type\": \"source_code\",\n        \"text\": \"i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ddfcdf4e2c5f03086482332771c19c4\",\n        \"type\": \"source_code\",\n        \"text\": \"Wind flute = new Wind(); \\n    Stringed violin = new Stringed(); \\n    Brass frenchHorn = new Brass(); \\n    tune(flute); // No upcasting \\n    tune(violin); \\n    tune(frenchHorn);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ed7b18f6ff44405505e177be08512c0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24012790c994dcab1eb18d74030da170\",\n        \"type\": \"source_code\",\n        \"text\": \"switch(rand.nextInt(3)) { \\n      default: \\n      case 0: return new Circle(); \\n      case 1: return new Square(); \\n      case 2: return new Triangle(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d737a4a7a8940944b9b120dbf3226ce8\",\n        \"type\": \"source_code\",\n        \"text\": \"new RandomShapeGenerator();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c58b522dd2f5e7013e638147c1eb71b\",\n        \"type\": \"source_code\",\n        \"text\": \"Shape[] s = new Shape[9]; \\n    // Fill up the array with shapes: \\n    for(int i = 0; i < s.length; i++) \\n      s[i] = gen.next(); \\n    // Make polymorphic method calls: \\n    for(Shape shp : s) \\n      shp.draw();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ed7b18f6ff44405505e177be08512c0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c1fbc6d3a43dc0f39df95a3cbad024a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Instrument i : e) \\n      tune(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9575115749797aa5a3415bdc6f0820d9\",\n        \"type\": \"source_code\",\n        \"text\": \"// Upcasting during addition to the array: \\n    Instrument[] orchestra = { \\n      new Wind(), \\n      new Percussion(), \\n      new Stringed(), \\n      new Brass(), \\n      new Woodwind() \\n    }; \\n    tuneAll(orchestra);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8806f544f328f64bbfbf2e789826a19\",\n        \"type\": \"source_code\",\n        \"text\": \"PrivateOverride po = new Derived(); \\n    po.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db8e78a714b5c65fbe85001ba85d3e4c\",\n        \"type\": \"source_code\",\n        \"text\": \"Super sup = new Sub(); // Upcast \\n    System.out.println(\\\"sup.field = \\\" + sup.field + \\n      \\\", sup.getField() = \\\" + sup.getField()); \\n    Sub sub = new Sub(); \\n    System.out.println(\\\"sub.field = \\\" + \\n      sub.field + \\\", sub.getField() = \\\" + \\n      sub.getField() + \\n      \\\", sub.getSuperField() = \\\" + \\n      sub.getSuperField());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"99f56fb9d6347869297ea45bab5aefc8\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Base staticGet()\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c21ebf40c7d278f573b5a9b623a6cfc2\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Base dynamicGet()\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2d3ed26466ff8337ff1d3d02082a93d\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Derived staticGet()\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c5f99be01dd0c67317de7d9b78520c7f\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Derived dynamicGet()\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5787a2ad6fcfaaf787dd8ea7d62febc4\",\n        \"type\": \"source_code\",\n        \"text\": \"StaticSuper sup = new StaticSub(); // Upcast \\n    System.out.println(sup.staticGet()); \\n    System.out.println(sup.dynamicGet());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf2f5725b274e5ad93cd68e62ae57e1b\",\n        \"type\": \"source_code\",\n        \"text\": \"new Sandwich();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c2ff12025c1b081d4ced6a16266045b\",\n        \"type\": \"source_code\",\n        \"text\": \"this.s = s; \\n    print(\\\"Creating Characteristic \\\" + s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e0f17e8118f4e1767fde911ac511746\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"disposing Characteristic \\\" + s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9511b0b2fdd96babcb98a90ec7ed5d5\",\n        \"type\": \"source_code\",\n        \"text\": \"this.s = s; \\n    print(\\\"Creating Description \\\" + s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3c1a55e1ecbfccae8a88aaf64b12b25f\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"disposing Description \\\" + s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1e3cfaa610628dddf6510f6beab9a47a\",\n        \"type\": \"source_code\",\n        \"text\": \"new Characteristic(\\\"is alive\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2033fbac946049c7550ed13e8958ad5c\",\n        \"type\": \"source_code\",\n        \"text\": \"new Description(\\\"Basic Living Creature\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a77011f44e66210f2f1f579e310823a8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"LivingCreature()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ae692d142ced1e4a21a58825bf77826\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"LivingCreature dispose\\\"); \\n    t.dispose(); \\n    p.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b8fc158caadb42928fca9e72322c94c7\",\n        \"type\": \"source_code\",\n        \"text\": \"new Characteristic(\\\"has heart\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"032bd1b61910f4eed1d951da0dac2460\",\n        \"type\": \"source_code\",\n        \"text\": \"new Description(\\\"Animal not Vegetable\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8feeb7b5d0212fd8dc059798d079ec0\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Animal dispose\\\"); \\n    t.dispose(); \\n    p.dispose(); \\n    super.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3bc723349ab889100cc82c3546df84f0\",\n        \"type\": \"source_code\",\n        \"text\": \"new Characteristic(\\\"can live in water\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b2c370b6464b54fa406aa70054eca32c\",\n        \"type\": \"source_code\",\n        \"text\": \"new Description(\\\"Both water and land\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"13d4f5b4476f53b448d75dcfa69f21f2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Amphibian()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab3e1c0464f71af9c4761db22e3188e8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Amphibian dispose\\\"); \\n    t.dispose(); \\n    p.dispose(); \\n    super.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2d8243cee28d14512847a8ce6d60a96e\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Frog dispose\\\"); \\n    t.dispose(); \\n    p.dispose(); \\n    super.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1f3cc37e8a38489cc5a33ff2f82d7c8\",\n        \"type\": \"source_code\",\n        \"text\": \"Frog frog = new Frog(); \\n    print(\\\"Bye!\\\"); \\n    frog.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4934f8467c018282892a28d3826dfac\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Creating \\\" + this);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6549b5a7be246fadffa3e18a419b27bb\",\n        \"type\": \"source_code\",\n        \"text\": \"if(--refcount == 0) \\n      print(\\\"Disposing \\\" + this);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44101caafa6a98c31cf584dee93ffacb\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Creating \\\" + this); \\n    this.shared = shared; \\n    this.shared.addRef();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8ccc41987b356c710300b2f69e73487\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"disposing \\\" + this); \\n    shared.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e457ad86d3357f17d754ca6f3ea8a751\",\n        \"type\": \"source_code\",\n        \"text\": \"Shared shared = new Shared(); \\n    Composing[] composing = { new Composing(shared), \\n      new Composing(shared), new Composing(shared), \\n      new Composing(shared), new Composing(shared) }; \\n    for(Composing c : composing) \\n      c.dispose();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbac118f5b81f3d46b70d5f4b4383b91\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Glyph() before draw()\\\"); \\n    draw(); \\n    print(\\\"Glyph() after draw()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f81d6bf22b3c734e46c91f31d586b8dc\",\n        \"type\": \"source_code\",\n        \"text\": \"radius = r; \\n    print(\\\"RoundGlyph.RoundGlyph(), radius = \\\" + radius);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0933e4e8226f5da08235cb2b55ba31ed\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"RoundGlyph.draw(), radius = \\\" + radius);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"600a24af8df51e4bb7fbe6dcc89585ef\",\n        \"type\": \"source_code\",\n        \"text\": \"new RoundGlyph(5);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab86120a6fdd4492964258657b8f8212\",\n        \"type\": \"source_code\",\n        \"text\": \"Mill m = new Mill(); \\n    Grain g = m.process(); \\n    System.out.println(g); \\n    m = new WheatMill(); \\n    g = m.process(); \\n    System.out.println(g);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"072fa68228a391ccd723876b8f59c4fc\",\n        \"type\": \"source_code\",\n        \"text\": \"Stage stage = new Stage(); \\n    stage.performPlay(); \\n    stage.change(); \\n    stage.performPlay();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5d05444a7488e96075b179061547eb5\",\n        \"type\": \"source_code\",\n        \"text\": \"Useful[] x = { \\n      new Useful(), \\n      new MoreUseful() \\n    }; \\n    x[0].f(); \\n    x[1].g(); \\n    // Compile time: method not found in Useful: \\n    //! x[1].u(); \\n    ((MoreUseful)x[1]).u(); // Downcast/RTTI \\n    ((MoreUseful)x[0]).u(); // Exception thrown\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"06b5da9bb20b3ef8f2ac6790f219533f\",\n        \"type\": \"source_code\",\n        \"text\": \"and methods\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ac49615a7dfd98fb79908cd218f63376\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Wind.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d094ff2440591f02ac7e819b5b421552\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Percussion.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b7ae7b840ceb6a0d66e23c186d3d921\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Stringed.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ab77fbbcfa5200e694117bb8233b782\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Brass.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e49e3f18d682a296644be9e13e6098ad\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Woodwind.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ed7b18f6ff44405505e177be08512c0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c1fbc6d3a43dc0f39df95a3cbad024a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Instrument i : e) \\n      tune(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6864639c4220ee4073cc123dcaea72ad\",\n        \"type\": \"source_code\",\n        \"text\": \"// Upcasting during addition to the array: \\n    Instrument[] orchestra = { \\n      new Wind(), \\n      new Percussion(), \\n      new Stringed(), \\n      new Brass(), \\n      new Woodwind() \\n    };\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8bea778fe8b5676d2f5539e69f74b3c4\",\n        \"type\": \"source_code\",\n        \"text\": \"tuneAll(orchestra);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e84ff6689d410d1255df01ba4df5c8c\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\".play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e84ff6689d410d1255df01ba4df5c8c\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\".play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e84ff6689d410d1255df01ba4df5c8c\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\".play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ed7b18f6ff44405505e177be08512c0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c1fbc6d3a43dc0f39df95a3cbad024a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Instrument i : e) \\n      tune(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90335a5cb256bbcc7e784b868c5e1e12\",\n        \"type\": \"source_code\",\n        \"text\": \"// Upcasting during addition to the array: \\n    Instrument[] orchestra = { \\n      new Wind(), \\n      new Percussion(), \\n      new Stringed(),\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"18031c7867301a3ae750c34a837a19e4\",\n        \"type\": \"source_code\",\n        \"text\": \"new Brass(), \\n      new Woodwind() \\n    }; \\n    tuneAll(orchestra);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7a42b7b8d3e8f08adc688a8af9d40a1\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fdc62e44d4d6da2f0796e9d31edcb3e7\",\n        \"type\": \"source_code\",\n        \"text\": \"return ((String)input).toUpperCase();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03424e019ce02f6ade0b5b9cc82ae487\",\n        \"type\": \"source_code\",\n        \"text\": \"return ((String)input).toLowerCase();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b4dafa41406b18cfc571ca5841b203a\",\n        \"type\": \"source_code\",\n        \"text\": \"// The split() argument divides a String into pieces: \\n    return Arrays.toString(((String)input).split(\\\" \\\"));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aae49febd9e036d819a20a67df1eada6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Using Processor \\\" + p.name()); \\n    print(p.process(s));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2f1ae9d12c2904b3516903b03bafb036\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Disagreement with beliefs is by definition incorrect\\\";\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"71bd6f928b38b7a946b10235b33efca0\",\n        \"type\": \"source_code\",\n        \"text\": \"process(new Upcase(), s); \\n    process(new Downcase(), s); \\n    process(new Splitter(), s);\",\n        \"programming_language\": \"TASM\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7a42b7b8d3e8f08adc688a8af9d40a1\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e06ee47a9340c0a700b995c82bd8fcb3\",\n        \"type\": \"source_code\",\n        \"text\": \"return input; // Dummy processing\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40aaf5c3b233a67d3640fb7711477419\",\n        \"type\": \"source_code\",\n        \"text\": \"lowCutoff = lowCut; \\n    highCutoff = highCut;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aae49febd9e036d819a20a67df1eada6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Using Processor \\\" + p.name()); \\n    print(p.process(s));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7a42b7b8d3e8f08adc688a8af9d40a1\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"accf774b2da71e43f912aff76f2b5422\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"If she weighs the same as a duck, she\\u2019s made of wood\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0a4369e5c82ac45dceeb2b7ff15cbd4b\",\n        \"type\": \"source_code\",\n        \"text\": \"Apply.process(new Upcase(), s); \\n    Apply.process(new Downcase(), s); \\n    Apply.process(new Splitter(), s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fdc62e44d4d6da2f0796e9d31edcb3e7\",\n        \"type\": \"source_code\",\n        \"text\": \"return ((String)input).toUpperCase();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03424e019ce02f6ade0b5b9cc82ae487\",\n        \"type\": \"source_code\",\n        \"text\": \"return ((String)input).toLowerCase();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48eaefced7b1932197c4a5fac7bf693b\",\n        \"type\": \"source_code\",\n        \"text\": \"return Arrays.toString(((String)input).split(\\\" \\\"));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbcc0a96a94f208d66cce6047a91e68e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.filter = filter;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"252d31b86c8202b099254f5cfa9b38e5\",\n        \"type\": \"source_code\",\n        \"text\": \"return filter.process((Waveform)input);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a9a9b90adf7e846b933c9611dcf64c99\",\n        \"type\": \"source_code\",\n        \"text\": \"Waveform w = new Waveform(); \\n    Apply.process(new FilterAdapter(new LowPass(1.0)), w); \\n    Apply.process(new FilterAdapter(new HighPass(2.0)), w); \\n    Apply.process( \\n      new FilterAdapter(new BandPass(3.0, 4.0)), w);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35328905f36b4ac9f689d0bf322bcb80\",\n        \"type\": \"source_code\",\n        \"text\": \"implements CanFight, CanSwim, CanFly {\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"58507a42fe743bc9d52a7a6848b645d9\",\n        \"type\": \"source_code\",\n        \"text\": \"Hero h = new Hero(); \\n    t(h); // Treat it as a CanFight \\n    u(h); // Treat it as a CanSwim \\n    v(h); // Treat it as a CanFly \\n    w(h); // Treat it as an ActionCharacter\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4f8f0b69a9b9534f385d4ba67262e72\",\n        \"type\": \"source_code\",\n        \"text\": \"with inheritance\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b9909ee3658bd86bd45c683ccc966545\",\n        \"type\": \"source_code\",\n        \"text\": \"d.menace(); \\n    d.destroy();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30a1674d0b36430914786e0253c3e0ed\",\n        \"type\": \"source_code\",\n        \"text\": \"DangerousMonster barney = new DragonZilla(); \\n    u(barney); \\n    v(barney); \\n    Vampire vlad = new VeryBadVampire(); \\n    u(vlad); \\n    v(vlad); \\n    w(vlad);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbb4a7468d40084bdea295debcb18590\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\".toCharArray();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"332c106d4770af2e4a01321dbb9c9d49\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"abcdefghijklmnopqrstuvwxyz\\\".toCharArray();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5095766d2638cd0d0cb156f94f1c0eaa\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"aeiou\\\".toCharArray();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66874256b28e4184cb5b7e8cb17b108a\",\n        \"type\": \"source_code\",\n        \"text\": \"if(count-- == 0) \\n      return -1; // Indicates end of input \\n    cb.append(capitals[rand.nextInt(capitals.length)]); \\n    for(int i = 0; i < 4; i++) { \\n      cb.append(vowels[rand.nextInt(vowels.length)]); \\n      cb.append(lowers[rand.nextInt(lowers.length)]); \\n    } \\n    cb.append(\\\" \\\"); \\n    return 10; // Number of characters appended\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55b97b0d1537190084479a6d24f8a678\",\n        \"type\": \"source_code\",\n        \"text\": \"Scanner s = new Scanner(new RandomWords(10)); \\n    while(s.hasNext()) \\n      System.out.println(s.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ce3580505270fbff721baf15e1264b0\",\n        \"type\": \"source_code\",\n        \"text\": \"RandomDoubles rd = new RandomDoubles(); \\n    for(int i = 0; i < 7; i ++) \\n      System.out.print(rd.next() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4c0406946c9e5c4d6333b0512abfc61\",\n        \"type\": \"source_code\",\n        \"text\": \"JANUARY = 1, FEBRUARY = 2, MARCH = 3, \\n    APRIL = 4, MAY = 5, JUNE = 6, JULY = 7, \\n    AUGUST = 8, SEPTEMBER = 9, OCTOBER = 10, \\n    NOVEMBER = 11, DECEMBER = 12;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"067a42489d23e82da577005d5bbdd48b\",\n        \"type\": \"source_code\",\n        \"text\": \"print(RandVals.RANDOM_INT); \\n    print(RandVals.RANDOM_LONG); \\n    print(RandVals.RANDOM_FLOAT); \\n    print(RandVals.RANDOM_DOUBLE);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ba4a6eb73d9b10f9e4497822a17ef43\",\n        \"type\": \"source_code\",\n        \"text\": \"void f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ba4a6eb73d9b10f9e4497822a17ef43\",\n        \"type\": \"source_code\",\n        \"text\": \"void f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ba4a6eb73d9b10f9e4497822a17ef43\",\n        \"type\": \"source_code\",\n        \"text\": \"void f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming