; \\n    } \\n    int lines = 0; \\n    try { \\n      Class<?> c = Class.forName(args[0]); \\n      Method[] methods = c.getMethods(); \\n      Constructor[] ctors = c.getConstructors(); \\n      if(args.length == 1) { \\n        for(Method method : methods) \\n          print( \\n            p.matcher(method.toString()).replaceAll(\\\"\\\")); \\n        for(Constructor ctor : ctors) \\n          print(p.matcher(ctor.toString()).replaceAll(\\\"\\\")); \\n        lines = methods.length + ctors.length; \\n      } else { \\n        for(Method method : methods) \\n          if(method.toString().indexOf(args[1]) != -1) { \\n            print( \\n              p.matcher(method.toString()).replaceAll(\\\"\\\")); \\n            lines++; \\n          } \\n        for(Constructor ctor : ctors) \\n          if(ctor.toString().indexOf(args[1]) != -1) { \\n            print(p.matcher( \\n              ctor.toString()).replaceAll(\\\"\\\")); \\n            lines++; \\n          } \\n      } \\n    } catch(ClassNotFoundException e) { \\n      print(\\\"No such class: \\\" + e); \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ce3ca9b952032ec603415aff855c83a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"somethingElse \\\" + arg);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db2ae46569edaf14ded39009e81cf915\",\n        \"type\": \"source_code\",\n        \"text\": \"this.proxied = proxied;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea80d62f3a1cbb2a90020fe637cbaacf\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"SimpleProxy doSomething\\\"); \\n    proxied.doSomething();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25e97f5239566ce22452d18f528e629b\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"SimpleProxy somethingElse \\\" + arg); \\n    proxied.somethingElse(arg);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5424dee6bb237c0996ec4afe639fb6f\",\n        \"type\": \"source_code\",\n        \"text\": \"iface.doSomething(); \\n    iface.somethingElse(\\\"bonobo\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3fe5a2cd028fb023f255a1b33e6894ac\",\n        \"type\": \"source_code\",\n        \"text\": \"consumer(new RealObject()); \\n    consumer(new SimpleProxy(new RealObject()));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db2ae46569edaf14ded39009e81cf915\",\n        \"type\": \"source_code\",\n        \"text\": \"this.proxied = proxied;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b084afeaef656faebbe7f7156b99bcf7\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"**** proxy: \\\" + proxy.getClass() + \\n      \\\", method: \\\" + method + \\\", args: \\\" + args); \\n    if(args != null) \\n      for(Object arg : args) \\n        System.out.println(\\\"  \\\" + arg); \\n    return method.invoke(proxied, args);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5424dee6bb237c0996ec4afe639fb6f\",\n        \"type\": \"source_code\",\n        \"text\": \"iface.doSomething(); \\n    iface.somethingElse(\\\"bonobo\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6003e95b4152cb9415a14b0de744017c\",\n        \"type\": \"source_code\",\n        \"text\": \"RealObject real = new RealObject(); \\n    consumer(real); \\n    // Insert a proxy and call again: \\n    Interface proxy = (Interface)Proxy.newProxyInstance( \\n      Interface.class.getClassLoader(), \\n      new Class[]{ Interface.class }, \\n      new DynamicProxyHandler(real)); \\n    consumer(proxy);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db2ae46569edaf14ded39009e81cf915\",\n        \"type\": \"source_code\",\n        \"text\": \"this.proxied = proxied;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e116c0d25431df3c7692517c89e6665\",\n        \"type\": \"source_code\",\n        \"text\": \"if(method.getName().equals(\\\"interesting\\\")) \\n      print(\\\"Proxy detected the interesting method\\\"); \\n    return method.invoke(proxied, args);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bac6dc816924908c9ed0b899788d5002\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"interesting \\\" + arg);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b4653c80c44101a4fd3d0910e81f9ab\",\n        \"type\": \"source_code\",\n        \"text\": \"SomeMethods proxy= (SomeMethods)Proxy.newProxyInstance( \\n      SomeMethods.class.getClassLoader(), \\n      new Class[]{ SomeMethods.class }, \\n      new MethodSelector(new Implementation())); \\n    proxy.boring1(); \\n    proxy.boring2(); \\n    proxy.interesting(\\\"bonobo\\\"); \\n    proxy.boring3();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bbc65adc1b894e53c8f062175e622c9e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.first = first; \\n    this.last = last; \\n    this.address = address;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a18d2a2830650aebd1277c58e6e0d255\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Person: \\\" + first + \\\" \\\" + last + \\\" \\\" + address;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee0fade2a63f50b64587ef9ce1f5294f\",\n        \"type\": \"source_code\",\n        \"text\": \"private NullPerson() { super(\\\"None\\\", \\\"None\\\", \\\"None\\\"); } \\n    public String toString() { return \\\"NullPerson\\\"; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d51410445565b6826d8589e78a24eae9\",\n        \"type\": \"source_code\",\n        \"text\": \"title = jobTitle; \\n    person = employee; \\n    if(person == null) \\n      person = Person.NULL;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"240a2ef72751b4201ee16cb16583868b\",\n        \"type\": \"source_code\",\n        \"text\": \"title = jobTitle; \\n    person = Person.NULL;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c66e5c4247d4f6d5022b5232918deee2\",\n        \"type\": \"source_code\",\n        \"text\": \"title = newTitle;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff74c9a920407865c8cf1f454729e2e0\",\n        \"type\": \"source_code\",\n        \"text\": \"person = newPerson; \\n    if(person == null) \\n      person = Person.NULL;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"456dc091cfb84b9b2eb0008d3048d296\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Position: \\\" + title + \\\" \\\" + person;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3dcc8708f6d82a87ebc43c1590d22d62\",\n        \"type\": \"source_code\",\n        \"text\": \"add(new Position(title, person));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f91e7d7e1d45a0d982f13ce68e96810d\",\n        \"type\": \"source_code\",\n        \"text\": \"for(String title : titles) \\n      add(new Position(title));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"250388d11a62dfd93a75db4ed56934fc\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Position position : this) \\n      if(position.getTitle().equals(title) && \\n         position.getPerson() == Person.NULL) \\n        return true; \\n    return false;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f8f60602a1ab17e8c5128c15b98b268\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Position position : this) \\n      if(position.getTitle().equals(title) && \\n         position.getPerson() == Person.NULL) { \\n        position.setPerson(hire); \\n        return; \\n      } \\n    throw new RuntimeException( \\n      \\\"Position \\\" + title + \\\" not available\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"943a04e08674e83a58e2a3404f092729\",\n        \"type\": \"source_code\",\n        \"text\": \"Staff staff = new Staff(\\\"President\\\", \\\"CTO\\\", \\n      \\\"Marketing Manager\\\", \\\"Product Manager\\\", \\n      \\\"Project Lead\\\", \\\"Software Engineer\\\", \\n      \\\"Software Engineer\\\", \\\"Software Engineer\\\", \\n      \\\"Software Engineer\\\", \\\"Test Engineer\\\", \\n      \\\"Technical Writer\\\"); \\n    staff.fillPosition(\\\"President\\\", \\n      new Person(\\\"Me\\\", \\\"Last\\\", \\\"The Top, Lonely At\\\")); \\n    staff.fillPosition(\\\"Project Lead\\\",\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7472652187017b5cf51f7c6d7be14ce\",\n        \"type\": \"source_code\",\n        \"text\": \"new Person(\\\"Janet\\\", \\\"Planner\\\", \\\"The Burbs\\\")); \\n    if(staff.positionAvailable(\\\"Software Engineer\\\")) \\n      staff.fillPosition(\\\"Software Engineer\\\", \\n        new Person(\\\"Bob\\\", \\\"Coder\\\", \\\"Bright Light City\\\")); \\n    System.out.println(staff);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cce86f5e55a2f157341f000969c47c83\",\n        \"type\": \"source_code\",\n        \"text\": \"public static void test(Robot r) { \\n      if(r instanceof Null) \\n        System.out.println(\\\"[Null Robot]\\\"); \\n      System.out.println(\\\"Robot name: \\\" + r.name()); \\n      System.out.println(\\\"Robot model: \\\" + r.model()); \\n      for(Operation operation : r.operations()) { \\n        System.out.println(operation.description()); \\n        operation.command(); \\n      } \\n    }\",\n        \"programming_language\": \"Objective-C\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb11d8c2f008f0483484fd9db148a6a5\",\n        \"type\": \"source_code\",\n        \"text\": \"return Arrays.asList( \\n      new Operation() { \\n        public String description() { \\n          return name + \\\" can shovel snow\\\"; \\n        } \\n        public void command() { \\n          System.out.println(name + \\\" shoveling snow\\\"); \\n        } \\n      },\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"02957c4ebc0596de978fdc11bf4d9717\",\n        \"type\": \"source_code\",\n        \"text\": \"new Operation() { \\n        public String description() { \\n          return name + \\\" can chip ice\\\"; \\n        } \\n        public void command() { \\n          System.out.println(name + \\\" chipping ice\\\"); \\n        } \\n      }, \\n      new Operation() { \\n        public String description() { \\n          return name + \\\" can clear the roof\\\"; \\n        } \\n        public void command() { \\n          System.out.println(name + \\\" clearing roof\\\"); \\n        } \\n      } \\n    );\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b5243c6b08ff9674d959912f5c21e87a\",\n        \"type\": \"source_code\",\n        \"text\": \"Robot.Test.test(new SnowRemovalRobot(\\\"Slusher\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30b14f45a6fd49caabd471cc0f95ac31\",\n        \"type\": \"source_code\",\n        \"text\": \"nullName = type.getSimpleName() + \\\" NullRobot\\\";\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68d6e0ad7b637055dc49e09ad323c2f7\",\n        \"type\": \"source_code\",\n        \"text\": \"public String name() { return nullName; } \\n    public String model() { return nullName; } \\n    public List<Operation> operations() { \\n      return Collections.emptyList(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12b7d341fdd3483e82fb9f3a385556ee\",\n        \"type\": \"source_code\",\n        \"text\": \"return method.invoke(proxied, args);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ffbd91058ab4235c9c44df4d5d13098\",\n        \"type\": \"source_code\",\n        \"text\": \"return (Robot)Proxy.newProxyInstance( \\n      NullRobot.class.getClassLoader(), \\n      new Class[]{ Null.class, Robot.class }, \\n      new NullRobotProxyHandler(type));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dcc381cc3ce06ce5fe8f646a12891a4f\",\n        \"type\": \"source_code\",\n        \"text\": \"Robot[] bots = { \\n      new SnowRemovalRobot(\\\"SnowBee\\\"), \\n      newNullRobot(SnowRemovalRobot.class) \\n    }; \\n    for(Robot bot : bots) \\n      Robot.Test.test(bot);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"141ceba1e225b21777b7248a9b0202da\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = new B(); \\n    a.f(); \\n    // a.g(); // Compile error \\n    System.out.println(a.getClass().getName()); \\n    if(a instanceof B) { \\n      B b = (B)a; \\n      b.g(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"89c95fc109f4492023ac5597cc3162a4\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = HiddenC.makeA(); \\n    a.f(); \\n    System.out.println(a.getClass().getName()); \\n    // Compile error: cannot find symbol \\u2018C\\u2019: \\n    /* if(a instanceof C) { \\n      C c = (C)a; \\n      c.g(); \\n    } */ \\n    // Oops! Reflection still allows us to call g(): \\n    callHiddenMethod(a, \\\"g\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d3975e181c5086fa67392eb33db8afc\",\n        \"type\": \"source_code\",\n        \"text\": \"// And even methods that are less accessible! \\n    callHiddenMethod(a, \\\"u\\\"); \\n    callHiddenMethod(a, \\\"v\\\"); \\n    callHiddenMethod(a, \\\"w\\\");\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e13c0751b92e976755fa16e5faace05b\",\n        \"type\": \"source_code\",\n        \"text\": \"Method g = a.getClass().getDeclaredMethod(methodName); \\n    g.setAccessible(true); \\n    g.invoke(a);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4a2a792009a49babdfbf6e931ca1f4ca\",\n        \"type\": \"source_code\",\n        \"text\": \"typeinfo.packageaccess.C(); \\n    public void f( ); \\n    public void g( ); \\n    void u( ); \\n    protected void v( ); \\n    private void w();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e99d1005ea40a8085c5f8fc896815260\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() { print(\\\"public C.f()\\\"); } \\n    public void g() { print(\\\"public C.g()\\\"); } \\n    void u() { print(\\\"package C.u()\\\"); } \\n    protected void v() { print(\\\"protected C.v()\\\"); } \\n    private void w() { print(\\\"private C.w()\\\"); }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"16ce10d4431ea18bc7c174b589c75147\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = InnerA.makeA(); \\n    a.f(); \\n    System.out.println(a.getClass().getName()); \\n    // Reflection still gets into the private class: \\n    HiddenImplementation.callHiddenMethod(a, \\\"g\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"u\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"v\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"w\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"169f5fdab1165c03fc617b56ee3ff9fa\",\n        \"type\": \"source_code\",\n        \"text\": \"return new A() { \\n      public void f() { print(\\\"public C.f()\\\"); } \\n      public void g() { print(\\\"public C.g()\\\"); } \\n      void u() { print(\\\"package C.u()\\\"); } \\n      protected void v() { print(\\\"protected C.v()\\\"); } \\n      private void w() { print(\\\"private C.w()\\\"); } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4b33d6eb0ba8d2a999eb6bb364471a7\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = AnonymousA.makeA(); \\n    a.f(); \\n    System.out.println(a.getClass().getName()); \\n    // Reflection still gets into the anonymous class: \\n    HiddenImplementation.callHiddenMethod(a, \\\"g\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"u\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"v\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"w\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1053a68717a632a5e83d2a036afe5863\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"i = \\\" + i + \\\", \\\" + s + \\\", \\\" + s2;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8aaa48cd34646e62b8b0aaba451b7d97\",\n        \"type\": \"source_code\",\n        \"text\": \"WithPrivateFinalField pf = new WithPrivateFinalField(); \\n    System.out.println(pf); \\n    Field f = pf.getClass().getDeclaredField(\\\"i\\\"); \\n    f.setAccessible(true); \\n    System.out.println(\\\"f.getInt(pf): \\\" + f.getInt(pf)); \\n    f.setInt(pf, 47); \\n    System.out.println(pf); \\n    f = pf.getClass().getDeclaredField(\\\"s\\\"); \\n    f.setAccessible(true); \\n    System.out.println(\\\"f.get(pf): \\\" + f.get(pf)); \\n    f.set(pf, \\\"No, you\\u2019re not!\\\"); \\n    System.out.println(pf); \\n    f = pf.getClass().getDeclaredField(\\\"s2\\\"); \\n    f.setAccessible(true); \\n    System.out.println(\\\"f.get(pf): \\\" + f.get(pf)); \\n    f.set(pf, \\\"No, you\\u2019re not!\\\"); \\n    System.out.println(pf);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"739d74af9d26e1ea4254ea5a3b8c1e9e\",\n        \"type\": \"source_code\",\n        \"text\": \"Holder2 h2 = new Holder2(new Automobile()); \\n    Automobile a = (Automobile)h2.get(); \\n    h2.set(\\\"Not an Automobile\\\"); \\n    String s = (String)h2.get(); \\n    h2.set(1); // Autoboxes to Integer \\n    Integer x = (Integer)h2.get();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e4349e496240bf06d3a10866cc7745a\",\n        \"type\": \"source_code\",\n        \"text\": \"Holder3<Automobile> h3 = \\n      new Holder3<Automobile>(new Automobile()); \\n    Automobile a = h3.get(); // No cast needed \\n    // h3.set(\\\"Not an Automobile\\\"); // Error \\n    // h3.set(1); // Error\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"56805354aad537619a278d2d934be479\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + first + \\\", \\\" + second + \\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"02524d91d7c563c53cad2e5c6eb611df\",\n        \"type\": \"source_code\",\n        \"text\": \"super(a, b); \\n    third = c;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33f443365f486ab82dcca53064679f4f\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + first + \\\", \\\" + second + \\\", \\\" + third +\\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"acb87c1e7286466d34c14685d4f02d79\",\n        \"type\": \"source_code\",\n        \"text\": \"super(a, b, c); \\n    fourth = d;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b76211e900d86213744c92f30bfde36\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + first + \\\", \\\" + second + \\\", \\\" + \\n      third + \\\", \\\" + fourth + \\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2734d7c58fc13c58bde5e5254707628c\",\n        \"type\": \"source_code\",\n        \"text\": \"super(a, b, c, d); \\n    fifth = e;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c905fab718ff526b406e11bc5caeaad2\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + first + \\\", \\\" + second + \\\", \\\" + \\n      third + \\\", \\\" + fourth + \\\", \\\" + fifth + \\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"594107e19226d86015a48100fedc413b\",\n        \"type\": \"source_code\",\n        \"text\": \"// Autoboxing converts the int to Integer: \\n    return new TwoTuple<String,Integer>(\\\"hi\\\", 47);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83dc2861df976e7775a8e0e74a1eab2f\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ThreeTuple<Amphibian, String, Integer>( \\n      new Amphibian(), \\\"hi\\\", 47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f8083716681e7f02666370be9ed3489\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\n      new FourTuple<Vehicle,Amphibian,String,Integer>( \\n        new Vehicle(), new Amphibian(), \\\"hi\\\", 47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7d0f6419db7dcb26775abd30ca2e2b5d\",\n        \"type\": \"source_code\",\n        \"text\": \"return new \\n      FiveTuple<Vehicle,Amphibian,String,Integer,Double>(\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ce116aabf04bb0fe36f22e33ed36c39\",\n        \"type\": \"source_code\",\n        \"text\": \"new Vehicle(), new Amphibian(), \\\"hi\\\", 47, 11.1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c698d6f1ee8cd36106d058724532868c\",\n        \"type\": \"source_code\",\n        \"text\": \"TwoTuple<String,Integer> ttsi = f(); \\n    System.out.println(ttsi); \\n    // ttsi.first = \\\"there\\\"; // Compile error: final \\n    System.out.println(g()); \\n    System.out.println(h()); \\n    System.out.println(k());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"954552ec9e0fbbeffb8ce935afaa8d03\",\n        \"type\": \"source_code\",\n        \"text\": \"U item; \\n    Node<U> next; \\n    Node() { item = null; next = null; } \\n    Node(U item, Node<U> next) { \\n      this.item = item; \\n      this.next = next; \\n    } \\n    boolean end() { return item == null && next == null; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2a4d32c9a1bf4f204cd5e17eb6f1ac6a\",\n        \"type\": \"source_code\",\n        \"text\": \"top = new Node<T>(item, top);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a16189ffd97ed30179c60567f5299282\",\n        \"type\": \"source_code\",\n        \"text\": \"T result = top.item; \\n    if(!top.end()) \\n      top = top.next; \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e969463e64b0a09f3810396335e052ac\",\n        \"type\": \"source_code\",\n        \"text\": \"LinkedStack<String> lss = new LinkedStack<String>(); \\n    for(String s : \\\"Phasers on stun!\\\".split(\\\" \\\")) \\n      lss.push(s); \\n    String s; \\n    while((s = lss.pop()) != null) \\n      System.out.println(s);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6605c0ee499c2892037c2daaaaaf79c5\",\n        \"type\": \"source_code\",\n        \"text\": \"return storage.get(rand.nextInt(storage.size()));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"10da1e02a1949d0e972ec7034d60d183\",\n        \"type\": \"source_code\",\n        \"text\": \"RandomList<String> rs = new RandomList<String>(); \\n    for(String s: (\\\"The quick brown fox jumped over \\\" + \\n        \\\"the lazy brown dog\\\").split(\\\" \\\")) \\n      rs.add(s); \\n    for(int i = 0; i < 11; i++) \\n      System.out.print(rs.select() + \\\" \\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b9ee178e464707ae0e11e1fb27dfff2\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName() + \\\" \\\" + id;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7b4e2e89f33fda39e0b02e937dc57ff\",\n        \"type\": \"source_code\",\n        \"text\": \"Cappuccino.class, Americano.class, Breve.class, };\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"669d42231d3b783d842c9fc919183adb\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      return (Coffee) \\n        types[rand.nextInt(types.length)].newInstance(); \\n      // Report programmer errors at run time: \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c297da491a69691ac98b7fe21223a81\",\n        \"type\": \"source_code\",\n        \"text\": \"int count = size; \\n    public boolean hasNext() { return count > 0; } \\n    public Coffee next() { \\n      count--; \\n      return CoffeeGenerator.this.next(); \\n    } \\n    public void remove() { // Not implemented \\n      throw new UnsupportedOperationException(); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d63e7a58eca3fc28e7688061bf72ebd4\",\n        \"type\": \"source_code\",\n        \"text\": \"return new CoffeeIterator();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b2fac59a78b3a3a91070d048e2df26c\",\n        \"type\": \"source_code\",\n        \"text\": \"CoffeeGenerator gen = new CoffeeGenerator(); \\n    for(int i = 0; i < 5; i++) \\n      System.out.println(gen.next()); \\n    for(Coffee c : new CoffeeGenerator(5)) \\n      System.out.println(c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f3808d3f2b5c7360952f41ad516dec3\",\n        \"type\": \"source_code\",\n        \"text\": \"if(n < 2) return 1; \\n    return fib(n-2) + fib(n-1);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"80147cf2c87c1364530b1bb340ad6da3\",\n        \"type\": \"source_code\",\n        \"text\": \"Fibonacci gen = new Fibonacci(); \\n    for(int i = 0; i < 18; i++) \\n      System.out.print(gen.next() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"784b9e6388d1423f47dff54df75de9cb\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterator<Integer>() { \\n      public boolean hasNext() { return n > 0; } \\n      public Integer next() { \\n        n--; \\n        return IterableFibonacci.this.next(); \\n      } \\n      public void remove() { // Not implemented \\n        throw new UnsupportedOperationException();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"178b01f055543496a0958397b75fba5b\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    };\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"159de8c1ec026eaf896f7d1f154bfdd2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i : new IterableFibonacci(18)) \\n      System.out.print(i + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a41ee7e51b89e58067f9191362b23fa0\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(x.getClass().getName());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3edb607b98062c1de470dab06c559687\",\n        \"type\": \"source_code\",\n        \"text\": \"GenericMethods gm = new GenericMethods(); \\n    gm.f(\\\"\\\"); \\n    gm.f(1); \\n    gm.f(1.0); \\n    gm.f(1.0F); \\n    gm.f(\\u2018c\\u2019); \\n    gm.f(gm);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9489e34d8ed64e1a00c2e55ed8560f6f\",\n        \"type\": \"source_code\",\n        \"text\": \"return new HashMap<K,V>();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1714d30e0ecf60aa599adeddbd36b07a\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ArrayList<T>();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa064c59769a09b68ebcd301e3954895\",\n        \"type\": \"source_code\",\n        \"text\": \"return new LinkedList<T>();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd0ba132b630de1fdd0c8ce899606cd6\",\n        \"type\": \"source_code\",\n        \"text\": \"return new HashSet<T>();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa064c59769a09b68ebcd301e3954895\",\n        \"type\": \"source_code\",\n        \"text\": \"return new LinkedList<T>();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"59400f3e2236eae90e2c9ceed0b924b3\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<String, List<String>> sls = New.map(); \\n    List<String> ls = New.list(); \\n    LinkedList<String> lls = New.lList(); \\n    Set<String> ss = New.set(); \\n    Queue<String> qs = New.queue();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04c2fee72f3deeb844b7f624472fc407\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<Person, List<? extends Pet>> petPeople = New.map(); \\n    // Rest of the code is the same...\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"80f89a0cd74d8b9fafe492a01358900f\",\n        \"type\": \"source_code\",\n        \"text\": \"// f(New.map()); // Does not compile\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eba57739308a20afad53d4c3cfc10b19\",\n        \"type\": \"source_code\",\n        \"text\": \"f(New.<Person, List<Pet>>map());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93e457e6cfbf3af99f5525f531f6a016\",\n        \"type\": \"source_code\",\n        \"text\": \"List<T> result = new ArrayList<T>(); \\n    for(T item : args) \\n      result.add(item); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f29a1ef3699dbd2fc1f539e529ccabc0\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> ls = makeList(\\\"A\\\"); \\n    System.out.println(ls); \\n    ls = makeList(\\\"A\\\", \\\"B\\\", \\\"C\\\"); \\n    System.out.println(ls); \\n    ls = makeList(\\\"ABCDEFFHIJKLMNOPQRSTUVWXYZ\\\".split(\\\"\\\")); \\n    System.out.println(ls);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d360c6da8e3d2a92efb0f064aadb0c2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < n; i++) \\n      coll.add(gen.next()); \\n    return coll;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04a4b10d73cda5d1b34eb73b6ad314e1\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<Coffee> coffee = fill( \\n      new ArrayList<Coffee>(), new CoffeeGenerator(), 4); \\n    for(Coffee c : coffee) \\n      System.out.println(c); \\n    Collection<Integer> fnumbers = fill( \\n      new ArrayList<Integer>(), new Fibonacci(), 12); \\n    for(int i : fnumbers) \\n      System.out.print(i + \\\", \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1346c8411bac507ad4b3357a2a8abb80\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      // Assumes type is a public class: \\n      return type.newInstance(); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b22bd756810aab8bc8c78db93154753b\",\n        \"type\": \"source_code\",\n        \"text\": \"return new BasicGenerator<T>(type);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed403bdaa4cd89787bc84a4e6f3aa69a\",\n        \"type\": \"source_code\",\n        \"text\": \"Generator<CountedObject> gen = \\n      BasicGenerator.create(CountedObject.class); \\n    for(int i = 0; i < 5; i++) \\n      System.out.println(gen.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc12d49dfae887c61a5fc6e711127843\",\n        \"type\": \"source_code\",\n        \"text\": \"return new TwoTuple<A,B>(a, b);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42d4ba87bf7200b2aab27467f2e248d4\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ThreeTuple<A,B,C>(a, b, c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39206fac976756a1d2379f79c26e83ea\",\n        \"type\": \"source_code\",\n        \"text\": \"return new FourTuple<A,B,C,D>(a, b, c, d);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3789d48c3478eabc026f58103133807a\",\n        \"type\": \"source_code\",\n        \"text\": \"return new FiveTuple<A,B,C,D,E>(a, b, c, d, e);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b48db5fff6f0ce8a58a28b343b9a6fff\",\n        \"type\": \"source_code\",\n        \"text\": \"return tuple(\\\"hi\\\", 47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6dff20e39b54349391ea4518af971b81\",\n        \"type\": \"source_code\",\n        \"text\": \"return tuple(new Amphibian(), \\\"hi\\\", 47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1efa32d5c0d94071ce55b828ea47cf84\",\n        \"type\": \"source_code\",\n        \"text\": \"return tuple(new Vehicle(), new Amphibian(), \\\"hi\\\", 47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ceb918f7e87154dd9e6443a663250195\",\n        \"type\": \"source_code\",\n        \"text\": \"return tuple(new Vehicle(), new Amphibian(), \\n      \\\"hi\\\", 47, 11.1);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a0e9b801062dc02309f745f687b00822\",\n        \"type\": \"source_code\",\n        \"text\": \"TwoTuple<String,Integer> ttsi = f(); \\n    System.out.println(ttsi); \\n    System.out.println(f2()); \\n    System.out.println(g());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"331930c0430864c27f1d98735e1b380a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(h()); \\n    System.out.println(k());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5af8c395e8537782ebc68debd035c4a8\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<T> result = new HashSet<T>(a); \\n    result.addAll(b); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"034096d469275e2f618307290617a6f6\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<T> result = new HashSet<T>(a); \\n    result.retainAll(b); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72bbb75a0cef3faac96417b5f8794a23\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<T> result = new HashSet<T>(superset); \\n    result.removeAll(subset); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"354cd6617eddce8280ee02e79c4f24fb\",\n        \"type\": \"source_code\",\n        \"text\": \"return difference(union(a, b), intersection(a, b));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03145e1cd9fe86fa7b60b349974b7bee\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<Watercolors> set1 = \\n      EnumSet.range(BRILLIANT_RED, VIRIDIAN_HUE); \\n    Set<Watercolors> set2 = \\n      EnumSet.range(CERULEAN_BLUE_HUE, BURNT_UMBER); \\n    print(\\\"set1: \\\" + set1); \\n    print(\\\"set2: \\\" + set2); \\n    print(\\\"union(set1, set2): \\\" + union(set1, set2)); \\n    Set<Watercolors> subset = intersection(set1, set2); \\n    print(\\\"intersection(set1, set2): \\\" + subset); \\n    print(\\\"difference(set1, subset): \\\" + \\n      difference(set1, subset));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15ad2b310fdd2e079148abfb6d16f7e5\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"difference(set2, subset): \\\" + \\n      difference(set2, subset)); \\n    print(\\\"complement(set1, set2): \\\" + \\n      complement(set1, set2));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"01c8c1d0cd996415ce8b23fbac65ca23\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> result = new TreeSet<String>(); \\n    for(Method m : type.getMethods()) \\n      result.add(m.getName()); \\n    return result;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1e154226c3f9efbf8ffe14a6f84bc0b6\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"Interfaces in \\\" + \\n      type.getSimpleName() + \\\": \\\"); \\n    List<String> result = new ArrayList<String>(); \\n    for(Class<?> c : type.getInterfaces()) \\n      result.add(c.getSimpleName()); \\n    System.out.println(result);\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0fa64c464b5a63f5cae36b7f62e35c6e\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(superset.getSimpleName() + \\n      \\\" extends \\\" + subset.getSimpleName() + \\\", adds: \\\"); \\n    Set<String> comp = Sets.difference( \\n      methodSet(superset), methodSet(subset)); \\n    comp.removeAll(object); // Don\\u2019t show \\u2018Object\\u2019 methods \\n    System.out.println(comp); \\n    interfaces(superset);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5faa78d1d49579d234e5c9df73eb407a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Collection: \\\" + \\n      methodSet(Collection.class)); \\n    interfaces(Collection.class); \\n    difference(Set.class, Collection.class); \\n    difference(HashSet.class, Set.class); \\n    difference(LinkedHashSet.class, HashSet.class); \\n    difference(TreeSet.class, Set.class); \\n    difference(List.class, Collection.class); \\n    difference(ArrayList.class, List.class); \\n    difference(LinkedList.class, List.class); \\n    difference(Queue.class, Collection.class); \\n    difference(PriorityQueue.class, Queue.class); \\n    System.out.println(\\\"Map: \\\" + methodSet(Map.class)); \\n    difference(HashMap.class, Map.class);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8686a5808d51df8b6f820de46c22736\",\n        \"type\": \"source_code\",\n        \"text\": \"difference(LinkedHashMap.class, HashMap.class); \\n    difference(SortedMap.class, Map.class); \\n    difference(TreeMap.class, Map.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"433f4d18ceefe44f6204d2d1507f2195\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Generator<Customer>() { \\n      public Customer next() { return new Customer(); } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9bc53fb030d880b2d7f271d73e8b312\",\n        \"type\": \"source_code\",\n        \"text\": \"new Generator<Teller>() { \\n      public Teller next() { return new Teller(); } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c49e1a1b142d5c5130767e2ba4c29217\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(t + \\\" serves \\\" + c);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d1fae965665d6fc7f29590f4e50ec4bd\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    Queue<Customer> line = new LinkedList<Customer>(); \\n    Generators.fill(line, Customer.generator(), 15); \\n    List<Teller> tellers = new ArrayList<Teller>(); \\n    Generators.fill(tellers, Teller.generator, 4);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78f8639097faef8953f403e9c477e9df\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Customer c : line) \\n      serve(tellers.get(rand.nextInt(tellers.size())), c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a0d5672f886598524ddea7daf6836c6\",\n        \"type\": \"source_code\",\n        \"text\": \"TupleList<Vehicle, Amphibian, String, Integer> tl = \\n      new TupleList<Vehicle, Amphibian, String, Integer>(); \\n    tl.add(TupleTest.h()); \\n    tl.add(TupleTest.h()); \\n    for(FourTuple<Vehicle,Amphibian,String,Integer> i: tl) \\n      System.out.println(i);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"45cf87ab4ff3bc5a3649e2a3bba31266\",\n        \"type\": \"source_code\",\n        \"text\": \"id = IDnumber; \\n    description = descr; \\n    this.price = price; \\n    System.out.println(toString());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f77ffa4d3e6f0bc90425eddd4120f0be\",\n        \"type\": \"source_code\",\n        \"text\": \"return id + \\\": \\\" + description + \\\", price: $\\\" + price;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"327484f47c78460e6b26aa5177aace32\",\n        \"type\": \"source_code\",\n        \"text\": \"price += change;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eb2869eee63fee13d1fb5ca74460a534\",\n        \"type\": \"source_code\",\n        \"text\": \"new Generator<Product>() { \\n      private Random rand = new Random(47); \\n      public Product next() { \\n        return new Product(rand.nextInt(1000), \\\"Test\\\", \\n          Math.round(rand.nextDouble() * 1000.0) + 0.99); \\n      } \\n    };\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33e7f3be9a7f92e29a5e439001880573\",\n        \"type\": \"source_code\",\n        \"text\": \"Generators.fill(this, Product.generator, nProducts);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f534a522d86553f05c100d713feeff86\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nShelves; i++) \\n      add(new Shelf(nProducts));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"293daec408746a5a13039d2fbbe1eb58\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<CheckoutStand>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b3882d11425a91becfc08f83a7f9cda1\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nAisles; i++)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa1f4b3e95e29c2c64ee8b25af9710e2\",\n        \"type\": \"source_code\",\n        \"text\": \"add(new Aisle(nShelves, nProducts));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d891d18714c2a619a01f1e3bba7017a\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(); \\n    for(Aisle a : this) \\n      for(Shelf s : a) \\n        for(Product p : s) { \\n          result.append(p); \\n          result.append(\\\"\\\\n\\\"); \\n        } \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"23105e75c35e36d5c390583e13f6227c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(new Store(14, 5, 10));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64bf01cb9309df770ea7961aa4c917e7\",\n        \"type\": \"source_code\",\n        \"text\": \"Class c1 = new ArrayList<String>().getClass(); \\n    Class c2 = new ArrayList<Integer>().getClass(); \\n    System.out.println(c1 == c2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44b2e380ada7e006eb44c18047bee27d\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Frob> list = new ArrayList<Frob>(); \\n    Map<Frob,Fnorkle> map = new HashMap<Frob,Fnorkle>(); \\n    Quark<Fnorkle> quark = new Quark<Fnorkle>(); \\n    Particle<Long,Double> p = new Particle<Long,Double>(); \\n    System.out.println(Arrays.toString( \\n      list.getClass().getTypeParameters())); \\n    System.out.println(Arrays.toString( \\n      map.getClass().getTypeParameters())); \\n    System.out.println(Arrays.toString( \\n      quark.getClass().getTypeParameters())); \\n    System.out.println(Arrays.toString( \\n      p.getClass().getTypeParameters()));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"79d9411095e2679969cffbf669154736\",\n        \"type\": \"source_code\",\n        \"text\": \"HasF hf = new HasF();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ffa557fb11aa01553037e8d87caf0dc\",\n        \"type\": \"source_code\",\n        \"text\": \"Manipulator<HasF> manipulator = \\n      new Manipulator<HasF>(hf); \\n    manipulator.manipulate();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7eb682e713dec242e2a4052c27e1680a\",\n        \"type\": \"source_code\",\n        \"text\": \"Derived2 d2 = new Derived2(); \\n    Object obj = d2.get(); \\n    d2.set(obj); // Warning here!\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"11bf495b203ff4cf405e9885140ed48c\",\n        \"type\": \"source_code\",\n        \"text\": \"return (T[])Array.newInstance(kind, size);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65c993a4157c9ebff2d0500d1d5141c6\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayMaker<String> stringMaker = \\n      new ArrayMaker<String>(String.class); \\n    String[] stringArray = stringMaker.create(9); \\n    System.out.println(Arrays.toString(stringArray));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"046d4574ca1fd04f482844d57cabbcc9\",\n        \"type\": \"source_code\",\n        \"text\": \"ListMaker<String> stringMaker= new ListMaker<String>(); \\n    List<String> stringList = stringMaker.create();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d92c9d97df57a8014bd530a5d12e6ee6\",\n        \"type\": \"source_code\",\n        \"text\": \"List<T> result = new ArrayList<T>(); \\n    for(int i = 0; i < n; i++) \\n      result.add(t); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68acad738724ab4a0f2af94bd3722068\",\n        \"type\": \"source_code\",\n        \"text\": \"FilledListMaker<String> stringMaker = \\n      new FilledListMaker<String>(); \\n    List<String> list = stringMaker.create(\\\"Hello\\\", 4); \\n    System.out.println(list);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af6b984dc52218fd9a8c068eaaaf4bc7\",\n        \"type\": \"source_code\",\n        \"text\": \"SimpleHolder holder = new SimpleHolder(); \\n    holder.set(\\\"Item\\\"); \\n    String s = (String)holder.get();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2764625004427d0f8c2ab4108e77f43\",\n        \"type\": \"source_code\",\n        \"text\": \"putfield #2; //Field obj:Object;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93e6a45d9a9da58eec3ef87cb307a67e\",\n        \"type\": \"source_code\",\n        \"text\": \"getfield #2; //Field obj:Object;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be161ba84c6568df15e9c35dbcb7c35a\",\n        \"type\": \"source_code\",\n        \"text\": \"areturn\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"46b95b712a8411630427e33e90e1611b\",\n        \"type\": \"source_code\",\n        \"text\": \"new #3; //class SimpleHolder\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb3efc483ca46384ab040e084d31775b\",\n        \"type\": \"source_code\",\n        \"text\": \"invokespecial #4; //Method \\\"<init>\\\":()V\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d9699461a167f8a85603678be98362\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_1\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24ab4cf1c776f07a2490a6354992acce\",\n        \"type\": \"source_code\",\n        \"text\": \"ldc #5; //String Item\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c1bbf1c3ee844cbfa0f30676b7aeebf\",\n        \"type\": \"source_code\",\n        \"text\": \"GenericHolder<String> holder = \\n      new GenericHolder<String>(); \\n    holder.set(\\\"Item\\\"); \\n    String s = holder.get();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2764625004427d0f8c2ab4108e77f43\",\n        \"type\": \"source_code\",\n        \"text\": \"putfield #2; //Field obj:Object;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93e6a45d9a9da58eec3ef87cb307a67e\",\n        \"type\": \"source_code\",\n        \"text\": \"getfield #2; //Field obj:Object;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be161ba84c6568df15e9c35dbcb7c35a\",\n        \"type\": \"source_code\",\n        \"text\": \"areturn\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad81653b1fb1e7a1b8392fa632c9a276\",\n        \"type\": \"source_code\",\n        \"text\": \"new #3; //class GenericHolder\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb3efc483ca46384ab040e084d31775b\",\n        \"type\": \"source_code\",\n        \"text\": \"invokespecial #4; //Method \\\"<init>\\\":()V\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d9699461a167f8a85603678be98362\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_1\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24ab4cf1c776f07a2490a6354992acce\",\n        \"type\": \"source_code\",\n        \"text\": \"ldc #5; //String Item\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44b5102e0c9565e7eab0ea4103307bf8\",\n        \"type\": \"source_code\",\n        \"text\": \"if(arg instanceof T) {}          // Error \\n    T var = new T();                 // Error \\n    T[] array = new T[SIZE];         // Error \\n    T[] array = (T)new Object[SIZE]; // Unchecked warning\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8aa3b060320bc037cb2a6ed3f820265e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.kind = kind;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1695c64297a4da0d18c9a07880735522\",\n        \"type\": \"source_code\",\n        \"text\": \"return kind.isInstance(arg);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72a780d9d9c93f910c8ba158407a4cb4\",\n        \"type\": \"source_code\",\n        \"text\": \"ClassTypeCapture<Building> ctt1 = \\n      new ClassTypeCapture<Building>(Building.class); \\n    System.out.println(ctt1.f(new Building())); \\n    System.out.println(ctt1.f(new House())); \\n    ClassTypeCapture<House> ctt2 = \\n      new ClassTypeCapture<House>(House.class); \\n    System.out.println(ctt2.f(new Building())); \\n    System.out.println(ctt2.f(new House()));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e9ba178fa5c9a1af85c439caeb0b1ff\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      x = kind.newInstance(); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1bb5cfc59e9a8541c4e0158169d550f\",\n        \"type\": \"source_code\",\n        \"text\": \"ClassAsFactory<Employee> fe = \\n      new ClassAsFactory<Employee>(Employee.class); \\n    print(\\\"ClassAsFactory<Employee> succeeded\\\"); \\n    try { \\n      ClassAsFactory<Integer> fi = \\n        new ClassAsFactory<Integer>(Integer.class); \\n    } catch(Exception e) { \\n      print(\\\"ClassAsFactory<Integer> failed\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4562f3ee59fcc40fc992dde5da972855\",\n        \"type\": \"source_code\",\n        \"text\": \"x = factory.create();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2fe93d6fa730ee4b20a9bde8bd1147bd\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Integer(0);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34e0b0ce666891345013d661e028d35f\",\n        \"type\": \"source_code\",\n        \"text\": \"public Widget create() { \\n      return new Widget(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"28b2b16a3ac6135c7a0837404ef3e994\",\n        \"type\": \"source_code\",\n        \"text\": \"new Foo2<Integer>(new IntegerFactory()); \\n    new Foo2<Widget>(new Widget.Factory());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b695ac185351491612e5764717778070\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(element.getClass().getSimpleName());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f3bd15b34ae03dafac5acda0929038e\",\n        \"type\": \"source_code\",\n        \"text\": \"Creator c = new Creator(); \\n    c.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfdffaa7d32abe7c42e8db634f9c78b7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Compiles; produces ClassCastException: \\n    //! gia = (Generic<Integer>[])new Object[SIZE]; \\n    // Runtime type is the raw (erased) type: \\n    gia = (Generic<Integer>[])new Generic[SIZE]; \\n    System.out.println(gia.getClass().getSimpleName()); \\n    gia[0] = new Generic<Integer>(); \\n    //! gia[1] = new Object(); // Compile-time error \\n    // Discovers type mismatch at compile time: \\n    //! gia[2] = new Generic<Double>();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ef9b57e1de5c491387953154957eef5\",\n        \"type\": \"source_code\",\n        \"text\": \"array = (T[])new Object[sz];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fcb9d456ee5604440a2bb191791d85e\",\n        \"type\": \"source_code\",\n        \"text\": \"array[index] = item;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a0e015b7b9fe7314ebac82ae89a2c89d\",\n        \"type\": \"source_code\",\n        \"text\": \"GenericArray<Integer> gai = \\n      new GenericArray<Integer>(10); \\n    // This causes a ClassCastException: \\n    //! Integer[] ia = gai.rep(); \\n    // This is OK: \\n    Object[] oa = gai.rep();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ab066f0f99637ec916557a6e318968f\",\n        \"type\": \"source_code\",\n        \"text\": \"array = (T[])new Object[sz]; \\n                 ^\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97070b9f4e112af0fa680fd83b7b74f3\",\n        \"type\": \"source_code\",\n        \"text\": \"array = new Object[sz];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fcb9d456ee5604440a2bb191791d85e\",\n        \"type\": \"source_code\",\n        \"text\": \"array[index] = item;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b9e680af433887a95c8aa0dd2b309c7\",\n        \"type\": \"source_code\",\n        \"text\": \"return (T[])array; // Warning: unchecked cast\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"264731888b3c58f48106f69dd7c9dd8b\",\n        \"type\": \"source_code\",\n        \"text\": \"GenericArray2<Integer> gai = \\n      new GenericArray2<Integer>(10); \\n    for(int i = 0; i < 10; i ++) \\n      gai.put(i, i); \\n    for(int i = 0; i < 10; i ++) \\n      System.out.print(gai.get(i) + \\\" \\\"); \\n    System.out.println(); \\n    try { \\n      Integer[] ia = gai.rep(); \\n    } catch(Exception e) { System.out.println(e); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1256aa687f2665a453253f254ea28ce\",\n        \"type\": \"source_code\",\n        \"text\": \"array = (T[])Array.newInstance(type, sz);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fcb9d456ee5604440a2bb191791d85e\",\n        \"type\": \"source_code\",\n        \"text\": \"array[index] = item;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a261552b15a0b2e99d80285d0cf9282\",\n        \"type\": \"source_code\",\n        \"text\": \"GenericArrayWithTypeToken<Integer> gai = \\n      new GenericArrayWithTypeToken<Integer>( \\n        Integer.class, 10); \\n    // This now works: \\n    Integer[] ia = gai.rep();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"442665570a429381f75e65a6128d9db2\",\n        \"type\": \"source_code\",\n        \"text\": \"Solid<Bounded> solid = \\n      new Solid<Bounded>(new Bounded()); \\n    solid.color(); \\n    solid.getY(); \\n    solid.weight();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb2c26941f9e7e2cb008d9c8352467e4\",\n        \"type\": \"source_code\",\n        \"text\": \"Solid2<Bounded> solid2 = \\n      new Solid2<Bounded>(new Bounded()); \\n    solid2.color(); \\n    solid2.getY(); \\n    solid2.weight();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ebe05671c7f8f20922a007459004b82\",\n        \"type\": \"source_code\",\n        \"text\": \"hero.getPower().hearSubtleNoises();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bbfe8db844e1465f6555745832f1f296\",\n        \"type\": \"source_code\",\n        \"text\": \"hero.getPower().hearSubtleNoises(); \\n    hero.getPower().trackBySmell();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d69e6951d7b8134d3b3bad416aa034c\",\n        \"type\": \"source_code\",\n        \"text\": \"DogBoy dogBoy = new DogBoy(); \\n    useSuperHearing(dogBoy); \\n    superFind(dogBoy); \\n    // You can do this: \\n    List<? extends SuperHearing> audioBoys; \\n    // But you can\\u2019t do this:\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b102b0d5ec27c42fe4bfce6b0c51eb5\",\n        \"type\": \"source_code\",\n        \"text\": \"// List<? extends SuperHearing & SuperSmell> dogBoys;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7982de99a5a6f93a524f115ee09527d6\",\n        \"type\": \"source_code\",\n        \"text\": \"Fruit[] fruit = new Apple[10]; \\n    fruit[0] = new Apple(); // OK \\n    fruit[1] = new Jonathan(); // OK \\n    // Runtime type is Apple[], not Fruit[] or Orange[]: \\n    try { \\n      // Compiler allows you to add Fruit: \\n      fruit[0] = new Fruit(); // ArrayStoreException \\n    } catch(Exception e) { System.out.println(e); } \\n    try { \\n      // Compiler allows you to add Oranges: \\n      fruit[0] = new Orange(); // ArrayStoreException \\n    } catch(Exception e) { System.out.println(e); }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8109df4ed55a56fb07d6813752bfcd8\",\n        \"type\": \"source_code\",\n        \"text\": \"// Wildcards allow covariance: \\n    List<? extends Fruit> flist = new ArrayList<Apple>(); \\n    // Compile Error: can\\u2019t add any type of object: \\n    // flist.add(new Apple()); \\n    // flist.add(new Fruit()); \\n    // flist.add(new Object()); \\n    flist.add(null); // Legal but uninteresting \\n    // We know that it returns at least Fruit: \\n    Fruit f = flist.get(0);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e30aa16b6285db01e8417ad1e7fdfa9e\",\n        \"type\": \"source_code\",\n        \"text\": \"List<? extends Fruit> flist = \\n      Arrays.asList(new Apple()); \\n    Apple a = (Apple)flist.get(0); // No warning \\n    flist.contains(new Apple()); // Argument is \\u2018Object\\u2019 \\n    flist.indexOf(new Apple()); // Argument is \\u2018Object\\u2019\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b636cfd34a3e0e96fa51f10dd99d807f\",\n        \"type\": \"source_code\",\n        \"text\": \"return value.equals(obj);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"489c73e4bf4fbfdf70efde910e5265df\",\n        \"type\": \"source_code\",\n        \"text\": \"Holder<Apple> Apple = new Holder<Apple>(new Apple()); \\n    Apple d = Apple.get(); \\n    Apple.set(d); \\n    // Holder<Fruit> Fruit = Apple; // Cannot upcast \\n    Holder<? extends Fruit> fruit = Apple; // OK \\n    Fruit p = fruit.get(); \\n    d = (Apple)fruit.get(); // Returns \\u2018Object\\u2019 \\n    try { \\n      Orange c = (Orange)fruit.get(); // No warning \\n    } catch(Exception e) { System.out.println(e); } \\n    // fruit.set(new Apple()); // Cannot call set() \\n    // fruit.set(new Fruit()); // Cannot call set() \\n    System.out.println(fruit.equals(d)); // OK\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"49042b85264b5090ed03cb0eddce3555\",\n        \"type\": \"source_code\",\n        \"text\": \"apples.add(new Apple()); \\n    apples.add(new Jonathan()); \\n    // apples.add(new Fruit()); // Error\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc1fb5fb932f8f50f6179fc6a0b98a98\",\n        \"type\": \"source_code\",\n        \"text\": \"list.add(item);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c8d6397c5d2e2ca553f6802ba7feb1d\",\n        \"type\": \"source_code\",\n        \"text\": \"writeExact(apples, new Apple()); \\n    // writeExact(fruit, new Apple()); // Error: \\n    // Incompatible types: found Fruit, required Apple\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc1fb5fb932f8f50f6179fc6a0b98a98\",\n        \"type\": \"source_code\",\n        \"text\": \"list.add(item);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"101703046560eabe1218500e96dd08fc\",\n        \"type\": \"source_code\",\n        \"text\": \"writeWithWildcard(apples, new Apple()); \\n    writeWithWildcard(fruit, new Apple());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9006ba13f1000ca7a6b6b3debe76cc4\",\n        \"type\": \"source_code\",\n        \"text\": \"return list.get(0);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c77a0b5baac571b742322ba79b4a5105\",\n        \"type\": \"source_code\",\n        \"text\": \"Apple a = readExact(apples); \\n    Fruit f = readExact(fruit); \\n    f = readExact(apples);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"180482b044a339eef2bd40e05f47a31d\",\n        \"type\": \"source_code\",\n        \"text\": \"T readExact(List<T> list) { return list.get(0); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b87f35a79bb1708cdda9e64b38d04e98\",\n        \"type\": \"source_code\",\n        \"text\": \"Reader<Fruit> fruitReader = new Reader<Fruit>(); \\n    Fruit f = fruitReader.readExact(fruit); \\n    // Fruit a = fruitReader.readExact(apples); // Error: \\n    // readExact(List<Fruit>) cannot be \\n    // applied to (List<Apple>).\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4835ff130c2e9e29915890b1d946889\",\n        \"type\": \"source_code\",\n        \"text\": \"T readCovariant(List<? extends T> list) { \\n      return list.get(0); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c3fc640a8d3a4c44e8c8d5c15a3c5723\",\n        \"type\": \"source_code\",\n        \"text\": \"CovariantReader<Fruit> fruitReader = \\n      new CovariantReader<Fruit>(); \\n    Fruit f = fruitReader.readCovariant(fruit); \\n    Fruit a = fruitReader.readCovariant(apples);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b285decbebc26a6609ca8651a6c141d9\",\n        \"type\": \"source_code\",\n        \"text\": \"f1(); f2(); f3();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"10757240d1320ae79111febc8db89139\",\n        \"type\": \"source_code\",\n        \"text\": \"list1 = list; \\n    list2 = list; \\n    // list3 = list; // Warning: unchecked conversion \\n    // Found: List, Required: List<? extends Object>\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff0b7a7212c440ed6a7c81180c1acda4\",\n        \"type\": \"source_code\",\n        \"text\": \"list1 = list; \\n    list2 = list; \\n    list3 = list;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff0b7a7212c440ed6a7c81180c1acda4\",\n        \"type\": \"source_code\",\n        \"text\": \"list1 = list; \\n    list2 = list; \\n    list3 = list;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7c06b7e5c2fd509c5865908747959e78\",\n        \"type\": \"source_code\",\n        \"text\": \"assign1(new ArrayList()); \\n    assign2(new ArrayList()); \\n    // assign3(new ArrayList()); // Warning: \\n    // Unchecked conversion. Found: ArrayList \\n    // Required: List<? extends Object> \\n    assign1(new ArrayList<String>()); \\n    assign2(new ArrayList<String>()); \\n    assign3(new ArrayList<String>()); \\n    // Both forms are acceptable as List<?>: \\n    List<?> wildList = new ArrayList(); \\n    wildList = new ArrayList<String>(); \\n    assign1(wildList); \\n    assign2(wildList); \\n    assign3(wildList);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b12db094a3435c3071ec0fd58bb19510\",\n        \"type\": \"source_code\",\n        \"text\": \"assign1(new HashMap()); \\n    assign2(new HashMap()); \\n    // assign3(new HashMap()); // Warning: \\n    // Unchecked conversion. Found: HashMap \\n    // Required: Map<String,?> \\n    assign1(new HashMap<String,Integer>()); \\n    assign2(new HashMap<String,Integer>()); \\n    assign3(new HashMap<String,Integer>());\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae11f06ed342594d976ec5fabc0e4ba3\",\n        \"type\": \"source_code\",\n        \"text\": \"// holder.set(arg); // Warning: \\n    //   Unchecked call to set(T) as a \\n    //   member of the raw type Holder \\n    // holder.set(new Wildcards()); // Same warning\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"96edd9db67d20b0c49899b2758bf9daf\",\n        \"type\": \"source_code\",\n        \"text\": \"// Can\\u2019t do this; don\\u2019t have any \\u2018T\\u2019: \\n    // T t = holder.get();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"031dad261850cee49b6e11c3dcefef4b\",\n        \"type\": \"source_code\",\n        \"text\": \"// OK, but type information has been lost: \\n    Object obj = holder.get();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7f746b2e8e9a56bf626cf4375a1ffc1\",\n        \"type\": \"source_code\",\n        \"text\": \"// holder.set(arg); // Error: \\n    //   set(capture of ?) in Holder<capture of ?> \\n    //   cannot be applied to (Object) \\n    // holder.set(new Wildcards()); // Same error\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"96edd9db67d20b0c49899b2758bf9daf\",\n        \"type\": \"source_code\",\n        \"text\": \"// Can\\u2019t do this; don\\u2019t have any \\u2018T\\u2019: \\n    // T t = holder.get();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"031dad261850cee49b6e11c3dcefef4b\",\n        \"type\": \"source_code\",\n        \"text\": \"// OK, but type information has been lost: \\n    Object obj = holder.get();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"14fb9e34c273a962283870a2ada561cd\",\n        \"type\": \"source_code\",\n        \"text\": \"T t = holder.get(); \\n    return t;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8732f61d36a20b4768499d902d5a2667\",\n        \"type\": \"source_code\",\n        \"text\": \"holder.set(arg); \\n    T t = holder.get(); \\n    return t;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32a67e77e8529c43a617a47067dd9a9a\",\n        \"type\": \"source_code\",\n        \"text\": \"// holder.set(arg); // Error: \\n    //   set(capture of ? extends T) in \\n    //   Holder<capture of ? extends T> \\n    //   cannot be applied to (T) \\n    T t = holder.get(); \\n    return t;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68609f6cc5c4109536e47693fd46085b\",\n        \"type\": \"source_code\",\n        \"text\": \"holder.set(arg); \\n    // T t = holder.get();  // Error: \\n    //   Incompatible types: found Object, required T\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"031dad261850cee49b6e11c3dcefef4b\",\n        \"type\": \"source_code\",\n        \"text\": \"// OK, but type information has been lost: \\n    Object obj = holder.get();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"67a08b2b16a6e85b2a3a3ff9cd647e53\",\n        \"type\": \"source_code\",\n        \"text\": \"Holder raw = new Holder<Long>(); \\n    // Or: \\n    raw = new Holder(); \\n    Holder<Long> qualified = new Holder<Long>(); \\n    Holder<?> unbounded = new Holder<Long>(); \\n    Holder<? extends Long> bounded = new Holder<Long>(); \\n    Long lng = 1L;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95d03c5958aa24c2b2f299d369bb8aea\",\n        \"type\": \"source_code\",\n        \"text\": \"rawArgs(raw, lng); \\n    rawArgs(qualified, lng); \\n    rawArgs(unbounded, lng); \\n    rawArgs(bounded, lng);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53ac873138dd3f42ee7ada684d38c20e\",\n        \"type\": \"source_code\",\n        \"text\": \"unboundedArg(raw, lng); \\n    unboundedArg(qualified, lng); \\n    unboundedArg(unbounded, lng);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"29d09536952bbd4a78d6fa5bb0845a79\",\n        \"type\": \"source_code\",\n        \"text\": \"unboundedArg(bounded, lng);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc79bf06d5680f43ab764a1c33be16b7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Object r1 = exact1(raw); // Warnings: \\n    //   Unchecked conversion from Holder to Holder<T> \\n    //   Unchecked method invocation: exact1(Holder<T>) \\n    //   is applied to (Holder) \\n    Long r2 = exact1(qualified); \\n    Object r3 = exact1(unbounded); // Must return Object \\n    Long r4 = exact1(bounded);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a899a1aa692dc87529a3dcb1ca0860f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Long r5 = exact2(raw, lng); // Warnings: \\n    //   Unchecked conversion from Holder to Holder<Long> \\n    //   Unchecked method invocation: exact2(Holder<T>,T) \\n    //   is applied to (Holder,Long) \\n    Long r6 = exact2(qualified, lng); \\n    // Long r7 = exact2(unbounded, lng); // Error: \\n    //   exact2(Holder<T>,T) cannot be applied to \\n    //   (Holder<capture of ?>,Long) \\n    // Long r8 = exact2(bounded, lng); // Error: \\n    //   exact2(Holder<T>,T) cannot be applied \\n    //   to (Holder<capture of ? extends Long>,Long)\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2f8a6f749058cd0c40d61d37d7c44bd7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Long r9 = wildSubtype(raw, lng); // Warnings: \\n    //   Unchecked conversion from Holder \\n    //   to Holder<? extends Long> \\n    //   Unchecked method invocation: \\n    //   wildSubtype(Holder<? extends T>,T) is \\n    //   applied to (Holder,Long) \\n    Long r10 = wildSubtype(qualified, lng); \\n    // OK, but can only return Object: \\n    Object r11 = wildSubtype(unbounded, lng); \\n    Long r12 = wildSubtype(bounded, lng);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5642058afdf3220d1d667e4117188e7\",\n        \"type\": \"source_code\",\n        \"text\": \"// wildSupertype(raw, lng); // Warnings: \\n    //   Unchecked conversion from Holder \\n    //   to Holder<? super Long> \\n    //   Unchecked method invocation: \\n    //   wildSupertype(Holder<? super T>,T) \\n    //   is applied to (Holder,Long) \\n    wildSupertype(qualified, lng); \\n    // wildSupertype(unbounded, lng); // Error: \\n    //   wildSupertype(Holder<? super T>,T) cannot be \\n    //   applied to (Holder<capture of ?>,Long) \\n    // wildSupertype(bounded, lng); // Error: \\n    //   wildSupertype(Holder<? super T>,T) cannot be \\n    //  applied to (Holder<capture of ? extends Long>,Long)\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"88c110204948533af42a97dd81a86fc7\",\n        \"type\": \"source_code\",\n        \"text\": \"T t = holder.get(); \\n    System.out.println(t.getClass().getSimpleName());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e12160f1c67e709c36d306f86a1c2c5d\",\n        \"type\": \"source_code\",\n        \"text\": \"f1(holder); // Call with captured type\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"01b19db9c98382604e06cc8df94d63fe\",\n        \"type\": \"source_code\",\n        \"text\": \"Holder raw = new Holder<Integer>(1); \\n    // f1(raw); // Produces warnings \\n    f2(raw); // No warnings \\n    Holder rawBasic = new Holder(); \\n    rawBasic.set(new Object()); // Warning \\n    f2(rawBasic); // No warnings \\n    // Upcast to Holder<?>, still figures it out: \\n    Holder<?> wildcarded = new Holder<Double>(1.0); \\n    f2(wildcarded);\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2974ab430d92b4c6683d3f18fd4080b9\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Integer> li = new ArrayList<Integer>(); \\n    for(int i = 0; i < 5; i++) \\n      li.add(i); \\n    for(int i : li) \\n      System.out.print(i + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3773d35e43cb5e8c78fefe4d59184b9\",\n        \"type\": \"source_code\",\n        \"text\": \"new HashSet<Byte>(Arrays.asList(possibles));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ca3450c5766b37f59a23da3f3a3a2609\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < a.length; i++) \\n      a[i] = gen.next(); \\n    return a;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74d8b8f29a8b033c62b65ee94074ae24\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] strings = FArray.fill( \\n      new String[7], new RandomGenerator.String(10)); \\n    for(String s : strings) \\n      System.out.println(s); \\n    Integer[] integers = FArray.fill( \\n      new Integer[7], new RandomGenerator.Integer()); \\n    for(int i: integers) \\n      System.out.println(i); \\n    // Autoboxing won\\u2019t save you here. This won\\u2019t compile: \\n    // int[] b = \\n    //   FArray.fill(new int[7], new RandIntGenerator());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f39a32a575028c767a0216c44a730f7f\",\n        \"type\": \"source_code\",\n        \"text\": \"storage = new Object[size];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef2918be73b5e170e580169e3a988129\",\n        \"type\": \"source_code\",\n        \"text\": \"FixedSizeStack<String> strings = \\n      new FixedSizeStack<String>(SIZE); \\n    for(String s : \\\"A B C D E F G H I J\\\".split(\\\" \\\")) \\n      strings.push(s); \\n    for(int i = 0; i < SIZE; i++) { \\n      String s = strings.pop(); \\n      System.out.print(s + \\\" \\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f9dcbad595d0f1ebbfe1135e616ea8b\",\n        \"type\": \"source_code\",\n        \"text\": \"ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(args[0])); \\n    List<Widget> shapes = (List<Widget>)in.readObject();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1d1e58554bb185e6056c692fb3b63895\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Shape> shapes = (List<Widget>)in.readObject();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95ea3b6d75117611416e74672e1da1b4\",\n        \"type\": \"source_code\",\n        \"text\": \"ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(args[0])); \\n      // Won\\u2019t Compile:\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"755d9a860a3db65f2a3a4a56818a0fb7\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Widget> lw1 =\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2edc73d3b32e5c7304bb814cb1064f1c\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Widget>.class.cast(in.readObject()); \\n    List<Widget> lw2 = List.class.cast(in.readObject());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b695ac185351491612e5764717778070\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(element.getClass().getSimpleName());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ece3d8addc1f284a6617e0939c0363eb\",\n        \"type\": \"source_code\",\n        \"text\": \"Subtype st1 = new Subtype(), st2 = new Subtype(); \\n    st1.set(st2); \\n    Subtype st3 = st1.get(); \\n    st1.f();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1030848b8afe2894dcc6751741513934\",\n        \"type\": \"source_code\",\n        \"text\": \"BasicOther b = new BasicOther(), b2 = new BasicOther(); \\n    b.set(new Other()); \\n    Other other = b.get(); \\n    b.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f7d54593213009225b48b84057ff75a\",\n        \"type\": \"source_code\",\n        \"text\": \"element = arg; \\n    return this;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"615591ccadef7bb7eb7cea6697895ee6\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = new A(); \\n    a.set(new A()); \\n    a = a.set(new A()).get(); \\n    a = a.get(); \\n    C c = new C(); \\n    c = c.setAndGet(new C());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f7d54593213009225b48b84057ff75a\",\n        \"type\": \"source_code\",\n        \"text\": \"element = arg; \\n    return this;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6df435de83834be9f217314218518004\",\n        \"type\": \"source_code\",\n        \"text\": \"return arg.set(arg).get();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a663499bbc8970c40b938bfbe9e6d634\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = f(new A());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52f9c652ec7d410a914ac5bb8fe15711\",\n        \"type\": \"source_code\",\n        \"text\": \"Derived d2 = d.get();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe5858183cb5192aafae178bd227d99c\",\n        \"type\": \"source_code\",\n        \"text\": \"Getter result = g.get(); \\n    GenericGetter gg = g.get(); // Also the base type\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7ba77f6381df990497b71de945ca3a6\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"OrdinarySetter.set(Base)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ba7fb593351707c69e1291d01b6543e\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"DerivedSetter.set(Derived)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"154fbdcc5f1a884c78a7dce752c9c27e\",\n        \"type\": \"source_code\",\n        \"text\": \"Base base = new Base(); \\n    Derived derived = new Derived(); \\n    DerivedSetter ds = new DerivedSetter(); \\n    ds.set(derived); \\n    ds.set(base); // Compiles: overloaded, not overridden!\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ce39ecce3351fc2bb04c93974b27dc8\",\n        \"type\": \"source_code\",\n        \"text\": \"s1.set(s2); \\n    // s1.set(sbs); // Error: \\n    // set(Setter) in SelfBoundSetter<Setter> \\n    // cannot be applied to (SelfBoundSetter)\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd6ded81e11ead4765c0ec4f9f0a079f\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"GenericSetter.set(Base)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fa366b8f97299d2c100c1daa2b15a74\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"DerivedGS.set(Derived)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbaf29f0cc1c6c51154e9ef104bcc7bf\",\n        \"type\": \"source_code\",\n        \"text\": \"Base base = new Base(); \\n    Derived derived = new Derived(); \\n    DerivedGS dgs = new DerivedGS(); \\n    dgs.set(derived); \\n    dgs.set(base); // Compiles: overloaded, not overridden!\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"702661d09a373a5717a57a99f17f11cf\",\n        \"type\": \"source_code\",\n        \"text\": \"probablyDogs.add(new Cat());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c1f5058fb2e47988f80f4209b83b719\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Dog> dogs1 = new ArrayList<Dog>(); \\n    oldStyleMethod(dogs1); // Quietly accepts a Cat \\n    List<Dog> dogs2 = Collections.checkedList( \\n      new ArrayList<Dog>(), Dog.class); \\n    try { \\n      oldStyleMethod(dogs2); // Throws an exception \\n    } catch(Exception e) { \\n      System.out.println(e); \\n    } \\n    // Derived types work fine: \\n    List<Pet> pets = Collections.checkedList( \\n      new ArrayList<Pet>(), Pet.class); \\n    pets.add(new Dog()); \\n    pets.add(new Cat());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1d4dee8873ff0080f493eb73c9e8742a\",\n        \"type\": \"source_code\",\n        \"text\": \"List<T> resultCollector = new ArrayList<T>(); \\n    for(Processor<T,E> processor : this) \\n      processor.process(resultCollector); \\n    return resultCollector;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8dcd548b8e72d54b14d5ad9083fde4f4\",\n        \"type\": \"source_code\",\n        \"text\": \"if(count-- > 1) \\n      resultCollector.add(\\\"Hep!\\\"); \\n    else \\n      resultCollector.add(\\\"Ho!\\\"); \\n    if(count < 0) \\n       throw new Failure1();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d9485ff856327d7e7d13376a5c1e81a6\",\n        \"type\": \"source_code\",\n        \"text\": \"if(count-- == 0) \\n      resultCollector.add(47); \\n    else { \\n      resultCollector.add(11); \\n    } \\n    if(count < 0) \\n       throw new Failure2();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9239ddd04af76dfc612e4b7a8c35c156\",\n        \"type\": \"source_code\",\n        \"text\": \"ProcessRunner<String,Failure1> runner = \\n      new ProcessRunner<String,Failure1>(); \\n    for(int i = 0; i < 3; i++) \\n      runner.add(new Processor1()); \\n    try { \\n      System.out.println(runner.processAll()); \\n    } catch(Failure1 e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"TASM\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d6fc106cc2a2c23c46e288fc2ccd2a58\",\n        \"type\": \"source_code\",\n        \"text\": \"ProcessRunner<Integer,Failure2> runner2 = \\n      new ProcessRunner<Integer,Failure2>(); \\n    for(int i = 0; i < 3; i++) \\n      runner2.add(new Processor2()); \\n    try { \\n      System.out.println(runner2.processAll()); \\n    } catch(Failure2 e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"TASM\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"de22e85d2035b744ad37a5901144cafa\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\" \\\" << mixin1.getSerialNumber() << endl;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f187652ca9ac71dfefc7b17730abdeb9\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\" \\\" << mixin2.getSerialNumber() << endl;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b723a48f54d47e1fd78fe5692163271\",\n        \"type\": \"source_code\",\n        \"text\": \"timeStamp = new Date().getTime();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbd7200b454d048360fc9deb2511defd\",\n        \"type\": \"source_code\",\n        \"text\": \"new SerialNumberedImp();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4aa17dbc14e35bbca7032141024c6811\",\n        \"type\": \"source_code\",\n        \"text\": \"return serialNumber.getSerialNumber();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"20a11224dca59626e5312855eaeff5ea\",\n        \"type\": \"source_code\",\n        \"text\": \"Mixin mixin1 = new Mixin(), mixin2 = new Mixin(); \\n    mixin1.set(\\\"test string 1\\\"); \\n    mixin2.set(\\\"test string 2\\\"); \\n    System.out.println(mixin1.get() + \\\" \\\" + \\n      mixin1.getStamp() +  \\\" \\\" + mixin1.getSerialNumber()); \\n    System.out.println(mixin2.get() + \\\" \\\" + \\n      mixin2.getStamp() +  \\\" \\\" + mixin2.getSerialNumber());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5ca015a0e825b4b33a874b90686d547\",\n        \"type\": \"source_code\",\n        \"text\": \"super(basic); \\n    timeStamp = new Date().getTime();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e47d2d8ac713a82edbba6d021cc083b1\",\n        \"type\": \"source_code\",\n        \"text\": \"TimeStamped t = new TimeStamped(new Basic()); \\n    TimeStamped t2 = new TimeStamped( \\n      new SerialNumbered(new Basic())); \\n    //! t2.getSerialNumber(); // Not available \\n    SerialNumbered s = new SerialNumbered(new Basic()); \\n    SerialNumbered s2 = new SerialNumbered( \\n      new TimeStamped(new Basic())); \\n    //! s2.getStamp(); // Not available\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a362b6935bfc54af8eba5205253c362\",\n        \"type\": \"source_code\",\n        \"text\": \"delegatesByMethod = new HashMap<String,Object>(); \\n    for(TwoTuple<Object,Class<?>> pair : pairs) { \\n      for(Method method : pair.second.getMethods()) { \\n        String methodName = method.getName(); \\n        // The first interface in the map \\n        // implements the method. \\n        if (!delegatesByMethod.containsKey(methodName)) \\n          delegatesByMethod.put(methodName, pair.first); \\n      } \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d9a0b18568ee89a52bbe8a2cd770e114\",\n        \"type\": \"source_code\",\n        \"text\": \"Object[] args) throws Throwable { \\n    String methodName = method.getName(); \\n    Object delegate = delegatesByMethod.get(methodName); \\n    return method.invoke(delegate, args);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"140bc2d2d930436f600ca07b0dc361a0\",\n        \"type\": \"source_code\",\n        \"text\": \"Class[] interfaces = new Class[pairs.length]; \\n    for(int i = 0; i < pairs.length; i++) { \\n      interfaces[i] = (Class)pairs[i].second; \\n    } \\n    ClassLoader cl = \\n      pairs[0].first.getClass().getClassLoader(); \\n    return Proxy.newProxyInstance( \\n      cl, interfaces, new MixinProxy(pairs));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ba891b522c4c84148d3fb7412712a5d1\",\n        \"type\": \"source_code\",\n        \"text\": \"Object mixin = MixinProxy.newInstance( \\n      tuple(new BasicImp(), Basic.class), \\n      tuple(new TimeStampedImp(), TimeStamped.class), \\n      tuple(new SerialNumberedImp(),SerialNumbered.class)); \\n    Basic b = (Basic)mixin; \\n    TimeStamped t = (TimeStamped)mixin; \\n    SerialNumbered s = (SerialNumbered)mixin; \\n    b.set(\\\"Hello\\\"); \\n    System.out.println(b.get()); \\n    System.out.println(t.getStamp()); \\n    System.out.println(s.getSerialNumber());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e547a118ec49e11721bb874430a6b7a3\",\n        \"type\": \"source_code\",\n        \"text\": \"def speak(self): \\n        print \\\"Arf!\\\" \\n    def sit(self): \\n        print \\\"Sitting\\\" \\n    def reproduce(self): \\n        pass\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68f4312115bc27e72d0638d27698aaa9\",\n        \"type\": \"source_code\",\n        \"text\": \"def speak(self): \\n        print \\\"Click!\\\" \\n    def sit(self): \\n        print \\\"Clank!\\\" \\n    def oilChange(self) : \\n        pass\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"233ced92131e055e5de9d6295b2ea2d3\",\n        \"type\": \"source_code\",\n        \"text\": \"anything.speak() \\n    anything.sit()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"10a951969405986cf507366fbbaea71b\",\n        \"type\": \"source_code\",\n        \"text\": \"performer.speak(); \\n    performer.sit();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ba75c54854e24d0069049661706143db\",\n        \"type\": \"source_code\",\n        \"text\": \"PerformingDog d = new PerformingDog(); \\n    Robot r = new Robot(); \\n    Communicate.perform(d); \\n    Communicate.perform(r);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"10a951969405986cf507366fbbaea71b\",\n        \"type\": \"source_code\",\n        \"text\": \"performer.speak(); \\n    performer.sit();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d7f8ee6de2fb581afa2645762a70f58a\",\n        \"type\": \"source_code\",\n        \"text\": \"CommunicateSimply.perform(new PerformingDog()); \\n    CommunicateSimply.perform(new Robot());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eda83adfe3067cb908e446cf40394af3\",\n        \"type\": \"source_code\",\n        \"text\": \"latent typing\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d50ac31543cc9aada4454ee8c0494643\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<?> spkr = speaker.getClass(); \\n    try { \\n      try { \\n        Method speak = spkr.getMethod(\\\"speak\\\"); \\n        speak.invoke(speaker); \\n      } catch(NoSuchMethodException e) { \\n        print(speaker + \\\" cannot speak\\\"); \\n      } \\n      try { \\n        Method sit = spkr.getMethod(\\\"sit\\\"); \\n        sit.invoke(speaker); \\n      } catch(NoSuchMethodException e) { \\n        print(speaker + \\\" cannot sit\\\"); \\n      } \\n    } catch(Exception e) { \\n      throw new RuntimeException(speaker.toString(), e); \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93651f84496b3b47d88c7e397937c52c\",\n        \"type\": \"source_code\",\n        \"text\": \"CommunicateReflectively.perform(new SmartDog()); \\n    CommunicateReflectively.perform(new Robot()); \\n    CommunicateReflectively.perform(new Mime());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"207e561b8b1708b17baf37dbc203c308\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      for(T t: seq) \\n        f.invoke(t, args); \\n    } catch(Exception e) { \\n      // Failures are programmer errors \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"71ead093bf93ec5999fbaf4c91251fa1\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\" resize \\\" + newSize);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f8acd8c6d244431f7eb01aca69fadfb\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      for(int i = 0; i < size; i++) \\n        // Assumes default constructor: \\n        add(type.newInstance()); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed5fd94b75ea2ae99aca83421f53fcbf\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Shape> shapes = new ArrayList<Shape>(); \\n    for(int i = 0; i < 10; i++) \\n      shapes.add(new Shape()); \\n    Apply.apply(shapes, Shape.class.getMethod(\\\"rotate\\\")); \\n    Apply.apply(shapes, \\n      Shape.class.getMethod(\\\"resize\\\", int.class), 5); \\n    List<Square> squares = new ArrayList<Square>(); \\n    for(int i = 0; i < 10; i++) \\n      squares.add(new Square()); \\n    Apply.apply(squares, Shape.class.getMethod(\\\"rotate\\\")); \\n    Apply.apply(squares, \\n      Shape.class.getMethod(\\\"resize\\\", int.class), 5);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68fac6d6d50f8d5a45ca90ea791d89fd\",\n        \"type\": \"source_code\",\n        \"text\": \"Apply.apply(new FilledList<Shape>(Shape.class, 10), \\n      Shape.class.getMethod(\\\"rotate\\\")); \\n    Apply.apply(new FilledList<Shape>(Square.class, 10), \\n      Shape.class.getMethod(\\\"rotate\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc3bf2a390cd4878cb66f23e17ba0236\",\n        \"type\": \"source_code\",\n        \"text\": \"SimpleQueue<Shape> shapeQ = new SimpleQueue<Shape>(); \\n    for(int i = 0; i < 5; i++) { \\n      shapeQ.add(new Shape()); \\n      shapeQ.add(new Square()); \\n    } \\n    Apply.apply(shapeQ, Shape.class.getMethod(\\\"rotate\\\"));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8655c1073f7ea59fee385ad3f297c170\",\n        \"type\": \"source_code\",\n        \"text\": \"return storage.iterator();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"faf018bede25f31560893d8ff95152af\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < size; i++) \\n      // Assumes default constructor: \\n      try { \\n        collection.add(classToken.newInstance()); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4dd07c6b84d4dcfecf12b328f2a2bc4e\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getName() + \\\" \\\" + id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"722c86fdabd01abdd008d4b4f507d1b2\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Contract> contracts = new ArrayList<Contract>(); \\n    Fill.fill(contracts, Contract.class, 3); \\n    Fill.fill(contracts, TitleTransfer.class, 2); \\n    for(Contract c: contracts) \\n      System.out.println(c); \\n    SimpleQueue<Contract> contractQueue = \\n      new SimpleQueue<Contract>(); \\n    // Won\\u2019t work. fill() is not generic enough: \\n    // Fill.fill(contractQueue, Contract.class, 3);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c7abaf414913557d8879b86388decdcd\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < size; i++) \\n      try { \\n        addable.add(classToken.newInstance()); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4787e2d7328b8b3d09d306422472906\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < size; i++) \\n      addable.add(generator.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"797bf9d3633edf565d4c1776b2610bf6\",\n        \"type\": \"source_code\",\n        \"text\": \"this.c = c;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b360d559d6c651f668aec736b3c5883f\",\n        \"type\": \"source_code\",\n        \"text\": \"return new AddableCollectionAdapter<T>(c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f12bd2dba0a300175e1548f41286144a\",\n        \"type\": \"source_code\",\n        \"text\": \"// Adapt a Collection: \\n    List<Coffee> carrier = new ArrayList<Coffee>(); \\n    Fill2.fill( \\n      new AddableCollectionAdapter<Coffee>(carrier), \\n      Coffee.class, 3); \\n    // Helper method captures the type: \\n    Fill2.fill(Adapter.collectionAdapter(carrier), \\n      Latte.class, 2); \\n    for(Coffee c: carrier) \\n      print(c); \\n    print(\\\"----------------------\\\"); \\n    // Use an adapted class: \\n    AddableSimpleQueue<Coffee> coffeeQueue = \\n      new AddableSimpleQueue<Coffee>(); \\n    Fill2.fill(coffeeQueue, Mocha.class, 4); \\n    Fill2.fill(coffeeQueue, Latte.class, 1); \\n    for(Coffee c: coffeeQueue) \\n      print(c);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cffbc1eff1ec962c6fe0afc3f56145c7\",\n        \"type\": \"source_code\",\n        \"text\": \"strategies\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5db9ed073382c3ae68243f6a8ea6d350\",\n        \"type\": \"source_code\",\n        \"text\": \"Iterator<T> it = seq.iterator(); \\n    if(it.hasNext()) { \\n      T result = it.next(); \\n      while(it.hasNext()) \\n        result = combiner.combine(result, it.next()); \\n      return result; \\n    } \\n    // If seq is the empty list: \\n    return null; // Or throw exception\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9790ab6b9e4cb6bd22bb4ac97e31384a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(T t : seq) \\n      func.function(t); \\n    return func;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"de60f09432bb71a33f7caf46eb3bbbbb\",\n        \"type\": \"source_code\",\n        \"text\": \"List<R> result = new ArrayList<R>(); \\n    for(T t : seq) \\n      result.add(func.function(t)); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"91ada42ce56b06f444a8c331ed0b4b7a\",\n        \"type\": \"source_code\",\n        \"text\": \"List<T> result = new ArrayList<T>(); \\n    for(T t : seq) \\n      if(pred.test(t)) \\n        result.add(t); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ffb9487f50df51a7d4f21f94474bf9ef\",\n        \"type\": \"source_code\",\n        \"text\": \"public Integer combine(Integer x, Integer y) { \\n      return x + y; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97df4d0f666f9bf7b21296ebcf2047fc\",\n        \"type\": \"source_code\",\n        \"text\": \"public Integer combine(Integer x, Integer y) { \\n      return x - y; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"edc5446776e8a1e4e4d20fb8b3435084\",\n        \"type\": \"source_code\",\n        \"text\": \"public BigDecimal combine(BigDecimal x, BigDecimal y) { \\n      return x.add(y); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61817ee6839bf817bd77d2981e2793bd\",\n        \"type\": \"source_code\",\n        \"text\": \"public BigInteger combine(BigInteger x, BigInteger y) { \\n      return x.add(y);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4414b790d0e028fbfa7421a30567fc91\",\n        \"type\": \"source_code\",\n        \"text\": \"public AtomicLong combine(AtomicLong x, AtomicLong y) { \\n      // Not clear whether this is meaningful: \\n      return new AtomicLong(x.addAndGet(y.get())); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c4fe56c829742bed33aa0f9e605c9109\",\n        \"type\": \"source_code\",\n        \"text\": \"public BigDecimal function(BigDecimal x) { \\n      return x.ulp(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70c1f4e03ddd15e3275b2af4579e3f4a\",\n        \"type\": \"source_code\",\n        \"text\": \"private T bound; \\n    public GreaterThan(T bound) { this.bound = bound; } \\n    public boolean test(T x) { \\n      return x.compareTo(bound) > 0; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8bdd5827ad225285cbd196dec7c0585\",\n        \"type\": \"source_code\",\n        \"text\": \"private Integer val = 1; \\n    public Integer function(Integer x) { \\n      val *= x; \\n      return val; \\n    } \\n    public Integer result() { return val; }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecb56bb1f80e2d652c7ef60c21e47474\",\n        \"type\": \"source_code\",\n        \"text\": \"// Generics, varargs & boxing working together: \\n    List<Integer> li = Arrays.asList(1, 2, 3, 4, 5, 6, 7); \\n    Integer result = reduce(li, new IntegerAdder()); \\n    print(result);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1b726f16557a0f577e9df8064c12dac\",\n        \"type\": \"source_code\",\n        \"text\": \"result = reduce(li, new IntegerSubtracter()); \\n    print(result);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea4b6dc25d1b3cf8fa3d44ae3a52608f\",\n        \"type\": \"source_code\",\n        \"text\": \"print(filter(li, new GreaterThan<Integer>(4)));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94d478b620f80c028af95370bd53ef5e\",\n        \"type\": \"source_code\",\n        \"text\": \"print(forEach(li, \\n      new MultiplyingIntegerCollector()).result());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38ab840173eaf6cdc18be2d3c5cebbb6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(forEach(filter(li, new GreaterThan<Integer>(4)), \\n      new MultiplyingIntegerCollector()).result());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"269693ebd37ca81ca10bd5b18df4e6cd\",\n        \"type\": \"source_code\",\n        \"text\": \"MathContext mc = new MathContext(7); \\n    List<BigDecimal> lbd = Arrays.asList( \\n      new BigDecimal(1.1, mc), new BigDecimal(2.2, mc), \\n      new BigDecimal(3.3, mc), new BigDecimal(4.4, mc)); \\n    BigDecimal rbd = reduce(lbd, new BigDecimalAdder()); \\n    print(rbd);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1cd895e35d9e64a20ab78efbbf91cdb8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(filter(lbd, \\n      new GreaterThan<BigDecimal>(new BigDecimal(3))));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c3ab9f3c38440f55edc646b107402f25\",\n        \"type\": \"source_code\",\n        \"text\": \"// Use the prime-generation facility of BigInteger: \\n    List<BigInteger> lbi = new ArrayList<BigInteger>();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"604419b8267e0beb9db929b4e008976e\",\n        \"type\": \"source_code\",\n        \"text\": \"BigInteger bi = BigInteger.valueOf(11); \\n    for(int i = 0; i < 11; i++) { \\n      lbi.add(bi); \\n      bi = bi.nextProbablePrime(); \\n    } \\n    print(lbi);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8348997f31f782ef6c3deeb4de520c50\",\n        \"type\": \"source_code\",\n        \"text\": \"BigInteger rbi = reduce(lbi, new BigIntegerAdder()); \\n    print(rbi); \\n    // The sum of this list of primes is also prime: \\n    print(rbi.isProbablePrime(5));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1eb8ffb8b614a5e76d2d8d6a183c7514\",\n        \"type\": \"source_code\",\n        \"text\": \"List<AtomicLong> lal = Arrays.asList( \\n      new AtomicLong(11), new AtomicLong(47), \\n      new AtomicLong(74), new AtomicLong(133)); \\n    AtomicLong ral = reduce(lal, new AtomicLongAdder()); \\n    print(ral);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c5deaa7fc382897f3bec37823f3a26a1\",\n        \"type\": \"source_code\",\n        \"text\": \"print(transform(lbd,new BigDecimalUlp()));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6eab02b6ed2b29d7f21b16e1a7b0c96f\",\n        \"type\": \"source_code\",\n        \"text\": \"new MultiplyingIntegerCollector()).result()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"13aa37a76727d90eae12e803b6336f43\",\n        \"type\": \"source_code\",\n        \"text\": \"bad?\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52eb9ce318c4c8fa0b8be2027d17137c\",\n        \"type\": \"source_code\",\n        \"text\": \"BerylliumSphere[] spheres = new BerylliumSphere[10]; \\n    for(int i = 0; i < 5; i++) \\n      spheres[i] = new BerylliumSphere(); \\n    print(Arrays.toString(spheres)); \\n    print(spheres[4]);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d31c847a320868ab6108894c1c0bf2b\",\n        \"type\": \"source_code\",\n        \"text\": \"List<BerylliumSphere> sphereList = \\n      new ArrayList<BerylliumSphere>(); \\n    for(int i = 0; i < 5; i++) \\n      sphereList.add(new BerylliumSphere()); \\n    print(sphereList); \\n    print(sphereList.get(4));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c496570792f087c0012888a507a6479\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] integers = { 0, 1, 2, 3, 4, 5 }; \\n    print(Arrays.toString(integers)); \\n    print(integers[4]);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4e6fb024457ba377031d4457c1603de5\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Integer> intList = new ArrayList<Integer>( \\n      Arrays.asList(0, 1, 2, 3, 4, 5)); \\n    intList.add(97); \\n    print(intList); \\n    print(intList.get(4));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2330122cd54ba18317c298969645b0a\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arrays of objects: \\n    BerylliumSphere[] a; // Local uninitialized variable \\n    BerylliumSphere[] b = new BerylliumSphere[5]; \\n    // The references inside the array are \\n    // automatically initialized to null: \\n    print(\\\"b: \\\" + Arrays.toString(b)); \\n    BerylliumSphere[] c = new BerylliumSphere[4]; \\n    for(int i = 0; i < c.length; i++) \\n      if(c[i] == null) // Can test for null reference \\n        c[i] = new BerylliumSphere(); \\n    // Aggregate initialization: \\n    BerylliumSphere[] d = { new BerylliumSphere(), \\n      new BerylliumSphere(), new BerylliumSphere() \\n    }; \\n    // Dynamic aggregate initialization: \\n    a = new BerylliumSphere[]{ \\n      new BerylliumSphere(), new BerylliumSphere(), \\n    }; \\n    // (Trailing comma is optional in both cases) \\n    print(\\\"a.length = \\\" + a.length); \\n    print(\\\"b.length = \\\" + b.length); \\n    print(\\\"c.length = \\\" + c.length); \\n    print(\\\"d.length = \\\" + d.length); \\n    a = d; \\n    print(\\\"a.length = \\\" + a.length);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdeaa28be42d15ebfd1b60b6de3181b9\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arrays of primitives: \\n    int[] e; // Null reference \\n    int[] f = new int[5]; \\n    // The primitives inside the array are \\n    // automatically initialized to zero: \\n    print(\\\"f: \\\" + Arrays.toString(f)); \\n    int[] g = new int[4]; \\n    for(int i = 0; i < g.length; i++) \\n      g[i] = i*i; \\n    int[] h = { 11, 47, 93 }; \\n    // Compile error: variable e not initialized: \\n    //!print(\\\"e.length = \\\" + e.length); \\n    print(\\\"f.length = \\\" + f.length); \\n    print(\\\"g.length = \\\" + g.length); \\n    print(\\\"h.length = \\\" + h.length); \\n    e = h; \\n    print(\\\"e.length = \\\" + e.length); \\n    e = new int[]{ 1, 2 }; \\n    print(\\\"e.length = \\\" + e.length);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e446a83f98947a13bd61ecce0efb7112\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Chocolate\\\", \\\"Strawberry\\\", \\\"Vanilla Fudge Swirl\\\", \\n    \\\"Mint Chip\\\", \\\"Mocha Almond Fudge\\\", \\\"Rum Raisin\\\", \\n    \\\"Praline Cream\\\", \\\"Mud Pie\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f337245ceffb76dcfdee4ceb1ed613d0\",\n        \"type\": \"source_code\",\n        \"text\": \"if(n > FLAVORS.length) \\n      throw new IllegalArgumentException(\\\"Set too big\\\"); \\n    String[] results = new String[n]; \\n    boolean[] picked = new boolean[FLAVORS.length]; \\n    for(int i = 0; i < n; i++) { \\n      int t; \\n      do \\n        t = rand.nextInt(FLAVORS.length); \\n      while(picked[t]); \\n      results[i] = FLAVORS[t]; \\n      picked[t] = true; \\n    } \\n    return results;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b482c149ba02a2638af1f271b97b3ab\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 7; i++) \\n      System.out.println(Arrays.toString(flavorSet(3)));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"45d97bfa691e0e87da6f154aa881163b\",\n        \"type\": \"source_code\",\n        \"text\": \"int[][] a = { \\n      { 1, 2, 3, }, \\n      { 4, 5, 6, }, \\n    }; \\n    System.out.println(Arrays.deepToString(a));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3c4ba6ff6123253ec59d01692dabeeda\",\n        \"type\": \"source_code\",\n        \"text\": \"// 3-D array with fixed length: \\n    int[][][] a = new int[2][2][4]; \\n    System.out.println(Arrays.deepToString(a));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7541d1c582f2983020cc7e93e63a36ef\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    // 3-D array with varied-length vectors: \\n    int[][][] a = new int[rand.nextInt(7)][][]; \\n    for(int i = 0; i < a.length; i++) { \\n      a[i] = new int[rand.nextInt(5)][]; \\n      for(int j = 0; j < a[i].length; j++) \\n        a[i][j] = new int[rand.nextInt(5)]; \\n    } \\n    System.out.println(Arrays.deepToString(a));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ec870f7fdaf13e76749af9aec8f72147\",\n        \"type\": \"source_code\",\n        \"text\": \"BerylliumSphere[][] spheres = { \\n      { new BerylliumSphere(), new BerylliumSphere() }, \\n      { new BerylliumSphere(), new BerylliumSphere(), \\n        new BerylliumSphere(), new BerylliumSphere() }, \\n      { new BerylliumSphere(), new BerylliumSphere(), \\n        new BerylliumSphere(), new BerylliumSphere(), \\n        new BerylliumSphere(), new BerylliumSphere(), \\n        new BerylliumSphere(), new BerylliumSphere() }, \\n    }; \\n    System.out.println(Arrays.deepToString(spheres));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"05d5e803839dfd2bdb1d06dcdc8857bc\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[][] a = { // Autoboxing: \\n      { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, \\n      { 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }, \\n      { 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 }, \\n      { 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 }, \\n    }; \\n    System.out.println(Arrays.deepToString(a));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0886676cb6bd970c09da76609880c917\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[][] a; \\n    a = new Integer[3][]; \\n    for(int i = 0; i < a.length; i++) { \\n      a[i] = new Integer[3]; \\n      for(int j = 0; j < a[i].length; j++) \\n        a[i][j] = i * j; // Autoboxing \\n    } \\n    System.out.println(Arrays.deepToString(a));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3c74c8b8f9462b415419087fac548ee7\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[][] a1 = { // Autoboxing \\n      { 1, 2, 3, }, \\n      { 4, 5, 6, }, \\n    }; \\n    Double[][][] a2 = { // Autoboxing \\n      { { 1.1, 2.2 }, { 3.3, 4.4 } }, \\n      { { 5.5, 6.6 }, { 7.7, 8.8 } }, \\n      { { 9.9, 1.2 }, { 2.3, 3.4 } }, \\n    };\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ffcaacdf42ceb914d63be3a6613169b3\",\n        \"type\": \"source_code\",\n        \"text\": \"String[][] a3 = { \\n      { \\\"The\\\", \\\"Quick\\\", \\\"Sly\\\", \\\"Fox\\\" }, \\n      { \\\"Jumped\\\", \\\"Over\\\" }, \\n      { \\\"The\\\", \\\"Lazy\\\", \\\"Brown\\\", \\\"Dog\\\", \\\"and\\\", \\\"friend\\\" }, \\n    }; \\n    System.out.println(\\\"a1: \\\" + Arrays.deepToString(a1)); \\n    System.out.println(\\\"a2: \\\" + Arrays.deepToString(a2)); \\n    System.out.println(\\\"a3: \\\" + Arrays.deepToString(a3));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5fbd6a566a0a8127be685de44ce43b1\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[] ints = { 1, 2, 3, 4, 5 }; \\n    Double[] doubles = { 1.1, 2.2, 3.3, 4.4, 5.5 }; \\n    Integer[] ints2 = \\n      new ClassParameter<Integer>().f(ints); \\n    Double[] doubles2 = \\n      new ClassParameter<Double>().f(doubles); \\n    ints2 = MethodParameter.f(ints); \\n    doubles2 = MethodParameter.f(doubles);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecd2850dd9d85cfb960aa6310d66bcdd\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String>[] ls; \\n    List[] la = new List[10]; \\n    ls = (List<String>[])la; // \\\"Unchecked\\\" warning \\n    ls[0] = new ArrayList<String>(); \\n    // Compile-time checking produces an error: \\n    //! ls[1] = new ArrayList<Integer>();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a4e0e38e97a4d56d028e62a43172bea7\",\n        \"type\": \"source_code\",\n        \"text\": \"// The problem: List<String> is a subtype of Object \\n    Object[] objects = ls; // So assignment is OK \\n    // Compiles and runs without complaint: \\n    objects[1] = new ArrayList<Integer>();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"82afbe5fa2c5238cbde8edcec0a313bb\",\n        \"type\": \"source_code\",\n        \"text\": \"// However, if your needs are straightforward it is \\n    // possible to create an array of generics, albeit \\n    // with an \\\"unchecked\\\" warning: \\n    List<BerylliumSphere>[] spheres = \\n      (List<BerylliumSphere>[])new List[10]; \\n    for(int i = 0; i < spheres.length; i++) \\n      spheres[i] = new ArrayList<BerylliumSphere>();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"36fb4ff143321090ac15e3c3babbd29d\",\n        \"type\": \"source_code\",\n        \"text\": \"//! array = new T[size]; // Illegal \\n    array = (T[])new Object[size]; // \\\"unchecked\\\" Warning\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ef66d8342f594f34f054efc74ea98a6\",\n        \"type\": \"source_code\",\n        \"text\": \"int size = 6; \\n    boolean[] a1 = new boolean[size]; \\n    byte[] a2 = new byte[size]; \\n    char[] a3 = new char[size]; \\n    short[] a4 = new short[size]; \\n    int[] a5 = new int[size]; \\n    long[] a6 = new long[size]; \\n    float[] a7 = new float[size]; \\n    double[] a8 = new double[size]; \\n    String[] a9 = new String[size]; \\n    Arrays.fill(a1, true); \\n    print(\\\"a1 = \\\" + Arrays.toString(a1)); \\n    Arrays.fill(a2, (byte)11); \\n    print(\\\"a2 = \\\" + Arrays.toString(a2)); \\n    Arrays.fill(a3, \\u2018x\\u2019); \\n    print(\\\"a3 = \\\" + Arrays.toString(a3)); \\n    Arrays.fill(a4, (short)17); \\n    print(\\\"a4 = \\\" + Arrays.toString(a4)); \\n    Arrays.fill(a5, 19); \\n    print(\\\"a5 = \\\" + Arrays.toString(a5)); \\n    Arrays.fill(a6, 23); \\n    print(\\\"a6 = \\\" + Arrays.toString(a6)); \\n    Arrays.fill(a7, 29); \\n    print(\\\"a7 = \\\" + Arrays.toString(a7)); \\n    Arrays.fill(a8, 47); \\n    print(\\\"a8 = \\\" + Arrays.toString(a8)); \\n    Arrays.fill(a9, \\\"Hello\\\"); \\n    print(\\\"a9 = \\\" + Arrays.toString(a9)); \\n    // Manipulating ranges: \\n    Arrays.fill(a9, 3, 5, \\\"World\\\"); \\n    print(\\\"a9 = \\\" + Arrays.toString(a9));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab4526544bde6a66bca1b17082227496\",\n        \"type\": \"source_code\",\n        \"text\": \"private boolean value = false; \\n    public java.lang.Boolean next() { \\n      value = !value; // Just flips back and forth \\n      return value; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7c4e964c5dd791cd596a343938a2f95\",\n        \"type\": \"source_code\",\n        \"text\": \"private byte value = 0; \\n    public java.lang.Byte next() { return value++; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4627d399e32cc56bbf325e4a165b268\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\").toCharArray();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4a376aa5a50fbfe801919ff712b028ee\",\n        \"type\": \"source_code\",\n        \"text\": \"int index = -1; \\n    public java.lang.Character next() { \\n      index = (index + 1) % chars.length; \\n      return chars[index]; \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"188676cc1358920661b7d1378af176dc\",\n        \"type\": \"source_code\",\n        \"text\": \"private int length = 7;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53d16884aa9ba921987cf6e661f18ae5\",\n        \"type\": \"source_code\",\n        \"text\": \"Generator<java.lang.Character> cg = new Character(); \\n    public String() {} \\n    public String(int length) { this.length = length; } \\n    public java.lang.String next() { \\n      char[] buf = new char[length]; \\n      for(int i = 0; i < length; i++) \\n        buf[i] = cg.next(); \\n      return new java.lang.String(buf); \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8cfc0ef6dab137cd20646d8911ec7ee9\",\n        \"type\": \"source_code\",\n        \"text\": \"private short value = 0; \\n    public java.lang.Short next() { return value++; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eec3805400a1adb83e299960b0c2183a\",\n        \"type\": \"source_code\",\n        \"text\": \"private int value = 0; \\n    public java.lang.Integer next() { return value++; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15301034fd7477fc7888e170112fdfc3\",\n        \"type\": \"source_code\",\n        \"text\": \"private long value = 0; \\n    public java.lang.Long next() { return value++; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a216b4e152510673172ab60e986ab21c\",\n        \"type\": \"source_code\",\n        \"text\": \"private float value = 0; \\n    public java.lang.Float next() { \\n      float result = value; \\n      value += 1.0; \\n      return result; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd6e365740a0ca05370b83fd76065f3a\",\n        \"type\": \"source_code\",\n        \"text\": \"private double value = 0.0; \\n    public java.lang.Double next() { \\n      double result = value; \\n      value += 1.0; \\n      return result; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65f643b34550cb5b25e1e0c4b2182e15\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Class<?> type : surroundingClass.getClasses()) { \\n      System.out.print(type.getSimpleName() + \\\": \\\"); \\n      try { \\n        Generator<?> g = (Generator<?>)type.newInstance(); \\n        for(int i = 0; i < size; i++) \\n          System.out.printf(g.next() + \\\" \\\"); \\n        System.out.println(); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      } \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d5eed19d2f82e1c66a5079a87a88fd7\",\n        \"type\": \"source_code\",\n        \"text\": \"test(CountingGenerator.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d67ab0190380b42482bd7020a07d5e0e\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Boolean next() { \\n      return r.nextBoolean(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcf5bd3cd5e3a9c3ddf19b3f556adf67\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Byte next() { \\n      return (byte)r.nextInt(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e368639da28404187b879a528f3b18ee\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Character next() { \\n      return CountingGenerator.chars[ \\n        r.nextInt(CountingGenerator.chars.length)];\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6508de8ec114e7cd1541611481aaca40\",\n        \"type\": \"source_code\",\n        \"text\": \"// Plug in the random Character generator: \\n    { cg = new Character(); } // Instance initializer \\n    public String() {} \\n    public String(int length) { super(length); }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"878712ecd6f95748379c70a387057af9\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Short next() { \\n      return (short)r.nextInt(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"16de5867ab1996536662f7385460b456\",\n        \"type\": \"source_code\",\n        \"text\": \"private int mod = 10000; \\n    public Integer() {} \\n    public Integer(int modulo) { mod = modulo; } \\n    public java.lang.Integer next() { \\n      return r.nextInt(mod); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b450b9b6e8d53bb1c97ad79361abe70\",\n        \"type\": \"source_code\",\n        \"text\": \"private int mod = 10000; \\n    public Long() {} \\n    public Long(int modulo) { mod = modulo; } \\n    public java.lang.Long next() { \\n      return new java.lang.Long(r.nextInt(mod)); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b5a667c6b030508032f698f099abb4b\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Float next() { \\n      // Trim all but the first two decimal places: \\n      int trimmed = Math.round(r.nextFloat() * 100); \\n      return ((float)trimmed) / 100; \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15a357f7eb8426fd9b64b9d5166bd8cd\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Double next() { \\n      long trimmed = Math.round(r.nextDouble() * 100); \\n      return ((double)trimmed) / 100; \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"778aa1be2d5620f45dbbbd5ce805e4dc\",\n        \"type\": \"source_code\",\n        \"text\": \"GeneratorsTest.test(RandomGenerator.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"deba66d09c82c38abd3083622e016844\",\n        \"type\": \"source_code\",\n        \"text\": \"return new CollectionData<T>(gen, a.length).toArray(a);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2ee70ec01bb386578843ebf889ed950\",\n        \"type\": \"source_code\",\n        \"text\": \"Generator<T> gen, int size) { \\n    T[] a = \\n      (T[])java.lang.reflect.Array.newInstance(type, size); \\n    return new CollectionData<T>(gen, size).toArray(a);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"670c82b996d55528c3e284bf2eede4f8\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[] a = { 9, 8, 7, 6 }; \\n    System.out.println(Arrays.toString(a)); \\n    a = Generated.array(a,new CountingGenerator.Integer()); \\n    System.out.println(Arrays.toString(a)); \\n    Integer[] b = Generated.array(Integer.class, \\n        new CountingGenerator.Integer(), 15); \\n    System.out.println(Arrays.toString(b));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b64ad865324d9423ca0e5a1818ebc08\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean[] result = new boolean[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; // Autounboxing \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e6554d45c13e488ecf5550c5e66608c1\",\n        \"type\": \"source_code\",\n        \"text\": \"char[] result = new char[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3282fe6d59fbec73822400fae7324336\",\n        \"type\": \"source_code\",\n        \"text\": \"byte[] result = new byte[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a4043492252f69f8f6cebd9ed6d49865\",\n        \"type\": \"source_code\",\n        \"text\": \"short[] result = new short[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2730b3df559d43dc48d96baf458458fc\",\n        \"type\": \"source_code\",\n        \"text\": \"return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b16740c27502e0ad666ac8d3b020bf0\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] result = new int[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26c11c088293b3f31fb638bd1e64481c\",\n        \"type\": \"source_code\",\n        \"text\": \"long[] result = new long[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2d7bf5a8fccecd48d7fcaffc62448106\",\n        \"type\": \"source_code\",\n        \"text\": \"float[] result = new float[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f224734a1948dfa72a43a82b83fee22d\",\n        \"type\": \"source_code\",\n        \"text\": \"double[] result = new double[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d35faf73d01df1178d898d73c77aa512\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[] a = Generated.array(Integer.class, \\n        new CountingGenerator.Integer(), 15); \\n    int[] b = ConvertTo.primitive(a); \\n    System.out.println(Arrays.toString(b)); \\n    boolean[] c = ConvertTo.primitive( \\n      Generated.array(Boolean.class, \\n        new CountingGenerator.Boolean(), 7)); \\n    System.out.println(Arrays.toString(c));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a62df0464024d6200d7b65823add2cdb\",\n        \"type\": \"source_code\",\n        \"text\": \"int size = 6; \\n    boolean[] a1 = ConvertTo.primitive(Generated.array( \\n      Boolean.class, new RandomGenerator.Boolean(), size)); \\n    print(\\\"a1 = \\\" + Arrays.toString(a1)); \\n    byte[] a2 = ConvertTo.primitive(Generated.array( \\n      Byte.class, new RandomGenerator.Byte(), size)); \\n    print(\\\"a2 = \\\" + Arrays.toString(a2)); \\n    char[] a3 = ConvertTo.primitive(Generated.array( \\n      Character.class, \\n      new RandomGenerator.Character(), size)); \\n    print(\\\"a3 = \\\" + Arrays.toString(a3)); \\n    short[] a4 = ConvertTo.primitive(Generated.array( \\n      Short.class, new RandomGenerator.Short(), size)); \\n    print(\\\"a4 = \\\" + Arrays.toString(a4)); \\n    int[] a5 = ConvertTo.primitive(Generated.array( \\n      Integer.class, new RandomGenerator.Integer(), size)); \\n    print(\\\"a5 = \\\" + Arrays.toString(a5)); \\n    long[] a6 = ConvertTo.primitive(Generated.array( \\n      Long.class, new RandomGenerator.Long(), size)); \\n    print(\\\"a6 = \\\" + Arrays.toString(a6)); \\n    float[] a7 = ConvertTo.primitive(Generated.array( \\n      Float.class, new RandomGenerator.Float(), size)); \\n    print(\\\"a7 = \\\" + Arrays.toString(a7)); \\n    double[] a8 = ConvertTo.primitive(Generated.array( \\n      Double.class, new RandomGenerator.Double(), size)); \\n    print(\\\"a8 = \\\" + Arrays.toString(a8));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9218a0ed65ee7acfc627c3acd55a0856\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] i = new int[7]; \\n    int[] j = new int[10]; \\n    Arrays.fill(i, 47); \\n    Arrays.fill(j, 99); \\n    print(\\\"i = \\\" + Arrays.toString(i)); \\n    print(\\\"j = \\\" + Arrays.toString(j)); \\n    System.arraycopy(i, 0, j, 0, i.length); \\n    print(\\\"j = \\\" + Arrays.toString(j)); \\n    int[] k = new int[5]; \\n    Arrays.fill(k, 103); \\n    System.arraycopy(i, 0, k, 0, k.length); \\n    print(\\\"k = \\\" + Arrays.toString(k)); \\n    Arrays.fill(k, 103); \\n    System.arraycopy(k, 0, i, 0, k.length); \\n    print(\\\"i = \\\" + Arrays.toString(i)); \\n    // Objects: \\n    Integer[] u = new Integer[10]; \\n    Integer[] v = new Integer[5]; \\n    Arrays.fill(u, new Integer(47));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"952ed98bc373e4bd57701f5269281991\",\n        \"type\": \"source_code\",\n        \"text\": \"Arrays.fill(v, new Integer(99)); \\n    print(\\\"u = \\\" + Arrays.toString(u)); \\n    print(\\\"v = \\\" + Arrays.toString(v)); \\n    System.arraycopy(v, 0, u, u.length/2, v.length); \\n    print(\\\"u = \\\" + Arrays.toString(u));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0321772b7c858b30f2f71c17bbc13033\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] a1 = new int[10]; \\n    int[] a2 = new int[10]; \\n    Arrays.fill(a1, 47); \\n    Arrays.fill(a2, 47); \\n    print(Arrays.equals(a1, a2)); \\n    a2[3] = 11; \\n    print(Arrays.equals(a1, a2)); \\n    String[] s1 = new String[4]; \\n    Arrays.fill(s1, \\\"Hi\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c9f91acc0bce0cd518ef3781e627db1\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] s2 = { new String(\\\"Hi\\\"), new String(\\\"Hi\\\"), \\n      new String(\\\"Hi\\\"), new String(\\\"Hi\\\") }; \\n    print(Arrays.equals(s1, s2));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5995c8322f4fdbfa38b45ef1d581bb9f\",\n        \"type\": \"source_code\",\n        \"text\": \"i = n1; \\n    j = n2;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae949749179839209ebc368eb13a639e\",\n        \"type\": \"source_code\",\n        \"text\": \"String result = \\\"[i = \\\" + i + \\\", j = \\\" + j + \\\"]\\\"; \\n    if(count++ % 3 == 0) \\n      result += \\\"\\\\n\\\"; \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5eb10b7c470773f3d1b1410089e0df1\",\n        \"type\": \"source_code\",\n        \"text\": \"return (i < rv.i ? -1 : (i == rv.i ? 0 : 1));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33b55f55c6cce6d9a60f400744721dd8\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Generator<CompType>() { \\n      public CompType next() { \\n        return new CompType(r.nextInt(100),r.nextInt(100)); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32e7ad4f1ca2f0503e51b5324587a781\",\n        \"type\": \"source_code\",\n        \"text\": \"CompType[] a = \\n      Generated.array(new CompType[12], generator()); \\n    print(\\\"before sorting:\\\"); \\n    print(Arrays.toString(a)); \\n    Arrays.sort(a); \\n    print(\\\"after sorting:\\\"); \\n    print(Arrays.toString(a));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"382ee130c2ae78c2bd44871e0892bfec\",\n        \"type\": \"source_code\",\n        \"text\": \"CompType[] a = Generated.array( \\n      new CompType[12], CompType.generator()); \\n    print(\\\"before sorting:\\\"); \\n    print(Arrays.toString(a)); \\n    Arrays.sort(a, Collections.reverseOrder()); \\n    print(\\\"after sorting:\\\"); \\n    print(Arrays.toString(a));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7a31f6127d4ed9cf6aa764fa53ff0a1d\",\n        \"type\": \"source_code\",\n        \"text\": \"return (o1.j < o2.j ? -1 : (o1.j == o2.j ? 0 : 1));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f150553e7052d31733e7bb3d05573182\",\n        \"type\": \"source_code\",\n        \"text\": \"CompType[] a = Generated.array( \\n      new CompType[12], CompType.generator()); \\n    print(\\\"before sorting:\\\"); \\n    print(Arrays.toString(a)); \\n    Arrays.sort(a, new CompTypeComparator()); \\n    print(\\\"after sorting:\\\"); \\n    print(Arrays.toString(a));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb24a108630ac3873847de9d2b0646b5\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] sa = Generated.array(new String[20], \\n      new RandomGenerator.String(5)); \\n    print(\\\"Before sort: \\\" + Arrays.toString(sa)); \\n    Arrays.sort(sa); \\n    print(\\\"After sort: \\\" + Arrays.toString(sa)); \\n    Arrays.sort(sa, Collections.reverseOrder()); \\n    print(\\\"Reverse sort: \\\" + Arrays.toString(sa)); \\n    Arrays.sort(sa, String.CASE_INSENSITIVE_ORDER); \\n    print(\\\"Case-insensitive sort: \\\" + Arrays.toString(sa));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c43fabb57e9a3594a4cb024c5f3ebd2\",\n        \"type\": \"source_code\",\n        \"text\": \"Generator<Integer> gen = \\n      new RandomGenerator.Integer(1000); \\n    int[] a = ConvertTo.primitive( \\n      Generated.array(new Integer[25], gen)); \\n    Arrays.sort(a); \\n    print(\\\"Sorted array: \\\" + Arrays.toString(a)); \\n    while(true) { \\n      int r = gen.next(); \\n      int location = Arrays.binarySearch(a, r); \\n      if(location >= 0) { \\n        print(\\\"Location of \\\" + r + \\\" is \\\" + location + \\n          \\\", a[\\\" + location + \\\"] = \\\" + a[location]); \\n        break; // Out of while loop \\n      } \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"634986c6890a1d1ad09476aacf7874dd\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] sa = Generated.array(new String[30], \\n      new RandomGenerator.String(5)); \\n    Arrays.sort(sa, String.CASE_INSENSITIVE_ORDER); \\n    System.out.println(Arrays.toString(sa)); \\n    int index = Arrays.binarySearch(sa, sa[10], \\n      String.CASE_INSENSITIVE_ORDER); \\n    System.out.println(\\\"Index: \\\"+ index + \\\"\\\\n\\\"+ sa[index]);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ca4bb5797fa9c90163ffa7aca9d507d\",\n        \"type\": \"source_code\",\n        \"text\": \"# Define a method, \\u2018this\\u2019 pointer is explicit: \\n    def getReversed(self): \\n        reversed = self[:] # Copy list using slices \\n        reversed.reverse() # Built-in list method \\n        return reversed\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e589792d4b1ac97d27f22dc3834f27b7\",\n        \"type\": \"source_code\",\n        \"text\": \"return super.toString() + \\\" \\\" + s;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d1472aff6378676e2c9b9ae4546bca91\",\n        \"type\": \"source_code\",\n        \"text\": \"List<StringAddress> list= new ArrayList<StringAddress>( \\n      Collections.nCopies(4, new StringAddress(\\\"Hello\\\"))); \\n    System.out.println(list); \\n    Collections.fill(list, new StringAddress(\\\"World!\\\")); \\n    System.out.println(list);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bcee2d7a580aa09cc59eb1798270e1f2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < quantity; i++) \\n      add(gen.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"834be7ffd3efad41f169a3b936dcdac5\",\n        \"type\": \"source_code\",\n        \"text\": \"return new CollectionData<T>(gen, quantity);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"18db2674fc6534dc6331ea04babfc058\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"distributing swords is no basis for a system of \\\" +\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03979697c5e0dd6391e59bc2003c442e\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"government\\\").split(\\\" \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"22dfd913bc12ccf547afa8287ed5602a\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> set = new LinkedHashSet<String>( \\n      new CollectionData<String>(new Government(), 15)); \\n    // Using the convenience method: \\n    set.addAll(CollectionData.list(new Government(), 15)); \\n    System.out.println(set);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"113cccdecaf94046e97495f9a3841cee\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(new ArrayList<String>( \\n      CollectionData.list( // Convenience method \\n        new RandomGenerator.String(9), 10))); \\n    System.out.println(new HashSet<Integer>( \\n      new CollectionData<Integer>( \\n        new RandomGenerator.Integer(), 10)));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"434646eee46af15903e148b1d3d32625\",\n        \"type\": \"source_code\",\n        \"text\": \"key = k; \\n    value = v;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60771191d04d3d270d462a426839b873\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < quantity; i++) { \\n      Pair<K,V> p = gen.next(); \\n      put(p.key, p.value); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a908f474423e7e060c023f4b5014dbbf\",\n        \"type\": \"source_code\",\n        \"text\": \"int quantity) { \\n    for(int i = 0; i < quantity; i++) { \\n      put(genK.next(), genV.next()); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebefbda27b82c497cd630d05fc2b348c\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < quantity; i++) { \\n      put(genK.next(), value); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0b52382b83ab1938c9282db439e0fec2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(K key : genK) { \\n      put(key, genV.next()); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"efbc5b8f0deb6886a3f1789cb48d9058\",\n        \"type\": \"source_code\",\n        \"text\": \"for(K key : genK) { \\n      put(key, value); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60433fca6b50d267178849c4190d4d28\",\n        \"type\": \"source_code\",\n        \"text\": \"return new MapData<K,V>(gen, quantity);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af360c64a67385aa7d10d21a622bc6eb\",\n        \"type\": \"source_code\",\n        \"text\": \"return new MapData<K,V>(genK, genV, quantity);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32e946e5b83b964e3cc3863c12af1291\",\n        \"type\": \"source_code\",\n        \"text\": \"return new MapData<K,V>(genK, value, quantity);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3014b4053fd19e80991d84e811cf2437\",\n        \"type\": \"source_code\",\n        \"text\": \"return new MapData<K,V>(genK, genV);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bcd6bc193b91fb6f5d3297b83669d30e\",\n        \"type\": \"source_code\",\n        \"text\": \"return new MapData<K,V>(genK, value);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"379fe784d917174a35b88abb65aef9cb\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Pair<Integer,String>( \\n      number++, \\\"\\\" + letter++);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"22a016ab7d260fb7f40923a55bc8e7ac\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterator<Integer>() { \\n      public Integer next() { return number++; } \\n      public boolean hasNext() { return number < size; } \\n      public void remove() { \\n        throw new UnsupportedOperationException(); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf796b998ecb3358b246b3dbedec822f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Pair Generator: \\n    print(MapData.map(new Letters(), 11)); \\n    // Two separate generators: \\n    print(MapData.map(new CountingGenerator.Character(), \\n      new RandomGenerator.String(3), 8)); \\n    // A key Generator and a single value: \\n    print(MapData.map(new CountingGenerator.Character(), \\n      \\\"Value\\\", 6)); \\n    // An Iterable and a value Generator: \\n    print(MapData.map(new Letters(), \\n      new RandomGenerator.String(3))); \\n    // An Iterable and a single value: \\n    print(MapData.map(new Letters(), \\\"Pop\\\"));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f2be5d4cfa1ff1eaf03edff1f02f1df\",\n        \"type\": \"source_code\",\n        \"text\": \"// Africa \\n    {\\\"ALGERIA\\\",\\\"Algiers\\\"}, {\\\"ANGOLA\\\",\\\"Luanda\\\"}, \\n    {\\\"BENIN\\\",\\\"Porto-Novo\\\"}, {\\\"BOTSWANA\\\",\\\"Gaberone\\\"}, \\n    {\\\"BURKINA FASO\\\",\\\"Ouagadougou\\\"}, \\n    {\\\"BURUNDI\\\",\\\"Bujumbura\\\"}, \\n    {\\\"CAMEROON\\\",\\\"Yaounde\\\"}, {\\\"CAPE VERDE\\\",\\\"Praia\\\"}, \\n    {\\\"CENTRAL AFRICAN REPUBLIC\\\",\\\"Bangui\\\"}, \\n    {\\\"CHAD\\\",\\\"N\\u2019djamena\\\"},  {\\\"COMOROS\\\",\\\"Moroni\\\"},\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26af31f177636d77ca4f11504c955f57\",\n        \"type\": \"source_code\",\n        \"text\": \"{\\\"CONGO\\\",\\\"Brazzaville\\\"}, {\\\"DJIBOUTI\\\",\\\"Dijibouti\\\"}, \\n    {\\\"EGYPT\\\",\\\"Cairo\\\"}, {\\\"EQUATORIAL GUINEA\\\",\\\"Malabo\\\"}, \\n    {\\\"ERITREA\\\",\\\"Asmara\\\"}, {\\\"ETHIOPIA\\\",\\\"Addis Ababa\\\"}, \\n    {\\\"GABON\\\",\\\"Libreville\\\"}, {\\\"THE GAMBIA\\\",\\\"Banjul\\\"}, \\n    {\\\"GHANA\\\",\\\"Accra\\\"}, {\\\"GUINEA\\\",\\\"Conakry\\\"}, \\n    {\\\"BISSAU\\\",\\\"Bissau\\\"}, \\n    {\\\"COTE D\\u2019IVOIR (IVORY COAST)\\\",\\\"Yamoussoukro\\\"}, \\n    {\\\"KENYA\\\",\\\"Nairobi\\\"}, {\\\"LESOTHO\\\",\\\"Maseru\\\"}, \\n    {\\\"LIBERIA\\\",\\\"Monrovia\\\"}, {\\\"LIBYA\\\",\\\"Tripoli\\\"}, \\n    {\\\"MADAGASCAR\\\",\\\"Antananarivo\\\"}, {\\\"MALAWI\\\",\\\"Lilongwe\\\"}, \\n    {\\\"MALI\\\",\\\"Bamako\\\"}, {\\\"MAURITANIA\\\",\\\"Nouakchott\\\"}, \\n    {\\\"MAURITIUS\\\",\\\"Port Louis\\\"}, {\\\"MOROCCO\\\",\\\"Rabat\\\"}, \\n    {\\\"MOZAMBIQUE\\\",\\\"Maputo\\\"}, {\\\"NAMIBIA\\\",\\\"Windhoek\\\"}, \\n    {\\\"NIGER\\\",\\\"Niamey\\\"}, {\\\"NIGERIA\\\",\\\"Abuja\\\"}, \\n    {\\\"RWANDA\\\",\\\"Kigali\\\"}, \\n    {\\\"SAO TOME E PRINCIPE\\\",\\\"Sao Tome\\\"}, \\n    {\\\"SENEGAL\\\",\\\"Dakar\\\"}, {\\\"SEYCHELLES\\\",\\\"Victoria\\\"}, \\n    {\\\"SIERRA LEONE\\\",\\\"Freetown\\\"}, {\\\"SOMALIA\\\",\\\"Mogadishu\\\"}, \\n    {\\\"SOUTH AFRICA\\\",\\\"Pretoria/Cape Town\\\"}, \\n    {\\\"SUDAN\\\",\\\"Khartoum\\\"}, \\n    {\\\"SWAZILAND\\\",\\\"Mbabane\\\"}, {\\\"TANZANIA\\\",\\\"Dodoma\\\"}, \\n    {\\\"TOGO\\\",\\\"Lome\\\"}, {\\\"TUNISIA\\\",\\\"Tunis\\\"}, \\n    {\\\"UGANDA\\\",\\\"Kampala\\\"}, \\n    {\\\"DEMOCRATIC REPUBLIC OF THE CONGO (ZAIRE)\\\", \\n     \\\"Kinshasa\\\"}, \\n    {\\\"ZAMBIA\\\",\\\"Lusaka\\\"}, {\\\"ZIMBABWE\\\",\\\"Harare\\\"}, \\n    // Asia \\n    {\\\"AFGHANISTAN\\\",\\\"Kabul\\\"}, {\\\"BAHRAIN\\\",\\\"Manama\\\"}, \\n    {\\\"BANGLADESH\\\",\\\"Dhaka\\\"}, {\\\"BHUTAN\\\",\\\"Thimphu\\\"}, \\n    {\\\"BRUNEI\\\",\\\"Bandar Seri Begawan\\\"}, \\n    {\\\"CAMBODIA\\\",\\\"Phnom Penh\\\"}, \\n    {\\\"CHINA\\\",\\\"Beijing\\\"}, {\\\"CYPRUS\\\",\\\"Nicosia\\\"}, \\n    {\\\"INDIA\\\",\\\"New Delhi\\\"}, {\\\"INDONESIA\\\",\\\"Jakarta\\\"}, \\n    {\\\"IRAN\\\",\\\"Tehran\\\"}, {\\\"IRAQ\\\",\\\"Baghdad\\\"}, \\n    {\\\"ISRAEL\\\",\\\"Jerusalem\\\"}, {\\\"JAPAN\\\",\\\"Tokyo\\\"}, \\n    {\\\"JORDAN\\\",\\\"Amman\\\"}, {\\\"KUWAIT\\\",\\\"Kuwait City\\\"}, \\n    {\\\"LAOS\\\",\\\"Vientiane\\\"}, {\\\"LEBANON\\\",\\\"Beirut\\\"}, \\n    {\\\"MALAYSIA\\\",\\\"Kuala Lumpur\\\"}, {\\\"THE MALDIVES\\\",\\\"Male\\\"}, \\n    {\\\"MONGOLIA\\\",\\\"Ulan Bator\\\"}, \\n    {\\\"MYANMAR (BURMA)\\\",\\\"Rangoon\\\"}, \\n    {\\\"NEPAL\\\",\\\"Katmandu\\\"}, {\\\"NORTH KOREA\\\",\\\"P\\u2019yongyang\\\"}, \\n    {\\\"OMAN\\\",\\\"Muscat\\\"}, {\\\"PAKISTAN\\\",\\\"Islamabad\\\"}, \\n    {\\\"PHILIPPINES\\\",\\\"Manila\\\"}, {\\\"QATAR\\\",\\\"Doha\\\"}, \\n    {\\\"SAUDI ARABIA\\\",\\\"Riyadh\\\"}, {\\\"SINGAPORE\\\",\\\"Singapore\\\"}, \\n    {\\\"SOUTH KOREA\\\",\\\"Seoul\\\"}, {\\\"SRI LANKA\\\",\\\"Colombo\\\"}, \\n    {\\\"SYRIA\\\",\\\"Damascus\\\"}, \\n    {\\\"TAIWAN (REPUBLIC OF CHINA)\\\",\\\"Taipei\\\"}, \\n    {\\\"THAILAND\\\",\\\"Bangkok\\\"}, {\\\"TURKEY\\\",\\\"Ankara\\\"}, \\n    {\\\"UNITED ARAB EMIRATES\\\",\\\"Abu Dhabi\\\"}, \\n    {\\\"VIETNAM\\\",\\\"Hanoi\\\"}, {\\\"YEMEN\\\",\\\"Sana\\u2019a\\\"}, \\n    // Australia and Oceania \\n    {\\\"AUSTRALIA\\\",\\\"Canberra\\\"}, {\\\"FIJI\\\",\\\"Suva\\\"}, \\n    {\\\"KIRIBATI\\\",\\\"Bairiki\\\"}, \\n    {\\\"MARSHALL ISLANDS\\\",\\\"Dalap-Uliga-Darrit\\\"}, \\n    {\\\"MICRONESIA\\\",\\\"Palikir\\\"}, {\\\"NAURU\\\",\\\"Yaren\\\"}, \\n    {\\\"NEW ZEALAND\\\",\\\"Wellington\\\"}, {\\\"PALAU\\\",\\\"Koror\\\"}, \\n    {\\\"PAPUA NEW GUINEA\\\",\\\"Port Moresby\\\"}, \\n    {\\\"SOLOMON ISLANDS\\\",\\\"Honaira\\\"}, {\\\"TONGA\\\",\\\"Nuku\\u2019alofa\\\"}, \\n    {\\\"TUVALU\\\",\\\"Fongafale\\\"}, {\\\"VANUATU\\\",\\\"< Port-Vila\\\"}, \\n    {\\\"WESTERN SAMOA\\\",\\\"Apia\\\"}, \\n    // Eastern Europe and former USSR \\n    {\\\"ARMENIA\\\",\\\"Yerevan\\\"}, {\\\"AZERBAIJAN\\\",\\\"Baku\\\"}, \\n    {\\\"BELARUS (BYELORUSSIA)\\\",\\\"Minsk\\\"},\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26ee6c178cfd41f6809fae98c61c23b4\",\n        \"type\": \"source_code\",\n        \"text\": \"{\\\"BULGARIA\\\",\\\"Sofia\\\"}, {\\\"GEORGIA\\\",\\\"Tbilisi\\\"}, \\n    {\\\"KAZAKSTAN\\\",\\\"Almaty\\\"}, {\\\"KYRGYZSTAN\\\",\\\"Alma-Ata\\\"}, \\n    {\\\"MOLDOVA\\\",\\\"Chisinau\\\"}, {\\\"RUSSIA\\\",\\\"Moscow\\\"}, \\n    {\\\"TAJIKISTAN\\\",\\\"Dushanbe\\\"}, {\\\"TURKMENISTAN\\\",\\\"Ashkabad\\\"}, \\n    {\\\"UKRAINE\\\",\\\"Kyiv\\\"}, {\\\"UZBEKISTAN\\\",\\\"Tashkent\\\"}, \\n    // Europe \\n    {\\\"ALBANIA\\\",\\\"Tirana\\\"}, {\\\"ANDORRA\\\",\\\"Andorra la Vella\\\"}, \\n    {\\\"AUSTRIA\\\",\\\"Vienna\\\"}, {\\\"BELGIUM\\\",\\\"Brussels\\\"}, \\n    {\\\"BOSNIA\\\",\\\"-\\\"}, {\\\"HERZEGOVINA\\\",\\\"Sarajevo\\\"}, \\n    {\\\"CROATIA\\\",\\\"Zagreb\\\"}, {\\\"CZECH REPUBLIC\\\",\\\"Prague\\\"}, \\n    {\\\"DENMARK\\\",\\\"Copenhagen\\\"}, {\\\"ESTONIA\\\",\\\"Tallinn\\\"}, \\n    {\\\"FINLAND\\\",\\\"Helsinki\\\"}, {\\\"FRANCE\\\",\\\"Paris\\\"}, \\n    {\\\"GERMANY\\\",\\\"Berlin\\\"}, {\\\"GREECE\\\",\\\"Athens\\\"}, \\n    {\\\"HUNGARY\\\",\\\"Budapest\\\"}, {\\\"ICELAND\\\",\\\"Reykjavik\\\"}, \\n    {\\\"IRELAND\\\",\\\"Dublin\\\"}, {\\\"ITALY\\\",\\\"Rome\\\"}, \\n    {\\\"LATVIA\\\",\\\"Riga\\\"}, {\\\"LIECHTENSTEIN\\\",\\\"Vaduz\\\"}, \\n    {\\\"LITHUANIA\\\",\\\"Vilnius\\\"}, {\\\"LUXEMBOURG\\\",\\\"Luxembourg\\\"}, \\n    {\\\"MACEDONIA\\\",\\\"Skopje\\\"}, {\\\"MALTA\\\",\\\"Valletta\\\"}, \\n    {\\\"MONACO\\\",\\\"Monaco\\\"}, {\\\"MONTENEGRO\\\",\\\"Podgorica\\\"}, \\n    {\\\"THE NETHERLANDS\\\",\\\"Amsterdam\\\"}, {\\\"NORWAY\\\",\\\"Oslo\\\"}, \\n    {\\\"POLAND\\\",\\\"Warsaw\\\"}, {\\\"PORTUGAL\\\",\\\"Lisbon\\\"}, \\n    {\\\"ROMANIA\\\",\\\"Bucharest\\\"}, {\\\"SAN MARINO\\\",\\\"San Marino\\\"}, \\n    {\\\"SERBIA\\\",\\\"Belgrade\\\"}, {\\\"SLOVAKIA\\\",\\\"Bratislava\\\"}, \\n    {\\\"SLOVENIA\\\",\\\"Ljuijana\\\"}, {\\\"SPAIN\\\",\\\"Madrid\\\"}, \\n    {\\\"SWEDEN\\\",\\\"Stockholm\\\"}, {\\\"SWITZERLAND\\\",\\\"Berne\\\"}, \\n    {\\\"UNITED KINGDOM\\\",\\\"London\\\"}, {\\\"VATICAN CITY\\\",\\\"---\\\"}, \\n    // North and Central America \\n    {\\\"ANTIGUA AND BARBUDA\\\",\\\"Saint John\\u2019s\\\"}, \\n    {\\\"BAHAMAS\\\",\\\"Nassau\\\"}, \\n    {\\\"BARBADOS\\\",\\\"Bridgetown\\\"}, {\\\"BELIZE\\\",\\\"Belmopan\\\"}, \\n    {\\\"CANADA\\\",\\\"Ottawa\\\"}, {\\\"COSTA RICA\\\",\\\"San Jose\\\"}, \\n    {\\\"CUBA\\\",\\\"Havana\\\"}, {\\\"DOMINICA\\\",\\\"Roseau\\\"}, \\n    {\\\"DOMINICAN REPUBLIC\\\",\\\"Santo Domingo\\\"}, \\n    {\\\"EL SALVADOR\\\",\\\"San Salvador\\\"}, \\n    {\\\"GRENADA\\\",\\\"Saint George\\u2019s\\\"}, \\n    {\\\"GUATEMALA\\\",\\\"Guatemala City\\\"}, \\n    {\\\"HAITI\\\",\\\"Port-au-Prince\\\"}, \\n    {\\\"HONDURAS\\\",\\\"Tegucigalpa\\\"}, {\\\"JAMAICA\\\",\\\"Kingston\\\"}, \\n    {\\\"MEXICO\\\",\\\"Mexico City\\\"}, {\\\"NICARAGUA\\\",\\\"Managua\\\"}, \\n    {\\\"PANAMA\\\",\\\"Panama City\\\"}, {\\\"ST. KITTS\\\",\\\"-\\\"}, \\n    {\\\"NEVIS\\\",\\\"Basseterre\\\"}, {\\\"ST. LUCIA\\\",\\\"Castries\\\"}, \\n    {\\\"ST. VINCENT AND THE GRENADINES\\\",\\\"Kingstown\\\"}, \\n    {\\\"UNITED STATES OF AMERICA\\\",\\\"Washington, D.C.\\\"}, \\n    // South America \\n    {\\\"ARGENTINA\\\",\\\"Buenos Aires\\\"}, \\n    {\\\"BOLIVIA\\\",\\\"Sucre (legal)/La Paz(administrative)\\\"}, \\n    {\\\"BRAZIL\\\",\\\"Brasilia\\\"}, {\\\"CHILE\\\",\\\"Santiago\\\"}, \\n    {\\\"COLOMBIA\\\",\\\"Bogota\\\"}, {\\\"ECUADOR\\\",\\\"Quito\\\"}, \\n    {\\\"GUYANA\\\",\\\"Georgetown\\\"}, {\\\"PARAGUAY\\\",\\\"Asuncion\\\"}, \\n    {\\\"PERU\\\",\\\"Lima\\\"}, {\\\"SURINAME\\\",\\\"Paramaribo\\\"}, \\n    {\\\"TRINIDAD AND TOBAGO\\\",\\\"Port of Spain\\\"}, \\n    {\\\"URUGUAY\\\",\\\"Montevideo\\\"}, {\\\"VENEZUELA\\\",\\\"Caracas\\\"},\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e49c6ebd298c4c18aa488c40acd7af6\",\n        \"type\": \"source_code\",\n        \"text\": \"private static class Entry \\n    implements Map.Entry<String,String> { \\n      int index; \\n      Entry(int index) { this.index = index; } \\n      public boolean equals(Object o) { \\n        return DATA[index][0].equals(o); \\n      }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef51ae2e9a19c465ddd157323bd6e8d8\",\n        \"type\": \"source_code\",\n        \"text\": \"public String getKey() { return DATA[index][0]; } \\n      public String getValue() { return DATA[index][1]; } \\n      public String setValue(String value) { \\n        throw new UnsupportedOperationException(); \\n      } \\n      public int hashCode() { \\n        return DATA[index][0].hashCode(); \\n      } \\n    } \\n    // Use AbstractSet by implementing size() & iterator() \\n    static class EntrySet \\n    extends AbstractSet<Map.Entry<String,String>> { \\n      private int size; \\n      EntrySet(int size) { \\n        if(size < 0) \\n          this.size = 0; \\n        // Can\\u2019t be any bigger than the array: \\n        else if(size > DATA.length) \\n          this.size = DATA.length; \\n        else \\n          this.size = size; \\n      } \\n      public int size() { return size; } \\n      private class Iter \\n      implements Iterator<Map.Entry<String,String>>