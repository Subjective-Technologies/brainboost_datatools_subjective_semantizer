\": \\\" + \\n        category.randomSelection()); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f24e63465f6d0b5b2ebe93220ea6d71\",\n        \"type\": \"source_code\",\n        \"text\": \"values = kind.getEnumConstants();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dabcb7fee2cccf62e57dea264e249497\",\n        \"type\": \"source_code\",\n        \"text\": \"enum Appetizer implements Food { \\n      SALAD, SOUP, SPRING_ROLLS; \\n    } \\n    enum MainCourse implements Food { \\n      LASAGNE, BURRITO, PAD_THAI, \\n      LENTILS, HUMMOUS, VINDALOO; \\n    } \\n    enum Dessert implements Food { \\n      TIRAMISU, GELATO, BLACK_FOREST_CAKE, \\n      FRUIT, CREME_CARAMEL; \\n    } \\n    enum Coffee implements Food { \\n      BLACK_COFFEE, DECAF_COFFEE, ESPRESSO, \\n      LATTE, CAPPUCCINO, TEA, HERB_TEA; \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ce76e3a4c678ea383878e5cbfab3aa3\",\n        \"type\": \"source_code\",\n        \"text\": \"return Enums.random(values);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"766e6a78401b242982199b5c149a325b\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) { \\n      for(Meal2 meal : Meal2.values()) { \\n        Food food = meal.randomSelection(); \\n        System.out.println(food); \\n      } \\n      System.out.println(\\\"---\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9435a48e798779f307b4839a6b4ecf1c\",\n        \"type\": \"source_code\",\n        \"text\": \"EnumSet<AlarmPoints> points = \\n      EnumSet.noneOf(AlarmPoints.class); // Empty set \\n    points.add(BATHROOM); \\n    print(points); \\n    points.addAll(EnumSet.of(STAIR1, STAIR2, KITCHEN)); \\n    print(points); \\n    points = EnumSet.allOf(AlarmPoints.class); \\n    points.removeAll(EnumSet.of(STAIR1, STAIR2, KITCHEN)); \\n    print(points); \\n    points.removeAll(EnumSet.range(OFFICE1, OFFICE4)); \\n    print(points); \\n    points = EnumSet.complementOf(points); \\n    print(points);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d07fb7bb4ed5ed09b67ec368ae1072c0\",\n        \"type\": \"source_code\",\n        \"text\": \"A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, \\n    A22, A23, A24, A25, A26, A27, A28, A29, A30, A31, A32, \\n    A33, A34, A35, A36, A37, A38, A39, A40, A41, A42, A43, \\n    A44, A45, A46, A47, A48, A49, A50, A51, A52, A53, A54, \\n    A55, A56, A57, A58, A59, A60, A61, A62, A63, A64, A65, \\n    A66, A67, A68, A69, A70, A71, A72, A73, A74, A75 }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"63525907ac263b25be31447ed2324d05\",\n        \"type\": \"source_code\",\n        \"text\": \"EnumSet<Big> bigEnumSet = EnumSet.allOf(Big.class); \\n    System.out.println(bigEnumSet);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b29b6fff611252d50a5bbec02f957d99\",\n        \"type\": \"source_code\",\n        \"text\": \"EnumMap<AlarmPoints,Command> em = \\n      new EnumMap<AlarmPoints,Command>(AlarmPoints.class); \\n    em.put(KITCHEN, new Command() { \\n      public void action() { print(\\\"Kitchen fire!\\\"); } \\n    }); \\n    em.put(BATHROOM, new Command() { \\n      public void action() { print(\\\"Bathroom alert!\\\"); } \\n    }); \\n    for(Map.Entry<AlarmPoints,Command> e : em.entrySet()) { \\n      printnb(e.getKey() + \\\": \\\"); \\n      e.getValue().action(); \\n    } \\n    try { // If there\\u2019s no value for a particular key: \\n      em.get(UTILITY).action(); \\n    } catch(Exception e) { \\n      print(e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f7fce118a85b76c7cb64dc5eb7b3ee2\",\n        \"type\": \"source_code\",\n        \"text\": \"String getInfo() { \\n      return \\n        DateFormat.getDateInstance().format(new Date()); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38988002c01163d8302123b9913d9feb\",\n        \"type\": \"source_code\",\n        \"text\": \"String getInfo() { \\n      return System.getenv(\\\"CLASSPATH\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"561772829f3a2b35a7f3eeea708093d1\",\n        \"type\": \"source_code\",\n        \"text\": \"String getInfo() { \\n      return System.getProperty(\\\"java.version\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"00843c22892fbbd98bd2e614710530c1\",\n        \"type\": \"source_code\",\n        \"text\": \"for(ConstantSpecificMethod csm : values()) \\n      System.out.println(csm.getInfo());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c66842b3dfaa73d7fcf3c0f22a4865da\",\n        \"type\": \"source_code\",\n        \"text\": \"UNDERBODY { \\n      void action() { print(\\\"Spraying the underbody\\\"); } \\n    }, \\n    WHEELWASH { \\n      void action() { print(\\\"Washing the wheels\\\"); } \\n    }, \\n    PREWASH { \\n      void action() { print(\\\"Loosening the dirt\\\"); } \\n    }, \\n    BASIC { \\n      void action() { print(\\\"The basic wash\\\"); } \\n    }, \\n    HOTWAX { \\n      void action() { print(\\\"Applying hot wax\\\"); } \\n    }, \\n    RINSE { \\n      void action() { print(\\\"Rinsing\\\"); } \\n    }, \\n    BLOWDRY { \\n      void action() { print(\\\"Blowing dry\\\"); } \\n    }; \\n    abstract void action();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"776c6b2ca44b861b1e5a4da6263fd318\",\n        \"type\": \"source_code\",\n        \"text\": \"EnumSet.of(Cycle.BASIC, Cycle.RINSE);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ccfde6802471a3e309b06e598951827f\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Cycle c : cycles) \\n      c.action();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"507241cba0c5f6eb6c691c6e81830ce3\",\n        \"type\": \"source_code\",\n        \"text\": \"CarWash wash = new CarWash(); \\n    print(wash); \\n    wash.washCar(); \\n    // Order of addition is unimportant: \\n    wash.add(Cycle.BLOWDRY); \\n    wash.add(Cycle.BLOWDRY); // Duplicates ignored \\n    wash.add(Cycle.RINSE); \\n    wash.add(Cycle.HOTWAX); \\n    print(wash); \\n    wash.washCar();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37233c462cd8af5ee87ec14bf9bbf354\",\n        \"type\": \"source_code\",\n        \"text\": \"void f() { print(\\\"Overridden method\\\"); }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d84b0c024d3ede3fddc66a9c8e7fc8cd\",\n        \"type\": \"source_code\",\n        \"text\": \"for(OverrideConstantSpecific ocs : values()) { \\n      printnb(ocs + \\\": \\\"); \\n      ocs.f(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7038893393ecdfe255b255dac4b4b01c\",\n        \"type\": \"source_code\",\n        \"text\": \"return toString() + \\n      \\\", General Delivery: \\\" + generalDelivery + \\n      \\\", Address Scanability: \\\" + scannability + \\n      \\\", Address Readability: \\\" + readability + \\n      \\\", Address Address: \\\" + address + \\n      \\\", Return address: \\\" + returnAddress;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61407ba4d61134f491fb69c0e6ab8ef9\",\n        \"type\": \"source_code\",\n        \"text\": \"Mail m = new Mail(); \\n    m.generalDelivery= Enums.random(GeneralDelivery.class); \\n    m.scannability = Enums.random(Scannability.class); \\n    m.readability = Enums.random(Readability.class); \\n    m.address = Enums.random(Address.class); \\n    m.returnAddress = Enums.random(ReturnAddress.class); \\n    return m;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0fc75aefe1f481ba56bb0ac7ff5c2a23\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterable<Mail>() { \\n      int n = count; \\n      public Iterator<Mail> iterator() { \\n        return new Iterator<Mail>() { \\n          public boolean hasNext() { return n-- > 0; } \\n          public Mail next() { return randomMail(); } \\n          public void remove() { // Not implemented \\n            throw new UnsupportedOperationException(); \\n          } \\n        }; \\n      } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed0cfcabf78d03605c9c7f74a3c4ca1a\",\n        \"type\": \"source_code\",\n        \"text\": \"GENERAL_DELIVERY { \\n      boolean handle(Mail m) { \\n        switch(m.generalDelivery) { \\n          case YES: \\n            print(\\\"Using general delivery for \\\" + m); \\n            return true; \\n          default: return false; \\n        }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c6b49ac9397618dbfd74a6e03420e2a6\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    }, \\n    MACHINE_SCAN { \\n      boolean handle(Mail m) { \\n        switch(m.scannability) { \\n          case UNSCANNABLE: return false; \\n          default: \\n            switch(m.address) { \\n              case INCORRECT: return false; \\n              default: \\n                print(\\\"Delivering \\\"+ m + \\\" automatically\\\"); \\n                return true; \\n            } \\n        } \\n      } \\n    }, \\n    VISUAL_INSPECTION { \\n      boolean handle(Mail m) { \\n        switch(m.readability) { \\n          case ILLEGIBLE: return false; \\n          default: \\n            switch(m.address) { \\n              case INCORRECT: return false; \\n              default: \\n                print(\\\"Delivering \\\" + m + \\\" normally\\\"); \\n                return true; \\n            } \\n        } \\n      } \\n    }, \\n    RETURN_TO_SENDER { \\n      boolean handle(Mail m) { \\n        switch(m.returnAddress) { \\n          case MISSING: return false; \\n          default: \\n            print(\\\"Returning \\\" + m + \\\" to sender\\\"); \\n            return true; \\n        } \\n      } \\n    }; \\n    abstract boolean handle(Mail m);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"250015f2b0a8e21fd04fc0fde3b3b2ac\",\n        \"type\": \"source_code\",\n        \"text\": \"for(MailHandler handler : MailHandler.values()) \\n      if(handler.handle(m)) \\n        return; \\n    print(m + \\\" is a dead letter\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3dfac4c25083b710480dee3632fb7e2a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Mail mail : Mail.generator(10)) { \\n      print(mail.details()); \\n      handle(mail); \\n      print(\\\"*****\\\"); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f1035709e91fa4e207f7f6a225e828a5\",\n        \"type\": \"source_code\",\n        \"text\": \"public int amount() { // Disallow \\n      throw new RuntimeException(\\\"ABORT.amount()\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"330e5cf5755889cabe50f97203d43bd1\",\n        \"type\": \"source_code\",\n        \"text\": \"public int amount() { // Disallow \\n      throw new RuntimeException(\\\"SHUT_DOWN.amount()\\\"); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fba2174db6ec5f4d8d5abfb159964306\",\n        \"type\": \"source_code\",\n        \"text\": \"// Don\\u2019t include STOP: \\n    return values()[rand.nextInt(values().length - 1)];\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65f8706c0e139ea4f3597133146d3372\",\n        \"type\": \"source_code\",\n        \"text\": \"new EnumMap<Input,Category>(Input.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d09f31997957aebe763b66a0c30ef8f4\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Category c : Category.class.getEnumConstants()) \\n      for(Input type : c.values) \\n        categories.put(type, c);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"96c93c96d9bcd4f78aea14c5b62ed3f6\",\n        \"type\": \"source_code\",\n        \"text\": \"return categories.get(input);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35e182433b27904da33b246d2be2733a\",\n        \"type\": \"source_code\",\n        \"text\": \"RESTING { \\n      void next(Input input) { \\n        switch(Category.categorize(input)) { \\n          case MONEY: \\n            amount += input.amount(); \\n            state = ADDING_MONEY; \\n            break; \\n          case SHUT_DOWN: \\n            state = TERMINAL; \\n          default: \\n        } \\n      } \\n    },\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aad6c1dfa7a686b5fbe12e7b69d7f0cc\",\n        \"type\": \"source_code\",\n        \"text\": \"ADDING_MONEY { \\n      void next(Input input) { \\n        switch(Category.categorize(input)) { \\n          case MONEY: \\n            amount += input.amount(); \\n            break; \\n          case ITEM_SELECTION: \\n            selection = input; \\n            if(amount < selection.amount()) \\n              print(\\\"Insufficient money for \\\" + selection); \\n            else state = DISPENSING; \\n            break; \\n          case QUIT_TRANSACTION: \\n            state = GIVING_CHANGE; \\n            break; \\n          case SHUT_DOWN: \\n            state = TERMINAL; \\n          default: \\n        } \\n      } \\n    },\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4927872571033a0c42010779476c479b\",\n        \"type\": \"source_code\",\n        \"text\": \"DISPENSING(StateDuration.TRANSIENT) { \\n      void next() { \\n        print(\\\"here is your \\\" + selection); \\n        amount -= selection.amount(); \\n        state = GIVING_CHANGE; \\n      } \\n    }, \\n    GIVING_CHANGE(StateDuration.TRANSIENT) { \\n      void next() { \\n        if(amount > 0) {\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07a66a781ee9e04dbf768c4b41d01ef4\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Your change: \\\" + amount); \\n          amount = 0; \\n        } \\n        state = RESTING; \\n      } \\n    },\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b43725c3f6a048f7987d8c8d56c67b1\",\n        \"type\": \"source_code\",\n        \"text\": \"TERMINAL { void output() { print(\\\"Halted\\\"); } }; \\n    private boolean isTransient = false; \\n    State() {} \\n    State(StateDuration trans) { isTransient = true; } \\n    void next(Input input) { \\n      throw new RuntimeException(\\\"Only call \\\" + \\n        \\\"next(Input input) for non-transient states\\\"); \\n    } \\n    void next() { \\n      throw new RuntimeException(\\\"Only call next() for \\\" + \\n        \\\"StateDuration.TRANSIENT states\\\"); \\n    } \\n    void output() { print(amount); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"91b00e99128b7fa4bd1eda3b7706cbac\",\n        \"type\": \"source_code\",\n        \"text\": \"while(state != State.TERMINAL) { \\n      state.next(gen.next()); \\n      while(state.isTransient) \\n        state.next(); \\n      state.output(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57d3402c26dc71f9141d6f8e80b81719\",\n        \"type\": \"source_code\",\n        \"text\": \"Generator<Input> gen = new RandomInputGenerator(); \\n    if(args.length == 1) \\n      gen = new FileInputGenerator(args[0]); \\n    run(gen);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12c5dffc399d58ae1460a5f2ba1d9e1e\",\n        \"type\": \"source_code\",\n        \"text\": \"input = new TextFile(fileName, \\\";\\\").iterator();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43a12216e6c4f84e1d5e255f84438467\",\n        \"type\": \"source_code\",\n        \"text\": \"if(!input.hasNext()) \\n      return null; \\n    return Enum.valueOf(Input.class, input.next().trim());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74fece90dbc56e2b19588b31ad6444bf\",\n        \"type\": \"source_code\",\n        \"text\": \"switch(rand.nextInt(3)) { \\n      default: \\n      case 0: return new Scissors(); \\n      case 1: return new Paper(); \\n      case 2: return new Rock(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4807c048a4b6874390311ce749e8425c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n      a + \\\" vs. \\\" + b + \\\": \\\" +  a.compete(b));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e3be2f1c2e2ba0c96f9f22d044532d56\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < SIZE; i++) \\n      match(newItem(), newItem());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebc691222e869d8c8f732450af11a6da\",\n        \"type\": \"source_code\",\n        \"text\": \"this.vPAPER = paper; \\n    this.vSCISSORS = scissors; \\n    this.vROCK = rock;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"494f0d9530f8b61686dd3a78bd1faa10\",\n        \"type\": \"source_code\",\n        \"text\": \"switch(it) { \\n      default: \\n      case PAPER: return vPAPER; \\n      case SCISSORS: return vSCISSORS; \\n      case ROCK: return vROCK; \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad21e401e36bba35fed0abb5bfb6dd60\",\n        \"type\": \"source_code\",\n        \"text\": \"RoShamBo.play(RoShamBo2.class, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4807c048a4b6874390311ce749e8425c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n      a + \\\" vs. \\\" + b + \\\": \\\" +  a.compete(b));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"73ce99faa7bd0d2b5daa1bc1c3141b75\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < size; i++)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1f40d31319ae1188d752b313353de17b\",\n        \"type\": \"source_code\",\n        \"text\": \"match( \\n        Enums.random(rsbClass),Enums.random(rsbClass));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c7dc5cb3fe78eb6101263c90786771a8\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo3 it) { \\n      switch(it) { \\n        default: // To placate the compiler \\n        case PAPER: return DRAW; \\n        case SCISSORS: return LOSE; \\n        case ROCK: return WIN; \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65e7a055502957d3f1424aa59d5f7a4e\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo3 it) { \\n      switch(it) { \\n        default: \\n        case PAPER: return WIN; \\n        case SCISSORS: return DRAW; \\n        case ROCK: return LOSE; \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c82b0cfc8ffbb2767b0c173b79753125\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo3 it) { \\n      switch(it) { \\n        default: \\n        case PAPER: return LOSE; \\n        case SCISSORS: return WIN; \\n        case ROCK: return DRAW; \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f270ce870381a109111a82152713f0a2\",\n        \"type\": \"source_code\",\n        \"text\": \"RoShamBo.play(RoShamBo3.class, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbbfc3cd1360c7f9a1f93bbf6a1f9537\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo4 opponent) { \\n      return compete(SCISSORS, opponent); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ce37f8b0e39b482736fbccd656a8d889\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo4 opponent) { \\n      return compete(PAPER, opponent); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db1fb8e4848c32ee45d16a19de4c96a9\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo4 opponent) { \\n      return compete(ROCK, opponent); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f07cbe353bfbeddc5880a07b7a39c85e\",\n        \"type\": \"source_code\",\n        \"text\": \"return ((opponent == this) ? Outcome.DRAW \\n        : ((opponent == loser) ? Outcome.WIN \\n                               : Outcome.LOSE));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b6ea9ade6d0f416ce9a52cfcb5ab457\",\n        \"type\": \"source_code\",\n        \"text\": \"RoShamBo.play(RoShamBo4.class, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68aa36b7b6d1932c11fa4b4223a6f856\",\n        \"type\": \"source_code\",\n        \"text\": \"table = new EnumMap<RoShamBo5, \\n      EnumMap<RoShamBo5,Outcome>>(RoShamBo5.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7872322fcd69bbc5dbc6fdd177fdead5\",\n        \"type\": \"source_code\",\n        \"text\": \"for(RoShamBo5 it : RoShamBo5.values()) \\n      table.put(it, \\n        new EnumMap<RoShamBo5,Outcome>(RoShamBo5.class)); \\n    initRow(PAPER, DRAW, LOSE, WIN);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c12b0f82767b2825a05d40568bd61fb\",\n        \"type\": \"source_code\",\n        \"text\": \"initRow(SCISSORS, WIN, DRAW, LOSE); \\n    initRow(ROCK, LOSE, WIN, DRAW);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"512026adbf3ab68a9faad9910d3ebd0f\",\n        \"type\": \"source_code\",\n        \"text\": \"Outcome vPAPER, Outcome vSCISSORS, Outcome vROCK) { \\n    EnumMap<RoShamBo5,Outcome> row = \\n      RoShamBo5.table.get(it); \\n    row.put(RoShamBo5.PAPER, vPAPER); \\n    row.put(RoShamBo5.SCISSORS, vSCISSORS); \\n    row.put(RoShamBo5.ROCK, vROCK);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d55e03f79662c9d456de8d9a8a30e3b\",\n        \"type\": \"source_code\",\n        \"text\": \"return table.get(this).get(it);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6511c25b2cc1abfc69db573e0b95faa5\",\n        \"type\": \"source_code\",\n        \"text\": \"RoShamBo.play(RoShamBo5.class, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfbb4006ab957db3165d5cd40bc42a2b\",\n        \"type\": \"source_code\",\n        \"text\": \"{ DRAW, LOSE, WIN }, // PAPER \\n    { WIN, DRAW, LOSE }, // SCISSORS \\n    { LOSE, WIN, DRAW }, // ROCK\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4cedb0e8b897b71296bab77aff4f4b6\",\n        \"type\": \"source_code\",\n        \"text\": \"return table[this.ordinal()][other.ordinal()];\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a388558f9d64f20bc3b3b7444a1ee5ea\",\n        \"type\": \"source_code\",\n        \"text\": \"RoShamBo.play(RoShamBo6.class, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"772dcd07b7719a68638d5bd7f6618efc\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Executing..\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"197cf2e83d66f7a35db305f2638cd48d\",\n        \"type\": \"source_code\",\n        \"text\": \"return (password.matches(\\\"\\\\\\\\w*\\\\\\\\d\\\\\\\\w*\\\"));\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"df734656c1da983975b198986d7c16d7\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> prevPasswords, String password) { \\n    return !prevPasswords.contains(password);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6aee58e84a9e66a800439f8af2a6a1d4\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Method m : cl.getDeclaredMethods()) { \\n      UseCase uc = m.getAnnotation(UseCase.class); \\n      if(uc != null) { \\n        System.out.println(\\\"Found Use Case:\\\" + uc.id() + \\n          \\\" \\\" + uc.description()); \\n        useCases.remove(new Integer(uc.id())); \\n      } \\n    } \\n    for(int i : useCases) { \\n      System.out.println(\\\"Warning: Missing use case-\\\" + i); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bacea7bf3d028a0f646927ddac604e5c\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Integer> useCases = new ArrayList<Integer>(); \\n    Collections.addAll(useCases, 47, 48, 49, 50); \\n    trackUseCases(useCases, PasswordUtils.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78a7d84181aa3a69cf91bec55258ffd4\",\n        \"type\": \"source_code\",\n        \"text\": \"default @Constraints(unique=true);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6933f1ad8a3396cf9d9fe99ed5282f18\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length < 1) { \\n      System.out.println(\\\"arguments: annotated classes\\\"); \\n      System.exit(0); \\n    } \\n    for(String className : args) { \\n      Class<?> cl = Class.forName(className); \\n      DBTable dbTable = cl.getAnnotation(DBTable.class); \\n      if(dbTable == null) { \\n        System.out.println( \\n          \\\"No DBTable annotations in class \\\" + className); \\n        continue; \\n      } \\n      String tableName = dbTable.name(); \\n      // If the name is empty, use the Class name: \\n      if(tableName.length() < 1) \\n        tableName = cl.getName().toUpperCase(); \\n      List<String> columnDefs = new ArrayList<String>(); \\n      for(Field field : cl.getDeclaredFields()) { \\n        String columnName = null; \\n        Annotation[] anns = field.getDeclaredAnnotations(); \\n        if(anns.length < 1) \\n          continue; // Not a db table column \\n        if(anns[0] instanceof SQLInteger) { \\n          SQLInteger sInt = (SQLInteger) anns[0]; \\n          // Use field name if name not specified \\n          if(sInt.name().length() < 1) \\n            columnName = field.getName().toUpperCase(); \\n          else \\n            columnName = sInt.name(); \\n          columnDefs.add(columnName + \\\" INT\\\" + \\n            getConstraints(sInt.constraints())); \\n        } \\n        if(anns[0] instanceof SQLString) { \\n          SQLString sString = (SQLString) anns[0]; \\n          // Use field name if name not specified. \\n          if(sString.name().length() < 1) \\n            columnName = field.getName().toUpperCase(); \\n          else \\n            columnName = sString.name(); \\n          columnDefs.add(columnName + \\\" VARCHAR(\\\" + \\n            sString.value() + \\\")\\\" + \\n            getConstraints(sString.constraints())); \\n        } \\n        StringBuilder createCommand = new StringBuilder( \\n          \\\"CREATE TABLE \\\" + tableName + \\\"(\\\"); \\n        for(String columnDef : columnDefs) \\n          createCommand.append(\\\"\\\\n    \\\" + columnDef + \\\",\\\"); \\n        // Remove trailing comma \\n        String tableCreate = createCommand.substring( \\n          0, createCommand.length() - 1) + \\\");\\\"; \\n        System.out.println(\\\"Table Creation SQL for \\\" + \\n          className + \\\" is :\\\\n\\\" + tableCreate); \\n      } \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e53cd8c5998bf422835d5e2673e53360\",\n        \"type\": \"source_code\",\n        \"text\": \"String constraints = \\\"\\\"; \\n    if(!con.allowNull()) \\n      constraints += \\\" NOT NULL\\\"; \\n    if(con.primaryKey()) \\n      constraints += \\\" PRIMARY KEY\\\"; \\n    if(con.unique()) \\n      constraints += \\\" UNIQUE\\\"; \\n    return constraints;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e41df977a4223097fba08cfc654b1593\",\n        \"type\": \"source_code\",\n        \"text\": \"FIRSTNAME VARCHAR(30));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d4cf4d4d1c3f01223f59eda4efccf92b\",\n        \"type\": \"source_code\",\n        \"text\": \"FIRSTNAME VARCHAR(30), \\n    LASTNAME VARCHAR(50));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5323e8adfd3ca98d50566592d79b3c5\",\n        \"type\": \"source_code\",\n        \"text\": \"FIRSTNAME VARCHAR(30), \\n    LASTNAME VARCHAR(50), \\n    AGE INT);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b62756b24a2f2439c8db0ae6e9dade90\",\n        \"type\": \"source_code\",\n        \"text\": \"FIRSTNAME VARCHAR(30), \\n    LASTNAME VARCHAR(50), \\n    AGE INT, \\n    HANDLE VARCHAR(30) PRIMARY KEY);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15bf7d2a91d659789db95737c499cbea\",\n        \"type\": \"source_code\",\n        \"text\": \"int total = 0; \\n    for(int i = 0; i < x; i++) \\n      total = add(total, y); \\n    return total;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f40f82cb8bfbd966121c9951e39e3af\",\n        \"type\": \"source_code\",\n        \"text\": \"Multiplier m = new Multiplier(); \\n    System.out.println(\\\"11*16 = \\\" + m.multiply(11, 16));\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5ca07ef55cbbdded42091429807003fe\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<MethodDeclaration>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f59d2f9b4a2fd42ed37b58c10128ba3c\",\n        \"type\": \"source_code\",\n        \"text\": \"AnnotationProcessorEnvironment env) { this.env = env; }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b78d4897afe724c55497d8c5daa09fea\",\n        \"type\": \"source_code\",\n        \"text\": \"for(TypeDeclaration typeDecl : \\n      env.getSpecifiedTypeDeclarations()) { \\n      ExtractInterface annot = \\n        typeDecl.getAnnotation(ExtractInterface.class); \\n      if(annot == null) \\n        break; \\n      for(MethodDeclaration m : typeDecl.getMethods()) \\n        if(m.getModifiers().contains(Modifier.PUBLIC) && \\n           !(m.getModifiers().contains(Modifier.STATIC))) \\n          interfaceMethods.add(m); \\n      if(interfaceMethods.size() > 0) {\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e770fe3163afea4cab95b8d0afa134dd\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n          PrintWriter writer = \\n            env.getFiler().createSourceFile(annot.value()); \\n          writer.println(\\\"package \\\" + \\n            typeDecl.getPackage().getQualifiedName() +\\\";\\\"); \\n          writer.println(\\\"public interface \\\" + \\n            annot.value() + \\\" {\\\"); \\n          for(MethodDeclaration m : interfaceMethods) { \\n            writer.print(\\\"  public \\\"); \\n            writer.print(m.getReturnType() + \\\" \\\"); \\n            writer.print(m.getSimpleName() + \\\" (\\\"); \\n            int i = 0; \\n            for(ParameterDeclaration parm : \\n              m.getParameters()) { \\n              writer.print(parm.getType() + \\\" \\\" + \\n                parm.getSimpleName()); \\n              if(++i < m.getParameters().size()) \\n                writer.print(\\\", \\\"); \\n            } \\n            writer.println(\\\");\\\"); \\n          } \\n          writer.println(\\\"}\\\"); \\n          writer.close(); \\n        } catch(IOException ioe) { \\n          throw new RuntimeException(ioe); \\n        } \\n      } \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"683c0246e4bd95f921a45ce41ac3f049\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<AnnotationTypeDeclaration> atds, \\n    AnnotationProcessorEnvironment env) { \\n    return new InterfaceExtractorProcessor(env);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b0841999f78412be4e878de23a41445d\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\n     Collections.singleton(\\\"annotations.ExtractInterface\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1e2831dea4273ba6008da7f925bb00d\",\n        \"type\": \"source_code\",\n        \"text\": \"return Collections.emptySet();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1b668af8506c5dcd6f43829f80dabcff\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<AnnotationTypeDeclaration> atds, \\n    AnnotationProcessorEnvironment env) { \\n    return new TableCreationProcessor(env);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"81253b8000b01e3f04f78c875bfac8b5\",\n        \"type\": \"source_code\",\n        \"text\": \"return Arrays.asList( \\n      \\\"annotations.database.DBTable\\\", \\n      \\\"annotations.database.Constraints\\\", \\n      \\\"annotations.database.SQLString\\\", \\n      \\\"annotations.database.SQLInteger\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1e2831dea4273ba6008da7f925bb00d\",\n        \"type\": \"source_code\",\n        \"text\": \"return Collections.emptySet();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"29a0b50c9e57a188c08768cd626edd8c\",\n        \"type\": \"source_code\",\n        \"text\": \"implements AnnotationProcessor { \\n    private final AnnotationProcessorEnvironment env; \\n    private String sql = \\\"\\\"; \\n    public TableCreationProcessor( \\n      AnnotationProcessorEnvironment env) { \\n      this.env = env; \\n    } \\n    public void process() { \\n      for(TypeDeclaration typeDecl : \\n        env.getSpecifiedTypeDeclarations()) { \\n        typeDecl.accept(getDeclarationScanner( \\n          new TableCreationVisitor(), NO_OP)); \\n        sql = sql.substring(0, sql.length() - 1) + \\\");\\\"; \\n        System.out.println(\\\"creation SQL is :\\\\n\\\" + sql); \\n        sql = \\\"\\\"; \\n      } \\n    } \\n    private class TableCreationVisitor \\n      extends SimpleDeclarationVisitor { \\n      public void visitClassDeclaration( \\n        ClassDeclaration d) { \\n        DBTable dbTable = d.getAnnotation(DBTable.class);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2bae6df8aa191978b15b1de1f7589779\",\n        \"type\": \"source_code\",\n        \"text\": \"if(dbTable != null) { \\n          sql += \\\"CREATE TABLE \\\"; \\n          sql += (dbTable.name().length() < 1) \\n            ? d.getSimpleName().toUpperCase() \\n            : dbTable.name(); \\n          sql += \\\" (\\\"; \\n        } \\n      } \\n      public void visitFieldDeclaration( \\n        FieldDeclaration d) { \\n        String columnName = \\\"\\\"; \\n        if(d.getAnnotation(SQLInteger.class) != null) { \\n          SQLInteger sInt = d.getAnnotation( \\n              SQLInteger.class); \\n          // Use field name if name not specified \\n          if(sInt.name().length() < 1) \\n            columnName = d.getSimpleName().toUpperCase(); \\n          else \\n            columnName = sInt.name(); \\n          sql += \\\"\\\\n    \\\" + columnName + \\\" INT\\\" + \\n            getConstraints(sInt.constraints()) + \\\",\\\"; \\n        } \\n        if(d.getAnnotation(SQLString.class) != null) { \\n          SQLString sString = d.getAnnotation( \\n              SQLString.class); \\n          // Use field name if name not specified. \\n          if(sString.name().length() < 1) \\n            columnName = d.getSimpleName().toUpperCase(); \\n          else \\n            columnName = sString.name(); \\n          sql += \\\"\\\\n    \\\" + columnName + \\\" VARCHAR(\\\" + \\n            sString.value() + \\\")\\\" + \\n            getConstraints(sString.constraints()) + \\\",\\\"; \\n        } \\n      } \\n      private String getConstraints(Constraints con) { \\n        String constraints = \\\"\\\"; \\n        if(!con.allowNull()) \\n          constraints += \\\" NOT NULL\\\"; \\n        if(con.primaryKey()) \\n          constraints += \\\" PRIMARY KEY\\\"; \\n        if(con.unique()) \\n          constraints += \\\" UNIQUE\\\"; \\n        return constraints; \\n      } \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbff25dfbbc5fd0ff42dc2c8dbe2fa26\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"This is methodOne\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3f797645c0516001b91c01ad4204b97\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"This is methodTwo\\\"); \\n    return 2;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d2804551db4c0bd92246fb15f6d2a0\",\n        \"type\": \"source_code\",\n        \"text\": \"return methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7dbacef8ed39d916fd600de0d76e862d\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit AtUnitExample1\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d2804551db4c0bd92246fb15f6d2a0\",\n        \"type\": \"source_code\",\n        \"text\": \"return methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9badbe8b2a8588b734ff1e743a442a4\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n     \\\"java net.mindview.atunit.AtUnit AtUnitExternalTest\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"706327ad3208ef914a161d378bf7ab35\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\n      testObject.methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a93f4d9e769866eb02b660979ed9dae0\",\n        \"type\": \"source_code\",\n        \"text\": \"return testObject.methodTwo() == 2;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a32588524a7b10cc34d65e014ffb85a5\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n     \\\"java net.mindview.atunit.AtUnit AtUnitComposition\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbff25dfbbc5fd0ff42dc2c8dbe2fa26\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"This is methodOne\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3f797645c0516001b91c01ad4204b97\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"This is methodTwo\\\"); \\n    return 2;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c98c1715d67f3451bcc5bfdfe7e5eb71\",\n        \"type\": \"source_code\",\n        \"text\": \"assert methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b8e04b00b23133496c09a007fee0f500\",\n        \"type\": \"source_code\",\n        \"text\": \"assert 1 == 2: \\\"What a surprise!\\\";\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eaa44db3f0b0e8a8e2feaedc8f510844\",\n        \"type\": \"source_code\",\n        \"text\": \"new FileInputStream(\\\"nofile.txt\\\"); // Throws\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c30846a78327c0efd481615c41cb1396\",\n        \"type\": \"source_code\",\n        \"text\": \"// Assertion with message: \\n    assert methodTwo() == 2: \\\"methodTwo must equal 2\\\"; \\n    return methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c6ec7931916373c6571ef579b403010d\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit AtUnitExample2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"365ca66dd66060ed175a2ad280f8c26d\",\n        \"type\": \"source_code\",\n        \"text\": \"assert testObject.isEmpty();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b246e501b18e26d663ad436d4541de83\",\n        \"type\": \"source_code\",\n        \"text\": \"testObject.add(\\\"one\\\"); \\n    assert testObject.contains(\\\"one\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7a6776bc80f6257c97fbc68f82928036\",\n        \"type\": \"source_code\",\n        \"text\": \"testObject.add(\\\"one\\\"); \\n    testObject.remove(\\\"one\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"365ca66dd66060ed175a2ad280f8c26d\",\n        \"type\": \"source_code\",\n        \"text\": \"assert testObject.isEmpty();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"239ed760111e5f8fd949e714cae616b0\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit HashSetTest\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbff25dfbbc5fd0ff42dc2c8dbe2fa26\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"This is methodOne\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3f797645c0516001b91c01ad4204b97\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"This is methodTwo\\\"); \\n    return 2;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"27ba9f212f257778f427e5aa530b73c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return new AtUnitExample3(47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d2804551db4c0bd92246fb15f6d2a0\",\n        \"type\": \"source_code\",\n        \"text\": \"return methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e123247ab97acc78c155d116cec5b306\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit AtUnitExample3\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b1c892bb50c7521ad4510e15e86b39f2\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"are thin at one end, much MUCH thicker in the \\\" + \\n    \\\"middle, and then thin again at the far end.\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3595830ad6d838af28ecb8404177cdac\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Character> chars = new ArrayList<Character>(); \\n    for(Character c : word.toCharArray()) \\n      chars.add(c); \\n    Collections.shuffle(chars, rand); \\n    StringBuilder result = new StringBuilder(); \\n    for(char ch : chars) \\n      result.append(ch); \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"67dbeab4a9dc4a1d19fa0f226368a317\",\n        \"type\": \"source_code\",\n        \"text\": \"Arrays.asList(theory.split(\\\" \\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed593573ae2830dc8d82ca552b120abb\",\n        \"type\": \"source_code\",\n        \"text\": \"static Iterator<String> words = input.iterator();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fc0dcfa8c8f912e65fee7062ade90ee3\",\n        \"type\": \"source_code\",\n        \"text\": \"if(words.hasNext()) \\n      return new AtUnitExample4(words.next()); \\n    else \\n      return null;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8c9f4b8134c420f418d4d7f4f89ac711\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"\\u2018\\\" + getWord() + \\\"\\u2018\\\"); \\n    return getWord().equals(\\\"are\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70a135068e63dfdbf18d47fb2b5d1838\",\n        \"type\": \"source_code\",\n        \"text\": \"// Change to a specific seed to get verifiable results: \\n    rand = new Random(47); \\n    print(\\\"\\u2018\\\" + getWord() + \\\"\\u2018\\\"); \\n    String scrambled = scrambleWord(); \\n    print(scrambled);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcdb0dc8ca74ee9d4e6909245a5e666c\",\n        \"type\": \"source_code\",\n        \"text\": \"return scrambled.equals(\\\"lAl\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fccef3dfc0dd233eac1b0fd33f8204b7\",\n        \"type\": \"source_code\",\n        \"text\": \"rand = new Random(74); \\n    print(\\\"\\u2018\\\" + getWord() + \\\"\\u2018\\\"); \\n    String scrambled = scrambleWord(); \\n    print(scrambled); \\n    return scrambled.equals(\\\"tsaeborornussu\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9eb103ce0f78f4726d5a91bb67c875ed\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"starting\\\"); \\n    OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit AtUnitExample4\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"243d5c5eb82b21b316cb43e082183cf9\",\n        \"type\": \"source_code\",\n        \"text\": \"String id = Integer.toString(counter++); \\n    try { \\n      output = new PrintWriter(\\\"Test\\\" + id + \\\".txt\\\"); \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    } \\n    return new AtUnitExample5(id);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da830b0818293e12e13b0107c07f41b6\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Running cleanup\\\"); \\n    output.close();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1a52165e7cfb2bab4963733b47f9a49\",\n        \"type\": \"source_code\",\n        \"text\": \"output.print(\\\"test1\\\"); \\n    return true;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7bfd3b879213a833ab6662c1ca38b2a\",\n        \"type\": \"source_code\",\n        \"text\": \"output.print(\\\"test2\\\"); \\n    return true;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"462c49acfa6392970e59372f8cd3be14\",\n        \"type\": \"source_code\",\n        \"text\": \"output.print(\\\"test3\\\"); \\n    return true;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3eb29b0f7cab52b5aeab2fb53ee9c285\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit AtUnitExample5\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"baa7ff533389858714ad15b615c88793\",\n        \"type\": \"source_code\",\n        \"text\": \"push(\\\"one\\\"); \\n    assert top().equals(\\\"one\\\"); \\n    push(\\\"two\\\"); \\n    assert top().equals(\\\"two\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a4f0366cdbc2062929fdf5e9eaef746\",\n        \"type\": \"source_code\",\n        \"text\": \"push(\\\"one\\\"); \\n    push(\\\"two\\\"); \\n    assert pop().equals(\\\"two\\\"); \\n    assert pop().equals(\\\"one\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1289dc5c3881fd7d5b2d5bf59534387b\",\n        \"type\": \"source_code\",\n        \"text\": \"push(\\\"A\\\"); \\n    push(\\\"B\\\"); \\n    assert top().equals(\\\"B\\\"); \\n    assert top().equals(\\\"B\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8e9b526a495281c0215bc7a523c4859\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit StackLStringTest\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94649c3666f8fb307cb34531c412b493\",\n        \"type\": \"source_code\",\n        \"text\": \"ClassLoader.getSystemClassLoader() \\n      .setDefaultAssertionStatus(true); // Enable asserts \\n    new ProcessFiles(new AtUnit(), \\\"class\\\").start(args);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1a41e0897567f135fb7a2838b30ad98\",\n        \"type\": \"source_code\",\n        \"text\": \"if(failures == 0) \\n      print(\\\"OK (\\\" + testsRun + \\\" tests)\\\"); \\n    else { \\n      print(\\\"(\\\" + testsRun + \\\" tests)\\\"); \\n      print(\\\"\\\\n>>> \\\" + failures + \\\" FAILURE\\\" + \\n        (failures > 1 ? \\\"S\\\" : \\\"\\\") + \\\" <<<\\\"); \\n      for(String failed : failedTests) \\n        print(\\\"  \\\" + failed); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"085d9b06b23d5d1b3609d1082981f882\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      String cName = ClassNameFinder.thisClass( \\n        BinaryFile.read(cFile)); \\n      if(!cName.contains(\\\".\\\")) \\n        return; // Ignore unpackaged classes \\n      testClass = Class.forName(cName); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    } \\n    TestMethods testMethods = new TestMethods(); \\n    Method creator = null; \\n    Method cleanup = null; \\n    for(Method m : testClass.getDeclaredMethods()) { \\n      testMethods.addIfTestMethod(m); \\n      if(creator == null) \\n        creator = checkForCreatorMethod(m); \\n      if(cleanup == null) \\n        cleanup = checkForCleanupMethod(m); \\n    } \\n    if(testMethods.size() > 0) { \\n      if(creator == null) \\n        try { \\n          if(!Modifier.isPublic(testClass \\n             .getDeclaredConstructor().getModifiers())) { \\n            print(\\\"Error: \\\" + testClass + \\n              \\\" default constructor must be public\\\"); \\n            System.exit(1); \\n          } \\n        } catch(NoSuchMethodException e) { \\n          // Synthesized default constructor; OK \\n        } \\n      print(testClass.getName()); \\n    } \\n    for(Method m : testMethods) { \\n      printnb(\\\"  . \\\" + m.getName() + \\\" \\\"); \\n      try { \\n        Object testObject = createTestObject(creator); \\n        boolean success = false; \\n        try { \\n          if(m.getReturnType().equals(boolean.class)) \\n            success = (Boolean)m.invoke(testObject); \\n          else { \\n            m.invoke(testObject); \\n            success = true; // If no assert fails \\n          } \\n        } catch(InvocationTargetException e) { \\n          // Actual exception is inside e: \\n          print(e.getCause()); \\n        } \\n        print(success ? \\\"\\\" : \\\"(failed)\\\"); \\n        testsRun++; \\n        if(!success) {\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97612051fb5c3e9413687bbb565c262a\",\n        \"type\": \"source_code\",\n        \"text\": \"failures++; \\n          failedTests.add(testClass.getName() + \\n            \\\": \\\" + m.getName()); \\n        } \\n        if(cleanup != null) \\n          cleanup.invoke(testObject, testObject); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"938df96c59aa51a4bdb0b5da7fd9b68e\",\n        \"type\": \"source_code\",\n        \"text\": \"void addIfTestMethod(Method m) { \\n      if(m.getAnnotation(Test.class) == null) \\n        return; \\n      if(!(m.getReturnType().equals(boolean.class) || \\n          m.getReturnType().equals(void.class))) \\n        throw new RuntimeException(\\\"@Test method\\\" + \\n          \\\" must return boolean or void\\\"); \\n      m.setAccessible(true); // In case it\\u2019s private, etc. \\n      add(m); \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"08bbce02f6f94a0dfede9b14f96ce4a7\",\n        \"type\": \"source_code\",\n        \"text\": \"if(m.getAnnotation(TestObjectCreate.class) == null) \\n      return null; \\n    if(!m.getReturnType().equals(testClass)) \\n      throw new RuntimeException(\\\"@TestObjectCreate \\\" + \\n        \\\"must return instance of Class to be tested\\\"); \\n    if((m.getModifiers() & \\n         java.lang.reflect.Modifier.STATIC) < 1) \\n      throw new RuntimeException(\\\"@TestObjectCreate \\\" + \\n        \\\"must be static.\\\"); \\n    m.setAccessible(true); \\n    return m;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e20d92db27977d9889064cf2f9ca54cc\",\n        \"type\": \"source_code\",\n        \"text\": \"if(m.getAnnotation(TestObjectCleanup.class) == null) \\n      return null; \\n    if(!m.getReturnType().equals(void.class)) \\n      throw new RuntimeException(\\\"@TestObjectCleanup \\\" + \\n        \\\"must return void\\\"); \\n    if((m.getModifiers() & \\n        java.lang.reflect.Modifier.STATIC) < 1) \\n      throw new RuntimeException(\\\"@TestObjectCleanup \\\" + \\n        \\\"must be static.\\\"); \\n    if(m.getParameterTypes().length == 0 || \\n       m.getParameterTypes()[0] != testClass) \\n      throw new RuntimeException(\\\"@TestObjectCleanup \\\" + \\n        \\\"must take an argument of the tested type.\\\"); \\n    m.setAccessible(true); \\n    return m;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0992c104dd64f106d07b7c1c69e346d8\",\n        \"type\": \"source_code\",\n        \"text\": \"if(creator != null) { \\n      try { \\n        return creator.invoke(testClass); \\n      } catch(Exception e) { \\n        throw new RuntimeException(\\\"Couldn\\u2019t run \\\" + \\n          \\\"@TestObject (creator) method.\\\"); \\n      } \\n    } else { // Use the default constructor: \\n      try {\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c198772b6f4b51d4745031df6e512e43\",\n        \"type\": \"source_code\",\n        \"text\": \"return testClass.newInstance(); \\n      } catch(Exception e) { \\n        throw new RuntimeException(\\\"Couldn\\u2019t create a \\\" + \\n          \\\"test object. Try using a @TestObject method.\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7df4acf8c90d1fd33bcd924b0713d36\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<Integer,Integer> offsetTable = \\n      new HashMap<Integer,Integer>(); \\n    Map<Integer,String> classNameTable = \\n      new HashMap<Integer,String>(); \\n    try { \\n      DataInputStream data = new DataInputStream( \\n        new ByteArrayInputStream(classBytes)); \\n      int magic = data.readInt();  // 0xcafebabe \\n      int minorVersion = data.readShort(); \\n      int majorVersion = data.readShort(); \\n      int constant_pool_count = data.readShort(); \\n      int[] constant_pool = new int[constant_pool_count]; \\n      for(int i = 1; i < constant_pool_count; i++) { \\n        int tag = data.read(); \\n        int tableSize; \\n        switch(tag) { \\n          case 1: // UTF \\n            int length = data.readShort(); \\n            char[] bytes = new char[length]; \\n            for(int k = 0; k < bytes.length; k++) \\n              bytes[k] = (char)data.read();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"49f72261838e79c010bf817b417cd787\",\n        \"type\": \"source_code\",\n        \"text\": \"String className = new String(bytes); \\n            classNameTable.put(i, className); \\n            break; \\n          case 5: // LONG \\n          case 6: // DOUBLE \\n            data.readLong(); // discard 8 bytes \\n            i++; // Special skip necessary \\n            break; \\n          case 7: // CLASS \\n            int offset = data.readShort(); \\n            offsetTable.put(i, offset); \\n            break; \\n          case 8: // STRING \\n            data.readShort(); // discard 2 bytes \\n            break; \\n          case 3:  // INTEGER \\n          case 4:  // FLOAT \\n          case 9:  // FIELD_REF \\n          case 10: // METHOD_REF \\n          case 11: // INTERFACE_METHOD_REF \\n          case 12: // NAME_AND_TYPE \\n            data.readInt(); // discard 4 bytes; \\n            break; \\n          default: \\n            throw new RuntimeException(\\\"Bad tag \\\" + tag); \\n        } \\n      } \\n      short access_flags = data.readShort(); \\n      int this_class = data.readShort(); \\n      int super_class = data.readShort(); \\n      return classNameTable.get( \\n        offsetTable.get(this_class)).replace(\\u2018/\\u2019, \\u2018.\\u2019); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc8ff2bda97d20f41071a00e447b6b5c\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) { \\n      for(String arg : args) \\n        print(thisClass(BinaryFile.read(new File(arg)))); \\n    } else \\n      // Walk the entire tree: \\n      for(File klass : Directory.walk(\\\".\\\", \\\".*\\\\\\\\.class\\\")) \\n        print(thisClass(BinaryFile.read(klass)));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f30f62e13b16f87c979a443d0dd5da8e\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0 && args[0].equals(\\\"-r\\\")) { \\n      remove = true; \\n      String[] nargs = new String[args.length - 1]; \\n      System.arraycopy(args, 1, nargs, 0, nargs.length); \\n      args = nargs; \\n    } \\n    new ProcessFiles( \\n      new AtUnitRemover(), \\\"class\\\").start(args);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6111412d5d575bacbb37a296e64afbcd\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean modified = false; \\n    try { \\n      String cName = ClassNameFinder.thisClass( \\n        BinaryFile.read(cFile)); \\n      if(!cName.contains(\\\".\\\")) \\n        return; // Ignore unpackaged classes \\n      ClassPool cPool = ClassPool.getDefault(); \\n      CtClass ctClass = cPool.get(cName); \\n      for(CtMethod method : ctClass.getDeclaredMethods()) { \\n        MethodInfo mi = method.getMethodInfo(); \\n        AnnotationsAttribute attr = (AnnotationsAttribute) \\n          mi.getAttribute(AnnotationsAttribute.visibleTag); \\n        if(attr == null) continue; \\n        for(Annotation ann : attr.getAnnotations()) { \\n          if(ann.getTypeName() \\n             .startsWith(\\\"net.mindview.atunit\\\")) { \\n            print(ctClass.getName() + \\\" Method: \\\" \\n              + mi.getName() + \\\" \\\" + ann); \\n            if(remove) { \\n              ctClass.removeMethod(method); \\n              modified = true; \\n            } \\n          } \\n        } \\n      } \\n      // Fields are not removed in this version (see text). \\n      if(modified) \\n        ctClass.toBytecode(new DataOutputStream( \\n          new FileOutputStream(cFile))); \\n      ctClass.detach(); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66d762c0051ed18ae9a30cbe3d95d224\",\n        \"type\": \"source_code\",\n        \"text\": \"this.countDown = countDown;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97b4bef9ac8144ae020fc30fff05d5d4\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"#\\\" + id + \\\"(\\\" + \\n      (countDown > 0 ? countDown : \\\"Liftoff!\\\") + \\\"), \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5130cd6fec271ba9669a6a0e44bd958e\",\n        \"type\": \"source_code\",\n        \"text\": \"while(countDown-- > 0) { \\n      System.out.print(status()); \\n      Thread.yield(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af201b4d8492eb8544807b956bcef8b8\",\n        \"type\": \"source_code\",\n        \"text\": \"LiftOff launch = new LiftOff(); \\n    launch.run();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e626c4768c303f77450d256d8385edc4\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t = new Thread(new LiftOff()); \\n    t.start(); \\n    System.out.println(\\\"Waiting for LiftOff\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2afc5ec968902969f6229c07323430a5\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) \\n      new Thread(new LiftOff()).start(); \\n    System.out.println(\\\"Waiting for LiftOff\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d59e48c33d5eb6437686f3c8ea46c806\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new LiftOff());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"134c4ec3581b9696dd8a23c9f9cd5440\",\n        \"type\": \"source_code\",\n        \"text\": \"exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f86490c54038249ce1a49cded5cccf5d\",\n        \"type\": \"source_code\",\n        \"text\": \"// Constructor argument is number of threads: \\n    ExecutorService exec = Executors.newFixedThreadPool(5); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new LiftOff()); \\n    exec.shutdown();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37f8cc5611317aa9b2d728e0dab44852\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = \\n      Executors.newSingleThreadExecutor(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new LiftOff()); \\n    exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b2fa80087ef70e58c5af49a892930cfe\",\n        \"type\": \"source_code\",\n        \"text\": \"this.id = id;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9f90c035e180cbc4edc1979355b117e\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"result of TaskWithResult \\\" + id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6417fbbcc7232a0cc215e16586da8432\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    ArrayList<Future<String>> results = \\n      new ArrayList<Future<String>>(); \\n    for(int i = 0; i < 10; i++) \\n      results.add(exec.submit(new TaskWithResult(i))); \\n    for(Future<String> fs : results) \\n      try { \\n        // get() blocks until completion: \\n        System.out.println(fs.get()); \\n      } catch(InterruptedException e) { \\n        System.out.println(e); \\n        return; \\n      } catch(ExecutionException e) { \\n        System.out.println(e); \\n      } finally { \\n        exec.shutdown(); \\n      }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"63de354725a02e544d3b4127c8b44ae7\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(countDown-- > 0) { \\n        System.out.print(status()); \\n        // Old-style: \\n        // Thread.sleep(100); \\n        // Java SE5/6-style: \\n        TimeUnit.MILLISECONDS.sleep(100); \\n      } \\n    } catch(InterruptedException e) { \\n      System.err.println(\\\"Interrupted\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"17a00f24bc314d5f8865280eccce12e4\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new SleepingTask()); \\n    exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f039f6061feb99ba41e2143cae9807c8\",\n        \"type\": \"source_code\",\n        \"text\": \"this.priority = priority;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdc56cfe8e400961490258e7d22cf28e\",\n        \"type\": \"source_code\",\n        \"text\": \"return Thread.currentThread() + \\\": \\\" + countDown;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0a4a737a886b760d478a58465ff4c0b8\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread.currentThread().setPriority(priority); \\n    while(true) { \\n      // An expensive, interruptable operation: \\n      for(int i = 1; i < 100000; i++) { \\n        d += (Math.PI + Math.E) / (double)i; \\n        if(i % 1000 == 0) \\n          Thread.yield(); \\n      } \\n      System.out.println(this); \\n      if(--countDown == 0) return; \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0a0108aaa7d9112f3f8b02806144b87a\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute( \\n        new SimplePriorities(Thread.MIN_PRIORITY)); \\n    exec.execute( \\n        new SimplePriorities(Thread.MAX_PRIORITY)); \\n    exec.shutdown();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae6bc3813fb13be8b0793be4c0881fe7\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(true) { \\n        TimeUnit.MILLISECONDS.sleep(100); \\n        print(Thread.currentThread() + \\\" \\\" + this); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"sleep() interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78f395d3725a390c0f940dcee23dc87f\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 10; i++) { \\n      Thread daemon = new Thread(new SimpleDaemons()); \\n      daemon.setDaemon(true); // Must call before start() \\n      daemon.start(); \\n    } \\n    print(\\\"All daemons started\\\"); \\n    TimeUnit.MILLISECONDS.sleep(175);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64b00e5d246ab7c791a295d25e1a6195\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t = new Thread(r); \\n    t.setDaemon(true); \\n    return t;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25363bb52a0b7fd15d155bd6900d4e25\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(true) { \\n        TimeUnit.MILLISECONDS.sleep(100); \\n        print(Thread.currentThread() + \\\" \\\" + this); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c27fa977525c374ff3f98d3908e3e4dc\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool( \\n      new DaemonThreadFactory()); \\n    for(int i = 0; i < 10; i++) \\n      exec.execute(new DaemonFromFactory()); \\n    print(\\\"All daemons started\\\"); \\n    TimeUnit.MILLISECONDS.sleep(500); // Run for a while\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0b1459b6a6aeb0dc48a27bd7c5ff62b3\",\n        \"type\": \"source_code\",\n        \"text\": \"super(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, \\n      new SynchronousQueue<Runnable>(), \\n      new DaemonThreadFactory());\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee23f2dc35f6e5168c8212ac5d55389a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < t.length; i++) { \\n      t[i] = new Thread(new DaemonSpawn()); \\n      t[i].start(); \\n      printnb(\\\"DaemonSpawn \\\" + i + \\\" started, \\\"); \\n    } \\n    for(int i = 0; i < t.length; i++) \\n      printnb(\\\"t[\\\" + i + \\\"].isDaemon() = \\\" + \\n        t[i].isDaemon() + \\\", \\\"); \\n    while(true) \\n      Thread.yield();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34c0ff7f682905cecccb82109a9b8d44\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) \\n      Thread.yield();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12fae38b460a5a9153cf9dcf6c7ae532\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread d = new Thread(new Daemon()); \\n    d.setDaemon(true); \\n    d.start(); \\n    printnb(\\\"d.isDaemon() = \\\" + d.isDaemon() + \\\", \\\"); \\n    // Allow the daemon threads to \\n    // finish their startup processes: \\n    TimeUnit.SECONDS.sleep(1);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d9b8302590940bd7e4f0eb127645c10\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      print(\\\"Starting ADaemon\\\"); \\n      TimeUnit.SECONDS.sleep(1); \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via InterruptedException\\\"); \\n    } finally { \\n      print(\\\"This should always run?\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebc2382bd6fe9f33906f4b689f76b22e\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t = new Thread(new ADaemon()); \\n    t.setDaemon(true); \\n    t.start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"156e6e906d945ae7206c6ac75ea218e7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Store the thread name: \\n    super(Integer.toString(++threadCount)); \\n    start();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"51bead45308595f2d6bacfff7e6af87a\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"#\\\" + getName() + \\\"(\\\" + countDown + \\\"), \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"931183693de9f843c79cc4cb8df98ae7\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) { \\n      System.out.print(this); \\n      if(--countDown == 0) \\n        return; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a67850f82f8d279336cb09cc3ab42ce3\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) \\n      new SimpleThread();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"22c892789bdfc0d6a4724291e4b6b4c6\",\n        \"type\": \"source_code\",\n        \"text\": \"return Thread.currentThread().getName() + \\n      \\\"(\\\" + countDown + \\\"), \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"931183693de9f843c79cc4cb8df98ae7\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) { \\n      System.out.print(this); \\n      if(--countDown == 0) \\n        return; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55727f2d6411a546875cc314ed9176cb\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) \\n      new SelfManaged();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f261626e79e8c4b3b1663459b52bb74a\",\n        \"type\": \"source_code\",\n        \"text\": \"Inner(String name) { \\n      super(name); \\n      start(); \\n    } \\n    public void run() { \\n      try { \\n        while(true) { \\n          print(this); \\n          if(--countDown == 0) return; \\n          sleep(10); \\n        } \\n      } catch(InterruptedException e) { \\n        print(\\\"interrupted\\\"); \\n      } \\n    } \\n    public String toString() { \\n      return getName() + \\\": \\\" + countDown; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c995ec9c79738cfeabc3f7cf8b3f2c05\",\n        \"type\": \"source_code\",\n        \"text\": \"inner = new Inner(name);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"86f0e13141e0555e1f44c86349ffde87\",\n        \"type\": \"source_code\",\n        \"text\": \"t = new Thread(name) { \\n      public void run() { \\n        try { \\n          while(true) { \\n            print(this); \\n            if(--countDown == 0) return; \\n            sleep(10); \\n          } \\n        } catch(InterruptedException e) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2dd5f5df1657efad5ceeec634798906\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"sleep() interrupted\\\"); \\n        } \\n      } \\n      public String toString() { \\n        return getName() + \\\": \\\" + countDown; \\n      } \\n    }; \\n    t.start();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fed381baa07732ed895dad09c4db783\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t; \\n    Inner(String name) { \\n      t = new Thread(this, name); \\n      t.start(); \\n    } \\n    public void run() { \\n      try { \\n        while(true) { \\n          print(this); \\n          if(--countDown == 0) return; \\n          TimeUnit.MILLISECONDS.sleep(10); \\n        } \\n      } catch(InterruptedException e) { \\n        print(\\\"sleep() interrupted\\\"); \\n      } \\n    } \\n    public String toString() { \\n      return t.getName() + \\\": \\\" + countDown; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c995ec9c79738cfeabc3f7cf8b3f2c05\",\n        \"type\": \"source_code\",\n        \"text\": \"inner = new Inner(name);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6e85a1b284c62d5f5d9904a911e073a7\",\n        \"type\": \"source_code\",\n        \"text\": \"t = new Thread(new Runnable() { \\n      public void run() { \\n        try { \\n          while(true) { \\n            print(this); \\n            if(--countDown == 0) return; \\n            TimeUnit.MILLISECONDS.sleep(10); \\n          } \\n        } catch(InterruptedException e) { \\n          print(\\\"sleep() interrupted\\\"); \\n        } \\n      } \\n      public String toString() { \\n        return Thread.currentThread().getName() + \\n          \\\": \\\" + countDown; \\n      } \\n    }, name);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b74982e8b7edc1e1f7120e2ae4408150\",\n        \"type\": \"source_code\",\n        \"text\": \"t.start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1e63759bfdd235d9128c711f8ece620e\",\n        \"type\": \"source_code\",\n        \"text\": \"if(t == null) { \\n      t = new Thread(name) { \\n        public void run() { \\n          try { \\n            while(true) { \\n              print(this); \\n              if(--countDown == 0) return; \\n              sleep(10); \\n            } \\n          } catch(InterruptedException e) { \\n            print(\\\"sleep() interrupted\\\"); \\n          } \\n        } \\n        public String toString() { \\n          return getName() + \\\": \\\" + countDown; \\n        } \\n      }; \\n      t.start(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12b7ea7dbb66247108b0c50d8748cecb\",\n        \"type\": \"source_code\",\n        \"text\": \"new InnerThread1(\\\"InnerThread1\\\"); \\n    new InnerThread2(\\\"InnerThread2\\\"); \\n    new InnerRunnable1(\\\"InnerRunnable1\\\"); \\n    new InnerRunnable2(\\\"InnerRunnable2\\\"); \\n    new ThreadMethod(\\\"ThreadMethod\\\").runTask();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a95a7e98ce1b633c44448773b0f882c\",\n        \"type\": \"source_code\",\n        \"text\": \"super(name); \\n    duration = sleepTime; \\n    start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"71aafc072160d822f6a5027663788965\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      sleep(duration); \\n    } catch(InterruptedException e) { \\n      print(getName() + \\\" was interrupted. \\\" + \\n        \\\"isInterrupted(): \\\" + isInterrupted()); \\n      return; \\n    } \\n    print(getName() + \\\" has awakened\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"642e2097c9345095db144f6c50810a19\",\n        \"type\": \"source_code\",\n        \"text\": \"super(name); \\n    this.sleeper = sleeper; \\n    start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf5c850fe8c2a5a56e117cdc2a2799fa\",\n        \"type\": \"source_code\",\n        \"text\": \"sleeper.join(); \\n    } catch(InterruptedException e) { \\n      print(\\\"Interrupted\\\"); \\n    } \\n    print(getName() + \\\" join completed\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1e9b651a30322a0d34dda748ec53975b\",\n        \"type\": \"source_code\",\n        \"text\": \"Sleeper \\n      sleepy = new Sleeper(\\\"Sleepy\\\", 1500), \\n      grumpy = new Sleeper(\\\"Grumpy\\\", 1500); \\n    Joiner \\n      dopey = new Joiner(\\\"Dopey\\\", sleepy), \\n      doc = new Joiner(\\\"Doc\\\", grumpy); \\n    grumpy.interrupt();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9f1531cc39788496fa8e59d70c94f6bd\",\n        \"type\": \"source_code\",\n        \"text\": \"while(d > 0) \\n      d = d + (Math.PI + Math.E) / d; \\n    System.in.read(); // Never gets here\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57724a2fd2f4c74ac3154f6ebcb5dd39\",\n        \"type\": \"source_code\",\n        \"text\": \"setDaemon(true); \\n    start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3d0e7f88a67f9eb29c5b6135cf2bb51\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) { \\n      d = d + (Math.PI + Math.E) / d; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c091001eb64193d170e7f59f08f135b2\",\n        \"type\": \"source_code\",\n        \"text\": \"//! new UnresponsiveUI(); // Must kill this process \\n    new ResponsiveUI(); \\n    System.in.read(); \\n    System.out.println(d); // Shows progress\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0662d71e46c81756a163bb44d06718c8\",\n        \"type\": \"source_code\",\n        \"text\": \"throw new RuntimeException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"800cfb5ea5b487bf2bf72fe093456300\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(new ExceptionThread());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ec05739fc2050ea5c829ee3f42eefc5\",\n        \"type\": \"source_code\",\n        \"text\": \"at ExceptionThread.run(ExceptionThread.java:7) \\n       at ThreadPoolExecutor$Worker.runTask(Unknown Source) \\n       at ThreadPoolExecutor$Worker.run(Unknown Source) \\n       at Java.lang.Thread.run(Unknown Source)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"951648e4fb807286f9d9763f684fcf39\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      ExecutorService exec = \\n        Executors.newCachedThreadPool(); \\n      exec.execute(new ExceptionThread()); \\n    } catch(RuntimeException ue) { \\n      // This statement will NOT execute! \\n      System.out.println(\\\"Exception has been handled!\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f085de7f7eb5a395af550d5bcbea4f1\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t = Thread.currentThread(); \\n    System.out.println(\\\"run() by \\\" + t); \\n    System.out.println( \\n      \\\"eh = \\\" + t.getUncaughtExceptionHandler()); \\n    throw new RuntimeException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24eb4dbf70a4b603ee2875d60b0caab2\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"caught \\\" + e);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83de4f6c14d9d6a468748f36931715a9\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(this + \\\" creating new Thread\\\"); \\n    Thread t = new Thread(r); \\n    System.out.println(\\\"created \\\" + t); \\n    t.setUncaughtExceptionHandler(\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bcf8f48dd007d9b9a7172eb56162c241\",\n        \"type\": \"source_code\",\n        \"text\": \"new MyUncaughtExceptionHandler()); \\n    System.out.println( \\n      \\\"eh = \\\" + t.getUncaughtExceptionHandler()); \\n    return t;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8da874469b11fb0e15ceb699d8ac286\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool( \\n      new HandlerThreadFactory()); \\n    exec.execute(new ExceptionThread2());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad5eb12d2029ee99445e7b5d9db8d2aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread.setDefaultUncaughtExceptionHandler( \\n      new MyUncaughtExceptionHandler()); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(new ExceptionThread());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd88acb4766374ccdc8c6695965cabc1\",\n        \"type\": \"source_code\",\n        \"text\": \"generator = g; \\n    id = ident;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9bdc9a5f9e49cda48cd11eaedfeb914a\",\n        \"type\": \"source_code\",\n        \"text\": \"while(!generator.isCanceled()) { \\n      int val = generator.next(); \\n      if(val % 2 != 0) { \\n        System.out.println(val + \\\" not even!\\\"); \\n        generator.cancel(); // Cancels all EvenCheckers \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4d4182fe6cb7aba74ed4d0d941ec7757\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Press Control-C to exit\\\"); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < count; i++)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f915a8df3a19d75ac463a43d447e6cb6\",\n        \"type\": \"source_code\",\n        \"text\": \"exec.execute(new EvenChecker(gp, i)); \\n    exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f95d2daef13903aa785b459a03800bcc\",\n        \"type\": \"source_code\",\n        \"text\": \"test(gp, 10);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c79a651461fb5efd766a4a618b86cc8\",\n        \"type\": \"source_code\",\n        \"text\": \"++currentEvenValue; // Danger point here! \\n    ++currentEvenValue; \\n    return currentEvenValue;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a54a9f9de110dc90394686f7e97dfab8\",\n        \"type\": \"source_code\",\n        \"text\": \"EvenChecker.test(new EvenGenerator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a3991aa5424de321f47b3c2c1e804a4\",\n        \"type\": \"source_code\",\n        \"text\": \"++currentEvenValue; \\n    Thread.yield(); // Cause failure faster \\n    ++currentEvenValue; \\n    return currentEvenValue;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8603fe5ee76c976f197fe9e52b000f9f\",\n        \"type\": \"source_code\",\n        \"text\": \"EvenChecker.test(new SynchronizedEvenGenerator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b30a63d1cf66ee5ee9140998242460f\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      ++currentEvenValue; \\n      Thread.yield(); // Cause failure faster \\n      ++currentEvenValue; \\n      return currentEvenValue; \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72f43d72cc6c3863758105e1fc4d23dc\",\n        \"type\": \"source_code\",\n        \"text\": \"EvenChecker.test(new MutexEvenGenerator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c7ee6a14b921479238d46b1d9397f03\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean captured = lock.tryLock(); \\n    try { \\n      System.out.println(\\\"tryLock(): \\\" + captured); \\n    } finally { \\n      if(captured) \\n        lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61ea34aeab957053328285969a343bff\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean captured = false; \\n    try { \\n      captured = lock.tryLock(2, TimeUnit.SECONDS); \\n    } catch(InterruptedException e) { \\n      throw new RuntimeException(e); \\n    } \\n    try { \\n      System.out.println(\\\"tryLock(2, TimeUnit.SECONDS): \\\" + \\n        captured); \\n    } finally { \\n      if(captured) \\n        lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a6cd89e12a2b51fe93a36af98f17140e\",\n        \"type\": \"source_code\",\n        \"text\": \"final AttemptLocking al = new AttemptLocking(); \\n    al.untimed(); // True -- lock is available \\n    al.timed();   // True -- lock is available\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bef1741d064a89db288aca581b94de87\",\n        \"type\": \"source_code\",\n        \"text\": \"// Now create a separate task to grab the lock: \\n    new Thread() { \\n      { setDaemon(true); } \\n      public void run() { \\n        al.lock.lock(); \\n        System.out.println(\\\"acquired\\\"); \\n      } \\n    }.start(); \\n    Thread.yield(); // Give the 2nd task a chance \\n    al.untimed(); // False -- lock grabbed by task \\n    al.timed();   // False -- lock grabbed by task\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ccbc63128d1c1614bef322b6b5fbaa5\",\n        \"type\": \"source_code\",\n        \"text\": \"getfield        #2; //Field i:I\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0cc183fae42dc900511347c0fe5b171a\",\n        \"type\": \"source_code\",\n        \"text\": \"iconst_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26492ed3ca1d3e998caa8e1392d161db\",\n        \"type\": \"source_code\",\n        \"text\": \"iadd\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7c90a03c7648afe51b3265143ff5c0a\",\n        \"type\": \"source_code\",\n        \"text\": \"putfield        #2; //Field i:I\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ccbc63128d1c1614bef322b6b5fbaa5\",\n        \"type\": \"source_code\",\n        \"text\": \"getfield        #2; //Field i:I\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb5d96a02f87a20b126d1afe5bffca07\",\n        \"type\": \"source_code\",\n        \"text\": \"iconst_3\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26492ed3ca1d3e998caa8e1392d161db\",\n        \"type\": \"source_code\",\n        \"text\": \"iadd\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7c90a03c7648afe51b3265143ff5c0a\",\n        \"type\": \"source_code\",\n        \"text\": \"putfield        #2; //Field i:I\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24906763d50b920a7556d071e6c0805b\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) \\n      evenIncrement();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d9021635a256d459711e4878b2b860ad\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    AtomicityTest at = new AtomicityTest(); \\n    exec.execute(at); \\n    while(true) { \\n      int val = at.getValue(); \\n      if(val % 2 != 0) { \\n        System.out.println(val); \\n        System.exit(0); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e3c57bd9f8c7e4607369ec2ebb53bb3d\",\n        \"type\": \"source_code\",\n        \"text\": \"return serialNumber++; // Not thread-safe\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34e3bc22bf15dcccd8bb067931e3d8a5\",\n        \"type\": \"source_code\",\n        \"text\": \"array = new int[size]; \\n    len = size; \\n    // Initialize to a value not produced \\n    // by the SerialNumberGenerator: \\n    for(int i = 0; i < size; i++) \\n      array[i] = -1;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"88917e67b93bdc7218804314cff22e08\",\n        \"type\": \"source_code\",\n        \"text\": \"array[index] = i; \\n    // Wrap index and write over old elements: \\n    index = ++index % len;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1b076b6adf9fc02d4a9c0face294f57\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < len; i++) \\n      if(array[i] == val) return true; \\n    return false;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"23f0487dfe81cd3ee0e55f40db105aa6\",\n        \"type\": \"source_code\",\n        \"text\": \"new CircularSet(1000);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c23539246db1546d265aafaea3f738aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newCachedThreadPool();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5d17244925e0330a1b9185905886f11\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      while(true) { \\n        int serial = \\n          SerialNumberGenerator.nextSerialNumber(); \\n        if(serials.contains(serial)) { \\n          System.out.println(\\\"Duplicate: \\\" + serial); \\n          System.exit(0); \\n        } \\n        serials.add(serial); \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fd42208fe56e43590f338903fff1c61f\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < SIZE; i++) \\n      exec.execute(new SerialChecker());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e8a6f094d22440d80a04c612dcab70d\",\n        \"type\": \"source_code\",\n        \"text\": \"// Stop after n seconds if there\\u2019s an argument: \\n    if(args.length > 0) { \\n      TimeUnit.SECONDS.sleep(new Integer(args[0])); \\n      System.out.println(\\\"No duplicates detected\\\"); \\n      System.exit(0); \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24906763d50b920a7556d071e6c0805b\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) \\n      evenIncrement();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f31ca731a3b44cd95836c48015b7dd0\",\n        \"type\": \"source_code\",\n        \"text\": \"new Timer().schedule(new TimerTask() { \\n      public void run() { \\n        System.err.println(\\\"Aborting\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eaf02c5946979eb206a89f596bce46de\",\n        \"type\": \"source_code\",\n        \"text\": \"System.exit(0); \\n      } \\n    }, 5000); // Terminate after 5 seconds \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    AtomicIntegerTest ait = new AtomicIntegerTest(); \\n    exec.execute(ait); \\n    while(true) { \\n      int val = ait.getValue(); \\n      if(val % 2 != 0) { \\n        System.out.println(val); \\n        System.exit(0); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e89e8124007727d9aa09c257db1652fb\",\n        \"type\": \"source_code\",\n        \"text\": \"new AtomicInteger(0);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a8a8dccbb0fd51a184366ada9ad4529\",\n        \"type\": \"source_code\",\n        \"text\": \"return currentEvenValue.addAndGet(2);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fdd609b02654e0f4cf5b9117df5fad99\",\n        \"type\": \"source_code\",\n        \"text\": \"EvenChecker.test(new AtomicEvenGenerator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c545aac2548cbfbb4ec9343ac8753c25\",\n        \"type\": \"source_code\",\n        \"text\": \"this.x = x; \\n    this.y = y;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"530b433ff8a7e779301ec0f18cb33a55\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"x: \\\" + x + \\\", y: \\\" + y;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a0aa9dd9879597cf592003e1961fc36a\",\n        \"type\": \"source_code\",\n        \"text\": \"public PairValuesNotEqualException() { \\n      super(\\\"Pair values not equal: \\\" + Pair.this); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"47b1754556a2d31b0f8decacdf5ff384\",\n        \"type\": \"source_code\",\n        \"text\": \"if(x != y) \\n      throw new PairValuesNotEqualException();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a781fef368bdb7996dad0743f2e6120d\",\n        \"type\": \"source_code\",\n        \"text\": \"Collections.synchronizedList(new ArrayList<Pair>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ced82e7024dd71e43c08d32e7d0a1ccc\",\n        \"type\": \"source_code\",\n        \"text\": \"// Make a copy to keep the original safe: \\n    return new Pair(p.getX(), p.getY());\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70523dde549d274772b5389747dc56fc\",\n        \"type\": \"source_code\",\n        \"text\": \"storage.add(p); \\n    try { \\n      TimeUnit.MILLISECONDS.sleep(50);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e963e2cee5e66abcd30c4d1ff01ee06b\",\n        \"type\": \"source_code\",\n        \"text\": \"} catch(InterruptedException ignore) {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"96e8453f03bd397e67f6582b8a921ff6\",\n        \"type\": \"source_code\",\n        \"text\": \"p.incrementX(); \\n    p.incrementY(); \\n    store(getPair());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65945887088b842f5670175ec1f8b5e6\",\n        \"type\": \"source_code\",\n        \"text\": \"Pair temp; \\n    synchronized(this) { \\n      p.incrementX(); \\n      p.incrementY(); \\n      temp = getPair(); \\n    } \\n    store(temp);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94132ef3b1500d1fdae057a7eb6e8f2e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.pm = pm;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ab1fc981c0a5475acbc0592b34a110a\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) \\n      pm.increment();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55ea3cf71d4ea7fb555b893395bbbed5\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Pair: \\\" + pm.getPair() + \\n      \\\" checkCounter = \\\" + pm.checkCounter.get();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94132ef3b1500d1fdae057a7eb6e8f2e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.pm = pm;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"414725acaa15ae387624c357d28ffc59\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) { \\n      pm.checkCounter.incrementAndGet(); \\n      pm.getPair().checkState(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"512c421b2a2b9974f0972a55b8c2cee5\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    PairManipulator \\n      pm1 = new PairManipulator(pman1), \\n      pm2 = new PairManipulator(pman2);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1f5aeefa0f8e54e26d25f08ca9a25e41\",\n        \"type\": \"source_code\",\n        \"text\": \"PairChecker \\n      pcheck1 = new PairChecker(pman1), \\n      pcheck2 = new PairChecker(pman2); \\n    exec.execute(pm1); \\n    exec.execute(pm2); \\n    exec.execute(pcheck1); \\n    exec.execute(pcheck2); \\n    try { \\n      TimeUnit.MILLISECONDS.sleep(500); \\n    } catch(InterruptedException e) { \\n      System.out.println(\\\"Sleep interrupted\\\"); \\n    } \\n    System.out.println(\\\"pm1: \\\" + pm1 + \\\"\\\\npm2: \\\" + pm2); \\n    System.exit(0);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53f097b5712124c8489313ce5ec63232\",\n        \"type\": \"source_code\",\n        \"text\": \"PairManager \\n      pman1 = new PairManager1(), \\n      pman2 = new PairManager2(); \\n    testApproaches(pman1, pman2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"530db6c3dd5606138c1af185dc79954d\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      p.incrementX(); \\n      p.incrementY(); \\n      store(getPair()); \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa4fb19a22b6df2cf4b6edde6c3736c2\",\n        \"type\": \"source_code\",\n        \"text\": \"Pair temp; \\n    lock.lock(); \\n    try { \\n      p.incrementX(); \\n      p.incrementY(); \\n      temp = getPair(); \\n    } finally { \\n      lock.unlock(); \\n    } \\n    store(temp);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a04ce6ca067c1d4a08bfb0259ac94b7d\",\n        \"type\": \"source_code\",\n        \"text\": \"PairManager \\n      pman1 = new ExplicitPairManager1(), \\n      pman2 = new ExplicitPairManager2(); \\n    CriticalSection.testApproaches(pman1, pman2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e30864aecfc132dbffbfcd7ab1e7b5ac\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) { \\n      print(\\\"f()\\\"); \\n      Thread.yield(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b68f4d8b79e6c4f6ff20353068b5520\",\n        \"type\": \"source_code\",\n        \"text\": \"synchronized(syncObject) { \\n      for(int i = 0; i < 5; i++) { \\n        print(\\\"g()\\\"); \\n        Thread.yield(); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a531dde565db1f53ef7262105ceca21\",\n        \"type\": \"source_code\",\n        \"text\": \"final DualSynch ds = new DualSynch(); \\n    new Thread() { \\n      public void run() { \\n        ds.f(); \\n      } \\n    }.start(); \\n    ds.g();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0cfc5f12c68c0da2129057896012afda\",\n        \"type\": \"source_code\",\n        \"text\": \"while(!Thread.currentThread().isInterrupted()) { \\n      ThreadLocalVariableHolder.increment(); \\n      System.out.println(this); \\n      Thread.yield(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e37699e0f93bed8e335cee0f9fd6ea72\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"#\\\" + id + \\\": \\\" + \\n      ThreadLocalVariableHolder.get();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2e8cfd499e564f3ef6a1b2888ec1256\",\n        \"type\": \"source_code\",\n        \"text\": \"new ThreadLocal<Integer>() { \\n      private Random rand = new Random(47); \\n      protected synchronized Integer initialValue() { \\n        return rand.nextInt(10000); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"656c4a6d74652834cd97608fc602d76e\",\n        \"type\": \"source_code\",\n        \"text\": \"value.set(value.get() + 1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3a11069e972c32f0af6a8b2706a27c2\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new Accessor(i)); \\n    TimeUnit.SECONDS.sleep(3);  // Run for a while \\n    exec.shutdownNow();         // All Accessors will quit\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f4034dee9952b28f70acf3c6b64c557b\",\n        \"type\": \"source_code\",\n        \"text\": \"int temp = count; \\n    if(rand.nextBoolean()) // Yield half the time \\n      Thread.yield(); \\n    return (count = ++temp);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0ab243673ad59002421d58ce25e3160f\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Entrance>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc2fd7e0d050b9ef62a61159106ea502\",\n        \"type\": \"source_code\",\n        \"text\": \"this.id = id; \\n    // Keep this task in a list. Also prevents \\n    // garbage collection of dead tasks: \\n    entrances.add(this);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b65cb373dd96121b9e4898bfbe3983b\",\n        \"type\": \"source_code\",\n        \"text\": \"while(!canceled) { \\n      synchronized(this) { \\n        ++number; \\n      } \\n      print(this + \\\" Total: \\\" + count.increment()); \\n      try { \\n        TimeUnit.MILLISECONDS.sleep(100); \\n      } catch(InterruptedException e) { \\n        print(\\\"sleep interrupted\\\"); \\n      } \\n    } \\n    print(\\\"Stopping \\\" + this);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ec3110b2113cbb0e09c0c4c441da521\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Entrance \\\" + id + \\\": \\\" + getValue();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e35c0b88b5e3488479a7e3bc9876911e\",\n        \"type\": \"source_code\",\n        \"text\": \"return count.value();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f2b463e6161bcfe471166965dcfad777\",\n        \"type\": \"source_code\",\n        \"text\": \"int sum = 0; \\n    for(Entrance entrance : entrances) \\n      sum += entrance.getValue(); \\n    return sum;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97de44cbd1c6cc01f6c998e6123ee943\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new Entrance(i)); \\n    // Run for a while, then stop and collect the data: \\n    TimeUnit.SECONDS.sleep(3); \\n    Entrance.cancel(); \\n    exec.shutdown(); \\n    if(!exec.awaitTermination(250, TimeUnit.MILLISECONDS)) \\n      print(\\\"Some tasks were not terminated!\\\"); \\n    print(\\\"Total: \\\" + Entrance.getTotalCount()); \\n    print(\\\"Sum of Entrances: \\\" + Entrance.sumEntrances());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f241bba367e3792650229ccd0e99c0e\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      TimeUnit.SECONDS.sleep(100); \\n    } catch(InterruptedException e) { \\n      print(\\\"InterruptedException\\\"); \\n    } \\n    print(\\\"Exiting SleepBlocked.run()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a3f78b674d8bfb7237866bf2ba265de4\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      print(\\\"Waiting for read():\\\"); \\n      in.read(); \\n    } catch(IOException e) { \\n      if(Thread.currentThread().isInterrupted()) { \\n        print(\\\"Interrupted from blocked I/O\\\"); \\n      } else { \\n        throw new RuntimeException(e); \\n      } \\n    } \\n    print(\\\"Exiting IOBlocked.run()\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdc4c65b75de2c495ed05fee08357de7\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) // Never releases lock \\n      Thread.yield();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ccdf35ec7c2c4a6b10aee7f46afc0ca1\",\n        \"type\": \"source_code\",\n        \"text\": \"new Thread() { \\n      public void run() { \\n        f(); // Lock acquired by this thread \\n      } \\n    }.start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fec22a584964be835c19e3f51840f87\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Trying to call f()\\\"); \\n    f(); \\n    print(\\\"Exiting SynchronizedBlocked.run()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c23539246db1546d265aafaea3f738aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newCachedThreadPool();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15d2f260bbf35e369520e1b36a21831a\",\n        \"type\": \"source_code\",\n        \"text\": \"Future<?> f = exec.submit(r); \\n    TimeUnit.MILLISECONDS.sleep(100); \\n    print(\\\"Interrupting \\\" + r.getClass().getName()); \\n    f.cancel(true); // Interrupts if running \\n    print(\\\"Interrupt sent to \\\" + r.getClass().getName());\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7e20e4430a429f44b026c2251bfe4270\",\n        \"type\": \"source_code\",\n        \"text\": \"test(new SleepBlocked()); \\n    test(new IOBlocked(System.in)); \\n    test(new SynchronizedBlocked()); \\n    TimeUnit.SECONDS.sleep(3); \\n    print(\\\"Aborting with System.exit(0)\\\"); \\n    System.exit(0); // ... since last 2 interrupts failed\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ba035f0f06a3ee90558a1bcc189c69f2\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    ServerSocket server = new ServerSocket(8080); \\n    InputStream socketInput = \\n      new Socket(\\\"localhost\\\", 8080).getInputStream(); \\n    exec.execute(new IOBlocked(socketInput)); \\n    exec.execute(new IOBlocked(System.in)); \\n    TimeUnit.MILLISECONDS.sleep(100); \\n    print(\\\"Shutting down all threads\\\"); \\n    exec.shutdownNow(); \\n    TimeUnit.SECONDS.sleep(1); \\n    print(\\\"Closing \\\" + socketInput.getClass().getName()); \\n    socketInput.close(); // Releases blocked thread \\n    TimeUnit.SECONDS.sleep(1); \\n    print(\\\"Closing \\\" + System.in.getClass().getName()); \\n    System.in.close(); // Releases blocked thread\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"389fd8b8070ea2c14fa01bcd9c32e4bc\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      print(\\\"Waiting for read() in \\\" + this); \\n      sc.read(ByteBuffer.allocate(1)); \\n    } catch(ClosedByInterruptException e) { \\n      print(\\\"ClosedByInterruptException\\\"); \\n    } catch(AsynchronousCloseException e) { \\n      print(\\\"AsynchronousCloseException\\\"); \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    } \\n    print(\\\"Exiting NIOBlocked.run() \\\" + this);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3414ef9437f5d6fc8c2508939453675f\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    ServerSocket server = new ServerSocket(8080); \\n    InetSocketAddress isa = \\n      new InetSocketAddress(\\\"localhost\\\", 8080); \\n    SocketChannel sc1 = SocketChannel.open(isa); \\n    SocketChannel sc2 = SocketChannel.open(isa); \\n    Future<?> f = exec.submit(new NIOBlocked(sc1)); \\n    exec.execute(new NIOBlocked(sc2)); \\n    exec.shutdown(); \\n    TimeUnit.SECONDS.sleep(1); \\n    // Produce an interrupt via cancel: \\n    f.cancel(true); \\n    TimeUnit.SECONDS.sleep(1); \\n    // Release the block by closing the channel: \\n    sc2.close();\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"11be93e59becbcdc5943dfcd801dd435\",\n        \"type\": \"source_code\",\n        \"text\": \"if(count-- > 0) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78738ba43155aee4904b48c159f705b7\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f1() calling f2() with count \\\" + count); \\n      f2(count); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d8159b4d9fed9c20c25e09f34ac6d651\",\n        \"type\": \"source_code\",\n        \"text\": \"if(count-- > 0) { \\n      print(\\\"f2() calling f1() with count \\\" + count); \\n      f1(count); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1f9e72a11872466b59efe948268d7bc9\",\n        \"type\": \"source_code\",\n        \"text\": \"final MultiLock multiLock = new MultiLock(); \\n    new Thread() { \\n      public void run() { \\n        multiLock.f1(10); \\n      } \\n    }.start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6ecb8d26c5aa2673e7d33649ef310924\",\n        \"type\": \"source_code\",\n        \"text\": \"// Acquire it right away, to demonstrate interruption \\n    // of a task blocked on a ReentrantLock: \\n    lock.lock();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4387cb8ab7010163fda722c74e566e5b\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      // This will never be available to a second task \\n      lock.lockInterruptibly(); // Special call \\n      print(\\\"lock acquired in f()\\\"); \\n    } catch(InterruptedException e) {\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34219125fcc96ecc920a7127bd8ec76d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Interrupted from lock acquisition in f()\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6daf637065e041db6af332b8b757d556\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Waiting for f() in BlockedMutex\\\"); \\n    blocked.f(); \\n    print(\\\"Broken out of blocked call\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"913870e8b4f3de26d924cd7aa938ba26\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t = new Thread(new Blocked2()); \\n    t.start(); \\n    TimeUnit.SECONDS.sleep(1); \\n    System.out.println(\\\"Issuing t.interrupt()\\\"); \\n    t.interrupt();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8122176c6db0c2805c4f62e958da5dd2\",\n        \"type\": \"source_code\",\n        \"text\": \"id = ident; \\n    print(\\\"NeedsCleanup \\\" + id);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ada2181ab1e136ef132175bbba42f04\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Cleaning up \\\" + id);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e598ad3e6430cb4ee87693bd2bf758e3\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // point1 \\n        NeedsCleanup n1 = new NeedsCleanup(1); \\n        // Start try-finally immediately after definition \\n        // of n1, to guarantee proper cleanup of n1: \\n        try { \\n          print(\\\"Sleeping\\\"); \\n          TimeUnit.SECONDS.sleep(1); \\n          // point2 \\n          NeedsCleanup n2 = new NeedsCleanup(2); \\n          // Guarantee proper cleanup of n2: \\n          try { \\n            print(\\\"Calculating\\\"); \\n            // A time-consuming, non-blocking operation: \\n            for(int i = 1; i < 2500000; i++) \\n              d = d + (Math.PI + Math.E) / d; \\n            print(\\\"Finished time-consuming operation\\\"); \\n          } finally { \\n            n2.cleanup(); \\n          } \\n        } finally { \\n          n1.cleanup(); \\n        } \\n      } \\n      print(\\\"Exiting via while() test\\\"); \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via InterruptedException\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"01c73133283cbe40199e867affe677e2\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length != 1) { \\n      print(\\\"usage: java InterruptingIdiom delay-in-mS\\\"); \\n      System.exit(1); \\n    } \\n    Thread t = new Thread(new Blocked3()); \\n    t.start(); \\n    TimeUnit.MILLISECONDS.sleep(new Integer(args[0])); \\n    t.interrupt();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b238e79777f7fe3deccafb1337ccbfd6\",\n        \"type\": \"source_code\",\n        \"text\": \"waxOn = true; // Ready to buff \\n    notifyAll();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c4bcc827807174a34742f091eadac06d\",\n        \"type\": \"source_code\",\n        \"text\": \"waxOn = false; // Ready for another coat of wax \\n    notifyAll();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b5deceead0bbeb84b1434aad169bede\",\n        \"type\": \"source_code\",\n        \"text\": \"while(waxOn == false) \\n      wait();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09848c97bb414a97ad8cc850d8aa29c5\",\n        \"type\": \"source_code\",\n        \"text\": \"while(waxOn == true) \\n      wait();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd220bc39a149bff3dc4f5240e24a581\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        printnb(\\\"Wax On! \\\"); \\n        TimeUnit.MILLISECONDS.sleep(200); \\n        car.waxed(); \\n        car.waitForBuffing(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via interrupt\\\"); \\n    } \\n    print(\\\"Ending Wax On task\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a4eef89eca0cd771d75a71311b13b923\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        car.waitForWaxing(); \\n        printnb(\\\"Wax Off! \\\"); \\n        TimeUnit.MILLISECONDS.sleep(200); \\n        car.buffed(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via interrupt\\\"); \\n    } \\n    print(\\\"Ending Wax Off task\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"377f3c0fec6cdd984a2d216ba1c9e411\",\n        \"type\": \"source_code\",\n        \"text\": \"Car car = new Car(); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(new WaxOff(car)); \\n    exec.execute(new WaxOn(car)); \\n    TimeUnit.SECONDS.sleep(5); // Run for a while... \\n    exec.shutdownNow(); // Interrupt all tasks\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"14a917d97c6796426a76fb4c9b0b44bd\",\n        \"type\": \"source_code\",\n        \"text\": \"sharedMonitor.wait();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"14a917d97c6796426a76fb4c9b0b44bd\",\n        \"type\": \"source_code\",\n        \"text\": \"sharedMonitor.wait();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8600ffff4a84f14285cab730734b763d\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        wait(); \\n        System.out.print(Thread.currentThread() + \\\" \\\"); \\n      } \\n    } catch(InterruptedException e) { \\n      // OK to exit this way \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c51aa20d422b9a40c70f07da29dbbf1\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new Task()); \\n    exec.execute(new Task2()); \\n    Timer timer = new Timer(); \\n    timer.scheduleAtFixedRate(new TimerTask() { \\n      boolean prod = true; \\n      public void run() { \\n        if(prod) { \\n          System.out.print(\\\"\\\\nnotify() \\\"); \\n          Task.blocker.prod(); \\n          prod = false; \\n        } else { \\n          System.out.print(\\\"\\\\nnotifyAll() \\\"); \\n          Task.blocker.prodAll(); \\n          prod = true; \\n        } \\n      } \\n    }, 400, 400); // Run every .4 second \\n    TimeUnit.SECONDS.sleep(5); // Run for a while... \\n    timer.cancel(); \\n    System.out.println(\\\"\\\\nTimer canceled\\\"); \\n    TimeUnit.MILLISECONDS.sleep(500); \\n    System.out.print(\\\"Task2.blocker.prodAll() \\\"); \\n    Task2.blocker.prodAll(); \\n    TimeUnit.MILLISECONDS.sleep(500); \\n    System.out.println(\\\"\\\\nShutting down\\\"); \\n    exec.shutdownNow(); // Interrupt all tasks\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ebb0a7419916f488ee36cbb8ed60d89\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        synchronized(this) { \\n          while(restaurant.meal == null) \\n            wait(); // ... for the chef to produce a meal \\n        } \\n        print(\\\"Waitperson got \\\" + restaurant.meal); \\n        synchronized(restaurant.chef) { \\n          restaurant.meal = null; \\n          restaurant.chef.notifyAll(); // Ready for another \\n        } \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"WaitPerson interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e54058ea39ef7f27959c6f0bb082435b\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        synchronized(this) { \\n          while(restaurant.meal != null) \\n            wait(); // ... for the meal to be taken \\n        } \\n        if(++count == 10) { \\n          print(\\\"Out of food, closing\\\"); \\n          restaurant.exec.shutdownNow(); \\n        } \\n        printnb(\\\"Order up! \\\"); \\n        synchronized(restaurant.waitPerson) { \\n          restaurant.meal = new Meal(count); \\n          restaurant.waitPerson.notifyAll(); \\n        } \\n        TimeUnit.MILLISECONDS.sleep(100); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Chef interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"11989219699e74aa9394dfb6c2fb3e45\",\n        \"type\": \"source_code\",\n        \"text\": \"exec.execute(chef); \\n    exec.execute(waitPerson);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f55d9c06832ff9947fd498fb91a542d\",\n        \"type\": \"source_code\",\n        \"text\": \"new Restaurant();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b37e65619eeb1494c22692565e271a12\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      waxOn = true; // Ready to buff \\n      condition.signalAll(); \\n    } finally {\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"227a23b99b423e00ec3638723cc1d7e4\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.unlock(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b6f861d9bff2e969398bb3f3dc8bf9fa\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      waxOn = false; // Ready for another coat of wax \\n      condition.signalAll(); \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b3d72528bc62f7dff4ed9152b22b804\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      while(waxOn == false) \\n        condition.await(); \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5522c506dbb90f440b9f5a7789dd37b6\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      while(waxOn == true) \\n        condition.await(); \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd220bc39a149bff3dc4f5240e24a581\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        printnb(\\\"Wax On! \\\"); \\n        TimeUnit.MILLISECONDS.sleep(200); \\n        car.waxed(); \\n        car.waitForBuffing(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via interrupt\\\"); \\n    } \\n    print(\\\"Ending Wax On task\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"045fc706ba4b9a2ea544f05a4420c9a8\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        car.waitForWaxing(); \\n        printnb(\\\"Wax Off! \\\"); \\n        TimeUnit.MILLISECONDS.sleep(200); \\n        car.buffed(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via interrupt\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e60d7ed5f1e43ea5c53bf87e0f50e76\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    print(\\\"Ending Wax Off task\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"565c1a3096b92333e12f9fe19a5e9faa\",\n        \"type\": \"source_code\",\n        \"text\": \"Car car = new Car(); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(new WaxOff(car)); \\n    exec.execute(new WaxOn(car)); \\n    TimeUnit.SECONDS.sleep(5); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"130ed8c671d0ba23cd288a6c9198aca9\",\n        \"type\": \"source_code\",\n        \"text\": \"rockets = queue;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4aa42fe45140fbfae2c38ca48f19a849\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      rockets.put(lo); \\n    } catch(InterruptedException e) { \\n      print(\\\"Interrupted during put()\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57e98a356d25ff03457ae62a681245a6\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        LiftOff rocket = rockets.take(); \\n        rocket.run(); // Use this thread \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Waking from take()\\\"); \\n    } \\n    print(\\\"Exiting LiftOffRunner\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39fe4ff15afc71f755a2a76112c93b6f\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      // Compensate for Windows/Linux difference in the \\n      // length of the result produced by the Enter key: \\n      new BufferedReader( \\n        new InputStreamReader(System.in)).readLine(); \\n    } catch(java.io.IOException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2518dfbf8a48a40e53059f05a7ca1ef0\",\n        \"type\": \"source_code\",\n        \"text\": \"print(message); \\n    getkey();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a0a0a415618c28b4bcf70fcf27c2b099\",\n        \"type\": \"source_code\",\n        \"text\": \"print(msg); \\n    LiftOffRunner runner = new LiftOffRunner(queue); \\n    Thread t = new Thread(runner); \\n    t.start(); \\n    for(int i = 0; i < 5; i++) \\n      runner.add(new LiftOff(5)); \\n    getkey(\\\"Press \\u2018Enter\\u2019 (\\\" + msg + \\\")\\\"); \\n    t.interrupt(); \\n    print(\\\"Finished \\\" + msg + \\\" test\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0c649c28f4b9934882c07888bbe09642\",\n        \"type\": \"source_code\",\n        \"text\": \"test(\\\"LinkedBlockingQueue\\\", // Unlimited size\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d1a0f3f8d99b7b918c9db333e4d39756\",\n        \"type\": \"source_code\",\n        \"text\": \"new LinkedBlockingQueue<LiftOff>()); \\n    test(\\\"ArrayBlockingQueue\\\", // Fixed size \\n      new ArrayBlockingQueue<LiftOff>(3)); \\n    test(\\\"SynchronousQueue\\\", // Size of 1 \\n      new SynchronousQueue<LiftOff>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"880cff4dd97b80af81d3a0ee9e950b45\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Toast \\\" + id + \\\": \\\" + status;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5d337a79c295e3a15b2a603e5693e7c\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        TimeUnit.MILLISECONDS.sleep( \\n          100 + rand.nextInt(500)); \\n        // Make toast \\n        Toast t = new Toast(count++); \\n        print(t); \\n        // Insert into queue \\n        toastQueue.put(t); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Toaster interrupted\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"02c9ab397aa850646734780c649d1730\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    print(\\\"Toaster off\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3779001ce7ae291f7268a4ec0b45fc91\",\n        \"type\": \"source_code\",\n        \"text\": \"dryQueue = dry; \\n    butteredQueue = buttered;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"581e6ac2c48f43858b5fe040b05ab5d7\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until next piece of toast is available: \\n        Toast t = dryQueue.take(); \\n        t.butter(); \\n        print(t); \\n        butteredQueue.put(t); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Butterer interrupted\\\"); \\n    } \\n    print(\\\"Butterer off\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0dccb5d26e328c18dc2612274bd48d12\",\n        \"type\": \"source_code\",\n        \"text\": \"butteredQueue = buttered; \\n    finishedQueue = finished;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f732e84d07b74ab23f2a4c4eb35ad226\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until next piece of toast is available: \\n        Toast t = butteredQueue.take(); \\n        t.jam(); \\n        print(t); \\n        finishedQueue.put(t); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Jammer interrupted\\\"); \\n    } \\n    print(\\\"Jammer off\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d999a01a844534ebd4bb1b8564b0742d\",\n        \"type\": \"source_code\",\n        \"text\": \"finishedQueue = finished;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"00713cce6257931b055f206de5862f63\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until next piece of toast is available: \\n        Toast t = finishedQueue.take();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"def7db329009984ddcc61f3cfaf9bc0f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Verify that the toast is coming in order, \\n        // and that all pieces are getting jammed: \\n        if(t.getId() != counter++ || \\n           t.getStatus() != Toast.Status.JAMMED) { \\n          print(\\\">>>> Error: \\\" + t); \\n          System.exit(1); \\n        } else \\n          print(\\\"Chomp! \\\" + t); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Eater interrupted\\\"); \\n    } \\n    print(\\\"Eater off\\\");\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a46d62890b796aa93c552ecf12192f1\",\n        \"type\": \"source_code\",\n        \"text\": \"ToastQueue dryQueue = new ToastQueue(), \\n               butteredQueue = new ToastQueue(), \\n               finishedQueue = new ToastQueue(); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(new Toaster(dryQueue)); \\n    exec.execute(new Butterer(dryQueue, butteredQueue)); \\n    exec.execute(new Jammer(butteredQueue, finishedQueue)); \\n    exec.execute(new Eater(finishedQueue)); \\n    TimeUnit.SECONDS.sleep(5); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4d467ecadc6dd38ff87d2d11a760faf2\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(true) \\n        for(char c = \\u2018A\\u2019; c <= \\u2018z\\u2019; c++) { \\n          out.write(c); \\n          TimeUnit.MILLISECONDS.sleep(rand.nextInt(500)); \\n        } \\n    } catch(IOException e) { \\n      print(e + \\\" Sender write exception\\\"); \\n    } catch(InterruptedException e) { \\n      print(e + \\\" Sender sleep interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5575a0966853f1ee38a8ee1d21536aa\",\n        \"type\": \"source_code\",\n        \"text\": \"in = new PipedReader(sender.getPipedWriter());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f61d39a92576ca7e9fe1510224c3919\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(true) { \\n        // Blocks until characters are there: \\n        printnb(\\\"Read: \\\" + (char)in.read() + \\\", \\\"); \\n      } \\n    } catch(IOException e) { \\n      print(e + \\\" Receiver read exception\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e69fcbf5a4f612f6d9356cec4080dc98\",\n        \"type\": \"source_code\",\n        \"text\": \"Sender sender = new Sender(); \\n    Receiver receiver = new Receiver(sender); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(sender); \\n    exec.execute(receiver); \\n    TimeUnit.SECONDS.sleep(4); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c75f177fbfc1223cd7e9815e0751ac9\",\n        \"type\": \"source_code\",\n        \"text\": \"while(taken) \\n      wait(); \\n    taken = true;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c46a34ca90af94342a586bd4e2639b4\",\n        \"type\": \"source_code\",\n        \"text\": \"taken = false; \\n    notifyAll();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"738598ba4dcb38e6e25b50d21a8b3996\",\n        \"type\": \"source_code\",\n        \"text\": \"if(ponderFactor == 0) return; \\n    TimeUnit.MILLISECONDS.sleep( \\n      rand.nextInt(ponderFactor * 250));\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"51fcae841e8636842c50ffa15e442a3d\",\n        \"type\": \"source_code\",\n        \"text\": \"int ident, int ponder) { \\n    this.left = left; \\n    this.right = right; \\n    id = ident; \\n    ponderFactor = ponder;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a35c7cd3b69b6f866ddee827854e8f9\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        print(this + \\\" \\\" + \\\"thinking\\\"); \\n        pause(); \\n        // Philosopher becomes hungry \\n        print(this + \\\" \\\" + \\\"grabbing right\\\"); \\n        right.take(); \\n        print(this + \\\" \\\" + \\\"grabbing left\\\"); \\n        left.take(); \\n        print(this + \\\" \\\" + \\\"eating\\\"); \\n        pause(); \\n        right.drop(); \\n        left.drop(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(this + \\\" \\\" + \\\"exiting via interrupt\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cf332b32d4db648acfc2256411c8bc27\",\n        \"type\": \"source_code\",\n        \"text\": \"int ponder = 5; \\n    if(args.length > 0) \\n      ponder = Integer.parseInt(args[0]); \\n    int size = 5; \\n    if(args.length > 1) \\n      size = Integer.parseInt(args[1]); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    Chopstick[] sticks = new Chopstick[size]; \\n    for(int i = 0; i < size; i++) \\n      sticks[i] = new Chopstick(); \\n    for(int i = 0; i < size; i++) \\n      exec.execute(new Philosopher( \\n        sticks[i], sticks[(i+1) % size], i, ponder)); \\n    if(args.length == 3 && args[2].equals(\\\"timeout\\\")) \\n      TimeUnit.SECONDS.sleep(5); \\n    else { \\n      System.out.println(\\\"Press \\u2018Enter\\u2019 to quit\\\"); \\n      System.in.read(); \\n    } \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"002dabdd003247d3c74baeb9b82d7003\",\n        \"type\": \"source_code\",\n        \"text\": \"int ponder = 5; \\n    if(args.length > 0) \\n      ponder = Integer.parseInt(args[0]); \\n    int size = 5; \\n    if(args.length > 1) \\n      size = Integer.parseInt(args[1]); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    Chopstick[] sticks = new Chopstick[size]; \\n    for(int i = 0; i < size; i++) \\n      sticks[i] = new Chopstick(); \\n    for(int i = 0; i < size; i++) \\n      if(i < (size-1)) \\n        exec.execute(new Philosopher( \\n          sticks[i], sticks[i+1], i, ponder)); \\n      else\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9acc305afe715f3bfae94c52b0c4a080\",\n        \"type\": \"source_code\",\n        \"text\": \"exec.execute(new Philosopher( \\n          sticks[0], sticks[i], i, ponder)); \\n    if(args.length == 3 && args[2].equals(\\\"timeout\\\")) \\n      TimeUnit.SECONDS.sleep(5); \\n    else { \\n      System.out.println(\\\"Press \\u2018Enter\\u2019 to quit\\\"); \\n      System.in.read(); \\n    } \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0a8d250b43864eb82008e9bc71e1e5f\",\n        \"type\": \"source_code\",\n        \"text\": \"this.latch = latch;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cee1e80e049c37640c4c27763f9e87af\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      doWork(); \\n      latch.countDown(); \\n    } catch(InterruptedException ex) { \\n      // Acceptable way to exit \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95b1347c222d6e47b8efe5de8c635061\",\n        \"type\": \"source_code\",\n        \"text\": \"TimeUnit.MILLISECONDS.sleep(rand.nextInt(2000));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8dae5d825b45f53b750bdf03baa42719\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\"completed\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3a73f9bb6c21d52741f4a94bc7e9ef1f\",\n        \"type\": \"source_code\",\n        \"text\": \"return String.format(\\\"%1$-3d \\\", id);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0a8d250b43864eb82008e9bc71e1e5f\",\n        \"type\": \"source_code\",\n        \"text\": \"this.latch = latch;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a4e02a8eab4ca43d0f4fd7ef23302bdd\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      latch.await(); \\n      print(\\\"Latch barrier passed for \\\" + this); \\n    } catch(InterruptedException ex) { \\n      print(this + \\\" interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78340414f1628aa2a450fa55dca223b2\",\n        \"type\": \"source_code\",\n        \"text\": \"return String.format(\\\"WaitingTask %1$-3d \\\", id);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97db21d0b18052d8d808e6a5bdc2601f\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    // All must share a single CountDownLatch object: \\n    CountDownLatch latch = new CountDownLatch(SIZE); \\n    for(int i = 0; i < 10; i++) \\n      exec.execute(new WaitingTask(latch)); \\n    for(int i = 0; i < SIZE; i++) \\n      exec.execute(new TaskPortion(latch)); \\n    print(\\\"Launched all tasks\\\"); \\n    exec.shutdown(); // Quit when all tasks complete\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5cf99f3895603530349a4c8a73bcb26d\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        synchronized(this) { \\n          strides += rand.nextInt(3); // Produces 0, 1 or 2 \\n        } \\n        barrier.await(); \\n      } \\n    } catch(InterruptedException e) { \\n      // A legitimate way to exit \\n    } catch(BrokenBarrierException e) { \\n      // This one we want to know about \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b02762675d5eac10602f4ef2aa9d2424\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder s = new StringBuilder(); \\n    for(int i = 0; i < getStrides(); i++) \\n      s.append(\\\"*\\\"); \\n    s.append(id); \\n    return s.toString();\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c23539246db1546d265aafaea3f738aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newCachedThreadPool();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1b5aa6c6a94bee8492ce702f5a698935\",\n        \"type\": \"source_code\",\n        \"text\": \"barrier = new CyclicBarrier(nHorses, new Runnable() { \\n      public void run() { \\n        StringBuilder s = new StringBuilder(); \\n        for(int i = 0; i < FINISH_LINE; i++) \\n          s.append(\\\"=\\\"); // The fence on the racetrack \\n        print(s); \\n        for(Horse horse : horses) \\n          print(horse.tracks()); \\n        for(Horse horse : horses) \\n          if(horse.getStrides() >= FINISH_LINE) { \\n            print(horse + \\\"won!\\\"); \\n            exec.shutdownNow(); \\n            return; \\n          } \\n        try { \\n          TimeUnit.MILLISECONDS.sleep(pause); \\n        } catch(InterruptedException e) { \\n          print(\\\"barrier-action sleep interrupted\\\"); \\n        } \\n      } \\n    }); \\n    for(int i = 0; i < nHorses; i++) { \\n      Horse horse = new Horse(barrier); \\n      horses.add(horse); \\n      exec.execute(horse); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"efb5fa13a396f7bd35f1495202be4d8b\",\n        \"type\": \"source_code\",\n        \"text\": \"int nHorses = 7; \\n    int pause = 200; \\n    if(args.length > 0) { // Optional argument \\n      int n = new Integer(args[0]); \\n      nHorses = n > 0 ? n : nHorses; \\n    } \\n    if(args.length > 1) { // Optional argument \\n      int p = new Integer(args[1]); \\n      pause = p > -1 ? p : pause; \\n    } \\n    new HorseRace(nHorses, pause);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6fc8b08197e6408f24b49917a144bdc0\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<DelayedTask>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21fc34d52945fbcb30380c7efb687de6\",\n        \"type\": \"source_code\",\n        \"text\": \"delta = delayInMilliseconds; \\n    trigger = System.nanoTime() + \\n      NANOSECONDS.convert(delta, MILLISECONDS); \\n    sequence.add(this);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b6f28db01e3e76d31509299893c31385\",\n        \"type\": \"source_code\",\n        \"text\": \"return unit.convert( \\n      trigger - System.nanoTime(), NANOSECONDS);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07e3d547030565cb6874c485e6f4cac5\",\n        \"type\": \"source_code\",\n        \"text\": \"DelayedTask that = (DelayedTask)arg; \\n    if(trigger < that.trigger) return -1; \\n    if(trigger > that.trigger) return 1; \\n    return 0;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a8f87619fd6382750fb38d14104ef415\",\n        \"type\": \"source_code\",\n        \"text\": \"return String.format(\\\"[%1$-4d]\\\", delta) + \\n      \\\" Task \\\" + id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1645bf36ddf519b3f78d8cf1ee9eb1c0\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + id + \\\":\\\" + delta + \\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"666bd6374a7df3b3b86b12e580a039f1\",\n        \"type\": \"source_code\",\n        \"text\": \"private ExecutorService exec; \\n    public EndSentinel(int delay, ExecutorService e) { \\n      super(delay); \\n      exec = e;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8c0a5cd65e80f9f16df9c43d856c8f68\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    public void run() { \\n      for(DelayedTask pt : sequence) { \\n        printnb(pt.summary() + \\\" \\\"); \\n      } \\n      print(); \\n      print(this + \\\" Calling shutdownNow()\\\"); \\n      exec.shutdownNow(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35521bf385eaeea66179c779d8f59393\",\n        \"type\": \"source_code\",\n        \"text\": \"this.q = q;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5bfc634efb1409d0096700144f81caff\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) \\n        q.take().run(); // Run task with the current thread \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    } \\n    print(\\\"Finished DelayedTaskConsumer\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"278fcbfe5372d9c1ece8f754acf6b54b\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    DelayQueue<DelayedTask> queue = \\n      new DelayQueue<DelayedTask>(); \\n    // Fill with tasks that have random delays: \\n    for(int i = 0; i < 20; i++) \\n      queue.put(new DelayedTask(rand.nextInt(5000))); \\n    // Set the stopping point \\n    queue.add(new DelayedTask.EndSentinel(5000, exec)); \\n    exec.execute(new DelayedTaskConsumer(queue));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b828fc3db9413a8d8d2e91f0fffb430d\",\n        \"type\": \"source_code\",\n        \"text\": \"NANOSECONDS.convert(delta, MILLISECONDS);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7c617125f81570c0947928e2d5e62afc\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<PrioritizedTask>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b7dd0f94b72189f9870b984206af4cf\",\n        \"type\": \"source_code\",\n        \"text\": \"this.priority = priority; \\n    sequence.add(this);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9fca97a52e5b68632de1e790f13109e5\",\n        \"type\": \"source_code\",\n        \"text\": \"return priority < arg.priority ? 1 : \\n      (priority > arg.priority ? -1 : 0);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8e6bd36746fa1aeddb5eabcd28479c21\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      TimeUnit.MILLISECONDS.sleep(rand.nextInt(250)); \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    } \\n    print(this);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b9e542376b2c176a44a48e00b2bdea3\",\n        \"type\": \"source_code\",\n        \"text\": \"return String.format(\\\"[%1$-3d]\\\", priority) + \\n      \\\" Task \\\" + id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a3878a71d767bc23e634b2f8ccae06d8\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + id + \\\":\\\" + priority + \\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f004d44f572ef53cde89e9ab7f81e0ef\",\n        \"type\": \"source_code\",\n        \"text\": \"private ExecutorService exec; \\n    public EndSentinel(ExecutorService e) { \\n      super(-1); // Lowest priority in this program \\n      exec = e; \\n    } \\n    public void run() { \\n      int count = 0; \\n      for(PrioritizedTask pt : sequence) { \\n        printnb(pt.summary()); \\n        if(++count % 5 == 0) \\n          print(); \\n      } \\n      print(); \\n      print(this + \\\" Calling shutdownNow()\\\"); \\n      exec.shutdownNow(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b05bf9976403c7f5e3b9c0fa204ae71f\",\n        \"type\": \"source_code\",\n        \"text\": \"Queue<Runnable> q, ExecutorService e) { \\n    queue = q; \\n    exec = e; // Used for EndSentinel\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e28335cb6355e98823b208d19dd93d86\",\n        \"type\": \"source_code\",\n        \"text\": \"// Unbounded queue; never blocks. \\n    // Fill it up fast with random priorities: \\n    for(int i = 0; i < 20; i++) { \\n      queue.add(new PrioritizedTask(rand.nextInt(10))); \\n      Thread.yield(); \\n    } \\n    // Trickle in highest-priority jobs: \\n    try { \\n      for(int i = 0; i < 10; i++) { \\n        TimeUnit.MILLISECONDS.sleep(250); \\n        queue.add(new PrioritizedTask(10)); \\n      } \\n      // Add jobs, lowest priority first: \\n      for(int i = 0; i < 10; i++) \\n        queue.add(new PrioritizedTask(i)); \\n      // A sentinel to stop all the tasks: \\n      queue.add(new PrioritizedTask.EndSentinel(exec)); \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    } \\n    print(\\\"Finished PrioritizedTaskProducer\\\");\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55e56680b507f47495e26d02fb3254a8\",\n        \"type\": \"source_code\",\n        \"text\": \"PriorityBlockingQueue<Runnable> q) { \\n    this.q = q;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43ce54cdda826741b28533781a6f0675\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) \\n        // Use current thread to run the task: \\n        q.take().run(); \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    } \\n    print(\\\"Finished PrioritizedTaskConsumer\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"789b77c4e6418a43c67989059a3f347f\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    PriorityBlockingQueue<Runnable> queue = \\n      new PriorityBlockingQueue<Runnable>(); \\n    exec.execute(new PrioritizedTaskProducer(queue, exec)); \\n    exec.execute(new PrioritizedTaskConsumer(queue));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d4e66c4b84b67f292c8e0bb4bd72cf7a\",\n        \"type\": \"source_code\",\n        \"text\": \"return thermostat;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3408292caadd7d8f304eb659e876083f\",\n        \"type\": \"source_code\",\n        \"text\": \"thermostat = value;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0b90aee8ad9b4d53acd430b0a20da28d\",\n        \"type\": \"source_code\",\n        \"text\": \"new ScheduledThreadPoolExecutor(10);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d89528a7547a79f84290278099499015\",\n        \"type\": \"source_code\",\n        \"text\": \"scheduler.schedule(event,delay,TimeUnit.MILLISECONDS);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aec0c5540d4a6d4abb648f48765be59f\",\n        \"type\": \"source_code\",\n        \"text\": \"scheduler.scheduleAtFixedRate( \\n      event, initialDelay, period, TimeUnit.MILLISECONDS);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1979cfd06a34dac8dff20449c5950c80\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here to \\n      // physically turn on the light. \\n      System.out.println(\\\"Turning on lights\\\"); \\n      light = true; \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb928dfe868965c5cbc9f33eb7a824cc\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here to \\n      // physically turn off the light. \\n      System.out.println(\\\"Turning off lights\\\"); \\n      light = false; \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25ea0c9c1f5024d9f2001fbf582e35b5\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here. \\n      System.out.println(\\\"Turning greenhouse water on\\\"); \\n      water = true; \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"696eb3aadae75a5055274ee85b365392\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here. \\n      System.out.println(\\\"Turning greenhouse water off\\\"); \\n      water = false; \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebf393b5d638cc1fcce0e0b6b5ef18ce\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here. \\n      System.out.println(\\\"Thermostat to night setting\\\"); \\n      setThermostat(\\\"Night\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c39ad0477e5b207d5929543d44416587\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here. \\n      System.out.println(\\\"Thermostat to day setting\\\"); \\n      setThermostat(\\\"Day\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"98088f4ef99ba76bc5c76c2506fe978d\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { System.out.println(\\\"Bing!\\\"); }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"225966bfa57f7e5e20138b40f0dd2c59\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      System.out.println(\\\"Terminating\\\"); \\n      scheduler.shutdownNow(); \\n      // Must start a separate task to do this job, \\n      // since the scheduler has been shut down: \\n      new Thread() { \\n        public void run() { \\n          for(DataPoint d : data) \\n            System.out.println(d); \\n        } \\n      }.start(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0057f9ec438266d1c1c41745760c3e17\",\n        \"type\": \"source_code\",\n        \"text\": \"final Calendar time; \\n    final float temperature; \\n    final float humidity; \\n    public DataPoint(Calendar d, float temp, float hum) { \\n      time = d; \\n      temperature = temp; \\n      humidity = hum; \\n    } \\n    public String toString() { \\n      return time.getTime() + \\n        String.format( \\n          \\\" temperature: %1$.1f humidity: %2$.2f\\\", \\n          temperature, humidity); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7354a90b4047b51c73121a4f17e1eeb4\",\n        \"type\": \"source_code\",\n        \"text\": \"lastTime.set(Calendar.MINUTE, 30); \\n    lastTime.set(Calendar.SECOND, 00);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"727c79de89bf5b57e5c2c08ff4b355fd\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<DataPoint>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3e67f9254e8d4d7dd503bc6c3085988\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      System.out.println(\\\"Collecting data\\\"); \\n      synchronized(GreenhouseScheduler.this) { \\n        // Pretend the interval is longer than it is: \\n        lastTime.set(Calendar.MINUTE, \\n          lastTime.get(Calendar.MINUTE) + 30); \\n        // One in 5 chances of reversing the direction: \\n        if(rand.nextInt(5) == 4) \\n          tempDirection = -tempDirection; \\n        // Store previous value: \\n        lastTemp = lastTemp + \\n          tempDirection * (1.0f + rand.nextFloat()); \\n        if(rand.nextInt(5) == 4) \\n          h