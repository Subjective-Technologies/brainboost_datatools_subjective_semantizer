{
    "project_name": "brainboost_datatools_subjective_semantizer",
    "programming_language": "python",
    "project_tree_structure": {
        "directory_name": "brainboost_datatools_subjective_semantizer",
        "children": [
            {
                "file_name": "pdf_to_knowledge_hooks_llama.py"
            },
            {
                "file_name": "find_language.py"
            },
            {
                "file_name": "tools_process_pdfs.py"
            },
            {
                "file_name": "code_snippets.json"
            },
            {
                "file_name": "pdf_to_knowledgehooks.py"
            },
            {
                "file_name": "README.md"
            },
            {
                "file_name": "pdf_to_dependency_graph.py"
            },
            {
                "file_name": "convert_llama_weights.py"
            },
            {
                "file_name": "tools_context.py"
            },
            {
                "file_name": "tools_gpu.py"
            },
            {
                "file_name": "download_tutorial_html.py"
            },
            {
                "file_name": "html_to_text.py"
            },
            {
                "file_name": ".gitignore"
            },
            {
                "file_name": "initialize_environment.sh"
            },
            {
                "directory_name": "context",
                "children": [
                    {
                        "directory_name": "snapshot-20241205163258_parts",
                        "children": []
                    }
                ]
            },
            {
                "directory_name": "com_worktwins_test",
                "children": [
                    {
                        "file_name": "test_languages.py"
                    },
                    {
                        "file_name": "test_model_use.py"
                    },
                    {
                        "file_name": "test_pdf_to_text.py"
                    },
                    {
                        "directory_name": ".pytest_cache",
                        "children": [
                            {
                                "file_name": "README.md"
                            },
                            {
                                "file_name": ".gitignore"
                            },
                            {
                                "directory_name": "v",
                                "children": [
                                    {
                                        "directory_name": "cache",
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "directory_name": "com_worktwins_languages",
                "children": [
                    {
                        "file_name": "Language.py"
                    },
                    {
                        "file_name": "languages_improved.json"
                    }
                ]
            },
            {
                "directory_name": ".git",
                "children": [
                    {
                        "directory_name": "logs",
                        "children": [
                            {
                                "directory_name": "refs",
                                "children": [
                                    {
                                        "directory_name": "remotes",
                                        "children": [
                                            {
                                                "directory_name": "origin",
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "directory_name": "heads",
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "directory_name": "hooks",
                        "children": []
                    },
                    {
                        "directory_name": "objects",
                        "children": [
                            {
                                "directory_name": "21",
                                "children": []
                            },
                            {
                                "directory_name": "be",
                                "children": []
                            },
                            {
                                "directory_name": "2e",
                                "children": []
                            },
                            {
                                "directory_name": "87",
                                "children": []
                            },
                            {
                                "directory_name": "ac",
                                "children": []
                            },
                            {
                                "directory_name": "15",
                                "children": []
                            },
                            {
                                "directory_name": "3b",
                                "children": []
                            },
                            {
                                "directory_name": "93",
                                "children": []
                            },
                            {
                                "directory_name": "fe",
                                "children": []
                            },
                            {
                                "directory_name": "a9",
                                "children": []
                            },
                            {
                                "directory_name": "31",
                                "children": []
                            },
                            {
                                "directory_name": "12",
                                "children": []
                            },
                            {
                                "directory_name": "fc",
                                "children": []
                            },
                            {
                                "directory_name": "9b",
                                "children": []
                            },
                            {
                                "directory_name": "48",
                                "children": []
                            },
                            {
                                "directory_name": "3c",
                                "children": []
                            },
                            {
                                "directory_name": "5e",
                                "children": []
                            },
                            {
                                "directory_name": "3e",
                                "children": []
                            },
                            {
                                "directory_name": "91",
                                "children": []
                            },
                            {
                                "directory_name": "16",
                                "children": []
                            },
                            {
                                "directory_name": "13",
                                "children": []
                            },
                            {
                                "directory_name": "b5",
                                "children": []
                            },
                            {
                                "directory_name": "b8",
                                "children": []
                            },
                            {
                                "directory_name": "cd",
                                "children": []
                            },
                            {
                                "directory_name": "a0",
                                "children": []
                            },
                            {
                                "directory_name": "fb",
                                "children": []
                            },
                            {
                                "directory_name": "9f",
                                "children": []
                            },
                            {
                                "directory_name": "d9",
                                "children": []
                            },
                            {
                                "directory_name": "0c",
                                "children": []
                            },
                            {
                                "directory_name": "0b",
                                "children": []
                            },
                            {
                                "directory_name": "41",
                                "children": []
                            },
                            {
                                "directory_name": "b1",
                                "children": []
                            },
                            {
                                "directory_name": "64",
                                "children": []
                            },
                            {
                                "directory_name": "f8",
                                "children": []
                            },
                            {
                                "directory_name": "7d",
                                "children": []
                            },
                            {
                                "directory_name": "d6",
                                "children": []
                            },
                            {
                                "directory_name": "72",
                                "children": []
                            },
                            {
                                "directory_name": "08",
                                "children": []
                            },
                            {
                                "directory_name": "73",
                                "children": []
                            },
                            {
                                "directory_name": "e4",
                                "children": []
                            },
                            {
                                "directory_name": "c9",
                                "children": []
                            },
                            {
                                "directory_name": "0f",
                                "children": []
                            },
                            {
                                "directory_name": "0a",
                                "children": []
                            },
                            {
                                "directory_name": "85",
                                "children": []
                            },
                            {
                                "directory_name": "68",
                                "children": []
                            },
                            {
                                "directory_name": "pack",
                                "children": []
                            },
                            {
                                "directory_name": "e9",
                                "children": []
                            },
                            {
                                "directory_name": "42",
                                "children": []
                            },
                            {
                                "directory_name": "30",
                                "children": []
                            },
                            {
                                "directory_name": "d0",
                                "children": []
                            },
                            {
                                "directory_name": "94",
                                "children": []
                            },
                            {
                                "directory_name": "49",
                                "children": []
                            },
                            {
                                "directory_name": "9c",
                                "children": []
                            },
                            {
                                "directory_name": "44",
                                "children": []
                            },
                            {
                                "directory_name": "c4",
                                "children": []
                            },
                            {
                                "directory_name": "5c",
                                "children": []
                            },
                            {
                                "directory_name": "4b",
                                "children": []
                            },
                            {
                                "directory_name": "bc",
                                "children": []
                            },
                            {
                                "directory_name": "e6",
                                "children": []
                            },
                            {
                                "directory_name": "f2",
                                "children": []
                            },
                            {
                                "directory_name": "a6",
                                "children": []
                            },
                            {
                                "directory_name": "6d",
                                "children": []
                            },
                            {
                                "directory_name": "info",
                                "children": []
                            }
                        ]
                    },
                    {
                        "directory_name": "refs",
                        "children": [
                            {
                                "directory_name": "remotes",
                                "children": [
                                    {
                                        "directory_name": "origin",
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "directory_name": "heads",
                                "children": []
                            },
                            {
                                "directory_name": "tags",
                                "children": []
                            }
                        ]
                    },
                    {
                        "directory_name": "branches",
                        "children": []
                    },
                    {
                        "directory_name": "info",
                        "children": []
                    }
                ]
            },
            {
                "directory_name": ".pytest_cache",
                "children": [
                    {
                        "file_name": "README.md"
                    },
                    {
                        "file_name": ".gitignore"
                    },
                    {
                        "directory_name": "v",
                        "children": [
                            {
                                "directory_name": "cache",
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "directory_name": "com_worktwins_data_source",
                "children": [
                    {
                        "file_name": "PDFBook.py"
                    },
                    {
                        "file_name": "HTMLPage.py"
                    }
                ]
            },
            {
                "directory_name": ".vscode",
                "children": [
                    {
                        "file_name": "settings.json"
                    }
                ]
            },
            {
                "directory_name": "com_worktwins_data",
                "children": [
                    {
                        "file_name": "languages.json"
                    },
                    {
                        "file_name": "yml_to_json.py"
                    },
                    {
                        "file_name": "languages.yml"
                    },
                    {
                        "directory_name": "books_html",
                        "children": []
                    }
                ]
            },
            {
                "directory_name": "com_worktwins_pipe",
                "children": [
                    {
                        "file_name": "SentenceFromParagraphPipe.py"
                    },
                    {
                        "file_name": "SourceCodeExtractorPipe.py"
                    },
                    {
                        "file_name": "WordFrequenciesPipe.py"
                    },
                    {
                        "file_name": "SemanticTreePipe.py"
                    },
                    {
                        "file_name": "SemanticNormalizationPipe.py"
                    },
                    {
                        "file_name": "Pipe.py"
                    },
                    {
                        "file_name": "ParagraphsPipe.py"
                    }
                ]
            }
        ]
    },
    "project_sources": [
        {
            "file": {
                "File": "pdf_to_knowledge_hooks_llama.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/pdf_to_knowledge_hooks_llama.py",
                "Relative Path": "pdf_to_knowledge_hooks_llama.py",
                "Size": 5397,
                "Last Modified": "2024-11-25 15:40:35",
                "Lines": 145,
                "Source_Code": "import fitz  # PyMuPDF\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\nimport json\nimport os\n\n# Paths\nPDF_PATH = \"com_worktwins_data/books_pdf/Scott Chacon - Pro Git.pdf\"\nEXTRACTED_TEXT_PATH = \"git1.txt\"\nKNOWLEDGE_HOOKS_OUTPUT_PATH = \"knowledgehooks.json\"\nRAW_OUTPUT_PATH = \"raw_outputs.json\"\nLLAMA_MODEL_PATH = \"/home/golden/.llama/checkpoints/Llama3.2-3B-Instruct-HF\"\nTEMP_PROGRESS_FILE = \"progress.json\"  # Temporary file to save progress\nCHUNK_SIZE = 1000  # Characters per chunk to feed into the model\n\n\ndef extract_text_from_pdf(pdf_path, output_path):\n    \"\"\"\n    Extracts text from a PDF and saves it to a text file.\n    \"\"\"\n    with fitz.open(pdf_path) as pdf:\n        text_content = []\n        for page_num in range(pdf.page_count):\n            page = pdf[page_num]\n            text = page.get_text(\"text\")\n            text_content.append(text)\n            print(f\"Extracted text from page {page_num + 1}/{pdf.page_count}\")\n\n    with open(output_path, \"w\", encoding=\"utf-8\") as output_file:\n        output_file.write(\"\\n\\n\".join(text_content))\n\n    print(f\"Text extracted and saved to {output_path}\")\n    return \"\\n\\n\".join(text_content)\n\n\ndef generate_knowledge_hooks(\n    text, model_path, output_path, raw_output_path, temp_progress_file\n):\n    \"\"\"\n    Generate knowledge hooks from the provided text using a language model.\n    \"\"\"\n    # Load tokenizer and model\n    tokenizer = AutoTokenizer.from_pretrained(model_path)\n    model = AutoModelForCausalLM.from_pretrained(model_path)\n\n    # Split the text into manageable chunks\n    def split_text_into_chunks(text, max_chunk_size=512):\n        \"\"\"\n        Split text into chunks of manageable size for the model.\n        \"\"\"\n        words = text.split()\n        chunks = []\n        current_chunk = []\n        current_length = 0\n\n        for word in words:\n            word_length = len(word) + 1  # Account for space\n            if current_length + word_length <= max_chunk_size:\n                current_chunk.append(word)\n                current_length += word_length\n            else:\n                chunks.append(\" \".join(current_chunk))\n                current_chunk = [word]\n                current_length = word_length\n\n        if current_chunk:\n            chunks.append(\" \".join(current_chunk))\n        return chunks\n\n    chunks = split_text_into_chunks(text)\n    knowledge_hooks = []\n    raw_outputs = []\n\n    # Resume progress if a temporary file exists\n    if os.path.exists(temp_progress_file):\n        with open(temp_progress_file, \"r\") as f:\n            progress_data = json.load(f)\n            start_chunk = progress_data.get(\"last_processed_chunk\", 0)\n            print(f\"Resuming from chunk {start_chunk + 1}/{len(chunks)}...\")\n    else:\n        start_chunk = 0\n        print(\"No previous progress found. Starting fresh.\")\n\n    # Process each chunk\n    for i, chunk in enumerate(chunks[start_chunk:], start=start_chunk):\n        print(f\"Processing chunk {i + 1}/{len(chunks)}...\")\n        prompt = (\n            \"Generate a JSON array of knowledge hooks from the following text. Each knowledge hook should include:\\n\"\n            \"1. 'description': A concise summary of the main idea.\\n\"\n            \"2. 'keywords': Relevant keywords.\\n\"\n            \"Format the output as a JSON array.\\n\\n\"\n            f\"Text:\\n{chunk}\"\n        )\n\n        inputs = tokenizer(prompt, return_tensors=\"pt\", truncation=True)\n        outputs = model.generate(**inputs, max_length=512, temperature=0.7, do_sample=True)\n\n        generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)\n        raw_outputs.append(generated_text)\n\n        try:\n            hooks = json.loads(generated_text)\n            if isinstance(hooks, list):\n                knowledge_hooks.extend(hooks)\n            else:\n                print(f\"Chunk {i + 1} did not generate a valid JSON array. Skipping...\")\n        except json.JSONDecodeError:\n            print(f\"Chunk {i + 1} generated invalid JSON. Skipping...\")\n\n        # Save progress to the temporary file\n        with open(temp_progress_file, \"w\") as f:\n            json.dump({\"last_processed_chunk\": i}, f)\n\n    # Save final outputs and remove the temporary progress file\n    with open(output_path, \"w\") as f:\n        json.dump(knowledge_hooks, f, indent=4)\n\n    with open(raw_output_path, \"w\") as f:\n        json.dump(raw_outputs, f, indent=4)\n\n    print(f\"Knowledge hooks saved to {output_path}\")\n    print(f\"Raw model outputs saved to {raw_output_path}\")\n\n    if os.path.exists(temp_progress_file):\n        os.remove(temp_progress_file)  # Clean up after completion\n        print(f\"Temporary progress file {temp_progress_file} removed.\")\n\n\nif __name__ == \"__main__\":\n    # Step 1: Extract text or load existing text file\n    if not os.path.exists(EXTRACTED_TEXT_PATH):\n        print(f\"File {EXTRACTED_TEXT_PATH} not found. Extracting text from the PDF...\")\n        extracted_text = extract_text_from_pdf(PDF_PATH, EXTRACTED_TEXT_PATH)\n    else:\n        print(f\"Found existing {EXTRACTED_TEXT_PATH}. Skipping text extraction.\")\n        with open(EXTRACTED_TEXT_PATH, \"r\", encoding=\"utf-8\") as f:\n            extracted_text = f.read()\n\n    # Step 2: Generate knowledge hooks from the extracted text\n    generate_knowledge_hooks(\n        extracted_text,\n        LLAMA_MODEL_PATH,\n        KNOWLEDGE_HOOKS_OUTPUT_PATH,\n        RAW_OUTPUT_PATH,\n        TEMP_PROGRESS_FILE,\n    )\n"
            }
        },
        {
            "file": {
                "File": "find_language.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/find_language.py",
                "Relative Path": "find_language.py",
                "Size": 1077,
                "Last Modified": "2024-11-04 14:50:06",
                "Lines": 30,
                "Source_Code": "from com_worktwins_languages.Language import Language\n\n\n# Usage example:\nif __name__ == \"__main__\":\n    language_file = 'com_worktwins_data/languages.yml'  # Path to your YAML file\n    lang = Language(language_file)\n\n    # Find language by name\n    language_name = 'C++'\n    attributes = lang.get_language_attributes(language_name)\n    if attributes:\n        print(f\"Attributes for {language_name}:\")\n        for key, value in attributes.items():\n            print(f\"{key}: {value}\")\n\n    # Find languages by file extension\n    extension = '.py'\n    languages_by_extension = lang.find_by_extension(extension)\n    print(f\"Languages with extension '{extension}': {languages_by_extension}\")\n\n    # Find languages by alias\n    alias = 'python3'\n    languages_by_alias = lang.find_by_alias(alias)\n    print(f\"Languages with alias '{alias}': {languages_by_alias}\")\n\n    # Find languages by interpreter\n    interpreter = 'python3'\n    languages_by_interpreter = lang.find_by_interpreter(interpreter)\n    print(f\"Languages with interpreter '{interpreter}': {languages_by_interpreter}\")"
            }
        },
        {
            "file": {
                "File": "tools_process_pdfs.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/tools_process_pdfs.py",
                "Relative Path": "tools_process_pdfs.py",
                "Size": 9123,
                "Last Modified": "2024-11-25 16:29:26",
                "Lines": 224,
                "Source_Code": "import os\nimport pandas as pd\nfrom collections import defaultdict\nfrom hashlib import sha256\nfrom wordfreq import word_frequency\nfrom alive_progress import alive_bar\nfrom com_worktwins_data_source.PDFBook import PDFBook\nimport spacy\nimport unicodedata\nimport json\n\n# Constants\nBOOKS_DIR = \"com_worktwins_data/books_pdf\"  # Directory containing the PDFs\nMIN_BOOK_FREQUENCY = 10  # Minimum frequency in the book for inclusion\nENGLISH_TOP_PERCENTILE = 0.9  # Top 10% of English frequency\nBOOK_TOP_PERCENTILE = 0.9  # Top 10% of book frequency\n\n# Load spaCy model\nnlp = spacy.load(\"en_core_web_sm\")\n\n\ndef save_to_txt(data, output_path):\n    \"\"\"\n    Save raw text data to a .txt file.\n    \"\"\"\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(data)\n    print(f\"Saved TXT to {output_path}\")\n\n\ndef save_to_json(data, output_path):\n    \"\"\"\n    Save data to a JSON file.\n    \"\"\"\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f, indent=4)\n    print(f\"Saved JSON to {output_path}\")\n\n\ndef generate_content_hash(sentence, book_freq_df, english_freq_df):\n    \"\"\"\n    Generate a hash based on sorted words by their frequency in the book and English language.\n    \"\"\"\n    words = [word.lower() for word in sentence.split() if word.isalnum()]\n    frequencies = [(word, book_freq_df.get(word, float('inf')), english_freq_df.get(word, float('inf')))\n                   for word in words]\n    sorted_words = sorted(frequencies, key=lambda x: (x[1], x[2]))\n    sorted_word_list = [word for word, _, _ in sorted_words]\n    joined_words = \" \".join(sorted_word_list)\n    return sha256(joined_words.encode()).hexdigest()[:8]\n\n\ndef clean_text(text):\n    \"\"\"\n    Clean the text by normalizing Unicode characters and removing unwanted symbols.\n    \"\"\"\n    text = unicodedata.normalize(\"NFKC\", text)\n    words = text.split()\n    words = [word for word in words if word.isalnum() and not word.isdigit()]\n    return \" \".join(words)\n\n\ndef extract_keywords(sentence, book_freq_df, english_freq_df):\n    \"\"\"\n    Extract the most meaningful keywords for a sentence.\n    \"\"\"\n    words = [word.lower() for word in sentence.split() if word.isalnum() and len(word) >= 3]\n    word_data = [\n        {\n            \"word\": word,\n            \"book_frequency\": book_freq_df.get(word, 0),\n            \"english_frequency\": english_freq_df.get(word, float(\"inf\")),\n        }\n        for word in words\n    ]\n    sorted_words = sorted(word_data, key=lambda x: (-x[\"book_frequency\"], x[\"english_frequency\"]))\n    seen_words = set()\n    top_keywords = []\n    for item in sorted_words:\n        if item[\"word\"] not in seen_words:\n            top_keywords.append(item[\"word\"])\n            seen_words.add(item[\"word\"])\n        if len(top_keywords) == 10:\n            break\n    return top_keywords\n\n\ndef generate_frequencies(book_text):\n    \"\"\"\n    Generate word frequencies and related data from the book text.\n    \"\"\"\n    paragraphs = [para.strip() for para in book_text.split(\"\\n\\n\") if para.strip()]\n    paragraph_ids = [sha256(para.encode()).hexdigest()[:8] for para in paragraphs]\n    paragraphs_df = pd.DataFrame({\"id\": paragraph_ids, \"text\": paragraphs})\n\n    word_counts = defaultdict(int)\n    word_paragraph_map = defaultdict(set)\n\n    with alive_bar(len(paragraphs), title=\"Processing paragraphs\") as bar:\n        for pid, para in zip(paragraph_ids, paragraphs):\n            words = [word.lower() for word in para.split() if word.isalnum()]\n            for word in words:\n                word_counts[word] += 1\n                word_paragraph_map[word].add(pid)\n            bar()\n\n    book_freq_df = pd.DataFrame(\n        [(word, count, list(word_paragraph_map[word])) for word, count in word_counts.items()],\n        columns=[\"word\", \"book_frequency\", \"paragraphs\"],\n    )\n    book_freq_df[\"english_frequency\"] = book_freq_df[\"word\"].apply(lambda word: word_frequency(word, \"en\"))\n\n    english_top_threshold = book_freq_df[\"english_frequency\"].quantile(ENGLISH_TOP_PERCENTILE)\n    book_top_threshold = book_freq_df[\"book_frequency\"].quantile(BOOK_TOP_PERCENTILE)\n\n    excluded_connectors = book_freq_df[\n        (book_freq_df[\"english_frequency\"] >= english_top_threshold) &\n        (book_freq_df[\"book_frequency\"] >= book_top_threshold)\n    ]\n    excluded_non_english = book_freq_df[\n        (book_freq_df[\"english_frequency\"] == 0) & (book_freq_df[\"book_frequency\"] < MIN_BOOK_FREQUENCY)\n    ]\n    excluded_words_df = pd.concat([excluded_connectors, excluded_non_english]).drop_duplicates(subset=[\"word\"])\n    book_freq_df = book_freq_df[~book_freq_df[\"word\"].isin(excluded_words_df[\"word\"])]\n    book_freq_df = book_freq_df.sort_values(by=\"book_frequency\", ascending=False)\n    english_freq_df = book_freq_df[[\"word\", \"english_frequency\"]].sort_values(by=\"english_frequency\", ascending=False)\n\n    return paragraphs_df, book_freq_df, excluded_words_df, english_freq_df\n\n\ndef process_paragraphs(paragraphs_df, book_freq_df, english_freq_df):\n    \"\"\"\n    Process paragraphs and split them into sentences, generating content-based hashes and paragraph-level keywords.\n    \"\"\"\n    book_freq_dict = book_freq_df.set_index(\"word\")[\"book_frequency\"].to_dict()\n    english_freq_dict = english_freq_df.set_index(\"word\")[\"english_frequency\"].to_dict()\n\n    enriched_paragraphs = []\n    with alive_bar(len(paragraphs_df), title=\"Processing sentences\") as bar:\n        for _, paragraph in paragraphs_df.iterrows():\n            paragraph_id = paragraph[\"id\"]\n            paragraph_text = clean_text(paragraph[\"text\"])\n\n            doc = nlp(paragraph_text)\n            sentences = []\n            paragraph_keywords = set()\n\n            for sent in doc.sents:\n                sentence_text = clean_text(sent.text)\n                keywords = extract_keywords(sentence_text, book_freq_dict, english_freq_dict)\n                sentence_hash = f\"{paragraph_id}_{generate_content_hash(sentence_text, book_freq_dict, english_freq_dict)}\"\n\n                sentences.append({\n                    \"id\": sentence_hash,\n                    \"type\": \"sentence\",\n                    \"text\": sentence_text,\n                    \"keywords\": keywords,\n                    \"weight\": 0.0\n                })\n                paragraph_keywords.update(keywords)\n\n            sorted_paragraph_keywords = sorted(\n                paragraph_keywords,\n                key=lambda word: (-book_freq_dict.get(word, 0), english_freq_dict.get(word, float('inf')))\n            )\n\n            enriched_paragraphs.append({\n                \"id\": paragraph_id,\n                \"type\": \"paragraph\",\n                \"text\": paragraph_text,\n                \"keywords\": sorted_paragraph_keywords,\n                \"weight\": 0.0,\n                \"sentences\": sentences\n            })\n            bar()\n\n    return enriched_paragraphs\n\n\ndef process_all_pdfs(directory):\n    \"\"\"\n    Process all PDFs in a given directory.\n    \"\"\"\n    for filename in os.listdir(directory):\n        if filename.endswith(\".pdf\"):\n            pdf_path = os.path.join(directory, filename)\n            pdf_name = os.path.splitext(filename)[0]\n            output_dir = os.path.join(directory, pdf_name)\n            os.makedirs(output_dir, exist_ok=True)\n\n            book = PDFBook(pdf_path)\n\n            # Save raw text\n            raw_text = book.extract_raw()\n            save_to_txt(raw_text, os.path.join(output_dir, f\"{pdf_name}.txt\"))\n\n            # Extract and save code blocks\n            print(f\"Extracting code blocks for {pdf_name}...\")\n            code_blocks = book.extract_code_blocks()\n            save_to_json(code_blocks, os.path.join(output_dir, f\"{pdf_name}_code_blocks.json\"))\n            book.save_code_blocks_as_python_script(code_blocks, os.path.join(output_dir, f\"{pdf_name}_code_blocks.py\"))\n\n            # Normalize text and generate frequencies\n            normalized_text = book.extract_normalized()\n            print(f\"Generating frequencies and paragraphs for {pdf_name}...\")\n            paragraphs_df, book_freq_df, excluded_words_df, english_freq_df = generate_frequencies(normalized_text)\n\n            # Save results to JSON\n            save_to_json(paragraphs_df.to_dict(orient=\"records\"), os.path.join(output_dir, f\"{pdf_name}_paragraphs.json\"))\n            save_to_json(book_freq_df[[\"word\", \"book_frequency\", \"paragraphs\"]].to_dict(orient=\"records\"),\n                         os.path.join(output_dir, f\"{pdf_name}_frequencies.json\"))\n            save_to_json(english_freq_df.to_dict(orient=\"records\"),\n                         os.path.join(output_dir, f\"{pdf_name}_english_frequencies.json\"))\n            save_to_json(excluded_words_df[[\"word\", \"paragraphs\"]].to_dict(orient=\"records\"),\n                         os.path.join(output_dir, f\"{pdf_name}_excluded_words.json\"))\n\n            # Process paragraphs into sentences\n            print(f\"Processing sentences for {pdf_name}...\")\n            enriched_paragraphs = process_paragraphs(paragraphs_df, book_freq_df, english_freq_df)\n            save_to_json(enriched_paragraphs, os.path.join(output_dir, f\"{pdf_name}_enriched_paragraphs.json\"))\n\n\nif __name__ == \"__main__\":\n    process_all_pdfs(BOOKS_DIR)\n"
            }
        },
        {
            "file": {
                "File": "code_snippets.json",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/code_snippets.json",
                "Relative Path": "code_snippets.json",
                "Size": 933853,
                "Last Modified": "2024-11-28 15:38:39",
                "Lines": 18643,
                "Source_Code": "[\n    {\n        \"id\": \"ef9a84c3c88c77f993ffa85c60e5b599\",\n        \"type\": \"source_code\",\n        \"text\": \"teochew\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8afa3228481a57b925bda498590a3c5e\",\n        \"type\": \"source_code\",\n        \"text\": \"p. cm.\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"804ccdb59b2c057bb7bfb0cfe310fa2c\",\n        \"type\": \"source_code\",\n        \"text\": \"1. Java (Computer program language) I. Title.\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"732e2c635fcf48af05cf658ec5bea53b\",\n        \"type\": \"source_code\",\n        \"text\": \"2005036339\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d41d8cd98f00b204e9800998ecf8427e\",\n        \"type\": \"source_code\",\n        \"text\": \"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bde8d66e31670b1fcba5d1bfe0832e72\",\n        \"type\": \"source_code\",\n        \"text\": \"to Objects\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6ff05d73f9a15ee99b798cb4b11f0e6b\",\n        \"type\": \"source_code\",\n        \"text\": \"with polymorphism\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2aa729611ec523996e2357c57f3f0a0f\",\n        \"type\": \"source_code\",\n        \"text\": \"all the objects\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"82ea072d8b9656594f31c334b177b68d\",\n        \"type\": \"source_code\",\n        \"text\": \"destroy an object\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb3e1351639f9c1482bdc578db5f0f8b\",\n        \"type\": \"source_code\",\n        \"text\": \"int x = 96; // Illegal\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"386c61db676dc14cf5817a44ff115fb6\",\n        \"type\": \"source_code\",\n        \"text\": \"and return values\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d59952dea0ce90b0f1d0b4fecf532c7c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Hello, it\\u2019s: \\\"); \\n    System.out.println(new Date());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e013d5a7acb019bb7db4f5b0079f144d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.getProperties().list(System.out); \\n    System.out.println(System.getProperty(\\\"user.name\\\")); \\n    System.out.println( \\n    System.getProperty(\\\"java.library.path\\\"));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d59952dea0ce90b0f1d0b4fecf532c7c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Hello, it\\u2019s: \\\"); \\n    System.out.println(new Date());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8fe5a459b8cf7a79462d079c3b9164ba\",\n        \"type\": \"source_code\",\n        \"text\": \"// ...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8fe5a459b8cf7a79462d079c3b9164ba\",\n        \"type\": \"source_code\",\n        \"text\": \"// ...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b47fec87bd41dc26ade7dfd5212cb626\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Hello, it\\u2019s: \\\"); \\n    print(new Date());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6275b948facd1f6596d30e7573029c6c\",\n        \"type\": \"source_code\",\n        \"text\": \"int x = 1, y = 2, z = 3; \\n    int a = x + y - 2/2 + z;           // (1) \\n    int b = x + (y - 2)/(2 + z);       // (2) \\n    System.out.println(\\\"a = \\\" + a + \\\" b = \\\" + b);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6bf738c33ab9a37dd8c62dd84469ab97\",\n        \"type\": \"source_code\",\n        \"text\": \"Tank t1 = new Tank(); \\n    Tank t2 = new Tank(); \\n    t1.level = 9; \\n    t2.level = 47; \\n    print(\\\"1: t1.level: \\\" + t1.level + \\n          \\\", t2.level: \\\" + t2.level); \\n    t1 = t2; \\n    print(\\\"2: t1.level: \\\" + t1.level + \\n          \\\", t2.level: \\\" + t2.level); \\n    t1.level = 27; \\n    print(\\\"3: t1.level: \\\" + t1.level + \\n          \\\", t2.level: \\\" + t2.level);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c4407f85361330f201b3d8450e23f3a6\",\n        \"type\": \"source_code\",\n        \"text\": \"y.c = \\u2018z\\u2019;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7588a7bb643389b2b1f1969e2ea461d7\",\n        \"type\": \"source_code\",\n        \"text\": \"Letter x = new Letter(); \\n    x.c = \\u2018a\\u2019; \\n    print(\\\"1: x.c: \\\" + x.c); \\n    f(x); \\n    print(\\\"2: x.c: \\\" + x.c);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"261d22ba78a746944c88ce878d472cf7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Create a seeded random number generator: \\n    Random rand = new Random(47); \\n    int i, j, k; \\n    // Choose value from 1 to 100: \\n    j = rand.nextInt(100) + 1; \\n    print(\\\"j : \\\" + j); \\n    k = rand.nextInt(100) + 1; \\n    print(\\\"k : \\\" + k); \\n    i = j + k; \\n    print(\\\"j + k : \\\" + i); \\n    i = j - k; \\n    print(\\\"j - k : \\\" + i); \\n    i = k / j; \\n    print(\\\"k / j : \\\" + i); \\n    i = k * j; \\n    print(\\\"k * j : \\\" + i); \\n    i = k % j; \\n    print(\\\"k % j : \\\" + i); \\n    j %= k; \\n    print(\\\"j %= k : \\\" + j); \\n    // Floating-point number tests: \\n    float u, v, w; // Applies to doubles, too \\n    v = rand.nextFloat(); \\n    print(\\\"v : \\\" + v); \\n    w = rand.nextFloat(); \\n    print(\\\"w : \\\" + w); \\n    u = v + w; \\n    print(\\\"v + w : \\\" + u); \\n    u = v - w; \\n    print(\\\"v - w : \\\" + u); \\n    u = v * w; \\n    print(\\\"v * w : \\\" + u); \\n    u = v / w; \\n    print(\\\"v / w : \\\" + u); \\n    // The following also works for char, \\n    // byte, short, int, long, and double:\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74d5588af2bba244f55e13e74b76cdeb\",\n        \"type\": \"source_code\",\n        \"text\": \"u += v; \\n    print(\\\"u += v : \\\" + u); \\n    u -= v; \\n    print(\\\"u -= v : \\\" + u); \\n    u *= v; \\n    print(\\\"u *= v : \\\" + u); \\n    u /= v; \\n    print(\\\"u /= v : \\\" + u);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24cb9c2d6c204a7acc61fb54041519a4\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = 1; \\n    print(\\\"i : \\\" + i); \\n    print(\\\"++i : \\\" + ++i); // Pre-increment \\n    print(\\\"i++ : \\\" + i++); // Post-increment \\n    print(\\\"i : \\\" + i); \\n    print(\\\"--i : \\\" + --i); // Pre-decrement \\n    print(\\\"i-- : \\\" + i--); // Post-decrement \\n    print(\\\"i : \\\" + i);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb0ef2638f83f276a5f8580235b08739\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer n1 = new Integer(47); \\n    Integer n2 = new Integer(47); \\n    System.out.println(n1 == n2); \\n    System.out.println(n1 != n2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa8e2e125f14f5644724e795de5c8901\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer n1 = new Integer(47); \\n    Integer n2 = new Integer(47); \\n    System.out.println(n1.equals(n2));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a76b07179ec459949a068623dd6ed743\",\n        \"type\": \"source_code\",\n        \"text\": \"Value v1 = new Value(); \\n    Value v2 = new Value(); \\n    v1.i = v2.i = 100; \\n    System.out.println(v1.equals(v2));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b97e85f9669b87bf5bc805b00874f1de\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    int i = rand.nextInt(100);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1ad09f01e9340097c782dae9cabbcb7\",\n        \"type\": \"source_code\",\n        \"text\": \"int j = rand.nextInt(100); \\n    print(\\\"i = \\\" + i); \\n    print(\\\"j = \\\" + j); \\n    print(\\\"i > j is \\\" + (i > j)); \\n    print(\\\"i < j is \\\" + (i < j)); \\n    print(\\\"i >= j is \\\" + (i >= j)); \\n    print(\\\"i <= j is \\\" + (i <= j)); \\n    print(\\\"i == j is \\\" + (i == j)); \\n    print(\\\"i != j is \\\" + (i != j)); \\n    // Treating an int as a boolean is not legal Java:\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f41b18a8790dbdc41cc64887e3fe40e\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"(i < 10) && (j < 10) is \\\" \\n       + ((i < 10) && (j < 10)) ); \\n    print(\\\"(i < 10) || (j < 10) is \\\" \\n       + ((i < 10) || (j < 10)) );\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc53aeaee754ee3cde678d36c4277d2d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"test1(\\\" + val + \\\")\\\"); \\n    print(\\\"result: \\\" + (val < 1)); \\n    return val < 1;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d4a5a4cecbb2679dbd5b80b502a0082\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"test2(\\\" + val + \\\")\\\"); \\n    print(\\\"result: \\\" + (val < 2)); \\n    return val < 2;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4a8b282f3ca20a4e66bfbe3ce1c07dbf\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"test3(\\\" + val + \\\")\\\"); \\n    print(\\\"result: \\\" + (val < 3)); \\n    return val < 3;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6959cccfd5362d6c5182f1fd9f3f59c9\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean b = test1(0) && test2(2) && test3(2); \\n    print(\\\"expression is \\\" + b);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"037d963c68964792443de9e794c523b7\",\n        \"type\": \"source_code\",\n        \"text\": \"int i1 = 0x2f; // Hexadecimal (lowercase) \\n    print(\\\"i1: \\\" + Integer.toBinaryString(i1)); \\n    int i2 = 0X2F; // Hexadecimal (uppercase) \\n    print(\\\"i2: \\\" + Integer.toBinaryString(i2)); \\n    int i3 = 0177; // Octal (leading zero) \\n    print(\\\"i3: \\\" + Integer.toBinaryString(i3)); \\n    char c = 0xffff; // max char hex value\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6aa45004fe21e3d7238763ec042008a8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"c: \\\" + Integer.toBinaryString(c)); \\n    byte b = 0x7f; // max byte hex value \\n    print(\\\"b: \\\" + Integer.toBinaryString(b)); \\n    short s = 0x7fff; // max short hex value \\n    print(\\\"s: \\\" + Integer.toBinaryString(s)); \\n    long n1 = 200L; // long suffix \\n    long n2 = 200l; // long suffix (but can be confusing) \\n    long n3 = 200; \\n    float f1 = 1; \\n    float f2 = 1F; // float suffix \\n    float f3 = 1f; // float suffix \\n    double d1 = 1d; // double suffix \\n    double d2 = 1D; // double suffix \\n    // (Hex and Octal also work with long)\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ed3a9905d28a3d8220b46b485b7cc93\",\n        \"type\": \"source_code\",\n        \"text\": \"// Uppercase and lowercase \\u2018e\\u2019 are the same: \\n    float expFloat = 1.39e-43f; \\n    expFloat = 1.39E-43f;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b2e2f1ed406cd0b00b20895dec4786b\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(expFloat); \\n    double expDouble = 47e47d; // \\u2018d\\u2019 is optional \\n    double expDouble2 = 47e47; // Automatically double \\n    System.out.println(expDouble);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7c2cf0c39f60776fb1d73594060a3ac9\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = -1; \\n    print(Integer.toBinaryString(i)); \\n    i >>>= 10; \\n    print(Integer.toBinaryString(i)); \\n    long l = -1; \\n    print(Long.toBinaryString(l)); \\n    l >>>= 10; \\n    print(Long.toBinaryString(l)); \\n    short s = -1; \\n    print(Integer.toBinaryString(s)); \\n    s >>>= 10; \\n    print(Integer.toBinaryString(s)); \\n    byte b = -1; \\n    print(Integer.toBinaryString(b)); \\n    b >>>= 10; \\n    print(Integer.toBinaryString(b)); \\n    b = -1; \\n    print(Integer.toBinaryString(b)); \\n    print(Integer.toBinaryString(b>>>10));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ca884d7be3b430e818858a810bc40088\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    int i = rand.nextInt(); \\n    int j = rand.nextInt(); \\n    printBinaryInt(\\\"-1\\\", -1); \\n    printBinaryInt(\\\"+1\\\", +1); \\n    int maxpos = 2147483647; \\n    printBinaryInt(\\\"maxpos\\\", maxpos); \\n    int maxneg = -2147483648; \\n    printBinaryInt(\\\"maxneg\\\", maxneg); \\n    printBinaryInt(\\\"i\\\", i); \\n    printBinaryInt(\\\"~i\\\", ~i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53c78d8d667a9e429fae8a6437270a74\",\n        \"type\": \"source_code\",\n        \"text\": \"printBinaryInt(\\\"-i\\\", -i); \\n    printBinaryInt(\\\"j\\\", j); \\n    printBinaryInt(\\\"i & j\\\", i & j); \\n    printBinaryInt(\\\"i | j\\\", i | j); \\n    printBinaryInt(\\\"i ^ j\\\", i ^ j); \\n    printBinaryInt(\\\"i << 5\\\", i << 5); \\n    printBinaryInt(\\\"i >> 5\\\", i >> 5); \\n    printBinaryInt(\\\"(~i) >> 5\\\", (~i) >> 5); \\n    printBinaryInt(\\\"i >>> 5\\\", i >>> 5); \\n    printBinaryInt(\\\"(~i) >>> 5\\\", (~i) >>> 5);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"23374e2dee112d7877a97cb532aa9ac9\",\n        \"type\": \"source_code\",\n        \"text\": \"long l = rand.nextLong(); \\n    long m = rand.nextLong(); \\n    printBinaryLong(\\\"-1L\\\", -1L); \\n    printBinaryLong(\\\"+1L\\\", +1L); \\n    long ll = 9223372036854775807L; \\n    printBinaryLong(\\\"maxpos\\\", ll); \\n    long lln = -9223372036854775808L; \\n    printBinaryLong(\\\"maxneg\\\", lln); \\n    printBinaryLong(\\\"l\\\", l); \\n    printBinaryLong(\\\"~l\\\", ~l); \\n    printBinaryLong(\\\"-l\\\", -l); \\n    printBinaryLong(\\\"m\\\", m); \\n    printBinaryLong(\\\"l & m\\\", l & m); \\n    printBinaryLong(\\\"l | m\\\", l | m); \\n    printBinaryLong(\\\"l ^ m\\\", l ^ m); \\n    printBinaryLong(\\\"l << 5\\\", l << 5); \\n    printBinaryLong(\\\"l >> 5\\\", l >> 5); \\n    printBinaryLong(\\\"(~l) >> 5\\\", (~l) >> 5); \\n    printBinaryLong(\\\"l >>> 5\\\", l >>> 5); \\n    printBinaryLong(\\\"(~l) >>> 5\\\", (~l) >>> 5);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"438201e22b2c22d1250b84e178e94916\",\n        \"type\": \"source_code\",\n        \"text\": \"print(s + \\\", int: \\\" + i + \\\", binary:\\\\n   \\\" + \\n      Integer.toBinaryString(i));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a303ee665ca27b63a8e934b88c06670\",\n        \"type\": \"source_code\",\n        \"text\": \"print(s + \\\", long: \\\" + l + \\\", binary:\\\\n    \\\" + \\n      Long.toBinaryString(l));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30ea0a94eeb61cc412d9fcc56fa4be61\",\n        \"type\": \"source_code\",\n        \"text\": \"return i < 10 ? i * 100 : i * 10;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35ba5d7835748624131ee5f08e340602\",\n        \"type\": \"source_code\",\n        \"text\": \"if(i < 10) \\n      return i * 100; \\n    else \\n      return i * 10;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bcd0a57e5ba440c865cba102f3406ef9\",\n        \"type\": \"source_code\",\n        \"text\": \"print(ternary(9)); \\n    print(ternary(10)); \\n    print(standardIfElse(9)); \\n    print(standardIfElse(10));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e6b98744ac512b95e81f1134f52238b0\",\n        \"type\": \"source_code\",\n        \"text\": \"int x = 0, y = 1, z = 2; \\n    String s = \\\"x, y, z \\\"; \\n    print(s + x + y + z); \\n    print(x + \\\" \\\" + s); // Converts x to a String\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"deb11650c925d1348380a1b52cdea04e\",\n        \"type\": \"source_code\",\n        \"text\": \"s += \\\"(summed) = \\\"; // Concatenation operator \\n    print(s + (x + y + z)); \\n    print(\\\"\\\" + x); // Shorthand for Integer.toString()\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"380367707aa5a0b8e15f556825b96729\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = 200; \\n    long lng = (long)i; \\n    lng = i; // \\\"Widening,\\\" so cast not really required \\n    long lng2 = (long)200; \\n    lng2 = 200; \\n    // A \\\"narrowing conversion\\\": \\n    i = (int)lng2; // Cast required\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37ea1e89736dd64c326f897f5cd1445e\",\n        \"type\": \"source_code\",\n        \"text\": \"double above = 0.7, below = 0.4; \\n    float fabove = 0.7f, fbelow = 0.4f; \\n    print(\\\"(int)above: \\\" + (int)above); \\n    print(\\\"(int)below: \\\" + (int)below); \\n    print(\\\"(int)fabove: \\\" + (int)fabove);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6e61ac8305152b5fdbbd02b30d6bdadd\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"(int)fbelow: \\\" + (int)fbelow);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ee867cb413e06c379e716d7e5f7cab6\",\n        \"type\": \"source_code\",\n        \"text\": \"double above = 0.7, below = 0.4; \\n    float fabove = 0.7f, fbelow = 0.4f; \\n    print(\\\"Math.round(above): \\\" + Math.round(above)); \\n    print(\\\"Math.round(below): \\\" + Math.round(below)); \\n    print(\\\"Math.round(fabove): \\\" + Math.round(fabove)); \\n    print(\\\"Math.round(fbelow): \\\" + Math.round(fbelow));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7592b86bf97669fb7587540e825d5119\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    //! x = x * y; \\n    //! x = x / y; \\n    //! x = x % y; \\n    //! x = x + y; \\n    //! x = x - y; \\n    //! x++; \\n    //! x--; \\n    //! x = +y; \\n    //! x = -y; \\n    // Relational and logical: \\n    //! f(x > y); \\n    //! f(x >= y); \\n    //! f(x < y); \\n    //! f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    f(!y); \\n    x = x && y; \\n    x = x || y; \\n    // Bitwise operators: \\n    //! x = ~y; \\n    x = x & y; \\n    x = x | y; \\n    x = x ^ y; \\n    //! x = x << 1; \\n    //! x = x >> 1; \\n    //! x = x >>> 1; \\n    // Compound assignment: \\n    //! x += y; \\n    //! x -= y; \\n    //! x *= y; \\n    //! x /= y; \\n    //! x %= y; \\n    //! x <<= 1; \\n    //! x >>= 1; \\n    //! x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting:\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"753e277ace003cff786194b39174444b\",\n        \"type\": \"source_code\",\n        \"text\": \"//! char c = (char)x; \\n    //! byte b = (byte)x; \\n    //! short s = (short)x; \\n    //! int i = (int)x; \\n    //! long l = (long)x; \\n    //! float f = (float)x; \\n    //! double d = (double)x;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"45be1cb7e0977d99ff6e61f8ec095ead\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = (char)(x * y); \\n    x = (char)(x / y); \\n    x = (char)(x % y); \\n    x = (char)(x + y); \\n    x = (char)(x - y); \\n    x++; \\n    x--; \\n    x = (char)+y; \\n    x = (char)-y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    x= (char)~y; \\n    x = (char)(x & y); \\n    x  = (char)(x | y); \\n    x = (char)(x ^ y); \\n    x = (char)(x << 1); \\n    x = (char)(x >> 1); \\n    x = (char)(x >>> 1); \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    x <<= 1; \\n    x >>= 1; \\n    x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    byte b = (byte)x; \\n    short s = (short)x; \\n    int i = (int)x; \\n    long l = (long)x; \\n    float f = (float)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"81d1627333e76eb837a59149455e005f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = (byte)(x* y); \\n    x = (byte)(x / y); \\n    x = (byte)(x % y);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f005eb799919f7bb85e559aaf642cb95\",\n        \"type\": \"source_code\",\n        \"text\": \"x = (byte)(x + y); \\n    x = (byte)(x - y); \\n    x++; \\n    x--; \\n    x = (byte)+ y; \\n    x = (byte)- y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    x = (byte)~y; \\n    x = (byte)(x & y); \\n    x = (byte)(x | y); \\n    x = (byte)(x ^ y); \\n    x = (byte)(x << 1); \\n    x = (byte)(x >> 1); \\n    x = (byte)(x >>> 1); \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    x <<= 1; \\n    x >>= 1; \\n    x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x; \\n    short s = (short)x; \\n    int i = (int)x; \\n    long l = (long)x; \\n    float f = (float)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fc8c1273ec4cb6bcd51aafc31916e5ff\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = (short)(x * y); \\n    x = (short)(x / y); \\n    x = (short)(x % y); \\n    x = (short)(x + y); \\n    x = (short)(x - y); \\n    x++; \\n    x--; \\n    x = (short)+y; \\n    x = (short)-y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d27606e22932cbf3703cfe047ffd8f7\",\n        \"type\": \"source_code\",\n        \"text\": \"//! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    x = (short)~y; \\n    x = (short)(x & y); \\n    x = (short)(x | y); \\n    x = (short)(x ^ y); \\n    x = (short)(x << 1); \\n    x = (short)(x >> 1); \\n    x = (short)(x >>> 1); \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    x <<= 1; \\n    x >>= 1; \\n    x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x; \\n    byte b = (byte)x; \\n    int i = (int)x; \\n    long l = (long)x; \\n    float f = (float)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87dd07a1192537cd8c02f3726151ff8d\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = x * y; \\n    x = x / y; \\n    x = x % y; \\n    x = x + y; \\n    x = x - y; \\n    x++; \\n    x--; \\n    x = +y; \\n    x = -y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    x = ~y; \\n    x = x & y; \\n    x = x | y; \\n    x = x ^ y; \\n    x = x << 1; \\n    x = x >> 1; \\n    x = x >>> 1; \\n    // Compound assignment: \\n    x += y;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"159fa0ad9bebe55c637d45d21aad921a\",\n        \"type\": \"source_code\",\n        \"text\": \"x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    x <<= 1; \\n    x >>= 1; \\n    x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x; \\n    byte b = (byte)x; \\n    short s = (short)x; \\n    long l = (long)x; \\n    float f = (float)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4756a4cc4e661c19477282dce0bc3a1f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = x * y; \\n    x = x / y; \\n    x = x % y; \\n    x = x + y; \\n    x = x - y; \\n    x++; \\n    x--; \\n    x = +y; \\n    x = -y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    x = ~y; \\n    x = x & y; \\n    x = x | y; \\n    x = x ^ y; \\n    x = x << 1; \\n    x = x >> 1; \\n    x = x >>> 1; \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    x <<= 1; \\n    x >>= 1; \\n    x >>>= 1; \\n    x &= y; \\n    x ^= y; \\n    x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eced2b0b2b8260e7fba02f1f76302e5b\",\n        \"type\": \"source_code\",\n        \"text\": \"byte b = (byte)x; \\n    short s = (short)x; \\n    int i = (int)x; \\n    float f = (float)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1b625b14d4700898a656e8d5ea1ee0a7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = x * y; \\n    x = x / y; \\n    x = x % y; \\n    x = x + y; \\n    x = x - y; \\n    x++; \\n    x--; \\n    x = +y; \\n    x = -y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    //! x = ~y; \\n    //! x = x & y; \\n    //! x = x | y; \\n    //! x = x ^ y; \\n    //! x = x << 1; \\n    //! x = x >> 1; \\n    //! x = x >>> 1; \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    //! x <<= 1; \\n    //! x >>= 1; \\n    //! x >>>= 1; \\n    //! x &= y; \\n    //! x ^= y; \\n    //! x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x; \\n    byte b = (byte)x; \\n    short s = (short)x; \\n    int i = (int)x; \\n    long l = (long)x; \\n    double d = (double)x;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a25276eedbfd3aa211f30520cabc06b\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arithmetic operators: \\n    x = x * y; \\n    x = x / y; \\n    x = x % y; \\n    x = x + y; \\n    x = x - y;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b8511a251d863386d007ae16d27af7d\",\n        \"type\": \"source_code\",\n        \"text\": \"x++; \\n    x--; \\n    x = +y; \\n    x = -y; \\n    // Relational and logical: \\n    f(x > y); \\n    f(x >= y); \\n    f(x < y); \\n    f(x <= y); \\n    f(x == y); \\n    f(x != y); \\n    //! f(!x); \\n    //! f(x && y); \\n    //! f(x || y); \\n    // Bitwise operators: \\n    //! x = ~y; \\n    //! x = x & y; \\n    //! x = x | y; \\n    //! x = x ^ y; \\n    //! x = x << 1; \\n    //! x = x >> 1; \\n    //! x = x >>> 1; \\n    // Compound assignment: \\n    x += y; \\n    x -= y; \\n    x *= y; \\n    x /= y; \\n    x %= y; \\n    //! x <<= 1; \\n    //! x >>= 1; \\n    //! x >>>= 1; \\n    //! x &= y; \\n    //! x ^= y; \\n    //! x |= y; \\n    // Casting: \\n    //! boolean bl = (boolean)x; \\n    char c = (char)x; \\n    byte b = (byte)x; \\n    short s = (short)x; \\n    int i = (int)x; \\n    long l = (long)x; \\n    float f = (float)x;\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a54d3d93814b48bd7851e7177f65fdc\",\n        \"type\": \"source_code\",\n        \"text\": \"int big = Integer.MAX_VALUE; \\n    System.out.println(\\\"big = \\\" + big); \\n    int bigger = big * 4; \\n    System.out.println(\\\"bigger = \\\" + bigger);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9e7149585b02a72d4fcd4148fc780927\",\n        \"type\": \"source_code\",\n        \"text\": \"if(testval > target)  \\n      result = +1;  \\n    else if(testval < target)  \\n      result = -1;  \\n    else  \\n      result = 0; // Match\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf5bde277ee165c53819f6bdaa1cc6f1\",\n        \"type\": \"source_code\",\n        \"text\": \"test(10, 5);  \\n    print(result);  \\n    test(5, 10);  \\n    print(result);  \\n    test(5, 5);  \\n    print(result);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21156c49c9cc48ae6438b65cea9131a2\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean result = Math.random() < 0.99; \\n    System.out.print(result + \\\", \\\"); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"617e6bad9b495f952519428f97ac31b4\",\n        \"type\": \"source_code\",\n        \"text\": \"while(condition()) \\n      System.out.println(\\\"Inside \\u2018while\\u2019\\\"); \\n    System.out.println(\\\"Exited \\u2018while\\u2019\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d7bd6beeb238e96d295be2fac88f0941\",\n        \"type\": \"source_code\",\n        \"text\": \"for(char c = 0; c < 128; c++) \\n      if(Character.isLowerCase(c)) \\n        System.out.println(\\\"value: \\\" + (int)c + \\n          \\\" character: \\\" + c);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6fc16adedc8e1e86b4e5198beeb73f3c\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 1, j = i + 10; i < 5; i++, j = i * 2) { \\n      System.out.println(\\\"i = \\\" + i + \\\" j = \\\" + j); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"781226411cdfaa2d8833487199fbce08\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    float f[] = new float[10]; \\n    for(int i = 0; i < 10; i++) \\n      f[i] = rand.nextFloat(); \\n    for(float x : f) \\n      System.out.println(x);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b7165471eac035d59b8395243c2f0f3\",\n        \"type\": \"source_code\",\n        \"text\": \"for(char c : \\\"An African Swallow\\\".toCharArray() ) \\n      System.out.print(c + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecb0ef3ac91a3c3fc655250da5db9fd7\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i : range(10)) // 0..9 \\n      printnb(i + \\\" \\\"); \\n    print(); \\n    for(int i : range(5, 10)) // 5..9 \\n      printnb(i + \\\" \\\"); \\n    print(); \\n    for(int i : range(5, 20, 3)) // 5..20 step 3 \\n      printnb(i + \\\" \\\"); \\n    print();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9f046feb0233aea8002cfd3afffbdfcb\",\n        \"type\": \"source_code\",\n        \"text\": \"if(testval > target) \\n      return +1; \\n    else if(testval < target) \\n      return -1; \\n    else \\n      return 0; // Match\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ead1548c17e29e131df9806f5b3883df\",\n        \"type\": \"source_code\",\n        \"text\": \"print(test(10, 5)); \\n    print(test(5, 10)); \\n    print(test(5, 5));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8e8fe769b5616152c4f9b6113a709c7c\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 100; i++) { \\n      if(i == 74) break; // Out of for loop \\n      if(i % 9 != 0) continue; // Next iteration \\n      System.out.print(i + \\\" \\\"); \\n    } \\n    System.out.println(); \\n    // Using foreach: \\n    for(int i : range(100)) { \\n      if(i == 74) break; // Out of for loop \\n      if(i % 9 != 0) continue; // Next iteration \\n      System.out.print(i + \\\" \\\"); \\n    } \\n    System.out.println(); \\n    int i = 0; \\n    // An \\\"infinite loop\\\": \\n    while(true) { \\n      i++; \\n      int j = i * 27; \\n      if(j == 1269) break; // Out of loop \\n      if(i % 10 != 0) continue; // Top of loop \\n      System.out.print(i + \\\" \\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"469f306c7c9e2faf15a75f452311b9d4\",\n        \"type\": \"source_code\",\n        \"text\": \"//...  \\n    break; // (1)  \\n    //...  \\n    continue; // (2)  \\n    //...  \\n    continue label1; // (3)  \\n    //...  \\n    break label1; // (4)\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eb222386370d6e44ad5535ba6ce9b713\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = 0; \\n    outer: // Can\\u2019t have statements here \\n    for(; true ;) { // infinite loop \\n      inner: // Can\\u2019t have statements here \\n      for(; i < 10; i++) { \\n        print(\\\"i = \\\" + i); \\n        if(i == 2) { \\n          print(\\\"continue\\\"); \\n          continue; \\n        } \\n        if(i == 3) { \\n          print(\\\"break\\\"); \\n          i++; // Otherwise i never \\n               // gets incremented. \\n          break; \\n        } \\n        if(i == 7) { \\n          print(\\\"continue outer\\\"); \\n          i++; // Otherwise i never \\n               // gets incremented. \\n          continue outer; \\n        } \\n        if(i == 8) { \\n          print(\\\"break outer\\\"); \\n          break outer; \\n        } \\n        for(int k = 0; k < 5; k++) { \\n          if(k == 3) { \\n            print(\\\"continue inner\\\"); \\n            continue inner; \\n          } \\n        } \\n      } \\n    } \\n    // Can\\u2019t break or continue to labels here\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcece291d2b2cfacc14cecab829054e5\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = 0; \\n    outer: \\n    while(true) { \\n      print(\\\"Outer while loop\\\"); \\n      while(true) { \\n        i++; \\n        print(\\\"i = \\\" + i); \\n        if(i == 1) { \\n          print(\\\"continue\\\"); \\n          continue; \\n        } \\n        if(i == 3) { \\n          print(\\\"continue outer\\\"); \\n          continue outer; \\n        } \\n        if(i == 5) { \\n          print(\\\"break\\\"); \\n          break; \\n        } \\n        if(i == 7) { \\n          print(\\\"break outer\\\"); \\n          break outer; \\n        } \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"040ed926b590e4f3675fbc36e3f401c6\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    for(int i = 0; i < 100; i++) { \\n      int c = rand.nextInt(26) + \\u2018a\\u2019; \\n      printnb((char)c + \\\", \\\" + c + \\\": \\\"); \\n      switch(c) { \\n        case \\u2018a\\u2019: \\n        case \\u2018e\\u2019: \\n        case \\u2018i\\u2019: \\n        case \\u2018o\\u2019: \\n        case \\u2018u\\u2019: print(\\\"vowel\\\"); \\n                  break; \\n        case \\u2018y\\u2019: \\n        case \\u2018w\\u2019: print(\\\"Sometimes a vowel\\\"); \\n                  break; \\n        default:  print(\\\"consonant\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c85ca5b5f6aabff9cd116bcdf13d434d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"Rock \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d8df46dbf28cf591683eee5805adafcd\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 10; i++) \\n      new Rock();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cf47eedb9a70a3b7fed5855a7b0f01d1\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"Rock \\\" + i + \\\" \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e81bab9e5116dd94fa7005df5c6550c8\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 8; i++) \\n      new Rock2(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c73f7820bbc6ab220c9dc8513480a791\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Planting a seedling\\\"); \\n    height = 0;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8dee36fc32f49b78a8f12a7944b8a2f7\",\n        \"type\": \"source_code\",\n        \"text\": \"height = initialHeight; \\n    print(\\\"Creating new Tree that is \\\" + \\n      height + \\\" feet tall\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e3f528d5f07c39414ca2f27f67641770\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Tree is \\\" + height + \\\" feet tall\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb367042aeb2cf9d80f02b62540fddb9\",\n        \"type\": \"source_code\",\n        \"text\": \"print(s + \\\": Tree is \\\" + height + \\\" feet tall\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdd0566933ad6629bb61fb2d9b105512\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) { \\n      Tree t = new Tree(i); \\n      t.info(); \\n      t.info(\\\"overloaded method\\\"); \\n    } \\n    // Overloaded constructor: \\n    new Tree();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b3f690d69fb970d22502b19fb693521d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"String: \\\" + s + \\\", int: \\\" + i);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5419c0eff5ee1369b03b95436769551a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"int: \\\" + i + \\\", String: \\\" + s);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f018c2bea4840cdc7fc165ec3b53bbf\",\n        \"type\": \"source_code\",\n        \"text\": \"f(\\\"String first\\\", 11); \\n    f(99, \\\"Int first\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d02cbb938c34735789338de3333f612f\",\n        \"type\": \"source_code\",\n        \"text\": \"printnb(\\\"5: \\\"); \\n    f1(5);f2(5);f3(5);f4(5);f5(5);f6(5);f7(5); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cf1d270aa929653ba21fc52e91137b70\",\n        \"type\": \"source_code\",\n        \"text\": \"char x = \\u2018x\\u2019; \\n    printnb(\\\"char: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7097223444ac474d5724dca96c18c3ae\",\n        \"type\": \"source_code\",\n        \"text\": \"byte x = 0; \\n    printnb(\\\"byte: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90aa9099f03a1bd4db85f078edc3f97f\",\n        \"type\": \"source_code\",\n        \"text\": \"short x = 0; \\n    printnb(\\\"short: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"830404056f7d36ac71f29da30da7ea41\",\n        \"type\": \"source_code\",\n        \"text\": \"int x = 0; \\n    printnb(\\\"int: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0917c1c32b403a8fa8202f55b813606d\",\n        \"type\": \"source_code\",\n        \"text\": \"long x = 0; \\n    printnb(\\\"long: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"818823f7b1e0e9544b21644bb62cd6b6\",\n        \"type\": \"source_code\",\n        \"text\": \"float x = 0; \\n    printnb(\\\"float: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"766caf01ca22520bb984ec98bf45fa2a\",\n        \"type\": \"source_code\",\n        \"text\": \"double x = 0; \\n    printnb(\\\"double: \\\"); \\n    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); print();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a9dc5df1594d08560a5715898dd09dd7\",\n        \"type\": \"source_code\",\n        \"text\": \"PrimitiveOverloading p = \\n      new PrimitiveOverloading(); \\n    p.testConstVal(); \\n    p.testChar(); \\n    p.testByte(); \\n    p.testShort(); \\n    p.testInt(); \\n    p.testLong(); \\n    p.testFloat(); \\n    p.testDouble();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"82ea7d4e371e9d594f49cc0bab38f544\",\n        \"type\": \"source_code\",\n        \"text\": \"double x = 0; \\n    print(\\\"double argument:\\\"); \\n    f1(x);f2((float)x);f3((long)x);f4((int)x);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"937e3c80a5f6fea75a50a4b5a9f0d229\",\n        \"type\": \"source_code\",\n        \"text\": \"f5((short)x);f6((byte)x);f7((char)x);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bfc182ddf4edee747602d87ae0f0a4f0\",\n        \"type\": \"source_code\",\n        \"text\": \"Demotion p = new Demotion(); \\n    p.testDouble();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8429087dbacdd36ac212e559dbe4e50e\",\n        \"type\": \"source_code\",\n        \"text\": \"Bird b = new Bird(); // Default!\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8b236482c6e8a64b0e849d63090d4a3\",\n        \"type\": \"source_code\",\n        \"text\": \"//! Bird2 b = new Bird2(); // No default \\n    Bird2 b2 = new Bird2(1); \\n    Bird2 b3 = new Bird2(1.0);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a925130b58f30b5917662b9a925c8655\",\n        \"type\": \"source_code\",\n        \"text\": \"Banana a = new Banana(), \\n           b = new Banana(); \\n    a.peel(1); \\n    b.peel(2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"de136b9734de1d761afecb3309fadef8\",\n        \"type\": \"source_code\",\n        \"text\": \"i++; \\n    return this;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43a3d5381c424bbefff429e92872c5ff\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"i = \\\" + i);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"47c7b94756730489073547b654f51126\",\n        \"type\": \"source_code\",\n        \"text\": \"Leaf x = new Leaf(); \\n    x.increment().increment().increment().print();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0677ab0eaf38128d23d1658d2b1d4e5a\",\n        \"type\": \"source_code\",\n        \"text\": \"Apple peeled = apple.getPeeled(); \\n    System.out.println(\\\"Yummy\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c9cccaf2940e59e91e68c3b33921216\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... remove peel \\n    return apple; // Peeled\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"92485c3bc22b2c937f79327f9bbb4f9d\",\n        \"type\": \"source_code\",\n        \"text\": \"new Person().eat(new Apple());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5c55aeb09e7b6b167a80dc2ecaf52cc3\",\n        \"type\": \"source_code\",\n        \"text\": \"petalCount = petals; \\n    print(\\\"Constructor w/ int arg only, petalCount= \\\" \\n      + petalCount);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab97e64f9e552749a8c209bce83a7167\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Constructor w/ String arg only, s = \\\" + ss); \\n    s = ss;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"703d73a3af9c48a53b12e8043d6bf41f\",\n        \"type\": \"source_code\",\n        \"text\": \"this(petals);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdd264d97c2cda43fc1df2ae7afa232c\",\n        \"type\": \"source_code\",\n        \"text\": \"this(s); // Can\\u2019t call two! \\n    this.s = s; // Another use of \\\"this\\\" \\n    print(\\\"String & int args\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4340faab16c7c39148509c50947c658a\",\n        \"type\": \"source_code\",\n        \"text\": \"this(\\\"hi\\\", 47); \\n    print(\\\"default constructor (no args)\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6403ef10f33732d453f4bdf64f7fbc3f\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"petalCount = \\\" + petalCount + \\\" s = \\\"+ s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b18cab400812370a44c7a93de3ba3ca\",\n        \"type\": \"source_code\",\n        \"text\": \"Flower x = new Flower(); \\n    x.printPetalCount();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d761b8725f9365a39362c1a15c934781\",\n        \"type\": \"source_code\",\n        \"text\": \"checkedOut = checkOut;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43c4e6f8521fb451cff34e2fbe906aac\",\n        \"type\": \"source_code\",\n        \"text\": \"checkedOut = false;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4f34956cc3abb706623367798e1ebde\",\n        \"type\": \"source_code\",\n        \"text\": \"if(checkedOut) \\n      System.out.println(\\\"Error: checked out\\\"); \\n    // Normally, you\\u2019ll also do this: \\n    // super.finalize(); // Call the base-class version\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9f18d93b90ed4e125ad7477e52142df3\",\n        \"type\": \"source_code\",\n        \"text\": \"Book novel = new Book(true); \\n    // Proper cleanup: \\n    novel.checkIn(); \\n    // Drop the reference, forget to clean up: \\n    new Book(true); \\n    // Force garbage collection & finalization: \\n    System.gc();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b09fa867fbd1b028901415e68485b6c5\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Data type      Initial value\\\"); \\n    print(\\\"boolean        \\\" + t); \\n    print(\\\"char           [\\\" + c + \\\"]\\\"); \\n    print(\\\"byte           \\\" + b); \\n    print(\\\"short          \\\" + s); \\n    print(\\\"int            \\\" + i); \\n    print(\\\"long           \\\" + l); \\n    print(\\\"float          \\\" + f); \\n    print(\\\"double         \\\" + d); \\n    print(\\\"reference      \\\" + reference);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c753f2a50877577688f1f03fa6d996c\",\n        \"type\": \"source_code\",\n        \"text\": \"InitialValues iv = new InitialValues(); \\n    iv.printInitialValues(); \\n    /* You could also say: \\n    new InitialValues().printInitialValues(); \\n    */\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3a5dcb943d6bc607c6b2658350526bc5\",\n        \"type\": \"source_code\",\n        \"text\": \"Initial value\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68934a3e9455fa72420237eb05902327\",\n        \"type\": \"source_code\",\n        \"text\": \"false\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa9497f5acccafcc3e6019657bdc5eb1\",\n        \"type\": \"source_code\",\n        \"text\": \"[ ]\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfcd208495d565ef66e7dff9f98764da\",\n        \"type\": \"source_code\",\n        \"text\": \"0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfcd208495d565ef66e7dff9f98764da\",\n        \"type\": \"source_code\",\n        \"text\": \"0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfcd208495d565ef66e7dff9f98764da\",\n        \"type\": \"source_code\",\n        \"text\": \"0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfcd208495d565ef66e7dff9f98764da\",\n        \"type\": \"source_code\",\n        \"text\": \"0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30565a8911a6bb487e3745c0ea3c8224\",\n        \"type\": \"source_code\",\n        \"text\": \"0.0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30565a8911a6bb487e3745c0ea3c8224\",\n        \"type\": \"source_code\",\n        \"text\": \"0.0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37a6259cc0c1dae299a7866489dff0bd\",\n        \"type\": \"source_code\",\n        \"text\": \"null\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5944e01c747044613a7d9a66f9548cbd\",\n        \"type\": \"source_code\",\n        \"text\": \"// Show that we\\u2019re in the constructor: \\n    print(\\\"House()\\\"); \\n    w3 = new Window(33); // Reinitialize w3\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b1dabbd3f6ac462ac7441a289f6ec01\",\n        \"type\": \"source_code\",\n        \"text\": \"House h = new House(); \\n    h.f(); // Shows that construction is done\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7332c73ff7d9e3b8db3bf1162d3c7099\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Bowl(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"85192f3eb4c6e086f76d46ff94f3033f\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f1(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"622ff8cb46c973cca1da4764535e42ca\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Table()\\\"); \\n    bowl2.f1(1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"375a02204953db04538ebc4990157523\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f2(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0593e5a7c3c67558526c00a38bd19280\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Cupboard()\\\"); \\n    bowl4.f1(2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"439cf55042a4f7f2f1e1ccbbbc956f43\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f3(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c2a266b9a66419f28dc5eb7b5064ef70\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Creating new Cupboard() in main\\\"); \\n    new Cupboard(); \\n    print(\\\"Creating new Cupboard() in main\\\"); \\n    new Cupboard(); \\n    table.f2(1); \\n    cupboard.f3(1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e16a3de256a6737b30f9256b0ca005c\",\n        \"type\": \"source_code\",\n        \"text\": \"i = 47;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e96767a60f54ff657f0659a7b9f0931d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Cup(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d7faf66b9024b31e0004a3935ce732a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5ddfb748ea7566635ce9ef84b484f85b\",\n        \"type\": \"source_code\",\n        \"text\": \"cup1 = new Cup(1); \\n    cup2 = new Cup(2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fd33bdd267946e5e2eb831ece85e4df7\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Cups()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e7b84e41844e476921e8bf2edf3dc4c\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Inside main()\\\"); \\n    Cups.cup1.f(99);  // (1)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e96c42e40754c96e55f865c24f4a5a6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Mug(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d7faf66b9024b31e0004a3935ce732a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f(\\\" + marker + \\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a685c77f78a369842146facbff4d8fda\",\n        \"type\": \"source_code\",\n        \"text\": \"mug1 = new Mug(1); \\n    mug2 = new Mug(2); \\n    print(\\\"mug1 & mug2 initialized\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"331b4cf6e3258b8b4ffeb692bac83701\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Mugs()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3e82c49d9aa6acda0ea3487d2edfef9\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Mugs(int)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"245cf1841170226d324789b581926441\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Inside main()\\\"); \\n    new Mugs(); \\n    print(\\\"new Mugs() completed\\\"); \\n    new Mugs(1); \\n    print(\\\"new Mugs(1) completed\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1181cb2f3b680e724fca3c6bfef492a\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] a1 = { 1, 2, 3, 4, 5 }; \\n    int[] a2; \\n    a2 = a1; \\n    for(int i = 0; i < a2.length; i++) \\n      a2[i] = a2[i] + 1; \\n    for(int i = 0; i < a1.length; i++) \\n      print(\\\"a1[\\\" + i + \\\"] = \\\" + a1[i]);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc14a6afb462d13766e04cbdfb9a9915\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] a; \\n    Random rand = new Random(47); \\n    a = new int[rand.nextInt(20)]; \\n    print(\\\"length of a = \\\" + a.length); \\n    print(Arrays.toString(a));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9127811de7ebdd0898e4916aa601f0c3\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    Integer[] a = new Integer[rand.nextInt(20)]; \\n    print(\\\"length of a = \\\" + a.length); \\n    for(int i = 0; i < a.length; i++) \\n      a[i] = rand.nextInt(500); // Autoboxing \\n    print(Arrays.toString(a));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a6f455e68bad2092096487259060d8b5\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[] a = {\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c49995a9bb61401f052d08f51a8d9a9b\",\n        \"type\": \"source_code\",\n        \"text\": \"new Integer(1), \\n      new Integer(2), \\n      3, // Autoboxing \\n    }; \\n    Integer[] b = new Integer[]{ \\n      new Integer(1), \\n      new Integer(2), \\n      3, // Autoboxing \\n    }; \\n    System.out.println(Arrays.toString(a)); \\n    System.out.println(Arrays.toString(b));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6bd9a37ac1b222c641eb95aded0e7f52\",\n        \"type\": \"source_code\",\n        \"text\": \"Other.main(new String[]{ \\\"fiddle\\\", \\\"de\\\", \\\"dum\\\" });\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c5abb8e8ea842106138e0fe14ab59d0\",\n        \"type\": \"source_code\",\n        \"text\": \"for(String s : args) \\n      System.out.print(s + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d484718c111bd3e5a458bca015b469e9\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Object obj : args) \\n      System.out.print(obj + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7169929d5cb5a2aff98f74cf992899ad\",\n        \"type\": \"source_code\",\n        \"text\": \"printArray(new Object[]{ \\n      new Integer(47), new Float(3.14), new Double(11.11) \\n    }); \\n    printArray(new Object[]{\\\"one\\\", \\\"two\\\", \\\"three\\\" }); \\n    printArray(new Object[]{new A(), new A(), new A()});\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d484718c111bd3e5a458bca015b469e9\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Object obj : args) \\n      System.out.print(obj + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf2fbcd3c440da11fd1bee77c05fb386\",\n        \"type\": \"source_code\",\n        \"text\": \"// Can take individual elements: \\n    printArray(new Integer(47), new Float(3.14), \\n      new Double(11.11)); \\n    printArray(47, 3.14F, 11.11); \\n    printArray(\\\"one\\\", \\\"two\\\", \\\"three\\\"); \\n    printArray(new A(), new A(), new A()); \\n    // Or an array:\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d40e2924f813bd03b662a0f1fff1b042\",\n        \"type\": \"source_code\",\n        \"text\": \"printArray((Object[])new Integer[]{ 1, 2, 3, 4 }); \\n    printArray(); // Empty list is OK\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7553174193a732609bf28f801b2fcdd5\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"required: \\\" + required + \\\" \\\"); \\n    for(String s : trailing) \\n      System.out.print(s + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3f572c575b9e99afe924a98b0a455dd\",\n        \"type\": \"source_code\",\n        \"text\": \"f(1, \\\"one\\\"); \\n    f(2, \\\"two\\\", \\\"three\\\"); \\n    f(0);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3957dc0ef7b239b8a97c01fd1b1638ba\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(args.getClass()); \\n    System.out.println(\\\" length \\\" + args.length);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3957dc0ef7b239b8a97c01fd1b1638ba\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(args.getClass()); \\n    System.out.println(\\\" length \\\" + args.length);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44eaafa154e1c5b6071cdc6d6a07a466\",\n        \"type\": \"source_code\",\n        \"text\": \"f(\\u2018a\\u2019); \\n    f(); \\n    g(1); \\n    g(); \\n    System.out.println(\\\"int[]: \\\" + new int[0].getClass());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b404edddce3d7d13cfb1e9c63cc4a45\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Integer i : args) \\n      System.out.print(i + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3fefbe7accabdc2a1fbdb8ae6c9c8f28\",\n        \"type\": \"source_code\",\n        \"text\": \"f(new Integer(1), new Integer(2)); \\n    f(4, 5, 6, 7, 8, 9); \\n    f(10, new Integer(11), 12);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4bae9d7be63ba675e4c6c405b8c2c4c5\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"first\\\"); \\n    for(Character c : args) \\n      System.out.print(\\\" \\\" + c); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8bcb27ec3d7af9957dab76e54056d3f7\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"second\\\"); \\n    for(Integer i : args) \\n      System.out.print(\\\" \\\" + i); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d200d90b8172e0ce066f83edb77df11c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"third\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"69609d44e78d476928e99917ea35304c\",\n        \"type\": \"source_code\",\n        \"text\": \"f(\\u2018a\\u2019, \\u2018b\\u2019, \\u2018c\\u2019); \\n    f(1); \\n    f(2, 1); \\n    f(0); \\n    f(0L); \\n    //! f(); // Won\\u2019t compile -- ambiguous\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a428da700a463287bc366976e01513b\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"first\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9db828a52529be7aba68786374ae5fc2\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"second\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a23a57ca88eb0cf3665c892c17df5b98\",\n        \"type\": \"source_code\",\n        \"text\": \"f(1, \\u2018a\\u2019); \\n    f(\\u2018a\\u2019, \\u2018b\\u2019);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a428da700a463287bc366976e01513b\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"first\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"968c928ee4fe7c2176e61abcb5b39690\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"second\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a23a57ca88eb0cf3665c892c17df5b98\",\n        \"type\": \"source_code\",\n        \"text\": \"f(1, \\u2018a\\u2019); \\n    f(\\u2018a\\u2019, \\u2018b\\u2019);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f770bc1cf63d9597722fa0e181ceffe1\",\n        \"type\": \"source_code\",\n        \"text\": \"Spiciness howHot = Spiciness.MEDIUM; \\n    System.out.println(howHot);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8367272c9896d322bdfe71c91017662\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Spiciness s : Spiciness.values()) \\n      System.out.println(s + \\\", ordinal \\\" + s.ordinal());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"41f41c554b1a466d40fde5615dcdb39e\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"This burrito is \\\"); \\n    switch(degree) { \\n      case NOT:    System.out.println(\\\"not spicy at all.\\\"); \\n                   break; \\n      case MILD: \\n      case MEDIUM: System.out.println(\\\"a little hot.\\\"); \\n                   break; \\n      case HOT: \\n      case FLAMING: \\n      default:     System.out.println(\\\"maybe too hot.\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"faeac1aa767d035fdcea6e6b084eb47d\",\n        \"type\": \"source_code\",\n        \"text\": \"Burrito \\n      plain = new Burrito(Spiciness.NOT), \\n      greenChile = new Burrito(Spiciness.MEDIUM), \\n      jalapeno = new Burrito(Spiciness.HOT); \\n    plain.describe(); \\n    greenChile.describe(); \\n    jalapeno.describe();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25fb5d5f282467bce50be4bec8f3cc1d\",\n        \"type\": \"source_code\",\n        \"text\": \"java.util.ArrayList list = new java.util.ArrayList();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b6d7eeb1d84351419fc201dee0c3585b\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList list = new java.util.ArrayList();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f7cf63937bff8e8e1f47c4a358aa2ff\",\n        \"type\": \"source_code\",\n        \"text\": \"access.mypackage.MyClass m = \\n      new access.mypackage.MyClass();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e11ee059dc88260995adf2a565681b3b\",\n        \"type\": \"source_code\",\n        \"text\": \"MyClass m = new MyClass();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e6bfdea0270494e22d4bfe715b0b6457\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"net.mindview.simple.Vector\\\");\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4650a80b8ab061b28711481475f07793\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"net.mindview.simple.List\\\");\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9714149602858f805aca8995ae6e4ef2\",\n        \"type\": \"source_code\",\n        \"text\": \"Vector v = new Vector(); \\n    List l = new List();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"31739f37657da6d6c6fe86cc6cbda7b0\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(obj);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2f808bc8664ce2ebdfc6aabe957104d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bed673f8f8595cdac7e79f16aa544dd0\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(obj);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97b0540499c51389e0fcd94d9a073bf8\",\n        \"type\": \"source_code\",\n        \"text\": \"return System.out.printf(format, args);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"173c7f44c345ef4d393afd26bf0db535\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Available from now on!\\\"); \\n    print(100); \\n    print(100L); \\n    print(3.14159);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5e5093ebd3d0f818e11994a789b1fb9\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] result = new int[n]; \\n    for(int i = 0; i < n; i++) \\n      result[i] = i; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"761e7a0c6b821c78434731cd44031971\",\n        \"type\": \"source_code\",\n        \"text\": \"int sz = end - start; \\n    int[] result = new int[sz]; \\n    for(int i = 0; i < sz; i++) \\n      result[i] = start + i; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"714326956da916db2be2df6c8cdb3c5d\",\n        \"type\": \"source_code\",\n        \"text\": \"int sz = (end - start)/step; \\n    int[] result = new int[sz]; \\n    for(int i = 0; i < sz; i++) \\n      result[i] = start + (i * step); \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"edbf10499837f19785e769ea9f6b7c88\",\n        \"type\": \"source_code\",\n        \"text\": \"Cookie x = new Cookie(); \\n    //! x.bite(); // Can\\u2019t access\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9777c5bd76c7ec33373793dd3743ca6e\",\n        \"type\": \"source_code\",\n        \"text\": \"Pie x = new Pie(); \\n    x.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25fb6ab01271250af429429ec35fec5d\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Sundae();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2fe8d067242032a565095251e52f6aa3\",\n        \"type\": \"source_code\",\n        \"text\": \"//! Sundae x = new Sundae(); \\n    Sundae x = Sundae.makeASundae();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f81e4d34fce4e867045572b8b02f0058\",\n        \"type\": \"source_code\",\n        \"text\": \"//! bite(); // Can\\u2019t access bite\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0698b8131a18141538b7a2c784ae9b43\",\n        \"type\": \"source_code\",\n        \"text\": \"ChocolateChip x = new ChocolateChip(); \\n    x.chomp();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0098e2ece1303e56ce8874223ef0b745\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Cookie constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12ecbce3e1ca704c896bfb0a20c98514\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"bite\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f69a6db9719cf1365b22ffc0ff2f2279\",\n        \"type\": \"source_code\",\n        \"text\": \"ChocolateChip2 x = new ChocolateChip2(); \\n    x.chomp();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f5e40fd0b554f560197e90897ad31b5\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Soup1();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b1151460c53c61af5d6552abeb6847c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return ps1;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d5e8e583fe264217162a36d3837b2b\",\n        \"type\": \"source_code\",\n        \"text\": \"// Can\\u2019t do this! Private constructor: \\n    //! Soup1 soup = new Soup1();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"237a2456239fbf0abbd66e442cb3ccb9\",\n        \"type\": \"source_code\",\n        \"text\": \"Soup1 soup = Soup1.makeSoup();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f46aa7ab921e2d10375c3e4d1ec4dc4a\",\n        \"type\": \"source_code\",\n        \"text\": \"Soup2.access().f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"afe31ac4bb128e8897d0d9f5889c7750\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Creating a packaged class\\\");\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6630d2e97550494685d19f69a6c4acad\",\n        \"type\": \"source_code\",\n        \"text\": \"PackagedClass pc = new PackagedClass();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48cd67e352f78596246303b4ced459d7\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"WaterSource()\\\"); \\n    s = \\\"Constructed\\\";\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cee680b9e18d79a04f7f73d1333099f0\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"valve1 = \\\" + valve1 + \\\" \\\" + \\n      \\\"valve2 = \\\" + valve2 + \\\" \\\" + \\n      \\\"valve3 = \\\" + valve3 + \\\" \\\" + \\n      \\\"valve4 = \\\" + valve4 + \\\"\\\\n\\\" + \\n      \\\"i = \\\" + i + \\\" \\\" + \\\"f = \\\" + f + \\\" \\\" + \\n      \\\"source = \\\" + source;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8670a68068c44345d50c15da2eeb1647\",\n        \"type\": \"source_code\",\n        \"text\": \"SprinklerSystem sprinklers = new SprinklerSystem(); \\n    System.out.println(sprinklers);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5f69786957b7d36c1e475050ac5fb21\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Soap()\\\"); \\n    s = \\\"Constructed\\\";\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"99de4ec13c36b72a793587d57895b58e\",\n        \"type\": \"source_code\",\n        \"text\": \"s1 = \\\"Happy\\\", \\n    s2 = \\\"Happy\\\", \\n    s3, s4;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5692f3a1c9e2f2e9ccbc881ce320576\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Inside Bath()\\\"); \\n    s3 = \\\"Joy\\\"; \\n    toy = 3.14f; \\n    castille = new Soap();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4d0723ade824d2b22b75c59b4ee1563a\",\n        \"type\": \"source_code\",\n        \"text\": \"if(s4 == null) // Delayed initialization: \\n      s4 = \\\"Joy\\\"; \\n    return \\n      \\\"s1 = \\\" + s1 + \\\"\\\\n\\\" + \\n      \\\"s2 = \\\" + s2 + \\\"\\\\n\\\" + \\n      \\\"s3 = \\\" + s3 + \\\"\\\\n\\\" + \\n      \\\"s4 = \\\" + s4 + \\\"\\\\n\\\" + \\n      \\\"i = \\\" + i + \\\"\\\\n\\\" + \\n      \\\"toy = \\\" + toy + \\\"\\\\n\\\" + \\n      \\\"castille = \\\" + castille;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e243778b3856121200afbdefeaae8dc1\",\n        \"type\": \"source_code\",\n        \"text\": \"Bath b = new Bath(); \\n    print(b);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"037d252cd9c06d45ba06e865bdcaa9a9\",\n        \"type\": \"source_code\",\n        \"text\": \"Cleanser x = new Cleanser(); \\n    x.dilute(); x.apply(); x.scrub(); \\n    print(x);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8944222fb81f7ee8a62ec00f457651cc\",\n        \"type\": \"source_code\",\n        \"text\": \"append(\\\" Detergent.scrub()\\\"); \\n    super.scrub(); // Call base-class version\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d350320f80793490eecd95645cbbd303\",\n        \"type\": \"source_code\",\n        \"text\": \"Detergent x = new Detergent(); \\n    x.dilute(); \\n    x.apply(); \\n    x.scrub(); \\n    x.foam(); \\n    print(x); \\n    print(\\\"Testing base class:\\\"); \\n    Cleanser.main(args);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a7293696cd467ed08786e6fb7769bc0d\",\n        \"type\": \"source_code\",\n        \"text\": \"Cartoon x = new Cartoon();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2a820390797610b1747d340dc9e3d3f6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Game constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a61b83c1bdf30e80eee16a8e4ec964ba\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"BoardGame constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e91b06933fe2e5136cc9b8968d65ec0\",\n        \"type\": \"source_code\",\n        \"text\": \"super(11); \\n    print(\\\"Chess constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fdab6ac8e5b6798345dcb5eb6181b7e5\",\n        \"type\": \"source_code\",\n        \"text\": \"Chess x = new Chess();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a3e6d461a5b8209bcbbf5fc280ccd9f\",\n        \"type\": \"source_code\",\n        \"text\": \"SpaceShip protector = new SpaceShip(\\\"NSEA Protector\\\"); \\n    protector.forward(100);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"703eb6e1ec5bb62045c4b6203b2d84ba\",\n        \"type\": \"source_code\",\n        \"text\": \"new SpaceShipControls();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48dd2b276fcdf83154c38dfbcd063d72\",\n        \"type\": \"source_code\",\n        \"text\": \"this.name = name;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"99adeb40ed72aeed1e9a14e107e0e4a2\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.back(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6362ead78dccbf7a2720f26a9f6564f7\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.down(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc929cb1d4491fafe7600217202e8473\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.forward(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ec403683c3166923cc8aedd10c3e562\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.left(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"88453c85819466f3b74260103fe8bec8\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.right(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5b59e7bc66d6341bfcb63a30b79b3c6\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.turboBoost();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"262ed99d7b0a5b7b5eb38981f10aed90\",\n        \"type\": \"source_code\",\n        \"text\": \"controls.up(velocity);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c0b27f8e76fd3234f0f74d52dceeac3\",\n        \"type\": \"source_code\",\n        \"text\": \"SpaceShipDelegation protector = \\n      new SpaceShipDelegation(\\\"NSEA Protector\\\"); \\n    protector.forward(100);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4bcf519ab3a54ea774b6ae3c56b70fde\",\n        \"type\": \"source_code\",\n        \"text\": \"and inheritance\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6dbf619439e3f92f44109ca07989c9ed\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Plate constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8a9d8bc5223e4d1a0d7433dd833e97b\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"DinnerPlate constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7eaa86b24872cd8ba5ac39b96ce26d2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Utensil constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"56858595e3e82285bb06dabfa6f06e54\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"Spoon constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65a13c2c38d94552cd699b152fed7d67\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"Fork constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"84e89f1c816e2f5a1abfc25726e2b908\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"Knife constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"760ecf97525d487116b453ad460a16f3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Custom constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"41c555b6c4b715d88e3cf1b1c2b6216c\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i + 1); \\n    sp = new Spoon(i + 2); \\n    frk = new Fork(i + 3); \\n    kn = new Knife(i + 4); \\n    pl = new DinnerPlate(i + 5); \\n    print(\\\"PlaceSetting constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"872d845281ef0d44dbd3a0c57da59322\",\n        \"type\": \"source_code\",\n        \"text\": \"PlaceSetting x = new PlaceSetting(9);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04056631cc0cc9f716fd5d47ea05f626\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"Drawing Circle\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"45ccf1dee2f222293af1f969d7ee4cb3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Erasing Circle\\\"); \\n    super.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7355487cbbd28c1e47e6383d21a54b16\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i); \\n    print(\\\"Drawing Triangle\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"230613d2add6f50e305c37329da433d8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Erasing Triangle\\\"); \\n    super.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33ee1c62beda1d7e1ba439937487734e\",\n        \"type\": \"source_code\",\n        \"text\": \"super(start); \\n    this.start = start; \\n    this.end = end; \\n    print(\\\"Drawing Line: \\\" + start + \\\", \\\" + end);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ff6d3a20a633f3ac40afc699cd0fa56\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Erasing Line: \\\" + start + \\\", \\\" + end); \\n    super.dispose();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f804727c2510e5bea86394f01d94a9fc\",\n        \"type\": \"source_code\",\n        \"text\": \"super(i + 1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"81257a5ab98aed2682b53e4dc11ddae4\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int j = 0; j < lines.length; j++) \\n      lines[j] = new Line(j, j*j); \\n    c = new Circle(1); \\n    t = new Triangle(1); \\n    print(\\\"Combined constructor\\\");\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"361df9e76fa6f6197c673c813b5b6939\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"CADSystem.dispose()\\\"); \\n    // The order of cleanup is the reverse \\n    // of the order of initialization: \\n    t.dispose(); \\n    c.dispose(); \\n    for(int i = lines.length - 1; i >= 0; i--) \\n      lines[i].dispose(); \\n    super.dispose();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2d284c7fcddfbb35b24c8f4b1f175c38\",\n        \"type\": \"source_code\",\n        \"text\": \"CADSystem x = new CADSystem(47); \\n    try { \\n      // Code and exception handling... \\n    } finally { \\n      x.dispose(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b9ea72b631efa1d6fa033e906de5a83\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"doh(char)\\\"); \\n    return \\u2018d\\u2019;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0bc52188a93830892a38229d81469873\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"doh(float)\\\"); \\n    return 1.0f;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f42ba8783473f19e74a75e988f30436\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"doh(Milhouse)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"201220eef4b5da9800f98763e118fdf5\",\n        \"type\": \"source_code\",\n        \"text\": \"Bart b = new Bart(); \\n    b.doh(1); \\n    b.doh(\\u2018x\\u2019); \\n    b.doh(1.0f);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7e76acd928c671d2b75705d7aff2199e\",\n        \"type\": \"source_code\",\n        \"text\": \"b.doh(new Milhouse());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6e0082766da046589c4da6eda8fe8b21\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"doh(Milhouse)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"31c8d2f11ee0472c584dc8b8fa75c45d\",\n        \"type\": \"source_code\",\n        \"text\": \"vs. inheritance\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"948ee191cd3bfc59ee70261c984f9bbb\",\n        \"type\": \"source_code\",\n        \"text\": \"left = new Door(), \\n    right = new Door(); // 2-door\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b20ad638b2648aee82d5b9f78cc0c098\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 4; i++) \\n      wheel[i] = new Wheel();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ab3b3bf8884eaec252c134a41a19f69\",\n        \"type\": \"source_code\",\n        \"text\": \"Car car = new Car(); \\n    car.left.window.rollup(); \\n    car.wheel[0].inflate(72);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72863a1e788016fb27ad5466872a6cf0\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"I\\u2019m a Villain and my name is \\\" + name;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43393275a12ee83f464450cd312006e9\",\n        \"type\": \"source_code\",\n        \"text\": \"super(name); \\n    this.orcNumber = orcNumber;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6ec6ac0adfd6e4a0c1d101a319b79084\",\n        \"type\": \"source_code\",\n        \"text\": \"set(name); // Available because it\\u2019s protected \\n    this.orcNumber = orcNumber;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1073d7cd9027e89139ce301770c45593\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Orc \\\" + orcNumber + \\\": \\\" + super.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f838c8ec7cdde3110c762a629615690c\",\n        \"type\": \"source_code\",\n        \"text\": \"Orc orc = new Orc(\\\"Limburger\\\", 12); \\n    print(orc); \\n    orc.change(\\\"Bob\\\", 19); \\n    print(orc);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb24a749d504fc7dfc162e0a191422a0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8515b36b424c3dcbe7a6584608aafdf2\",\n        \"type\": \"source_code\",\n        \"text\": \"Wind flute = new Wind(); \\n    Instrument.tune(flute); // Upcasting\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7526502e17951cc39996c93eebcbf27\",\n        \"type\": \"source_code\",\n        \"text\": \"return id + \\\": \\\" + \\\"i4 = \\\" + i4 + \\\", INT_5 = \\\" + INT_5;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2bc44c3472d9e6c82c7d8e61422c4412\",\n        \"type\": \"source_code\",\n        \"text\": \"FinalData fd1 = new FinalData(\\\"fd1\\\"); \\n    //! fd1.valueOne++; // Error: can\\u2019t change value \\n    fd1.v2.i++; // Object isn\\u2019t constant! \\n    fd1.v1 = new Value(9); // OK -- not final \\n    for(int i = 0; i < fd1.a.length; i++) \\n      fd1.a[i]++; // Object isn\\u2019t constant! \\n    //! fd1.v2 = new Value(0); // Error: Can\\u2019t \\n    //! fd1.VAL_3 = new Value(1); // change reference \\n    //! fd1.a = new int[3]; \\n    print(fd1); \\n    print(\\\"Creating new FinalData\\\"); \\n    FinalData fd2 = new FinalData(\\\"fd2\\\"); \\n    print(fd1); \\n    print(fd2);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d53792db3738eff2c670bcbb593601d5\",\n        \"type\": \"source_code\",\n        \"text\": \"j = 1; // Initialize blank final \\n    p = new Poppet(1); // Initialize blank final reference\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f80c2e5073e63efc08c42d9ba4f01de\",\n        \"type\": \"source_code\",\n        \"text\": \"j = x; // Initialize blank final \\n    p = new Poppet(x); // Initialize blank final reference\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0798821961f0ae2d2db1b95ca691fec7\",\n        \"type\": \"source_code\",\n        \"text\": \"new BlankFinal(); \\n    new BlankFinal(47);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ca77411f2ae8f6f2e77ad8527757eb7\",\n        \"type\": \"source_code\",\n        \"text\": \"//! g = new Gizmo(); // Illegal -- g is final\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0be164683dfb9f03697c584c4bcfd35d\",\n        \"type\": \"source_code\",\n        \"text\": \"g = new Gizmo(); // OK -- g not final \\n    g.spin();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a936bb309159061dda5ba9addb3ca257\",\n        \"type\": \"source_code\",\n        \"text\": \"FinalArguments bf = new FinalArguments();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7adc9819b052113101688cbf90ed9c75\",\n        \"type\": \"source_code\",\n        \"text\": \"bf.without(null); \\n    bf.with(null);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd8580879b1527af1b7875714e8923cb\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"OverridingPrivate.f()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dfc8a63bce1820d638074ef738d6a9ef\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"OverridingPrivate.g()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c22a1b908caf89c5bc1d553276be55e\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"OverridingPrivate2.f()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee57df4c4afc609e0aad09aded031283\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"OverridingPrivate2.g()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ce0bb5b9f1903a97faed7acc193589b2\",\n        \"type\": \"source_code\",\n        \"text\": \"OverridingPrivate2 op2 = new OverridingPrivate2(); \\n    op2.f(); \\n    op2.g(); \\n    // You can upcast: \\n    OverridingPrivate op = op2; \\n    // But you can\\u2019t call the methods: \\n    //! op.f(); \\n    //! op.g(); \\n    // Same here: \\n    WithFinals wf = op2; \\n    //! wf.f(); \\n    //! wf.g();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3b4f2ce2fce481beccfcedb15ee11b5\",\n        \"type\": \"source_code\",\n        \"text\": \"Dinosaur n = new Dinosaur(); \\n    n.f(); \\n    n.i = 40; \\n    n.j++;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52fec0181ba763a8c2ca5544ea571d96\",\n        \"type\": \"source_code\",\n        \"text\": \"class loading\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94ef7d2973079f121daf5db556c52ac3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"i = \\\" + i + \\\", j = \\\" + j); \\n    j = 39;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61e3b24469999e97e97d5a75a8559940\",\n        \"type\": \"source_code\",\n        \"text\": \"printInit(\\\"static Insect.x1 initialized\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26c74c3c69c612c4a7c098d631c60b8d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(s); \\n    return 47;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"484f12206ce143e77594192c1668796b\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"k = \\\" + k); \\n    print(\\\"j = \\\" + j);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e47a828429670e4718c862ec243a6691\",\n        \"type\": \"source_code\",\n        \"text\": \"printInit(\\\"static Beetle.x2 initialized\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d236feb56461b901e5a4e323d615899d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Beetle constructor\\\"); \\n    Beetle b = new Beetle();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1fbcbce1e61df7098fcec349961d9281\",\n        \"type\": \"source_code\",\n        \"text\": \"MIDDLE_C, C_SHARP, B_FLAT; // Etc.\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d00e484cc147da8db82c8cd4fcf85c72\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Instrument.play()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"73a8b2cc9dd6a03c85b70ac63bf4246f\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Wind.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ed7b18f6ff44405505e177be08512c0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40ec378312c9aa9bd2ff6e2c97b62831\",\n        \"type\": \"source_code\",\n        \"text\": \"Wind flute = new Wind(); \\n    tune(flute); // Upcasting\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b7ae7b840ceb6a0d66e23c186d3d921\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Stringed.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ab77fbbcfa5200e694117bb8233b782\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Brass.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39a1dcdee3f558ee7805df19d96dba01\",\n        \"type\": \"source_code\",\n        \"text\": \"i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39a1dcdee3f558ee7805df19d96dba01\",\n        \"type\": \"source_code\",\n        \"text\": \"i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39a1dcdee3f558ee7805df19d96dba01\",\n        \"type\": \"source_code\",\n        \"text\": \"i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ddfcdf4e2c5f03086482332771c19c4\",\n        \"type\": \"source_code\",\n        \"text\": \"Wind flute = new Wind(); \\n    Stringed violin = new Stringed(); \\n    Brass frenchHorn = new Brass(); \\n    tune(flute); // No upcasting \\n    tune(violin); \\n    tune(frenchHorn);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ed7b18f6ff44405505e177be08512c0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24012790c994dcab1eb18d74030da170\",\n        \"type\": \"source_code\",\n        \"text\": \"switch(rand.nextInt(3)) { \\n      default: \\n      case 0: return new Circle(); \\n      case 1: return new Square(); \\n      case 2: return new Triangle(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d737a4a7a8940944b9b120dbf3226ce8\",\n        \"type\": \"source_code\",\n        \"text\": \"new RandomShapeGenerator();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c58b522dd2f5e7013e638147c1eb71b\",\n        \"type\": \"source_code\",\n        \"text\": \"Shape[] s = new Shape[9]; \\n    // Fill up the array with shapes: \\n    for(int i = 0; i < s.length; i++) \\n      s[i] = gen.next(); \\n    // Make polymorphic method calls: \\n    for(Shape shp : s) \\n      shp.draw();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ed7b18f6ff44405505e177be08512c0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c1fbc6d3a43dc0f39df95a3cbad024a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Instrument i : e) \\n      tune(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9575115749797aa5a3415bdc6f0820d9\",\n        \"type\": \"source_code\",\n        \"text\": \"// Upcasting during addition to the array: \\n    Instrument[] orchestra = { \\n      new Wind(), \\n      new Percussion(), \\n      new Stringed(), \\n      new Brass(), \\n      new Woodwind() \\n    }; \\n    tuneAll(orchestra);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8806f544f328f64bbfbf2e789826a19\",\n        \"type\": \"source_code\",\n        \"text\": \"PrivateOverride po = new Derived(); \\n    po.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db8e78a714b5c65fbe85001ba85d3e4c\",\n        \"type\": \"source_code\",\n        \"text\": \"Super sup = new Sub(); // Upcast \\n    System.out.println(\\\"sup.field = \\\" + sup.field + \\n      \\\", sup.getField() = \\\" + sup.getField()); \\n    Sub sub = new Sub(); \\n    System.out.println(\\\"sub.field = \\\" + \\n      sub.field + \\\", sub.getField() = \\\" + \\n      sub.getField() + \\n      \\\", sub.getSuperField() = \\\" + \\n      sub.getSuperField());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"99f56fb9d6347869297ea45bab5aefc8\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Base staticGet()\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c21ebf40c7d278f573b5a9b623a6cfc2\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Base dynamicGet()\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2d3ed26466ff8337ff1d3d02082a93d\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Derived staticGet()\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c5f99be01dd0c67317de7d9b78520c7f\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Derived dynamicGet()\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5787a2ad6fcfaaf787dd8ea7d62febc4\",\n        \"type\": \"source_code\",\n        \"text\": \"StaticSuper sup = new StaticSub(); // Upcast \\n    System.out.println(sup.staticGet()); \\n    System.out.println(sup.dynamicGet());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf2f5725b274e5ad93cd68e62ae57e1b\",\n        \"type\": \"source_code\",\n        \"text\": \"new Sandwich();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c2ff12025c1b081d4ced6a16266045b\",\n        \"type\": \"source_code\",\n        \"text\": \"this.s = s; \\n    print(\\\"Creating Characteristic \\\" + s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e0f17e8118f4e1767fde911ac511746\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"disposing Characteristic \\\" + s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9511b0b2fdd96babcb98a90ec7ed5d5\",\n        \"type\": \"source_code\",\n        \"text\": \"this.s = s; \\n    print(\\\"Creating Description \\\" + s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3c1a55e1ecbfccae8a88aaf64b12b25f\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"disposing Description \\\" + s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1e3cfaa610628dddf6510f6beab9a47a\",\n        \"type\": \"source_code\",\n        \"text\": \"new Characteristic(\\\"is alive\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2033fbac946049c7550ed13e8958ad5c\",\n        \"type\": \"source_code\",\n        \"text\": \"new Description(\\\"Basic Living Creature\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a77011f44e66210f2f1f579e310823a8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"LivingCreature()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ae692d142ced1e4a21a58825bf77826\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"LivingCreature dispose\\\"); \\n    t.dispose(); \\n    p.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b8fc158caadb42928fca9e72322c94c7\",\n        \"type\": \"source_code\",\n        \"text\": \"new Characteristic(\\\"has heart\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"032bd1b61910f4eed1d951da0dac2460\",\n        \"type\": \"source_code\",\n        \"text\": \"new Description(\\\"Animal not Vegetable\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8feeb7b5d0212fd8dc059798d079ec0\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Animal dispose\\\"); \\n    t.dispose(); \\n    p.dispose(); \\n    super.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3bc723349ab889100cc82c3546df84f0\",\n        \"type\": \"source_code\",\n        \"text\": \"new Characteristic(\\\"can live in water\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b2c370b6464b54fa406aa70054eca32c\",\n        \"type\": \"source_code\",\n        \"text\": \"new Description(\\\"Both water and land\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"13d4f5b4476f53b448d75dcfa69f21f2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Amphibian()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab3e1c0464f71af9c4761db22e3188e8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Amphibian dispose\\\"); \\n    t.dispose(); \\n    p.dispose(); \\n    super.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2d8243cee28d14512847a8ce6d60a96e\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Frog dispose\\\"); \\n    t.dispose(); \\n    p.dispose(); \\n    super.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1f3cc37e8a38489cc5a33ff2f82d7c8\",\n        \"type\": \"source_code\",\n        \"text\": \"Frog frog = new Frog(); \\n    print(\\\"Bye!\\\"); \\n    frog.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4934f8467c018282892a28d3826dfac\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Creating \\\" + this);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6549b5a7be246fadffa3e18a419b27bb\",\n        \"type\": \"source_code\",\n        \"text\": \"if(--refcount == 0) \\n      print(\\\"Disposing \\\" + this);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44101caafa6a98c31cf584dee93ffacb\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Creating \\\" + this); \\n    this.shared = shared; \\n    this.shared.addRef();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8ccc41987b356c710300b2f69e73487\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"disposing \\\" + this); \\n    shared.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e457ad86d3357f17d754ca6f3ea8a751\",\n        \"type\": \"source_code\",\n        \"text\": \"Shared shared = new Shared(); \\n    Composing[] composing = { new Composing(shared), \\n      new Composing(shared), new Composing(shared), \\n      new Composing(shared), new Composing(shared) }; \\n    for(Composing c : composing) \\n      c.dispose();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbac118f5b81f3d46b70d5f4b4383b91\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Glyph() before draw()\\\"); \\n    draw(); \\n    print(\\\"Glyph() after draw()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f81d6bf22b3c734e46c91f31d586b8dc\",\n        \"type\": \"source_code\",\n        \"text\": \"radius = r; \\n    print(\\\"RoundGlyph.RoundGlyph(), radius = \\\" + radius);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0933e4e8226f5da08235cb2b55ba31ed\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"RoundGlyph.draw(), radius = \\\" + radius);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"600a24af8df51e4bb7fbe6dcc89585ef\",\n        \"type\": \"source_code\",\n        \"text\": \"new RoundGlyph(5);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab86120a6fdd4492964258657b8f8212\",\n        \"type\": \"source_code\",\n        \"text\": \"Mill m = new Mill(); \\n    Grain g = m.process(); \\n    System.out.println(g); \\n    m = new WheatMill(); \\n    g = m.process(); \\n    System.out.println(g);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"072fa68228a391ccd723876b8f59c4fc\",\n        \"type\": \"source_code\",\n        \"text\": \"Stage stage = new Stage(); \\n    stage.performPlay(); \\n    stage.change(); \\n    stage.performPlay();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5d05444a7488e96075b179061547eb5\",\n        \"type\": \"source_code\",\n        \"text\": \"Useful[] x = { \\n      new Useful(), \\n      new MoreUseful() \\n    }; \\n    x[0].f(); \\n    x[1].g(); \\n    // Compile time: method not found in Useful: \\n    //! x[1].u(); \\n    ((MoreUseful)x[1]).u(); // Downcast/RTTI \\n    ((MoreUseful)x[0]).u(); // Exception thrown\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"06b5da9bb20b3ef8f2ac6790f219533f\",\n        \"type\": \"source_code\",\n        \"text\": \"and methods\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ac49615a7dfd98fb79908cd218f63376\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Wind.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d094ff2440591f02ac7e819b5b421552\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Percussion.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b7ae7b840ceb6a0d66e23c186d3d921\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Stringed.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ab77fbbcfa5200e694117bb8233b782\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Brass.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e49e3f18d682a296644be9e13e6098ad\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Woodwind.play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ed7b18f6ff44405505e177be08512c0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c1fbc6d3a43dc0f39df95a3cbad024a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Instrument i : e) \\n      tune(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6864639c4220ee4073cc123dcaea72ad\",\n        \"type\": \"source_code\",\n        \"text\": \"// Upcasting during addition to the array: \\n    Instrument[] orchestra = { \\n      new Wind(), \\n      new Percussion(), \\n      new Stringed(), \\n      new Brass(), \\n      new Woodwind() \\n    };\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8bea778fe8b5676d2f5539e69f74b3c4\",\n        \"type\": \"source_code\",\n        \"text\": \"tuneAll(orchestra);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e84ff6689d410d1255df01ba4df5c8c\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\".play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e84ff6689d410d1255df01ba4df5c8c\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\".play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e84ff6689d410d1255df01ba4df5c8c\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\".play() \\\" + n);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ed7b18f6ff44405505e177be08512c0\",\n        \"type\": \"source_code\",\n        \"text\": \"// ... \\n    i.play(Note.MIDDLE_C);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c1fbc6d3a43dc0f39df95a3cbad024a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Instrument i : e) \\n      tune(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90335a5cb256bbcc7e784b868c5e1e12\",\n        \"type\": \"source_code\",\n        \"text\": \"// Upcasting during addition to the array: \\n    Instrument[] orchestra = { \\n      new Wind(), \\n      new Percussion(), \\n      new Stringed(),\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"18031c7867301a3ae750c34a837a19e4\",\n        \"type\": \"source_code\",\n        \"text\": \"new Brass(), \\n      new Woodwind() \\n    }; \\n    tuneAll(orchestra);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7a42b7b8d3e8f08adc688a8af9d40a1\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fdc62e44d4d6da2f0796e9d31edcb3e7\",\n        \"type\": \"source_code\",\n        \"text\": \"return ((String)input).toUpperCase();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03424e019ce02f6ade0b5b9cc82ae487\",\n        \"type\": \"source_code\",\n        \"text\": \"return ((String)input).toLowerCase();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b4dafa41406b18cfc571ca5841b203a\",\n        \"type\": \"source_code\",\n        \"text\": \"// The split() argument divides a String into pieces: \\n    return Arrays.toString(((String)input).split(\\\" \\\"));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aae49febd9e036d819a20a67df1eada6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Using Processor \\\" + p.name()); \\n    print(p.process(s));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2f1ae9d12c2904b3516903b03bafb036\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Disagreement with beliefs is by definition incorrect\\\";\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"71bd6f928b38b7a946b10235b33efca0\",\n        \"type\": \"source_code\",\n        \"text\": \"process(new Upcase(), s); \\n    process(new Downcase(), s); \\n    process(new Splitter(), s);\",\n        \"programming_language\": \"TASM\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7a42b7b8d3e8f08adc688a8af9d40a1\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e06ee47a9340c0a700b995c82bd8fcb3\",\n        \"type\": \"source_code\",\n        \"text\": \"return input; // Dummy processing\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40aaf5c3b233a67d3640fb7711477419\",\n        \"type\": \"source_code\",\n        \"text\": \"lowCutoff = lowCut; \\n    highCutoff = highCut;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aae49febd9e036d819a20a67df1eada6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Using Processor \\\" + p.name()); \\n    print(p.process(s));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7a42b7b8d3e8f08adc688a8af9d40a1\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"accf774b2da71e43f912aff76f2b5422\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"If she weighs the same as a duck, she\\u2019s made of wood\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0a4369e5c82ac45dceeb2b7ff15cbd4b\",\n        \"type\": \"source_code\",\n        \"text\": \"Apply.process(new Upcase(), s); \\n    Apply.process(new Downcase(), s); \\n    Apply.process(new Splitter(), s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fdc62e44d4d6da2f0796e9d31edcb3e7\",\n        \"type\": \"source_code\",\n        \"text\": \"return ((String)input).toUpperCase();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03424e019ce02f6ade0b5b9cc82ae487\",\n        \"type\": \"source_code\",\n        \"text\": \"return ((String)input).toLowerCase();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48eaefced7b1932197c4a5fac7bf693b\",\n        \"type\": \"source_code\",\n        \"text\": \"return Arrays.toString(((String)input).split(\\\" \\\"));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbcc0a96a94f208d66cce6047a91e68e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.filter = filter;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"252d31b86c8202b099254f5cfa9b38e5\",\n        \"type\": \"source_code\",\n        \"text\": \"return filter.process((Waveform)input);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a9a9b90adf7e846b933c9611dcf64c99\",\n        \"type\": \"source_code\",\n        \"text\": \"Waveform w = new Waveform(); \\n    Apply.process(new FilterAdapter(new LowPass(1.0)), w); \\n    Apply.process(new FilterAdapter(new HighPass(2.0)), w); \\n    Apply.process( \\n      new FilterAdapter(new BandPass(3.0, 4.0)), w);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35328905f36b4ac9f689d0bf322bcb80\",\n        \"type\": \"source_code\",\n        \"text\": \"implements CanFight, CanSwim, CanFly {\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"58507a42fe743bc9d52a7a6848b645d9\",\n        \"type\": \"source_code\",\n        \"text\": \"Hero h = new Hero(); \\n    t(h); // Treat it as a CanFight \\n    u(h); // Treat it as a CanSwim \\n    v(h); // Treat it as a CanFly \\n    w(h); // Treat it as an ActionCharacter\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4f8f0b69a9b9534f385d4ba67262e72\",\n        \"type\": \"source_code\",\n        \"text\": \"with inheritance\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b9909ee3658bd86bd45c683ccc966545\",\n        \"type\": \"source_code\",\n        \"text\": \"d.menace(); \\n    d.destroy();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30a1674d0b36430914786e0253c3e0ed\",\n        \"type\": \"source_code\",\n        \"text\": \"DangerousMonster barney = new DragonZilla(); \\n    u(barney); \\n    v(barney); \\n    Vampire vlad = new VeryBadVampire(); \\n    u(vlad); \\n    v(vlad); \\n    w(vlad);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbb4a7468d40084bdea295debcb18590\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\".toCharArray();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"332c106d4770af2e4a01321dbb9c9d49\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"abcdefghijklmnopqrstuvwxyz\\\".toCharArray();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5095766d2638cd0d0cb156f94f1c0eaa\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"aeiou\\\".toCharArray();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66874256b28e4184cb5b7e8cb17b108a\",\n        \"type\": \"source_code\",\n        \"text\": \"if(count-- == 0) \\n      return -1; // Indicates end of input \\n    cb.append(capitals[rand.nextInt(capitals.length)]); \\n    for(int i = 0; i < 4; i++) { \\n      cb.append(vowels[rand.nextInt(vowels.length)]); \\n      cb.append(lowers[rand.nextInt(lowers.length)]); \\n    } \\n    cb.append(\\\" \\\"); \\n    return 10; // Number of characters appended\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55b97b0d1537190084479a6d24f8a678\",\n        \"type\": \"source_code\",\n        \"text\": \"Scanner s = new Scanner(new RandomWords(10)); \\n    while(s.hasNext()) \\n      System.out.println(s.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ce3580505270fbff721baf15e1264b0\",\n        \"type\": \"source_code\",\n        \"text\": \"RandomDoubles rd = new RandomDoubles(); \\n    for(int i = 0; i < 7; i ++) \\n      System.out.print(rd.next() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4c0406946c9e5c4d6333b0512abfc61\",\n        \"type\": \"source_code\",\n        \"text\": \"JANUARY = 1, FEBRUARY = 2, MARCH = 3, \\n    APRIL = 4, MAY = 5, JUNE = 6, JULY = 7, \\n    AUGUST = 8, SEPTEMBER = 9, OCTOBER = 10, \\n    NOVEMBER = 11, DECEMBER = 12;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"067a42489d23e82da577005d5bbdd48b\",\n        \"type\": \"source_code\",\n        \"text\": \"print(RandVals.RANDOM_INT); \\n    print(RandVals.RANDOM_LONG); \\n    print(RandVals.RANDOM_FLOAT); \\n    print(RandVals.RANDOM_DOUBLE);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ba4a6eb73d9b10f9e4497822a17ef43\",\n        \"type\": \"source_code\",\n        \"text\": \"void f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ba4a6eb73d9b10f9e4497822a17ef43\",\n        \"type\": \"source_code\",\n        \"text\": \"void f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ba4a6eb73d9b10f9e4497822a17ef43\",\n        \"type\": \"source_code\",\n        \"text\": \"void f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eadae6ebca9dc32dc8b5f937eaca44fc\",\n        \"type\": \"source_code\",\n        \"text\": \"dRef = d; \\n    dRef.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ba4a6eb73d9b10f9e4497822a17ef43\",\n        \"type\": \"source_code\",\n        \"text\": \"void f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ba4a6eb73d9b10f9e4497822a17ef43\",\n        \"type\": \"source_code\",\n        \"text\": \"void f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bfdae12f430695ecedc17e2c3a1c45aa\",\n        \"type\": \"source_code\",\n        \"text\": \"public void g() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f667e1b64b1e090669b3bf65bce4a6dc\",\n        \"type\": \"source_code\",\n        \"text\": \"public void g() {} \\n    class EG implements E.G { \\n      public void f() {} \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9425ddf5b933da18594a6e1d289f599b\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = new A(); \\n    // Can\\u2019t access A.D: \\n    //! A.D ad = a.getD(); \\n    // Doesn\\u2019t return anything but A.D: \\n    //! A.DImp2 di2 = a.getD(); \\n    // Cannot access a member of the interface: \\n    //! a.getD().f(); \\n    // Only another A can do anything with getD(): \\n    A a2 = new A(); \\n    a2.receiveD(a.getD());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee381f0bc0574aca67a160af75aacf75\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Implementation1();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"910d8681c358ef074513b933d75ab5e6\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Implementation2();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32714140e39b7d02d202095e6b588797\",\n        \"type\": \"source_code\",\n        \"text\": \"Service s = fact.getService(); \\n    s.method1(); \\n    s.method2();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f252d45cb7d54aaedeefd3a478d246d1\",\n        \"type\": \"source_code\",\n        \"text\": \"serviceConsumer(new Implementation1Factory()); \\n    // Implementations are completely interchangeable: \\n    serviceConsumer(new Implementation2Factory());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4099770971a6f3fb0c79f8f4e62a8cc2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Checkers move \\\" + moves); \\n    return ++moves != MOVES;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa5d2e3e4610008ee9ab654eae7af3b6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Chess move \\\" + moves); \\n    return ++moves != MOVES;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87f4479ea9a638e71615e5cfad9782a3\",\n        \"type\": \"source_code\",\n        \"text\": \"Game s = factory.getGame(); \\n    while(s.move()) \\n      ;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ac8ee0e092721443b416ed224b5aaaac\",\n        \"type\": \"source_code\",\n        \"text\": \"playGame(new CheckersFactory()); \\n    playGame(new ChessFactory());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"716f98796c1cc049f9f3c8d3a86be534\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n    Destination(String whereTo) { \\n      label = whereTo; \\n    } \\n    String readLabel() { return label; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b117a09f573bb961b8dbd88b71bb077\",\n        \"type\": \"source_code\",\n        \"text\": \"Contents c = new Contents(); \\n    Destination d = new Destination(dest); \\n    System.out.println(d.readLabel());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1217451bfab658905072ace12bd509dd\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel1 p = new Parcel1(); \\n    p.ship(\\\"Tasmania\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"716f98796c1cc049f9f3c8d3a86be534\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n    Destination(String whereTo) { \\n      label = whereTo; \\n    } \\n    String readLabel() { return label; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3cd8371c8fee0f6e625bb4d232e83d6\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Destination(s);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c581dbf528850fd17d0e6b040c6513d1\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Contents();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"153deadea48281550d8742497591df02\",\n        \"type\": \"source_code\",\n        \"text\": \"Contents c = contents(); \\n    Destination d = to(dest); \\n    System.out.println(d.readLabel());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aec3f318627d85d8cc5961ed26e9d141\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel2 p = new Parcel2(); \\n    p.ship(\\\"Tasmania\\\"); \\n    Parcel2 q = new Parcel2(); \\n    // Defining references to inner classes: \\n    Parcel2.Contents c = q.contents(); \\n    Parcel2.Destination d = q.to(\\\"Borneo\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1488e1e89d36aa2a7430ff731a47d63\",\n        \"type\": \"source_code\",\n        \"text\": \"if(next < items.length) \\n      items[next++] = x;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52f2aac0b6e20608f9b542b466e98761\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 0; \\n    public boolean end() { return i == items.length; } \\n    public Object current() { return items[i]; } \\n    public void next() { if(i < items.length) i++; }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e092d002c9d511c4037699f7af1e1c6\",\n        \"type\": \"source_code\",\n        \"text\": \"return new SequenceSelector();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3c832e4d0d7d4803b80839be09f867a8\",\n        \"type\": \"source_code\",\n        \"text\": \"Sequence sequence = new Sequence(10); \\n    for(int i = 0; i < 10; i++) \\n      sequence.add(Integer.toString(i)); \\n    Selector selector = sequence.selector(); \\n    while(!selector.end()) { \\n      System.out.print(selector.current() + \\\" \\\"); \\n      selector.next(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d0756ec9d772090d6737fc4b4746e24\",\n        \"type\": \"source_code\",\n        \"text\": \"public DotThis outer() { \\n      return DotThis.this; \\n      // A plain \\\"this\\\" would be Inner\\u2019s \\\"this\\\" \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e89ba7da22d8f1b9eba7f2bead2766e6\",\n        \"type\": \"source_code\",\n        \"text\": \"DotThis dt = new DotThis(); \\n    DotThis.Inner dti = dt.inner(); \\n    dti.outer().f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"199ead1ec074acb8d589c0e8f188e56d\",\n        \"type\": \"source_code\",\n        \"text\": \"DotNew dn = new DotNew(); \\n    DotNew.Inner dni = dn.new Inner();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"915320afe6b9f2fe7c5ae63b9f2aecb8\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n    Destination(String whereTo) { label = whereTo; } \\n    String readLabel() { return label; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f03275289850a6b73f69f31d27f11fef\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel3 p = new Parcel3(); \\n    // Must use instance of outer class \\n    // to create an instance of the inner class: \\n    Parcel3.Contents c = p.new Contents(); \\n    Parcel3.Destination d = p.new Destination(\\\"Tasmania\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebc37539ffd9d2546d7482590d124f3d\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n    private PDestination(String whereTo) { \\n      label = whereTo; \\n    } \\n    public String readLabel() { return label; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"14cd9a92297232a878979a0edd26e3e0\",\n        \"type\": \"source_code\",\n        \"text\": \"return new PDestination(s);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb474237d95290bda7c56d60e2ad05ab\",\n        \"type\": \"source_code\",\n        \"text\": \"return new PContents();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2bfe8ca3aa9c43ef765145ee432d29a3\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel4 p = new Parcel4(); \\n    Contents c = p.contents(); \\n    Destination d = p.destination(\\\"Tasmania\\\"); \\n    // Illegal -- can\\u2019t access private class: \\n    //! Parcel4.PContents pc = p.new PContents();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"56b5b105d6f45462b2ea40fd78f5962d\",\n        \"type\": \"source_code\",\n        \"text\": \"in methods and scopes\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"02a625cf1bbfb14156261b464cf71780\",\n        \"type\": \"source_code\",\n        \"text\": \"class PDestination implements Destination {\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"edfc3e48ad664e6b87605232c75ae89a\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n      private PDestination(String whereTo) { \\n        label = whereTo; \\n      } \\n      public String readLabel() { return label; } \\n    } \\n    return new PDestination(s);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"79c752b4c9a930ba2ca7135c397a5561\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel5 p = new Parcel5(); \\n    Destination d = p.destination(\\\"Tasmania\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f1f5fa2ce9b01b53291d85ab7a9c1068\",\n        \"type\": \"source_code\",\n        \"text\": \"if(b) { \\n      class TrackingSlip { \\n        private String id; \\n        TrackingSlip(String s) { \\n          id = s; \\n        } \\n        String getSlip() { return id; } \\n      } \\n      TrackingSlip ts = new TrackingSlip(\\\"slip\\\"); \\n      String s = ts.getSlip(); \\n    } \\n    // Can\\u2019t use it here! Out of scope: \\n    //! TrackingSlip ts = new TrackingSlip(\\\"x\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0c771bc2dd0acf9b6842f2905211ff07\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel6 p = new Parcel6(); \\n    p.track();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"49250cda8c44fea62062e7cca3cd038e\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Contents() { // Insert a class definition \\n      private int i = 11; \\n      public int value() { return i; } \\n    }; // Semicolon required in this case\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd41254c807effa87448665762e707a5\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel7 p = new Parcel7(); \\n    Contents c = p.contents();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3475653cf8fb127bebd02df5700d2b03\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel7b p = new Parcel7b(); \\n    Contents c = p.contents();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c8811d6dfff1b012cf2953654090944\",\n        \"type\": \"source_code\",\n        \"text\": \"// Base constructor call: \\n    return new Wrapping(x) { // Pass constructor argument. \\n      public int value() { \\n        return super.value() * 47; \\n      } \\n    }; // Semicolon required\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a94275850b3c166eb3bfae5e4e88d09b\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel8 p = new Parcel8(); \\n    Wrapping w = p.wrapping(10);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"92802805df7f7012cb5b2abd920cc279\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Destination() { \\n      private String label = dest; \\n      public String readLabel() { return label; } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a03a5d45278315800a2247b769cf823c\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel9 p = new Parcel9(); \\n    Destination d = p.destination(\\\"Tasmania\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c86c6bba9722a8cabea231c592b417ce\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Base constructor, i = \\\" + i);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9d79c3852213cf59220cb59204e228f8\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Base(i) { \\n      { print(\\\"Inside instance initializer\\\"); } \\n      public void f() { \\n        print(\\\"In anonymous f()\\\"); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd1d020e55d11a999a5d8fb6698342ce\",\n        \"type\": \"source_code\",\n        \"text\": \"Base base = getBase(47); \\n    base.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b529962a3faa26bcfe1f6e3dbf93d2ea\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Destination() { \\n      private int cost; \\n      // Instance initialization for each object: \\n      { \\n        cost = Math.round(price); \\n        if(cost > 100) \\n          System.out.println(\\\"Over budget!\\\"); \\n      } \\n      private String label = dest; \\n      public String readLabel() { return label; } \\n    };\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fccb341c28eb61e9674ec34981d415ff\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel10 p = new Parcel10();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7501ce83eb5ccae7d44ba3797d5370f8\",\n        \"type\": \"source_code\",\n        \"text\": \"Destination d = p.destination(\\\"Tasmania\\\", 101.395F);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f4a3e1d4ced25c2c2c423be7670a5bde\",\n        \"type\": \"source_code\",\n        \"text\": \"new ServiceFactory() { \\n      public Service getService() { \\n        return new Implementation1(); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b26825e433c59f100fac207e841e423\",\n        \"type\": \"source_code\",\n        \"text\": \"new ServiceFactory() { \\n      public Service getService() { \\n        return new Implementation2(); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32714140e39b7d02d202095e6b588797\",\n        \"type\": \"source_code\",\n        \"text\": \"Service s = fact.getService(); \\n    s.method1(); \\n    s.method2();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35bfc86d400bbe3ef4a67c8557501dce\",\n        \"type\": \"source_code\",\n        \"text\": \"serviceConsumer(Implementation1.factory); \\n    // Implementations are completely interchangeable: \\n    serviceConsumer(Implementation2.factory);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4099770971a6f3fb0c79f8f4e62a8cc2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Checkers move \\\" + moves); \\n    return ++moves != MOVES;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7592dfac9f42d352fdc50127cdc4ba7c\",\n        \"type\": \"source_code\",\n        \"text\": \"public Game getGame() { return new Checkers(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa5d2e3e4610008ee9ab654eae7af3b6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Chess move \\\" + moves); \\n    return ++moves != MOVES;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"13dad5315ff5d96e14ccb0727ecaf024\",\n        \"type\": \"source_code\",\n        \"text\": \"public Game getGame() { return new Chess(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87f4479ea9a638e71615e5cfad9782a3\",\n        \"type\": \"source_code\",\n        \"text\": \"Game s = factory.getGame(); \\n    while(s.move()) \\n      ;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7b1ecba7eb28e0ad5010ec760eebf7f\",\n        \"type\": \"source_code\",\n        \"text\": \"playGame(Checkers.factory); \\n    playGame(Chess.factory);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6bad51197357739d279e8f8bf99f76ce\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n    private ParcelDestination(String whereTo) { \\n      label = whereTo; \\n    } \\n    public String readLabel() { return label; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95e59031a78450d1b3e88c3f3d9abef6\",\n        \"type\": \"source_code\",\n        \"text\": \"// Nested classes can contain other static elements: \\n    public static void f() {} \\n    static int x = 10; \\n    static class AnotherLevel { \\n      public static void f() {} \\n      static int x = 10; \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e590fc245c91ef75a622a800c4feba2\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ParcelDestination(s);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1d82c7c194049846a44b05246136fa0a\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ParcelContents();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ed09a00ce0cc8874c824ae98ea8bfaa\",\n        \"type\": \"source_code\",\n        \"text\": \"Contents c = contents(); \\n    Destination d = destination(\\\"Tasmania\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"59e0664ebf22f1772d44780462168bbc\",\n        \"type\": \"source_code\",\n        \"text\": \"public void howdy() { \\n      System.out.println(\\\"Howdy!\\\"); \\n    } \\n    public static void main(String[] args) { \\n      new Test().howdy(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"992058dea6a768ffd6da72ee084631f6\",\n        \"type\": \"source_code\",\n        \"text\": \"public static void main(String[] args) { \\n      TestBed t = new TestBed(); \\n      t.f(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d109b7dfd34e0ecaa184641bbefec92\",\n        \"type\": \"source_code\",\n        \"text\": \"private void g() {} \\n    public class B { \\n      void h() { \\n        g(); \\n        f(); \\n      } \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3bdacd5113fcbd0372447d0f551750e5\",\n        \"type\": \"source_code\",\n        \"text\": \"MNA mna = new MNA(); \\n    MNA.A mnaa = mna.new A(); \\n    MNA.A.B mnaab = mnaa.new B(); \\n    mnaab.h();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"207691350524eb6ec24e92e1bf79eac7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Anonymous inner class: \\n    return new B() {};\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f2cce064d38b963a47dad31987f92f67\",\n        \"type\": \"source_code\",\n        \"text\": \"X x = new X(); \\n    Y y = new Y(); \\n    takesA(x); \\n    takesA(y); \\n    takesB(x); \\n    takesB(y.makeB());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68f9c1ea81605b7324e27f0096ca0099\",\n        \"type\": \"source_code\",\n        \"text\": \"Z z = new Z(); \\n    takesD(z); \\n    takesE(z.makeE());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a99d8684e0e261472e64706911e0ad8b\",\n        \"type\": \"source_code\",\n        \"text\": \"i++; \\n    print(i);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39776613aa215db018fbfe69bece53a1\",\n        \"type\": \"source_code\",\n        \"text\": \"super.increment(); \\n    i++; \\n    print(i);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b475ad48f0a10795680da4ed3ffb6ac\",\n        \"type\": \"source_code\",\n        \"text\": \"public void increment() { \\n      // Specify outer-class method, otherwise \\n      // you\\u2019d get an infinite recursion: \\n      Callee2.this.increment(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4cd962d879374c490e0f4972506ddbc3\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Closure();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b657d2996f9edc0a8892b59e2c2abce\",\n        \"type\": \"source_code\",\n        \"text\": \"Callee1 c1 = new Callee1(); \\n    Callee2 c2 = new Callee2(); \\n    MyIncrement.f(c2); \\n    Caller caller1 = new Caller(c1); \\n    Caller caller2 = new Caller(c2.getCallbackReference()); \\n    caller1.go(); \\n    caller1.go(); \\n    caller2.go(); \\n    caller2.go();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e64a86bbc4559d9e8d9526e6d9638eec\",\n        \"type\": \"source_code\",\n        \"text\": \"this.delayTime = delayTime; \\n    start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a3b717c6f7b8124bcd6385aef4557fd\",\n        \"type\": \"source_code\",\n        \"text\": \"eventTime = System.nanoTime() + delayTime;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8166d6c96dfcd045cb81070800f6f75b\",\n        \"type\": \"source_code\",\n        \"text\": \"return System.nanoTime() >= eventTime;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"efd10428353757c724cdb5f840a44608\",\n        \"type\": \"source_code\",\n        \"text\": \"while(eventList.size() > 0) \\n      // Make a copy so you\\u2019re not modifying the list \\n      // while you\\u2019re selecting the elements in it: \\n      for(Event e : new ArrayList<Event>(eventList)) \\n        if(e.ready()) { \\n          System.out.println(e); \\n          e.action(); \\n          eventList.remove(e); \\n        }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbee11add0e1a0ae17cb4c33d0e5c75e\",\n        \"type\": \"source_code\",\n        \"text\": \"public LightOn(long delayTime) { super(delayTime); } \\n    public void action() { \\n      // Put hardware control code here to \\n      // physically turn on the light. \\n      light = true; \\n    } \\n    public String toString() { return \\\"Light is on\\\"; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"affb438e42c1d6e5aa5877aab51c133e\",\n        \"type\": \"source_code\",\n        \"text\": \"public LightOff(long delayTime) { super(delayTime); } \\n    public void action() { \\n      // Put hardware control code here to \\n      // physically turn off the light. \\n      light = false; \\n    } \\n    public String toString() { return \\\"Light is off\\\"; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbcc8777799ff3191345a143c627ee26\",\n        \"type\": \"source_code\",\n        \"text\": \"public WaterOn(long delayTime) { super(delayTime); } \\n    public void action() { \\n      // Put hardware control code here. \\n      water = true; \\n    } \\n    public String toString() { \\n      return \\\"Greenhouse water is on\\\"; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da2f07fcdc79365a7028ecb74229195b\",\n        \"type\": \"source_code\",\n        \"text\": \"public WaterOff(long delayTime) { super(delayTime); } \\n    public void action() { \\n      // Put hardware control code here. \\n      water = false; \\n    } \\n    public String toString() { \\n      return \\\"Greenhouse water is off\\\"; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f0ebcc769fec1501f0a3057a286663c\",\n        \"type\": \"source_code\",\n        \"text\": \"public ThermostatNight(long delayTime) { \\n      super(delayTime); \\n    } \\n    public void action() { \\n      // Put hardware control code here. \\n      thermostat = \\\"Night\\\"; \\n    } \\n    public String toString() { \\n      return \\\"Thermostat on night setting\\\"; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1a2e1101c2938dab23e2a44dddcb26bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public ThermostatDay(long delayTime) {\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a298481008f13bcc506183c1445a6ffb\",\n        \"type\": \"source_code\",\n        \"text\": \"super(delayTime); \\n    } \\n    public void action() { \\n      // Put hardware control code here. \\n      thermostat = \\\"Day\\\"; \\n    } \\n    public String toString() { \\n      return \\\"Thermostat on day setting\\\"; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f2a8a6b720ab16fe9063fe3fa616124\",\n        \"type\": \"source_code\",\n        \"text\": \"public Bell(long delayTime) { super(delayTime); } \\n    public void action() { \\n      addEvent(new Bell(delayTime)); \\n    } \\n    public String toString() { return \\\"Bing!\\\"; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f52b5028a0d879036368bbf0fc32883d\",\n        \"type\": \"source_code\",\n        \"text\": \"private Event[] eventList; \\n    public Restart(long delayTime, Event[] eventList) { \\n      super(delayTime); \\n      this.eventList = eventList; \\n      for(Event e : eventList) \\n        addEvent(e); \\n    } \\n    public void action() { \\n      for(Event e : eventList) { \\n        e.start(); // Rerun each event \\n        addEvent(e); \\n      } \\n      start(); // Rerun this Event \\n      addEvent(this); \\n    } \\n    public String toString() { \\n      return \\\"Restarting system\\\"; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c9e9e5aa92d6a76622f34f644b64833\",\n        \"type\": \"source_code\",\n        \"text\": \"public Terminate(long delayTime) { super(delayTime); } \\n    public void action() { System.exit(0); } \\n    public String toString() { return \\\"Terminating\\\";  }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64b01bee9a2cd78052aaa361bc17c3fd\",\n        \"type\": \"source_code\",\n        \"text\": \"GreenhouseControls gc = new GreenhouseControls(); \\n    // Instead of hard-wiring, you could parse \\n    // configuration information from a text file here: \\n    gc.addEvent(gc.new Bell(900)); \\n    Event[] eventList = { \\n      gc.new ThermostatNight(0), \\n      gc.new LightOn(200), \\n      gc.new LightOff(400), \\n      gc.new WaterOn(600), \\n      gc.new WaterOff(800), \\n      gc.new ThermostatDay(1400) \\n    };\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6d609548669b602cb5b3ebfa922db80d\",\n        \"type\": \"source_code\",\n        \"text\": \"gc.addEvent(gc.new Restart(2000, eventList)); \\n    if(args.length == 1) \\n      gc.addEvent( \\n        new GreenhouseControls.Terminate( \\n          new Integer(args[0]))); \\n    gc.run();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"23ad0fde057feb175776b4a989f886dd\",\n        \"type\": \"source_code\",\n        \"text\": \"wi.super();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7ad70398251c2d05fc8385e448d52f1\",\n        \"type\": \"source_code\",\n        \"text\": \"WithInner wi = new WithInner(); \\n    InheritInner ii = new InheritInner(wi);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f401c6daf8a1dce462c30babb1da9d88\",\n        \"type\": \"source_code\",\n        \"text\": \"public Yolk() { print(\\\"Egg.Yolk()\\\"); }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c05d4a9f0629c026fe8a04d5b855b5e2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"New Egg()\\\"); \\n    y = new Yolk();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1287417f9ad8894112da427301609a16\",\n        \"type\": \"source_code\",\n        \"text\": \"public Yolk() { print(\\\"BigEgg.Yolk()\\\"); }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9863e2a965024703360dedb74cc3f30d\",\n        \"type\": \"source_code\",\n        \"text\": \"new BigEgg();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a36b26d15e23811f15e942dfe57176cb\",\n        \"type\": \"source_code\",\n        \"text\": \"public Yolk() { print(\\\"Egg2.Yolk()\\\"); } \\n    public void f() { print(\\\"Egg2.Yolk.f()\\\");}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b573a7b78a43ea596eba32378f98382\",\n        \"type\": \"source_code\",\n        \"text\": \"public Yolk() { print(\\\"BigEgg2.Yolk()\\\"); } \\n    public void f() { print(\\\"BigEgg2.Yolk.f()\\\"); }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"150fcea330f07b5c623eb40f7232d215\",\n        \"type\": \"source_code\",\n        \"text\": \"Egg2 e2 = new BigEgg2(); \\n    e2.g();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"985cc8eaaeda65dab6103e2393b953cb\",\n        \"type\": \"source_code\",\n        \"text\": \"// A local inner class: \\n    class LocalCounter implements Counter { \\n      public LocalCounter() { \\n        // Local inner class can have a constructor \\n        print(\\\"LocalCounter()\\\"); \\n      } \\n      public int next() { \\n        printnb(name); // Access local final \\n        return count++; \\n      } \\n    } \\n    return new LocalCounter();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6ba5af9d68fa65c340fa0005b5129031\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Counter() { \\n      // Anonymous inner class cannot have a named \\n      // constructor, only an instance initializer: \\n      { \\n        print(\\\"Counter()\\\"); \\n      } \\n      public int next() { \\n        printnb(name); // Access local final \\n        return count++; \\n      } \\n    };\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1f9f66addeb3dac81961790432156633\",\n        \"type\": \"source_code\",\n        \"text\": \"LocalInnerClass lic = new LocalInnerClass(); \\n    Counter \\n      c1 = lic.getCounter(\\\"Local inner \\\"), \\n      c2 = lic.getCounter2(\\\"Anonymous inner \\\"); \\n    for(int i = 0; i < 5; i++) \\n      print(c1.next()); \\n    for(int i = 0; i < 5; i++)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbecc3bb869b6513c2aa481ff43945a5\",\n        \"type\": \"source_code\",\n        \"text\": \"print(c2.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8308b1eba7ba926a61b8fd802194386\",\n        \"type\": \"source_code\",\n        \"text\": \"Objects\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6cc4f10fae054aac43916ee8f1298a61\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList apples = new ArrayList(); \\n    for(int i = 0; i < 3; i++) \\n      apples.add(new Apple()); \\n    // Not prevented from adding an Orange to apples: \\n    apples.add(new Orange()); \\n    for(int i = 0; i < apples.size(); i++) \\n      ((Apple)apples.get(i)).id(); \\n      // Orange is detected only at run time\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b2dce025c987104f755677cddc57929d\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList<Apple> apples = new ArrayList<Apple>(); \\n    for(int i = 0; i < 3; i++) \\n      apples.add(new Apple()); \\n    // Compile-time error: \\n    // apples.add(new Orange()); \\n    for(int i = 0; i < apples.size(); i++) \\n      System.out.println(apples.get(i).id()); \\n    // Using foreach: \\n    for(Apple c : apples) \\n      System.out.println(c.id());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ad94a4b84880ab55eb56a27cd4afe45\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList<Apple> apples = new ArrayList<Apple>(); \\n    apples.add(new GrannySmith());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbcd8c7945782b691e810aa72385a1d7\",\n        \"type\": \"source_code\",\n        \"text\": \"apples.add(new Gala()); \\n    apples.add(new Fuji()); \\n    apples.add(new Braeburn()); \\n    for(Apple c : apples) \\n      System.out.println(c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"455f9eea5cbc96b21c24db27bfa66be4\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<Integer> c = new ArrayList<Integer>(); \\n    for(int i = 0; i < 10; i++) \\n      c.add(i); // Autoboxing \\n    for(Integer i : c) \\n      System.out.print(i + \\\", \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74ded722fcbdc5520b339a94cb062bab\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<Integer> collection =\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b3f6489c2922969ffaac2ead251017c2\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5)); \\n    Integer[] moreInts = { 6, 7, 8, 9, 10 }; \\n    collection.addAll(Arrays.asList(moreInts)); \\n    // Runs significantly faster, but you can\\u2019t \\n    // construct a Collection this way: \\n    Collections.addAll(collection, 11, 12, 13, 14, 15); \\n    Collections.addAll(collection, moreInts); \\n    // Produces a list \\\"backed by\\\" an array: \\n    List<Integer> list = Arrays.asList(16, 17, 18, 19, 20); \\n    list.set(1, 99); // OK -- modify an element \\n    // list.add(21); // Runtime error because the \\n                     // underlying array cannot be resized.\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"28282c8b934ad80201e913883007abd2\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Snow> snow1 = Arrays.asList( \\n      new Crusty(), new Slush(), new Powder());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"766adff583a75635f9fd7461d45522ed\",\n        \"type\": \"source_code\",\n        \"text\": \"// Won\\u2019t compile: \\n    // List<Snow> snow2 = Arrays.asList( \\n    //   new Light(), new Heavy()); \\n    // Compiler says: \\n    // found   : java.util.List<Powder> \\n    // required: java.util.List<Snow>\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b1a5a54f3b3cbdd9c78fb09aa9ca6906\",\n        \"type\": \"source_code\",\n        \"text\": \"// Collections.addAll() doesn\\u2019t get confused: \\n    List<Snow> snow3 = new ArrayList<Snow>(); \\n    Collections.addAll(snow3, new Light(), new Heavy());\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8fc59520130984c200a330898a1ffb1\",\n        \"type\": \"source_code\",\n        \"text\": \"// Give a hint using an \\n    // explicit type argument specification: \\n    List<Snow> snow4 = Arrays.<Snow>asList( \\n       new Light(), new Heavy());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8e68cf1fe40ddf7d82b6a801bea78fc3\",\n        \"type\": \"source_code\",\n        \"text\": \"collection.add(\\\"rat\\\"); \\n    collection.add(\\\"cat\\\"); \\n    collection.add(\\\"dog\\\"); \\n    collection.add(\\\"dog\\\"); \\n    return collection;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5edd6ea695f727ed2436ed9ea3e6bf0a\",\n        \"type\": \"source_code\",\n        \"text\": \"map.put(\\\"rat\\\", \\\"Fuzzy\\\"); \\n    map.put(\\\"cat\\\", \\\"Rags\\\"); \\n    map.put(\\\"dog\\\", \\\"Bosco\\\"); \\n    map.put(\\\"dog\\\", \\\"Spot\\\"); \\n    return map;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12317cee32a717533a148abad08b3c7a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(fill(new ArrayList<String>())); \\n    print(fill(new LinkedList<String>())); \\n    print(fill(new HashSet<String>())); \\n    print(fill(new TreeSet<String>())); \\n    print(fill(new LinkedHashSet<String>())); \\n    print(fill(new HashMap<String,String>())); \\n    print(fill(new TreeMap<String,String>())); \\n    print(fill(new LinkedHashMap<String,String>()));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad6b6a4bd38e336c683ad9ad96093c84\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    List<Pet> pets = Pets.arrayList(7); \\n    print(\\\"1: \\\" + pets); \\n    Hamster h = new Hamster(); \\n    pets.add(h); // Automatically resizes \\n    print(\\\"2: \\\" + pets); \\n    print(\\\"3: \\\" + pets.contains(h)); \\n    pets.remove(h); // Remove by object \\n    Pet p = pets.get(2); \\n    print(\\\"4: \\\" +  p + \\\" \\\" + pets.indexOf(p)); \\n    Pet cymric = new Cymric(); \\n    print(\\\"5: \\\" + pets.indexOf(cymric)); \\n    print(\\\"6: \\\" + pets.remove(cymric)); \\n    // Must be the exact object: \\n    print(\\\"7: \\\" + pets.remove(p)); \\n    print(\\\"8: \\\" + pets); \\n    pets.add(3, new Mouse()); // Insert at an index\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1dba1126456f6d1281076f2f421b7611\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"9: \\\" + pets); \\n    List<Pet> sub = pets.subList(1, 4); \\n    print(\\\"subList: \\\" + sub); \\n    print(\\\"10: \\\" + pets.containsAll(sub)); \\n    Collections.sort(sub); // In-place sort \\n    print(\\\"sorted subList: \\\" + sub); \\n    // Order is not important in containsAll(): \\n    print(\\\"11: \\\" + pets.containsAll(sub)); \\n    Collections.shuffle(sub, rand); // Mix it up \\n    print(\\\"shuffled subList: \\\" + sub); \\n    print(\\\"12: \\\" + pets.containsAll(sub)); \\n    List<Pet> copy = new ArrayList<Pet>(pets); \\n    sub = Arrays.asList(pets.get(1), pets.get(4)); \\n    print(\\\"sub: \\\" + sub); \\n    copy.retainAll(sub); \\n    print(\\\"13: \\\" + copy); \\n    copy = new ArrayList<Pet>(pets); // Get a fresh copy \\n    copy.remove(2); // Remove by index \\n    print(\\\"14: \\\" + copy); \\n    copy.removeAll(sub); // Only removes exact objects \\n    print(\\\"15: \\\" + copy); \\n    copy.set(1, new Mouse()); // Replace an element \\n    print(\\\"16: \\\" + copy); \\n    copy.addAll(2, sub); // Insert a list in the middle \\n    print(\\\"17: \\\" + copy); \\n    print(\\\"18: \\\" + pets.isEmpty()); \\n    pets.clear(); // Remove all elements \\n    print(\\\"19: \\\" + pets); \\n    print(\\\"20: \\\" + pets.isEmpty()); \\n    pets.addAll(Pets.arrayList(4)); \\n    print(\\\"21: \\\" + pets); \\n    Object[] o = pets.toArray(); \\n    print(\\\"22: \\\" + o[3]); \\n    Pet[] pa = pets.toArray(new Pet[0]); \\n    print(\\\"23: \\\" + pa[3].id());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65b263832234bbaa7448ccc8d019c568\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Pet> pets = Pets.arrayList(12); \\n    Iterator<Pet> it = pets.iterator(); \\n    while(it.hasNext()) { \\n      Pet p = it.next(); \\n      System.out.print(p.id() + \\\":\\\" + p + \\\" \\\"); \\n    } \\n    System.out.println(); \\n    // A simpler approach, when possible: \\n    for(Pet p : pets) \\n      System.out.print(p.id() + \\\":\\\" + p + \\\" \\\"); \\n    System.out.println();  \\n    // An Iterator can also remove elements: \\n    it = pets.iterator(); \\n    for(int i = 0; i < 6; i++) { \\n      it.next(); \\n      it.remove(); \\n    } \\n    System.out.println(pets);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a7cb9afb0417262e8254b05c1f33c42\",\n        \"type\": \"source_code\",\n        \"text\": \"while(it.hasNext()) { \\n      Pet p = it.next(); \\n      System.out.print(p.id() + \\\":\\\" + p + \\\" \\\"); \\n    } \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2368d1a2766bb119a05b20e0c9fcf0ed\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList<Pet> pets = Pets.arrayList(8); \\n    LinkedList<Pet> petsLL = new LinkedList<Pet>(pets); \\n    HashSet<Pet> petsHS = new HashSet<Pet>(pets); \\n    TreeSet<Pet> petsTS = new TreeSet<Pet>(pets); \\n    display(pets.iterator()); \\n    display(petsLL.iterator()); \\n    display(petsHS.iterator()); \\n    display(petsTS.iterator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"347a83f40575737e3acf80a778fb2bfa\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Pet> pets = Pets.arrayList(8); \\n    ListIterator<Pet> it = pets.listIterator(); \\n    while(it.hasNext()) \\n      System.out.print(it.next() + \\\", \\\" + it.nextIndex() + \\n        \\\", \\\" + it.previousIndex() + \\\"; \\\"); \\n    System.out.println(); \\n    // Backwards: \\n    while(it.hasPrevious()) \\n      System.out.print(it.previous().id() + \\\" \\\"); \\n    System.out.println(); \\n    System.out.println(pets);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21e0711023a8dd2dd7845ec019be8a44\",\n        \"type\": \"source_code\",\n        \"text\": \"it = pets.listIterator(3); \\n    while(it.hasNext()) { \\n      it.next(); \\n      it.set(Pets.randomPet()); \\n    } \\n    System.out.println(pets);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"82c3b29423fbd48b256ec36dd1bf8b16\",\n        \"type\": \"source_code\",\n        \"text\": \"LinkedList<Pet> pets = \\n      new LinkedList<Pet>(Pets.arrayList(5)); \\n    print(pets); \\n    // Identical: \\n    print(\\\"pets.getFirst(): \\\" + pets.getFirst()); \\n    print(\\\"pets.element(): \\\" + pets.element()); \\n    // Only differs in empty-list behavior: \\n    print(\\\"pets.peek(): \\\" + pets.peek()); \\n    // Identical; remove and return the first element: \\n    print(\\\"pets.remove(): \\\" + pets.remove()); \\n    print(\\\"pets.removeFirst(): \\\" + pets.removeFirst()); \\n    // Only differs in empty-list behavior: \\n    print(\\\"pets.poll(): \\\" + pets.poll()); \\n    print(pets); \\n    pets.addFirst(new Rat()); \\n    print(\\\"After addFirst(): \\\" + pets); \\n    pets.offer(Pets.randomPet()); \\n    print(\\\"After offer(): \\\" + pets); \\n    pets.add(Pets.randomPet()); \\n    print(\\\"After add(): \\\" + pets); \\n    pets.addLast(new Hamster()); \\n    print(\\\"After addLast(): \\\" + pets); \\n    print(\\\"pets.removeLast(): \\\" + pets.removeLast());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0a31873cbf8ac5117ba17f5a12dc78e8\",\n        \"type\": \"source_code\",\n        \"text\": \"Stack<String> stack = new Stack<String>(); \\n    for(String s : \\\"My dog has fleas\\\".split(\\\" \\\")) \\n      stack.push(s); \\n    while(!stack.empty()) \\n      System.out.print(stack.pop() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2dfd6a6dde1bff2fa20aa845da79d1c7\",\n        \"type\": \"source_code\",\n        \"text\": \"net.mindview.util.Stack<String> stack = \\n      new net.mindview.util.Stack<String>(); \\n    for(String s : \\\"My dog has fleas\\\".split(\\\" \\\")) \\n      stack.push(s); \\n    while(!stack.empty()) \\n      System.out.print(stack.pop() + \\\" \\\"); \\n    System.out.println(); \\n    java.util.Stack<String> stack2 = \\n      new java.util.Stack<String>(); \\n    for(String s : \\\"My dog has fleas\\\".split(\\\" \\\")) \\n      stack2.push(s); \\n    while(!stack2.empty()) \\n      System.out.print(stack2.pop() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f379265f302dd03c701721d6ffc06f36\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    Set<Integer> intset = new HashSet<Integer>(); \\n    for(int i = 0; i < 10000; i++) \\n      intset.add(rand.nextInt(30)); \\n    System.out.println(intset);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c33b9c0961fe4efc1a27f86b98f8b8b2\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    SortedSet<Integer> intset = new TreeSet<Integer>(); \\n    for(int i = 0; i < 10000; i++) \\n      intset.add(rand.nextInt(30)); \\n    System.out.println(intset);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b41a6cf3c0fac9d9dc8769413a13df0\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> set1 = new HashSet<String>(); \\n    Collections.addAll(set1, \\n      \\\"A B C D E F G H I J K L\\\".split(\\\" \\\")); \\n    set1.add(\\\"M\\\"); \\n    print(\\\"H: \\\" + set1.contains(\\\"H\\\")); \\n    print(\\\"N: \\\" + set1.contains(\\\"N\\\")); \\n    Set<String> set2 = new HashSet<String>(); \\n    Collections.addAll(set2, \\\"H I J K L\\\".split(\\\" \\\")); \\n    print(\\\"set2 in set1: \\\" + set1.containsAll(set2)); \\n    set1.remove(\\\"H\\\"); \\n    print(\\\"set1: \\\" + set1); \\n    print(\\\"set2 in set1: \\\" + set1.containsAll(set2)); \\n    set1.removeAll(set2); \\n    print(\\\"set2 removed from set1: \\\" + set1); \\n    Collections.addAll(set1, \\\"X Y Z\\\".split(\\\" \\\")); \\n    print(\\\"\\u2018X Y Z\\u2019 added to set1: \\\" + set1);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8eac081d83af5e05e1c021d66eae376b\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> words = new TreeSet<String>( \\n      new TextFile(\\\"SetOperations.java\\\", \\\"\\\\\\\\W+\\\")); \\n    System.out.println(words);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa7c824ce54e87b7c46eb041bd12258c\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> words = \\n      new TreeSet<String>(String.CASE_INSENSITIVE_ORDER); \\n    words.addAll( \\n      new TextFile(\\\"SetOperations.java\\\", \\\"\\\\\\\\W+\\\")); \\n    System.out.println(words);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8697f5b39fe8e67410d43532402d8f38\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    Map<Integer,Integer> m = \\n      new HashMap<Integer,Integer>(); \\n    for(int i = 0; i < 10000; i++) { \\n      // Produce a number between 0 and 20: \\n      int r = rand.nextInt(20); \\n      Integer freq = m.get(r); \\n      m.put(r, freq == null ? 1 : freq + 1); \\n    } \\n    System.out.println(m);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93565da45b3c186873294d90c6a4b7da\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<String,Pet> petMap = new HashMap<String,Pet>(); \\n    petMap.put(\\\"My Cat\\\", new Cat(\\\"Molly\\\")); \\n    petMap.put(\\\"My Dog\\\", new Dog(\\\"Ginger\\\")); \\n    petMap.put(\\\"My Hamster\\\", new Hamster(\\\"Bosco\\\")); \\n    print(petMap); \\n    Pet dog = petMap.get(\\\"My Dog\\\"); \\n    print(dog); \\n    print(petMap.containsKey(\\\"My Dog\\\")); \\n    print(petMap.containsValue(dog));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7c9d8983454f23b23a6bfa03323c4c70\",\n        \"type\": \"source_code\",\n        \"text\": \"petPeople = new HashMap<Person, List<? extends Pet>>();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5b5f6516229a5a3f4c56d9d283c80cc\",\n        \"type\": \"source_code\",\n        \"text\": \"petPeople.put(new Person(\\\"Dawn\\\"), \\n      Arrays.asList(new Cymric(\\\"Molly\\\"),new Mutt(\\\"Spot\\\"))); \\n    petPeople.put(new Person(\\\"Kate\\\"), \\n      Arrays.asList(new Cat(\\\"Shackleton\\\"), \\n        new Cat(\\\"Elsie May\\\"), new Dog(\\\"Margrett\\\")));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42cfc15b61b9745406354bb2a6b35356\",\n        \"type\": \"source_code\",\n        \"text\": \"petPeople.put(new Person(\\\"Marilyn\\\"), \\n      Arrays.asList( \\n       new Pug(\\\"Louie aka Louis Snorkelstein Dupree\\\"), \\n       new Cat(\\\"Stanford aka Stinky el Negro\\\"), \\n       new Cat(\\\"Pinkola\\\")));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb8c1ec70307d4db18799b401cce27ab\",\n        \"type\": \"source_code\",\n        \"text\": \"petPeople.put(new Person(\\\"Luke\\\"), \\n      Arrays.asList(new Rat(\\\"Fuzzy\\\"), new Rat(\\\"Fizzy\\\"))); \\n    petPeople.put(new Person(\\\"Isaac\\\"), \\n      Arrays.asList(new Rat(\\\"Freckly\\\")));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b6f5b3b7e17d375232d1c5df63188e9\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"People: \\\" + petPeople.keySet()); \\n    print(\\\"Pets: \\\" + petPeople.values()); \\n    for(Person person : petPeople.keySet()) { \\n      print(person + \\\" has:\\\"); \\n      for(Pet pet : petPeople.get(person)) \\n        print(\\\"    \\\" + pet); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a16310ab663dcf114929b021c604824\",\n        \"type\": \"source_code\",\n        \"text\": \"Rat Fuzzy \\n    Rat Fizzy\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ca0f44a4c1a33dc58d9363d54f49f95b\",\n        \"type\": \"source_code\",\n        \"text\": \"Pug Louie aka Louis Snorkelstein Dupree \\n    Cat Stanford aka Stinky el Negro \\n    Cat Pinkola\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f00952b05d1c26ad8c8b0c6fbe58d752\",\n        \"type\": \"source_code\",\n        \"text\": \"Rat Freckly\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c791cef6fa56447788428730181689b9\",\n        \"type\": \"source_code\",\n        \"text\": \"Cymric Molly \\n    Mutt Spot\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"670fce2b2df3fd3bad8563fe01e324d0\",\n        \"type\": \"source_code\",\n        \"text\": \"Cat Shackleton \\n    Cat Elsie May \\n    Dog Margrett\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b303f488ee63459e2020dd33ddc4c469\",\n        \"type\": \"source_code\",\n        \"text\": \"while(queue.peek() != null) \\n      System.out.print(queue.remove() + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc650296f2fb034f34f0f12ed053f4ac\",\n        \"type\": \"source_code\",\n        \"text\": \"Queue<Integer> queue = new LinkedList<Integer>(); \\n    Random rand = new Random(47); \\n    for(int i = 0; i < 10; i++)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a0ef77b2c0bcb5ae871067ffe13f9a4\",\n        \"type\": \"source_code\",\n        \"text\": \"queue.offer(rand.nextInt(i + 10)); \\n    printQ(queue); \\n    Queue<Character> qc = new LinkedList<Character>(); \\n    for(char c : \\\"Brontosaurus\\\".toCharArray()) \\n      qc.offer(c); \\n    printQ(qc);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2b85b17335c9c7c42214d7367b915a6\",\n        \"type\": \"source_code\",\n        \"text\": \"PriorityQueue<Integer> priorityQueue = \\n      new PriorityQueue<Integer>(); \\n    Random rand = new Random(47); \\n    for(int i = 0; i < 10; i++) \\n      priorityQueue.offer(rand.nextInt(i + 10)); \\n    QueueDemo.printQ(priorityQueue);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d8c6fe860959b091dbeac9ea8b992929\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Integer> ints = Arrays.asList(25, 22, 20, \\n      18, 14, 9, 3, 1, 1, 2, 3, 9, 14, 18, 21, 23, 25); \\n    priorityQueue = new PriorityQueue<Integer>(ints); \\n    QueueDemo.printQ(priorityQueue); \\n    priorityQueue = new PriorityQueue<Integer>( \\n        ints.size(), Collections.reverseOrder()); \\n    priorityQueue.addAll(ints); \\n    QueueDemo.printQ(priorityQueue);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1815969e72caad581c9fc13a84c08ab\",\n        \"type\": \"source_code\",\n        \"text\": \"String fact = \\\"EDUCATION SHOULD ESCHEW OBFUSCATION\\\"; \\n    List<String> strings = Arrays.asList(fact.split(\\\"\\\")); \\n    PriorityQueue<String> stringPQ = \\n      new PriorityQueue<String>(strings); \\n    QueueDemo.printQ(stringPQ); \\n    stringPQ = new PriorityQueue<String>( \\n      strings.size(), Collections.reverseOrder()); \\n    stringPQ.addAll(strings); \\n    QueueDemo.printQ(stringPQ);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9f1fc09fa6520672c97888487205001a\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<Character> charSet = new HashSet<Character>(); \\n    for(char c : fact.toCharArray()) \\n      charSet.add(c); // Autoboxing \\n    PriorityQueue<Character> characterPQ = \\n      new PriorityQueue<Character>(charSet); \\n    QueueDemo.printQ(characterPQ);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f0d5f803d8947af8e9f36c512881086\",\n        \"type\": \"source_code\",\n        \"text\": \"A A B C C C D D E E E F H H I I L N N O O O O S S S T T U U U W\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a7cb9afb0417262e8254b05c1f33c42\",\n        \"type\": \"source_code\",\n        \"text\": \"while(it.hasNext()) { \\n      Pet p = it.next(); \\n      System.out.print(p.id() + \\\":\\\" + p + \\\" \\\"); \\n    } \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83c32d5c79cfe8f1a20adc093fe06fb2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Pet p : pets) \\n      System.out.print(p.id() + \\\":\\\" + p + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8441d1903417ce03839aa87698f7dbbf\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Pet> petList = Pets.arrayList(8); \\n    Set<Pet> petSet = new HashSet<Pet>(petList); \\n    Map<String,Pet> petMap = \\n      new LinkedHashMap<String,Pet>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c355f95752c0ebbe3867cfc5ac6bfa6d\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] names = (\\\"Ralph, Eric, Robin, Lacey, \\\" + \\n      \\\"Britney, Sam, Spot, Fluffy\\\").split(\\\", \\\"); \\n    for(int i = 0; i < names.length; i++) \\n      petMap.put(names[i], petList.get(i)); \\n    display(petList); \\n    display(petSet); \\n    display(petList.iterator()); \\n    display(petSet.iterator()); \\n    System.out.println(petMap); \\n    System.out.println(petMap.keySet()); \\n    display(petMap.values()); \\n    display(petMap.values().iterator());\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab2e629489e9a91545948a09fa154539\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterator<Pet>() { \\n      private int index = 0; \\n      public boolean hasNext() { \\n        return index < pets.length; \\n      } \\n      public Pet next() { return pets[index++]; } \\n      public void remove() { // Not implemented \\n        throw new UnsupportedOperationException(); \\n      }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2145c1b6992c0d519ad223f91671329b\",\n        \"type\": \"source_code\",\n        \"text\": \"};\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b5c048fa968b9dc24274015f659d88b\",\n        \"type\": \"source_code\",\n        \"text\": \"CollectionSequence c = new CollectionSequence(); \\n    InterfaceVsIterator.display(c); \\n    InterfaceVsIterator.display(c.iterator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"23bbf440dde148ef2049e6b4ca28fb99\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterator<Pet>() { \\n      private int index = 0; \\n      public boolean hasNext() { \\n        return index < pets.length; \\n      } \\n      public Pet next() { return pets[index++]; } \\n      public void remove() { // Not implemented \\n        throw new UnsupportedOperationException(); \\n      } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"201b2a60fb5be8733668f8de10b47d2b\",\n        \"type\": \"source_code\",\n        \"text\": \"NonCollectionSequence nc = new NonCollectionSequence(); \\n    InterfaceVsIterator.display(nc.iterator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e27ebd6b205363ad217bc79f1d70743b\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<String> cs = new LinkedList<String>(); \\n    Collections.addAll(cs, \\n      \\\"Take the long way home\\\".split(\\\" \\\")); \\n    for(String s : cs) \\n      System.out.print(\\\"\\u2018\\\" + s + \\\"\\u2018 \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c6d10c0aad5888c30d8c407e140e81ed\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"we know the Earth to be banana-shaped.\\\").split(\\\" \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dceade25b032baf42e3816b030831b11\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterator<String>() { \\n      private int index = 0; \\n      public boolean hasNext() { \\n        return index < words.length; \\n      } \\n      public String next() { return words[index++]; } \\n      public void remove() { // Not implemented \\n        throw new UnsupportedOperationException(); \\n      } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cefd96f4043c7d69fc72dbf3a754bff2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(String s : new IterableClass()) \\n      System.out.print(s + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74f88a859d45cb0c7df725cd102eae60\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Map.Entry entry: System.getenv().entrySet()) { \\n      System.out.println(entry.getKey() + \\\": \\\" + \\n        entry.getValue()); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12e5218f2d71f8ed48404a71ef9f98a2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(T t : ib) \\n      System.out.print(t + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"869be2b5b4ecc0de5d038a29777104dd\",\n        \"type\": \"source_code\",\n        \"text\": \"test(Arrays.asList(1, 2, 3)); \\n    String[] strings = { \\\"A\\\", \\\"B\\\", \\\"C\\\" }; \\n    // An array works in foreach, but it\\u2019s not Iterable: \\n    //! test(strings); \\n    // You must explicitly convert it to an Iterable: \\n    test(Arrays.asList(strings));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7ea8b8662895ae38903af2dd45dc8fa\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterable<T>() { \\n      public Iterator<T> iterator() { \\n        return new Iterator<T>() { \\n          int current = size() - 1; \\n          public boolean hasNext() { return current > -1; } \\n          public T next() { return get(current--); } \\n          public void remove() { // Not implemented \\n            throw new UnsupportedOperationException(); \\n          } \\n        }; \\n      } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"297f31441a1b51a04c74c626bd6d165f\",\n        \"type\": \"source_code\",\n        \"text\": \"ReversibleArrayList<String> ral = \\n      new ReversibleArrayList<String>( \\n        Arrays.asList(\\\"To be or not to be\\\".split(\\\" \\\"))); \\n    // Grabs the ordinary iterator via iterator(): \\n    for(String s : ral) \\n      System.out.print(s + \\\" \\\"); \\n    System.out.println(); \\n    // Hand it the Iterable of your choice \\n    for(String s : ral.reversed()) \\n      System.out.print(s + \\\" \\\");\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66d66472a08b9962f893a815012fe0d9\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterable<String>() { \\n      public Iterator<String> iterator() { \\n        return new Iterator<String>() { \\n          int current = words.length - 1; \\n          public boolean hasNext() { return current > -1; } \\n          public String next() { return words[current--]; } \\n          public void remove() { // Not implemented \\n            throw new UnsupportedOperationException(); \\n          } \\n        }; \\n      } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa87bc5c613ff276d8d650d8df541364\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterable<String>() { \\n      public Iterator<String> iterator() { \\n        List<String> shuffled = \\n          new ArrayList<String>(Arrays.asList(words)); \\n        Collections.shuffle(shuffled, new Random(47)); \\n        return shuffled.iterator(); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a0506c4ab647470e0ffa07ae4d53a650\",\n        \"type\": \"source_code\",\n        \"text\": \"MultiIterableClass mic = new MultiIterableClass(); \\n    for(String s : mic.reversed()) \\n      System.out.print(s + \\\" \\\"); \\n    System.out.println(); \\n    for(String s : mic.randomized()) \\n      System.out.print(s + \\\" \\\"); \\n    System.out.println(); \\n    for(String s : mic) \\n      System.out.print(s + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"329970ab015545f42414e00774cbd292\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    Integer[] ia = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; \\n    List<Integer> list1 = \\n      new ArrayList<Integer>(Arrays.asList(ia)); \\n    System.out.println(\\\"Before shuffling: \\\" + list1); \\n    Collections.shuffle(list1, rand); \\n    System.out.println(\\\"After shuffling: \\\" + list1); \\n    System.out.println(\\\"array: \\\" + Arrays.toString(ia));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"946597443c59d864b97e93ac9f86505d\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Integer> list2 = Arrays.asList(ia); \\n    System.out.println(\\\"Before shuffling: \\\" + list2); \\n    Collections.shuffle(list2, rand); \\n    System.out.println(\\\"After shuffling: \\\" + list2); \\n    System.out.println(\\\"array: \\\" + Arrays.toString(ia));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b2d9e7fa6ca4d2b99f8eb84f8001edd8\",\n        \"type\": \"source_code\",\n        \"text\": \"ContainerMethodDifferences.main(args);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4800755a86eeca07583b9d725789f75d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Throw SimpleException from f()\\\"); \\n    throw new SimpleException();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c24bf932610d1229c15e3d28d1a4c0b\",\n        \"type\": \"source_code\",\n        \"text\": \"InheritingExceptions sed = new InheritingExceptions(); \\n    try { \\n      sed.f(); \\n    } catch(SimpleException e) { \\n      System.out.println(\\\"Caught it!\\\"); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39f289a1b72ea14c2ebb06f726b3862d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Throwing MyException from f()\\\"); \\n    throw new MyException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7b4a2649e4bf1d3866d798a4caa9371\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Throwing MyException from g()\\\"); \\n    throw new MyException(\\\"Originated in g()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ac5205c09cfbb830e476e15fa74fa75\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      f(); \\n    } catch(MyException e) { \\n      e.printStackTrace(System.out); \\n    } \\n    try { \\n      g(); \\n    } catch(MyException e) { \\n      e.printStackTrace(System.out); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a9ddaf9a07147dec11168619b98d16ce\",\n        \"type\": \"source_code\",\n        \"text\": \"at FullConstructors.f(FullConstructors.java:11) \\n        at FullConstructors.main(FullConstructors.java:19)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a8b0f435a9dd1306fbf8acc69afcec47\",\n        \"type\": \"source_code\",\n        \"text\": \"at FullConstructors.g(FullConstructors.java:15) \\n        at FullConstructors.main(FullConstructors.java:24)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1f6655c0be2381dc9154e8665fd0a800\",\n        \"type\": \"source_code\",\n        \"text\": \"Logger.getLogger(\\\"LoggingException\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b144ea18fd4b9254e8ea9dca2bc12d61\",\n        \"type\": \"source_code\",\n        \"text\": \"StringWriter trace = new StringWriter(); \\n    printStackTrace(new PrintWriter(trace)); \\n    logger.severe(trace.toString());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b06acd19bd29c3eb3906dcad05282e2b\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      throw new LoggingException(); \\n    } catch(LoggingException e) { \\n      System.err.println(\\\"Caught \\\" + e); \\n    } \\n    try { \\n      throw new LoggingException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"99a7176b213218c557c9e8c168d582c8\",\n        \"type\": \"source_code\",\n        \"text\": \"} catch(LoggingException e) { \\n      System.err.println(\\\"Caught \\\" + e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55dd994cc4825d9b500786d58477e4ea\",\n        \"type\": \"source_code\",\n        \"text\": \"at LoggingExceptions.main(LoggingExceptions.java:19)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2d2e72f0803e45145a950d1fd97f51a2\",\n        \"type\": \"source_code\",\n        \"text\": \"at LoggingExceptions.main(LoggingExceptions.java:24)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f2d86e8c0bab8550642afc224a0c6b8f\",\n        \"type\": \"source_code\",\n        \"text\": \"Logger.getLogger(\\\"LoggingExceptions2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"915c7a7c175a65d94719d33903352957\",\n        \"type\": \"source_code\",\n        \"text\": \"StringWriter trace = new StringWriter(); \\n    e.printStackTrace(new PrintWriter(trace)); \\n    logger.severe(trace.toString());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f588586f41daba6e2d841c067a41c96\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      throw new NullPointerException(); \\n    } catch(NullPointerException e) { \\n      logException(e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c6d7154294d7df9e960d2544dc0c16e4\",\n        \"type\": \"source_code\",\n        \"text\": \"at LoggingExceptions2.main(LoggingExceptions2.java:16)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"67941738bac78818560b9ddf3ad4a502\",\n        \"type\": \"source_code\",\n        \"text\": \"super(msg); \\n    this.x = x;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbd78769cdb9d1cb3d59e478d52e01cc\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Detail Message: \\\"+ x + \\\" \\\"+ super.getMessage();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ccc0bf73d76beea929ed0ece97401a5\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Throwing MyException2 from f()\\\"); \\n    throw new MyException2();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e659acc2a04069977ca894db40ca6d6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Throwing MyException2 from g()\\\"); \\n    throw new MyException2(\\\"Originated in g()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c57c13ce8ac75a2ac85a96212615391d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Throwing MyException2 from h()\\\"); \\n    throw new MyException2(\\\"Originated in h()\\\", 47);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95694bb3fb35ad33fc994a630b202278\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      f(); \\n    } catch(MyException2 e) { \\n      e.printStackTrace(System.out); \\n    } \\n    try { \\n      g(); \\n    } catch(MyException2 e) { \\n      e.printStackTrace(System.out); \\n    } \\n    try { \\n      h(); \\n    } catch(MyException2 e) { \\n      e.printStackTrace(System.out); \\n      System.out.println(\\\"e.val() = \\\" + e.val()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b427d748a68a6d9c8bf16af1dcc174d\",\n        \"type\": \"source_code\",\n        \"text\": \"at ExtraFeatures.f(ExtraFeatures.java:22) \\n        at ExtraFeatures.main(ExtraFeatures.java:34)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03a4d088ede55fd7d4650e3f09f4122c\",\n        \"type\": \"source_code\",\n        \"text\": \"at ExtraFeatures.g(ExtraFeatures.java:26) \\n        at ExtraFeatures.main(ExtraFeatures.java:39)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b45b987d9f5443ff16be3be5029b0cfc\",\n        \"type\": \"source_code\",\n        \"text\": \"at ExtraFeatures.h(ExtraFeatures.java:30) \\n        at ExtraFeatures.main(ExtraFeatures.java:44)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37e3a92d8ae4e6086383355c2abdc420\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      throw new Exception(\\\"My Exception\\\"); \\n    } catch(Exception e) { \\n      print(\\\"Caught Exception\\\"); \\n      print(\\\"getMessage():\\\" + e.getMessage()); \\n      print(\\\"getLocalizedMessage():\\\" + \\n        e.getLocalizedMessage()); \\n      print(\\\"toString():\\\" + e); \\n      print(\\\"printStackTrace():\\\"); \\n      e.printStackTrace(System.out); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35495cdfb509ce8a9dda8a222817bf33\",\n        \"type\": \"source_code\",\n        \"text\": \"at ExceptionMethods.main(ExceptionMethods.java:8)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37a4ebb103188cd1d147ed3cbf77979a\",\n        \"type\": \"source_code\",\n        \"text\": \"// Generate an exception to fill in the stack trace \\n    try { \\n      throw new Exception(); \\n    } catch (Exception e) { \\n      for(StackTraceElement ste : e.getStackTrace()) \\n        System.out.println(ste.getMethodName()); \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9d3acd76c6f7c8e674f3e41f803892a3\",\n        \"type\": \"source_code\",\n        \"text\": \"f(); \\n    System.out.println(\\\"--------------------------------\\\"); \\n    g(); \\n    System.out.println(\\\"--------------------------------\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0dde31554c2b7721b1cdad28f23f7ae1\",\n        \"type\": \"source_code\",\n        \"text\": \"h();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9be9512250beb22b707a8c3395f4c88\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"originating the exception in f()\\\"); \\n    throw new Exception(\\\"thrown from f()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b5b90c6b3a41fca23d0778708c5c9e33\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      f(); \\n    } catch(Exception e) { \\n      System.out.println(\\\"Inside g(),e.printStackTrace()\\\"); \\n      e.printStackTrace(System.out); \\n      throw e; \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f374f16f1514eed6f3b494d57cc0e1f1\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      f(); \\n    } catch(Exception e) { \\n      System.out.println(\\\"Inside h(),e.printStackTrace()\\\"); \\n      e.printStackTrace(System.out); \\n      throw (Exception)e.fillInStackTrace(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eaf6537fd5574ab100f34c4041317856\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      g(); \\n    } catch(Exception e) { \\n      System.out.println(\\\"main: printStackTrace()\\\"); \\n      e.printStackTrace(System.out); \\n    } \\n    try { \\n      h(); \\n    } catch(Exception e) { \\n      System.out.println(\\\"main: printStackTrace()\\\"); \\n      e.printStackTrace(System.out); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ac615cd752064d5da935a16010ca8fb8\",\n        \"type\": \"source_code\",\n        \"text\": \"at Rethrowing.f(Rethrowing.java:7) \\n        at Rethrowing.g(Rethrowing.java:11) \\n        at Rethrowing.main(Rethrowing.java:29)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ac615cd752064d5da935a16010ca8fb8\",\n        \"type\": \"source_code\",\n        \"text\": \"at Rethrowing.f(Rethrowing.java:7) \\n        at Rethrowing.g(Rethrowing.java:11) \\n        at Rethrowing.main(Rethrowing.java:29)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a501fca8338209b40604ca8bdb85898d\",\n        \"type\": \"source_code\",\n        \"text\": \"at Rethrowing.f(Rethrowing.java:7) \\n        at Rethrowing.h(Rethrowing.java:20) \\n        at Rethrowing.main(Rethrowing.java:35)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"69cf48ff45967a13a685fd57078dd1dd\",\n        \"type\": \"source_code\",\n        \"text\": \"at Rethrowing.h(Rethrowing.java:24) \\n        at Rethrowing.main(Rethrowing.java:35)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf37d6c69069c4e4243888cd178dfc64\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"originating the exception in f()\\\"); \\n    throw new OneException(\\\"thrown from f()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"50fabddd1d23a139a032571ff5f872ab\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      try { \\n        f(); \\n      } catch(OneException e) { \\n        System.out.println( \\n          \\\"Caught in inner try, e.printStackTrace()\\\"); \\n        e.printStackTrace(System.out); \\n        throw new TwoException(\\\"from inner try\\\"); \\n      } \\n    } catch(TwoException e) { \\n      System.out.println( \\n        \\\"Caught in outer try, e.printStackTrace()\\\"); \\n      e.printStackTrace(System.out); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"77bf30f306747d9d6d36209af8d99f07\",\n        \"type\": \"source_code\",\n        \"text\": \"at RethrowNew.f(RethrowNew.java:15) \\n        at RethrowNew.main(RethrowNew.java:20)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48d11742a77d4c58c24aa998258c0e89\",\n        \"type\": \"source_code\",\n        \"text\": \"at RethrowNew.main(RethrowNew.java:25)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"77a9ba56b3fd3c198bf702991c735a67\",\n        \"type\": \"source_code\",\n        \"text\": \"fields = new Object[initialSize][2]; \\n    for(int i = 0; i < initialSize; i++) \\n      fields[i] = new Object[] { null, null };\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1e1d3cf0bda3e8d5b07da9f14b63d58\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(); \\n    for(Object[] obj : fields) { \\n      result.append(obj[0]); \\n      result.append(\\\": \\\"); \\n      result.append(obj[1]); \\n      result.append(\\\"\\\\n\\\"); \\n    } \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"efb06dc66b3368d00f7061b2aab8ad7d\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < fields.length; i++) \\n      if(id.equals(fields[i][0])) \\n        return i; \\n    return -1;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f56d2463992ef9f57872ca68027f3f17\",\n        \"type\": \"source_code\",\n        \"text\": \"int fieldNum = hasField(id); \\n    if(fieldNum == -1) \\n      throw new NoSuchFieldException(); \\n    return fieldNum;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad0baabdc6973c407853515a01c76861\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < fields.length; i++) \\n      if(fields[i][0] == null) { \\n        fields[i][0] = id; \\n        return i; \\n      } \\n    // No empty fields. Add one: \\n    Object[][] tmp = new Object[fields.length + 1][2]; \\n    for(int i = 0; i < fields.length; i++) \\n      tmp[i] = fields[i]; \\n    for(int i = fields.length; i < tmp.length; i++) \\n      tmp[i] = new Object[] { null, null }; \\n    fields = tmp; \\n    // Recursive call with expanded fields: \\n    return makeField(id);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3bc130560c162c7e1c44fb35cd318784\",\n        \"type\": \"source_code\",\n        \"text\": \"return fields[getFieldNumber(id)][1];\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3606dcce7cead9c7f504222af44bb33a\",\n        \"type\": \"source_code\",\n        \"text\": \"if(value == null) { \\n      // Most exceptions don\\u2019t have a \\\"cause\\\" constructor. \\n      // In these cases you must use initCause(), \\n      // available in all Throwable subclasses. \\n      DynamicFieldsException dfe =\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3927086ff38ed1ae839bc984b0582086\",\n        \"type\": \"source_code\",\n        \"text\": \"new DynamicFieldsException(); \\n      dfe.initCause(new NullPointerException()); \\n      throw dfe; \\n    } \\n    int fieldNumber = hasField(id); \\n    if(fieldNumber == -1) \\n      fieldNumber = makeField(id); \\n    Object result = null; \\n    try { \\n      result = getField(id); // Get old value \\n    } catch(NoSuchFieldException e) { \\n      // Use constructor that takes \\\"cause\\\": \\n      throw new RuntimeException(e); \\n    } \\n    fields[fieldNumber][1] = value; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa900a707567376bfa917eba34d2db60\",\n        \"type\": \"source_code\",\n        \"text\": \"DynamicFields df = new DynamicFields(3); \\n    print(df); \\n    try { \\n      df.setField(\\\"d\\\", \\\"A value for d\\\"); \\n      df.setField(\\\"number\\\", 47); \\n      df.setField(\\\"number2\\\", 48); \\n      print(df); \\n      df.setField(\\\"d\\\", \\\"A new value for d\\\"); \\n      df.setField(\\\"number3\\\", 11); \\n      print(\\\"df: \\\" + df); \\n      print(\\\"df.getField(\\\\\\\"d\\\\\\\") : \\\" + df.getField(\\\"d\\\")); \\n      Object field = df.setField(\\\"d\\\", null); // Exception \\n    } catch(NoSuchFieldException e) { \\n      e.printStackTrace(System.out); \\n    } catch(DynamicFieldsException e) { \\n      e.printStackTrace(System.out); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f8d5feb086978a673622d616a08ea4b\",\n        \"type\": \"source_code\",\n        \"text\": \"at DynamicFields.setField(DynamicFields.java:64) \\n        at DynamicFields.main(DynamicFields.java:94)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3408e629145484f9e4bb9c7bc9c9c1a1\",\n        \"type\": \"source_code\",\n        \"text\": \"at DynamicFields.setField(DynamicFields.java:66) \\n        ... 1 more\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b84bc4e14ad12236f14eb0d36b4d0060\",\n        \"type\": \"source_code\",\n        \"text\": \"throw new RuntimeException(\\\"From f()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"252e2998ecb98daa520420e02f91e390\",\n        \"type\": \"source_code\",\n        \"text\": \"f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eb739902110d7b3111cf7e94821f08ad\",\n        \"type\": \"source_code\",\n        \"text\": \"g();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4e5c6fa8da540d1e29c01760d98abe8\",\n        \"type\": \"source_code\",\n        \"text\": \"at NeverCaught.f(NeverCaught.Java:7) \\n        at NeverCaught.g(NeverCaught.Java:10) \\n        at NeverCaught.main(NeverCaught.Java:13)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"63f7fba07a472392889362125262756a\",\n        \"type\": \"source_code\",\n        \"text\": \"with finally\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"732cf1f5b7332429581715d1ae4d4964\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) { \\n      try {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab4829230ac24760243f911afde347a4\",\n        \"type\": \"source_code\",\n        \"text\": \"// Post-increment is zero first time: \\n        if(count++ == 0) \\n          throw new ThreeException(); \\n        System.out.println(\\\"No exception\\\"); \\n      } catch(ThreeException e) { \\n        System.out.println(\\\"ThreeException\\\"); \\n      } finally { \\n        System.out.println(\\\"In finally clause\\\"); \\n        if(count == 2) break; // out of \\\"while\\\" \\n      } \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee0a4ac8714c164d49ce5864c1917c56\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      sw.on(); \\n      // Code that can throw exceptions... \\n      f(); \\n      sw.off(); \\n    } catch(OnOffException1 e) { \\n      System.out.println(\\\"OnOffException1\\\"); \\n      sw.off(); \\n    } catch(OnOffException2 e) { \\n      System.out.println(\\\"OnOffException2\\\"); \\n      sw.off(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b172b829ecb9fa6ec6ab37fc99eca7ae\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      sw.on(); \\n      // Code that can throw exceptions... \\n      OnOffSwitch.f(); \\n    } catch(OnOffException1 e) { \\n      System.out.println(\\\"OnOffException1\\\"); \\n    } catch(OnOffException2 e) { \\n      System.out.println(\\\"OnOffException2\\\"); \\n    } finally { \\n      sw.off(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d28d87ec4462e3fe7e99ea2a1a844e61\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Entering first try block\\\"); \\n    try { \\n      print(\\\"Entering second try block\\\"); \\n      try { \\n        throw new FourException(); \\n      } finally { \\n        print(\\\"finally in 2nd try block\\\"); \\n      } \\n    } catch(FourException e) { \\n      System.out.println( \\n        \\\"Caught FourException in 1st try block\\\"); \\n    } finally { \\n      System.out.println(\\\"finally in 1st try block\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"794d23f451b670804df9d8ab706dee48\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Initialization that requires cleanup\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5792742f6bc90c48a845f805c077587c\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      print(\\\"Point 1\\\"); \\n      if(i == 1) return; \\n      print(\\\"Point 2\\\"); \\n      if(i == 2) return; \\n      print(\\\"Point 3\\\"); \\n      if(i == 3) return; \\n      print(\\\"End\\\"); \\n      return; \\n    } finally { \\n      print(\\\"Performing cleanup\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0b208c1ebb78e5bead79dbd9b5d33c12\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 1; i <= 4; i++) \\n      f(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1b8f20538aa392f57a7a5c3e601274f4\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"A very important exception!\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74a9456d79e0a7ab45dae1916b235e69\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"A trivial exception\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c48f3d40f9d638977ad01ab99998457\",\n        \"type\": \"source_code\",\n        \"text\": \"throw new VeryImportantException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7de4e0be55e790a8ba5caf85defeeae6\",\n        \"type\": \"source_code\",\n        \"text\": \"throw new HoHumException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5948b526139504aa13ee652d83733b14\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      LostMessage lm = new LostMessage(); \\n      try { \\n        lm.f(); \\n      } finally { \\n        lm.dispose(); \\n      } \\n    } catch(Exception e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c948099599575ee4ad6bc1f60b83136b\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      throw new RuntimeException(); \\n    } finally { \\n      // Using \\u2018return\\u2019 inside the finally block \\n      // will silence any thrown exception. \\n      return; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c840db80e2ed743d8c5f457887270dc9\",\n        \"type\": \"source_code\",\n        \"text\": \"// Doesn\\u2019t actually have to throw anything\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f3793ae1114b7d616e2d822782d255b\",\n        \"type\": \"source_code\",\n        \"text\": \"throws RainedOut, BaseballException {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e6928e61bfa59f44ab1dfa53ca329513\",\n        \"type\": \"source_code\",\n        \"text\": \"throws Foul, BaseballException {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b5fd46aa8fa94cc782de0bc03c2f156\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      StormyInning si = new StormyInning(); \\n      si.atBat(); \\n    } catch(PopFoul e) { \\n      System.out.println(\\\"Pop foul\\\"); \\n    } catch(RainedOut e) { \\n      System.out.println(\\\"Rained out\\\"); \\n    } catch(BaseballException e) { \\n      System.out.println(\\\"Generic baseball exception\\\"); \\n    } \\n    // Strike not thrown in derived version. \\n    try { \\n      // What happens if you upcast? \\n      Inning i = new StormyInning(); \\n      i.atBat(); \\n      // You must catch the exceptions from the \\n      // base-class version of the method: \\n    } catch(Strike e) { \\n      System.out.println(\\\"Strike\\\"); \\n    } catch(Foul e) { \\n      System.out.println(\\\"Foul\\\"); \\n    } catch(RainedOut e) { \\n      System.out.println(\\\"Rained out\\\"); \\n    } catch(BaseballException e) { \\n      System.out.println(\\\"Generic baseball exception\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1fb7c4347610c388f2f6240e08c69f94\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      in = new BufferedReader(new FileReader(fname)); \\n      // Other code that might throw exceptions \\n    } catch(FileNotFoundException e) { \\n      System.out.println(\\\"Could not open \\\" + fname); \\n      // Wasn\\u2019t open, so don\\u2019t close it \\n      throw e; \\n    } catch(Exception e) { \\n      // All other exceptions must close it \\n      try { \\n        in.close(); \\n      } catch(IOException e2) { \\n        System.out.println(\\\"in.close() unsuccessful\\\"); \\n      } \\n      throw e; // Rethrow \\n    } finally { \\n      // Don\\u2019t close it here!!! \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90c8e1e2b3d3206b4189b7d1ddf9f315\",\n        \"type\": \"source_code\",\n        \"text\": \"String s; \\n    try { \\n      s = in.readLine(); \\n    } catch(IOException e) { \\n      throw new RuntimeException(\\\"readLine() failed\\\"); \\n    } \\n    return s;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"29e35a80cc3819c0f0bb143476b6f2dc\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      in.close(); \\n      System.out.println(\\\"dispose() successful\\\"); \\n    } catch(IOException e2) { \\n      throw new RuntimeException(\\\"in.close() failed\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a9674fcf21da4f9f6d844b9710834f1\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      InputFile in = new InputFile(\\\"Cleanup.java\\\"); \\n      try { \\n        String s; \\n        int i = 1; \\n        while((s = in.getLine()) != null) \\n          ; // Perform line-by-line processing here... \\n      } catch(Exception e) { \\n        System.out.println(\\\"Caught Exception in main\\\"); \\n        e.printStackTrace(System.out); \\n      } finally { \\n        in.dispose(); \\n      } \\n    } catch(Exception e) { \\n      System.out.println(\\\"InputFile construction failed\\\"); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3fc0dadb29c904fc06ee6032f47afc38\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"NeedsCleanup \\\" + id + \\\" disposed\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e82632f00f3c0d7d148cd0b7184df92\",\n        \"type\": \"source_code\",\n        \"text\": \"// Section 1: \\n    NeedsCleanup nc1 = new NeedsCleanup(); \\n    try { \\n      // ... \\n    } finally { \\n      nc1.dispose(); \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb773fbc56acd4667a756033f7933f22\",\n        \"type\": \"source_code\",\n        \"text\": \"// Section 2: \\n    // If construction cannot fail you can group objects: \\n    NeedsCleanup nc2 = new NeedsCleanup(); \\n    NeedsCleanup nc3 = new NeedsCleanup(); \\n    try { \\n      // ... \\n    } finally { \\n      nc3.dispose(); // Reverse order of construction \\n      nc2.dispose(); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f48d83bc37121891c2bf4ed63c7aa65e\",\n        \"type\": \"source_code\",\n        \"text\": \"// Section 3: \\n    // If construction can fail you must guard each one: \\n    try { \\n      NeedsCleanup2 nc4 = new NeedsCleanup2(); \\n      try { \\n        NeedsCleanup2 nc5 = new NeedsCleanup2(); \\n        try { \\n          // ... \\n        } finally { \\n          nc5.dispose(); \\n        } \\n      } catch(ConstructionException e) { // nc5 constructor \\n        System.out.println(e); \\n      } finally { \\n        nc4.dispose(); \\n      } \\n    } catch(ConstructionException e) { // nc4 constructor \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1dd273f886b2bfe06abb024a5d4e492f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Catch the exact type: \\n    try { \\n      throw new Sneeze(); \\n    } catch(Sneeze s) { \\n      System.out.println(\\\"Caught Sneeze\\\"); \\n    } catch(Annoyance a) { \\n      System.out.println(\\\"Caught Annoyance\\\");\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"434e81787e4d52e0acb3c5d3d907bc1c\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    // Catch the base type: \\n    try { \\n      throw new Sneeze(); \\n    } catch(Annoyance a) { \\n      System.out.println(\\\"Caught Annoyance\\\"); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3094c611e21b3ad549af733e402528a\",\n        \"type\": \"source_code\",\n        \"text\": \"// Open the file: \\n    FileInputStream file = \\n      new FileInputStream(\\\"MainException.java\\\"); \\n    // Use the file ... \\n    // Close the file: \\n    file.close();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"362a0a2354f249fbb9a7819782543009\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      switch(type) { \\n        case 0: throw new FileNotFoundException(); \\n        case 1: throw new IOException(); \\n        case 2: throw new RuntimeException(\\\"Where am I?\\\"); \\n        default: return; \\n      } \\n    } catch(Exception e) { // Adapt to unchecked: \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9488e8acb0a883819b4e878ea4b33b81\",\n        \"type\": \"source_code\",\n        \"text\": \"WrapCheckedException wce = new WrapCheckedException(); \\n    // You can call throwRuntimeException() without a try\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4d539dcbd3f8389c174a39bbd31af1d5\",\n        \"type\": \"source_code\",\n        \"text\": \"// block, and let RuntimeExceptions leave the method: \\n    wce.throwRuntimeException(3); \\n    // Or you can choose to catch exceptions: \\n    for(int i = 0; i < 4; i++) \\n      try { \\n        if(i < 3) \\n          wce.throwRuntimeException(i); \\n        else \\n          throw new SomeOtherException(); \\n      } catch(SomeOtherException e) { \\n          print(\\\"SomeOtherException: \\\" + e); \\n      } catch(RuntimeException re) { \\n        try { \\n          throw re.getCause(); \\n        } catch(FileNotFoundException e) { \\n          print(\\\"FileNotFoundException: \\\" + e); \\n        } catch(IOException e) { \\n          print(\\\"IOException: \\\" + e); \\n        } catch(Throwable e) { \\n          print(\\\"Throwable: \\\" + e); \\n        } \\n      }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b4f9f92a5fe24183354f02ffa16d20b\",\n        \"type\": \"source_code\",\n        \"text\": \"return s.toUpperCase();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d38a56673e94cdf8e3d012a80146327f\",\n        \"type\": \"source_code\",\n        \"text\": \"String q = \\\"howdy\\\"; \\n    print(q); // howdy \\n    String qq = upcase(q); \\n    print(qq); // HOWDY \\n    print(q); // howdy\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3394d020ae36766dd427b49d9e27bb81\",\n        \"type\": \"source_code\",\n        \"text\": \"String mango = \\\"mango\\\"; \\n    String s = \\\"abc\\\" + mango + \\\"def\\\" + 47; \\n    System.out.println(s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8d484c470d3c59b1f502830f03d654f\",\n        \"type\": \"source_code\",\n        \"text\": \"ldc #2; //String mango\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d9699461a167f8a85603678be98362\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_1\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03f8d609c1edfc59ed939a9283e29efb\",\n        \"type\": \"source_code\",\n        \"text\": \"new #3; //class StringBuilder\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c2486fe65e8aa819e94e9cd73957e85\",\n        \"type\": \"source_code\",\n        \"text\": \"invokespecial #4; //StringBuilder.\\\"<init>\\\":()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4bb3dd7e7bebaa337dafa4daad5ced14\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #6; //StringBuilder.append:(String)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4bb3dd7e7bebaa337dafa4daad5ced14\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #6; //StringBuilder.append:(String)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e5c71383cadbcec1502a916b0d2516d\",\n        \"type\": \"source_code\",\n        \"text\": \"ldc #7; //String def\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4bb3dd7e7bebaa337dafa4daad5ced14\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #6; //StringBuilder.append:(String)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a7e46c5548d7f4e09441a0be10e50ffc\",\n        \"type\": \"source_code\",\n        \"text\": \"bipush 47\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"891b52f4fad0e32bd8d1b6c4f1894f22\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #8; //StringBuilder.append:(I)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"584697bf2493a10dd2ecfa88cf38d62a\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #9; //StringBuilder.toString:()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4df193747ed622ba2d26187365ac4a8\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_2\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d8b2318557e66993aa72b90489b1f79\",\n        \"type\": \"source_code\",\n        \"text\": \"getstatic #10; //Field System.out:PrintStream;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"923367067e36e5f6777150ac212e93f6\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_2\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1025313fd5d076bf72d218de95812cd\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #11; // PrintStream.println:(String)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65a6dabb77065ba18ff8b8893e6ca519\",\n        \"type\": \"source_code\",\n        \"text\": \"String result = \\\"\\\"; \\n    for(int i = 0; i < fields.length; i++) \\n      result += fields[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb21da19c9eba07f832660648a2314b9\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(); \\n    for(int i = 0; i < fields.length; i++) \\n      result.append(fields[i]); \\n    return result.toString();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"16ac8acd6045bbc3a39c12798562aa09\",\n        \"type\": \"source_code\",\n        \"text\": \"ldc #2; //String\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4df193747ed622ba2d26187365ac4a8\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_2\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e80540abed255959197e6619dc02ad66\",\n        \"type\": \"source_code\",\n        \"text\": \"iconst_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b0c581a17bf2fed59214d2c75c5f8394\",\n        \"type\": \"source_code\",\n        \"text\": \"istore_3\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe579ed248bebdcb53bf9e17529a9454\",\n        \"type\": \"source_code\",\n        \"text\": \"iload_3\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b657e55f4de16a07d1065e7fe9ee83b\",\n        \"type\": \"source_code\",\n        \"text\": \"arraylength\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0cd608d7ee59eaa4860ba95309719104\",\n        \"type\": \"source_code\",\n        \"text\": \"if_icmpge 38\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe579ed248bebdcb53bf9e17529a9454\",\n        \"type\": \"source_code\",\n        \"text\": \"iload_3\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf6ef7b13ea5e4cf8bc0e39dc62c53fe\",\n        \"type\": \"source_code\",\n        \"text\": \"aaload\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be161ba84c6568df15e9c35dbcb7c35a\",\n        \"type\": \"source_code\",\n        \"text\": \"areturn\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03f8d609c1edfc59ed939a9283e29efb\",\n        \"type\": \"source_code\",\n        \"text\": \"new #3; //class StringBuilder\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"36ad55ef011d5ac0b1d0e39cd14858e9\",\n        \"type\": \"source_code\",\n        \"text\": \"invokespecial #4; // StringBuilder.\\u201d<init>\\u201d:()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4df193747ed622ba2d26187365ac4a8\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_2\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e80540abed255959197e6619dc02ad66\",\n        \"type\": \"source_code\",\n        \"text\": \"iconst_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b0c581a17bf2fed59214d2c75c5f8394\",\n        \"type\": \"source_code\",\n        \"text\": \"istore_3\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5200511e8d33975c99a8695f94f89bc\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #5; // StringBuilder.append:()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b21afc54fb48d153c19101658f4a2a48\",\n        \"type\": \"source_code\",\n        \"text\": \"pop\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b025b6db3d0c0d6eaeeeee4cf91d9b8b\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(\\\"[\\\"); \\n    for(int i = 0; i < 25; i++) { \\n      result.append(rand.nextInt(100)); \\n      result.append(\\\", \\\"); \\n    } \\n    result.delete(result.length()-2, result.length()); \\n    result.append(\\\"]\\\"); \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5abed667cfd18c8bcaa5f1ba3abe354\",\n        \"type\": \"source_code\",\n        \"text\": \"UsingStringBuilder usb = new UsingStringBuilder(); \\n    System.out.println(usb);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21d5922f837f03a265607cc3919f6ae2\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList<Coffee> coffees = new ArrayList<Coffee>(); \\n    for(Coffee c : new CoffeeGenerator(10)) \\n      coffees.add(c); \\n    System.out.println(coffees);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"136f5d0b442eee68748fe8d5d14ef61d\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\" InfiniteRecursion address: \\\" + this + \\\"\\\\n\\\";\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cce97ce32f0a822713b1488b1e24017b\",\n        \"type\": \"source_code\",\n        \"text\": \"List<InfiniteRecursion> v = \\n      new ArrayList<InfiniteRecursion>(); \\n    for(int i = 0; i < 10; i++) \\n      v.add(new InfiniteRecursion()); \\n    System.out.println(v);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"478730a1cf857c2cbe256429135d9a4f\",\n        \"type\": \"source_code\",\n        \"text\": \"int x = 5; \\n    double y = 5.332542; \\n    // The old way: \\n    System.out.println(\\\"Row 1: [\\\" + x + \\\" \\\" + y + \\\"]\\\"); \\n    // The new way: \\n    System.out.format(\\\"Row 1: [%d %f]\\\\n\\\", x, y); \\n    // or \\n    System.out.printf(\\\"Row 1: [%d %f]\\\\n\\\", x, y);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"140fa851e86bc94d267eced1591b005a\",\n        \"type\": \"source_code\",\n        \"text\": \"this.name = name; \\n    this.f = f;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"76ab640193d5e3becd36fa20bef82ab5\",\n        \"type\": \"source_code\",\n        \"text\": \"f.format(\\\"%s The Turtle is at (%d,%d)\\\\n\\\", name, x, y);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aca724d85ead565627f7b4e58f21f556\",\n        \"type\": \"source_code\",\n        \"text\": \"PrintStream outAlias = System.out; \\n    Turtle tommy = new Turtle(\\\"Tommy\\\", \\n      new Formatter(System.out)); \\n    Turtle terry = new Turtle(\\\"Terry\\\", \\n      new Formatter(outAlias)); \\n    tommy.move(0,0); \\n    terry.move(4,8); \\n    tommy.move(3,4); \\n    terry.move(2,5); \\n    tommy.move(3,3); \\n    terry.move(3,3);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d5f12b3b8ed0f4b0a650598d9bc0160\",\n        \"type\": \"source_code\",\n        \"text\": \"f.format(\\\"%-15s %5s %10s\\\\n\\\", \\\"Item\\\", \\\"Qty\\\", \\\"Price\\\"); \\n    f.format(\\\"%-15s %5s %10s\\\\n\\\", \\\"----\\\", \\\"---\\\", \\\"-----\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"701149d4432e4e2246deb57f5506e26b\",\n        \"type\": \"source_code\",\n        \"text\": \"f.format(\\\"%-15.15s %5d %10.2f\\\\n\\\", name, qty, price); \\n    total += price;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"108e249b7419331dad5d33351865e5d1\",\n        \"type\": \"source_code\",\n        \"text\": \"f.format(\\\"%-15s %5s %10.2f\\\\n\\\", \\\"Tax\\\", \\\"\\\", total*0.06); \\n    f.format(\\\"%-15s %5s %10s\\\\n\\\", \\\"\\\", \\\"\\\", \\\"-----\\\"); \\n    f.format(\\\"%-15s %5s %10.2f\\\\n\\\", \\\"Total\\\", \\\"\\\", \\n      total * 1.06);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a79334d520980f1a5479976c8a74d824\",\n        \"type\": \"source_code\",\n        \"text\": \"Receipt receipt = new Receipt(); \\n    receipt.printTitle(); \\n    receipt.print(\\\"Jack\\u2019s Magic Beans\\\", 4, 4.25); \\n    receipt.print(\\\"Princess Peas\\\", 3, 5.1); \\n    receipt.print(\\\"Three Bears Porridge\\\", 1, 14.29); \\n    receipt.printTotal();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"69f9cecbc64811bbe416771f35a0f0d6\",\n        \"type\": \"source_code\",\n        \"text\": \"Qty      Price\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa1d7bbe6856c412f6455ce7ff3a5d70\",\n        \"type\": \"source_code\",\n        \"text\": \"---      -----\",\n        \"programming_language\": \"Diff\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"991da43e211d57e25718f6605f9d42e3\",\n        \"type\": \"source_code\",\n        \"text\": \"4       4.25\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53f1190c5125e8f4d8c077af23fc1c23\",\n        \"type\": \"source_code\",\n        \"text\": \"3       5.10\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c05f4e6e9847272c489bb7697d32ed10\",\n        \"type\": \"source_code\",\n        \"text\": \"1      14.29\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f454c582e9e01aeef1ee40e1994c4b9\",\n        \"type\": \"source_code\",\n        \"text\": \"1.42 \\n                           -----\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e26bc895e5bb00237e35bd08e101a228\",\n        \"type\": \"source_code\",\n        \"text\": \"25.06\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4a2961c5c0204f0bd186ddc56738f14b\",\n        \"type\": \"source_code\",\n        \"text\": \"Conversion Characters\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7a9f2e5ba56c5c3ed3881d4f20faabd\",\n        \"type\": \"source_code\",\n        \"text\": \"d \\n    Integral (as decimal) \\n      c \\n    Unicode character \\n      b \\n    Boolean value \\n      s \\n    String \\n      f \\n    Floating point (as decimal) \\n      e \\n    Floating point (in scientific notation) \\n      x \\n    Integral (as hex) \\n      h \\n    Hash code (as hex) \\n    % \\n    Literal \\\"%\\\"\",\n        \"programming_language\": \"Matlab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b16a312c8512933eb5b18be9aa5e1c3c\",\n        \"type\": \"source_code\",\n        \"text\": \"Formatter f = new Formatter(System.out);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"942cd9d5c2dcaeceab84fbbfad020c3f\",\n        \"type\": \"source_code\",\n        \"text\": \"char u = \\u2018a\\u2019; \\n    System.out.println(\\\"u = \\u2018a\\u2019\\\"); \\n    f.format(\\\"s: %s\\\\n\\\", u); \\n    // f.format(\\\"d: %d\\\\n\\\", u); \\n    f.format(\\\"c: %c\\\\n\\\", u); \\n    f.format(\\\"b: %b\\\\n\\\", u); \\n    // f.format(\\\"f: %f\\\\n\\\", u); \\n    // f.format(\\\"e: %e\\\\n\\\", u); \\n    // f.format(\\\"x: %x\\\\n\\\", u); \\n    f.format(\\\"h: %h\\\\n\\\", u);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5122c0639ec868dd19ca2fb41c632128\",\n        \"type\": \"source_code\",\n        \"text\": \"int v = 121; \\n    System.out.println(\\\"v = 121\\\"); \\n    f.format(\\\"d: %d\\\\n\\\", v); \\n    f.format(\\\"c: %c\\\\n\\\", v); \\n    f.format(\\\"b: %b\\\\n\\\", v); \\n    f.format(\\\"s: %s\\\\n\\\", v); \\n    // f.format(\\\"f: %f\\\\n\\\", v); \\n    // f.format(\\\"e: %e\\\\n\\\", v); \\n    f.format(\\\"x: %x\\\\n\\\", v); \\n    f.format(\\\"h: %h\\\\n\\\", v);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"20d3bcfb52b88626ce363fb5dc782cb3\",\n        \"type\": \"source_code\",\n        \"text\": \"BigInteger w = new BigInteger(\\\"50000000000000\\\"); \\n    System.out.println( \\n      \\\"w = new BigInteger(\\\\\\\"50000000000000\\\\\\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d0fed6644d03c9c466f086a4d59b3dd3\",\n        \"type\": \"source_code\",\n        \"text\": \"f.format(\\\"d: %d\\\\n\\\", w); \\n    // f.format(\\\"c: %c\\\\n\\\", w); \\n    f.format(\\\"b: %b\\\\n\\\", w); \\n    f.format(\\\"s: %s\\\\n\\\", w); \\n    // f.format(\\\"f: %f\\\\n\\\", w); \\n    // f.format(\\\"e: %e\\\\n\\\", w); \\n    f.format(\\\"x: %x\\\\n\\\", w); \\n    f.format(\\\"h: %h\\\\n\\\", w);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f805226ee3303c2e409842590a106345\",\n        \"type\": \"source_code\",\n        \"text\": \"double x = 179.543; \\n    System.out.println(\\\"x = 179.543\\\"); \\n    // f.format(\\\"d: %d\\\\n\\\", x); \\n    // f.format(\\\"c: %c\\\\n\\\", x); \\n    f.format(\\\"b: %b\\\\n\\\", x); \\n    f.format(\\\"s: %s\\\\n\\\", x); \\n    f.format(\\\"f: %f\\\\n\\\", x); \\n    f.format(\\\"e: %e\\\\n\\\", x); \\n    // f.format(\\\"x: %x\\\\n\\\", x); \\n    f.format(\\\"h: %h\\\\n\\\", x);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"89d1410bcbab7eca2b861b99f39af929\",\n        \"type\": \"source_code\",\n        \"text\": \"Conversion y = new Conversion(); \\n    System.out.println(\\\"y = new Conversion()\\\"); \\n    // f.format(\\\"d: %d\\\\n\\\", y); \\n    // f.format(\\\"c: %c\\\\n\\\", y); \\n    f.format(\\\"b: %b\\\\n\\\", y); \\n    f.format(\\\"s: %s\\\\n\\\", y); \\n    // f.format(\\\"f: %f\\\\n\\\", y); \\n    // f.format(\\\"e: %e\\\\n\\\", y); \\n    // f.format(\\\"x: %x\\\\n\\\", y); \\n    f.format(\\\"h: %h\\\\n\\\", y);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe175011ace272b38c2a66588d24a7d2\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean z = false; \\n    System.out.println(\\\"z = false\\\"); \\n    // f.format(\\\"d: %d\\\\n\\\", z); \\n    // f.format(\\\"c: %c\\\\n\\\", z); \\n    f.format(\\\"b: %b\\\\n\\\", z); \\n    f.format(\\\"s: %s\\\\n\\\", z); \\n    // f.format(\\\"f: %f\\\\n\\\", z); \\n    // f.format(\\\"e: %e\\\\n\\\", z); \\n    // f.format(\\\"x: %x\\\\n\\\", z); \\n    f.format(\\\"h: %h\\\\n\\\", z);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f8917c06e3ffd16823f2063490fcec9\",\n        \"type\": \"source_code\",\n        \"text\": \"String message) { \\n    super(String.format(\\\"(t%d, q%d) %s\\\", transactionID, \\n        queryID, message));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"954cf19ed64503c476ea738bc7e2b558\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      throw new DatabaseException(3, 7, \\\"Write failed\\\"); \\n    } catch(Exception e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3c0f0aeabe8cea63d77d4ef6c7ee976c\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(); \\n    int n = 0; \\n    for(byte b : data) { \\n      if(n % 16 == 0) \\n        result.append(String.format(\\\"%05X: \\\", n)); \\n      result.append(String.format(\\\"%02X \\\", b)); \\n      n++; \\n      if(n % 16 == 0) result.append(\\\"\\\\n\\\"); \\n    } \\n    result.append(\\\"\\\\n\\\"); \\n    return result.toString();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0331239ee3b2aaa57a02efa528630e4a\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length == 0) \\n      // Test by displaying this class file: \\n      System.out.println( \\n        format(BinaryFile.read(\\\"Hex.class\\\"))); \\n    else \\n      System.out.println( \\n        format(BinaryFile.read(new File(args[0]))));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ca8566c6016e33055e1296d7573bfc57\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"-1234\\\".matches(\\\"-?\\\\\\\\d+\\\")); \\n    System.out.println(\\\"5678\\\".matches(\\\"-?\\\\\\\\d+\\\")); \\n    System.out.println(\\\"+911\\\".matches(\\\"-?\\\\\\\\d+\\\")); \\n    System.out.println(\\\"+911\\\".matches(\\\"(-|\\\\\\\\+)?\\\\\\\\d+\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38608c7b66d6fb3cde90ae879737c070\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Then, when you have found the shrubbery, you must \\\" + \\n    \\\"cut down the mightiest tree in the forest... \\\" + \\n    \\\"with... a herring!\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"49eea2c31fc9fae3f313d020044a5ac7\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n      Arrays.toString(knights.split(regex)));\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2334a1f612d1e4608192e19308c18265\",\n        \"type\": \"source_code\",\n        \"text\": \"split(\\\" \\\"); // Doesn\\u2019t have to contain regex chars \\n    split(\\\"\\\\\\\\W+\\\"); // Non-word characters \\n    split(\\\"n\\\\\\\\W+\\\"); // \\u2018n\\u2019 followed by non-word characters\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"92a10384d8d99f0e0130fd535424f668\",\n        \"type\": \"source_code\",\n        \"text\": \"print(s.replaceFirst(\\\"f\\\\\\\\w+\\\", \\\"located\\\")); \\n    print(s.replaceAll(\\\"shrubbery|tree|herring\\\",\\\"banana\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b88657416f0de579656a14a2420a2c8\",\n        \"type\": \"source_code\",\n        \"text\": \"for(String pattern : new String[]{ \\\"Rudolph\\\", \\n      \\\"[rR]udolph\\\", \\\"[rR][aeiou][a-z]ol.*\\\", \\\"R.*\\\" }) \\n      System.out.println(\\\"Rudolph\\\".matches(pattern));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"df266bf90d49b6d93f303ce874b341cf\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length < 2) { \\n      print(\\\"Usage:\\\\njava TestRegularExpression \\\" + \\n        \\\"characterSequence regularExpression+\\\"); \\n      System.exit(0); \\n    } \\n    print(\\\"Input: \\\\\\\"\\\" + args[0] + \\\"\\\\\\\"\\\"); \\n    for(String arg : args) { \\n      print(\\\"Regular expression: \\\\\\\"\\\" + arg + \\\"\\\\\\\"\\\"); \\n      Pattern p = Pattern.compile(arg); \\n      Matcher m = p.matcher(args[0]); \\n      while(m.find()) {\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f02f34b7ddc576fb41ce02470d601c74\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Match \\\\\\\"\\\" + m.group() + \\\"\\\\\\\" at positions \\\" + \\n          m.start() + \\\"-\\\" + (m.end() - 1)); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1491daa65369b3c0e0b8d26924e8438\",\n        \"type\": \"source_code\",\n        \"text\": \"Matcher m = Pattern.compile(\\\"\\\\\\\\w+\\\") \\n      .matcher(\\\"Evening is full of the linnet\\u2019s wings\\\"); \\n    while(m.find()) \\n      printnb(m.group() + \\\" \\\"); \\n    print(); \\n    int i = 0; \\n    while(m.find(i)) { \\n      printnb(m.group() + \\\" \\\"); \\n      i++; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"675ee5c44691c2c3136454361ad7cc8a\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Twas brillig, and the slithy toves\\\\n\\\" + \\n    \\\"Did gyre and gimble in the wabe.\\\\n\\\" + \\n    \\\"All mimsy were the borogoves,\\\\n\\\" + \\n    \\\"And the mome raths outgrabe.\\\\n\\\\n\\\" + \\n    \\\"Beware the Jabberwock, my son,\\\\n\\\" + \\n    \\\"The jaws that bite, the claws that catch.\\\\n\\\" + \\n    \\\"Beware the Jubjub bird, and shun\\\\n\\\" + \\n    \\\"The frumious Bandersnatch.\\\";\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60f945a961254f712882634907f26a43\",\n        \"type\": \"source_code\",\n        \"text\": \"Matcher m = \\n      Pattern.compile(\\\"(?m)(\\\\\\\\S+)\\\\\\\\s+((\\\\\\\\S+)\\\\\\\\s+(\\\\\\\\S+))$\\\") \\n        .matcher(POEM); \\n    while(m.find()) { \\n      for(int j = 0; j <= m.groupCount(); j++) \\n        printnb(\\\"[\\\" + m.group(j) + \\\"]\\\"); \\n      print(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c846e33991a754336aa879eddb81fe68\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"As long as there is injustice, whenever a\\\\n\\\" + \\n    \\\"Targathian baby cries out, wherever a distress\\\\n\\\" + \\n    \\\"signal sounds among the stars ... We\\u2019ll be there.\\\\n\\\" + \\n    \\\"This fine ship, and this fine crew ...\\\\n\\\" + \\n    \\\"Never give up! Never surrender!\\\";\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb579b71cf9071218ba06c8ca7aae70d\",\n        \"type\": \"source_code\",\n        \"text\": \"private boolean regexPrinted = false; \\n    private String regex; \\n    Display(String regex) { this.regex = regex; } \\n    void display(String message) { \\n      if(!regexPrinted) { \\n        print(regex); \\n        regexPrinted = true; \\n      } \\n      print(message); \\n    }\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60ba91ee3db5a8e61afdc81fac911b91\",\n        \"type\": \"source_code\",\n        \"text\": \"Display d = new Display(regex); \\n    Pattern p = Pattern.compile(regex); \\n    Matcher m = p.matcher(s); \\n    while(m.find()) \\n      d.display(\\\"find() \\u2018\\\" + m.group() + \\n        \\\"\\u2018 start = \\\"+ m.start() + \\\" end = \\\" + m.end()); \\n    if(m.lookingAt()) // No reset() necessary \\n      d.display(\\\"lookingAt() start = \\\" \\n        + m.start() + \\\" end = \\\" + m.end()); \\n    if(m.matches()) // No reset() necessary \\n      d.display(\\\"matches() start = \\\" \\n        + m.start() + \\\" end = \\\" + m.end());\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b75d3002a2b813f698395cc1df899fe9\",\n        \"type\": \"source_code\",\n        \"text\": \"for(String in : input.split(\\\"\\\\n\\\")) { \\n      print(\\\"input : \\\" + in); \\n      for(String regex : new String[]{\\\"\\\\\\\\w*ere\\\\\\\\w*\\\", \\n        \\\"\\\\\\\\w*ever\\\", \\\"T\\\\\\\\w+\\\", \\\"Never.*?!\\\"}) \\n        examine(in, regex); \\n    }\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc36381a4858c429cff14f10ddd3e7b2\",\n        \"type\": \"source_code\",\n        \"text\": \"Pattern p =  Pattern.compile(\\\"^java\\\", \\n      Pattern.CASE_INSENSITIVE | Pattern.MULTILINE); \\n    Matcher m = p.matcher( \\n      \\\"java has regex\\\\nJava has regex\\\\n\\\" + \\n      \\\"JAVA has pretty good regular expressions\\\\n\\\" + \\n      \\\"Regular expressions are in Java\\\"); \\n    while(m.find()) \\n      System.out.println(m.group());\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"585458220a42098c2e282f1adea75762\",\n        \"type\": \"source_code\",\n        \"text\": \"String input = \\n      \\\"This!!unusual use!!of exclamation!!points\\\"; \\n    print(Arrays.toString( \\n      Pattern.compile(\\\"!!\\\").split(input))); \\n    // Only do the first three: \\n    print(Arrays.toString( \\n      Pattern.compile(\\\"!!\\\").split(input, 3)));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8093fdc00deeefc7150d3e7ce3fc83ef\",\n        \"type\": \"source_code\",\n        \"text\": \"the regular expression matcher. Note that we\\u2019ll \\n    first extract the block of text by looking for \\n    the special delimiters, then process the \\n    extracted block. !*/\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65a09cb727bf4cd3e725e15ffcc1e3ae\",\n        \"type\": \"source_code\",\n        \"text\": \"String s = TextFile.read(\\\"TheReplacements.java\\\"); \\n    // Match the specially commented block of text above: \\n    Matcher mInput = \\n      Pattern.compile(\\\"/\\\\\\\\*!(.*)!\\\\\\\\*/\\\", Pattern.DOTALL) \\n        .matcher(s); \\n    if(mInput.find()) \\n      s = mInput.group(1); // Captured by parentheses \\n    // Replace two or more spaces with a single space: \\n    s = s.replaceAll(\\\" {2,}\\\", \\\" \\\"); \\n    // Replace one or more spaces at the beginning of each \\n    // line with no spaces. Must enable MULTILINE mode: \\n    s = s.replaceAll(\\\"(?m)^ +\\\", \\\"\\\"); \\n    print(s); \\n    s = s.replaceFirst(\\\"[aeiou]\\\", \\\"(VOWEL1)\\\"); \\n    StringBuffer sbuf = new StringBuffer(); \\n    Pattern p = Pattern.compile(\\\"[aeiou]\\\"); \\n    Matcher m = p.matcher(s); \\n    // Process the find information as you\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0c98a3bfae6c2e1328d2b09fd2174b3\",\n        \"type\": \"source_code\",\n        \"text\": \"// perform the replacements: \\n    while(m.find()) \\n      m.appendReplacement(sbuf, m.group().toUpperCase()); \\n    // Put in the remainder of the text: \\n    m.appendTail(sbuf); \\n    print(sbuf);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6f366b00a1ca80eed780b164a82e4302\",\n        \"type\": \"source_code\",\n        \"text\": \"Matcher m = Pattern.compile(\\\"[frb][aiu][gx]\\\") \\n      .matcher(\\\"fix the rug with bags\\\"); \\n    while(m.find())\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37d4da6b5bf792d207036446bc6796e0\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(m.group() + \\\" \\\"); \\n    System.out.println(); \\n    m.reset(\\\"fix the rig with rags\\\"); \\n    while(m.find()) \\n      System.out.print(m.group() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9dea797a675cfef5e671564b8badbff8\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length < 2) { \\n      System.out.println(\\\"Usage: java JGrep file regex\\\"); \\n      System.exit(0); \\n    } \\n    Pattern p = Pattern.compile(args[1]); \\n    // Iterate through the lines of the input file: \\n    int index = 0; \\n    Matcher m = p.matcher(\\\"\\\"); \\n    for(String line : new TextFile(args[0])) { \\n      m.reset(line); \\n      while(m.find()) \\n        System.out.println(index++ + \\\": \\\" + \\n          m.group() + \\\": \\\" + m.start()); \\n    }\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9e485682cdb450b3c2ab8c111622224a\",\n        \"type\": \"source_code\",\n        \"text\": \"new StringReader(\\\"Sir Robin of Camelot\\\\n22 1.61803\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0369fc0bc96b7655b0fb6a2c171cb860\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      System.out.println(\\\"What is your name?\\\"); \\n      String name = input.readLine(); \\n      System.out.println(name); \\n      System.out.println( \\n        \\\"How old are you? What is your favorite double?\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b7282a7896f68caf2a51edc433bee5a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"(input: <age> <double>)\\\"); \\n      String numbers = input.readLine(); \\n      System.out.println(numbers); \\n      String[] numArray = numbers.split(\\\" \\\"); \\n      int age = Integer.parseInt(numArray[0]); \\n      double favorite = Double.parseDouble(numArray[1]); \\n      System.out.format(\\\"Hi %s.\\\\n\\\", name); \\n      System.out.format(\\\"In 5 years you will be %d.\\\\n\\\", \\n        age + 5); \\n      System.out.format(\\\"My favorite double is %f.\\\", \\n        favorite / 2); \\n    } catch(IOException e) { \\n      System.err.println(\\\"I/O exception\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0971b8c03b842f1e647ada051754c494\",\n        \"type\": \"source_code\",\n        \"text\": \"Scanner stdin = new Scanner(SimpleRead.input); \\n    System.out.println(\\\"What is your name?\\\"); \\n    String name = stdin.nextLine(); \\n    System.out.println(name); \\n    System.out.println( \\n      \\\"How old are you? What is your favorite double?\\\"); \\n    System.out.println(\\\"(input: <age> <double>)\\\"); \\n    int age = stdin.nextInt(); \\n    double favorite = stdin.nextDouble(); \\n    System.out.println(age); \\n    System.out.println(favorite); \\n    System.out.format(\\\"Hi %s.\\\\n\\\", name); \\n    System.out.format(\\\"In 5 years you will be %d.\\\\n\\\", \\n      age + 5); \\n    System.out.format(\\\"My favorite double is %f.\\\", \\n      favorite / 2);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f727af9fdeaa8d2559a548765630719\",\n        \"type\": \"source_code\",\n        \"text\": \"Scanner scanner = new Scanner(\\\"12, 42, 78, 99, 42\\\"); \\n    scanner.useDelimiter(\\\"\\\\\\\\s*,\\\\\\\\s*\\\"); \\n    while(scanner.hasNextInt()) \\n      System.out.println(scanner.nextInt());\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6805b7f7f6c9c4132ce13559155292db\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"58.27.82.161@02/10/2005\\\\n\\\" + \\n    \\\"204.45.234.40@02/11/2005\\\\n\\\" + \\n    \\\"58.27.82.161@02/11/2005\\\\n\\\" + \\n    \\\"58.27.82.161@02/12/2005\\\\n\\\" + \\n    \\\"58.27.82.161@02/12/2005\\\\n\\\" + \\n    \\\"[Next log section with different data format]\\\";\",\n        \"programming_language\": \"Objective-C\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c49a575d1e6b4a1fd766ab90362fb99\",\n        \"type\": \"source_code\",\n        \"text\": \"Scanner scanner = new Scanner(threatData); \\n    String pattern = \\\"(\\\\\\\\d+[.]\\\\\\\\d+[.]\\\\\\\\d+[.]\\\\\\\\d+)@\\\" + \\n      \\\"(\\\\\\\\d{2}/\\\\\\\\d{2}/\\\\\\\\d{4})\\\"; \\n    while(scanner.hasNext(pattern)) { \\n      scanner.next(pattern); \\n      MatchResult match = scanner.match(); \\n      String ip = match.group(1); \\n      String date = match.group(2); \\n      System.out.format(\\\"Threat on %s from %s\\\\n\\\", date,ip); \\n    }\",\n        \"programming_language\": \"Objective-C\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74160e17b9887979d302c425898a94a2\",\n        \"type\": \"source_code\",\n        \"text\": \"String input = \\\"But I\\u2019m not dead yet! I feel happy!\\\"; \\n    StringTokenizer stoke = new StringTokenizer(input); \\n    while(stoke.hasMoreElements()) \\n      System.out.print(stoke.nextToken() + \\\" \\\"); \\n    System.out.println(); \\n    System.out.println(Arrays.toString(input.split(\\\" \\\"))); \\n    Scanner scanner = new Scanner(input); \\n    while(scanner.hasNext()) \\n      System.out.print(scanner.next() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d090af746b7f9c31c591f889bb8367eb\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Shape> shapeList = Arrays.asList( \\n      new Circle(), new Square(), new Triangle() \\n    ); \\n    for(Shape shape : shapeList) \\n      shape.draw();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e056556251158c061daf628ca5d718d5\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"inside main\\\"); \\n    new Candy(); \\n    print(\\\"After creating Candy\\\"); \\n    try { \\n      Class.forName(\\\"Gum\\\"); \\n    } catch(ClassNotFoundException e) { \\n      print(\\\"Couldn\\u2019t find Gum\\\"); \\n    } \\n    print(\\\"After Class.forName(\\\\\\\"Gum\\\\\\\")\\\"); \\n    new Cookie(); \\n    print(\\\"After creating Cookie\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38889b7d975627e8be6b626b760232c3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Class name: \\\" + cc.getName() + \\n      \\\" is interface? [\\\" + cc.isInterface() + \\\"]\\\"); \\n    print(\\\"Simple name: \\\" + cc.getSimpleName()); \\n    print(\\\"Canonical name : \\\" + cc.getCanonicalName());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15f71e54402df66a109ebe3a5045043d\",\n        \"type\": \"source_code\",\n        \"text\": \"Class c = null; \\n    try { \\n      c = Class.forName(\\\"typeinfo.toys.FancyToy\\\"); \\n    } catch(ClassNotFoundException e) { \\n      print(\\\"Can\\u2019t find FancyToy\\\"); \\n      System.exit(1); \\n    } \\n    printInfo(c);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e54e1adc655d49758d7123b372f7986a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Class face : c.getInterfaces()) \\n      printInfo(face); \\n    Class up = c.getSuperclass(); \\n    Object obj = null; \\n    try { \\n      // Requires default constructor: \\n      obj = up.newInstance(); \\n    } catch(InstantiationException e) { \\n      print(\\\"Cannot instantiate\\\"); \\n      System.exit(1); \\n    } catch(IllegalAccessException e) { \\n      print(\\\"Cannot access\\\"); \\n      System.exit(1); \\n    } \\n    printInfo(obj.getClass());\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a38d17cbeec817dddf8cb8eba0e5ae2c\",\n        \"type\": \"source_code\",\n        \"text\": \"ClassInitialization.rand.nextInt(1000);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6eefd9f14de3c505108090bf865871c9\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Initializing Initable\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b58977f9a56bb5c57caab7a5885d3c9d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Initializing Initable2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"189fd98c7e3ece8da69d96c179d134b3\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Initializing Initable3\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"19541e4c6e61f4e0039fa8f56aa4404a\",\n        \"type\": \"source_code\",\n        \"text\": \"Class initable = Initable.class; \\n    System.out.println(\\\"After creating Initable ref\\\"); \\n    // Does not trigger initialization: \\n    System.out.println(Initable.staticFinal); \\n    // Does trigger initialization: \\n    System.out.println(Initable.staticFinal2); \\n    // Does trigger initialization: \\n    System.out.println(Initable2.staticNonFinal); \\n    Class initable3 = Class.forName(\\\"Initable3\\\"); \\n    System.out.println(\\\"After creating Initable3 ref\\\"); \\n    System.out.println(Initable3.staticNonFinal);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"13d943f1b812abd3ffe5e431b2a481f9\",\n        \"type\": \"source_code\",\n        \"text\": \"Class intClass = int.class; \\n    Class<Integer> genericIntClass = int.class; \\n    genericIntClass = Integer.class; // Same thing \\n    intClass = double.class; \\n    // genericIntClass = double.class; // Illegal\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64ddee3c1d8e9d50658d82cc288a1750\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<?> intClass = int.class; \\n    intClass = double.class;\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b17039810d702f8912941cf33c83eff\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<? extends Number> bounded = int.class; \\n    bounded = double.class; \\n    bounded = Number.class; \\n    // Or anything else derived from Number.\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"291165859396dee79acd030bc9dfdf91\",\n        \"type\": \"source_code\",\n        \"text\": \"List<T> result = new ArrayList<T>(); \\n    try {\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"58fb2220a4f46b50119892455e869f13\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nElements; i++) \\n        result.add(type.newInstance()); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    } \\n    return result;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"929fdb01a8fe9b7f722d01bcbcd21fcb\",\n        \"type\": \"source_code\",\n        \"text\": \"FilledList<CountedInteger> fl = \\n      new FilledList<CountedInteger>(CountedInteger.class); \\n    System.out.println(fl.create(15));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40776bd257aa69a334afb96348f1daae\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<FancyToy> ftClass = FancyToy.class; \\n    // Produces exact type: \\n    FancyToy fancyToy = ftClass.newInstance(); \\n    Class<? super FancyToy> up = ftClass.getSuperclass(); \\n    // This won\\u2019t compile: \\n    // Class<Toy> up2 = ftClass.getSuperclass(); \\n    // Only produces Object: \\n    Object obj = up.newInstance();\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c339359f274b55c38ab072bce04811a\",\n        \"type\": \"source_code\",\n        \"text\": \"Building b = new House(); \\n    Class<House> houseType = House.class; \\n    House h = houseType.cast(b); \\n    h = (House)b; // ... or just do this.\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70d7b14f26e586f0153e45d3d13f3a74\",\n        \"type\": \"source_code\",\n        \"text\": \"int n = rand.nextInt(types().size()); \\n    try { \\n      return types().get(n).newInstance(); \\n    } catch(InstantiationException e) { \\n      throw new RuntimeException(e); \\n    } catch(IllegalAccessException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aed0a0221836b2f8b0cd950c178a7b04\",\n        \"type\": \"source_code\",\n        \"text\": \"Pet[] result = new Pet[size]; \\n    for(int i = 0; i < size; i++) \\n      result[i] = randomPet(); \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"886c1f45d9a7b3b02ef5c635378a8f1a\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList<Pet> result = new ArrayList<Pet>(); \\n    Collections.addAll(result, createArray(size)); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb494b234544d19d52f69e8fe6bf4092\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Class<? extends Pet>>();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6f6a203b3a063e6c48eaf4d7e3f2c77e\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"typeinfo.pets.Mutt\\\", \\n    \\\"typeinfo.pets.Pug\\\", \\n    \\\"typeinfo.pets.EgyptianMau\\\", \\n    \\\"typeinfo.pets.Manx\\\", \\n    \\\"typeinfo.pets.Cymric\\\",\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32efdf1ef6fc1c1fe6ffcee622a69156\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"typeinfo.pets.Rat\\\", \\n    \\\"typeinfo.pets.Mouse\\\", \\n    \\\"typeinfo.pets.Hamster\\\"\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"14713074ea020e42a04434ae5a3eda4a\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      for(String name : typeNames) \\n        types.add( \\n          (Class<? extends Pet>)Class.forName(name)); \\n    } catch(ClassNotFoundException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5607419d97de8f261961424b91169be4\",\n        \"type\": \"source_code\",\n        \"text\": \"public void count(String type) { \\n      Integer quantity = get(type); \\n      if(quantity == null) \\n        put(type, 1); \\n      else \\n        put(type, quantity + 1); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"026385b464953c0bba93a718a54ce5cb\",\n        \"type\": \"source_code\",\n        \"text\": \"PetCounter counter= new PetCounter(); \\n    for(Pet pet : creator.createArray(20)) { \\n      // List each individual pet: \\n      printnb(pet.getClass().getSimpleName() + \\\" \\\"); \\n      if(pet instanceof Pet) \\n        counter.count(\\\"Pet\\\"); \\n      if(pet instanceof Dog) \\n        counter.count(\\\"Dog\\\"); \\n      if(pet instanceof Mutt) \\n        counter.count(\\\"Mutt\\\"); \\n      if(pet instanceof Pug) \\n        counter.count(\\\"Pug\\\"); \\n      if(pet instanceof Cat)\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7fefaea7cb159975b3b497feedfd7efc\",\n        \"type\": \"source_code\",\n        \"text\": \"counter.count(\\\"Cat\\\"); \\n      if(pet instanceof Manx) \\n        counter.count(\\\"EgyptianMau\\\"); \\n      if(pet instanceof Manx) \\n        counter.count(\\\"Manx\\\"); \\n      if(pet instanceof Manx) \\n        counter.count(\\\"Cymric\\\"); \\n      if(pet instanceof Rodent) \\n        counter.count(\\\"Rodent\\\"); \\n      if(pet instanceof Rat) \\n        counter.count(\\\"Rat\\\"); \\n      if(pet instanceof Mouse) \\n        counter.count(\\\"Mouse\\\"); \\n      if(pet instanceof Hamster) \\n        counter.count(\\\"Hamster\\\"); \\n    } \\n    // Show the counts: \\n    print(); \\n    print(counter);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dde91f644eea90056b13e0422a516197\",\n        \"type\": \"source_code\",\n        \"text\": \"countPets(new ForNameCreator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d80a118f097ba94869cddabf64e056b\",\n        \"type\": \"source_code\",\n        \"text\": \"Collections.unmodifiableList(Arrays.asList( \\n      Pet.class, Dog.class, Cat.class,  Rodent.class, \\n      Mutt.class, Pug.class, EgyptianMau.class, Manx.class, \\n      Cymric.class, Rat.class, Mouse.class,Hamster.class));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3a2bafaed4ba25cbfa26ebffdf2f6b55\",\n        \"type\": \"source_code\",\n        \"text\": \"allTypes.subList(allTypes.indexOf(Mutt.class),\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6220786998c154787f525f4ad54b4f90\",\n        \"type\": \"source_code\",\n        \"text\": \"allTypes.size());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2157f59f0d0a165c62fa19197e74c583\",\n        \"type\": \"source_code\",\n        \"text\": \"return types;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6073985075c010df4849d4362cf7ff54\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(types);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e74459999eba9f0283374e17085510a1\",\n        \"type\": \"source_code\",\n        \"text\": \"new LiteralPetCreator();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b08892997a7eae04aabf74235638fc4\",\n        \"type\": \"source_code\",\n        \"text\": \"return creator.randomPet();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64b5c96a82a5821adec85c1e4ca0092c\",\n        \"type\": \"source_code\",\n        \"text\": \"return creator.createArray(size);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"080106e222e417c584abe444d3805ff7\",\n        \"type\": \"source_code\",\n        \"text\": \"return creator.arrayList(size);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35e0e16942dd265c58b18f2f83f9ded4\",\n        \"type\": \"source_code\",\n        \"text\": \"PetCount.countPets(Pets.creator);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"771033f4b5648ee31ec9bf7901034fd6\",\n        \"type\": \"source_code\",\n        \"text\": \"public PetCounter() { \\n      super(MapData.map(LiteralPetCreator.allTypes, 0)); \\n    } \\n    public void count(Pet pet) { \\n      // Class.isInstance() eliminates instanceofs: \\n      for(Map.Entry<Class<? extends Pet>,Integer> pair \\n          : entrySet()) \\n        if(pair.getKey().isInstance(pet)) \\n          put(pair.getKey(), pair.getValue() + 1); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c57ff60b26779dbd48964d6c4b86ea2a\",\n        \"type\": \"source_code\",\n        \"text\": \"public String toString() { \\n      StringBuilder result = new StringBuilder(\\\"{\\\"); \\n      for(Map.Entry<Class<? extends Pet>,Integer> pair \\n          : entrySet()) { \\n        result.append(pair.getKey().getSimpleName()); \\n        result.append(\\\"=\\\"); \\n        result.append(pair.getValue()); \\n        result.append(\\\", \\\"); \\n      } \\n      result.delete(result.length()-2, result.length()); \\n      result.append(\\\"}\\\"); \\n      return result.toString(); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f88d300b216a19993b06111e81afbb1\",\n        \"type\": \"source_code\",\n        \"text\": \"PetCounter petCount = new PetCounter(); \\n    for(Pet pet : Pets.createArray(20)) { \\n      printnb(pet.getClass().getSimpleName() + \\\" \\\"); \\n      petCount.count(pet); \\n    } \\n    print(); \\n    print(petCount);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7583fb55f22f1698375b7997e4a53093\",\n        \"type\": \"source_code\",\n        \"text\": \"this.baseType = baseType;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d54d1fa2d05870d51edc080404f1047\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<?> type = obj.getClass(); \\n    if(!baseType.isAssignableFrom(type)) \\n      throw new RuntimeException(obj + \\\" incorrect type: \\\" \\n        + type + \\\", should be type or subtype of \\\" \\n        + baseType); \\n    countClass(type);\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"edb9b4ea8c1afe1b984d49208265f4a0\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer quantity = get(type); \\n    put(type, quantity == null ? 1 : quantity + 1); \\n    Class<?> superClass = type.getSuperclass(); \\n    if(superClass != null && \\n       baseType.isAssignableFrom(superClass)) \\n      countClass(superClass);\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"08ddf61b3a8fcfd4be38aecb5cca630c\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(\\\"{\\\"); \\n    for(Map.Entry<Class<?>,Integer> pair : entrySet()) { \\n      result.append(pair.getKey().getSimpleName()); \\n      result.append(\\\"=\\\"); \\n      result.append(pair.getValue()); \\n      result.append(\\\", \\\"); \\n    } \\n    result.delete(result.length()-2, result.length()); \\n    result.append(\\\"}\\\"); \\n    return result.toString();\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"afc296409795b48d585f3c432e904bd6\",\n        \"type\": \"source_code\",\n        \"text\": \"TypeCounter counter = new TypeCounter(Pet.class); \\n    for(Pet pet : Pets.createArray(20)) { \\n      printnb(pet.getClass().getSimpleName() + \\\" \\\"); \\n      counter.count(pet); \\n    } \\n    print(); \\n    print(counter);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7a42b7b8d3e8f08adc688a8af9d40a1\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a661a98d55a8866d3a6cd7936ee487ea\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Factory<? extends Part>>();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8c67db8278fa7d7af6739d075818daf4\",\n        \"type\": \"source_code\",\n        \"text\": \"// Collections.addAll() gives an \\\"unchecked generic \\n    // array creation ... for varargs parameter\\\" warning. \\n    partFactories.add(new FuelFilter.Factory()); \\n    partFactories.add(new AirFilter.Factory()); \\n    partFactories.add(new CabinAirFilter.Factory()); \\n    partFactories.add(new OilFilter.Factory()); \\n    partFactories.add(new FanBelt.Factory()); \\n    partFactories.add(new PowerSteeringBelt.Factory()); \\n    partFactories.add(new GeneratorBelt.Factory());\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90074c4ed2fcb13fb904ce85fc15e306\",\n        \"type\": \"source_code\",\n        \"text\": \"int n = rand.nextInt(partFactories.size()); \\n    return partFactories.get(n).create();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ddb192605c7f7fc9abf58caad43978e\",\n        \"type\": \"source_code\",\n        \"text\": \"public FuelFilter create() { return new FuelFilter(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9d7cbcd23f12da299f56a76edda3ba2c\",\n        \"type\": \"source_code\",\n        \"text\": \"public AirFilter create() { return new AirFilter(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"36c0e396e7af6db0f1219d92401d9409\",\n        \"type\": \"source_code\",\n        \"text\": \"public CabinAirFilter create() { \\n      return new CabinAirFilter(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d458b10b59d429f8381ceb533dd4cdca\",\n        \"type\": \"source_code\",\n        \"text\": \"public OilFilter create() { return new OilFilter(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b50e396761a6fc14aefe0d7c82b46781\",\n        \"type\": \"source_code\",\n        \"text\": \"public FanBelt create() { return new FanBelt(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a91a4a180b676358ee611d33e6d18cf0\",\n        \"type\": \"source_code\",\n        \"text\": \"public GeneratorBelt create() { \\n      return new GeneratorBelt(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ecc5ce3a65e3dc2765a317e9e95d239\",\n        \"type\": \"source_code\",\n        \"text\": \"public PowerSteeringBelt create() { \\n      return new PowerSteeringBelt(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"785105bc4a6bfcd56ee38e620e0049a0\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 10; i++) \\n      System.out.println(Part.createRandom());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5ccf6d1d680f6959e559d1da53546e38\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Testing x of type \\\" + x.getClass()); \\n    print(\\\"x instanceof Base \\\" + (x instanceof Base)); \\n    print(\\\"x instanceof Derived \\\"+ (x instanceof Derived)); \\n    print(\\\"Base.isInstance(x) \\\"+ Base.class.isInstance(x)); \\n    print(\\\"Derived.isInstance(x) \\\" + \\n      Derived.class.isInstance(x)); \\n    print(\\\"x.getClass() == Base.class \\\" + \\n      (x.getClass() == Base.class)); \\n    print(\\\"x.getClass() == Derived.class \\\" + \\n      (x.getClass() == Derived.class)); \\n    print(\\\"x.getClass().equals(Base.class)) \\\"+ \\n      (x.getClass().equals(Base.class))); \\n    print(\\\"x.getClass().equals(Derived.class)) \\\" + \\n      (x.getClass().equals(Derived.class)));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ffc0d9fdf22afc2a93aaf8b21b787e85\",\n        \"type\": \"source_code\",\n        \"text\": \"test(new Base()); \\n    test(new Derived());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e3a8285ea637efe94980c74740cb9a34\",\n        \"type\": \"source_code\",\n        \"text\": \"class information\",\n        \"programming_language\": \"Perl6\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f53b618942054476ac20ac225f6a7af\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"usage:\\\\n\\\" + \\n    \\\"ShowMethods qualified.class.name\\\\n\\\" + \\n    \\\"To show all methods in class or:\\\\n\\\" + \\n    \\\"ShowMethods qualified.class.name word\\\\n\\\" + \\n    \\\"To search for methods involving \\u2018word\\u2019\\\";\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0e96e1ef49e0a3dd3367f76e1a03298\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length < 1) { \\n      print(usage); \\n      System.exit(0); \\n    } \\n    int lines = 0; \\n    try { \\n      Class<?> c = Class.forName(args[0]); \\n      Method[] methods = c.getMethods(); \\n      Constructor[] ctors = c.getConstructors(); \\n      if(args.length == 1) { \\n        for(Method method : methods) \\n          print( \\n            p.matcher(method.toString()).replaceAll(\\\"\\\")); \\n        for(Constructor ctor : ctors) \\n          print(p.matcher(ctor.toString()).replaceAll(\\\"\\\")); \\n        lines = methods.length + ctors.length; \\n      } else { \\n        for(Method method : methods) \\n          if(method.toString().indexOf(args[1]) != -1) { \\n            print( \\n              p.matcher(method.toString()).replaceAll(\\\"\\\")); \\n            lines++; \\n          } \\n        for(Constructor ctor : ctors) \\n          if(ctor.toString().indexOf(args[1]) != -1) { \\n            print(p.matcher( \\n              ctor.toString()).replaceAll(\\\"\\\")); \\n            lines++; \\n          } \\n      } \\n    } catch(ClassNotFoundException e) { \\n      print(\\\"No such class: \\\" + e); \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ce3ca9b952032ec603415aff855c83a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"somethingElse \\\" + arg);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db2ae46569edaf14ded39009e81cf915\",\n        \"type\": \"source_code\",\n        \"text\": \"this.proxied = proxied;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea80d62f3a1cbb2a90020fe637cbaacf\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"SimpleProxy doSomething\\\"); \\n    proxied.doSomething();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25e97f5239566ce22452d18f528e629b\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"SimpleProxy somethingElse \\\" + arg); \\n    proxied.somethingElse(arg);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5424dee6bb237c0996ec4afe639fb6f\",\n        \"type\": \"source_code\",\n        \"text\": \"iface.doSomething(); \\n    iface.somethingElse(\\\"bonobo\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3fe5a2cd028fb023f255a1b33e6894ac\",\n        \"type\": \"source_code\",\n        \"text\": \"consumer(new RealObject()); \\n    consumer(new SimpleProxy(new RealObject()));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db2ae46569edaf14ded39009e81cf915\",\n        \"type\": \"source_code\",\n        \"text\": \"this.proxied = proxied;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b084afeaef656faebbe7f7156b99bcf7\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"**** proxy: \\\" + proxy.getClass() + \\n      \\\", method: \\\" + method + \\\", args: \\\" + args); \\n    if(args != null) \\n      for(Object arg : args) \\n        System.out.println(\\\"  \\\" + arg); \\n    return method.invoke(proxied, args);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5424dee6bb237c0996ec4afe639fb6f\",\n        \"type\": \"source_code\",\n        \"text\": \"iface.doSomething(); \\n    iface.somethingElse(\\\"bonobo\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6003e95b4152cb9415a14b0de744017c\",\n        \"type\": \"source_code\",\n        \"text\": \"RealObject real = new RealObject(); \\n    consumer(real); \\n    // Insert a proxy and call again: \\n    Interface proxy = (Interface)Proxy.newProxyInstance( \\n      Interface.class.getClassLoader(), \\n      new Class[]{ Interface.class }, \\n      new DynamicProxyHandler(real)); \\n    consumer(proxy);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db2ae46569edaf14ded39009e81cf915\",\n        \"type\": \"source_code\",\n        \"text\": \"this.proxied = proxied;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e116c0d25431df3c7692517c89e6665\",\n        \"type\": \"source_code\",\n        \"text\": \"if(method.getName().equals(\\\"interesting\\\")) \\n      print(\\\"Proxy detected the interesting method\\\"); \\n    return method.invoke(proxied, args);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bac6dc816924908c9ed0b899788d5002\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"interesting \\\" + arg);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b4653c80c44101a4fd3d0910e81f9ab\",\n        \"type\": \"source_code\",\n        \"text\": \"SomeMethods proxy= (SomeMethods)Proxy.newProxyInstance( \\n      SomeMethods.class.getClassLoader(), \\n      new Class[]{ SomeMethods.class }, \\n      new MethodSelector(new Implementation())); \\n    proxy.boring1(); \\n    proxy.boring2(); \\n    proxy.interesting(\\\"bonobo\\\"); \\n    proxy.boring3();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bbc65adc1b894e53c8f062175e622c9e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.first = first; \\n    this.last = last; \\n    this.address = address;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a18d2a2830650aebd1277c58e6e0d255\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Person: \\\" + first + \\\" \\\" + last + \\\" \\\" + address;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee0fade2a63f50b64587ef9ce1f5294f\",\n        \"type\": \"source_code\",\n        \"text\": \"private NullPerson() { super(\\\"None\\\", \\\"None\\\", \\\"None\\\"); } \\n    public String toString() { return \\\"NullPerson\\\"; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d51410445565b6826d8589e78a24eae9\",\n        \"type\": \"source_code\",\n        \"text\": \"title = jobTitle; \\n    person = employee; \\n    if(person == null) \\n      person = Person.NULL;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"240a2ef72751b4201ee16cb16583868b\",\n        \"type\": \"source_code\",\n        \"text\": \"title = jobTitle; \\n    person = Person.NULL;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c66e5c4247d4f6d5022b5232918deee2\",\n        \"type\": \"source_code\",\n        \"text\": \"title = newTitle;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff74c9a920407865c8cf1f454729e2e0\",\n        \"type\": \"source_code\",\n        \"text\": \"person = newPerson; \\n    if(person == null) \\n      person = Person.NULL;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"456dc091cfb84b9b2eb0008d3048d296\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Position: \\\" + title + \\\" \\\" + person;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3dcc8708f6d82a87ebc43c1590d22d62\",\n        \"type\": \"source_code\",\n        \"text\": \"add(new Position(title, person));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f91e7d7e1d45a0d982f13ce68e96810d\",\n        \"type\": \"source_code\",\n        \"text\": \"for(String title : titles) \\n      add(new Position(title));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"250388d11a62dfd93a75db4ed56934fc\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Position position : this) \\n      if(position.getTitle().equals(title) && \\n         position.getPerson() == Person.NULL) \\n        return true; \\n    return false;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f8f60602a1ab17e8c5128c15b98b268\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Position position : this) \\n      if(position.getTitle().equals(title) && \\n         position.getPerson() == Person.NULL) { \\n        position.setPerson(hire); \\n        return; \\n      } \\n    throw new RuntimeException( \\n      \\\"Position \\\" + title + \\\" not available\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"943a04e08674e83a58e2a3404f092729\",\n        \"type\": \"source_code\",\n        \"text\": \"Staff staff = new Staff(\\\"President\\\", \\\"CTO\\\", \\n      \\\"Marketing Manager\\\", \\\"Product Manager\\\", \\n      \\\"Project Lead\\\", \\\"Software Engineer\\\", \\n      \\\"Software Engineer\\\", \\\"Software Engineer\\\", \\n      \\\"Software Engineer\\\", \\\"Test Engineer\\\", \\n      \\\"Technical Writer\\\"); \\n    staff.fillPosition(\\\"President\\\", \\n      new Person(\\\"Me\\\", \\\"Last\\\", \\\"The Top, Lonely At\\\")); \\n    staff.fillPosition(\\\"Project Lead\\\",\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7472652187017b5cf51f7c6d7be14ce\",\n        \"type\": \"source_code\",\n        \"text\": \"new Person(\\\"Janet\\\", \\\"Planner\\\", \\\"The Burbs\\\")); \\n    if(staff.positionAvailable(\\\"Software Engineer\\\")) \\n      staff.fillPosition(\\\"Software Engineer\\\", \\n        new Person(\\\"Bob\\\", \\\"Coder\\\", \\\"Bright Light City\\\")); \\n    System.out.println(staff);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cce86f5e55a2f157341f000969c47c83\",\n        \"type\": \"source_code\",\n        \"text\": \"public static void test(Robot r) { \\n      if(r instanceof Null) \\n        System.out.println(\\\"[Null Robot]\\\"); \\n      System.out.println(\\\"Robot name: \\\" + r.name()); \\n      System.out.println(\\\"Robot model: \\\" + r.model()); \\n      for(Operation operation : r.operations()) { \\n        System.out.println(operation.description()); \\n        operation.command(); \\n      } \\n    }\",\n        \"programming_language\": \"Objective-C\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb11d8c2f008f0483484fd9db148a6a5\",\n        \"type\": \"source_code\",\n        \"text\": \"return Arrays.asList( \\n      new Operation() { \\n        public String description() { \\n          return name + \\\" can shovel snow\\\"; \\n        } \\n        public void command() { \\n          System.out.println(name + \\\" shoveling snow\\\"); \\n        } \\n      },\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"02957c4ebc0596de978fdc11bf4d9717\",\n        \"type\": \"source_code\",\n        \"text\": \"new Operation() { \\n        public String description() { \\n          return name + \\\" can chip ice\\\"; \\n        } \\n        public void command() { \\n          System.out.println(name + \\\" chipping ice\\\"); \\n        } \\n      }, \\n      new Operation() { \\n        public String description() { \\n          return name + \\\" can clear the roof\\\"; \\n        } \\n        public void command() { \\n          System.out.println(name + \\\" clearing roof\\\"); \\n        } \\n      } \\n    );\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b5243c6b08ff9674d959912f5c21e87a\",\n        \"type\": \"source_code\",\n        \"text\": \"Robot.Test.test(new SnowRemovalRobot(\\\"Slusher\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30b14f45a6fd49caabd471cc0f95ac31\",\n        \"type\": \"source_code\",\n        \"text\": \"nullName = type.getSimpleName() + \\\" NullRobot\\\";\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68d6e0ad7b637055dc49e09ad323c2f7\",\n        \"type\": \"source_code\",\n        \"text\": \"public String name() { return nullName; } \\n    public String model() { return nullName; } \\n    public List<Operation> operations() { \\n      return Collections.emptyList(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12b7d341fdd3483e82fb9f3a385556ee\",\n        \"type\": \"source_code\",\n        \"text\": \"return method.invoke(proxied, args);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ffbd91058ab4235c9c44df4d5d13098\",\n        \"type\": \"source_code\",\n        \"text\": \"return (Robot)Proxy.newProxyInstance( \\n      NullRobot.class.getClassLoader(), \\n      new Class[]{ Null.class, Robot.class }, \\n      new NullRobotProxyHandler(type));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dcc381cc3ce06ce5fe8f646a12891a4f\",\n        \"type\": \"source_code\",\n        \"text\": \"Robot[] bots = { \\n      new SnowRemovalRobot(\\\"SnowBee\\\"), \\n      newNullRobot(SnowRemovalRobot.class) \\n    }; \\n    for(Robot bot : bots) \\n      Robot.Test.test(bot);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"141ceba1e225b21777b7248a9b0202da\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = new B(); \\n    a.f(); \\n    // a.g(); // Compile error \\n    System.out.println(a.getClass().getName()); \\n    if(a instanceof B) { \\n      B b = (B)a; \\n      b.g(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"89c95fc109f4492023ac5597cc3162a4\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = HiddenC.makeA(); \\n    a.f(); \\n    System.out.println(a.getClass().getName()); \\n    // Compile error: cannot find symbol \\u2018C\\u2019: \\n    /* if(a instanceof C) { \\n      C c = (C)a; \\n      c.g(); \\n    } */ \\n    // Oops! Reflection still allows us to call g(): \\n    callHiddenMethod(a, \\\"g\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d3975e181c5086fa67392eb33db8afc\",\n        \"type\": \"source_code\",\n        \"text\": \"// And even methods that are less accessible! \\n    callHiddenMethod(a, \\\"u\\\"); \\n    callHiddenMethod(a, \\\"v\\\"); \\n    callHiddenMethod(a, \\\"w\\\");\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e13c0751b92e976755fa16e5faace05b\",\n        \"type\": \"source_code\",\n        \"text\": \"Method g = a.getClass().getDeclaredMethod(methodName); \\n    g.setAccessible(true); \\n    g.invoke(a);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4a2a792009a49babdfbf6e931ca1f4ca\",\n        \"type\": \"source_code\",\n        \"text\": \"typeinfo.packageaccess.C(); \\n    public void f( ); \\n    public void g( ); \\n    void u( ); \\n    protected void v( ); \\n    private void w();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e99d1005ea40a8085c5f8fc896815260\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() { print(\\\"public C.f()\\\"); } \\n    public void g() { print(\\\"public C.g()\\\"); } \\n    void u() { print(\\\"package C.u()\\\"); } \\n    protected void v() { print(\\\"protected C.v()\\\"); } \\n    private void w() { print(\\\"private C.w()\\\"); }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"16ce10d4431ea18bc7c174b589c75147\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = InnerA.makeA(); \\n    a.f(); \\n    System.out.println(a.getClass().getName()); \\n    // Reflection still gets into the private class: \\n    HiddenImplementation.callHiddenMethod(a, \\\"g\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"u\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"v\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"w\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"169f5fdab1165c03fc617b56ee3ff9fa\",\n        \"type\": \"source_code\",\n        \"text\": \"return new A() { \\n      public void f() { print(\\\"public C.f()\\\"); } \\n      public void g() { print(\\\"public C.g()\\\"); } \\n      void u() { print(\\\"package C.u()\\\"); } \\n      protected void v() { print(\\\"protected C.v()\\\"); } \\n      private void w() { print(\\\"private C.w()\\\"); } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4b33d6eb0ba8d2a999eb6bb364471a7\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = AnonymousA.makeA(); \\n    a.f(); \\n    System.out.println(a.getClass().getName()); \\n    // Reflection still gets into the anonymous class: \\n    HiddenImplementation.callHiddenMethod(a, \\\"g\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"u\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"v\\\"); \\n    HiddenImplementation.callHiddenMethod(a, \\\"w\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1053a68717a632a5e83d2a036afe5863\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"i = \\\" + i + \\\", \\\" + s + \\\", \\\" + s2;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8aaa48cd34646e62b8b0aaba451b7d97\",\n        \"type\": \"source_code\",\n        \"text\": \"WithPrivateFinalField pf = new WithPrivateFinalField(); \\n    System.out.println(pf); \\n    Field f = pf.getClass().getDeclaredField(\\\"i\\\"); \\n    f.setAccessible(true); \\n    System.out.println(\\\"f.getInt(pf): \\\" + f.getInt(pf)); \\n    f.setInt(pf, 47); \\n    System.out.println(pf); \\n    f = pf.getClass().getDeclaredField(\\\"s\\\"); \\n    f.setAccessible(true); \\n    System.out.println(\\\"f.get(pf): \\\" + f.get(pf)); \\n    f.set(pf, \\\"No, you\\u2019re not!\\\"); \\n    System.out.println(pf); \\n    f = pf.getClass().getDeclaredField(\\\"s2\\\"); \\n    f.setAccessible(true); \\n    System.out.println(\\\"f.get(pf): \\\" + f.get(pf)); \\n    f.set(pf, \\\"No, you\\u2019re not!\\\"); \\n    System.out.println(pf);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"739d74af9d26e1ea4254ea5a3b8c1e9e\",\n        \"type\": \"source_code\",\n        \"text\": \"Holder2 h2 = new Holder2(new Automobile()); \\n    Automobile a = (Automobile)h2.get(); \\n    h2.set(\\\"Not an Automobile\\\"); \\n    String s = (String)h2.get(); \\n    h2.set(1); // Autoboxes to Integer \\n    Integer x = (Integer)h2.get();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e4349e496240bf06d3a10866cc7745a\",\n        \"type\": \"source_code\",\n        \"text\": \"Holder3<Automobile> h3 = \\n      new Holder3<Automobile>(new Automobile()); \\n    Automobile a = h3.get(); // No cast needed \\n    // h3.set(\\\"Not an Automobile\\\"); // Error \\n    // h3.set(1); // Error\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"56805354aad537619a278d2d934be479\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + first + \\\", \\\" + second + \\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"02524d91d7c563c53cad2e5c6eb611df\",\n        \"type\": \"source_code\",\n        \"text\": \"super(a, b); \\n    third = c;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33f443365f486ab82dcca53064679f4f\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + first + \\\", \\\" + second + \\\", \\\" + third +\\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"acb87c1e7286466d34c14685d4f02d79\",\n        \"type\": \"source_code\",\n        \"text\": \"super(a, b, c); \\n    fourth = d;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b76211e900d86213744c92f30bfde36\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + first + \\\", \\\" + second + \\\", \\\" + \\n      third + \\\", \\\" + fourth + \\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2734d7c58fc13c58bde5e5254707628c\",\n        \"type\": \"source_code\",\n        \"text\": \"super(a, b, c, d); \\n    fifth = e;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c905fab718ff526b406e11bc5caeaad2\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + first + \\\", \\\" + second + \\\", \\\" + \\n      third + \\\", \\\" + fourth + \\\", \\\" + fifth + \\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"594107e19226d86015a48100fedc413b\",\n        \"type\": \"source_code\",\n        \"text\": \"// Autoboxing converts the int to Integer: \\n    return new TwoTuple<String,Integer>(\\\"hi\\\", 47);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83dc2861df976e7775a8e0e74a1eab2f\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ThreeTuple<Amphibian, String, Integer>( \\n      new Amphibian(), \\\"hi\\\", 47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f8083716681e7f02666370be9ed3489\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\n      new FourTuple<Vehicle,Amphibian,String,Integer>( \\n        new Vehicle(), new Amphibian(), \\\"hi\\\", 47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7d0f6419db7dcb26775abd30ca2e2b5d\",\n        \"type\": \"source_code\",\n        \"text\": \"return new \\n      FiveTuple<Vehicle,Amphibian,String,Integer,Double>(\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ce116aabf04bb0fe36f22e33ed36c39\",\n        \"type\": \"source_code\",\n        \"text\": \"new Vehicle(), new Amphibian(), \\\"hi\\\", 47, 11.1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c698d6f1ee8cd36106d058724532868c\",\n        \"type\": \"source_code\",\n        \"text\": \"TwoTuple<String,Integer> ttsi = f(); \\n    System.out.println(ttsi); \\n    // ttsi.first = \\\"there\\\"; // Compile error: final \\n    System.out.println(g()); \\n    System.out.println(h()); \\n    System.out.println(k());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"954552ec9e0fbbeffb8ce935afaa8d03\",\n        \"type\": \"source_code\",\n        \"text\": \"U item; \\n    Node<U> next; \\n    Node() { item = null; next = null; } \\n    Node(U item, Node<U> next) { \\n      this.item = item; \\n      this.next = next; \\n    } \\n    boolean end() { return item == null && next == null; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2a4d32c9a1bf4f204cd5e17eb6f1ac6a\",\n        \"type\": \"source_code\",\n        \"text\": \"top = new Node<T>(item, top);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a16189ffd97ed30179c60567f5299282\",\n        \"type\": \"source_code\",\n        \"text\": \"T result = top.item; \\n    if(!top.end()) \\n      top = top.next; \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e969463e64b0a09f3810396335e052ac\",\n        \"type\": \"source_code\",\n        \"text\": \"LinkedStack<String> lss = new LinkedStack<String>(); \\n    for(String s : \\\"Phasers on stun!\\\".split(\\\" \\\")) \\n      lss.push(s); \\n    String s; \\n    while((s = lss.pop()) != null) \\n      System.out.println(s);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6605c0ee499c2892037c2daaaaaf79c5\",\n        \"type\": \"source_code\",\n        \"text\": \"return storage.get(rand.nextInt(storage.size()));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"10da1e02a1949d0e972ec7034d60d183\",\n        \"type\": \"source_code\",\n        \"text\": \"RandomList<String> rs = new RandomList<String>(); \\n    for(String s: (\\\"The quick brown fox jumped over \\\" + \\n        \\\"the lazy brown dog\\\").split(\\\" \\\")) \\n      rs.add(s); \\n    for(int i = 0; i < 11; i++) \\n      System.out.print(rs.select() + \\\" \\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b9ee178e464707ae0e11e1fb27dfff2\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName() + \\\" \\\" + id;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7b4e2e89f33fda39e0b02e937dc57ff\",\n        \"type\": \"source_code\",\n        \"text\": \"Cappuccino.class, Americano.class, Breve.class, };\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"669d42231d3b783d842c9fc919183adb\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      return (Coffee) \\n        types[rand.nextInt(types.length)].newInstance(); \\n      // Report programmer errors at run time: \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c297da491a69691ac98b7fe21223a81\",\n        \"type\": \"source_code\",\n        \"text\": \"int count = size; \\n    public boolean hasNext() { return count > 0; } \\n    public Coffee next() { \\n      count--; \\n      return CoffeeGenerator.this.next(); \\n    } \\n    public void remove() { // Not implemented \\n      throw new UnsupportedOperationException(); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d63e7a58eca3fc28e7688061bf72ebd4\",\n        \"type\": \"source_code\",\n        \"text\": \"return new CoffeeIterator();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b2fac59a78b3a3a91070d048e2df26c\",\n        \"type\": \"source_code\",\n        \"text\": \"CoffeeGenerator gen = new CoffeeGenerator(); \\n    for(int i = 0; i < 5; i++) \\n      System.out.println(gen.next()); \\n    for(Coffee c : new CoffeeGenerator(5)) \\n      System.out.println(c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f3808d3f2b5c7360952f41ad516dec3\",\n        \"type\": \"source_code\",\n        \"text\": \"if(n < 2) return 1; \\n    return fib(n-2) + fib(n-1);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"80147cf2c87c1364530b1bb340ad6da3\",\n        \"type\": \"source_code\",\n        \"text\": \"Fibonacci gen = new Fibonacci(); \\n    for(int i = 0; i < 18; i++) \\n      System.out.print(gen.next() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"784b9e6388d1423f47dff54df75de9cb\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterator<Integer>() { \\n      public boolean hasNext() { return n > 0; } \\n      public Integer next() { \\n        n--; \\n        return IterableFibonacci.this.next(); \\n      } \\n      public void remove() { // Not implemented \\n        throw new UnsupportedOperationException();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"178b01f055543496a0958397b75fba5b\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    };\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"159de8c1ec026eaf896f7d1f154bfdd2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i : new IterableFibonacci(18)) \\n      System.out.print(i + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a41ee7e51b89e58067f9191362b23fa0\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(x.getClass().getName());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3edb607b98062c1de470dab06c559687\",\n        \"type\": \"source_code\",\n        \"text\": \"GenericMethods gm = new GenericMethods(); \\n    gm.f(\\\"\\\"); \\n    gm.f(1); \\n    gm.f(1.0); \\n    gm.f(1.0F); \\n    gm.f(\\u2018c\\u2019); \\n    gm.f(gm);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9489e34d8ed64e1a00c2e55ed8560f6f\",\n        \"type\": \"source_code\",\n        \"text\": \"return new HashMap<K,V>();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1714d30e0ecf60aa599adeddbd36b07a\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ArrayList<T>();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa064c59769a09b68ebcd301e3954895\",\n        \"type\": \"source_code\",\n        \"text\": \"return new LinkedList<T>();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd0ba132b630de1fdd0c8ce899606cd6\",\n        \"type\": \"source_code\",\n        \"text\": \"return new HashSet<T>();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa064c59769a09b68ebcd301e3954895\",\n        \"type\": \"source_code\",\n        \"text\": \"return new LinkedList<T>();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"59400f3e2236eae90e2c9ceed0b924b3\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<String, List<String>> sls = New.map(); \\n    List<String> ls = New.list(); \\n    LinkedList<String> lls = New.lList(); \\n    Set<String> ss = New.set(); \\n    Queue<String> qs = New.queue();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04c2fee72f3deeb844b7f624472fc407\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<Person, List<? extends Pet>> petPeople = New.map(); \\n    // Rest of the code is the same...\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"80f89a0cd74d8b9fafe492a01358900f\",\n        \"type\": \"source_code\",\n        \"text\": \"// f(New.map()); // Does not compile\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eba57739308a20afad53d4c3cfc10b19\",\n        \"type\": \"source_code\",\n        \"text\": \"f(New.<Person, List<Pet>>map());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93e457e6cfbf3af99f5525f531f6a016\",\n        \"type\": \"source_code\",\n        \"text\": \"List<T> result = new ArrayList<T>(); \\n    for(T item : args) \\n      result.add(item); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f29a1ef3699dbd2fc1f539e529ccabc0\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> ls = makeList(\\\"A\\\"); \\n    System.out.println(ls); \\n    ls = makeList(\\\"A\\\", \\\"B\\\", \\\"C\\\"); \\n    System.out.println(ls); \\n    ls = makeList(\\\"ABCDEFFHIJKLMNOPQRSTUVWXYZ\\\".split(\\\"\\\")); \\n    System.out.println(ls);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d360c6da8e3d2a92efb0f064aadb0c2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < n; i++) \\n      coll.add(gen.next()); \\n    return coll;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04a4b10d73cda5d1b34eb73b6ad314e1\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<Coffee> coffee = fill( \\n      new ArrayList<Coffee>(), new CoffeeGenerator(), 4); \\n    for(Coffee c : coffee) \\n      System.out.println(c); \\n    Collection<Integer> fnumbers = fill( \\n      new ArrayList<Integer>(), new Fibonacci(), 12); \\n    for(int i : fnumbers) \\n      System.out.print(i + \\\", \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1346c8411bac507ad4b3357a2a8abb80\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      // Assumes type is a public class: \\n      return type.newInstance(); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b22bd756810aab8bc8c78db93154753b\",\n        \"type\": \"source_code\",\n        \"text\": \"return new BasicGenerator<T>(type);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed403bdaa4cd89787bc84a4e6f3aa69a\",\n        \"type\": \"source_code\",\n        \"text\": \"Generator<CountedObject> gen = \\n      BasicGenerator.create(CountedObject.class); \\n    for(int i = 0; i < 5; i++) \\n      System.out.println(gen.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc12d49dfae887c61a5fc6e711127843\",\n        \"type\": \"source_code\",\n        \"text\": \"return new TwoTuple<A,B>(a, b);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42d4ba87bf7200b2aab27467f2e248d4\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ThreeTuple<A,B,C>(a, b, c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39206fac976756a1d2379f79c26e83ea\",\n        \"type\": \"source_code\",\n        \"text\": \"return new FourTuple<A,B,C,D>(a, b, c, d);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3789d48c3478eabc026f58103133807a\",\n        \"type\": \"source_code\",\n        \"text\": \"return new FiveTuple<A,B,C,D,E>(a, b, c, d, e);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b48db5fff6f0ce8a58a28b343b9a6fff\",\n        \"type\": \"source_code\",\n        \"text\": \"return tuple(\\\"hi\\\", 47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6dff20e39b54349391ea4518af971b81\",\n        \"type\": \"source_code\",\n        \"text\": \"return tuple(new Amphibian(), \\\"hi\\\", 47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1efa32d5c0d94071ce55b828ea47cf84\",\n        \"type\": \"source_code\",\n        \"text\": \"return tuple(new Vehicle(), new Amphibian(), \\\"hi\\\", 47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ceb918f7e87154dd9e6443a663250195\",\n        \"type\": \"source_code\",\n        \"text\": \"return tuple(new Vehicle(), new Amphibian(), \\n      \\\"hi\\\", 47, 11.1);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a0e9b801062dc02309f745f687b00822\",\n        \"type\": \"source_code\",\n        \"text\": \"TwoTuple<String,Integer> ttsi = f(); \\n    System.out.println(ttsi); \\n    System.out.println(f2()); \\n    System.out.println(g());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"331930c0430864c27f1d98735e1b380a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(h()); \\n    System.out.println(k());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5af8c395e8537782ebc68debd035c4a8\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<T> result = new HashSet<T>(a); \\n    result.addAll(b); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"034096d469275e2f618307290617a6f6\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<T> result = new HashSet<T>(a); \\n    result.retainAll(b); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72bbb75a0cef3faac96417b5f8794a23\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<T> result = new HashSet<T>(superset); \\n    result.removeAll(subset); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"354cd6617eddce8280ee02e79c4f24fb\",\n        \"type\": \"source_code\",\n        \"text\": \"return difference(union(a, b), intersection(a, b));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03145e1cd9fe86fa7b60b349974b7bee\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<Watercolors> set1 = \\n      EnumSet.range(BRILLIANT_RED, VIRIDIAN_HUE); \\n    Set<Watercolors> set2 = \\n      EnumSet.range(CERULEAN_BLUE_HUE, BURNT_UMBER); \\n    print(\\\"set1: \\\" + set1); \\n    print(\\\"set2: \\\" + set2); \\n    print(\\\"union(set1, set2): \\\" + union(set1, set2)); \\n    Set<Watercolors> subset = intersection(set1, set2); \\n    print(\\\"intersection(set1, set2): \\\" + subset); \\n    print(\\\"difference(set1, subset): \\\" + \\n      difference(set1, subset));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15ad2b310fdd2e079148abfb6d16f7e5\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"difference(set2, subset): \\\" + \\n      difference(set2, subset)); \\n    print(\\\"complement(set1, set2): \\\" + \\n      complement(set1, set2));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"01c8c1d0cd996415ce8b23fbac65ca23\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> result = new TreeSet<String>(); \\n    for(Method m : type.getMethods()) \\n      result.add(m.getName()); \\n    return result;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1e154226c3f9efbf8ffe14a6f84bc0b6\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(\\\"Interfaces in \\\" + \\n      type.getSimpleName() + \\\": \\\"); \\n    List<String> result = new ArrayList<String>(); \\n    for(Class<?> c : type.getInterfaces()) \\n      result.add(c.getSimpleName()); \\n    System.out.println(result);\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0fa64c464b5a63f5cae36b7f62e35c6e\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(superset.getSimpleName() + \\n      \\\" extends \\\" + subset.getSimpleName() + \\\", adds: \\\"); \\n    Set<String> comp = Sets.difference( \\n      methodSet(superset), methodSet(subset)); \\n    comp.removeAll(object); // Don\\u2019t show \\u2018Object\\u2019 methods \\n    System.out.println(comp); \\n    interfaces(superset);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5faa78d1d49579d234e5c9df73eb407a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Collection: \\\" + \\n      methodSet(Collection.class)); \\n    interfaces(Collection.class); \\n    difference(Set.class, Collection.class); \\n    difference(HashSet.class, Set.class); \\n    difference(LinkedHashSet.class, HashSet.class); \\n    difference(TreeSet.class, Set.class); \\n    difference(List.class, Collection.class); \\n    difference(ArrayList.class, List.class); \\n    difference(LinkedList.class, List.class); \\n    difference(Queue.class, Collection.class); \\n    difference(PriorityQueue.class, Queue.class); \\n    System.out.println(\\\"Map: \\\" + methodSet(Map.class)); \\n    difference(HashMap.class, Map.class);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8686a5808d51df8b6f820de46c22736\",\n        \"type\": \"source_code\",\n        \"text\": \"difference(LinkedHashMap.class, HashMap.class); \\n    difference(SortedMap.class, Map.class); \\n    difference(TreeMap.class, Map.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"433f4d18ceefe44f6204d2d1507f2195\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Generator<Customer>() { \\n      public Customer next() { return new Customer(); } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9bc53fb030d880b2d7f271d73e8b312\",\n        \"type\": \"source_code\",\n        \"text\": \"new Generator<Teller>() { \\n      public Teller next() { return new Teller(); } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c49e1a1b142d5c5130767e2ba4c29217\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(t + \\\" serves \\\" + c);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d1fae965665d6fc7f29590f4e50ec4bd\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    Queue<Customer> line = new LinkedList<Customer>(); \\n    Generators.fill(line, Customer.generator(), 15); \\n    List<Teller> tellers = new ArrayList<Teller>(); \\n    Generators.fill(tellers, Teller.generator, 4);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78f8639097faef8953f403e9c477e9df\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Customer c : line) \\n      serve(tellers.get(rand.nextInt(tellers.size())), c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a0d5672f886598524ddea7daf6836c6\",\n        \"type\": \"source_code\",\n        \"text\": \"TupleList<Vehicle, Amphibian, String, Integer> tl = \\n      new TupleList<Vehicle, Amphibian, String, Integer>(); \\n    tl.add(TupleTest.h()); \\n    tl.add(TupleTest.h()); \\n    for(FourTuple<Vehicle,Amphibian,String,Integer> i: tl) \\n      System.out.println(i);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"45cf87ab4ff3bc5a3649e2a3bba31266\",\n        \"type\": \"source_code\",\n        \"text\": \"id = IDnumber; \\n    description = descr; \\n    this.price = price; \\n    System.out.println(toString());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f77ffa4d3e6f0bc90425eddd4120f0be\",\n        \"type\": \"source_code\",\n        \"text\": \"return id + \\\": \\\" + description + \\\", price: $\\\" + price;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"327484f47c78460e6b26aa5177aace32\",\n        \"type\": \"source_code\",\n        \"text\": \"price += change;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eb2869eee63fee13d1fb5ca74460a534\",\n        \"type\": \"source_code\",\n        \"text\": \"new Generator<Product>() { \\n      private Random rand = new Random(47); \\n      public Product next() { \\n        return new Product(rand.nextInt(1000), \\\"Test\\\", \\n          Math.round(rand.nextDouble() * 1000.0) + 0.99); \\n      } \\n    };\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33e7f3be9a7f92e29a5e439001880573\",\n        \"type\": \"source_code\",\n        \"text\": \"Generators.fill(this, Product.generator, nProducts);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f534a522d86553f05c100d713feeff86\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nShelves; i++) \\n      add(new Shelf(nProducts));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"293daec408746a5a13039d2fbbe1eb58\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<CheckoutStand>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b3882d11425a91becfc08f83a7f9cda1\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nAisles; i++)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa1f4b3e95e29c2c64ee8b25af9710e2\",\n        \"type\": \"source_code\",\n        \"text\": \"add(new Aisle(nShelves, nProducts));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d891d18714c2a619a01f1e3bba7017a\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(); \\n    for(Aisle a : this) \\n      for(Shelf s : a) \\n        for(Product p : s) { \\n          result.append(p); \\n          result.append(\\\"\\\\n\\\"); \\n        } \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"23105e75c35e36d5c390583e13f6227c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(new Store(14, 5, 10));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64bf01cb9309df770ea7961aa4c917e7\",\n        \"type\": \"source_code\",\n        \"text\": \"Class c1 = new ArrayList<String>().getClass(); \\n    Class c2 = new ArrayList<Integer>().getClass(); \\n    System.out.println(c1 == c2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44b2e380ada7e006eb44c18047bee27d\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Frob> list = new ArrayList<Frob>(); \\n    Map<Frob,Fnorkle> map = new HashMap<Frob,Fnorkle>(); \\n    Quark<Fnorkle> quark = new Quark<Fnorkle>(); \\n    Particle<Long,Double> p = new Particle<Long,Double>(); \\n    System.out.println(Arrays.toString( \\n      list.getClass().getTypeParameters())); \\n    System.out.println(Arrays.toString( \\n      map.getClass().getTypeParameters())); \\n    System.out.println(Arrays.toString( \\n      quark.getClass().getTypeParameters())); \\n    System.out.println(Arrays.toString( \\n      p.getClass().getTypeParameters()));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"79d9411095e2679969cffbf669154736\",\n        \"type\": \"source_code\",\n        \"text\": \"HasF hf = new HasF();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ffa557fb11aa01553037e8d87caf0dc\",\n        \"type\": \"source_code\",\n        \"text\": \"Manipulator<HasF> manipulator = \\n      new Manipulator<HasF>(hf); \\n    manipulator.manipulate();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7eb682e713dec242e2a4052c27e1680a\",\n        \"type\": \"source_code\",\n        \"text\": \"Derived2 d2 = new Derived2(); \\n    Object obj = d2.get(); \\n    d2.set(obj); // Warning here!\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"11bf495b203ff4cf405e9885140ed48c\",\n        \"type\": \"source_code\",\n        \"text\": \"return (T[])Array.newInstance(kind, size);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65c993a4157c9ebff2d0500d1d5141c6\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayMaker<String> stringMaker = \\n      new ArrayMaker<String>(String.class); \\n    String[] stringArray = stringMaker.create(9); \\n    System.out.println(Arrays.toString(stringArray));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"046d4574ca1fd04f482844d57cabbcc9\",\n        \"type\": \"source_code\",\n        \"text\": \"ListMaker<String> stringMaker= new ListMaker<String>(); \\n    List<String> stringList = stringMaker.create();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d92c9d97df57a8014bd530a5d12e6ee6\",\n        \"type\": \"source_code\",\n        \"text\": \"List<T> result = new ArrayList<T>(); \\n    for(int i = 0; i < n; i++) \\n      result.add(t); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68acad738724ab4a0f2af94bd3722068\",\n        \"type\": \"source_code\",\n        \"text\": \"FilledListMaker<String> stringMaker = \\n      new FilledListMaker<String>(); \\n    List<String> list = stringMaker.create(\\\"Hello\\\", 4); \\n    System.out.println(list);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af6b984dc52218fd9a8c068eaaaf4bc7\",\n        \"type\": \"source_code\",\n        \"text\": \"SimpleHolder holder = new SimpleHolder(); \\n    holder.set(\\\"Item\\\"); \\n    String s = (String)holder.get();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2764625004427d0f8c2ab4108e77f43\",\n        \"type\": \"source_code\",\n        \"text\": \"putfield #2; //Field obj:Object;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93e6a45d9a9da58eec3ef87cb307a67e\",\n        \"type\": \"source_code\",\n        \"text\": \"getfield #2; //Field obj:Object;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be161ba84c6568df15e9c35dbcb7c35a\",\n        \"type\": \"source_code\",\n        \"text\": \"areturn\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"46b95b712a8411630427e33e90e1611b\",\n        \"type\": \"source_code\",\n        \"text\": \"new #3; //class SimpleHolder\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb3efc483ca46384ab040e084d31775b\",\n        \"type\": \"source_code\",\n        \"text\": \"invokespecial #4; //Method \\\"<init>\\\":()V\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d9699461a167f8a85603678be98362\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_1\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24ab4cf1c776f07a2490a6354992acce\",\n        \"type\": \"source_code\",\n        \"text\": \"ldc #5; //String Item\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c1bbf1c3ee844cbfa0f30676b7aeebf\",\n        \"type\": \"source_code\",\n        \"text\": \"GenericHolder<String> holder = \\n      new GenericHolder<String>(); \\n    holder.set(\\\"Item\\\"); \\n    String s = holder.get();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2764625004427d0f8c2ab4108e77f43\",\n        \"type\": \"source_code\",\n        \"text\": \"putfield #2; //Field obj:Object;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93e6a45d9a9da58eec3ef87cb307a67e\",\n        \"type\": \"source_code\",\n        \"text\": \"getfield #2; //Field obj:Object;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be161ba84c6568df15e9c35dbcb7c35a\",\n        \"type\": \"source_code\",\n        \"text\": \"areturn\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad81653b1fb1e7a1b8392fa632c9a276\",\n        \"type\": \"source_code\",\n        \"text\": \"new #3; //class GenericHolder\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb3efc483ca46384ab040e084d31775b\",\n        \"type\": \"source_code\",\n        \"text\": \"invokespecial #4; //Method \\\"<init>\\\":()V\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d9699461a167f8a85603678be98362\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_1\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24ab4cf1c776f07a2490a6354992acce\",\n        \"type\": \"source_code\",\n        \"text\": \"ldc #5; //String Item\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44b5102e0c9565e7eab0ea4103307bf8\",\n        \"type\": \"source_code\",\n        \"text\": \"if(arg instanceof T) {}          // Error \\n    T var = new T();                 // Error \\n    T[] array = new T[SIZE];         // Error \\n    T[] array = (T)new Object[SIZE]; // Unchecked warning\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8aa3b060320bc037cb2a6ed3f820265e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.kind = kind;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1695c64297a4da0d18c9a07880735522\",\n        \"type\": \"source_code\",\n        \"text\": \"return kind.isInstance(arg);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72a780d9d9c93f910c8ba158407a4cb4\",\n        \"type\": \"source_code\",\n        \"text\": \"ClassTypeCapture<Building> ctt1 = \\n      new ClassTypeCapture<Building>(Building.class); \\n    System.out.println(ctt1.f(new Building())); \\n    System.out.println(ctt1.f(new House())); \\n    ClassTypeCapture<House> ctt2 = \\n      new ClassTypeCapture<House>(House.class); \\n    System.out.println(ctt2.f(new Building())); \\n    System.out.println(ctt2.f(new House()));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e9ba178fa5c9a1af85c439caeb0b1ff\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      x = kind.newInstance(); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1bb5cfc59e9a8541c4e0158169d550f\",\n        \"type\": \"source_code\",\n        \"text\": \"ClassAsFactory<Employee> fe = \\n      new ClassAsFactory<Employee>(Employee.class); \\n    print(\\\"ClassAsFactory<Employee> succeeded\\\"); \\n    try { \\n      ClassAsFactory<Integer> fi = \\n        new ClassAsFactory<Integer>(Integer.class); \\n    } catch(Exception e) { \\n      print(\\\"ClassAsFactory<Integer> failed\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4562f3ee59fcc40fc992dde5da972855\",\n        \"type\": \"source_code\",\n        \"text\": \"x = factory.create();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2fe93d6fa730ee4b20a9bde8bd1147bd\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Integer(0);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34e0b0ce666891345013d661e028d35f\",\n        \"type\": \"source_code\",\n        \"text\": \"public Widget create() { \\n      return new Widget(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"28b2b16a3ac6135c7a0837404ef3e994\",\n        \"type\": \"source_code\",\n        \"text\": \"new Foo2<Integer>(new IntegerFactory()); \\n    new Foo2<Widget>(new Widget.Factory());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b695ac185351491612e5764717778070\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(element.getClass().getSimpleName());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f3bd15b34ae03dafac5acda0929038e\",\n        \"type\": \"source_code\",\n        \"text\": \"Creator c = new Creator(); \\n    c.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfdffaa7d32abe7c42e8db634f9c78b7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Compiles; produces ClassCastException: \\n    //! gia = (Generic<Integer>[])new Object[SIZE]; \\n    // Runtime type is the raw (erased) type: \\n    gia = (Generic<Integer>[])new Generic[SIZE]; \\n    System.out.println(gia.getClass().getSimpleName()); \\n    gia[0] = new Generic<Integer>(); \\n    //! gia[1] = new Object(); // Compile-time error \\n    // Discovers type mismatch at compile time: \\n    //! gia[2] = new Generic<Double>();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ef9b57e1de5c491387953154957eef5\",\n        \"type\": \"source_code\",\n        \"text\": \"array = (T[])new Object[sz];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fcb9d456ee5604440a2bb191791d85e\",\n        \"type\": \"source_code\",\n        \"text\": \"array[index] = item;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a0e015b7b9fe7314ebac82ae89a2c89d\",\n        \"type\": \"source_code\",\n        \"text\": \"GenericArray<Integer> gai = \\n      new GenericArray<Integer>(10); \\n    // This causes a ClassCastException: \\n    //! Integer[] ia = gai.rep(); \\n    // This is OK: \\n    Object[] oa = gai.rep();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ab066f0f99637ec916557a6e318968f\",\n        \"type\": \"source_code\",\n        \"text\": \"array = (T[])new Object[sz]; \\n                 ^\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97070b9f4e112af0fa680fd83b7b74f3\",\n        \"type\": \"source_code\",\n        \"text\": \"array = new Object[sz];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fcb9d456ee5604440a2bb191791d85e\",\n        \"type\": \"source_code\",\n        \"text\": \"array[index] = item;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b9e680af433887a95c8aa0dd2b309c7\",\n        \"type\": \"source_code\",\n        \"text\": \"return (T[])array; // Warning: unchecked cast\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"264731888b3c58f48106f69dd7c9dd8b\",\n        \"type\": \"source_code\",\n        \"text\": \"GenericArray2<Integer> gai = \\n      new GenericArray2<Integer>(10); \\n    for(int i = 0; i < 10; i ++) \\n      gai.put(i, i); \\n    for(int i = 0; i < 10; i ++) \\n      System.out.print(gai.get(i) + \\\" \\\"); \\n    System.out.println(); \\n    try { \\n      Integer[] ia = gai.rep(); \\n    } catch(Exception e) { System.out.println(e); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1256aa687f2665a453253f254ea28ce\",\n        \"type\": \"source_code\",\n        \"text\": \"array = (T[])Array.newInstance(type, sz);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fcb9d456ee5604440a2bb191791d85e\",\n        \"type\": \"source_code\",\n        \"text\": \"array[index] = item;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a261552b15a0b2e99d80285d0cf9282\",\n        \"type\": \"source_code\",\n        \"text\": \"GenericArrayWithTypeToken<Integer> gai = \\n      new GenericArrayWithTypeToken<Integer>( \\n        Integer.class, 10); \\n    // This now works: \\n    Integer[] ia = gai.rep();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"442665570a429381f75e65a6128d9db2\",\n        \"type\": \"source_code\",\n        \"text\": \"Solid<Bounded> solid = \\n      new Solid<Bounded>(new Bounded()); \\n    solid.color(); \\n    solid.getY(); \\n    solid.weight();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb2c26941f9e7e2cb008d9c8352467e4\",\n        \"type\": \"source_code\",\n        \"text\": \"Solid2<Bounded> solid2 = \\n      new Solid2<Bounded>(new Bounded()); \\n    solid2.color(); \\n    solid2.getY(); \\n    solid2.weight();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ebe05671c7f8f20922a007459004b82\",\n        \"type\": \"source_code\",\n        \"text\": \"hero.getPower().hearSubtleNoises();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bbfe8db844e1465f6555745832f1f296\",\n        \"type\": \"source_code\",\n        \"text\": \"hero.getPower().hearSubtleNoises(); \\n    hero.getPower().trackBySmell();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d69e6951d7b8134d3b3bad416aa034c\",\n        \"type\": \"source_code\",\n        \"text\": \"DogBoy dogBoy = new DogBoy(); \\n    useSuperHearing(dogBoy); \\n    superFind(dogBoy); \\n    // You can do this: \\n    List<? extends SuperHearing> audioBoys; \\n    // But you can\\u2019t do this:\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b102b0d5ec27c42fe4bfce6b0c51eb5\",\n        \"type\": \"source_code\",\n        \"text\": \"// List<? extends SuperHearing & SuperSmell> dogBoys;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7982de99a5a6f93a524f115ee09527d6\",\n        \"type\": \"source_code\",\n        \"text\": \"Fruit[] fruit = new Apple[10]; \\n    fruit[0] = new Apple(); // OK \\n    fruit[1] = new Jonathan(); // OK \\n    // Runtime type is Apple[], not Fruit[] or Orange[]: \\n    try { \\n      // Compiler allows you to add Fruit: \\n      fruit[0] = new Fruit(); // ArrayStoreException \\n    } catch(Exception e) { System.out.println(e); } \\n    try { \\n      // Compiler allows you to add Oranges: \\n      fruit[0] = new Orange(); // ArrayStoreException \\n    } catch(Exception e) { System.out.println(e); }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8109df4ed55a56fb07d6813752bfcd8\",\n        \"type\": \"source_code\",\n        \"text\": \"// Wildcards allow covariance: \\n    List<? extends Fruit> flist = new ArrayList<Apple>(); \\n    // Compile Error: can\\u2019t add any type of object: \\n    // flist.add(new Apple()); \\n    // flist.add(new Fruit()); \\n    // flist.add(new Object()); \\n    flist.add(null); // Legal but uninteresting \\n    // We know that it returns at least Fruit: \\n    Fruit f = flist.get(0);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e30aa16b6285db01e8417ad1e7fdfa9e\",\n        \"type\": \"source_code\",\n        \"text\": \"List<? extends Fruit> flist = \\n      Arrays.asList(new Apple()); \\n    Apple a = (Apple)flist.get(0); // No warning \\n    flist.contains(new Apple()); // Argument is \\u2018Object\\u2019 \\n    flist.indexOf(new Apple()); // Argument is \\u2018Object\\u2019\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b636cfd34a3e0e96fa51f10dd99d807f\",\n        \"type\": \"source_code\",\n        \"text\": \"return value.equals(obj);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"489c73e4bf4fbfdf70efde910e5265df\",\n        \"type\": \"source_code\",\n        \"text\": \"Holder<Apple> Apple = new Holder<Apple>(new Apple()); \\n    Apple d = Apple.get(); \\n    Apple.set(d); \\n    // Holder<Fruit> Fruit = Apple; // Cannot upcast \\n    Holder<? extends Fruit> fruit = Apple; // OK \\n    Fruit p = fruit.get(); \\n    d = (Apple)fruit.get(); // Returns \\u2018Object\\u2019 \\n    try { \\n      Orange c = (Orange)fruit.get(); // No warning \\n    } catch(Exception e) { System.out.println(e); } \\n    // fruit.set(new Apple()); // Cannot call set() \\n    // fruit.set(new Fruit()); // Cannot call set() \\n    System.out.println(fruit.equals(d)); // OK\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"49042b85264b5090ed03cb0eddce3555\",\n        \"type\": \"source_code\",\n        \"text\": \"apples.add(new Apple()); \\n    apples.add(new Jonathan()); \\n    // apples.add(new Fruit()); // Error\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc1fb5fb932f8f50f6179fc6a0b98a98\",\n        \"type\": \"source_code\",\n        \"text\": \"list.add(item);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c8d6397c5d2e2ca553f6802ba7feb1d\",\n        \"type\": \"source_code\",\n        \"text\": \"writeExact(apples, new Apple()); \\n    // writeExact(fruit, new Apple()); // Error: \\n    // Incompatible types: found Fruit, required Apple\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc1fb5fb932f8f50f6179fc6a0b98a98\",\n        \"type\": \"source_code\",\n        \"text\": \"list.add(item);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"101703046560eabe1218500e96dd08fc\",\n        \"type\": \"source_code\",\n        \"text\": \"writeWithWildcard(apples, new Apple()); \\n    writeWithWildcard(fruit, new Apple());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9006ba13f1000ca7a6b6b3debe76cc4\",\n        \"type\": \"source_code\",\n        \"text\": \"return list.get(0);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c77a0b5baac571b742322ba79b4a5105\",\n        \"type\": \"source_code\",\n        \"text\": \"Apple a = readExact(apples); \\n    Fruit f = readExact(fruit); \\n    f = readExact(apples);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"180482b044a339eef2bd40e05f47a31d\",\n        \"type\": \"source_code\",\n        \"text\": \"T readExact(List<T> list) { return list.get(0); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b87f35a79bb1708cdda9e64b38d04e98\",\n        \"type\": \"source_code\",\n        \"text\": \"Reader<Fruit> fruitReader = new Reader<Fruit>(); \\n    Fruit f = fruitReader.readExact(fruit); \\n    // Fruit a = fruitReader.readExact(apples); // Error: \\n    // readExact(List<Fruit>) cannot be \\n    // applied to (List<Apple>).\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4835ff130c2e9e29915890b1d946889\",\n        \"type\": \"source_code\",\n        \"text\": \"T readCovariant(List<? extends T> list) { \\n      return list.get(0); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c3fc640a8d3a4c44e8c8d5c15a3c5723\",\n        \"type\": \"source_code\",\n        \"text\": \"CovariantReader<Fruit> fruitReader = \\n      new CovariantReader<Fruit>(); \\n    Fruit f = fruitReader.readCovariant(fruit); \\n    Fruit a = fruitReader.readCovariant(apples);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b285decbebc26a6609ca8651a6c141d9\",\n        \"type\": \"source_code\",\n        \"text\": \"f1(); f2(); f3();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"10757240d1320ae79111febc8db89139\",\n        \"type\": \"source_code\",\n        \"text\": \"list1 = list; \\n    list2 = list; \\n    // list3 = list; // Warning: unchecked conversion \\n    // Found: List, Required: List<? extends Object>\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff0b7a7212c440ed6a7c81180c1acda4\",\n        \"type\": \"source_code\",\n        \"text\": \"list1 = list; \\n    list2 = list; \\n    list3 = list;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff0b7a7212c440ed6a7c81180c1acda4\",\n        \"type\": \"source_code\",\n        \"text\": \"list1 = list; \\n    list2 = list; \\n    list3 = list;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7c06b7e5c2fd509c5865908747959e78\",\n        \"type\": \"source_code\",\n        \"text\": \"assign1(new ArrayList()); \\n    assign2(new ArrayList()); \\n    // assign3(new ArrayList()); // Warning: \\n    // Unchecked conversion. Found: ArrayList \\n    // Required: List<? extends Object> \\n    assign1(new ArrayList<String>()); \\n    assign2(new ArrayList<String>()); \\n    assign3(new ArrayList<String>()); \\n    // Both forms are acceptable as List<?>: \\n    List<?> wildList = new ArrayList(); \\n    wildList = new ArrayList<String>(); \\n    assign1(wildList); \\n    assign2(wildList); \\n    assign3(wildList);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b12db094a3435c3071ec0fd58bb19510\",\n        \"type\": \"source_code\",\n        \"text\": \"assign1(new HashMap()); \\n    assign2(new HashMap()); \\n    // assign3(new HashMap()); // Warning: \\n    // Unchecked conversion. Found: HashMap \\n    // Required: Map<String,?> \\n    assign1(new HashMap<String,Integer>()); \\n    assign2(new HashMap<String,Integer>()); \\n    assign3(new HashMap<String,Integer>());\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae11f06ed342594d976ec5fabc0e4ba3\",\n        \"type\": \"source_code\",\n        \"text\": \"// holder.set(arg); // Warning: \\n    //   Unchecked call to set(T) as a \\n    //   member of the raw type Holder \\n    // holder.set(new Wildcards()); // Same warning\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"96edd9db67d20b0c49899b2758bf9daf\",\n        \"type\": \"source_code\",\n        \"text\": \"// Can\\u2019t do this; don\\u2019t have any \\u2018T\\u2019: \\n    // T t = holder.get();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"031dad261850cee49b6e11c3dcefef4b\",\n        \"type\": \"source_code\",\n        \"text\": \"// OK, but type information has been lost: \\n    Object obj = holder.get();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7f746b2e8e9a56bf626cf4375a1ffc1\",\n        \"type\": \"source_code\",\n        \"text\": \"// holder.set(arg); // Error: \\n    //   set(capture of ?) in Holder<capture of ?> \\n    //   cannot be applied to (Object) \\n    // holder.set(new Wildcards()); // Same error\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"96edd9db67d20b0c49899b2758bf9daf\",\n        \"type\": \"source_code\",\n        \"text\": \"// Can\\u2019t do this; don\\u2019t have any \\u2018T\\u2019: \\n    // T t = holder.get();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"031dad261850cee49b6e11c3dcefef4b\",\n        \"type\": \"source_code\",\n        \"text\": \"// OK, but type information has been lost: \\n    Object obj = holder.get();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"14fb9e34c273a962283870a2ada561cd\",\n        \"type\": \"source_code\",\n        \"text\": \"T t = holder.get(); \\n    return t;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8732f61d36a20b4768499d902d5a2667\",\n        \"type\": \"source_code\",\n        \"text\": \"holder.set(arg); \\n    T t = holder.get(); \\n    return t;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32a67e77e8529c43a617a47067dd9a9a\",\n        \"type\": \"source_code\",\n        \"text\": \"// holder.set(arg); // Error: \\n    //   set(capture of ? extends T) in \\n    //   Holder<capture of ? extends T> \\n    //   cannot be applied to (T) \\n    T t = holder.get(); \\n    return t;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68609f6cc5c4109536e47693fd46085b\",\n        \"type\": \"source_code\",\n        \"text\": \"holder.set(arg); \\n    // T t = holder.get();  // Error: \\n    //   Incompatible types: found Object, required T\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"031dad261850cee49b6e11c3dcefef4b\",\n        \"type\": \"source_code\",\n        \"text\": \"// OK, but type information has been lost: \\n    Object obj = holder.get();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"67a08b2b16a6e85b2a3a3ff9cd647e53\",\n        \"type\": \"source_code\",\n        \"text\": \"Holder raw = new Holder<Long>(); \\n    // Or: \\n    raw = new Holder(); \\n    Holder<Long> qualified = new Holder<Long>(); \\n    Holder<?> unbounded = new Holder<Long>(); \\n    Holder<? extends Long> bounded = new Holder<Long>(); \\n    Long lng = 1L;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95d03c5958aa24c2b2f299d369bb8aea\",\n        \"type\": \"source_code\",\n        \"text\": \"rawArgs(raw, lng); \\n    rawArgs(qualified, lng); \\n    rawArgs(unbounded, lng); \\n    rawArgs(bounded, lng);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53ac873138dd3f42ee7ada684d38c20e\",\n        \"type\": \"source_code\",\n        \"text\": \"unboundedArg(raw, lng); \\n    unboundedArg(qualified, lng); \\n    unboundedArg(unbounded, lng);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"29d09536952bbd4a78d6fa5bb0845a79\",\n        \"type\": \"source_code\",\n        \"text\": \"unboundedArg(bounded, lng);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc79bf06d5680f43ab764a1c33be16b7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Object r1 = exact1(raw); // Warnings: \\n    //   Unchecked conversion from Holder to Holder<T> \\n    //   Unchecked method invocation: exact1(Holder<T>) \\n    //   is applied to (Holder) \\n    Long r2 = exact1(qualified); \\n    Object r3 = exact1(unbounded); // Must return Object \\n    Long r4 = exact1(bounded);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a899a1aa692dc87529a3dcb1ca0860f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Long r5 = exact2(raw, lng); // Warnings: \\n    //   Unchecked conversion from Holder to Holder<Long> \\n    //   Unchecked method invocation: exact2(Holder<T>,T) \\n    //   is applied to (Holder,Long) \\n    Long r6 = exact2(qualified, lng); \\n    // Long r7 = exact2(unbounded, lng); // Error: \\n    //   exact2(Holder<T>,T) cannot be applied to \\n    //   (Holder<capture of ?>,Long) \\n    // Long r8 = exact2(bounded, lng); // Error: \\n    //   exact2(Holder<T>,T) cannot be applied \\n    //   to (Holder<capture of ? extends Long>,Long)\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2f8a6f749058cd0c40d61d37d7c44bd7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Long r9 = wildSubtype(raw, lng); // Warnings: \\n    //   Unchecked conversion from Holder \\n    //   to Holder<? extends Long> \\n    //   Unchecked method invocation: \\n    //   wildSubtype(Holder<? extends T>,T) is \\n    //   applied to (Holder,Long) \\n    Long r10 = wildSubtype(qualified, lng); \\n    // OK, but can only return Object: \\n    Object r11 = wildSubtype(unbounded, lng); \\n    Long r12 = wildSubtype(bounded, lng);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5642058afdf3220d1d667e4117188e7\",\n        \"type\": \"source_code\",\n        \"text\": \"// wildSupertype(raw, lng); // Warnings: \\n    //   Unchecked conversion from Holder \\n    //   to Holder<? super Long> \\n    //   Unchecked method invocation: \\n    //   wildSupertype(Holder<? super T>,T) \\n    //   is applied to (Holder,Long) \\n    wildSupertype(qualified, lng); \\n    // wildSupertype(unbounded, lng); // Error: \\n    //   wildSupertype(Holder<? super T>,T) cannot be \\n    //   applied to (Holder<capture of ?>,Long) \\n    // wildSupertype(bounded, lng); // Error: \\n    //   wildSupertype(Holder<? super T>,T) cannot be \\n    //  applied to (Holder<capture of ? extends Long>,Long)\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"88c110204948533af42a97dd81a86fc7\",\n        \"type\": \"source_code\",\n        \"text\": \"T t = holder.get(); \\n    System.out.println(t.getClass().getSimpleName());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e12160f1c67e709c36d306f86a1c2c5d\",\n        \"type\": \"source_code\",\n        \"text\": \"f1(holder); // Call with captured type\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"01b19db9c98382604e06cc8df94d63fe\",\n        \"type\": \"source_code\",\n        \"text\": \"Holder raw = new Holder<Integer>(1); \\n    // f1(raw); // Produces warnings \\n    f2(raw); // No warnings \\n    Holder rawBasic = new Holder(); \\n    rawBasic.set(new Object()); // Warning \\n    f2(rawBasic); // No warnings \\n    // Upcast to Holder<?>, still figures it out: \\n    Holder<?> wildcarded = new Holder<Double>(1.0); \\n    f2(wildcarded);\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2974ab430d92b4c6683d3f18fd4080b9\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Integer> li = new ArrayList<Integer>(); \\n    for(int i = 0; i < 5; i++) \\n      li.add(i); \\n    for(int i : li) \\n      System.out.print(i + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3773d35e43cb5e8c78fefe4d59184b9\",\n        \"type\": \"source_code\",\n        \"text\": \"new HashSet<Byte>(Arrays.asList(possibles));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ca3450c5766b37f59a23da3f3a3a2609\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < a.length; i++) \\n      a[i] = gen.next(); \\n    return a;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74d8b8f29a8b033c62b65ee94074ae24\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] strings = FArray.fill( \\n      new String[7], new RandomGenerator.String(10)); \\n    for(String s : strings) \\n      System.out.println(s); \\n    Integer[] integers = FArray.fill( \\n      new Integer[7], new RandomGenerator.Integer()); \\n    for(int i: integers) \\n      System.out.println(i); \\n    // Autoboxing won\\u2019t save you here. This won\\u2019t compile: \\n    // int[] b = \\n    //   FArray.fill(new int[7], new RandIntGenerator());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f39a32a575028c767a0216c44a730f7f\",\n        \"type\": \"source_code\",\n        \"text\": \"storage = new Object[size];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef2918be73b5e170e580169e3a988129\",\n        \"type\": \"source_code\",\n        \"text\": \"FixedSizeStack<String> strings = \\n      new FixedSizeStack<String>(SIZE); \\n    for(String s : \\\"A B C D E F G H I J\\\".split(\\\" \\\")) \\n      strings.push(s); \\n    for(int i = 0; i < SIZE; i++) { \\n      String s = strings.pop(); \\n      System.out.print(s + \\\" \\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f9dcbad595d0f1ebbfe1135e616ea8b\",\n        \"type\": \"source_code\",\n        \"text\": \"ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(args[0])); \\n    List<Widget> shapes = (List<Widget>)in.readObject();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1d1e58554bb185e6056c692fb3b63895\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Shape> shapes = (List<Widget>)in.readObject();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95ea3b6d75117611416e74672e1da1b4\",\n        \"type\": \"source_code\",\n        \"text\": \"ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(args[0])); \\n      // Won\\u2019t Compile:\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"755d9a860a3db65f2a3a4a56818a0fb7\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Widget> lw1 =\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2edc73d3b32e5c7304bb814cb1064f1c\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Widget>.class.cast(in.readObject()); \\n    List<Widget> lw2 = List.class.cast(in.readObject());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b695ac185351491612e5764717778070\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(element.getClass().getSimpleName());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ece3d8addc1f284a6617e0939c0363eb\",\n        \"type\": \"source_code\",\n        \"text\": \"Subtype st1 = new Subtype(), st2 = new Subtype(); \\n    st1.set(st2); \\n    Subtype st3 = st1.get(); \\n    st1.f();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1030848b8afe2894dcc6751741513934\",\n        \"type\": \"source_code\",\n        \"text\": \"BasicOther b = new BasicOther(), b2 = new BasicOther(); \\n    b.set(new Other()); \\n    Other other = b.get(); \\n    b.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f7d54593213009225b48b84057ff75a\",\n        \"type\": \"source_code\",\n        \"text\": \"element = arg; \\n    return this;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"615591ccadef7bb7eb7cea6697895ee6\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = new A(); \\n    a.set(new A()); \\n    a = a.set(new A()).get(); \\n    a = a.get(); \\n    C c = new C(); \\n    c = c.setAndGet(new C());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f7d54593213009225b48b84057ff75a\",\n        \"type\": \"source_code\",\n        \"text\": \"element = arg; \\n    return this;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6df435de83834be9f217314218518004\",\n        \"type\": \"source_code\",\n        \"text\": \"return arg.set(arg).get();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a663499bbc8970c40b938bfbe9e6d634\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = f(new A());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52f9c652ec7d410a914ac5bb8fe15711\",\n        \"type\": \"source_code\",\n        \"text\": \"Derived d2 = d.get();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe5858183cb5192aafae178bd227d99c\",\n        \"type\": \"source_code\",\n        \"text\": \"Getter result = g.get(); \\n    GenericGetter gg = g.get(); // Also the base type\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7ba77f6381df990497b71de945ca3a6\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"OrdinarySetter.set(Base)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ba7fb593351707c69e1291d01b6543e\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"DerivedSetter.set(Derived)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"154fbdcc5f1a884c78a7dce752c9c27e\",\n        \"type\": \"source_code\",\n        \"text\": \"Base base = new Base(); \\n    Derived derived = new Derived(); \\n    DerivedSetter ds = new DerivedSetter(); \\n    ds.set(derived); \\n    ds.set(base); // Compiles: overloaded, not overridden!\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ce39ecce3351fc2bb04c93974b27dc8\",\n        \"type\": \"source_code\",\n        \"text\": \"s1.set(s2); \\n    // s1.set(sbs); // Error: \\n    // set(Setter) in SelfBoundSetter<Setter> \\n    // cannot be applied to (SelfBoundSetter)\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd6ded81e11ead4765c0ec4f9f0a079f\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"GenericSetter.set(Base)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fa366b8f97299d2c100c1daa2b15a74\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"DerivedGS.set(Derived)\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbaf29f0cc1c6c51154e9ef104bcc7bf\",\n        \"type\": \"source_code\",\n        \"text\": \"Base base = new Base(); \\n    Derived derived = new Derived(); \\n    DerivedGS dgs = new DerivedGS(); \\n    dgs.set(derived); \\n    dgs.set(base); // Compiles: overloaded, not overridden!\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"702661d09a373a5717a57a99f17f11cf\",\n        \"type\": \"source_code\",\n        \"text\": \"probablyDogs.add(new Cat());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c1f5058fb2e47988f80f4209b83b719\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Dog> dogs1 = new ArrayList<Dog>(); \\n    oldStyleMethod(dogs1); // Quietly accepts a Cat \\n    List<Dog> dogs2 = Collections.checkedList( \\n      new ArrayList<Dog>(), Dog.class); \\n    try { \\n      oldStyleMethod(dogs2); // Throws an exception \\n    } catch(Exception e) { \\n      System.out.println(e); \\n    } \\n    // Derived types work fine: \\n    List<Pet> pets = Collections.checkedList( \\n      new ArrayList<Pet>(), Pet.class); \\n    pets.add(new Dog()); \\n    pets.add(new Cat());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1d4dee8873ff0080f493eb73c9e8742a\",\n        \"type\": \"source_code\",\n        \"text\": \"List<T> resultCollector = new ArrayList<T>(); \\n    for(Processor<T,E> processor : this) \\n      processor.process(resultCollector); \\n    return resultCollector;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8dcd548b8e72d54b14d5ad9083fde4f4\",\n        \"type\": \"source_code\",\n        \"text\": \"if(count-- > 1) \\n      resultCollector.add(\\\"Hep!\\\"); \\n    else \\n      resultCollector.add(\\\"Ho!\\\"); \\n    if(count < 0) \\n       throw new Failure1();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d9485ff856327d7e7d13376a5c1e81a6\",\n        \"type\": \"source_code\",\n        \"text\": \"if(count-- == 0) \\n      resultCollector.add(47); \\n    else { \\n      resultCollector.add(11); \\n    } \\n    if(count < 0) \\n       throw new Failure2();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9239ddd04af76dfc612e4b7a8c35c156\",\n        \"type\": \"source_code\",\n        \"text\": \"ProcessRunner<String,Failure1> runner = \\n      new ProcessRunner<String,Failure1>(); \\n    for(int i = 0; i < 3; i++) \\n      runner.add(new Processor1()); \\n    try { \\n      System.out.println(runner.processAll()); \\n    } catch(Failure1 e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"TASM\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d6fc106cc2a2c23c46e288fc2ccd2a58\",\n        \"type\": \"source_code\",\n        \"text\": \"ProcessRunner<Integer,Failure2> runner2 = \\n      new ProcessRunner<Integer,Failure2>(); \\n    for(int i = 0; i < 3; i++) \\n      runner2.add(new Processor2()); \\n    try { \\n      System.out.println(runner2.processAll()); \\n    } catch(Failure2 e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"TASM\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"de22e85d2035b744ad37a5901144cafa\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\" \\\" << mixin1.getSerialNumber() << endl;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f187652ca9ac71dfefc7b17730abdeb9\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\" \\\" << mixin2.getSerialNumber() << endl;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b723a48f54d47e1fd78fe5692163271\",\n        \"type\": \"source_code\",\n        \"text\": \"timeStamp = new Date().getTime();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbd7200b454d048360fc9deb2511defd\",\n        \"type\": \"source_code\",\n        \"text\": \"new SerialNumberedImp();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4aa17dbc14e35bbca7032141024c6811\",\n        \"type\": \"source_code\",\n        \"text\": \"return serialNumber.getSerialNumber();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"20a11224dca59626e5312855eaeff5ea\",\n        \"type\": \"source_code\",\n        \"text\": \"Mixin mixin1 = new Mixin(), mixin2 = new Mixin(); \\n    mixin1.set(\\\"test string 1\\\"); \\n    mixin2.set(\\\"test string 2\\\"); \\n    System.out.println(mixin1.get() + \\\" \\\" + \\n      mixin1.getStamp() +  \\\" \\\" + mixin1.getSerialNumber()); \\n    System.out.println(mixin2.get() + \\\" \\\" + \\n      mixin2.getStamp() +  \\\" \\\" + mixin2.getSerialNumber());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5ca015a0e825b4b33a874b90686d547\",\n        \"type\": \"source_code\",\n        \"text\": \"super(basic); \\n    timeStamp = new Date().getTime();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e47d2d8ac713a82edbba6d021cc083b1\",\n        \"type\": \"source_code\",\n        \"text\": \"TimeStamped t = new TimeStamped(new Basic()); \\n    TimeStamped t2 = new TimeStamped( \\n      new SerialNumbered(new Basic())); \\n    //! t2.getSerialNumber(); // Not available \\n    SerialNumbered s = new SerialNumbered(new Basic()); \\n    SerialNumbered s2 = new SerialNumbered( \\n      new TimeStamped(new Basic())); \\n    //! s2.getStamp(); // Not available\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a362b6935bfc54af8eba5205253c362\",\n        \"type\": \"source_code\",\n        \"text\": \"delegatesByMethod = new HashMap<String,Object>(); \\n    for(TwoTuple<Object,Class<?>> pair : pairs) { \\n      for(Method method : pair.second.getMethods()) { \\n        String methodName = method.getName(); \\n        // The first interface in the map \\n        // implements the method. \\n        if (!delegatesByMethod.containsKey(methodName)) \\n          delegatesByMethod.put(methodName, pair.first); \\n      } \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d9a0b18568ee89a52bbe8a2cd770e114\",\n        \"type\": \"source_code\",\n        \"text\": \"Object[] args) throws Throwable { \\n    String methodName = method.getName(); \\n    Object delegate = delegatesByMethod.get(methodName); \\n    return method.invoke(delegate, args);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"140bc2d2d930436f600ca07b0dc361a0\",\n        \"type\": \"source_code\",\n        \"text\": \"Class[] interfaces = new Class[pairs.length]; \\n    for(int i = 0; i < pairs.length; i++) { \\n      interfaces[i] = (Class)pairs[i].second; \\n    } \\n    ClassLoader cl = \\n      pairs[0].first.getClass().getClassLoader(); \\n    return Proxy.newProxyInstance( \\n      cl, interfaces, new MixinProxy(pairs));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ba891b522c4c84148d3fb7412712a5d1\",\n        \"type\": \"source_code\",\n        \"text\": \"Object mixin = MixinProxy.newInstance( \\n      tuple(new BasicImp(), Basic.class), \\n      tuple(new TimeStampedImp(), TimeStamped.class), \\n      tuple(new SerialNumberedImp(),SerialNumbered.class)); \\n    Basic b = (Basic)mixin; \\n    TimeStamped t = (TimeStamped)mixin; \\n    SerialNumbered s = (SerialNumbered)mixin; \\n    b.set(\\\"Hello\\\"); \\n    System.out.println(b.get()); \\n    System.out.println(t.getStamp()); \\n    System.out.println(s.getSerialNumber());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e547a118ec49e11721bb874430a6b7a3\",\n        \"type\": \"source_code\",\n        \"text\": \"def speak(self): \\n        print \\\"Arf!\\\" \\n    def sit(self): \\n        print \\\"Sitting\\\" \\n    def reproduce(self): \\n        pass\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68f4312115bc27e72d0638d27698aaa9\",\n        \"type\": \"source_code\",\n        \"text\": \"def speak(self): \\n        print \\\"Click!\\\" \\n    def sit(self): \\n        print \\\"Clank!\\\" \\n    def oilChange(self) : \\n        pass\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"233ced92131e055e5de9d6295b2ea2d3\",\n        \"type\": \"source_code\",\n        \"text\": \"anything.speak() \\n    anything.sit()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"10a951969405986cf507366fbbaea71b\",\n        \"type\": \"source_code\",\n        \"text\": \"performer.speak(); \\n    performer.sit();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ba75c54854e24d0069049661706143db\",\n        \"type\": \"source_code\",\n        \"text\": \"PerformingDog d = new PerformingDog(); \\n    Robot r = new Robot(); \\n    Communicate.perform(d); \\n    Communicate.perform(r);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"10a951969405986cf507366fbbaea71b\",\n        \"type\": \"source_code\",\n        \"text\": \"performer.speak(); \\n    performer.sit();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d7f8ee6de2fb581afa2645762a70f58a\",\n        \"type\": \"source_code\",\n        \"text\": \"CommunicateSimply.perform(new PerformingDog()); \\n    CommunicateSimply.perform(new Robot());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eda83adfe3067cb908e446cf40394af3\",\n        \"type\": \"source_code\",\n        \"text\": \"latent typing\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d50ac31543cc9aada4454ee8c0494643\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<?> spkr = speaker.getClass(); \\n    try { \\n      try { \\n        Method speak = spkr.getMethod(\\\"speak\\\"); \\n        speak.invoke(speaker); \\n      } catch(NoSuchMethodException e) { \\n        print(speaker + \\\" cannot speak\\\"); \\n      } \\n      try { \\n        Method sit = spkr.getMethod(\\\"sit\\\"); \\n        sit.invoke(speaker); \\n      } catch(NoSuchMethodException e) { \\n        print(speaker + \\\" cannot sit\\\"); \\n      } \\n    } catch(Exception e) { \\n      throw new RuntimeException(speaker.toString(), e); \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93651f84496b3b47d88c7e397937c52c\",\n        \"type\": \"source_code\",\n        \"text\": \"CommunicateReflectively.perform(new SmartDog()); \\n    CommunicateReflectively.perform(new Robot()); \\n    CommunicateReflectively.perform(new Mime());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"207e561b8b1708b17baf37dbc203c308\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      for(T t: seq) \\n        f.invoke(t, args); \\n    } catch(Exception e) { \\n      // Failures are programmer errors \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"71ead093bf93ec5999fbaf4c91251fa1\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\" resize \\\" + newSize);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f8acd8c6d244431f7eb01aca69fadfb\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      for(int i = 0; i < size; i++) \\n        // Assumes default constructor: \\n        add(type.newInstance()); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed5fd94b75ea2ae99aca83421f53fcbf\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Shape> shapes = new ArrayList<Shape>(); \\n    for(int i = 0; i < 10; i++) \\n      shapes.add(new Shape()); \\n    Apply.apply(shapes, Shape.class.getMethod(\\\"rotate\\\")); \\n    Apply.apply(shapes, \\n      Shape.class.getMethod(\\\"resize\\\", int.class), 5); \\n    List<Square> squares = new ArrayList<Square>(); \\n    for(int i = 0; i < 10; i++) \\n      squares.add(new Square()); \\n    Apply.apply(squares, Shape.class.getMethod(\\\"rotate\\\")); \\n    Apply.apply(squares, \\n      Shape.class.getMethod(\\\"resize\\\", int.class), 5);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68fac6d6d50f8d5a45ca90ea791d89fd\",\n        \"type\": \"source_code\",\n        \"text\": \"Apply.apply(new FilledList<Shape>(Shape.class, 10), \\n      Shape.class.getMethod(\\\"rotate\\\")); \\n    Apply.apply(new FilledList<Shape>(Square.class, 10), \\n      Shape.class.getMethod(\\\"rotate\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc3bf2a390cd4878cb66f23e17ba0236\",\n        \"type\": \"source_code\",\n        \"text\": \"SimpleQueue<Shape> shapeQ = new SimpleQueue<Shape>(); \\n    for(int i = 0; i < 5; i++) { \\n      shapeQ.add(new Shape()); \\n      shapeQ.add(new Square()); \\n    } \\n    Apply.apply(shapeQ, Shape.class.getMethod(\\\"rotate\\\"));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8655c1073f7ea59fee385ad3f297c170\",\n        \"type\": \"source_code\",\n        \"text\": \"return storage.iterator();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"faf018bede25f31560893d8ff95152af\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < size; i++) \\n      // Assumes default constructor: \\n      try { \\n        collection.add(classToken.newInstance()); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4dd07c6b84d4dcfecf12b328f2a2bc4e\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getName() + \\\" \\\" + id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"722c86fdabd01abdd008d4b4f507d1b2\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Contract> contracts = new ArrayList<Contract>(); \\n    Fill.fill(contracts, Contract.class, 3); \\n    Fill.fill(contracts, TitleTransfer.class, 2); \\n    for(Contract c: contracts) \\n      System.out.println(c); \\n    SimpleQueue<Contract> contractQueue = \\n      new SimpleQueue<Contract>(); \\n    // Won\\u2019t work. fill() is not generic enough: \\n    // Fill.fill(contractQueue, Contract.class, 3);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c7abaf414913557d8879b86388decdcd\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < size; i++) \\n      try { \\n        addable.add(classToken.newInstance()); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4787e2d7328b8b3d09d306422472906\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < size; i++) \\n      addable.add(generator.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"797bf9d3633edf565d4c1776b2610bf6\",\n        \"type\": \"source_code\",\n        \"text\": \"this.c = c;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b360d559d6c651f668aec736b3c5883f\",\n        \"type\": \"source_code\",\n        \"text\": \"return new AddableCollectionAdapter<T>(c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f12bd2dba0a300175e1548f41286144a\",\n        \"type\": \"source_code\",\n        \"text\": \"// Adapt a Collection: \\n    List<Coffee> carrier = new ArrayList<Coffee>(); \\n    Fill2.fill( \\n      new AddableCollectionAdapter<Coffee>(carrier), \\n      Coffee.class, 3); \\n    // Helper method captures the type: \\n    Fill2.fill(Adapter.collectionAdapter(carrier), \\n      Latte.class, 2); \\n    for(Coffee c: carrier) \\n      print(c); \\n    print(\\\"----------------------\\\"); \\n    // Use an adapted class: \\n    AddableSimpleQueue<Coffee> coffeeQueue = \\n      new AddableSimpleQueue<Coffee>(); \\n    Fill2.fill(coffeeQueue, Mocha.class, 4); \\n    Fill2.fill(coffeeQueue, Latte.class, 1); \\n    for(Coffee c: coffeeQueue) \\n      print(c);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cffbc1eff1ec962c6fe0afc3f56145c7\",\n        \"type\": \"source_code\",\n        \"text\": \"strategies\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5db9ed073382c3ae68243f6a8ea6d350\",\n        \"type\": \"source_code\",\n        \"text\": \"Iterator<T> it = seq.iterator(); \\n    if(it.hasNext()) { \\n      T result = it.next(); \\n      while(it.hasNext()) \\n        result = combiner.combine(result, it.next()); \\n      return result; \\n    } \\n    // If seq is the empty list: \\n    return null; // Or throw exception\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9790ab6b9e4cb6bd22bb4ac97e31384a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(T t : seq) \\n      func.function(t); \\n    return func;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"de60f09432bb71a33f7caf46eb3bbbbb\",\n        \"type\": \"source_code\",\n        \"text\": \"List<R> result = new ArrayList<R>(); \\n    for(T t : seq) \\n      result.add(func.function(t)); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"91ada42ce56b06f444a8c331ed0b4b7a\",\n        \"type\": \"source_code\",\n        \"text\": \"List<T> result = new ArrayList<T>(); \\n    for(T t : seq) \\n      if(pred.test(t)) \\n        result.add(t); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ffb9487f50df51a7d4f21f94474bf9ef\",\n        \"type\": \"source_code\",\n        \"text\": \"public Integer combine(Integer x, Integer y) { \\n      return x + y; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97df4d0f666f9bf7b21296ebcf2047fc\",\n        \"type\": \"source_code\",\n        \"text\": \"public Integer combine(Integer x, Integer y) { \\n      return x - y; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"edc5446776e8a1e4e4d20fb8b3435084\",\n        \"type\": \"source_code\",\n        \"text\": \"public BigDecimal combine(BigDecimal x, BigDecimal y) { \\n      return x.add(y); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61817ee6839bf817bd77d2981e2793bd\",\n        \"type\": \"source_code\",\n        \"text\": \"public BigInteger combine(BigInteger x, BigInteger y) { \\n      return x.add(y);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4414b790d0e028fbfa7421a30567fc91\",\n        \"type\": \"source_code\",\n        \"text\": \"public AtomicLong combine(AtomicLong x, AtomicLong y) { \\n      // Not clear whether this is meaningful: \\n      return new AtomicLong(x.addAndGet(y.get())); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c4fe56c829742bed33aa0f9e605c9109\",\n        \"type\": \"source_code\",\n        \"text\": \"public BigDecimal function(BigDecimal x) { \\n      return x.ulp(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70c1f4e03ddd15e3275b2af4579e3f4a\",\n        \"type\": \"source_code\",\n        \"text\": \"private T bound; \\n    public GreaterThan(T bound) { this.bound = bound; } \\n    public boolean test(T x) { \\n      return x.compareTo(bound) > 0; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8bdd5827ad225285cbd196dec7c0585\",\n        \"type\": \"source_code\",\n        \"text\": \"private Integer val = 1; \\n    public Integer function(Integer x) { \\n      val *= x; \\n      return val; \\n    } \\n    public Integer result() { return val; }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecb56bb1f80e2d652c7ef60c21e47474\",\n        \"type\": \"source_code\",\n        \"text\": \"// Generics, varargs & boxing working together: \\n    List<Integer> li = Arrays.asList(1, 2, 3, 4, 5, 6, 7); \\n    Integer result = reduce(li, new IntegerAdder()); \\n    print(result);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1b726f16557a0f577e9df8064c12dac\",\n        \"type\": \"source_code\",\n        \"text\": \"result = reduce(li, new IntegerSubtracter()); \\n    print(result);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea4b6dc25d1b3cf8fa3d44ae3a52608f\",\n        \"type\": \"source_code\",\n        \"text\": \"print(filter(li, new GreaterThan<Integer>(4)));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94d478b620f80c028af95370bd53ef5e\",\n        \"type\": \"source_code\",\n        \"text\": \"print(forEach(li, \\n      new MultiplyingIntegerCollector()).result());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38ab840173eaf6cdc18be2d3c5cebbb6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(forEach(filter(li, new GreaterThan<Integer>(4)), \\n      new MultiplyingIntegerCollector()).result());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"269693ebd37ca81ca10bd5b18df4e6cd\",\n        \"type\": \"source_code\",\n        \"text\": \"MathContext mc = new MathContext(7); \\n    List<BigDecimal> lbd = Arrays.asList( \\n      new BigDecimal(1.1, mc), new BigDecimal(2.2, mc), \\n      new BigDecimal(3.3, mc), new BigDecimal(4.4, mc)); \\n    BigDecimal rbd = reduce(lbd, new BigDecimalAdder()); \\n    print(rbd);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1cd895e35d9e64a20ab78efbbf91cdb8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(filter(lbd, \\n      new GreaterThan<BigDecimal>(new BigDecimal(3))));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c3ab9f3c38440f55edc646b107402f25\",\n        \"type\": \"source_code\",\n        \"text\": \"// Use the prime-generation facility of BigInteger: \\n    List<BigInteger> lbi = new ArrayList<BigInteger>();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"604419b8267e0beb9db929b4e008976e\",\n        \"type\": \"source_code\",\n        \"text\": \"BigInteger bi = BigInteger.valueOf(11); \\n    for(int i = 0; i < 11; i++) { \\n      lbi.add(bi); \\n      bi = bi.nextProbablePrime(); \\n    } \\n    print(lbi);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8348997f31f782ef6c3deeb4de520c50\",\n        \"type\": \"source_code\",\n        \"text\": \"BigInteger rbi = reduce(lbi, new BigIntegerAdder()); \\n    print(rbi); \\n    // The sum of this list of primes is also prime: \\n    print(rbi.isProbablePrime(5));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1eb8ffb8b614a5e76d2d8d6a183c7514\",\n        \"type\": \"source_code\",\n        \"text\": \"List<AtomicLong> lal = Arrays.asList( \\n      new AtomicLong(11), new AtomicLong(47), \\n      new AtomicLong(74), new AtomicLong(133)); \\n    AtomicLong ral = reduce(lal, new AtomicLongAdder()); \\n    print(ral);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c5deaa7fc382897f3bec37823f3a26a1\",\n        \"type\": \"source_code\",\n        \"text\": \"print(transform(lbd,new BigDecimalUlp()));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6eab02b6ed2b29d7f21b16e1a7b0c96f\",\n        \"type\": \"source_code\",\n        \"text\": \"new MultiplyingIntegerCollector()).result()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"13aa37a76727d90eae12e803b6336f43\",\n        \"type\": \"source_code\",\n        \"text\": \"bad?\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52eb9ce318c4c8fa0b8be2027d17137c\",\n        \"type\": \"source_code\",\n        \"text\": \"BerylliumSphere[] spheres = new BerylliumSphere[10]; \\n    for(int i = 0; i < 5; i++) \\n      spheres[i] = new BerylliumSphere(); \\n    print(Arrays.toString(spheres)); \\n    print(spheres[4]);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d31c847a320868ab6108894c1c0bf2b\",\n        \"type\": \"source_code\",\n        \"text\": \"List<BerylliumSphere> sphereList = \\n      new ArrayList<BerylliumSphere>(); \\n    for(int i = 0; i < 5; i++) \\n      sphereList.add(new BerylliumSphere()); \\n    print(sphereList); \\n    print(sphereList.get(4));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c496570792f087c0012888a507a6479\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] integers = { 0, 1, 2, 3, 4, 5 }; \\n    print(Arrays.toString(integers)); \\n    print(integers[4]);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4e6fb024457ba377031d4457c1603de5\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Integer> intList = new ArrayList<Integer>( \\n      Arrays.asList(0, 1, 2, 3, 4, 5)); \\n    intList.add(97); \\n    print(intList); \\n    print(intList.get(4));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2330122cd54ba18317c298969645b0a\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arrays of objects: \\n    BerylliumSphere[] a; // Local uninitialized variable \\n    BerylliumSphere[] b = new BerylliumSphere[5]; \\n    // The references inside the array are \\n    // automatically initialized to null: \\n    print(\\\"b: \\\" + Arrays.toString(b)); \\n    BerylliumSphere[] c = new BerylliumSphere[4]; \\n    for(int i = 0; i < c.length; i++) \\n      if(c[i] == null) // Can test for null reference \\n        c[i] = new BerylliumSphere(); \\n    // Aggregate initialization: \\n    BerylliumSphere[] d = { new BerylliumSphere(), \\n      new BerylliumSphere(), new BerylliumSphere() \\n    }; \\n    // Dynamic aggregate initialization: \\n    a = new BerylliumSphere[]{ \\n      new BerylliumSphere(), new BerylliumSphere(), \\n    }; \\n    // (Trailing comma is optional in both cases) \\n    print(\\\"a.length = \\\" + a.length); \\n    print(\\\"b.length = \\\" + b.length); \\n    print(\\\"c.length = \\\" + c.length); \\n    print(\\\"d.length = \\\" + d.length); \\n    a = d; \\n    print(\\\"a.length = \\\" + a.length);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdeaa28be42d15ebfd1b60b6de3181b9\",\n        \"type\": \"source_code\",\n        \"text\": \"// Arrays of primitives: \\n    int[] e; // Null reference \\n    int[] f = new int[5]; \\n    // The primitives inside the array are \\n    // automatically initialized to zero: \\n    print(\\\"f: \\\" + Arrays.toString(f)); \\n    int[] g = new int[4]; \\n    for(int i = 0; i < g.length; i++) \\n      g[i] = i*i; \\n    int[] h = { 11, 47, 93 }; \\n    // Compile error: variable e not initialized: \\n    //!print(\\\"e.length = \\\" + e.length); \\n    print(\\\"f.length = \\\" + f.length); \\n    print(\\\"g.length = \\\" + g.length); \\n    print(\\\"h.length = \\\" + h.length); \\n    e = h; \\n    print(\\\"e.length = \\\" + e.length); \\n    e = new int[]{ 1, 2 }; \\n    print(\\\"e.length = \\\" + e.length);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e446a83f98947a13bd61ecce0efb7112\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Chocolate\\\", \\\"Strawberry\\\", \\\"Vanilla Fudge Swirl\\\", \\n    \\\"Mint Chip\\\", \\\"Mocha Almond Fudge\\\", \\\"Rum Raisin\\\", \\n    \\\"Praline Cream\\\", \\\"Mud Pie\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f337245ceffb76dcfdee4ceb1ed613d0\",\n        \"type\": \"source_code\",\n        \"text\": \"if(n > FLAVORS.length) \\n      throw new IllegalArgumentException(\\\"Set too big\\\"); \\n    String[] results = new String[n]; \\n    boolean[] picked = new boolean[FLAVORS.length]; \\n    for(int i = 0; i < n; i++) { \\n      int t; \\n      do \\n        t = rand.nextInt(FLAVORS.length); \\n      while(picked[t]); \\n      results[i] = FLAVORS[t]; \\n      picked[t] = true; \\n    } \\n    return results;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b482c149ba02a2638af1f271b97b3ab\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 7; i++) \\n      System.out.println(Arrays.toString(flavorSet(3)));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"45d97bfa691e0e87da6f154aa881163b\",\n        \"type\": \"source_code\",\n        \"text\": \"int[][] a = { \\n      { 1, 2, 3, }, \\n      { 4, 5, 6, }, \\n    }; \\n    System.out.println(Arrays.deepToString(a));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3c4ba6ff6123253ec59d01692dabeeda\",\n        \"type\": \"source_code\",\n        \"text\": \"// 3-D array with fixed length: \\n    int[][][] a = new int[2][2][4]; \\n    System.out.println(Arrays.deepToString(a));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7541d1c582f2983020cc7e93e63a36ef\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    // 3-D array with varied-length vectors: \\n    int[][][] a = new int[rand.nextInt(7)][][]; \\n    for(int i = 0; i < a.length; i++) { \\n      a[i] = new int[rand.nextInt(5)][]; \\n      for(int j = 0; j < a[i].length; j++) \\n        a[i][j] = new int[rand.nextInt(5)]; \\n    } \\n    System.out.println(Arrays.deepToString(a));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ec870f7fdaf13e76749af9aec8f72147\",\n        \"type\": \"source_code\",\n        \"text\": \"BerylliumSphere[][] spheres = { \\n      { new BerylliumSphere(), new BerylliumSphere() }, \\n      { new BerylliumSphere(), new BerylliumSphere(), \\n        new BerylliumSphere(), new BerylliumSphere() }, \\n      { new BerylliumSphere(), new BerylliumSphere(), \\n        new BerylliumSphere(), new BerylliumSphere(), \\n        new BerylliumSphere(), new BerylliumSphere(), \\n        new BerylliumSphere(), new BerylliumSphere() }, \\n    }; \\n    System.out.println(Arrays.deepToString(spheres));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"05d5e803839dfd2bdb1d06dcdc8857bc\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[][] a = { // Autoboxing: \\n      { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, \\n      { 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }, \\n      { 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 }, \\n      { 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 }, \\n    }; \\n    System.out.println(Arrays.deepToString(a));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0886676cb6bd970c09da76609880c917\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[][] a; \\n    a = new Integer[3][]; \\n    for(int i = 0; i < a.length; i++) { \\n      a[i] = new Integer[3]; \\n      for(int j = 0; j < a[i].length; j++) \\n        a[i][j] = i * j; // Autoboxing \\n    } \\n    System.out.println(Arrays.deepToString(a));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3c74c8b8f9462b415419087fac548ee7\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[][] a1 = { // Autoboxing \\n      { 1, 2, 3, }, \\n      { 4, 5, 6, }, \\n    }; \\n    Double[][][] a2 = { // Autoboxing \\n      { { 1.1, 2.2 }, { 3.3, 4.4 } }, \\n      { { 5.5, 6.6 }, { 7.7, 8.8 } }, \\n      { { 9.9, 1.2 }, { 2.3, 3.4 } }, \\n    };\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ffcaacdf42ceb914d63be3a6613169b3\",\n        \"type\": \"source_code\",\n        \"text\": \"String[][] a3 = { \\n      { \\\"The\\\", \\\"Quick\\\", \\\"Sly\\\", \\\"Fox\\\" }, \\n      { \\\"Jumped\\\", \\\"Over\\\" }, \\n      { \\\"The\\\", \\\"Lazy\\\", \\\"Brown\\\", \\\"Dog\\\", \\\"and\\\", \\\"friend\\\" }, \\n    }; \\n    System.out.println(\\\"a1: \\\" + Arrays.deepToString(a1)); \\n    System.out.println(\\\"a2: \\\" + Arrays.deepToString(a2)); \\n    System.out.println(\\\"a3: \\\" + Arrays.deepToString(a3));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5fbd6a566a0a8127be685de44ce43b1\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[] ints = { 1, 2, 3, 4, 5 }; \\n    Double[] doubles = { 1.1, 2.2, 3.3, 4.4, 5.5 }; \\n    Integer[] ints2 = \\n      new ClassParameter<Integer>().f(ints); \\n    Double[] doubles2 = \\n      new ClassParameter<Double>().f(doubles); \\n    ints2 = MethodParameter.f(ints); \\n    doubles2 = MethodParameter.f(doubles);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecd2850dd9d85cfb960aa6310d66bcdd\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String>[] ls; \\n    List[] la = new List[10]; \\n    ls = (List<String>[])la; // \\\"Unchecked\\\" warning \\n    ls[0] = new ArrayList<String>(); \\n    // Compile-time checking produces an error: \\n    //! ls[1] = new ArrayList<Integer>();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a4e0e38e97a4d56d028e62a43172bea7\",\n        \"type\": \"source_code\",\n        \"text\": \"// The problem: List<String> is a subtype of Object \\n    Object[] objects = ls; // So assignment is OK \\n    // Compiles and runs without complaint: \\n    objects[1] = new ArrayList<Integer>();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"82afbe5fa2c5238cbde8edcec0a313bb\",\n        \"type\": \"source_code\",\n        \"text\": \"// However, if your needs are straightforward it is \\n    // possible to create an array of generics, albeit \\n    // with an \\\"unchecked\\\" warning: \\n    List<BerylliumSphere>[] spheres = \\n      (List<BerylliumSphere>[])new List[10]; \\n    for(int i = 0; i < spheres.length; i++) \\n      spheres[i] = new ArrayList<BerylliumSphere>();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"36fb4ff143321090ac15e3c3babbd29d\",\n        \"type\": \"source_code\",\n        \"text\": \"//! array = new T[size]; // Illegal \\n    array = (T[])new Object[size]; // \\\"unchecked\\\" Warning\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ef66d8342f594f34f054efc74ea98a6\",\n        \"type\": \"source_code\",\n        \"text\": \"int size = 6; \\n    boolean[] a1 = new boolean[size]; \\n    byte[] a2 = new byte[size]; \\n    char[] a3 = new char[size]; \\n    short[] a4 = new short[size]; \\n    int[] a5 = new int[size]; \\n    long[] a6 = new long[size]; \\n    float[] a7 = new float[size]; \\n    double[] a8 = new double[size]; \\n    String[] a9 = new String[size]; \\n    Arrays.fill(a1, true); \\n    print(\\\"a1 = \\\" + Arrays.toString(a1)); \\n    Arrays.fill(a2, (byte)11); \\n    print(\\\"a2 = \\\" + Arrays.toString(a2)); \\n    Arrays.fill(a3, \\u2018x\\u2019); \\n    print(\\\"a3 = \\\" + Arrays.toString(a3)); \\n    Arrays.fill(a4, (short)17); \\n    print(\\\"a4 = \\\" + Arrays.toString(a4)); \\n    Arrays.fill(a5, 19); \\n    print(\\\"a5 = \\\" + Arrays.toString(a5)); \\n    Arrays.fill(a6, 23); \\n    print(\\\"a6 = \\\" + Arrays.toString(a6)); \\n    Arrays.fill(a7, 29); \\n    print(\\\"a7 = \\\" + Arrays.toString(a7)); \\n    Arrays.fill(a8, 47); \\n    print(\\\"a8 = \\\" + Arrays.toString(a8)); \\n    Arrays.fill(a9, \\\"Hello\\\"); \\n    print(\\\"a9 = \\\" + Arrays.toString(a9)); \\n    // Manipulating ranges: \\n    Arrays.fill(a9, 3, 5, \\\"World\\\"); \\n    print(\\\"a9 = \\\" + Arrays.toString(a9));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab4526544bde6a66bca1b17082227496\",\n        \"type\": \"source_code\",\n        \"text\": \"private boolean value = false; \\n    public java.lang.Boolean next() { \\n      value = !value; // Just flips back and forth \\n      return value; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7c4e964c5dd791cd596a343938a2f95\",\n        \"type\": \"source_code\",\n        \"text\": \"private byte value = 0; \\n    public java.lang.Byte next() { return value++; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4627d399e32cc56bbf325e4a165b268\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\").toCharArray();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4a376aa5a50fbfe801919ff712b028ee\",\n        \"type\": \"source_code\",\n        \"text\": \"int index = -1; \\n    public java.lang.Character next() { \\n      index = (index + 1) % chars.length; \\n      return chars[index]; \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"188676cc1358920661b7d1378af176dc\",\n        \"type\": \"source_code\",\n        \"text\": \"private int length = 7;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53d16884aa9ba921987cf6e661f18ae5\",\n        \"type\": \"source_code\",\n        \"text\": \"Generator<java.lang.Character> cg = new Character(); \\n    public String() {} \\n    public String(int length) { this.length = length; } \\n    public java.lang.String next() { \\n      char[] buf = new char[length]; \\n      for(int i = 0; i < length; i++) \\n        buf[i] = cg.next(); \\n      return new java.lang.String(buf); \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8cfc0ef6dab137cd20646d8911ec7ee9\",\n        \"type\": \"source_code\",\n        \"text\": \"private short value = 0; \\n    public java.lang.Short next() { return value++; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eec3805400a1adb83e299960b0c2183a\",\n        \"type\": \"source_code\",\n        \"text\": \"private int value = 0; \\n    public java.lang.Integer next() { return value++; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15301034fd7477fc7888e170112fdfc3\",\n        \"type\": \"source_code\",\n        \"text\": \"private long value = 0; \\n    public java.lang.Long next() { return value++; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a216b4e152510673172ab60e986ab21c\",\n        \"type\": \"source_code\",\n        \"text\": \"private float value = 0; \\n    public java.lang.Float next() { \\n      float result = value; \\n      value += 1.0; \\n      return result; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd6e365740a0ca05370b83fd76065f3a\",\n        \"type\": \"source_code\",\n        \"text\": \"private double value = 0.0; \\n    public java.lang.Double next() { \\n      double result = value; \\n      value += 1.0; \\n      return result; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65f643b34550cb5b25e1e0c4b2182e15\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Class<?> type : surroundingClass.getClasses()) { \\n      System.out.print(type.getSimpleName() + \\\": \\\"); \\n      try { \\n        Generator<?> g = (Generator<?>)type.newInstance(); \\n        for(int i = 0; i < size; i++) \\n          System.out.printf(g.next() + \\\" \\\"); \\n        System.out.println(); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      } \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d5eed19d2f82e1c66a5079a87a88fd7\",\n        \"type\": \"source_code\",\n        \"text\": \"test(CountingGenerator.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d67ab0190380b42482bd7020a07d5e0e\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Boolean next() { \\n      return r.nextBoolean(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcf5bd3cd5e3a9c3ddf19b3f556adf67\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Byte next() { \\n      return (byte)r.nextInt(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e368639da28404187b879a528f3b18ee\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Character next() { \\n      return CountingGenerator.chars[ \\n        r.nextInt(CountingGenerator.chars.length)];\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6508de8ec114e7cd1541611481aaca40\",\n        \"type\": \"source_code\",\n        \"text\": \"// Plug in the random Character generator: \\n    { cg = new Character(); } // Instance initializer \\n    public String() {} \\n    public String(int length) { super(length); }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"878712ecd6f95748379c70a387057af9\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Short next() { \\n      return (short)r.nextInt(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"16de5867ab1996536662f7385460b456\",\n        \"type\": \"source_code\",\n        \"text\": \"private int mod = 10000; \\n    public Integer() {} \\n    public Integer(int modulo) { mod = modulo; } \\n    public java.lang.Integer next() { \\n      return r.nextInt(mod); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b450b9b6e8d53bb1c97ad79361abe70\",\n        \"type\": \"source_code\",\n        \"text\": \"private int mod = 10000; \\n    public Long() {} \\n    public Long(int modulo) { mod = modulo; } \\n    public java.lang.Long next() { \\n      return new java.lang.Long(r.nextInt(mod)); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b5a667c6b030508032f698f099abb4b\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Float next() { \\n      // Trim all but the first two decimal places: \\n      int trimmed = Math.round(r.nextFloat() * 100); \\n      return ((float)trimmed) / 100; \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15a357f7eb8426fd9b64b9d5166bd8cd\",\n        \"type\": \"source_code\",\n        \"text\": \"public java.lang.Double next() { \\n      long trimmed = Math.round(r.nextDouble() * 100); \\n      return ((double)trimmed) / 100; \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"778aa1be2d5620f45dbbbd5ce805e4dc\",\n        \"type\": \"source_code\",\n        \"text\": \"GeneratorsTest.test(RandomGenerator.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"deba66d09c82c38abd3083622e016844\",\n        \"type\": \"source_code\",\n        \"text\": \"return new CollectionData<T>(gen, a.length).toArray(a);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2ee70ec01bb386578843ebf889ed950\",\n        \"type\": \"source_code\",\n        \"text\": \"Generator<T> gen, int size) { \\n    T[] a = \\n      (T[])java.lang.reflect.Array.newInstance(type, size); \\n    return new CollectionData<T>(gen, size).toArray(a);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"670c82b996d55528c3e284bf2eede4f8\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[] a = { 9, 8, 7, 6 }; \\n    System.out.println(Arrays.toString(a)); \\n    a = Generated.array(a,new CountingGenerator.Integer()); \\n    System.out.println(Arrays.toString(a)); \\n    Integer[] b = Generated.array(Integer.class, \\n        new CountingGenerator.Integer(), 15); \\n    System.out.println(Arrays.toString(b));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b64ad865324d9423ca0e5a1818ebc08\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean[] result = new boolean[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; // Autounboxing \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e6554d45c13e488ecf5550c5e66608c1\",\n        \"type\": \"source_code\",\n        \"text\": \"char[] result = new char[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3282fe6d59fbec73822400fae7324336\",\n        \"type\": \"source_code\",\n        \"text\": \"byte[] result = new byte[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a4043492252f69f8f6cebd9ed6d49865\",\n        \"type\": \"source_code\",\n        \"text\": \"short[] result = new short[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2730b3df559d43dc48d96baf458458fc\",\n        \"type\": \"source_code\",\n        \"text\": \"return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b16740c27502e0ad666ac8d3b020bf0\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] result = new int[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26c11c088293b3f31fb638bd1e64481c\",\n        \"type\": \"source_code\",\n        \"text\": \"long[] result = new long[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2d7bf5a8fccecd48d7fcaffc62448106\",\n        \"type\": \"source_code\",\n        \"text\": \"float[] result = new float[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f224734a1948dfa72a43a82b83fee22d\",\n        \"type\": \"source_code\",\n        \"text\": \"double[] result = new double[in.length]; \\n    for(int i = 0; i < in.length; i++) \\n      result[i] = in[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d35faf73d01df1178d898d73c77aa512\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer[] a = Generated.array(Integer.class, \\n        new CountingGenerator.Integer(), 15); \\n    int[] b = ConvertTo.primitive(a); \\n    System.out.println(Arrays.toString(b)); \\n    boolean[] c = ConvertTo.primitive( \\n      Generated.array(Boolean.class, \\n        new CountingGenerator.Boolean(), 7)); \\n    System.out.println(Arrays.toString(c));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a62df0464024d6200d7b65823add2cdb\",\n        \"type\": \"source_code\",\n        \"text\": \"int size = 6; \\n    boolean[] a1 = ConvertTo.primitive(Generated.array( \\n      Boolean.class, new RandomGenerator.Boolean(), size)); \\n    print(\\\"a1 = \\\" + Arrays.toString(a1)); \\n    byte[] a2 = ConvertTo.primitive(Generated.array( \\n      Byte.class, new RandomGenerator.Byte(), size)); \\n    print(\\\"a2 = \\\" + Arrays.toString(a2)); \\n    char[] a3 = ConvertTo.primitive(Generated.array( \\n      Character.class, \\n      new RandomGenerator.Character(), size)); \\n    print(\\\"a3 = \\\" + Arrays.toString(a3)); \\n    short[] a4 = ConvertTo.primitive(Generated.array( \\n      Short.class, new RandomGenerator.Short(), size)); \\n    print(\\\"a4 = \\\" + Arrays.toString(a4)); \\n    int[] a5 = ConvertTo.primitive(Generated.array( \\n      Integer.class, new RandomGenerator.Integer(), size)); \\n    print(\\\"a5 = \\\" + Arrays.toString(a5)); \\n    long[] a6 = ConvertTo.primitive(Generated.array( \\n      Long.class, new RandomGenerator.Long(), size)); \\n    print(\\\"a6 = \\\" + Arrays.toString(a6)); \\n    float[] a7 = ConvertTo.primitive(Generated.array( \\n      Float.class, new RandomGenerator.Float(), size)); \\n    print(\\\"a7 = \\\" + Arrays.toString(a7)); \\n    double[] a8 = ConvertTo.primitive(Generated.array( \\n      Double.class, new RandomGenerator.Double(), size)); \\n    print(\\\"a8 = \\\" + Arrays.toString(a8));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9218a0ed65ee7acfc627c3acd55a0856\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] i = new int[7]; \\n    int[] j = new int[10]; \\n    Arrays.fill(i, 47); \\n    Arrays.fill(j, 99); \\n    print(\\\"i = \\\" + Arrays.toString(i)); \\n    print(\\\"j = \\\" + Arrays.toString(j)); \\n    System.arraycopy(i, 0, j, 0, i.length); \\n    print(\\\"j = \\\" + Arrays.toString(j)); \\n    int[] k = new int[5]; \\n    Arrays.fill(k, 103); \\n    System.arraycopy(i, 0, k, 0, k.length); \\n    print(\\\"k = \\\" + Arrays.toString(k)); \\n    Arrays.fill(k, 103); \\n    System.arraycopy(k, 0, i, 0, k.length); \\n    print(\\\"i = \\\" + Arrays.toString(i)); \\n    // Objects: \\n    Integer[] u = new Integer[10]; \\n    Integer[] v = new Integer[5]; \\n    Arrays.fill(u, new Integer(47));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"952ed98bc373e4bd57701f5269281991\",\n        \"type\": \"source_code\",\n        \"text\": \"Arrays.fill(v, new Integer(99)); \\n    print(\\\"u = \\\" + Arrays.toString(u)); \\n    print(\\\"v = \\\" + Arrays.toString(v)); \\n    System.arraycopy(v, 0, u, u.length/2, v.length); \\n    print(\\\"u = \\\" + Arrays.toString(u));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0321772b7c858b30f2f71c17bbc13033\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] a1 = new int[10]; \\n    int[] a2 = new int[10]; \\n    Arrays.fill(a1, 47); \\n    Arrays.fill(a2, 47); \\n    print(Arrays.equals(a1, a2)); \\n    a2[3] = 11; \\n    print(Arrays.equals(a1, a2)); \\n    String[] s1 = new String[4]; \\n    Arrays.fill(s1, \\\"Hi\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c9f91acc0bce0cd518ef3781e627db1\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] s2 = { new String(\\\"Hi\\\"), new String(\\\"Hi\\\"), \\n      new String(\\\"Hi\\\"), new String(\\\"Hi\\\") }; \\n    print(Arrays.equals(s1, s2));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5995c8322f4fdbfa38b45ef1d581bb9f\",\n        \"type\": \"source_code\",\n        \"text\": \"i = n1; \\n    j = n2;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae949749179839209ebc368eb13a639e\",\n        \"type\": \"source_code\",\n        \"text\": \"String result = \\\"[i = \\\" + i + \\\", j = \\\" + j + \\\"]\\\"; \\n    if(count++ % 3 == 0) \\n      result += \\\"\\\\n\\\"; \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5eb10b7c470773f3d1b1410089e0df1\",\n        \"type\": \"source_code\",\n        \"text\": \"return (i < rv.i ? -1 : (i == rv.i ? 0 : 1));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33b55f55c6cce6d9a60f400744721dd8\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Generator<CompType>() { \\n      public CompType next() { \\n        return new CompType(r.nextInt(100),r.nextInt(100)); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32e7ad4f1ca2f0503e51b5324587a781\",\n        \"type\": \"source_code\",\n        \"text\": \"CompType[] a = \\n      Generated.array(new CompType[12], generator()); \\n    print(\\\"before sorting:\\\"); \\n    print(Arrays.toString(a)); \\n    Arrays.sort(a); \\n    print(\\\"after sorting:\\\"); \\n    print(Arrays.toString(a));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"382ee130c2ae78c2bd44871e0892bfec\",\n        \"type\": \"source_code\",\n        \"text\": \"CompType[] a = Generated.array( \\n      new CompType[12], CompType.generator()); \\n    print(\\\"before sorting:\\\"); \\n    print(Arrays.toString(a)); \\n    Arrays.sort(a, Collections.reverseOrder()); \\n    print(\\\"after sorting:\\\"); \\n    print(Arrays.toString(a));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7a31f6127d4ed9cf6aa764fa53ff0a1d\",\n        \"type\": \"source_code\",\n        \"text\": \"return (o1.j < o2.j ? -1 : (o1.j == o2.j ? 0 : 1));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f150553e7052d31733e7bb3d05573182\",\n        \"type\": \"source_code\",\n        \"text\": \"CompType[] a = Generated.array( \\n      new CompType[12], CompType.generator()); \\n    print(\\\"before sorting:\\\"); \\n    print(Arrays.toString(a)); \\n    Arrays.sort(a, new CompTypeComparator()); \\n    print(\\\"after sorting:\\\"); \\n    print(Arrays.toString(a));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb24a108630ac3873847de9d2b0646b5\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] sa = Generated.array(new String[20], \\n      new RandomGenerator.String(5)); \\n    print(\\\"Before sort: \\\" + Arrays.toString(sa)); \\n    Arrays.sort(sa); \\n    print(\\\"After sort: \\\" + Arrays.toString(sa)); \\n    Arrays.sort(sa, Collections.reverseOrder()); \\n    print(\\\"Reverse sort: \\\" + Arrays.toString(sa)); \\n    Arrays.sort(sa, String.CASE_INSENSITIVE_ORDER); \\n    print(\\\"Case-insensitive sort: \\\" + Arrays.toString(sa));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c43fabb57e9a3594a4cb024c5f3ebd2\",\n        \"type\": \"source_code\",\n        \"text\": \"Generator<Integer> gen = \\n      new RandomGenerator.Integer(1000); \\n    int[] a = ConvertTo.primitive( \\n      Generated.array(new Integer[25], gen)); \\n    Arrays.sort(a); \\n    print(\\\"Sorted array: \\\" + Arrays.toString(a)); \\n    while(true) { \\n      int r = gen.next(); \\n      int location = Arrays.binarySearch(a, r); \\n      if(location >= 0) { \\n        print(\\\"Location of \\\" + r + \\\" is \\\" + location + \\n          \\\", a[\\\" + location + \\\"] = \\\" + a[location]); \\n        break; // Out of while loop \\n      } \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"634986c6890a1d1ad09476aacf7874dd\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] sa = Generated.array(new String[30], \\n      new RandomGenerator.String(5)); \\n    Arrays.sort(sa, String.CASE_INSENSITIVE_ORDER); \\n    System.out.println(Arrays.toString(sa)); \\n    int index = Arrays.binarySearch(sa, sa[10], \\n      String.CASE_INSENSITIVE_ORDER); \\n    System.out.println(\\\"Index: \\\"+ index + \\\"\\\\n\\\"+ sa[index]);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ca4bb5797fa9c90163ffa7aca9d507d\",\n        \"type\": \"source_code\",\n        \"text\": \"# Define a method, \\u2018this\\u2019 pointer is explicit: \\n    def getReversed(self): \\n        reversed = self[:] # Copy list using slices \\n        reversed.reverse() # Built-in list method \\n        return reversed\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e589792d4b1ac97d27f22dc3834f27b7\",\n        \"type\": \"source_code\",\n        \"text\": \"return super.toString() + \\\" \\\" + s;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d1472aff6378676e2c9b9ae4546bca91\",\n        \"type\": \"source_code\",\n        \"text\": \"List<StringAddress> list= new ArrayList<StringAddress>( \\n      Collections.nCopies(4, new StringAddress(\\\"Hello\\\"))); \\n    System.out.println(list); \\n    Collections.fill(list, new StringAddress(\\\"World!\\\")); \\n    System.out.println(list);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bcee2d7a580aa09cc59eb1798270e1f2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < quantity; i++) \\n      add(gen.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"834be7ffd3efad41f169a3b936dcdac5\",\n        \"type\": \"source_code\",\n        \"text\": \"return new CollectionData<T>(gen, quantity);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"18db2674fc6534dc6331ea04babfc058\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"distributing swords is no basis for a system of \\\" +\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03979697c5e0dd6391e59bc2003c442e\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"government\\\").split(\\\" \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"22dfd913bc12ccf547afa8287ed5602a\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> set = new LinkedHashSet<String>( \\n      new CollectionData<String>(new Government(), 15)); \\n    // Using the convenience method: \\n    set.addAll(CollectionData.list(new Government(), 15)); \\n    System.out.println(set);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"113cccdecaf94046e97495f9a3841cee\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(new ArrayList<String>( \\n      CollectionData.list( // Convenience method \\n        new RandomGenerator.String(9), 10))); \\n    System.out.println(new HashSet<Integer>( \\n      new CollectionData<Integer>( \\n        new RandomGenerator.Integer(), 10)));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"434646eee46af15903e148b1d3d32625\",\n        \"type\": \"source_code\",\n        \"text\": \"key = k; \\n    value = v;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60771191d04d3d270d462a426839b873\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < quantity; i++) { \\n      Pair<K,V> p = gen.next(); \\n      put(p.key, p.value); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a908f474423e7e060c023f4b5014dbbf\",\n        \"type\": \"source_code\",\n        \"text\": \"int quantity) { \\n    for(int i = 0; i < quantity; i++) { \\n      put(genK.next(), genV.next()); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebefbda27b82c497cd630d05fc2b348c\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < quantity; i++) { \\n      put(genK.next(), value); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0b52382b83ab1938c9282db439e0fec2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(K key : genK) { \\n      put(key, genV.next()); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"efbc5b8f0deb6886a3f1789cb48d9058\",\n        \"type\": \"source_code\",\n        \"text\": \"for(K key : genK) { \\n      put(key, value); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60433fca6b50d267178849c4190d4d28\",\n        \"type\": \"source_code\",\n        \"text\": \"return new MapData<K,V>(gen, quantity);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af360c64a67385aa7d10d21a622bc6eb\",\n        \"type\": \"source_code\",\n        \"text\": \"return new MapData<K,V>(genK, genV, quantity);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32e946e5b83b964e3cc3863c12af1291\",\n        \"type\": \"source_code\",\n        \"text\": \"return new MapData<K,V>(genK, value, quantity);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3014b4053fd19e80991d84e811cf2437\",\n        \"type\": \"source_code\",\n        \"text\": \"return new MapData<K,V>(genK, genV);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bcd6bc193b91fb6f5d3297b83669d30e\",\n        \"type\": \"source_code\",\n        \"text\": \"return new MapData<K,V>(genK, value);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"379fe784d917174a35b88abb65aef9cb\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Pair<Integer,String>( \\n      number++, \\\"\\\" + letter++);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"22a016ab7d260fb7f40923a55bc8e7ac\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterator<Integer>() { \\n      public Integer next() { return number++; } \\n      public boolean hasNext() { return number < size; } \\n      public void remove() { \\n        throw new UnsupportedOperationException(); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf796b998ecb3358b246b3dbedec822f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Pair Generator: \\n    print(MapData.map(new Letters(), 11)); \\n    // Two separate generators: \\n    print(MapData.map(new CountingGenerator.Character(), \\n      new RandomGenerator.String(3), 8)); \\n    // A key Generator and a single value: \\n    print(MapData.map(new CountingGenerator.Character(), \\n      \\\"Value\\\", 6)); \\n    // An Iterable and a value Generator: \\n    print(MapData.map(new Letters(), \\n      new RandomGenerator.String(3))); \\n    // An Iterable and a single value: \\n    print(MapData.map(new Letters(), \\\"Pop\\\"));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f2be5d4cfa1ff1eaf03edff1f02f1df\",\n        \"type\": \"source_code\",\n        \"text\": \"// Africa \\n    {\\\"ALGERIA\\\",\\\"Algiers\\\"}, {\\\"ANGOLA\\\",\\\"Luanda\\\"}, \\n    {\\\"BENIN\\\",\\\"Porto-Novo\\\"}, {\\\"BOTSWANA\\\",\\\"Gaberone\\\"}, \\n    {\\\"BURKINA FASO\\\",\\\"Ouagadougou\\\"}, \\n    {\\\"BURUNDI\\\",\\\"Bujumbura\\\"}, \\n    {\\\"CAMEROON\\\",\\\"Yaounde\\\"}, {\\\"CAPE VERDE\\\",\\\"Praia\\\"}, \\n    {\\\"CENTRAL AFRICAN REPUBLIC\\\",\\\"Bangui\\\"}, \\n    {\\\"CHAD\\\",\\\"N\\u2019djamena\\\"},  {\\\"COMOROS\\\",\\\"Moroni\\\"},\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26af31f177636d77ca4f11504c955f57\",\n        \"type\": \"source_code\",\n        \"text\": \"{\\\"CONGO\\\",\\\"Brazzaville\\\"}, {\\\"DJIBOUTI\\\",\\\"Dijibouti\\\"}, \\n    {\\\"EGYPT\\\",\\\"Cairo\\\"}, {\\\"EQUATORIAL GUINEA\\\",\\\"Malabo\\\"}, \\n    {\\\"ERITREA\\\",\\\"Asmara\\\"}, {\\\"ETHIOPIA\\\",\\\"Addis Ababa\\\"}, \\n    {\\\"GABON\\\",\\\"Libreville\\\"}, {\\\"THE GAMBIA\\\",\\\"Banjul\\\"}, \\n    {\\\"GHANA\\\",\\\"Accra\\\"}, {\\\"GUINEA\\\",\\\"Conakry\\\"}, \\n    {\\\"BISSAU\\\",\\\"Bissau\\\"}, \\n    {\\\"COTE D\\u2019IVOIR (IVORY COAST)\\\",\\\"Yamoussoukro\\\"}, \\n    {\\\"KENYA\\\",\\\"Nairobi\\\"}, {\\\"LESOTHO\\\",\\\"Maseru\\\"}, \\n    {\\\"LIBERIA\\\",\\\"Monrovia\\\"}, {\\\"LIBYA\\\",\\\"Tripoli\\\"}, \\n    {\\\"MADAGASCAR\\\",\\\"Antananarivo\\\"}, {\\\"MALAWI\\\",\\\"Lilongwe\\\"}, \\n    {\\\"MALI\\\",\\\"Bamako\\\"}, {\\\"MAURITANIA\\\",\\\"Nouakchott\\\"}, \\n    {\\\"MAURITIUS\\\",\\\"Port Louis\\\"}, {\\\"MOROCCO\\\",\\\"Rabat\\\"}, \\n    {\\\"MOZAMBIQUE\\\",\\\"Maputo\\\"}, {\\\"NAMIBIA\\\",\\\"Windhoek\\\"}, \\n    {\\\"NIGER\\\",\\\"Niamey\\\"}, {\\\"NIGERIA\\\",\\\"Abuja\\\"}, \\n    {\\\"RWANDA\\\",\\\"Kigali\\\"}, \\n    {\\\"SAO TOME E PRINCIPE\\\",\\\"Sao Tome\\\"}, \\n    {\\\"SENEGAL\\\",\\\"Dakar\\\"}, {\\\"SEYCHELLES\\\",\\\"Victoria\\\"}, \\n    {\\\"SIERRA LEONE\\\",\\\"Freetown\\\"}, {\\\"SOMALIA\\\",\\\"Mogadishu\\\"}, \\n    {\\\"SOUTH AFRICA\\\",\\\"Pretoria/Cape Town\\\"}, \\n    {\\\"SUDAN\\\",\\\"Khartoum\\\"}, \\n    {\\\"SWAZILAND\\\",\\\"Mbabane\\\"}, {\\\"TANZANIA\\\",\\\"Dodoma\\\"}, \\n    {\\\"TOGO\\\",\\\"Lome\\\"}, {\\\"TUNISIA\\\",\\\"Tunis\\\"}, \\n    {\\\"UGANDA\\\",\\\"Kampala\\\"}, \\n    {\\\"DEMOCRATIC REPUBLIC OF THE CONGO (ZAIRE)\\\", \\n     \\\"Kinshasa\\\"}, \\n    {\\\"ZAMBIA\\\",\\\"Lusaka\\\"}, {\\\"ZIMBABWE\\\",\\\"Harare\\\"}, \\n    // Asia \\n    {\\\"AFGHANISTAN\\\",\\\"Kabul\\\"}, {\\\"BAHRAIN\\\",\\\"Manama\\\"}, \\n    {\\\"BANGLADESH\\\",\\\"Dhaka\\\"}, {\\\"BHUTAN\\\",\\\"Thimphu\\\"}, \\n    {\\\"BRUNEI\\\",\\\"Bandar Seri Begawan\\\"}, \\n    {\\\"CAMBODIA\\\",\\\"Phnom Penh\\\"}, \\n    {\\\"CHINA\\\",\\\"Beijing\\\"}, {\\\"CYPRUS\\\",\\\"Nicosia\\\"}, \\n    {\\\"INDIA\\\",\\\"New Delhi\\\"}, {\\\"INDONESIA\\\",\\\"Jakarta\\\"}, \\n    {\\\"IRAN\\\",\\\"Tehran\\\"}, {\\\"IRAQ\\\",\\\"Baghdad\\\"}, \\n    {\\\"ISRAEL\\\",\\\"Jerusalem\\\"}, {\\\"JAPAN\\\",\\\"Tokyo\\\"}, \\n    {\\\"JORDAN\\\",\\\"Amman\\\"}, {\\\"KUWAIT\\\",\\\"Kuwait City\\\"}, \\n    {\\\"LAOS\\\",\\\"Vientiane\\\"}, {\\\"LEBANON\\\",\\\"Beirut\\\"}, \\n    {\\\"MALAYSIA\\\",\\\"Kuala Lumpur\\\"}, {\\\"THE MALDIVES\\\",\\\"Male\\\"}, \\n    {\\\"MONGOLIA\\\",\\\"Ulan Bator\\\"}, \\n    {\\\"MYANMAR (BURMA)\\\",\\\"Rangoon\\\"}, \\n    {\\\"NEPAL\\\",\\\"Katmandu\\\"}, {\\\"NORTH KOREA\\\",\\\"P\\u2019yongyang\\\"}, \\n    {\\\"OMAN\\\",\\\"Muscat\\\"}, {\\\"PAKISTAN\\\",\\\"Islamabad\\\"}, \\n    {\\\"PHILIPPINES\\\",\\\"Manila\\\"}, {\\\"QATAR\\\",\\\"Doha\\\"}, \\n    {\\\"SAUDI ARABIA\\\",\\\"Riyadh\\\"}, {\\\"SINGAPORE\\\",\\\"Singapore\\\"}, \\n    {\\\"SOUTH KOREA\\\",\\\"Seoul\\\"}, {\\\"SRI LANKA\\\",\\\"Colombo\\\"}, \\n    {\\\"SYRIA\\\",\\\"Damascus\\\"}, \\n    {\\\"TAIWAN (REPUBLIC OF CHINA)\\\",\\\"Taipei\\\"}, \\n    {\\\"THAILAND\\\",\\\"Bangkok\\\"}, {\\\"TURKEY\\\",\\\"Ankara\\\"}, \\n    {\\\"UNITED ARAB EMIRATES\\\",\\\"Abu Dhabi\\\"}, \\n    {\\\"VIETNAM\\\",\\\"Hanoi\\\"}, {\\\"YEMEN\\\",\\\"Sana\\u2019a\\\"}, \\n    // Australia and Oceania \\n    {\\\"AUSTRALIA\\\",\\\"Canberra\\\"}, {\\\"FIJI\\\",\\\"Suva\\\"}, \\n    {\\\"KIRIBATI\\\",\\\"Bairiki\\\"}, \\n    {\\\"MARSHALL ISLANDS\\\",\\\"Dalap-Uliga-Darrit\\\"}, \\n    {\\\"MICRONESIA\\\",\\\"Palikir\\\"}, {\\\"NAURU\\\",\\\"Yaren\\\"}, \\n    {\\\"NEW ZEALAND\\\",\\\"Wellington\\\"}, {\\\"PALAU\\\",\\\"Koror\\\"}, \\n    {\\\"PAPUA NEW GUINEA\\\",\\\"Port Moresby\\\"}, \\n    {\\\"SOLOMON ISLANDS\\\",\\\"Honaira\\\"}, {\\\"TONGA\\\",\\\"Nuku\\u2019alofa\\\"}, \\n    {\\\"TUVALU\\\",\\\"Fongafale\\\"}, {\\\"VANUATU\\\",\\\"< Port-Vila\\\"}, \\n    {\\\"WESTERN SAMOA\\\",\\\"Apia\\\"}, \\n    // Eastern Europe and former USSR \\n    {\\\"ARMENIA\\\",\\\"Yerevan\\\"}, {\\\"AZERBAIJAN\\\",\\\"Baku\\\"}, \\n    {\\\"BELARUS (BYELORUSSIA)\\\",\\\"Minsk\\\"},\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26ee6c178cfd41f6809fae98c61c23b4\",\n        \"type\": \"source_code\",\n        \"text\": \"{\\\"BULGARIA\\\",\\\"Sofia\\\"}, {\\\"GEORGIA\\\",\\\"Tbilisi\\\"}, \\n    {\\\"KAZAKSTAN\\\",\\\"Almaty\\\"}, {\\\"KYRGYZSTAN\\\",\\\"Alma-Ata\\\"}, \\n    {\\\"MOLDOVA\\\",\\\"Chisinau\\\"}, {\\\"RUSSIA\\\",\\\"Moscow\\\"}, \\n    {\\\"TAJIKISTAN\\\",\\\"Dushanbe\\\"}, {\\\"TURKMENISTAN\\\",\\\"Ashkabad\\\"}, \\n    {\\\"UKRAINE\\\",\\\"Kyiv\\\"}, {\\\"UZBEKISTAN\\\",\\\"Tashkent\\\"}, \\n    // Europe \\n    {\\\"ALBANIA\\\",\\\"Tirana\\\"}, {\\\"ANDORRA\\\",\\\"Andorra la Vella\\\"}, \\n    {\\\"AUSTRIA\\\",\\\"Vienna\\\"}, {\\\"BELGIUM\\\",\\\"Brussels\\\"}, \\n    {\\\"BOSNIA\\\",\\\"-\\\"}, {\\\"HERZEGOVINA\\\",\\\"Sarajevo\\\"}, \\n    {\\\"CROATIA\\\",\\\"Zagreb\\\"}, {\\\"CZECH REPUBLIC\\\",\\\"Prague\\\"}, \\n    {\\\"DENMARK\\\",\\\"Copenhagen\\\"}, {\\\"ESTONIA\\\",\\\"Tallinn\\\"}, \\n    {\\\"FINLAND\\\",\\\"Helsinki\\\"}, {\\\"FRANCE\\\",\\\"Paris\\\"}, \\n    {\\\"GERMANY\\\",\\\"Berlin\\\"}, {\\\"GREECE\\\",\\\"Athens\\\"}, \\n    {\\\"HUNGARY\\\",\\\"Budapest\\\"}, {\\\"ICELAND\\\",\\\"Reykjavik\\\"}, \\n    {\\\"IRELAND\\\",\\\"Dublin\\\"}, {\\\"ITALY\\\",\\\"Rome\\\"}, \\n    {\\\"LATVIA\\\",\\\"Riga\\\"}, {\\\"LIECHTENSTEIN\\\",\\\"Vaduz\\\"}, \\n    {\\\"LITHUANIA\\\",\\\"Vilnius\\\"}, {\\\"LUXEMBOURG\\\",\\\"Luxembourg\\\"}, \\n    {\\\"MACEDONIA\\\",\\\"Skopje\\\"}, {\\\"MALTA\\\",\\\"Valletta\\\"}, \\n    {\\\"MONACO\\\",\\\"Monaco\\\"}, {\\\"MONTENEGRO\\\",\\\"Podgorica\\\"}, \\n    {\\\"THE NETHERLANDS\\\",\\\"Amsterdam\\\"}, {\\\"NORWAY\\\",\\\"Oslo\\\"}, \\n    {\\\"POLAND\\\",\\\"Warsaw\\\"}, {\\\"PORTUGAL\\\",\\\"Lisbon\\\"}, \\n    {\\\"ROMANIA\\\",\\\"Bucharest\\\"}, {\\\"SAN MARINO\\\",\\\"San Marino\\\"}, \\n    {\\\"SERBIA\\\",\\\"Belgrade\\\"}, {\\\"SLOVAKIA\\\",\\\"Bratislava\\\"}, \\n    {\\\"SLOVENIA\\\",\\\"Ljuijana\\\"}, {\\\"SPAIN\\\",\\\"Madrid\\\"}, \\n    {\\\"SWEDEN\\\",\\\"Stockholm\\\"}, {\\\"SWITZERLAND\\\",\\\"Berne\\\"}, \\n    {\\\"UNITED KINGDOM\\\",\\\"London\\\"}, {\\\"VATICAN CITY\\\",\\\"---\\\"}, \\n    // North and Central America \\n    {\\\"ANTIGUA AND BARBUDA\\\",\\\"Saint John\\u2019s\\\"}, \\n    {\\\"BAHAMAS\\\",\\\"Nassau\\\"}, \\n    {\\\"BARBADOS\\\",\\\"Bridgetown\\\"}, {\\\"BELIZE\\\",\\\"Belmopan\\\"}, \\n    {\\\"CANADA\\\",\\\"Ottawa\\\"}, {\\\"COSTA RICA\\\",\\\"San Jose\\\"}, \\n    {\\\"CUBA\\\",\\\"Havana\\\"}, {\\\"DOMINICA\\\",\\\"Roseau\\\"}, \\n    {\\\"DOMINICAN REPUBLIC\\\",\\\"Santo Domingo\\\"}, \\n    {\\\"EL SALVADOR\\\",\\\"San Salvador\\\"}, \\n    {\\\"GRENADA\\\",\\\"Saint George\\u2019s\\\"}, \\n    {\\\"GUATEMALA\\\",\\\"Guatemala City\\\"}, \\n    {\\\"HAITI\\\",\\\"Port-au-Prince\\\"}, \\n    {\\\"HONDURAS\\\",\\\"Tegucigalpa\\\"}, {\\\"JAMAICA\\\",\\\"Kingston\\\"}, \\n    {\\\"MEXICO\\\",\\\"Mexico City\\\"}, {\\\"NICARAGUA\\\",\\\"Managua\\\"}, \\n    {\\\"PANAMA\\\",\\\"Panama City\\\"}, {\\\"ST. KITTS\\\",\\\"-\\\"}, \\n    {\\\"NEVIS\\\",\\\"Basseterre\\\"}, {\\\"ST. LUCIA\\\",\\\"Castries\\\"}, \\n    {\\\"ST. VINCENT AND THE GRENADINES\\\",\\\"Kingstown\\\"}, \\n    {\\\"UNITED STATES OF AMERICA\\\",\\\"Washington, D.C.\\\"}, \\n    // South America \\n    {\\\"ARGENTINA\\\",\\\"Buenos Aires\\\"}, \\n    {\\\"BOLIVIA\\\",\\\"Sucre (legal)/La Paz(administrative)\\\"}, \\n    {\\\"BRAZIL\\\",\\\"Brasilia\\\"}, {\\\"CHILE\\\",\\\"Santiago\\\"}, \\n    {\\\"COLOMBIA\\\",\\\"Bogota\\\"}, {\\\"ECUADOR\\\",\\\"Quito\\\"}, \\n    {\\\"GUYANA\\\",\\\"Georgetown\\\"}, {\\\"PARAGUAY\\\",\\\"Asuncion\\\"}, \\n    {\\\"PERU\\\",\\\"Lima\\\"}, {\\\"SURINAME\\\",\\\"Paramaribo\\\"}, \\n    {\\\"TRINIDAD AND TOBAGO\\\",\\\"Port of Spain\\\"}, \\n    {\\\"URUGUAY\\\",\\\"Montevideo\\\"}, {\\\"VENEZUELA\\\",\\\"Caracas\\\"},\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e49c6ebd298c4c18aa488c40acd7af6\",\n        \"type\": \"source_code\",\n        \"text\": \"private static class Entry \\n    implements Map.Entry<String,String> { \\n      int index; \\n      Entry(int index) { this.index = index; } \\n      public boolean equals(Object o) { \\n        return DATA[index][0].equals(o); \\n      }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef51ae2e9a19c465ddd157323bd6e8d8\",\n        \"type\": \"source_code\",\n        \"text\": \"public String getKey() { return DATA[index][0]; } \\n      public String getValue() { return DATA[index][1]; } \\n      public String setValue(String value) { \\n        throw new UnsupportedOperationException(); \\n      } \\n      public int hashCode() { \\n        return DATA[index][0].hashCode(); \\n      } \\n    } \\n    // Use AbstractSet by implementing size() & iterator() \\n    static class EntrySet \\n    extends AbstractSet<Map.Entry<String,String>> { \\n      private int size; \\n      EntrySet(int size) { \\n        if(size < 0) \\n          this.size = 0; \\n        // Can\\u2019t be any bigger than the array: \\n        else if(size > DATA.length) \\n          this.size = DATA.length; \\n        else \\n          this.size = size; \\n      } \\n      public int size() { return size; } \\n      private class Iter \\n      implements Iterator<Map.Entry<String,String>> { \\n        // Only one Entry object per Iterator: \\n        private Entry entry = new Entry(-1); \\n        public boolean hasNext() { \\n          return entry.index < size - 1; \\n        } \\n        public Map.Entry<String,String> next() { \\n          entry.index++; \\n          return entry; \\n        } \\n        public void remove() { \\n          throw new UnsupportedOperationException(); \\n        } \\n      } \\n      public \\n      Iterator<Map.Entry<String,String>> iterator() { \\n        return new Iter(); \\n      } \\n    } \\n    private static Set<Map.Entry<String,String>> entries = \\n      new EntrySet(DATA.length); \\n    public Set<Map.Entry<String,String>> entrySet() { \\n      return entries; \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e022767ed4753aa55241774dc7d00d67\",\n        \"type\": \"source_code\",\n        \"text\": \"return new FlyweightMap() { \\n      public Set<Map.Entry<String,String>> entrySet() { \\n        return new EntrySet(size); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d0c6a6821458a9669c546a0177baf44\",\n        \"type\": \"source_code\",\n        \"text\": \"return map; // The entire map\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"736c7a18aa96bb37a6cf3b7ef35a7c45\",\n        \"type\": \"source_code\",\n        \"text\": \"return select(size); // A partial map\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57e00dd9dc4c97dce57f29e7101e48e0\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<String>(map.keySet());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72c5316de7f42f1f111a1a14f8d22571\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ArrayList<String>(select(size).keySet());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30bdd410be2b13856917e216e9460eed\",\n        \"type\": \"source_code\",\n        \"text\": \"print(capitals(10)); \\n    print(names(10)); \\n    print(new HashMap<String,String>(capitals(3))); \\n    print(new LinkedHashMap<String,String>(capitals(3))); \\n    print(new TreeMap<String,String>(capitals(3))); \\n    print(new Hashtable<String,String>(capitals(3))); \\n    print(new HashSet<String>(names(6))); \\n    print(new LinkedHashSet<String>(names(6))); \\n    print(new TreeSet<String>(names(6))); \\n    print(new ArrayList<String>(names(6))); \\n    print(new LinkedList<String>(names(6))); \\n    print(capitals().get(\\\"BRAZIL\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc4c32d6f6574cd32cf656490f1ebac4\",\n        \"type\": \"source_code\",\n        \"text\": \"this.size = size < 0 ? 0 : size;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"643a4840224421d8b20a23143c774a0a\",\n        \"type\": \"source_code\",\n        \"text\": \"return Integer.valueOf(index);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd716836e02ffb0833fb828bcd5ff95a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(new CountingIntegerList(30));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"880c915f9b1d93ac3759466aa744e2ba\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\\" \\n    .split(\\\" \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"08e3f5dcc9f7d8394aa3ca5e11c0ba61\",\n        \"type\": \"source_code\",\n        \"text\": \"if(size < 0) this.size = 0; \\n    this.size = size;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5ba04de1336004d9200c344ad3536714\",\n        \"type\": \"source_code\",\n        \"text\": \"int index; \\n    Entry(int index) { this.index = index; } \\n    public boolean equals(Object o) { \\n      return Integer.valueOf(index).equals(o); \\n    } \\n    public Integer getKey() { return index; } \\n    public String getValue() { \\n      return \\n        chars[index % chars.length] + \\n        Integer.toString(index / chars.length); \\n    } \\n    public String setValue(String value) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8e1466e1ffeb8190a6f1c90a0c859fda\",\n        \"type\": \"source_code\",\n        \"text\": \"throw new UnsupportedOperationException(); \\n    } \\n    public int hashCode() { \\n      return Integer.valueOf(index).hashCode(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a7f7a3f636fdd91deee36bd958012122\",\n        \"type\": \"source_code\",\n        \"text\": \"// LinkedHashSet retains initialization order: \\n    Set<Map.Entry<Integer,String>> entries = \\n      new LinkedHashSet<Map.Entry<Integer,String>>(); \\n    for(int i = 0; i < size; i++) \\n      entries.add(new Entry(i)); \\n    return entries;\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4a82dab30f2a5f74b71a1d58d7b03679\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(new CountingMapData(60));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0db76dc62084cf4850777413185734f9\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<String> c = new ArrayList<String>(); \\n    c.addAll(Countries.names(6)); \\n    c.add(\\\"ten\\\"); \\n    c.add(\\\"eleven\\\"); \\n    print(c); \\n    // Make an array from the List: \\n    Object[] array = c.toArray(); \\n    // Make a String array from the List: \\n    String[] str = c.toArray(new String[0]); \\n    // Find max and min elements; this means \\n    // different things depending on the way \\n    // the Comparable interface is implemented: \\n    print(\\\"Collections.max(c) = \\\" + Collections.max(c)); \\n    print(\\\"Collections.min(c) = \\\" + Collections.min(c)); \\n    // Add a Collection to another Collection \\n    Collection<String> c2 = new ArrayList<String>(); \\n    c2.addAll(Countries.names(6)); \\n    c.addAll(c2); \\n    print(c); \\n    c.remove(Countries.DATA[0][0]); \\n    print(c); \\n    c.remove(Countries.DATA[1][0]); \\n    print(c); \\n    // Remove all components that are \\n    // in the argument collection: \\n    c.removeAll(c2); \\n    print(c); \\n    c.addAll(c2); \\n    print(c); \\n    // Is an element in this Collection? \\n    String val = Countries.DATA[3][0]; \\n    print(\\\"c.contains(\\\" + val  + \\\") = \\\" + c.contains(val)); \\n    // Is a Collection in this Collection? \\n    print(\\\"c.containsAll(c2) = \\\" + c.containsAll(c2)); \\n    Collection<String> c3 = \\n      ((List<String>)c).subList(3, 5); \\n    // Keep all the elements that are in both \\n    // c2 and c3 (an intersection of sets): \\n    c2.retainAll(c3); \\n    print(c2); \\n    // Throw away all the elements \\n    // in c2 that also appear in c3: \\n    c2.removeAll(c3); \\n    print(\\\"c2.isEmpty() = \\\" +  c2.isEmpty()); \\n    c = new ArrayList<String>(); \\n    c.addAll(Countries.names(6)); \\n    print(c); \\n    c.clear(); // Remove all elements \\n    print(\\\"after c.clear():\\\" + c);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c5e46df9bcebbdcdfed8d731eadf3091\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"--- \\\" + msg + \\\" ---\\\"); \\n    Collection<String> c = list; \\n    Collection<String> subList = list.subList(1,8); \\n    // Copy of the sublist: \\n    Collection<String> c2 = new ArrayList<String>(subList); \\n    try { c.retainAll(c2); } catch(Exception e) { \\n      System.out.println(\\\"retainAll(): \\\" + e); \\n    } \\n    try { c.removeAll(c2); } catch(Exception e) { \\n      System.out.println(\\\"removeAll(): \\\" + e); \\n    } \\n    try { c.clear(); } catch(Exception e) { \\n      System.out.println(\\\"clear(): \\\" + e); \\n    } \\n    try { c.add(\\\"X\\\"); } catch(Exception e) { \\n      System.out.println(\\\"add(): \\\" + e); \\n    } \\n    try { c.addAll(c2); } catch(Exception e) { \\n      System.out.println(\\\"addAll(): \\\" + e); \\n    } \\n    try { c.remove(\\\"C\\\"); } catch(Exception e) {\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"218d6965e080504b47c780639f6b1b97\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"remove(): \\\" + e); \\n    } \\n    // The List.set() method modifies the value but \\n    // doesn\\u2019t change the size of the data structure: \\n    try { \\n      list.set(0, \\\"X\\\"); \\n    } catch(Exception e) { \\n      System.out.println(\\\"List.set(): \\\" + e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2dee7409f670fd50ebe37d1e3fd7436e\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> list = \\n      Arrays.asList(\\\"A B C D E F G H I J K L\\\".split(\\\" \\\")); \\n    test(\\\"Modifiable Copy\\\", new ArrayList<String>(list)); \\n    test(\\\"Arrays.asList()\\\", list); \\n    test(\\\"unmodifiableList()\\\", \\n      Collections.unmodifiableList( \\n        new ArrayList<String>(list)));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eb68c3e1de0a509a94cff9edb0f51719\",\n        \"type\": \"source_code\",\n        \"text\": \"a.add(1, \\\"x\\\"); // Add at location 1 \\n    a.add(\\\"x\\\"); // Add at end \\n    // Add a collection: \\n    a.addAll(Countries.names(25)); \\n    // Add a collection starting at location 3: \\n    a.addAll(3, Countries.names(25)); \\n    b = a.contains(\\\"1\\\"); // Is it in there? \\n    // Is the entire collection in there? \\n    b = a.containsAll(Countries.names(25)); \\n    // Lists allow random access, which is cheap \\n    // for ArrayList, expensive for LinkedList: \\n    s = a.get(1); // Get (typed) object at location 1 \\n    i = a.indexOf(\\\"1\\\"); // Tell index of object \\n    b = a.isEmpty(); // Any elements inside? \\n    it = a.iterator(); // Ordinary Iterator \\n    lit = a.listIterator(); // ListIterator \\n    lit = a.listIterator(3); // Start at loc 3 \\n    i = a.lastIndexOf(\\\"1\\\"); // Last match \\n    a.remove(1); // Remove location 1 \\n    a.remove(\\\"3\\\"); // Remove this object \\n    a.set(1, \\\"y\\\"); // Set location 1 to \\\"y\\\" \\n    // Keep everything that\\u2019s in the argument \\n    // (the intersection of the two sets): \\n    a.retainAll(Countries.names(25)); \\n    // Remove everything that\\u2019s in the argument: \\n    a.removeAll(Countries.names(25)); \\n    i = a.size(); // How big is it? \\n    a.clear(); // Remove all elements\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d577893ba2c9f7b6fa58f6c339cd4804\",\n        \"type\": \"source_code\",\n        \"text\": \"ListIterator<String> it = a.listIterator(); \\n    b = it.hasNext(); \\n    b = it.hasPrevious(); \\n    s = it.next(); \\n    i = it.nextIndex(); \\n    s = it.previous();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"797692d8f233b49a072c097bf7d44979\",\n        \"type\": \"source_code\",\n        \"text\": \"i = it.previousIndex();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d56141e52a02c29c552d6cfc75c6a697\",\n        \"type\": \"source_code\",\n        \"text\": \"ListIterator<String> it = a.listIterator(); \\n    it.add(\\\"47\\\"); \\n    // Must move to an element after add(): \\n    it.next(); \\n    // Remove the element after the newly produced one: \\n    it.remove(); \\n    // Must move to an element after remove(): \\n    it.next(); \\n    // Change the element after the deleted one: \\n    it.set(\\\"47\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ea2cf8ae3c704cc5f70b52cbf54680a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(a); \\n    List<String> b = Countries.names(25); \\n    print(\\\"b = \\\" + b); \\n    a.addAll(b); \\n    a.addAll(b); \\n    print(a); \\n    // Insert, remove, and replace elements \\n    // using a ListIterator: \\n    ListIterator<String> x = a.listIterator(a.size()/2); \\n    x.add(\\\"one\\\"); \\n    print(a); \\n    print(x.next()); \\n    x.remove(); \\n    print(x.next()); \\n    x.set(\\\"47\\\"); \\n    print(a); \\n    // Traverse the list backwards: \\n    x = a.listIterator(a.size()); \\n    while(x.hasPrevious()) \\n      printnb(x.previous() + \\\" \\\"); \\n    print(); \\n    print(\\\"testVisual finished\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ff4e6f2403af80f791366675a8fa2a5\",\n        \"type\": \"source_code\",\n        \"text\": \"LinkedList<String> ll = new LinkedList<String>(); \\n    ll.addAll(Countries.names(25)); \\n    print(ll); \\n    // Treat it like a stack, pushing: \\n    ll.addFirst(\\\"one\\\"); \\n    ll.addFirst(\\\"two\\\"); \\n    print(ll); \\n    // Like \\\"peeking\\\" at the top of a stack: \\n    print(ll.getFirst()); \\n    // Like popping a stack: \\n    print(ll.removeFirst()); \\n    print(ll.removeFirst()); \\n    // Treat it like a queue, pulling elements \\n    // off the tail end: \\n    print(ll.removeLast()); \\n    print(ll);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"763d3028a0e1ba325804ced3e754c0c9\",\n        \"type\": \"source_code\",\n        \"text\": \"// Make and fill a new list each time: \\n    basicTest( \\n      new LinkedList<String>(Countries.names(25))); \\n    basicTest( \\n      new ArrayList<String>(Countries.names(25)));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09d1b38460c846ceaeb2aaa4cb45079c\",\n        \"type\": \"source_code\",\n        \"text\": \"iterMotion( \\n      new LinkedList<String>(Countries.names(25))); \\n    iterMotion( \\n      new ArrayList<String>(Countries.names(25))); \\n    iterManipulation( \\n      new LinkedList<String>(Countries.names(25))); \\n    iterManipulation( \\n      new ArrayList<String>(Countries.names(25))); \\n    testVisual( \\n      new LinkedList<String>(Countries.names(25))); \\n    testLinkedList();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c66fa158b1cb945b9d12e892714d4263\",\n        \"type\": \"source_code\",\n        \"text\": \"return o instanceof SetType && (i == ((SetType)o).i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b385b0e35b43e2f14e7d52b226421675\",\n        \"type\": \"source_code\",\n        \"text\": \"return (arg.i < i ? -1 : (arg.i == i ? 0 : 1));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"844bd85b8f99274109864145930e21bb\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      for(int i = 0; i < 10; i++) \\n          set.add( \\n            type.getConstructor(int.class).newInstance(i)); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    } \\n    return set;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b82739bab7dc180efe5c320031ae2fa\",\n        \"type\": \"source_code\",\n        \"text\": \"fill(set, type); \\n    fill(set, type); // Try to add duplicates \\n    fill(set, type); \\n    System.out.println(set);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21870b0179ebe86ec14704bde6d20c3e\",\n        \"type\": \"source_code\",\n        \"text\": \"test(new HashSet<HashType>(), HashType.class); \\n    test(new LinkedHashSet<HashType>(), HashType.class); \\n    test(new TreeSet<TreeType>(), TreeType.class); \\n    // Things that don\\u2019t work: \\n    test(new HashSet<SetType>(), SetType.class); \\n    test(new HashSet<TreeType>(), TreeType.class); \\n    test(new LinkedHashSet<SetType>(), SetType.class); \\n    test(new LinkedHashSet<TreeType>(), TreeType.class); \\n    try { \\n      test(new TreeSet<SetType>(), SetType.class); \\n    } catch(Exception e) { \\n      System.out.println(e.getMessage()); \\n    } \\n    try { \\n      test(new TreeSet<HashType>(), HashType.class); \\n    } catch(Exception e) { \\n      System.out.println(e.getMessage()); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e00f3743cfbe001089d487bb14fea257\",\n        \"type\": \"source_code\",\n        \"text\": \"SortedSet<String> sortedSet = new TreeSet<String>(); \\n    Collections.addAll(sortedSet, \\n      \\\"one two three four five six seven eight\\\" \\n        .split(\\\" \\\")); \\n    print(sortedSet); \\n    String low = sortedSet.first(); \\n    String high = sortedSet.last(); \\n    print(low); \\n    print(high); \\n    Iterator<String> it = sortedSet.iterator(); \\n    for(int i = 0; i <= 6; i++) { \\n      if(i == 3) low = it.next(); \\n      if(i == 6) high = it.next(); \\n      else it.next(); \\n    } \\n    print(low); \\n    print(high); \\n    print(sortedSet.subSet(low, high)); \\n    print(sortedSet.headSet(high)); \\n    print(sortedSet.tailSet(low));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1bca6bbc7dd2ec6933cccaa8577d39a0\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < count; i++) \\n      queue.offer(gen.next()); \\n    while(queue.peek() != null) \\n      System.out.print(queue.remove() + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6cb32bd5b12ad586a0028e2e904c2f46\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] s = (\\\"one two three four five six seven \\\" + \\n      \\\"eight nine ten\\\").split(\\\" \\\"); \\n    int i; \\n    public String next() { return s[i++]; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ab6e13230490617bcab82bc86994f94\",\n        \"type\": \"source_code\",\n        \"text\": \"test(new LinkedList<String>(), new Gen()); \\n    test(new PriorityQueue<String>(), new Gen()); \\n    test(new ArrayBlockingQueue<String>(count), new Gen()); \\n    test(new ConcurrentLinkedQueue<String>(), new Gen()); \\n    test(new LinkedBlockingQueue<String>(), new Gen()); \\n    test(new PriorityBlockingQueue<String>(), new Gen());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"22db6c6efe6f6a3ae0812e5c05428abd\",\n        \"type\": \"source_code\",\n        \"text\": \"private char primary; \\n    private int secondary; \\n    private String item; \\n    public ToDoItem(String td, char pri, int sec) { \\n      primary = pri; \\n      secondary = sec; \\n      item = td; \\n    } \\n    public int compareTo(ToDoItem arg) { \\n      if(primary > arg.primary) \\n        return +1; \\n      if(primary == arg.primary) \\n        if(secondary > arg.secondary) \\n          return +1; \\n        else if(secondary == arg.secondary) \\n          return 0; \\n      return -1; \\n    } \\n    public String toString() { \\n      return Character.toString(primary) + \\n        secondary + \\\": \\\" + item; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b48a37a5a1455e2b383712aa5084deb\",\n        \"type\": \"source_code\",\n        \"text\": \"super.add(new ToDoItem(td, pri, sec));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f4b00bbfe00ee6296725a786932a0af\",\n        \"type\": \"source_code\",\n        \"text\": \"ToDoList toDoList = new ToDoList(); \\n    toDoList.add(\\\"Empty trash\\\", \\u2018C\\u2019, 4); \\n    toDoList.add(\\\"Feed dog\\\", \\u2018A\\u2019, 2); \\n    toDoList.add(\\\"Feed bird\\\", \\u2018B\\u2019, 7); \\n    toDoList.add(\\\"Mow lawn\\\", \\u2018C\\u2019, 3); \\n    toDoList.add(\\\"Water lawn\\\", \\u2018A\\u2019, 1); \\n    toDoList.add(\\\"Feed cat\\\", \\u2018B\\u2019, 1); \\n    while(!toDoList.isEmpty()) \\n      System.out.println(toDoList.remove());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f655c3e07df96bad0d27ef7aa741bf61\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 20; i < 27; i++) \\n      deque.addFirst(i); \\n    for(int i = 50; i < 55; i++) \\n      deque.addLast(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea90b9de1c1da57fc453d03c5a7c744b\",\n        \"type\": \"source_code\",\n        \"text\": \"Deque<Integer> di = new Deque<Integer>(); \\n    fillTest(di); \\n    print(di); \\n    while(di.size() != 0) \\n      printnb(di.removeFirst() + \\\" \\\"); \\n    print(); \\n    fillTest(di); \\n    while(di.size() != 0) \\n      printnb(di.removeLast() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39c3813581e7030ea63a0fec59e05d72\",\n        \"type\": \"source_code\",\n        \"text\": \"pairs = new Object[length][2];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbcec9454f6ca6a160dc6870ce539013\",\n        \"type\": \"source_code\",\n        \"text\": \"if(index >= pairs.length) \\n      throw new ArrayIndexOutOfBoundsException(); \\n    pairs[index++] = new Object[]{ key, value };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"50c18e92d9758103f678d6d69a19fef1\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < index; i++) \\n      if(key.equals(pairs[i][0])) \\n        return (V)pairs[i][1]; \\n    return null; // Did not find key\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa2b118d4489b66ba4c2cbd1db9e50e3\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(); \\n    for(int i = 0; i < index; i++) { \\n      result.append(pairs[i][0].toString()); \\n      result.append(\\\" : \\\"); \\n      result.append(pairs[i][1].toString()); \\n      if(i < index - 1) \\n        result.append(\\\"\\\\n\\\"); \\n    } \\n    return result.toString();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7d4a3517c4dffac946bed0e68bdea0b\",\n        \"type\": \"source_code\",\n        \"text\": \"AssociativeArray<String,String> map = \\n      new AssociativeArray<String,String>(6); \\n    map.put(\\\"sky\\\", \\\"blue\\\"); \\n    map.put(\\\"grass\\\", \\\"green\\\"); \\n    map.put(\\\"ocean\\\", \\\"dancing\\\"); \\n    map.put(\\\"tree\\\", \\\"tall\\\"); \\n    map.put(\\\"earth\\\", \\\"brown\\\"); \\n    map.put(\\\"sun\\\", \\\"warm\\\"); \\n    try { \\n      map.put(\\\"extra\\\", \\\"object\\\"); // Past the end\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"813a67b391bd592e8b26d767d0bd58c3\",\n        \"type\": \"source_code\",\n        \"text\": \"} catch(ArrayIndexOutOfBoundsException e) { \\n      print(\\\"Too many objects!\\\"); \\n    } \\n    print(map); \\n    print(map.get(\\\"ocean\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"71ff1b3dc66a32fd41f9afafa5136277\",\n        \"type\": \"source_code\",\n        \"text\": \"printnb(\\\"Size = \\\" + map.size() + \\\", \\\"); \\n    printnb(\\\"Keys: \\\"); \\n    print(map.keySet()); // Produce a Set of the keys\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"393e5183ab65399c406413d083dbc4e9\",\n        \"type\": \"source_code\",\n        \"text\": \"print(map.getClass().getSimpleName()); \\n    map.putAll(new CountingMapData(25)); \\n    // Map has \\u2018Set\\u2019 behavior for keys: \\n    map.putAll(new CountingMapData(25)); \\n    printKeys(map); \\n    // Producing a Collection of the values: \\n    printnb(\\\"Values: \\\"); \\n    print(map.values()); \\n    print(map); \\n    print(\\\"map.containsKey(11): \\\" + map.containsKey(11)); \\n    print(\\\"map.get(11): \\\" + map.get(11)); \\n    print(\\\"map.containsValue(\\\\\\\"F0\\\\\\\"): \\\" \\n      + map.containsValue(\\\"F0\\\")); \\n    Integer key = map.keySet().iterator().next(); \\n    print(\\\"First key in map: \\\" + key); \\n    map.remove(key); \\n    printKeys(map); \\n    map.clear(); \\n    print(\\\"map.isEmpty(): \\\" + map.isEmpty()); \\n    map.putAll(new CountingMapData(25)); \\n    // Operations on the Set change the Map: \\n    map.keySet().removeAll(map.keySet()); \\n    print(\\\"map.isEmpty(): \\\" + map.isEmpty());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c12ac9ba7300c8099c81abff891eafb2\",\n        \"type\": \"source_code\",\n        \"text\": \"test(new HashMap<Integer,String>()); \\n    test(new TreeMap<Integer,String>()); \\n    test(new LinkedHashMap<Integer,String>()); \\n    test(new IdentityHashMap<Integer,String>()); \\n    test(new ConcurrentHashMap<Integer,String>()); \\n    test(new WeakHashMap<Integer,String>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c3e8b51582b4ba1751abd29c392fb5f8\",\n        \"type\": \"source_code\",\n        \"text\": \"TreeMap<Integer,String> sortedMap = \\n      new TreeMap<Integer,String>(new CountingMapData(10)); \\n    print(sortedMap); \\n    Integer low = sortedMap.firstKey(); \\n    Integer high = sortedMap.lastKey(); \\n    print(low); \\n    print(high); \\n    Iterator<Integer> it = sortedMap.keySet().iterator(); \\n    for(int i = 0; i <= 6; i++) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42def59c1845b73d012b323a7e17d52b\",\n        \"type\": \"source_code\",\n        \"text\": \"if(i == 3) low = it.next(); \\n      if(i == 6) high = it.next(); \\n      else it.next(); \\n    } \\n    print(low); \\n    print(high); \\n    print(sortedMap.subMap(low, high)); \\n    print(sortedMap.headMap(high)); \\n    print(sortedMap.tailMap(low));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8bb4b7f52fefc8edd8a925ac64797afc\",\n        \"type\": \"source_code\",\n        \"text\": \"LinkedHashMap<Integer,String> linkedMap = \\n      new LinkedHashMap<Integer,String>( \\n        new CountingMapData(9)); \\n    print(linkedMap); \\n    // Least-recently-used order: \\n    linkedMap = \\n      new LinkedHashMap<Integer,String>(16, 0.75f, true); \\n    linkedMap.putAll(new CountingMapData(9)); \\n    print(linkedMap); \\n    for(int i = 0; i < 6; i++) // Cause accesses: \\n      linkedMap.get(i); \\n    print(linkedMap); \\n    linkedMap.get(0); \\n    print(linkedMap);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f745c80e630bf7c2343655f4e9f6a9a7\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Groundhog #\\\" + number;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d70f48290e4ea7da98639fb0fc2082e\",\n        \"type\": \"source_code\",\n        \"text\": \"if(shadow) \\n      return \\\"Six more weeks of Winter!\\\"; \\n    else \\n      return \\\"Early Spring!\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70d9ac3d580a87047c45f9cf89f612a1\",\n        \"type\": \"source_code\",\n        \"text\": \"Constructor<T> ghog = type.getConstructor(int.class); \\n    Map<Groundhog,Prediction> map = \\n      new HashMap<Groundhog,Prediction>(); \\n    for(int i = 0; i < 10; i++) \\n      map.put(ghog.newInstance(i), new Prediction()); \\n    print(\\\"map = \\\" + map); \\n    Groundhog gh = ghog.newInstance(3); \\n    print(\\\"Looking up prediction for \\\" + gh); \\n    if(map.containsKey(gh)) \\n      print(map.get(gh)); \\n    else \\n      print(\\\"Key not found: \\\" + gh);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd27e1c6de4e732cbba49a2e186d13c9\",\n        \"type\": \"source_code\",\n        \"text\": \"detectSpring(Groundhog.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48dc156ce584efb718e9f76a21f3a6af\",\n        \"type\": \"source_code\",\n        \"text\": \"return o instanceof Groundhog2 && \\n      (number == ((Groundhog2)o).number);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b9b9402233e5d123d7757c32a9203aeb\",\n        \"type\": \"source_code\",\n        \"text\": \"SpringDetector.detectSpring(Groundhog2.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"82bce6dd11bc644630f0b05f30e58702\",\n        \"type\": \"source_code\",\n        \"text\": \"V oldValue = get(key); // The old value or null \\n    if(!keys.contains(key)) { \\n      keys.add(key); \\n      values.add(value); \\n    } else \\n      values.set(keys.indexOf(key), value); \\n    return oldValue;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed0800f105b3073e83cb29bdf57525f5\",\n        \"type\": \"source_code\",\n        \"text\": \"if(!keys.contains(key)) \\n      return null; \\n    return values.get(keys.indexOf(key));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a14cd98f69e1509a4fe653e7c095723\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<Map.Entry<K,V>> set= new HashSet<Map.Entry<K,V>>(); \\n    Iterator<K> ki = keys.iterator(); \\n    Iterator<V> vi = values.iterator(); \\n    while(ki.hasNext()) \\n      set.add(new MapEntry<K,V>(ki.next(), vi.next())); \\n    return set;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94e043cbd61a3824e2bee2690b8be3b3\",\n        \"type\": \"source_code\",\n        \"text\": \"SlowMap<String,String> m= new SlowMap<String,String>(); \\n    m.putAll(Countries.capitals(15)); \\n    System.out.println(m); \\n    System.out.println(m.get(\\\"BULGARIA\\\")); \\n    System.out.println(m.entrySet());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"91cd5d8d0e7ac6c66ba5452f2f74de23\",\n        \"type\": \"source_code\",\n        \"text\": \"this.key = key; \\n    this.value = value;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d21f0b8abf68a6b226ae4fd6a7ffcb99\",\n        \"type\": \"source_code\",\n        \"text\": \"V result = value; \\n    value = v; \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d16406343275e1ba353de13275ab9f33\",\n        \"type\": \"source_code\",\n        \"text\": \"return (key==null ? 0 : key.hashCode()) ^ \\n      (value==null ? 0 : value.hashCode());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97f4cb8cbfac10d1e23382a76a190958\",\n        \"type\": \"source_code\",\n        \"text\": \"if(!(o instanceof MapEntry)) return false; \\n    MapEntry me = (MapEntry)o; \\n    return \\n      (key == null ? \\n       me.getKey() == null : key.equals(me.getKey())) && \\n      (value == null ? \\n       me.getValue()== null : value.equals(me.getValue()));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3aaaf2978a91ff9fec7ab1f8cf0faa35\",\n        \"type\": \"source_code\",\n        \"text\": \"new LinkedList[SIZE];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c2e1e8e71faece2995a6b38f865865a5\",\n        \"type\": \"source_code\",\n        \"text\": \"V oldValue = null; \\n    int index = Math.abs(key.hashCode()) % SIZE; \\n    if(buckets[index] == null) \\n      buckets[index] = new LinkedList<MapEntry<K,V>>(); \\n    LinkedList<MapEntry<K,V>> bucket = buckets[index]; \\n    MapEntry<K,V> pair = new MapEntry<K,V>(key, value); \\n    boolean found = false; \\n    ListIterator<MapEntry<K,V>> it = bucket.listIterator(); \\n    while(it.hasNext()) { \\n      MapEntry<K,V> iPair = it.next(); \\n      if(iPair.getKey().equals(key)) { \\n        oldValue = iPair.getValue(); \\n        it.set(pair); // Replace old with new \\n        found = true; \\n        break; \\n      } \\n    } \\n    if(!found) \\n      buckets[index].add(pair); \\n    return oldValue;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea89f1fae9d99723a126424cd025374a\",\n        \"type\": \"source_code\",\n        \"text\": \"int index = Math.abs(key.hashCode()) % SIZE; \\n    if(buckets[index] == null) return null; \\n    for(MapEntry<K,V> iPair : buckets[index]) \\n      if(iPair.getKey().equals(key)) \\n        return iPair.getValue(); \\n    return null;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4482ec6d83bc9d13c2f21d0d12bbffa5\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<Map.Entry<K,V>> set= new HashSet<Map.Entry<K,V>>(); \\n    for(LinkedList<MapEntry<K,V>> bucket : buckets) { \\n      if(bucket == null) continue; \\n      for(MapEntry<K,V> mpair : bucket) \\n        set.add(mpair); \\n    } \\n    return set;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c85d2c62919ffdbb47b96fc3a7cff5f1\",\n        \"type\": \"source_code\",\n        \"text\": \"SimpleHashMap<String,String> m = \\n      new SimpleHashMap<String,String>(); \\n    m.putAll(Countries.capitals(25)); \\n    System.out.println(m); \\n    System.out.println(m.get(\\\"ERITREA\\\")); \\n    System.out.println(m.entrySet());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5135719dfffe93562650f035801fa625\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] hellos = \\\"Hello Hello\\\".split(\\\" \\\"); \\n    System.out.println(hellos[0].hashCode()); \\n    System.out.println(hellos[1].hashCode());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e23fc8ce8a3b9ea97030a7f9d383a795\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<String>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f1ca858405b8dbc48ae0c551d98431ab\",\n        \"type\": \"source_code\",\n        \"text\": \"s = str; \\n    created.add(s); \\n    // id is the total number of instances \\n    // of this string in use by CountedString: \\n    for(String s2 : created) \\n      if(s2.equals(s)) \\n        id++;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"207b0af7bd5e1cb3a691a82d2dba6030\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"String: \\\" + s + \\\" id: \\\" + id + \\n      \\\" hashCode(): \\\" + hashCode();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"685c75ddedb1a8f450b49831ba6cd8d3\",\n        \"type\": \"source_code\",\n        \"text\": \"// The very simple approach: \\n    // return s.hashCode() * id; \\n    // Using Joshua Bloch\\u2019s recipe: \\n    int result = 17; \\n    result = 37 * result + s.hashCode(); \\n    result = 37 * result + id; \\n    return result;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3119b38a6f774d1f2599ccba82b169ef\",\n        \"type\": \"source_code\",\n        \"text\": \"return o instanceof CountedString && \\n      s.equals(((CountedString)o).s) && \\n      id == ((CountedString)o).id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2449fc07afbbc34709fdcebdf8a955a1\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<CountedString,Integer> map = \\n      new HashMap<CountedString,Integer>(); \\n    CountedString[] cs = new CountedString[5]; \\n    for(int i = 0; i < cs.length; i++) { \\n      cs[i] = new CountedString(\\\"hi\\\"); \\n      map.put(cs[i], i); // Autobox int -> Integer \\n    } \\n    print(map); \\n    for(CountedString cstring : cs) { \\n      print(\\\"Looking up \\\" + cstring); \\n      print(map.get(cstring)); \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d037c1baeebfcd0f6d6eb1ccdc5a3d2b\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName() + \\n      (name == null ? \\\"\\\" : \\\" \\\" + name);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"978ec0fb2019d4f3747088445ab51af2\",\n        \"type\": \"source_code\",\n        \"text\": \"return o instanceof Individual && \\n      id == ((Individual)o).id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed1702550ca7a737b77032a4a15e5f4f\",\n        \"type\": \"source_code\",\n        \"text\": \"int result = 17; \\n    if(name != null) \\n      result = 37 * result + name.hashCode(); \\n    result = 37 * result + (int)id; \\n    return result;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d290277bb3d43a6eb72764d4f911f27\",\n        \"type\": \"source_code\",\n        \"text\": \"// Compare by class name first: \\n    String first = getClass().getSimpleName(); \\n    String argFirst = arg.getClass().getSimpleName(); \\n    int firstCompare = first.compareTo(argFirst); \\n    if(firstCompare != 0) \\n    return firstCompare; \\n    if(name != null && arg.name != null) { \\n      int secondCompare = name.compareTo(arg.name); \\n      if(secondCompare != 0) \\n        return secondCompare; \\n    } \\n    return (arg.id < id ? -1 : (arg.id == id ? 0 : 1));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d8df477ee2260f7b860b05cdf170f29\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<Individual> pets = new TreeSet<Individual>(); \\n    for(List<? extends Pet> lp : \\n        MapOfList.petPeople.values()) \\n      for(Pet p : lp) \\n        pets.add(p); \\n    System.out.println(pets);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c4ca82e8f2b48a163a3ea777dcb6413a\",\n        \"type\": \"source_code\",\n        \"text\": \"this.size = size; \\n    this.loops = loops;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"79dca8093070a179661606a8854cf766\",\n        \"type\": \"source_code\",\n        \"text\": \"int size = values.length/2; \\n    TestParam[] result = new TestParam[size]; \\n    int n = 0; \\n    for(int i = 0; i < size; i++) \\n      result[i] = new TestParam(values[n++], values[n++]); \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cabeb40999c55b08d0660b1cd969cd23\",\n        \"type\": \"source_code\",\n        \"text\": \"int[] vals = new int[values.length]; \\n    for(int i = 0; i < vals.length; i++) \\n      vals[i] = Integer.decode(values[i]); \\n    return array(vals);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2b9440269fbb497b61e73b883f42afb\",\n        \"type\": \"source_code\",\n        \"text\": \"10, 5000, 100, 5000, 1000, 5000, 10000, 500);\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f1994edd7612af10d96252c836450fb\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"%\\\" + fieldWidth + \\\"s\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c0e4d7d09d40a8ce7a3f7d58dbd5257f\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"%\\\" + fieldWidth + \\\"d\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37912687dee4db62880a92271956c78c\",\n        \"type\": \"source_code\",\n        \"text\": \"this.container = container; \\n    this.tests = tests; \\n    if(container != null) \\n      headline = container.getClass().getSimpleName();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6633edd6de66414ae297505ecfe9c392\",\n        \"type\": \"source_code\",\n        \"text\": \"TestParam[] paramList) { \\n    this(container, tests); \\n    this.paramList = paramList;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b27629c138d9d8ff5d8b255f402fb34\",\n        \"type\": \"source_code\",\n        \"text\": \"headline = newHeadline;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"486868ca5f5a2b19a6a500617efe1748\",\n        \"type\": \"source_code\",\n        \"text\": \"new Tester<C>(cntnr, tests).timedTest();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2b09e54ab1cfe6b5c30bf2582cdde9c\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Test<C>> tests, TestParam[] paramList) { \\n    new Tester<C>(cntnr, tests, paramList).timedTest();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"79690c9c713ece47700716a891b99d0c\",\n        \"type\": \"source_code\",\n        \"text\": \"// Calculate width and pad with \\u2018-\\u2019: \\n    int width = fieldWidth * tests.size() + sizeWidth; \\n    int dashLength = width - headline.length() - 1; \\n    StringBuilder head = new StringBuilder(width); \\n    for(int i = 0; i < dashLength/2; i++) \\n      head.append(\\u2018-\\u2019); \\n    head.append(\\u2018 \\u2018); \\n    head.append(headline); \\n    head.append(\\u2018 \\u2018); \\n    for(int i = 0; i < dashLength/2; i++) \\n      head.append(\\u2018-\\u2019); \\n    System.out.println(head); \\n    // Print column headers: \\n    System.out.format(sizeField, \\\"size\\\"); \\n    for(Test test : tests) \\n      System.out.format(stringField(), test.name); \\n    System.out.println();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e437e999e5655f06d298b7f2c5c99cd\",\n        \"type\": \"source_code\",\n        \"text\": \"displayHeader(); \\n    for(TestParam param : paramList) { \\n      System.out.format(sizeField, param.size); \\n      for(Test<C> test : tests) { \\n        C kontainer = initialize(param.size); \\n        long start = System.nanoTime(); \\n        // Call the overriden method: \\n        int reps = test.test(kontainer, param); \\n        long duration = System.nanoTime() - start; \\n        long timePerRep = duration / reps; // Nanoseconds \\n        System.out.format(numberField(), timePerRep); \\n      } \\n      System.out.println(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab917b01744b29b9f0ea1f040a865e5e\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Test<List<Integer>>>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6e4011c166e5095af8eec91bf26b15d8\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Test<LinkedList<Integer>>>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4980ba18962a3d18e94e8f9fcbb1bfc3\",\n        \"type\": \"source_code\",\n        \"text\": \"tests.add(new Test<List<Integer>>(\\\"add\\\") { \\n      int test(List<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        int listSize = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          list.clear(); \\n          for(int j = 0; j < listSize; j++) \\n            list.add(j); \\n        } \\n        return loops * listSize; \\n      } \\n    }); \\n    tests.add(new Test<List<Integer>>(\\\"get\\\") { \\n      int test(List<Integer> list, TestParam tp) { \\n        int loops = tp.loops * reps; \\n        int listSize = list.size(); \\n        for(int i = 0; i < loops; i++) \\n          list.get(rand.nextInt(listSize)); \\n        return loops; \\n      } \\n    }); \\n    tests.add(new Test<List<Integer>>(\\\"set\\\") {\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"957b429c56aab93f0fda747bc44a0d83\",\n        \"type\": \"source_code\",\n        \"text\": \"int test(List<Integer> list, TestParam tp) { \\n        int loops = tp.loops * reps; \\n        int listSize = list.size(); \\n        for(int i = 0; i < loops; i++) \\n          list.set(rand.nextInt(listSize), 47); \\n        return loops; \\n      } \\n    }); \\n    tests.add(new Test<List<Integer>>(\\\"iteradd\\\") { \\n      int test(List<Integer> list, TestParam tp) { \\n        final int LOOPS = 1000000; \\n        int half = list.size() / 2; \\n        ListIterator<Integer> it = list.listIterator(half); \\n        for(int i = 0; i < LOOPS; i++) \\n          it.add(47); \\n        return LOOPS; \\n      } \\n    }); \\n    tests.add(new Test<List<Integer>>(\\\"insert\\\") { \\n      int test(List<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        for(int i = 0; i < loops; i++) \\n          list.add(5, 47); // Minimize random-access cost \\n        return loops; \\n      } \\n    }); \\n    tests.add(new Test<List<Integer>>(\\\"remove\\\") { \\n      int test(List<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          list.clear(); \\n          list.addAll(new CountingIntegerList(size)); \\n          while(list.size() > 5) \\n            list.remove(5); // Minimize random-access cost \\n        } \\n        return loops * size; \\n      } \\n    }); \\n    // Tests for queue behavior: \\n    qTests.add(new Test<LinkedList<Integer>>(\\\"addFirst\\\") { \\n      int test(LinkedList<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          list.clear(); \\n          for(int j = 0; j < size; j++) \\n            list.addFirst(47); \\n        } \\n        return loops * size; \\n      } \\n    }); \\n    qTests.add(new Test<LinkedList<Integer>>(\\\"addLast\\\") { \\n      int test(LinkedList<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          list.clear(); \\n          for(int j = 0; j < size; j++) \\n            list.addLast(47); \\n        } \\n        return loops * size; \\n      }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5208a8a6a13cf6ef116c00343e7ff86\",\n        \"type\": \"source_code\",\n        \"text\": \"}); \\n    qTests.add( \\n      new Test<LinkedList<Integer>>(\\\"rmFirst\\\") { \\n        int test(LinkedList<Integer> list, TestParam tp) { \\n          int loops = tp.loops; \\n          int size = tp.size; \\n          for(int i = 0; i < loops; i++) { \\n            list.clear(); \\n            list.addAll(new CountingIntegerList(size)); \\n            while(list.size() > 0) \\n              list.removeFirst(); \\n          } \\n          return loops * size; \\n        } \\n      }); \\n    qTests.add(new Test<LinkedList<Integer>>(\\\"rmLast\\\") { \\n      int test(LinkedList<Integer> list, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          list.clear(); \\n          list.addAll(new CountingIntegerList(size)); \\n          while(list.size() > 0) \\n            list.removeLast(); \\n        } \\n        return loops * size; \\n      } \\n    });\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f13b59f44e13f8285e339d0308057d6b\",\n        \"type\": \"source_code\",\n        \"text\": \"public ListTester(List<Integer> container, \\n        List<Test<List<Integer>>> tests) { \\n      super(container, tests); \\n    } \\n    // Fill to the appropriate size before each test: \\n    @Override protected List<Integer> initialize(int size){ \\n      container.clear(); \\n      container.addAll(new CountingIntegerList(size)); \\n      return container; \\n    } \\n    // Convenience method: \\n    public static void run(List<Integer> list, \\n        List<Test<List<Integer>>> tests) { \\n      new ListTester(list, tests).timedTest(); \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a8cfa70c9239fdf5a91d457bf1938fa\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) \\n      Tester.defaultParams = TestParam.array(args); \\n    // Can only do these two tests on an array: \\n    Tester<List<Integer>> arrayTest = \\n      new Tester<List<Integer>>(null, tests.subList(1, 3)){ \\n        // This will be called before each test. It \\n        // produces a non-resizeable array-backed list: \\n        @Override protected \\n        List<Integer> initialize(int size) { \\n          Integer[] ia = Generated.array(Integer.class, \\n            new CountingGenerator.Integer(), size); \\n          return Arrays.asList(ia); \\n        } \\n      }; \\n    arrayTest.setHeadline(\\\"Array as List\\\"); \\n    arrayTest.timedTest();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d9b1e19371b2a4fc0af9262671e4b964\",\n        \"type\": \"source_code\",\n        \"text\": \"Tester.defaultParams= TestParam.array( \\n      10, 5000, 100, 5000, 1000, 1000, 10000, 200); \\n    if(args.length > 0) \\n      Tester.defaultParams = TestParam.array(args); \\n    ListTester.run(new ArrayList<Integer>(), tests); \\n    ListTester.run(new LinkedList<Integer>(), tests); \\n    ListTester.run(new Vector<Integer>(), tests); \\n    Tester.fieldWidth = 12; \\n    Tester<LinkedList<Integer>> qTest = \\n      new Tester<LinkedList<Integer>>( \\n        new LinkedList<Integer>(), qTests); \\n    qTest.setHeadline(\\\"Queue tests\\\"); \\n    qTest.timedTest();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"955fd07cb38c0ca8e60509d1683f7c1b\",\n        \"type\": \"source_code\",\n        \"text\": \"get     set\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d20f962a7c5ab6b42cedf306a6b8d09\",\n        \"type\": \"source_code\",\n        \"text\": \"130     183\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87970eab36493a9bf821d3dbdd34ff79\",\n        \"type\": \"source_code\",\n        \"text\": \"130     164\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d4e887aea60f8cef0cd0f5ceb880b0b3\",\n        \"type\": \"source_code\",\n        \"text\": \"129     165\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d4e887aea60f8cef0cd0f5ceb880b0b3\",\n        \"type\": \"source_code\",\n        \"text\": \"129     165\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a229613be91397777994c7c6f7d831d7\",\n        \"type\": \"source_code\",\n        \"text\": \"add     get     set iteradd  insert  remove\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd6e376573b5bf21764f1aec0577fc53\",\n        \"type\": \"source_code\",\n        \"text\": \"121     139     191     435    3952     446\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3a5cf766b9e7cc3d2784d2c5532ec723\",\n        \"type\": \"source_code\",\n        \"text\": \"72     141     191     247    3934     296\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c50f29bad14a1e330025dccbbcfe9b8d\",\n        \"type\": \"source_code\",\n        \"text\": \"98     141     194     839    2202     923\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8afb5ff44a3ded708f15373424426ca5\",\n        \"type\": \"source_code\",\n        \"text\": \"122     144     190    6880   14042    7333\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a229613be91397777994c7c6f7d831d7\",\n        \"type\": \"source_code\",\n        \"text\": \"add     get     set iteradd  insert  remove\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0bd04c89dfeb4243393a7da504025e0b\",\n        \"type\": \"source_code\",\n        \"text\": \"182     164     198     658     366     262\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1ba9838f6eb29b6e4f83c180ad39d99\",\n        \"type\": \"source_code\",\n        \"text\": \"106     202     230     457     108     201\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbdbe9d71b5143453de0bd7473aa2658\",\n        \"type\": \"source_code\",\n        \"text\": \"133    1289    1353     430     136     239\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"314db793e9a9ff42f3d5aa717692cedc\",\n        \"type\": \"source_code\",\n        \"text\": \"172   13648   13187     435     255     239\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a229613be91397777994c7c6f7d831d7\",\n        \"type\": \"source_code\",\n        \"text\": \"add     get     set iteradd  insert  remove\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ac31c9584c695ddaa995db0fe79034f\",\n        \"type\": \"source_code\",\n        \"text\": \"129     145     187     290    3635     253\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"387194c54cd62c3eb9ab77461435bcaf\",\n        \"type\": \"source_code\",\n        \"text\": \"72     144     190     263    3691     292\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1a1ffbb73b5b5502a467892c03484734\",\n        \"type\": \"source_code\",\n        \"text\": \"99     145     193     846    2162     927\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bed4d2ae813f31cc02e402a91d9081ad\",\n        \"type\": \"source_code\",\n        \"text\": \"108     145     186    6871   14730    7135\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f263c7c48e43728f5830b4ae9727b81d\",\n        \"type\": \"source_code\",\n        \"text\": \"addFirst     addLast     rmFirst      rmLast\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8651803866452edb93b12b16dfb715f1\",\n        \"type\": \"source_code\",\n        \"text\": \"199         163         251         253\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0225daff3910ace28accb6f6a87cd146\",\n        \"type\": \"source_code\",\n        \"text\": \"98          92         180         179\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"56974f65d9a1f8e34d62702bc0440584\",\n        \"type\": \"source_code\",\n        \"text\": \"99          93         216         212\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39d5f46e7969a03dd4ca032fd9ecdee3\",\n        \"type\": \"source_code\",\n        \"text\": \"111         109         262         384\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"158d795e0b0ce96a05c96d55b5306656\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Usage:\\\"); \\n    print(\\\"\\\\tRandomBounds lower\\\"); \\n    print(\\\"\\\\tRandomBounds upper\\\"); \\n    System.exit(1);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"922e721c3f308249c5381de5224c5a8a\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length != 1) usage(); \\n    if(args[0].equals(\\\"lower\\\")) { \\n      while(Math.random() != 0.0) \\n        ; // Keep trying\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7e23f3e8bcc02f30a25d6722934e077c\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Produced 0.0!\\\"); \\n    } \\n    else if(args[0].equals(\\\"upper\\\")) { \\n      while(Math.random() != 1.0) \\n        ; // Keep trying \\n      print(\\\"Produced 1.0!\\\"); \\n    } \\n    else \\n      usage();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"811c11d524b95b7876aa3607284c7615\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Test<Set<Integer>>>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"84748b05791181fa8ea4a21f19195761\",\n        \"type\": \"source_code\",\n        \"text\": \"tests.add(new Test<Set<Integer>>(\\\"add\\\") { \\n      int test(Set<Integer> set, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          set.clear(); \\n          for(int j = 0; j < size; j++) \\n            set.add(j); \\n        } \\n        return loops * size; \\n      } \\n    }); \\n    tests.add(new Test<Set<Integer>>(\\\"contains\\\") { \\n      int test(Set<Integer> set, TestParam tp) { \\n        int loops = tp.loops;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7969f06cbe3a9bdc1198cc01cebb8e0\",\n        \"type\": \"source_code\",\n        \"text\": \"int span = tp.size * 2; \\n        for(int i = 0; i < loops; i++) \\n          for(int j = 0; j < span; j++) \\n            set.contains(j); \\n        return loops * span; \\n      } \\n    }); \\n    tests.add(new Test<Set<Integer>>(\\\"iterate\\\") { \\n      int test(Set<Integer> set, TestParam tp) { \\n        int loops = tp.loops * 10; \\n        for(int i = 0; i < loops; i++) { \\n          Iterator<Integer> it = set.iterator(); \\n          while(it.hasNext()) \\n            it.next(); \\n        } \\n        return loops * set.size(); \\n      } \\n    });\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"027f275f8cf7eb2f36cfa695db38ea95\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) \\n      Tester.defaultParams = TestParam.array(args); \\n    Tester.fieldWidth = 10; \\n    Tester.run(new TreeSet<Integer>(), tests); \\n    Tester.run(new HashSet<Integer>(), tests); \\n    Tester.run(new LinkedHashSet<Integer>(), tests);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f069691159fbaecd02a409d5ee56d7fa\",\n        \"type\": \"source_code\",\n        \"text\": \"add  contains   iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ccf32f1190bd700aaadc89e6ce973380\",\n        \"type\": \"source_code\",\n        \"text\": \"746       173        89\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf2edf989cdb9ddbc95a58f14a034220\",\n        \"type\": \"source_code\",\n        \"text\": \"501       264        68\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8c78c69563411c05f78c56765bef2ab\",\n        \"type\": \"source_code\",\n        \"text\": \"714       410        69\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2fb3d723a51b1c55ce7873637a0ae17d\",\n        \"type\": \"source_code\",\n        \"text\": \"1975       552        69\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f069691159fbaecd02a409d5ee56d7fa\",\n        \"type\": \"source_code\",\n        \"text\": \"add  contains   iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3906fc23f94380eb8669ac0ee274dd8\",\n        \"type\": \"source_code\",\n        \"text\": \"308        91        94\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"30877ad4618ec8089cc10ed549afe965\",\n        \"type\": \"source_code\",\n        \"text\": \"178        75        73\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"702b4c539c931b723d013f4d6b80611c\",\n        \"type\": \"source_code\",\n        \"text\": \"216       110        72\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2d244637958bb65e4723308712386fbd\",\n        \"type\": \"source_code\",\n        \"text\": \"711       215       100\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f069691159fbaecd02a409d5ee56d7fa\",\n        \"type\": \"source_code\",\n        \"text\": \"add  contains   iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57d90c36d950020df74ada73829695ee\",\n        \"type\": \"source_code\",\n        \"text\": \"350        65        83\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"54b7c320071502ef2d5a91cff79eedec\",\n        \"type\": \"source_code\",\n        \"text\": \"270        74        55\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78d6527a63ab6c296b6d87409ae7e265\",\n        \"type\": \"source_code\",\n        \"text\": \"303       111        54\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"724d6e3e174e580288e149dcbaf9be3f\",\n        \"type\": \"source_code\",\n        \"text\": \"1615       256        58\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6218b2e63e863e58cee9d69c91fe5866\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Test<Map<Integer,Integer>>>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0170995c41de06abea362b0886442aec\",\n        \"type\": \"source_code\",\n        \"text\": \"tests.add(new Test<Map<Integer,Integer>>(\\\"put\\\") { \\n      int test(Map<Integer,Integer> map, TestParam tp) { \\n        int loops = tp.loops; \\n        int size = tp.size; \\n        for(int i = 0; i < loops; i++) { \\n          map.clear(); \\n          for(int j = 0; j < size; j++) \\n            map.put(j, j); \\n        } \\n        return loops * size; \\n      } \\n    }); \\n    tests.add(new Test<Map<Integer,Integer>>(\\\"get\\\") { \\n      int test(Map<Integer,Integer> map, TestParam tp) { \\n        int loops = tp.loops; \\n        int span = tp.size * 2; \\n        for(int i = 0; i < loops; i++) \\n          for(int j = 0; j < span; j++) \\n            map.get(j); \\n        return loops * span; \\n      } \\n    }); \\n    tests.add(new Test<Map<Integer,Integer>>(\\\"iterate\\\") { \\n      int test(Map<Integer,Integer> map, TestParam tp) { \\n        int loops = tp.loops * 10; \\n        for(int i = 0; i < loops; i ++) { \\n          Iterator it = map.entrySet().iterator(); \\n          while(it.hasNext()) \\n            it.next(); \\n        } \\n        return loops * map.size(); \\n      } \\n    });\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"554ac067092b8d1aceedcaeff5d7a889\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) \\n      Tester.defaultParams = TestParam.array(args); \\n    Tester.run(new TreeMap<Integer,Integer>(), tests); \\n    Tester.run(new HashMap<Integer,Integer>(), tests); \\n    Tester.run(new LinkedHashMap<Integer,Integer>(),tests); \\n    Tester.run( \\n      new IdentityHashMap<Integer,Integer>(), tests); \\n    Tester.run(new WeakHashMap<Integer,Integer>(), tests); \\n    Tester.run(new Hashtable<Integer,Integer>(), tests);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f5414e312aa46513a544f41376aa24d\",\n        \"type\": \"source_code\",\n        \"text\": \"748     168     100\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b849c65feafffc54bf1a01ea94594f43\",\n        \"type\": \"source_code\",\n        \"text\": \"506     264      76\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"36914ed1640fb1e4fd42da0726e54299\",\n        \"type\": \"source_code\",\n        \"text\": \"771     450      78\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c5256829e97bb26a7d3f469695771407\",\n        \"type\": \"source_code\",\n        \"text\": \"2962     561      83\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9718e09ae641c508ea2e3ab3a492a713\",\n        \"type\": \"source_code\",\n        \"text\": \"281      76      93\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae0e6e111325eb377f71dc5ab4bbaed8\",\n        \"type\": \"source_code\",\n        \"text\": \"179      70      73\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"81ec9360a9406ec8d0f1f9567555c1f1\",\n        \"type\": \"source_code\",\n        \"text\": \"267     102      72\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5873d1cff6099c9b5ff4f7bed2f884f5\",\n        \"type\": \"source_code\",\n        \"text\": \"1305     265      97\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0dad3fc714434f8a5f3a8e545dfc3523\",\n        \"type\": \"source_code\",\n        \"text\": \"354     100      72\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0f5daf9e7a99e3b2f1185b8d3cb9d63\",\n        \"type\": \"source_code\",\n        \"text\": \"273      89      50\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"56eca2cbfdd1ebc4cbea1a6c16484edc\",\n        \"type\": \"source_code\",\n        \"text\": \"385     222      56\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33ded7b112be16fe500361c703c0fc96\",\n        \"type\": \"source_code\",\n        \"text\": \"2787     341      56\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ca850a09e9e01dbbb2694ff3faf2a52c\",\n        \"type\": \"source_code\",\n        \"text\": \"290     144     101\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0550f49df2d93b51af839f7bd7a3dedf\",\n        \"type\": \"source_code\",\n        \"text\": \"204     287     132\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f4b062d98d78b30cb354f923165cc572\",\n        \"type\": \"source_code\",\n        \"text\": \"508     336      77\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4571c6d3d63e3d09561b00ab4d4ef9cf\",\n        \"type\": \"source_code\",\n        \"text\": \"767     266      56\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"11bc10f6c3cfed32d106e10fb4ff98d5\",\n        \"type\": \"source_code\",\n        \"text\": \"484     146     151\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1fc6d08ee1dc045fd80b98ba8e19e858\",\n        \"type\": \"source_code\",\n        \"text\": \"292     126     117\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b6538d89262512872bb9e8d3c1bc1f2\",\n        \"type\": \"source_code\",\n        \"text\": \"411     136     152\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"677d90f31f7a710576ff9f91c94ffe21\",\n        \"type\": \"source_code\",\n        \"text\": \"2165     138     555\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da178a0706c67182aa355ff65fffdeb1\",\n        \"type\": \"source_code\",\n        \"text\": \"put     get iterate\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b8f82a209097f920488559bc24b1216\",\n        \"type\": \"source_code\",\n        \"text\": \"264     113     113\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7cc66ced9b90bb8bb9c3bd1aaa649424\",\n        \"type\": \"source_code\",\n        \"text\": \"181     105      76\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90ffa78b093b1089cf3a9507d5bbaf11\",\n        \"type\": \"source_code\",\n        \"text\": \"260     201      80\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee7a45715e13207636832f43392ecb91\",\n        \"type\": \"source_code\",\n        \"text\": \"1245     134      77\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7eeae050856631087e7baf06299af5c\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"one Two three Four five six one\\\".split(\\\" \\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5caca61f437ec2795638b30c35b7e73\",\n        \"type\": \"source_code\",\n        \"text\": \"print(list); \\n    print(\\\"\\u2018list\\u2019 disjoint (Four)?: \\\" + \\n      Collections.disjoint(list, \\n        Collections.singletonList(\\\"Four\\\"))); \\n    print(\\\"max: \\\" + Collections.max(list)); \\n    print(\\\"min: \\\" + Collections.min(list)); \\n    print(\\\"max w/ comparator: \\\" + Collections.max(list, \\n      String.CASE_INSENSITIVE_ORDER)); \\n    print(\\\"min w/ comparator: \\\" + Collections.min(list, \\n      String.CASE_INSENSITIVE_ORDER)); \\n    List<String> sublist = \\n      Arrays.asList(\\\"Four five six\\\".split(\\\" \\\")); \\n    print(\\\"indexOfSubList: \\\" + \\n      Collections.indexOfSubList(list, sublist)); \\n    print(\\\"lastIndexOfSubList: \\\" + \\n      Collections.lastIndexOfSubList(list, sublist)); \\n    Collections.replaceAll(list, \\\"one\\\", \\\"Yo\\\"); \\n    print(\\\"replaceAll: \\\" + list); \\n    Collections.reverse(list); \\n    print(\\\"reverse: \\\" + list); \\n    Collections.rotate(list, 3); \\n    print(\\\"rotate: \\\" + list); \\n    List<String> source = \\n      Arrays.asList(\\\"in the matrix\\\".split(\\\" \\\")); \\n    Collections.copy(list, source); \\n    print(\\\"copy: \\\" + list); \\n    Collections.swap(list, 0, list.size() - 1); \\n    print(\\\"swap: \\\" + list); \\n    Collections.shuffle(list, new Random(47)); \\n    print(\\\"shuffled: \\\" + list); \\n    Collections.fill(list, \\\"pop\\\"); \\n    print(\\\"fill: \\\" + list); \\n    print(\\\"frequency of \\u2018pop\\u2019: \\\" + \\n      Collections.frequency(list, \\\"pop\\\")); \\n    List<String> dups = Collections.nCopies(3, \\\"snap\\\"); \\n    print(\\\"dups: \\\" + dups); \\n    print(\\\"\\u2018list\\u2019 disjoint \\u2018dups\\u2019?: \\\" + \\n      Collections.disjoint(list, dups)); \\n    // Getting an old-style Enumeration: \\n    Enumeration<String> e = Collections.enumeration(dups); \\n    Vector<String> v = new Vector<String>(); \\n    while(e.hasMoreElements()) \\n      v.addElement(e.nextElement()); \\n    // Converting an old-style Vector \\n    // to a List via an Enumeration: \\n    ArrayList<String> arrayList = \\n      Collections.list(v.elements()); \\n    print(\\\"arrayList: \\\" + arrayList);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7cba343d2c5c8a8a7b751abad7fb0af9\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> list = \\n      new ArrayList<String>(Utilities.list); \\n    list.addAll(Utilities.list); \\n    print(list); \\n    Collections.shuffle(list, new Random(47)); \\n    print(\\\"Shuffled: \\\" + list); \\n    // Use a ListIterator to trim off the last elements: \\n    ListIterator<String> it = list.listIterator(10); \\n    while(it.hasNext()) { \\n      it.next(); \\n      it.remove(); \\n    } \\n    print(\\\"Trimmed: \\\" + list); \\n    Collections.sort(list); \\n    print(\\\"Sorted: \\\" + list); \\n    String key = list.get(7); \\n    int index = Collections.binarySearch(list, key); \\n    print(\\\"Location of \\\" + key + \\\" is \\\" + index + \\n      \\\", list.get(\\\" + index + \\\") = \\\" + list.get(index)); \\n    Collections.sort(list, String.CASE_INSENSITIVE_ORDER); \\n    print(\\\"Case-insensitive sorted: \\\" + list); \\n    key = list.get(7); \\n    index = Collections.binarySearch(list, key, \\n      String.CASE_INSENSITIVE_ORDER); \\n    print(\\\"Location of \\\" + key + \\\" is \\\" + index + \\n      \\\", list.get(\\\" + index + \\\") = \\\" + list.get(index));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"08e7e5e31cb56f4c9a6cf72e04f9cfff\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<String>(Countries.names(6));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"051540090cf7b73f80dc07693d6c5a2f\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<String> c = \\n      Collections.unmodifiableCollection( \\n        new ArrayList<String>(data)); \\n    print(c); // Reading is OK \\n    //! c.add(\\\"one\\\"); // Can\\u2019t change it\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"704c7ffefa18f37fed9b66689eb0f7fe\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> a = Collections.unmodifiableList(\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f391ae6c98956aaa45a8296b679cdca2\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<String>(data)); \\n    ListIterator<String> lit = a.listIterator(); \\n    print(lit.next()); // Reading is OK \\n    //! lit.add(\\\"one\\\"); // Can\\u2019t change it\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a3a60163a86bcd908eda0147e0108b8\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> s = Collections.unmodifiableSet( \\n      new HashSet<String>(data)); \\n    print(s); // Reading is OK \\n    //! s.add(\\\"one\\\"); // Can\\u2019t change it\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70ea828e50e9e2070b15559c40aff922\",\n        \"type\": \"source_code\",\n        \"text\": \"// For a SortedSet: \\n    Set<String> ss = Collections.unmodifiableSortedSet( \\n      new TreeSet<String>(data));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"84357dd3c3a24e5259a1df8dab3ad16e\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<String,String> m = Collections.unmodifiableMap( \\n      new HashMap<String,String>(Countries.capitals(6))); \\n    print(m); // Reading is OK \\n    //! m.put(\\\"Ralph\\\", \\\"Howdy!\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5dee55d79822815cb2a5597ee63036d7\",\n        \"type\": \"source_code\",\n        \"text\": \"// For a SortedMap: \\n    Map<String,String> sm = \\n      Collections.unmodifiableSortedMap( \\n        new TreeMap<String,String>(Countries.capitals(6)));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2dcc463d08c157fa4fd0405ad7cb2189\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<String> c = \\n      Collections.synchronizedCollection( \\n        new ArrayList<String>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bfad152bd022113f4ce98af464fdd6dc\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> list = Collections.synchronizedList( \\n      new ArrayList<String>()); \\n    Set<String> s = Collections.synchronizedSet( \\n      new HashSet<String>()); \\n    Set<String> ss = Collections.synchronizedSortedSet( \\n      new TreeSet<String>()); \\n    Map<String,String> m = Collections.synchronizedMap( \\n      new HashMap<String,String>()); \\n    Map<String,String> sm = \\n      Collections.synchronizedSortedMap( \\n        new TreeMap<String,String>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"98b2faad82c8f437f5e7424f384cea1f\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<String> c = new ArrayList<String>(); \\n    Iterator<String> it = c.iterator(); \\n    c.add(\\\"An object\\\"); \\n    try { \\n      String s = it.next(); \\n    } catch(ConcurrentModificationException e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93ed4c3390b624968d09bf169741badc\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Finalizing \\\" + ident);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2bb24351ade888dd4a8e964b0fb12b80\",\n        \"type\": \"source_code\",\n        \"text\": \"new ReferenceQueue<VeryBig>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed2809b12b1b50130932c3ffb6843aaf\",\n        \"type\": \"source_code\",\n        \"text\": \"Reference<? extends VeryBig> inq = rq.poll(); \\n    if(inq != null) \\n      System.out.println(\\\"In queue: \\\" + inq.get());\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"669cdf5abd9677f4468cec2a95b69dd5\",\n        \"type\": \"source_code\",\n        \"text\": \"int size = 10; \\n    // Or, choose size via the command line: \\n    if(args.length > 0) \\n      size = new Integer(args[0]); \\n    LinkedList<SoftReference<VeryBig>> sa = \\n      new LinkedList<SoftReference<VeryBig>>(); \\n    for(int i = 0; i < size; i++) { \\n      sa.add(new SoftReference<VeryBig>( \\n        new VeryBig(\\\"Soft \\\" + i), rq)); \\n      System.out.println(\\\"Just created: \\\" + sa.getLast()); \\n      checkQueue(); \\n    } \\n    LinkedList<WeakReference<VeryBig>> wa = \\n      new LinkedList<WeakReference<VeryBig>>(); \\n    for(int i = 0; i < size; i++) { \\n      wa.add(new WeakReference<VeryBig>( \\n        new VeryBig(\\\"Weak \\\" + i), rq)); \\n      System.out.println(\\\"Just created: \\\" + wa.getLast()); \\n      checkQueue(); \\n    } \\n    SoftReference<VeryBig> s = \\n      new SoftReference<VeryBig>(new VeryBig(\\\"Soft\\\")); \\n    WeakReference<VeryBig> w = \\n      new WeakReference<VeryBig>(new VeryBig(\\\"Weak\\\")); \\n    System.gc(); \\n    LinkedList<PhantomReference<VeryBig>> pa = \\n      new LinkedList<PhantomReference<VeryBig>>(); \\n    for(int i = 0; i < size; i++) { \\n      pa.add(new PhantomReference<VeryBig>( \\n        new VeryBig(\\\"Phantom \\\" + i), rq)); \\n      System.out.println(\\\"Just created: \\\" + pa.getLast()); \\n      checkQueue(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d98d70c814dacfcbcbe76810faa832\",\n        \"type\": \"source_code\",\n        \"text\": \"return r instanceof Element && \\n      ident.equals(((Element)r).ident);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ec63f9b70b01cf9b466cf1b72ba7279\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Finalizing \\\" + \\n      getClass().getSimpleName() + \\\" \\\" + ident);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61e6a373e9be85012f64f7a2341b3e03\",\n        \"type\": \"source_code\",\n        \"text\": \"int size = 1000; \\n    // Or, choose size via the command line: \\n    if(args.length > 0) \\n      size = new Integer(args[0]); \\n    Key[] keys = new Key[size]; \\n    WeakHashMap<Key,Value> map = \\n      new WeakHashMap<Key,Value>(); \\n    for(int i = 0; i < size; i++) { \\n      Key k = new Key(Integer.toString(i)); \\n      Value v = new Value(Integer.toString(i)); \\n      if(i % 3 == 0) \\n        keys[i] = k; // Save as \\\"real\\\" references \\n      map.put(k, v); \\n    } \\n    System.gc();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b9eb5cbddf5506c3f2be39c4d6a25f8a\",\n        \"type\": \"source_code\",\n        \"text\": \"Vector<String> v = \\n      new Vector<String>(Countries.names(10)); \\n    Enumeration<String> e = v.elements(); \\n    while(e.hasMoreElements()) \\n      System.out.print(e.nextElement() + \\\", \\\"); \\n    // Produce an Enumeration from a Collection: \\n    e = Collections.enumeration(new ArrayList<String>());\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b3062ce244bc20197db6e042ce0451ff\",\n        \"type\": \"source_code\",\n        \"text\": \"Stack<String> stack = new Stack<String>(); \\n    for(Month m : Month.values()) \\n      stack.push(m.toString()); \\n    print(\\\"stack = \\\" + stack); \\n    // Treating a stack as a Vector: \\n    stack.addElement(\\\"The last line\\\"); \\n    print(\\\"element 5 = \\\" + stack.elementAt(5)); \\n    print(\\\"popping elements:\\\"); \\n    while(!stack.empty()) \\n      printnb(stack.pop() + \\\" \\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a53196bcacf226c4ad7a7d8bc74904d\",\n        \"type\": \"source_code\",\n        \"text\": \"// Using a LinkedList as a Stack: \\n    LinkedList<String> lstack = new LinkedList<String>(); \\n    for(Month m : Month.values()) \\n      lstack.addFirst(m.toString()); \\n    print(\\\"lstack = \\\" + lstack); \\n    while(!lstack.isEmpty()) \\n      printnb(lstack.removeFirst() + \\\" \\\");\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"457d481613a4d011bd4c71b6a137c33a\",\n        \"type\": \"source_code\",\n        \"text\": \"// Using the Stack class from \\n    // the Holding Your Objects Chapter: \\n    net.mindview.util.Stack<String> stack2 = \\n      new net.mindview.util.Stack<String>(); \\n    for(Month m : Month.values()) \\n      stack2.push(m.toString());\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e35709b73e756f7b5965c8c8513e25f2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"stack2 = \\\" + stack2); \\n    while(!stack2.empty()) \\n      printnb(stack2.pop() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70a31de3168ac47a4bed14084c30e776\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"bits: \\\" + b); \\n    StringBuilder bbits = new StringBuilder(); \\n    for(int j = 0; j < b.size() ; j++) \\n      bbits.append(b.get(j) ? \\\"1\\\" : \\\"0\\\"); \\n    print(\\\"bit pattern: \\\" + bbits);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"086b617435698d4f482d38a53e0ac566\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    // Take the LSB of nextInt(): \\n    byte bt = (byte)rand.nextInt(); \\n    BitSet bb = new BitSet(); \\n    for(int i = 7; i >= 0; i--) \\n      if(((1 << i) &  bt) != 0) \\n        bb.set(i); \\n      else \\n        bb.clear(i); \\n    print(\\\"byte value: \\\" + bt); \\n    printBitSet(bb);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbbcd43b291d41a42b46426e2cdaf710\",\n        \"type\": \"source_code\",\n        \"text\": \"short st = (short)rand.nextInt(); \\n    BitSet bs = new BitSet(); \\n    for(int i = 15; i >= 0; i--) \\n      if(((1 << i) &  st) != 0) \\n        bs.set(i); \\n      else \\n        bs.clear(i); \\n    print(\\\"short value: \\\" + st); \\n    printBitSet(bs);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"498a3d3e8a38735948dd12f1e04d3b41\",\n        \"type\": \"source_code\",\n        \"text\": \"int it = rand.nextInt(); \\n    BitSet bi = new BitSet(); \\n    for(int i = 31; i >= 0; i--) \\n      if(((1 << i) &  it) != 0) \\n        bi.set(i); \\n      else \\n        bi.clear(i); \\n    print(\\\"int value: \\\" + it); \\n    printBitSet(bi);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"584b6b36de49d5060ae4be1d097a576d\",\n        \"type\": \"source_code\",\n        \"text\": \"// Test bitsets >= 64 bits: \\n    BitSet b127 = new BitSet(); \\n    b127.set(127); \\n    print(\\\"set bit 127: \\\" + b127); \\n    BitSet b255 = new BitSet(65); \\n    b255.set(255); \\n    print(\\\"set bit 255: \\\" + b255); \\n    BitSet b1023 = new BitSet(512); \\n    b1023.set(1023); \\n    b1023.set(1024); \\n    print(\\\"set bit 1023: \\\" + b1023);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48819257d25ac6b392c8ecdc6d44ce44\",\n        \"type\": \"source_code\",\n        \"text\": \"File path = new File(\\\".\\\"); \\n    String[] list; \\n    if(args.length == 0) \\n      list = path.list(); \\n    else \\n      list = path.list(new DirFilter(args[0])); \\n    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); \\n    for(String dirItem : list) \\n      System.out.println(dirItem);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d7c83682ff05b67e307299c595633c85\",\n        \"type\": \"source_code\",\n        \"text\": \"pattern = Pattern.compile(regex);\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"754ce78a12b3ee388d385b2cc2e72085\",\n        \"type\": \"source_code\",\n        \"text\": \"return pattern.matcher(name).matches();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d873ac5d88a71182293060f77761e0cf\",\n        \"type\": \"source_code\",\n        \"text\": \"// Creation of anonymous inner class: \\n    return new FilenameFilter() { \\n      private Pattern pattern = Pattern.compile(regex); \\n      public boolean accept(File dir, String name) { \\n        return pattern.matcher(name).matches(); \\n      } \\n    }; // End of anonymous inner class\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d45390000828beaf0327ec49f427f840\",\n        \"type\": \"source_code\",\n        \"text\": \"File path = new File(\\\".\\\"); \\n    String[] list; \\n    if(args.length == 0) \\n      list = path.list(); \\n    else \\n      list = path.list(filter(args[0])); \\n    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); \\n    for(String dirItem : list) \\n      System.out.println(dirItem);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bae0a2e6bdc30781099c1adb8b3d2eae\",\n        \"type\": \"source_code\",\n        \"text\": \"File path = new File(\\\".\\\"); \\n    String[] list; \\n    if(args.length == 0) \\n      list = path.list(); \\n    else\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8753870ee39df4b8359f07852d45998\",\n        \"type\": \"source_code\",\n        \"text\": \"list = path.list(new FilenameFilter() { \\n        private Pattern pattern = Pattern.compile(args[0]); \\n        public boolean accept(File dir, String name) { \\n          return pattern.matcher(name).matches(); \\n        } \\n      }); \\n    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); \\n    for(String dirItem : list) \\n      System.out.println(dirItem);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61cc1967df164cb29bcb8180fbb20db6\",\n        \"type\": \"source_code\",\n        \"text\": \"return dir.listFiles(new FilenameFilter() { \\n      private Pattern pattern = Pattern.compile(regex); \\n      public boolean accept(File dir, String name) { \\n        return pattern.matcher( \\n          new File(name).getName()).matches(); \\n      } \\n    });\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"389f3aa1573621416e77181246980c74\",\n        \"type\": \"source_code\",\n        \"text\": \"return local(new File(path), regex);\",\n        \"programming_language\": \"Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f904dbd127c988f595c0dda353b81c5d\",\n        \"type\": \"source_code\",\n        \"text\": \"public List<File> files = new ArrayList<File>(); \\n    public List<File> dirs = new ArrayList<File>(); \\n    // The default iterable element is the file list: \\n    public Iterator<File> iterator() { \\n      return files.iterator(); \\n    } \\n    void addAll(TreeInfo other) { \\n      files.addAll(other.files); \\n      dirs.addAll(other.dirs); \\n    } \\n    public String toString() { \\n      return \\\"dirs: \\\" + PPrint.pformat(dirs) + \\n        \\\"\\\\n\\\\nfiles: \\\" + PPrint.pformat(files); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d64f02801687697c5cf26186aa1750aa\",\n        \"type\": \"source_code\",\n        \"text\": \"return recurseDirs(new File(start), regex);\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1dd39ca35737d6767440b09bbd546b02\",\n        \"type\": \"source_code\",\n        \"text\": \"return recurseDirs(start, regex);\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1f0bd08e35e0b6d3dea2506cd246384\",\n        \"type\": \"source_code\",\n        \"text\": \"return recurseDirs(start, \\\".*\\\");\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95a6fdd46aa33836d76bb70cf27fbe39\",\n        \"type\": \"source_code\",\n        \"text\": \"return recurseDirs(new File(start), \\\".*\\\");\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2029967eb70c6ed6766eaa70e9cb93c2\",\n        \"type\": \"source_code\",\n        \"text\": \"TreeInfo result = new TreeInfo(); \\n    for(File item : startDir.listFiles()) { \\n      if(item.isDirectory()) { \\n        result.dirs.add(item); \\n        result.addAll(recurseDirs(item, regex)); \\n      } else // Regular file \\n        if(item.getName().matches(regex)) \\n          result.files.add(item); \\n    } \\n    return result;\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecd8b2457d2764c3485e1c772c8c888c\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length == 0) \\n      System.out.println(walk(\\\".\\\")); \\n    else \\n      for(String arg : args) \\n       System.out.println(walk(arg));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1dab3fb47f902e6866c73fdb660fb21c\",\n        \"type\": \"source_code\",\n        \"text\": \"if(c.size() == 0) return \\\"[]\\\"; \\n    StringBuilder result = new StringBuilder(\\\"[\\\"); \\n    for(Object elem : c) { \\n      if(c.size() != 1) \\n        result.append(\\\"\\\\n  \\\"); \\n      result.append(elem); \\n    } \\n    if(c.size() != 1) \\n      result.append(\\\"\\\\n\\\"); \\n    result.append(\\\"]\\\"); \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0b4a701bf9a0924009f8194a6565bd96\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(pformat(c));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"73c03de4d6adc034a3e8db079ebb06d9\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(pformat(Arrays.asList(c)));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c0983edc13d6357e67918b1a9565609e\",\n        \"type\": \"source_code\",\n        \"text\": \"// All directories: \\n    PPrint.pprint(Directory.walk(\\\".\\\").dirs); \\n    // All files beginning with \\u2018T\\u2019 \\n    for(File file : Directory.local(\\\".\\\", \\\"T.*\\\")) \\n      print(file); \\n    print(\\\"----------------------\\\"); \\n    // All Java files beginning with \\u2018T\\u2019: \\n    for(File file : Directory.walk(\\\".\\\", \\\"T.*\\\\\\\\.java\\\")) \\n      print(file); \\n    print(\\\"======================\\\"); \\n    // Class files containing \\\"Z\\\" or \\\"z\\\": \\n    for(File file : Directory.walk(\\\".\\\",\\\".*[Zz].*\\\\\\\\.class\\\")) \\n      print(file);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42ad324ff125c69fb25eddc52a5b8806\",\n        \"type\": \"source_code\",\n        \"text\": \"void process(File file);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09c74c92f4914b4a220aa8bcb4c52195\",\n        \"type\": \"source_code\",\n        \"text\": \"this.strategy = strategy; \\n    this.ext = ext;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b91492c6db85dbacfaf89a50baabdea1\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      if(args.length == 0) \\n        processDirectoryTree(new File(\\\".\\\")); \\n      else \\n        for(String arg : args) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"77cf3db4cb3ed287a1dc1068a992a629\",\n        \"type\": \"source_code\",\n        \"text\": \"File fileArg = new File(arg); \\n          if(fileArg.isDirectory()) \\n            processDirectoryTree(fileArg); \\n          else { \\n            // Allow user to leave off extension: \\n            if(!arg.endsWith(\\\".\\\" + ext)) \\n              arg += \\\".\\\" + ext; \\n            strategy.process( \\n              new File(arg).getCanonicalFile()); \\n          } \\n        } \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"130ebee039b04882a2c57501609d0b81\",\n        \"type\": \"source_code\",\n        \"text\": \"for(File file : Directory.walk( \\n        root.getAbsolutePath(), \\\".*\\\\\\\\.\\\" + ext)) \\n      strategy.process(file.getCanonicalFile());\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f01789ddc7295a040cb7b124db42927\",\n        \"type\": \"source_code\",\n        \"text\": \"new ProcessFiles(new ProcessFiles.Strategy() { \\n      public void process(File file) { \\n        System.out.println(file); \\n      } \\n    }, \\\"java\\\").start(args);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d12d872c7357e1a49e05c2a598b6be6a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.err.println( \\n      \\\"Usage:MakeDirectories path1 ...\\\\n\\\" + \\n      \\\"Creates each path\\\\n\\\" + \\n      \\\"Usage:MakeDirectories -d path1 ...\\\\n\\\" + \\n      \\\"Deletes each path\\\\n\\\" + \\n      \\\"Usage:MakeDirectories -r path1 path2\\\\n\\\" + \\n      \\\"Renames from path1 to path2\\\"); \\n    System.exit(1);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"01616bc321998610236f5adfdaea240b\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n      \\\"Absolute path: \\\" + f.getAbsolutePath() + \\n      \\\"\\\\n Can read: \\\" + f.canRead() + \\n      \\\"\\\\n Can write: \\\" + f.canWrite() + \\n      \\\"\\\\n getName: \\\" + f.getName() + \\n      \\\"\\\\n getParent: \\\" + f.getParent() + \\n      \\\"\\\\n getPath: \\\" + f.getPath() + \\n      \\\"\\\\n length: \\\" + f.length() + \\n      \\\"\\\\n lastModified: \\\" + f.lastModified()); \\n    if(f.isFile()) \\n      System.out.println(\\\"It\\u2019s a file\\\"); \\n    else if(f.isDirectory()) \\n      System.out.println(\\\"It\\u2019s a directory\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35b0c379d25555dfee32c8f8651f5f54\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length < 1) usage(); \\n    if(args[0].equals(\\\"-r\\\")) { \\n      if(args.length != 3) usage(); \\n      File \\n        old = new File(args[1]), \\n        rname = new File(args[2]); \\n      old.renameTo(rname); \\n      fileData(old); \\n      fileData(rname); \\n      return; // Exit main \\n    } \\n    int count = 0; \\n    boolean del = false; \\n    if(args[0].equals(\\\"-d\\\")) { \\n      count++; \\n      del = true; \\n    } \\n    count--; \\n    while(++count < args.length) { \\n      File f = new File(args[count]); \\n      if(f.exists()) { \\n        System.out.println(f + \\\" exists\\\"); \\n        if(del) { \\n          System.out.println(\\\"deleting...\\\" + f); \\n          f.delete(); \\n        } \\n      } \\n      else { // Doesn\\u2019t exist \\n        if(!del) { \\n          f.mkdirs();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d2a1e48c2f930ee1b40e3a6253863e9\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"created \\\" + f); \\n        } \\n      } \\n      fileData(f); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d0e38aac2744cdddd1c8b981f0e48766\",\n        \"type\": \"source_code\",\n        \"text\": \"and useful interfaces\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93372e8d2fbe30f038d16a5006cb3853\",\n        \"type\": \"source_code\",\n        \"text\": \"RandomAccessFile\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"601b28ea203943872f86f4043b6966a4\",\n        \"type\": \"source_code\",\n        \"text\": \"// Reading input by lines: \\n    BufferedReader in = new BufferedReader( \\n      new FileReader(filename)); \\n    String s; \\n    StringBuilder sb = new StringBuilder(); \\n    while((s = in.readLine())!= null) \\n      sb.append(s + \\\"\\\\n\\\"); \\n    in.close(); \\n    return sb.toString();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b0e48291d81b4cdbe20b9ecea8d81c3\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(read(\\\"BufferedInputFile.java\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e25167b4ebac20c731db5e2d83b4b13b\",\n        \"type\": \"source_code\",\n        \"text\": \"StringReader in = new StringReader( \\n      BufferedInputFile.read(\\\"MemoryInput.java\\\")); \\n    int c; \\n    while((c = in.read()) != -1) \\n      System.out.print((char)c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d50a3427c9fcf59834341ddb2ea63761\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      DataInputStream in = new DataInputStream( \\n        new ByteArrayInputStream( \\n         BufferedInputFile.read( \\n          \\\"FormattedMemoryInput.java\\\").getBytes())); \\n      while(true) \\n        System.out.print((char)in.readByte()); \\n    } catch(EOFException e) { \\n      System.err.println(\\\"End of stream\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7043bf8b72c945bd71fc79c2cb204a0a\",\n        \"type\": \"source_code\",\n        \"text\": \"DataInputStream in = new DataInputStream( \\n      new BufferedInputStream( \\n        new FileInputStream(\\\"TestEOF.java\\\"))); \\n    while(in.available() != 0)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87cae744d78f0de9e2e2af4ef661fa85\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print((char)in.readByte());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9b3d29c11152c7bc20fdb7f01c554b4\",\n        \"type\": \"source_code\",\n        \"text\": \"BufferedReader in = new BufferedReader( \\n      new StringReader( \\n        BufferedInputFile.read(\\\"BasicFileOutput.java\\\"))); \\n    PrintWriter out = new PrintWriter( \\n      new BufferedWriter(new FileWriter(file))); \\n    int lineCount = 1; \\n    String s; \\n    while((s = in.readLine()) != null ) \\n      out.println(lineCount++ + \\\": \\\" + s); \\n    out.close(); \\n    // Show the stored file: \\n    System.out.println(BufferedInputFile.read(file));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"67e47aaade8a488ebb1ea4091ec1b23f\",\n        \"type\": \"source_code\",\n        \"text\": \"BufferedReader in = new BufferedReader( \\n      new StringReader( \\n       BufferedInputFile.read(\\\"FileOutputShortcut.java\\\"))); \\n    // Here\\u2019s the shortcut: \\n    PrintWriter out = new PrintWriter(file); \\n    int lineCount = 1; \\n    String s; \\n    while((s = in.readLine()) != null ) \\n      out.println(lineCount++ + \\\": \\\" + s); \\n    out.close(); \\n    // Show the stored file: \\n    System.out.println(BufferedInputFile.read(file));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"282e368dbcf3e0514b436db0bd9d4436\",\n        \"type\": \"source_code\",\n        \"text\": \"DataOutputStream out = new DataOutputStream( \\n      new BufferedOutputStream( \\n        new FileOutputStream(\\\"Data.txt\\\"))); \\n    out.writeDouble(3.14159); \\n    out.writeUTF(\\\"That was pi\\\"); \\n    out.writeDouble(1.41413); \\n    out.writeUTF(\\\"Square root of 2\\\"); \\n    out.close(); \\n    DataInputStream in = new DataInputStream(\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"88aee1a3d3883bbd792a5b3b1fd2e40b\",\n        \"type\": \"source_code\",\n        \"text\": \"new BufferedInputStream( \\n        new FileInputStream(\\\"Data.txt\\\"))); \\n    System.out.println(in.readDouble()); \\n    // Only readUTF() will recover the \\n    // Java-UTF String properly: \\n    System.out.println(in.readUTF()); \\n    System.out.println(in.readDouble()); \\n    System.out.println(in.readUTF());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24ad698deee03a52e7ecce25e95da19a\",\n        \"type\": \"source_code\",\n        \"text\": \"RandomAccessFile rf = new RandomAccessFile(file, \\\"r\\\"); \\n    for(int i = 0; i < 7; i++) \\n      System.out.println( \\n        \\\"Value \\\" + i + \\\": \\\" + rf.readDouble()); \\n    System.out.println(rf.readUTF()); \\n    rf.close();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1b28d226105bcc0c333ab0aeeb3e3850\",\n        \"type\": \"source_code\",\n        \"text\": \"RandomAccessFile rf = new RandomAccessFile(file, \\\"rw\\\"); \\n    for(int i = 0; i < 7; i++) \\n      rf.writeDouble(i*1.414); \\n    rf.writeUTF(\\\"The end of the file\\\"); \\n    rf.close(); \\n    display(); \\n    rf = new RandomAccessFile(file, \\\"rw\\\"); \\n    rf.seek(5*8); \\n    rf.writeDouble(47.0001); \\n    rf.close(); \\n    display();\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5ab902baf05927cd8839f57cfb66ca1e\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder sb = new StringBuilder(); \\n    try { \\n      BufferedReader in= new BufferedReader(new FileReader( \\n        new File(fileName).getAbsoluteFile())); \\n      try { \\n        String s;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aeb16145c44f9c91048540ec6de2dbb7\",\n        \"type\": \"source_code\",\n        \"text\": \"while((s = in.readLine()) != null) { \\n          sb.append(s); \\n          sb.append(\\\"\\\\n\\\"); \\n        } \\n      } finally { \\n        in.close(); \\n      } \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    } \\n    return sb.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"575054879f4402b3cf8b1043b17aa72f\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      PrintWriter out = new PrintWriter( \\n        new File(fileName).getAbsoluteFile()); \\n      try { \\n        out.print(text); \\n      } finally { \\n        out.close(); \\n      } \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"525b32908e9fecdc3328d53da4db6fef\",\n        \"type\": \"source_code\",\n        \"text\": \"super(Arrays.asList(read(fileName).split(splitter))); \\n    // Regular expression split() often leaves an empty \\n    // String at the first position: \\n    if(get(0).equals(\\\"\\\")) remove(0);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f94a81936f466f38d95ecf942b5317f5\",\n        \"type\": \"source_code\",\n        \"text\": \"this(fileName, \\\"\\\\n\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61dbf08a72b9f63718c0830498e226b0\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      PrintWriter out = new PrintWriter( \\n        new File(fileName).getAbsoluteFile()); \\n      try { \\n        for(String item : this) \\n          out.println(item); \\n      } finally { \\n        out.close(); \\n      } \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24b7165ee2274f12a81277fa3a61c891\",\n        \"type\": \"source_code\",\n        \"text\": \"String file = read(\\\"TextFile.java\\\"); \\n    write(\\\"test.txt\\\", file); \\n    TextFile text = new TextFile(\\\"test.txt\\\"); \\n    text.write(\\\"test2.txt\\\"); \\n    // Break into unique sorted list of words: \\n    TreeSet<String> words = new TreeSet<String>( \\n      new TextFile(\\\"TextFile.java\\\", \\\"\\\\\\\\W+\\\")); \\n    // Display the capitalized words: \\n    System.out.println(words.headSet(\\\"a\\\"));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fffa45d85c4d8b61d2078b8e5ddc711\",\n        \"type\": \"source_code\",\n        \"text\": \"BufferedInputStream bf = new BufferedInputStream( \\n      new FileInputStream(bFile)); \\n    try { \\n      byte[] data = new byte[bf.available()];\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"acb9774a0ad94a59d56f0a8583593da9\",\n        \"type\": \"source_code\",\n        \"text\": \"bf.read(data); \\n      return data; \\n    } finally { \\n      bf.close(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a3c00e18a9adcc1df3a67a96e4fb968a\",\n        \"type\": \"source_code\",\n        \"text\": \"return read(new File(bFile).getAbsoluteFile());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74eed35681086fac8208d00b76159e67\",\n        \"type\": \"source_code\",\n        \"text\": \"BufferedReader stdin = new BufferedReader( \\n      new InputStreamReader(System.in)); \\n    String s;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a96546b7c0ebe2adc036b946e7ed629e\",\n        \"type\": \"source_code\",\n        \"text\": \"while((s = stdin.readLine()) != null && s.length()!= 0) \\n      System.out.println(s); \\n    // An empty line or Ctrl-Z terminates the program\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5ebf055354ba50e344364bd1373533a\",\n        \"type\": \"source_code\",\n        \"text\": \"PrintWriter out = new PrintWriter(System.out, true); \\n    out.println(\\\"Hello, world\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0de58a6563400a58035883f45d3c4434\",\n        \"type\": \"source_code\",\n        \"text\": \"PrintStream console = System.out; \\n    BufferedInputStream in = new BufferedInputStream( \\n      new FileInputStream(\\\"Redirecting.java\\\")); \\n    PrintStream out = new PrintStream( \\n      new BufferedOutputStream( \\n        new FileOutputStream(\\\"test.out\\\"))); \\n    System.setIn(in); \\n    System.setOut(out); \\n    System.setErr(out); \\n    BufferedReader br = new BufferedReader( \\n      new InputStreamReader(System.in)); \\n    String s; \\n    while((s = br.readLine()) != null) \\n      System.out.println(s); \\n    out.close(); // Remember this! \\n    System.setOut(console);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8d54397177e5941e53013d803eb225f\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean err = false; \\n    try { \\n      Process process = \\n        new ProcessBuilder(command.split(\\\" \\\")).start(); \\n      BufferedReader results = new BufferedReader( \\n        new InputStreamReader(process.getInputStream())); \\n      String s; \\n      while((s = results.readLine())!= null) \\n        System.out.println(s); \\n      BufferedReader errors = new BufferedReader( \\n        new InputStreamReader(process.getErrorStream())); \\n      // Report errors and return nonzero value \\n      // to calling process if there are problems: \\n      while((s = errors.readLine())!= null) { \\n        System.err.println(s); \\n        err = true; \\n      } \\n    } catch(Exception e) { \\n      // Compensate for Windows 2000, which throws an \\n      // exception for the default command line: \\n      if(!command.startsWith(\\\"CMD /C\\\")) \\n        command(\\\"CMD /C \\\" + command); \\n      else \\n        throw new RuntimeException(e); \\n    } \\n    if(err) \\n      throw new OSExecuteException(\\\"Errors executing \\\" + \\n        command);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"319c43c48317c2e43c55fd04a56c1d3c\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command(\\\"javap OSExecuteDemo\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d0075c5ed91dbfdd491394425cf33b17\",\n        \"type\": \"source_code\",\n        \"text\": \"public OSExecuteDemo(); \\n    public static void main(java.lang.String[]);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc50d99721f52ac94fac8e7fae933fa7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Write a file: \\n    FileChannel fc = \\n      new FileOutputStream(\\\"data.txt\\\").getChannel(); \\n    fc.write(ByteBuffer.wrap(\\\"Some text \\\".getBytes()));\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c446accc8e97ed38a9d8c80698e039f6\",\n        \"type\": \"source_code\",\n        \"text\": \"fc.close(); \\n    // Add to the end of the file: \\n    fc = \\n      new RandomAccessFile(\\\"data.txt\\\", \\\"rw\\\").getChannel(); \\n    fc.position(fc.size()); // Move to the end \\n    fc.write(ByteBuffer.wrap(\\\"Some more\\\".getBytes())); \\n    fc.close(); \\n    // Read the file: \\n    fc = new FileInputStream(\\\"data.txt\\\").getChannel(); \\n    ByteBuffer buff = ByteBuffer.allocate(BSIZE); \\n    fc.read(buff); \\n    buff.flip(); \\n    while(buff.hasRemaining()) \\n      System.out.print((char)buff.get());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8bd8b9cdf84ca719c5532d4f38f97508\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length != 2) { \\n      System.out.println(\\\"arguments: sourcefile destfile\\\"); \\n      System.exit(1); \\n    } \\n    FileChannel \\n      in = new FileInputStream(args[0]).getChannel(), \\n      out = new FileOutputStream(args[1]).getChannel(); \\n    ByteBuffer buffer = ByteBuffer.allocate(BSIZE); \\n    while(in.read(buffer) != -1) { \\n      buffer.flip(); // Prepare for writing \\n      out.write(buffer); \\n      buffer.clear();  // Prepare for reading \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4cff3704e7be4af046b986f54dcfa68f\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length != 2) { \\n      System.out.println(\\\"arguments: sourcefile destfile\\\"); \\n      System.exit(1); \\n    } \\n    FileChannel \\n      in = new FileInputStream(args[0]).getChannel(), \\n      out = new FileOutputStream(args[1]).getChannel(); \\n    in.transferTo(0, in.size(), out); \\n    // Or: \\n    // out.transferFrom(in, 0, in.size());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9f4e3195f358e2ae0768bff418bf4914\",\n        \"type\": \"source_code\",\n        \"text\": \"FileChannel fc = \\n      new FileOutputStream(\\\"data2.txt\\\").getChannel(); \\n    fc.write(ByteBuffer.wrap(\\\"Some text\\\".getBytes())); \\n    fc.close(); \\n    fc = new FileInputStream(\\\"data2.txt\\\").getChannel(); \\n    ByteBuffer buff = ByteBuffer.allocate(BSIZE); \\n    fc.read(buff); \\n    buff.flip(); \\n    // Doesn\\u2019t work: \\n    System.out.println(buff.asCharBuffer()); \\n    // Decode using this system\\u2019s default Charset: \\n    buff.rewind(); \\n    String encoding = System.getProperty(\\\"file.encoding\\\"); \\n    System.out.println(\\\"Decoded using \\\" + encoding + \\\": \\\" \\n      + Charset.forName(encoding).decode(buff)); \\n    // Or, we could encode with something that will print: \\n    fc = new FileOutputStream(\\\"data2.txt\\\").getChannel(); \\n    fc.write(ByteBuffer.wrap( \\n      \\\"Some text\\\".getBytes(\\\"UTF-16BE\\\"))); \\n    fc.close(); \\n    // Now try reading again: \\n    fc = new FileInputStream(\\\"data2.txt\\\").getChannel(); \\n    buff.clear(); \\n    fc.read(buff); \\n    buff.flip(); \\n    System.out.println(buff.asCharBuffer()); \\n    // Use a CharBuffer to write through: \\n    fc = new FileOutputStream(\\\"data2.txt\\\").getChannel(); \\n    buff = ByteBuffer.allocate(24); // More than needed \\n    buff.asCharBuffer().put(\\\"Some text\\\"); \\n    fc.write(buff); \\n    fc.close(); \\n    // Read and display: \\n    fc = new FileInputStream(\\\"data2.txt\\\").getChannel(); \\n    buff.clear(); \\n    fc.read(buff); \\n    buff.flip(); \\n    System.out.println(buff.asCharBuffer());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e405499fe782a33daf9907bbff25250b\",\n        \"type\": \"source_code\",\n        \"text\": \"SortedMap<String,Charset> charSets = \\n      Charset.availableCharsets(); \\n    Iterator<String> it = charSets.keySet().iterator(); \\n    while(it.hasNext()) { \\n      String csName = it.next(); \\n      printnb(csName); \\n      Iterator aliases = \\n        charSets.get(csName).aliases().iterator(); \\n      if(aliases.hasNext()) \\n        printnb(\\\": \\\"); \\n      while(aliases.hasNext()) { \\n        printnb(aliases.next()); \\n        if(aliases.hasNext()) \\n          printnb(\\\", \\\"); \\n      } \\n      print(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"129e99dcdcdaa4cd0c369e094cc353e4\",\n        \"type\": \"source_code\",\n        \"text\": \"ByteBuffer bb = ByteBuffer.allocate(BSIZE); \\n    // Allocation automatically zeroes the ByteBuffer: \\n    int i = 0; \\n    while(i++ < bb.limit()) \\n      if(bb.get() != 0) \\n        print(\\\"nonzero\\\"); \\n    print(\\\"i = \\\" + i); \\n    bb.rewind(); \\n    // Store and read a char array: \\n    bb.asCharBuffer().put(\\\"Howdy!\\\"); \\n    char c; \\n    while((c = bb.getChar()) != 0) \\n      printnb(c + \\\" \\\"); \\n    print(); \\n    bb.rewind(); \\n    // Store and read a short: \\n    bb.asShortBuffer().put((short)471142); \\n    print(bb.getShort()); \\n    bb.rewind(); \\n    // Store and read an int: \\n    bb.asIntBuffer().put(99471142); \\n    print(bb.getInt()); \\n    bb.rewind(); \\n    // Store and read a long: \\n    bb.asLongBuffer().put(99471142); \\n    print(bb.getLong()); \\n    bb.rewind(); \\n    // Store and read a float: \\n    bb.asFloatBuffer().put(99471142); \\n    print(bb.getFloat()); \\n    bb.rewind(); \\n    // Store and read a double: \\n    bb.asDoubleBuffer().put(99471142); \\n    print(bb.getDouble()); \\n    bb.rewind();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe2c210458261a228415a43d9c484771\",\n        \"type\": \"source_code\",\n        \"text\": \"ByteBuffer bb = ByteBuffer.allocate(BSIZE); \\n    IntBuffer ib = bb.asIntBuffer(); \\n    // Store an array of int: \\n    ib.put(new int[]{ 11, 42, 47, 99, 143, 811, 1016 }); \\n    // Absolute location read and write: \\n    System.out.println(ib.get(3)); \\n    ib.put(3, 1811); \\n    // Setting a new limit before rewinding the buffer. \\n    ib.flip(); \\n    while(ib.hasRemaining()) { \\n      int i = ib.get(); \\n      System.out.println(i); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a8ab5134d23292edc0aa372d943220d8\",\n        \"type\": \"source_code\",\n        \"text\": \"ByteBuffer bb = ByteBuffer.wrap( \\n      new byte[]{ 0, 0, 0, 0, 0, 0, 0, \\u2018a\\u2019 }); \\n    bb.rewind(); \\n    printnb(\\\"Byte Buffer \\\"); \\n    while(bb.hasRemaining()) \\n      printnb(bb.position()+ \\\" -> \\\" + bb.get() + \\\", \\\"); \\n    print(); \\n    CharBuffer cb = \\n      ((ByteBuffer)bb.rewind()).asCharBuffer(); \\n    printnb(\\\"Char Buffer \\\"); \\n    while(cb.hasRemaining()) \\n      printnb(cb.position() + \\\" -> \\\" + cb.get() + \\\", \\\"); \\n    print(); \\n    FloatBuffer fb = \\n      ((ByteBuffer)bb.rewind()).asFloatBuffer(); \\n    printnb(\\\"Float Buffer \\\"); \\n    while(fb.hasRemaining()) \\n      printnb(fb.position()+ \\\" -> \\\" + fb.get() + \\\", \\\"); \\n    print(); \\n    IntBuffer ib = \\n      ((ByteBuffer)bb.rewind()).asIntBuffer(); \\n    printnb(\\\"Int Buffer \\\"); \\n    while(ib.hasRemaining()) \\n      printnb(ib.position()+ \\\" -> \\\" + ib.get() + \\\", \\\"); \\n    print(); \\n    LongBuffer lb = \\n      ((ByteBuffer)bb.rewind()).asLongBuffer(); \\n    printnb(\\\"Long Buffer \\\"); \\n    while(lb.hasRemaining()) \\n      printnb(lb.position()+ \\\" -> \\\" + lb.get() + \\\", \\\"); \\n    print(); \\n    ShortBuffer sb = \\n      ((ByteBuffer)bb.rewind()).asShortBuffer(); \\n    printnb(\\\"Short Buffer \\\"); \\n    while(sb.hasRemaining()) \\n      printnb(sb.position()+ \\\" -> \\\" + sb.get() + \\\", \\\"); \\n    print(); \\n    DoubleBuffer db = \\n      ((ByteBuffer)bb.rewind()).asDoubleBuffer(); \\n    printnb(\\\"Double Buffer \\\"); \\n    while(db.hasRemaining()) \\n      printnb(db.position()+ \\\" -> \\\" + db.get() + \\\", \\\");\",\n        \"programming_language\": \"ECL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"501271b36349343782e2b871f672e3c2\",\n        \"type\": \"source_code\",\n        \"text\": \"ByteBuffer bb = ByteBuffer.wrap(new byte[12]); \\n    bb.asCharBuffer().put(\\\"abcdef\\\"); \\n    print(Arrays.toString(bb.array())); \\n    bb.rewind(); \\n    bb.order(ByteOrder.BIG_ENDIAN); \\n    bb.asCharBuffer().put(\\\"abcdef\\\"); \\n    print(Arrays.toString(bb.array())); \\n    bb.rewind(); \\n    bb.order(ByteOrder.LITTLE_ENDIAN); \\n    bb.asCharBuffer().put(\\\"abcdef\\\"); \\n    print(Arrays.toString(bb.array()));\",\n        \"programming_language\": \"Component Pascal\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ba27fd9c2833146ad30ba8270c4e32eb\",\n        \"type\": \"source_code\",\n        \"text\": \"while(buffer.hasRemaining()) { \\n      buffer.mark(); \\n      char c1 = buffer.get(); \\n      char c2 = buffer.get(); \\n      buffer.reset(); \\n      buffer.put(c2).put(c1); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a9481fea623ab0eee316eb549e9425a2\",\n        \"type\": \"source_code\",\n        \"text\": \"char[] data = \\\"UsingBuffers\\\".toCharArray(); \\n    ByteBuffer bb = ByteBuffer.allocate(data.length * 2); \\n    CharBuffer cb = bb.asCharBuffer(); \\n    cb.put(data); \\n    print(cb.rewind()); \\n    symmetricScramble(cb); \\n    print(cb.rewind()); \\n    symmetricScramble(cb); \\n    print(cb.rewind());\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e3d9d79f0d7ce67d0070d19d9d76cbdf\",\n        \"type\": \"source_code\",\n        \"text\": \"MappedByteBuffer out = \\n      new RandomAccessFile(\\\"test.dat\\\", \\\"rw\\\").getChannel() \\n      .map(FileChannel.MapMode.READ_WRITE, 0, length); \\n    for(int i = 0; i < length; i++) \\n      out.put((byte)\\u2019x\\u2019); \\n    print(\\\"Finished writing\\\"); \\n    for(int i = length/2; i < length/2 + 6; i++) \\n      printnb((char)out.get(i));\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34f562b843c5c371c83d63f422abcd91\",\n        \"type\": \"source_code\",\n        \"text\": \"private String name; \\n    public Tester(String name) { this.name = name; } \\n    public void runTest() { \\n      System.out.print(name + \\\": \\\"); \\n      try { \\n        long start = System.nanoTime(); \\n        test(); \\n        double duration = System.nanoTime() - start; \\n        System.out.format(\\\"%.2f\\\\n\\\", duration/1.0e9); \\n      } catch(IOException e) { \\n        throw new RuntimeException(e); \\n      }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1a09b402ca90d958df711b8b733f98c0\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    public abstract void test() throws IOException;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"770f7d38d837ac6e0b810660509ddaca\",\n        \"type\": \"source_code\",\n        \"text\": \"new Tester(\\\"Stream Write\\\") { \\n      public void test() throws IOException { \\n        DataOutputStream dos = new DataOutputStream( \\n          new BufferedOutputStream( \\n            new FileOutputStream(new File(\\\"temp.tmp\\\")))); \\n        for(int i = 0; i < numOfInts; i++) \\n          dos.writeInt(i); \\n        dos.close(); \\n      } \\n    }, \\n    new Tester(\\\"Mapped Write\\\") { \\n      public void test() throws IOException { \\n        FileChannel fc = \\n          new RandomAccessFile(\\\"temp.tmp\\\", \\\"rw\\\") \\n          .getChannel(); \\n        IntBuffer ib = fc.map( \\n          FileChannel.MapMode.READ_WRITE, 0, fc.size()) \\n          .asIntBuffer(); \\n        for(int i = 0; i < numOfInts; i++) \\n          ib.put(i); \\n        fc.close(); \\n      } \\n    }, \\n    new Tester(\\\"Stream Read\\\") { \\n      public void test() throws IOException { \\n        DataInputStream dis = new DataInputStream( \\n          new BufferedInputStream( \\n            new FileInputStream(\\\"temp.tmp\\\"))); \\n        for(int i = 0; i < numOfInts; i++) \\n          dis.readInt(); \\n        dis.close(); \\n      } \\n    }, \\n    new Tester(\\\"Mapped Read\\\") { \\n      public void test() throws IOException { \\n        FileChannel fc = new FileInputStream( \\n          new File(\\\"temp.tmp\\\")).getChannel(); \\n        IntBuffer ib = fc.map( \\n          FileChannel.MapMode.READ_ONLY, 0, fc.size()) \\n          .asIntBuffer(); \\n        while(ib.hasRemaining()) \\n          ib.get(); \\n        fc.close(); \\n      } \\n    }, \\n    new Tester(\\\"Stream Read/Write\\\") { \\n      public void test() throws IOException { \\n        RandomAccessFile raf = new RandomAccessFile( \\n          new File(\\\"temp.tmp\\\"), \\\"rw\\\"); \\n        raf.writeInt(1); \\n        for(int i = 0; i < numOfUbuffInts; i++) { \\n          raf.seek(raf.length() - 4); \\n          raf.writeInt(raf.readInt()); \\n        } \\n        raf.close(); \\n      } \\n    }, \\n    new Tester(\\\"Mapped Read/Write\\\") { \\n      public void test() throws IOException {\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5c24b4db36454adbb4e9d1fa2586561a\",\n        \"type\": \"source_code\",\n        \"text\": \"FileChannel fc = new RandomAccessFile( \\n          new File(\\\"temp.tmp\\\"), \\\"rw\\\").getChannel(); \\n        IntBuffer ib = fc.map( \\n          FileChannel.MapMode.READ_WRITE, 0, fc.size()) \\n          .asIntBuffer(); \\n        ib.put(0); \\n        for(int i = 1; i < numOfUbuffInts; i++) \\n          ib.put(ib.get(i - 1)); \\n        fc.close(); \\n      } \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"561a0bbd51f63edccd68620fe579df25\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Tester test : tests) \\n      test.runTest();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"449275412ab450e8a6d2796baa61859c\",\n        \"type\": \"source_code\",\n        \"text\": \"FileOutputStream fos= new FileOutputStream(\\\"file.txt\\\"); \\n    FileLock fl = fos.getChannel().tryLock(); \\n    if(fl != null) { \\n      System.out.println(\\\"Locked File\\\"); \\n      TimeUnit.MILLISECONDS.sleep(100); \\n      fl.release(); \\n      System.out.println(\\\"Released Lock\\\"); \\n    } \\n    fos.close();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be1106168f97e9afdd39ffb61f63b1d3\",\n        \"type\": \"source_code\",\n        \"text\": \"fc = \\n      new RandomAccessFile(\\\"test.dat\\\", \\\"rw\\\").getChannel(); \\n    MappedByteBuffer out = \\n      fc.map(FileChannel.MapMode.READ_WRITE, 0, LENGTH); \\n    for(int i = 0; i < LENGTH; i++) \\n      out.put((byte)\\u2019x\\u2019); \\n    new LockAndModify(out, 0, 0 + LENGTH/3); \\n    new LockAndModify(out, LENGTH/2, LENGTH/2 + LENGTH/4);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ccbdb29ea3fab780d386b4c1ab99b0a\",\n        \"type\": \"source_code\",\n        \"text\": \"private ByteBuffer buff; \\n    private int start, end; \\n    LockAndModify(ByteBuffer mbb, int start, int end) { \\n      this.start = start; \\n      this.end = end; \\n      mbb.limit(end); \\n      mbb.position(start); \\n      buff = mbb.slice(); \\n      start(); \\n    } \\n    public void run() { \\n      try { \\n        // Exclusive lock with no overlap: \\n        FileLock fl = fc.lock(start, end, false); \\n        System.out.println(\\\"Locked: \\\"+ start +\\\" to \\\"+ end); \\n        // Perform modification: \\n        while(buff.position() < buff.limit() - 1) \\n          buff.put((byte)(buff.get() + 1)); \\n        fl.release(); \\n        System.out.println(\\\"Released: \\\"+start+\\\" to \\\"+ end); \\n      } catch(IOException e) { \\n        throw new RuntimeException(e); \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55d5245fdfd93202056c85367b928794\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length == 0) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6603d796e850d59c0591d36bf7a0f0af\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n        \\\"Usage: \\\\nGZIPcompress file\\\\n\\\" + \\n        \\\"\\\\tUses GZIP compression to compress \\\" + \\n        \\\"the file to test.gz\\\"); \\n      System.exit(1); \\n    } \\n    BufferedReader in = new BufferedReader( \\n      new FileReader(args[0])); \\n    BufferedOutputStream out = new BufferedOutputStream( \\n      new GZIPOutputStream( \\n        new FileOutputStream(\\\"test.gz\\\"))); \\n    System.out.println(\\\"Writing file\\\"); \\n    int c; \\n    while((c = in.read()) != -1) \\n      out.write(c); \\n    in.close(); \\n    out.close(); \\n    System.out.println(\\\"Reading file\\\"); \\n    BufferedReader in2 = new BufferedReader( \\n      new InputStreamReader(new GZIPInputStream( \\n        new FileInputStream(\\\"test.gz\\\")))); \\n    String s; \\n    while((s = in2.readLine()) != null) \\n      System.out.println(s);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"402b5406e99fcc517e11288934834f08\",\n        \"type\": \"source_code\",\n        \"text\": \"FileOutputStream f = new FileOutputStream(\\\"test.zip\\\"); \\n    CheckedOutputStream csum =\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5c97b638fbf126bb4064222b74436d5\",\n        \"type\": \"source_code\",\n        \"text\": \"new CheckedOutputStream(f, new Adler32()); \\n     ZipOutputStream zos = new ZipOutputStream(csum); \\n     BufferedOutputStream out = \\n      new BufferedOutputStream(zos); \\n    zos.setComment(\\\"A test of Java Zipping\\\"); \\n    // No corresponding getComment(), though. \\n    for(String arg : args) { \\n      print(\\\"Writing file \\\" + arg); \\n      BufferedReader in = \\n        new BufferedReader(new FileReader(arg)); \\n      zos.putNextEntry(new ZipEntry(arg)); \\n      int c; \\n      while((c = in.read()) != -1) \\n        out.write(c); \\n      in.close(); \\n      out.flush(); \\n    } \\n    out.close(); \\n    // Checksum valid only after the file has been closed! \\n    print(\\\"Checksum: \\\" + csum.getChecksum().getValue()); \\n    // Now extract the files: \\n    print(\\\"Reading file\\\"); \\n    FileInputStream fi = new FileInputStream(\\\"test.zip\\\"); \\n    CheckedInputStream csumi = \\n      new CheckedInputStream(fi, new Adler32()); \\n    ZipInputStream in2 = new ZipInputStream(csumi); \\n    BufferedInputStream bis = new BufferedInputStream(in2); \\n    ZipEntry ze; \\n    while((ze = in2.getNextEntry()) != null) { \\n      print(\\\"Reading file \\\" + ze); \\n      int x; \\n      while((x = bis.read()) != -1) \\n        System.out.write(x); \\n    } \\n    if(args.length == 1) \\n    print(\\\"Checksum: \\\" + csumi.getChecksum().getValue()); \\n    bis.close(); \\n    // Alternative way to open and read Zip files: \\n    ZipFile zf = new ZipFile(\\\"test.zip\\\"); \\n    Enumeration e = zf.entries(); \\n    while(e.hasMoreElements()) { \\n      ZipEntry ze2 = (ZipEntry)e.nextElement(); \\n      print(\\\"File: \\\" + ze2); \\n      // ... and extract the data as before \\n    } \\n    /* if(args.length == 1) */\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ec8653b0e14e849fecc0b3bdfac47cd6\",\n        \"type\": \"source_code\",\n        \"text\": \"new Data(rand.nextInt(10)), \\n    new Data(rand.nextInt(10)), \\n    new Data(rand.nextInt(10))\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52535fbdd10cbe6f93732b46c8da8620\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Worm constructor: \\\" + i); \\n    c = x; \\n    if(--i > 0) \\n      next = new Worm(i, (char)(x + 1));\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87a6a40c49fea4b28920f31047ac33df\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Default constructor\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"afc6ea7da304b9b0ca7ddba46d6bdace\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(\\\":\\\"); \\n    result.append(c); \\n    result.append(\\\"(\\\"); \\n    for(Data dat : d) \\n      result.append(dat); \\n    result.append(\\\")\\\"); \\n    if(next != null) \\n      result.append(next); \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74e6ced89353408075b9f6815b15e983\",\n        \"type\": \"source_code\",\n        \"text\": \"Worm w = new Worm(6, \\u2018a\\u2019); \\n    print(\\\"w = \\\" + w); \\n    ObjectOutputStream out = new ObjectOutputStream( \\n      new FileOutputStream(\\\"worm.out\\\")); \\n    out.writeObject(\\\"Worm storage\\\\n\\\"); \\n    out.writeObject(w); \\n    out.close(); // Also flushes output \\n    ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(\\\"worm.out\\\")); \\n    String s = (String)in.readObject();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2a5b6ab4898c63e046e1a63d5a592f08\",\n        \"type\": \"source_code\",\n        \"text\": \"Worm w2 = (Worm)in.readObject(); \\n    print(s + \\\"w2 = \\\" + w2); \\n    ByteArrayOutputStream bout = \\n      new ByteArrayOutputStream(); \\n    ObjectOutputStream out2 = new ObjectOutputStream(bout); \\n    out2.writeObject(\\\"Worm storage\\\\n\\\"); \\n    out2.writeObject(w); \\n    out2.flush(); \\n    ObjectInputStream in2 = new ObjectInputStream( \\n      new ByteArrayInputStream(bout.toByteArray())); \\n    s = (String)in2.readObject(); \\n    Worm w3 = (Worm)in2.readObject(); \\n    print(s + \\\"w3 = \\\" + w3);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"622c221e1c11766c41a1d801a65252d7\",\n        \"type\": \"source_code\",\n        \"text\": \"ObjectOutput out = new ObjectOutputStream( \\n      new FileOutputStream(\\\"X.file\\\")); \\n    Alien quellek = new Alien(); \\n    out.writeObject(quellek);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"badacfd2dcdd33c053c7551f6c6f7c4e\",\n        \"type\": \"source_code\",\n        \"text\": \"ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(new File(\\\"..\\\", \\\"X.file\\\"))); \\n    Object mystery = in.readObject(); \\n    System.out.println(mystery.getClass());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a66aafb00c9ed62c038fd719e1b69f44\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip1 Constructor\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"157bd2069048c9f2bd0bccd30cb998eb\",\n        \"type\": \"source_code\",\n        \"text\": \"throws IOException { \\n    print(\\\"Blip1.writeExternal\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb4e24cd049985c1bc42611e3e939bf7\",\n        \"type\": \"source_code\",\n        \"text\": \"throws IOException, ClassNotFoundException { \\n    print(\\\"Blip1.readExternal\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1908bfdba685eafe556e2cb07dc126c3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip2 Constructor\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"596f4babb3f405060d4e1dc01f1aa1f6\",\n        \"type\": \"source_code\",\n        \"text\": \"throws IOException { \\n    print(\\\"Blip2.writeExternal\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2cf0d6e2bb083d1d5b0a6bee60502693\",\n        \"type\": \"source_code\",\n        \"text\": \"throws IOException, ClassNotFoundException { \\n    print(\\\"Blip2.readExternal\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2a8bccce8bd3dc2c4d77ee279f13f5f0\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Constructing objects:\\\"); \\n    Blip1 b1 = new Blip1(); \\n    Blip2 b2 = new Blip2(); \\n    ObjectOutputStream o = new ObjectOutputStream( \\n      new FileOutputStream(\\\"Blips.out\\\")); \\n    print(\\\"Saving objects:\\\"); \\n    o.writeObject(b1);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"407ada06b0a9561b367e096e51b61eb7\",\n        \"type\": \"source_code\",\n        \"text\": \"o.writeObject(b2); \\n    o.close(); \\n    // Now get them back: \\n    ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(\\\"Blips.out\\\")); \\n    print(\\\"Recovering b1:\\\"); \\n    b1 = (Blip1)in.readObject(); \\n    // OOPS! Throws an exception:\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"584679e6fa809b01350eb7d53c2d94d3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip3 Constructor\\\"); \\n    // s, i not initialized\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d7a4557859680f1c4018302addc6e46\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip3(String x, int a)\\\"); \\n    s = x; \\n    i = a; \\n    // s & i initialized only in non-default constructor.\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2695e7d4cb42e7943958dfd11d5c14c8\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip3.writeExternal\\\"); \\n    // You must do this: \\n    out.writeObject(s); \\n    out.writeInt(i);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1031d383105f7c32bdf1f42d1786d2d2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Blip3.readExternal\\\"); \\n    // You must do this: \\n    s = (String)in.readObject(); \\n    i = in.readInt();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e5975571516633ad647b71b2758022a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Constructing objects:\\\"); \\n    Blip3 b3 = new Blip3(\\\"A String \\\", 47); \\n    print(b3); \\n    ObjectOutputStream o = new ObjectOutputStream( \\n      new FileOutputStream(\\\"Blip3.out\\\")); \\n    print(\\\"Saving object:\\\"); \\n    o.writeObject(b3); \\n    o.close(); \\n    // Now get it back: \\n    ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(\\\"Blip3.out\\\")); \\n    print(\\\"Recovering b3:\\\"); \\n    b3 = (Blip3)in.readObject(); \\n    print(b3);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2015506f6075e485359a7759c78698ad\",\n        \"type\": \"source_code\",\n        \"text\": \"username = name; \\n    password = pwd;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6998199818de058f010440e4e1625a1e\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"logon info: \\\\n   username: \\\" + username + \\n      \\\"\\\\n   date: \\\" + date + \\\"\\\\n   password: \\\" + password;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be5b4b4d69c5908b05397f4abef5f4e4\",\n        \"type\": \"source_code\",\n        \"text\": \"Logon a = new Logon(\\\"Hulk\\\", \\\"myLittlePony\\\"); \\n    print(\\\"logon a = \\\" + a); \\n    ObjectOutputStream o = new ObjectOutputStream( \\n      new FileOutputStream(\\\"Logon.out\\\")); \\n    o.writeObject(a); \\n    o.close(); \\n    TimeUnit.SECONDS.sleep(1); // Delay \\n    // Now get them back: \\n    ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(\\\"Logon.out\\\"));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"379658e66510634c7f2ef0fccbad3cc3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Recovering object at \\\" + new Date()); \\n    a = (Logon)in.readObject(); \\n    print(\\\"logon a = \\\" + a);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48c2156beb5b2697ebee2b90d10dee45\",\n        \"type\": \"source_code\",\n        \"text\": \"a = \\\"Not Transient: \\\" + aa; \\n    b = \\\"Transient: \\\" + bb;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60584824caea6a4afd9af335e8eeef00\",\n        \"type\": \"source_code\",\n        \"text\": \"stream.defaultWriteObject(); \\n    stream.writeObject(b);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66d1759771e97f932e329f2133a2fa65\",\n        \"type\": \"source_code\",\n        \"text\": \"stream.defaultReadObject(); \\n    b = (String)stream.readObject();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"80e47d6f2cf22dc8f2cca2a3d6fc4efb\",\n        \"type\": \"source_code\",\n        \"text\": \"SerialCtl sc = new SerialCtl(\\\"Test1\\\", \\\"Test2\\\"); \\n    System.out.println(\\\"Before:\\\\n\\\" + sc); \\n    ByteArrayOutputStream buf= new ByteArrayOutputStream(); \\n    ObjectOutputStream o = new ObjectOutputStream(buf); \\n    o.writeObject(sc); \\n    // Now get it back: \\n    ObjectInputStream in = new ObjectInputStream( \\n      new ByteArrayInputStream(buf.toByteArray())); \\n    SerialCtl sc2 = (SerialCtl)in.readObject(); \\n    System.out.println(\\\"After:\\\\n\\\" + sc2);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aceb3e5d6ebb7e48efe2ce3f0476c90f\",\n        \"type\": \"source_code\",\n        \"text\": \"name = nm; \\n    preferredHouse = h;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ac2541e2965c7abdc79ac8868e09f5cb\",\n        \"type\": \"source_code\",\n        \"text\": \"return name + \\\"[\\\" + super.toString() + \\n      \\\"], \\\" + preferredHouse + \\\"\\\\n\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"adfee62276000f4c78a57a04ba966e7d\",\n        \"type\": \"source_code\",\n        \"text\": \"House house = new House(); \\n    List<Animal> animals = new ArrayList<Animal>(); \\n    animals.add(new Animal(\\\"Bosco the dog\\\", house)); \\n    animals.add(new Animal(\\\"Ralph the hamster\\\", house)); \\n    animals.add(new Animal(\\\"Molly the cat\\\", house)); \\n    print(\\\"animals: \\\" + animals); \\n    ByteArrayOutputStream buf1 = \\n      new ByteArrayOutputStream(); \\n    ObjectOutputStream o1 = new ObjectOutputStream(buf1); \\n    o1.writeObject(animals); \\n    o1.writeObject(animals); // Write a 2nd set \\n    // Write to a different stream: \\n    ByteArrayOutputStream buf2 = \\n      new ByteArrayOutputStream(); \\n    ObjectOutputStream o2 = new ObjectOutputStream(buf2); \\n    o2.writeObject(animals); \\n    // Now get them back: \\n    ObjectInputStream in1 = new ObjectInputStream( \\n      new ByteArrayInputStream(buf1.toByteArray())); \\n    ObjectInputStream in2 = new ObjectInputStream( \\n      new ByteArrayInputStream(buf2.toByteArray())); \\n    List \\n      animals1 = (List)in1.readObject(), \\n      animals2 = (List)in1.readObject(), \\n      animals3 = (List)in2.readObject(); \\n    print(\\\"animals1: \\\" + animals1); \\n    print(\\\"animals2: \\\" + animals2); \\n    print(\\\"animals3: \\\" + animals3);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5db8d342add4150df9dd0937ae231de0\",\n        \"type\": \"source_code\",\n        \"text\": \"xPos = xVal; \\n    yPos = yVal; \\n    dimension = dim;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5824391756364a45cb78a30efaec32ce\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass() + \\n      \\\"color[\\\" + getColor() + \\\"] xPos[\\\" + xPos + \\n      \\\"] yPos[\\\" + yPos + \\\"] dim[\\\" + dimension + \\\"]\\\\n\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"188a7de3e6c650b281a6b827f6c15cf3\",\n        \"type\": \"source_code\",\n        \"text\": \"int xVal = rand.nextInt(100); \\n    int yVal = rand.nextInt(100); \\n    int dim = rand.nextInt(100); \\n    switch(counter++ % 3) { \\n      default: \\n      case 0: return new Circle(xVal, yVal, dim); \\n      case 1: return new Square(xVal, yVal, dim); \\n      case 2: return new Line(xVal, yVal, dim); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4008ba29c5d55d87a05341a09c05258f\",\n        \"type\": \"source_code\",\n        \"text\": \"super(xVal, yVal, dim);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fd7a0e72e2f46cd15391e25ed082925\",\n        \"type\": \"source_code\",\n        \"text\": \"super(xVal, yVal, dim); \\n    color = RED;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4008ba29c5d55d87a05341a09c05258f\",\n        \"type\": \"source_code\",\n        \"text\": \"super(xVal, yVal, dim);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0144ea6a05117e948c205a44698eeb91\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Class<? extends Shape>> shapeTypes = \\n      new ArrayList<Class<? extends Shape>>(); \\n    // Add references to the class objects: \\n    shapeTypes.add(Circle.class); \\n    shapeTypes.add(Square.class); \\n    shapeTypes.add(Line.class); \\n    List<Shape> shapes = new ArrayList<Shape>(); \\n    // Make some shapes:\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa89d9442e1a2d1b30423143a8bb662d\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 10; i++) \\n      shapes.add(Shape.randomFactory()); \\n    // Set all the static colors to GREEN: \\n    for(int i = 0; i < 10; i++) \\n      ((Shape)shapes.get(i)).setColor(Shape.GREEN); \\n    // Save the state vector: \\n    ObjectOutputStream out = new ObjectOutputStream( \\n      new FileOutputStream(\\\"CADState.out\\\")); \\n    out.writeObject(shapeTypes); \\n    Line.serializeStaticState(out); \\n    out.writeObject(shapes); \\n    // Display the shapes: \\n    System.out.println(shapes);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1a7f261d5d0b72ca462d4d60b89fd37b\",\n        \"type\": \"source_code\",\n        \"text\": \"ObjectInputStream in = new ObjectInputStream( \\n      new FileInputStream(\\\"CADState.out\\\")); \\n    // Read in the same order they were written: \\n    List<Class<? extends Shape>> shapeTypes = \\n      (List<Class<? extends Shape>>)in.readObject(); \\n    Line.deserializeStaticState(in);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"172781a481aa7d1eff85cedd753b2a81\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Shape> shapes = (List<Shape>)in.readObject(); \\n    System.out.println(shapes);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef8f87caeca985420caa5d6157ff29f8\",\n        \"type\": \"source_code\",\n        \"text\": \"this.first = first; \\n    this.last = last;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa68e87d3721cf05eb8d619dbff62071\",\n        \"type\": \"source_code\",\n        \"text\": \"Element person = new Element(\\\"person\\\"); \\n    Element firstName = new Element(\\\"first\\\"); \\n    firstName.appendChild(first); \\n    Element lastName = new Element(\\\"last\\\"); \\n    lastName.appendChild(last); \\n    person.appendChild(firstName); \\n    person.appendChild(lastName); \\n    return person;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcc2d04369aeb359b51e8c747172c212\",\n        \"type\": \"source_code\",\n        \"text\": \"first= person.getFirstChildElement(\\\"first\\\").getValue(); \\n    last = person.getFirstChildElement(\\\"last\\\").getValue();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b804621c995dde495f3e16e3b76312e2\",\n        \"type\": \"source_code\",\n        \"text\": \"Serializer serializer= new Serializer(os,\\\"ISO-8859-1\\\"); \\n    serializer.setIndent(4); \\n    serializer.setMaxLength(60); \\n    serializer.write(doc); \\n    serializer.flush();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"412bff54d9ec70d8ab818f33671ab1f9\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Person> people = Arrays.asList( \\n      new Person(\\\"Dr. Bunsen\\\", \\\"Honeydew\\\"), \\n      new Person(\\\"Gonzo\\\", \\\"The Great\\\"), \\n      new Person(\\\"Phillip J.\\\", \\\"Fry\\\")); \\n    System.out.println(people); \\n    Element root = new Element(\\\"people\\\"); \\n    for(Person p : people) \\n      root.appendChild(p.getXML()); \\n    Document doc = new Document(root); \\n    format(System.out, doc); \\n    format(new BufferedOutputStream(new FileOutputStream( \\n      \\\"People.xml\\\")), doc);\",\n        \"programming_language\": \"World of Warcraft TOC\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"463fcf1c857b47d0f22b75246a0930bd\",\n        \"type\": \"source_code\",\n        \"text\": \"<person>\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"430169ab63e9798b3a86087b1ba4c307\",\n        \"type\": \"source_code\",\n        \"text\": \"<first>Dr. Bunsen</first> \\n        <last>Honeydew</last> \\n    </person> \\n    <person> \\n        <first>Gonzo</first> \\n        <last>The Great</last> \\n    </person> \\n    <person> \\n        <first>Phillip J.</first> \\n        <last>Fry</last> \\n    </person>\",\n        \"programming_language\": \"XML\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4993f51fc538df1d0491b4e1e662f2cb\",\n        \"type\": \"source_code\",\n        \"text\": \"Document doc = new Builder().build(fileName); \\n    Elements elements = \\n      doc.getRootElement().getChildElements(); \\n    for(int i = 0; i < elements.size(); i++) \\n      add(new Person(elements.get(i)));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8fcf903d379ef0f6c0cc56a32ac4dc0\",\n        \"type\": \"source_code\",\n        \"text\": \"People p = new People(\\\"People.xml\\\"); \\n    System.out.println(p);\",\n        \"programming_language\": \"World of Warcraft TOC\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04f9b4ec4c9e91d43062fa3d58586f13\",\n        \"type\": \"source_code\",\n        \"text\": \"Preferences prefs = Preferences \\n      .userNodeForPackage(PreferencesDemo.class); \\n    prefs.put(\\\"Location\\\", \\\"Oz\\\"); \\n    prefs.put(\\\"Footwear\\\", \\\"Ruby Slippers\\\"); \\n    prefs.putInt(\\\"Companions\\\", 4); \\n    prefs.putBoolean(\\\"Are there witches?\\\", true); \\n    int usageCount = prefs.getInt(\\\"UsageCount\\\", 0); \\n    usageCount++; \\n    prefs.putInt(\\\"UsageCount\\\", usageCount); \\n    for(String key : prefs.keys()) \\n      print(key + \\\": \\\"+ prefs.get(key, null)); \\n    // You must always provide a default value: \\n    print(\\\"How many companions does Dorothy have? \\\" + \\n      prefs.getInt(\\\"Companions\\\", 0));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34d9ee91c0a434e69af96fea98f8d520\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Shrubbery s : Shrubbery.values()) { \\n      print(s + \\\" ordinal: \\\" + s.ordinal()); \\n      printnb(s.compareTo(Shrubbery.CRAWLING) + \\\" \\\"); \\n      printnb(s.equals(Shrubbery.CRAWLING) + \\\" \\\"); \\n      print(s == Shrubbery.CRAWLING); \\n      print(s.getDeclaringClass()); \\n      print(s.name()); \\n      print(\\\"----------------------\\\"); \\n    } \\n    // Produce an enum value from a string name: \\n    for(String s : \\\"HANGING CRAWLING GROUND\\\".split(\\\" \\\")) { \\n      Shrubbery shrub = Enum.valueOf(Shrubbery.class, s); \\n      print(shrub); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c46dd6f74bfb12302201fd913b49849a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(new Burrito(NOT)); \\n    System.out.println(new Burrito(MEDIUM)); \\n    System.out.println(new Burrito(HOT));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a751c5f08b94f9ea857d7e75893343ef\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Slippers, crushed by Dorothy\\u2019s house\\\"),\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"36b82a35fa86dd5318aa5ff50045d91e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.description = description;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fed558b87447d5b2fccc4b419d0d4680\",\n        \"type\": \"source_code\",\n        \"text\": \"for(OzWitch witch : OzWitch.values()) \\n      print(witch + \\\": \\\" + witch.getDescription());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8278ad869013c546dcd5e190c2e22c5e\",\n        \"type\": \"source_code\",\n        \"text\": \"String id = name(); \\n    String lower = id.substring(1).toLowerCase(); \\n    return id.charAt(0) + lower;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f97a616ac0226130340d9508c27d0ea\",\n        \"type\": \"source_code\",\n        \"text\": \"for(SpaceShip s : values()) { \\n      System.out.println(s); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"890ae41eac9034d525a1fc677623b292\",\n        \"type\": \"source_code\",\n        \"text\": \"switch(color) { \\n      // Note that you don\\u2019t have to say Signal.RED \\n      // in the case statement: \\n      case RED:    color = Signal.GREEN; \\n                   break; \\n      case GREEN:  color = Signal.YELLOW; \\n                   break; \\n      case YELLOW: color = Signal.RED; \\n                   break; \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c59f7e8cc6606912bfc0075265e8ed8\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"The traffic light is \\\" + color;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a9eb60604f833c2362da2f285a8f0099\",\n        \"type\": \"source_code\",\n        \"text\": \"TrafficLight t = new TrafficLight(); \\n    for(int i = 0; i < 7; i++) { \\n      print(t); \\n      t.change(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"99db0879490b74483ebcc3008d52bd9f\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"----- Analyzing \\\" + enumClass + \\\" -----\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66fceff8a9e7c8edd9076501a3adc440\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Interfaces:\\\"); \\n    for(Type t : enumClass.getGenericInterfaces()) \\n      print(t); \\n    print(\\\"Base: \\\" + enumClass.getSuperclass()); \\n    print(\\\"Methods: \\\"); \\n    Set<String> methods = new TreeSet<String>(); \\n    for(Method m : enumClass.getMethods()) \\n      methods.add(m.getName()); \\n    print(methods); \\n    return methods;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa7db23789a13ab3d8ef267a9308a784\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> exploreMethods = analyze(Explore.class); \\n    Set<String> enumMethods = analyze(Enum.class); \\n    print(\\\"Explore.containsAll(Enum)? \\\" + \\n      exploreMethods.containsAll(enumMethods)); \\n    printnb(\\\"Explore.removeAll(Enum): \\\"); \\n    exploreMethods.removeAll(enumMethods); \\n    print(exploreMethods); \\n    // Decompile the code for the enum: \\n    OSExecute.command(\\\"javap Explore\\\");\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68f88f1f97fb8ab0081ed3886c387e9a\",\n        \"type\": \"source_code\",\n        \"text\": \"public static final Explore HERE; \\n    public static final Explore THERE; \\n    public static final Explore[] values(); \\n    public static Explore valueOf(java.lang.String); \\n    static {};\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb3db90aca0032cc0e289b27ce0b2455\",\n        \"type\": \"source_code\",\n        \"text\": \"Search[] vals = Search.values(); \\n    Enum e = Search.HITHER; // Upcast \\n    // e.values(); // No values() in Enum \\n    for(Enum en : e.getClass().getEnumConstants()) \\n      System.out.println(en);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"409a12463275e0b3bfcd0ae0f8146c66\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<Integer> intClass = Integer.class; \\n    try { \\n      for(Object en : intClass.getEnumConstants()) \\n        System.out.println(en); \\n    } catch(Exception e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"920643eec066de3cff40ec5d59152a42\",\n        \"type\": \"source_code\",\n        \"text\": \"return values()[rand.nextInt(values().length)];\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bab1eb6dec625d6d1b109de9628e908b\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(rg.next() + \\\", \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"788cb8535e1dcd9b0f895b3b73f636ed\",\n        \"type\": \"source_code\",\n        \"text\": \"// Choose any instance: \\n    CartoonCharacter cc = CartoonCharacter.BOB; \\n    for(int i = 0; i < 10; i++) \\n      printNext(cc);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b55d8a8a5fabf3cd0f27e92efee397ff\",\n        \"type\": \"source_code\",\n        \"text\": \"return random(ec.getEnumConstants());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"46e5f42c560d33305177702b474f7429\",\n        \"type\": \"source_code\",\n        \"text\": \"return values[rand.nextInt(values.length)];\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cdd4668d64fa3adaf34c45e23259e4cf\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 20; i++) \\n      System.out.print(Enums.random(Activity.class) + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ae2a7af4058f0e623c85211fa01e877\",\n        \"type\": \"source_code\",\n        \"text\": \"SALAD, SOUP, SPRING_ROLLS;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c8f489cbefdb3c8702c300517e983a9\",\n        \"type\": \"source_code\",\n        \"text\": \"LASAGNE, BURRITO, PAD_THAI, \\n    LENTILS, HUMMOUS, VINDALOO;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3cdad0233ff597aa1122fda7da5386ec\",\n        \"type\": \"source_code\",\n        \"text\": \"TIRAMISU, GELATO, BLACK_FOREST_CAKE, \\n    FRUIT, CREME_CARAMEL;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b0c0f53db6d19c0e92c80318ef377e3\",\n        \"type\": \"source_code\",\n        \"text\": \"BLACK_COFFEE, DECAF_COFFEE, ESPRESSO, \\n    LATTE, CAPPUCCINO, TEA, HERB_TEA;\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8894291a341de98c14adf340e70a49ca\",\n        \"type\": \"source_code\",\n        \"text\": \"Food food = Appetizer.SALAD; \\n    food = MainCourse.LASAGNE; \\n    food = Dessert.GELATO; \\n    food = Coffee.CAPPUCCINO;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f24e63465f6d0b5b2ebe93220ea6d71\",\n        \"type\": \"source_code\",\n        \"text\": \"values = kind.getEnumConstants();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ce76e3a4c678ea383878e5cbfab3aa3\",\n        \"type\": \"source_code\",\n        \"text\": \"return Enums.random(values);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"444679e10c2e13b02e19a5e4935d0a04\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) { \\n      for(Course course : Course.values()) { \\n        Food food = course.randomSelection(); \\n        System.out.println(food); \\n      } \\n      System.out.println(\\\"---\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f24e63465f6d0b5b2ebe93220ea6d71\",\n        \"type\": \"source_code\",\n        \"text\": \"values = kind.getEnumConstants();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d9eb615c8fd4fa2b90eefcb0b87bf33\",\n        \"type\": \"source_code\",\n        \"text\": \"enum Stock implements Security { SHORT, LONG, MARGIN } \\n    enum Bond implements Security { MUNICIPAL, JUNK }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ce76e3a4c678ea383878e5cbfab3aa3\",\n        \"type\": \"source_code\",\n        \"text\": \"return Enums.random(values);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"851b15bd09f9741cc428cdd62ec8c417\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 10; i++) { \\n      SecurityCategory category = \\n        Enums.random(SecurityCategory.class); \\n      System.out.println(category + \\\": \\\" + \\n        category.randomSelection()); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f24e63465f6d0b5b2ebe93220ea6d71\",\n        \"type\": \"source_code\",\n        \"text\": \"values = kind.getEnumConstants();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dabcb7fee2cccf62e57dea264e249497\",\n        \"type\": \"source_code\",\n        \"text\": \"enum Appetizer implements Food { \\n      SALAD, SOUP, SPRING_ROLLS; \\n    } \\n    enum MainCourse implements Food { \\n      LASAGNE, BURRITO, PAD_THAI, \\n      LENTILS, HUMMOUS, VINDALOO; \\n    } \\n    enum Dessert implements Food { \\n      TIRAMISU, GELATO, BLACK_FOREST_CAKE, \\n      FRUIT, CREME_CARAMEL; \\n    } \\n    enum Coffee implements Food { \\n      BLACK_COFFEE, DECAF_COFFEE, ESPRESSO, \\n      LATTE, CAPPUCCINO, TEA, HERB_TEA; \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ce76e3a4c678ea383878e5cbfab3aa3\",\n        \"type\": \"source_code\",\n        \"text\": \"return Enums.random(values);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"766e6a78401b242982199b5c149a325b\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) { \\n      for(Meal2 meal : Meal2.values()) { \\n        Food food = meal.randomSelection(); \\n        System.out.println(food); \\n      } \\n      System.out.println(\\\"---\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9435a48e798779f307b4839a6b4ecf1c\",\n        \"type\": \"source_code\",\n        \"text\": \"EnumSet<AlarmPoints> points = \\n      EnumSet.noneOf(AlarmPoints.class); // Empty set \\n    points.add(BATHROOM); \\n    print(points); \\n    points.addAll(EnumSet.of(STAIR1, STAIR2, KITCHEN)); \\n    print(points); \\n    points = EnumSet.allOf(AlarmPoints.class); \\n    points.removeAll(EnumSet.of(STAIR1, STAIR2, KITCHEN)); \\n    print(points); \\n    points.removeAll(EnumSet.range(OFFICE1, OFFICE4)); \\n    print(points); \\n    points = EnumSet.complementOf(points); \\n    print(points);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d07fb7bb4ed5ed09b67ec368ae1072c0\",\n        \"type\": \"source_code\",\n        \"text\": \"A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, \\n    A22, A23, A24, A25, A26, A27, A28, A29, A30, A31, A32, \\n    A33, A34, A35, A36, A37, A38, A39, A40, A41, A42, A43, \\n    A44, A45, A46, A47, A48, A49, A50, A51, A52, A53, A54, \\n    A55, A56, A57, A58, A59, A60, A61, A62, A63, A64, A65, \\n    A66, A67, A68, A69, A70, A71, A72, A73, A74, A75 }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"63525907ac263b25be31447ed2324d05\",\n        \"type\": \"source_code\",\n        \"text\": \"EnumSet<Big> bigEnumSet = EnumSet.allOf(Big.class); \\n    System.out.println(bigEnumSet);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b29b6fff611252d50a5bbec02f957d99\",\n        \"type\": \"source_code\",\n        \"text\": \"EnumMap<AlarmPoints,Command> em = \\n      new EnumMap<AlarmPoints,Command>(AlarmPoints.class); \\n    em.put(KITCHEN, new Command() { \\n      public void action() { print(\\\"Kitchen fire!\\\"); } \\n    }); \\n    em.put(BATHROOM, new Command() { \\n      public void action() { print(\\\"Bathroom alert!\\\"); } \\n    }); \\n    for(Map.Entry<AlarmPoints,Command> e : em.entrySet()) { \\n      printnb(e.getKey() + \\\": \\\"); \\n      e.getValue().action(); \\n    } \\n    try { // If there\\u2019s no value for a particular key: \\n      em.get(UTILITY).action(); \\n    } catch(Exception e) { \\n      print(e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f7fce118a85b76c7cb64dc5eb7b3ee2\",\n        \"type\": \"source_code\",\n        \"text\": \"String getInfo() { \\n      return \\n        DateFormat.getDateInstance().format(new Date()); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38988002c01163d8302123b9913d9feb\",\n        \"type\": \"source_code\",\n        \"text\": \"String getInfo() { \\n      return System.getenv(\\\"CLASSPATH\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"561772829f3a2b35a7f3eeea708093d1\",\n        \"type\": \"source_code\",\n        \"text\": \"String getInfo() { \\n      return System.getProperty(\\\"java.version\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"00843c22892fbbd98bd2e614710530c1\",\n        \"type\": \"source_code\",\n        \"text\": \"for(ConstantSpecificMethod csm : values()) \\n      System.out.println(csm.getInfo());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c66842b3dfaa73d7fcf3c0f22a4865da\",\n        \"type\": \"source_code\",\n        \"text\": \"UNDERBODY { \\n      void action() { print(\\\"Spraying the underbody\\\"); } \\n    }, \\n    WHEELWASH { \\n      void action() { print(\\\"Washing the wheels\\\"); } \\n    }, \\n    PREWASH { \\n      void action() { print(\\\"Loosening the dirt\\\"); } \\n    }, \\n    BASIC { \\n      void action() { print(\\\"The basic wash\\\"); } \\n    }, \\n    HOTWAX { \\n      void action() { print(\\\"Applying hot wax\\\"); } \\n    }, \\n    RINSE { \\n      void action() { print(\\\"Rinsing\\\"); } \\n    }, \\n    BLOWDRY { \\n      void action() { print(\\\"Blowing dry\\\"); } \\n    }; \\n    abstract void action();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"776c6b2ca44b861b1e5a4da6263fd318\",\n        \"type\": \"source_code\",\n        \"text\": \"EnumSet.of(Cycle.BASIC, Cycle.RINSE);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ccfde6802471a3e309b06e598951827f\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Cycle c : cycles) \\n      c.action();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"507241cba0c5f6eb6c691c6e81830ce3\",\n        \"type\": \"source_code\",\n        \"text\": \"CarWash wash = new CarWash(); \\n    print(wash); \\n    wash.washCar(); \\n    // Order of addition is unimportant: \\n    wash.add(Cycle.BLOWDRY); \\n    wash.add(Cycle.BLOWDRY); // Duplicates ignored \\n    wash.add(Cycle.RINSE); \\n    wash.add(Cycle.HOTWAX); \\n    print(wash); \\n    wash.washCar();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37233c462cd8af5ee87ec14bf9bbf354\",\n        \"type\": \"source_code\",\n        \"text\": \"void f() { print(\\\"Overridden method\\\"); }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d84b0c024d3ede3fddc66a9c8e7fc8cd\",\n        \"type\": \"source_code\",\n        \"text\": \"for(OverrideConstantSpecific ocs : values()) { \\n      printnb(ocs + \\\": \\\"); \\n      ocs.f(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7038893393ecdfe255b255dac4b4b01c\",\n        \"type\": \"source_code\",\n        \"text\": \"return toString() + \\n      \\\", General Delivery: \\\" + generalDelivery + \\n      \\\", Address Scanability: \\\" + scannability + \\n      \\\", Address Readability: \\\" + readability + \\n      \\\", Address Address: \\\" + address + \\n      \\\", Return address: \\\" + returnAddress;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61407ba4d61134f491fb69c0e6ab8ef9\",\n        \"type\": \"source_code\",\n        \"text\": \"Mail m = new Mail(); \\n    m.generalDelivery= Enums.random(GeneralDelivery.class); \\n    m.scannability = Enums.random(Scannability.class); \\n    m.readability = Enums.random(Readability.class); \\n    m.address = Enums.random(Address.class); \\n    m.returnAddress = Enums.random(ReturnAddress.class); \\n    return m;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0fc75aefe1f481ba56bb0ac7ff5c2a23\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterable<Mail>() { \\n      int n = count; \\n      public Iterator<Mail> iterator() { \\n        return new Iterator<Mail>() { \\n          public boolean hasNext() { return n-- > 0; } \\n          public Mail next() { return randomMail(); } \\n          public void remove() { // Not implemented \\n            throw new UnsupportedOperationException(); \\n          } \\n        }; \\n      } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed0cfcabf78d03605c9c7f74a3c4ca1a\",\n        \"type\": \"source_code\",\n        \"text\": \"GENERAL_DELIVERY { \\n      boolean handle(Mail m) { \\n        switch(m.generalDelivery) { \\n          case YES: \\n            print(\\\"Using general delivery for \\\" + m); \\n            return true; \\n          default: return false; \\n        }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c6b49ac9397618dbfd74a6e03420e2a6\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    }, \\n    MACHINE_SCAN { \\n      boolean handle(Mail m) { \\n        switch(m.scannability) { \\n          case UNSCANNABLE: return false; \\n          default: \\n            switch(m.address) { \\n              case INCORRECT: return false; \\n              default: \\n                print(\\\"Delivering \\\"+ m + \\\" automatically\\\"); \\n                return true; \\n            } \\n        } \\n      } \\n    }, \\n    VISUAL_INSPECTION { \\n      boolean handle(Mail m) { \\n        switch(m.readability) { \\n          case ILLEGIBLE: return false; \\n          default: \\n            switch(m.address) { \\n              case INCORRECT: return false; \\n              default: \\n                print(\\\"Delivering \\\" + m + \\\" normally\\\"); \\n                return true; \\n            } \\n        } \\n      } \\n    }, \\n    RETURN_TO_SENDER { \\n      boolean handle(Mail m) { \\n        switch(m.returnAddress) { \\n          case MISSING: return false; \\n          default: \\n            print(\\\"Returning \\\" + m + \\\" to sender\\\"); \\n            return true; \\n        } \\n      } \\n    }; \\n    abstract boolean handle(Mail m);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"250015f2b0a8e21fd04fc0fde3b3b2ac\",\n        \"type\": \"source_code\",\n        \"text\": \"for(MailHandler handler : MailHandler.values()) \\n      if(handler.handle(m)) \\n        return; \\n    print(m + \\\" is a dead letter\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3dfac4c25083b710480dee3632fb7e2a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Mail mail : Mail.generator(10)) { \\n      print(mail.details()); \\n      handle(mail); \\n      print(\\\"*****\\\"); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f1035709e91fa4e207f7f6a225e828a5\",\n        \"type\": \"source_code\",\n        \"text\": \"public int amount() { // Disallow \\n      throw new RuntimeException(\\\"ABORT.amount()\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"330e5cf5755889cabe50f97203d43bd1\",\n        \"type\": \"source_code\",\n        \"text\": \"public int amount() { // Disallow \\n      throw new RuntimeException(\\\"SHUT_DOWN.amount()\\\"); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fba2174db6ec5f4d8d5abfb159964306\",\n        \"type\": \"source_code\",\n        \"text\": \"// Don\\u2019t include STOP: \\n    return values()[rand.nextInt(values().length - 1)];\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65f8706c0e139ea4f3597133146d3372\",\n        \"type\": \"source_code\",\n        \"text\": \"new EnumMap<Input,Category>(Input.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d09f31997957aebe763b66a0c30ef8f4\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Category c : Category.class.getEnumConstants()) \\n      for(Input type : c.values) \\n        categories.put(type, c);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"96c93c96d9bcd4f78aea14c5b62ed3f6\",\n        \"type\": \"source_code\",\n        \"text\": \"return categories.get(input);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35e182433b27904da33b246d2be2733a\",\n        \"type\": \"source_code\",\n        \"text\": \"RESTING { \\n      void next(Input input) { \\n        switch(Category.categorize(input)) { \\n          case MONEY: \\n            amount += input.amount(); \\n            state = ADDING_MONEY; \\n            break; \\n          case SHUT_DOWN: \\n            state = TERMINAL; \\n          default: \\n        } \\n      } \\n    },\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aad6c1dfa7a686b5fbe12e7b69d7f0cc\",\n        \"type\": \"source_code\",\n        \"text\": \"ADDING_MONEY { \\n      void next(Input input) { \\n        switch(Category.categorize(input)) { \\n          case MONEY: \\n            amount += input.amount(); \\n            break; \\n          case ITEM_SELECTION: \\n            selection = input; \\n            if(amount < selection.amount()) \\n              print(\\\"Insufficient money for \\\" + selection); \\n            else state = DISPENSING; \\n            break; \\n          case QUIT_TRANSACTION: \\n            state = GIVING_CHANGE; \\n            break; \\n          case SHUT_DOWN: \\n            state = TERMINAL; \\n          default: \\n        } \\n      } \\n    },\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4927872571033a0c42010779476c479b\",\n        \"type\": \"source_code\",\n        \"text\": \"DISPENSING(StateDuration.TRANSIENT) { \\n      void next() { \\n        print(\\\"here is your \\\" + selection); \\n        amount -= selection.amount(); \\n        state = GIVING_CHANGE; \\n      } \\n    }, \\n    GIVING_CHANGE(StateDuration.TRANSIENT) { \\n      void next() { \\n        if(amount > 0) {\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07a66a781ee9e04dbf768c4b41d01ef4\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Your change: \\\" + amount); \\n          amount = 0; \\n        } \\n        state = RESTING; \\n      } \\n    },\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b43725c3f6a048f7987d8c8d56c67b1\",\n        \"type\": \"source_code\",\n        \"text\": \"TERMINAL { void output() { print(\\\"Halted\\\"); } }; \\n    private boolean isTransient = false; \\n    State() {} \\n    State(StateDuration trans) { isTransient = true; } \\n    void next(Input input) { \\n      throw new RuntimeException(\\\"Only call \\\" + \\n        \\\"next(Input input) for non-transient states\\\"); \\n    } \\n    void next() { \\n      throw new RuntimeException(\\\"Only call next() for \\\" + \\n        \\\"StateDuration.TRANSIENT states\\\"); \\n    } \\n    void output() { print(amount); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"91b00e99128b7fa4bd1eda3b7706cbac\",\n        \"type\": \"source_code\",\n        \"text\": \"while(state != State.TERMINAL) { \\n      state.next(gen.next()); \\n      while(state.isTransient) \\n        state.next(); \\n      state.output(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57d3402c26dc71f9141d6f8e80b81719\",\n        \"type\": \"source_code\",\n        \"text\": \"Generator<Input> gen = new RandomInputGenerator(); \\n    if(args.length == 1) \\n      gen = new FileInputGenerator(args[0]); \\n    run(gen);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12c5dffc399d58ae1460a5f2ba1d9e1e\",\n        \"type\": \"source_code\",\n        \"text\": \"input = new TextFile(fileName, \\\";\\\").iterator();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43a12216e6c4f84e1d5e255f84438467\",\n        \"type\": \"source_code\",\n        \"text\": \"if(!input.hasNext()) \\n      return null; \\n    return Enum.valueOf(Input.class, input.next().trim());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74fece90dbc56e2b19588b31ad6444bf\",\n        \"type\": \"source_code\",\n        \"text\": \"switch(rand.nextInt(3)) { \\n      default: \\n      case 0: return new Scissors(); \\n      case 1: return new Paper(); \\n      case 2: return new Rock(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4807c048a4b6874390311ce749e8425c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n      a + \\\" vs. \\\" + b + \\\": \\\" +  a.compete(b));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e3be2f1c2e2ba0c96f9f22d044532d56\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < SIZE; i++) \\n      match(newItem(), newItem());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebc691222e869d8c8f732450af11a6da\",\n        \"type\": \"source_code\",\n        \"text\": \"this.vPAPER = paper; \\n    this.vSCISSORS = scissors; \\n    this.vROCK = rock;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"494f0d9530f8b61686dd3a78bd1faa10\",\n        \"type\": \"source_code\",\n        \"text\": \"switch(it) { \\n      default: \\n      case PAPER: return vPAPER; \\n      case SCISSORS: return vSCISSORS; \\n      case ROCK: return vROCK; \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad21e401e36bba35fed0abb5bfb6dd60\",\n        \"type\": \"source_code\",\n        \"text\": \"RoShamBo.play(RoShamBo2.class, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4807c048a4b6874390311ce749e8425c\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n      a + \\\" vs. \\\" + b + \\\": \\\" +  a.compete(b));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"73ce99faa7bd0d2b5daa1bc1c3141b75\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < size; i++)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1f40d31319ae1188d752b313353de17b\",\n        \"type\": \"source_code\",\n        \"text\": \"match( \\n        Enums.random(rsbClass),Enums.random(rsbClass));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c7dc5cb3fe78eb6101263c90786771a8\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo3 it) { \\n      switch(it) { \\n        default: // To placate the compiler \\n        case PAPER: return DRAW; \\n        case SCISSORS: return LOSE; \\n        case ROCK: return WIN; \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65e7a055502957d3f1424aa59d5f7a4e\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo3 it) { \\n      switch(it) { \\n        default: \\n        case PAPER: return WIN; \\n        case SCISSORS: return DRAW; \\n        case ROCK: return LOSE; \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c82b0cfc8ffbb2767b0c173b79753125\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo3 it) { \\n      switch(it) { \\n        default: \\n        case PAPER: return LOSE; \\n        case SCISSORS: return WIN; \\n        case ROCK: return DRAW; \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f270ce870381a109111a82152713f0a2\",\n        \"type\": \"source_code\",\n        \"text\": \"RoShamBo.play(RoShamBo3.class, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbbfc3cd1360c7f9a1f93bbf6a1f9537\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo4 opponent) { \\n      return compete(SCISSORS, opponent); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ce37f8b0e39b482736fbccd656a8d889\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo4 opponent) { \\n      return compete(PAPER, opponent); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db1fb8e4848c32ee45d16a19de4c96a9\",\n        \"type\": \"source_code\",\n        \"text\": \"public Outcome compete(RoShamBo4 opponent) { \\n      return compete(ROCK, opponent); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f07cbe353bfbeddc5880a07b7a39c85e\",\n        \"type\": \"source_code\",\n        \"text\": \"return ((opponent == this) ? Outcome.DRAW \\n        : ((opponent == loser) ? Outcome.WIN \\n                               : Outcome.LOSE));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b6ea9ade6d0f416ce9a52cfcb5ab457\",\n        \"type\": \"source_code\",\n        \"text\": \"RoShamBo.play(RoShamBo4.class, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68aa36b7b6d1932c11fa4b4223a6f856\",\n        \"type\": \"source_code\",\n        \"text\": \"table = new EnumMap<RoShamBo5, \\n      EnumMap<RoShamBo5,Outcome>>(RoShamBo5.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7872322fcd69bbc5dbc6fdd177fdead5\",\n        \"type\": \"source_code\",\n        \"text\": \"for(RoShamBo5 it : RoShamBo5.values()) \\n      table.put(it, \\n        new EnumMap<RoShamBo5,Outcome>(RoShamBo5.class)); \\n    initRow(PAPER, DRAW, LOSE, WIN);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c12b0f82767b2825a05d40568bd61fb\",\n        \"type\": \"source_code\",\n        \"text\": \"initRow(SCISSORS, WIN, DRAW, LOSE); \\n    initRow(ROCK, LOSE, WIN, DRAW);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"512026adbf3ab68a9faad9910d3ebd0f\",\n        \"type\": \"source_code\",\n        \"text\": \"Outcome vPAPER, Outcome vSCISSORS, Outcome vROCK) { \\n    EnumMap<RoShamBo5,Outcome> row = \\n      RoShamBo5.table.get(it); \\n    row.put(RoShamBo5.PAPER, vPAPER); \\n    row.put(RoShamBo5.SCISSORS, vSCISSORS); \\n    row.put(RoShamBo5.ROCK, vROCK);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d55e03f79662c9d456de8d9a8a30e3b\",\n        \"type\": \"source_code\",\n        \"text\": \"return table.get(this).get(it);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6511c25b2cc1abfc69db573e0b95faa5\",\n        \"type\": \"source_code\",\n        \"text\": \"RoShamBo.play(RoShamBo5.class, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cfbb4006ab957db3165d5cd40bc42a2b\",\n        \"type\": \"source_code\",\n        \"text\": \"{ DRAW, LOSE, WIN }, // PAPER \\n    { WIN, DRAW, LOSE }, // SCISSORS \\n    { LOSE, WIN, DRAW }, // ROCK\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4cedb0e8b897b71296bab77aff4f4b6\",\n        \"type\": \"source_code\",\n        \"text\": \"return table[this.ordinal()][other.ordinal()];\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a388558f9d64f20bc3b3b7444a1ee5ea\",\n        \"type\": \"source_code\",\n        \"text\": \"RoShamBo.play(RoShamBo6.class, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"772dcd07b7719a68638d5bd7f6618efc\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Executing..\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"197cf2e83d66f7a35db305f2638cd48d\",\n        \"type\": \"source_code\",\n        \"text\": \"return (password.matches(\\\"\\\\\\\\w*\\\\\\\\d\\\\\\\\w*\\\"));\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"df734656c1da983975b198986d7c16d7\",\n        \"type\": \"source_code\",\n        \"text\": \"List<String> prevPasswords, String password) { \\n    return !prevPasswords.contains(password);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6aee58e84a9e66a800439f8af2a6a1d4\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Method m : cl.getDeclaredMethods()) { \\n      UseCase uc = m.getAnnotation(UseCase.class); \\n      if(uc != null) { \\n        System.out.println(\\\"Found Use Case:\\\" + uc.id() + \\n          \\\" \\\" + uc.description()); \\n        useCases.remove(new Integer(uc.id())); \\n      } \\n    } \\n    for(int i : useCases) { \\n      System.out.println(\\\"Warning: Missing use case-\\\" + i); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bacea7bf3d028a0f646927ddac604e5c\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Integer> useCases = new ArrayList<Integer>(); \\n    Collections.addAll(useCases, 47, 48, 49, 50); \\n    trackUseCases(useCases, PasswordUtils.class);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78a7d84181aa3a69cf91bec55258ffd4\",\n        \"type\": \"source_code\",\n        \"text\": \"default @Constraints(unique=true);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6933f1ad8a3396cf9d9fe99ed5282f18\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length < 1) { \\n      System.out.println(\\\"arguments: annotated classes\\\"); \\n      System.exit(0); \\n    } \\n    for(String className : args) { \\n      Class<?> cl = Class.forName(className); \\n      DBTable dbTable = cl.getAnnotation(DBTable.class); \\n      if(dbTable == null) { \\n        System.out.println( \\n          \\\"No DBTable annotations in class \\\" + className); \\n        continue; \\n      } \\n      String tableName = dbTable.name(); \\n      // If the name is empty, use the Class name: \\n      if(tableName.length() < 1) \\n        tableName = cl.getName().toUpperCase(); \\n      List<String> columnDefs = new ArrayList<String>(); \\n      for(Field field : cl.getDeclaredFields()) { \\n        String columnName = null; \\n        Annotation[] anns = field.getDeclaredAnnotations(); \\n        if(anns.length < 1) \\n          continue; // Not a db table column \\n        if(anns[0] instanceof SQLInteger) { \\n          SQLInteger sInt = (SQLInteger) anns[0]; \\n          // Use field name if name not specified \\n          if(sInt.name().length() < 1) \\n            columnName = field.getName().toUpperCase(); \\n          else \\n            columnName = sInt.name(); \\n          columnDefs.add(columnName + \\\" INT\\\" + \\n            getConstraints(sInt.constraints())); \\n        } \\n        if(anns[0] instanceof SQLString) { \\n          SQLString sString = (SQLString) anns[0]; \\n          // Use field name if name not specified. \\n          if(sString.name().length() < 1) \\n            columnName = field.getName().toUpperCase(); \\n          else \\n            columnName = sString.name(); \\n          columnDefs.add(columnName + \\\" VARCHAR(\\\" + \\n            sString.value() + \\\")\\\" + \\n            getConstraints(sString.constraints())); \\n        } \\n        StringBuilder createCommand = new StringBuilder( \\n          \\\"CREATE TABLE \\\" + tableName + \\\"(\\\"); \\n        for(String columnDef : columnDefs) \\n          createCommand.append(\\\"\\\\n    \\\" + columnDef + \\\",\\\"); \\n        // Remove trailing comma \\n        String tableCreate = createCommand.substring( \\n          0, createCommand.length() - 1) + \\\");\\\"; \\n        System.out.println(\\\"Table Creation SQL for \\\" + \\n          className + \\\" is :\\\\n\\\" + tableCreate); \\n      } \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e53cd8c5998bf422835d5e2673e53360\",\n        \"type\": \"source_code\",\n        \"text\": \"String constraints = \\\"\\\"; \\n    if(!con.allowNull()) \\n      constraints += \\\" NOT NULL\\\"; \\n    if(con.primaryKey()) \\n      constraints += \\\" PRIMARY KEY\\\"; \\n    if(con.unique()) \\n      constraints += \\\" UNIQUE\\\"; \\n    return constraints;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e41df977a4223097fba08cfc654b1593\",\n        \"type\": \"source_code\",\n        \"text\": \"FIRSTNAME VARCHAR(30));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d4cf4d4d1c3f01223f59eda4efccf92b\",\n        \"type\": \"source_code\",\n        \"text\": \"FIRSTNAME VARCHAR(30), \\n    LASTNAME VARCHAR(50));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5323e8adfd3ca98d50566592d79b3c5\",\n        \"type\": \"source_code\",\n        \"text\": \"FIRSTNAME VARCHAR(30), \\n    LASTNAME VARCHAR(50), \\n    AGE INT);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b62756b24a2f2439c8db0ae6e9dade90\",\n        \"type\": \"source_code\",\n        \"text\": \"FIRSTNAME VARCHAR(30), \\n    LASTNAME VARCHAR(50), \\n    AGE INT, \\n    HANDLE VARCHAR(30) PRIMARY KEY);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15bf7d2a91d659789db95737c499cbea\",\n        \"type\": \"source_code\",\n        \"text\": \"int total = 0; \\n    for(int i = 0; i < x; i++) \\n      total = add(total, y); \\n    return total;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f40f82cb8bfbd966121c9951e39e3af\",\n        \"type\": \"source_code\",\n        \"text\": \"Multiplier m = new Multiplier(); \\n    System.out.println(\\\"11*16 = \\\" + m.multiply(11, 16));\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5ca07ef55cbbdded42091429807003fe\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<MethodDeclaration>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f59d2f9b4a2fd42ed37b58c10128ba3c\",\n        \"type\": \"source_code\",\n        \"text\": \"AnnotationProcessorEnvironment env) { this.env = env; }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b78d4897afe724c55497d8c5daa09fea\",\n        \"type\": \"source_code\",\n        \"text\": \"for(TypeDeclaration typeDecl : \\n      env.getSpecifiedTypeDeclarations()) { \\n      ExtractInterface annot = \\n        typeDecl.getAnnotation(ExtractInterface.class); \\n      if(annot == null) \\n        break; \\n      for(MethodDeclaration m : typeDecl.getMethods()) \\n        if(m.getModifiers().contains(Modifier.PUBLIC) && \\n           !(m.getModifiers().contains(Modifier.STATIC))) \\n          interfaceMethods.add(m); \\n      if(interfaceMethods.size() > 0) {\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e770fe3163afea4cab95b8d0afa134dd\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n          PrintWriter writer = \\n            env.getFiler().createSourceFile(annot.value()); \\n          writer.println(\\\"package \\\" + \\n            typeDecl.getPackage().getQualifiedName() +\\\";\\\"); \\n          writer.println(\\\"public interface \\\" + \\n            annot.value() + \\\" {\\\"); \\n          for(MethodDeclaration m : interfaceMethods) { \\n            writer.print(\\\"  public \\\"); \\n            writer.print(m.getReturnType() + \\\" \\\"); \\n            writer.print(m.getSimpleName() + \\\" (\\\"); \\n            int i = 0; \\n            for(ParameterDeclaration parm : \\n              m.getParameters()) { \\n              writer.print(parm.getType() + \\\" \\\" + \\n                parm.getSimpleName()); \\n              if(++i < m.getParameters().size()) \\n                writer.print(\\\", \\\"); \\n            } \\n            writer.println(\\\");\\\"); \\n          } \\n          writer.println(\\\"}\\\"); \\n          writer.close(); \\n        } catch(IOException ioe) { \\n          throw new RuntimeException(ioe); \\n        } \\n      } \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"683c0246e4bd95f921a45ce41ac3f049\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<AnnotationTypeDeclaration> atds, \\n    AnnotationProcessorEnvironment env) { \\n    return new InterfaceExtractorProcessor(env);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b0841999f78412be4e878de23a41445d\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\n     Collections.singleton(\\\"annotations.ExtractInterface\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1e2831dea4273ba6008da7f925bb00d\",\n        \"type\": \"source_code\",\n        \"text\": \"return Collections.emptySet();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1b668af8506c5dcd6f43829f80dabcff\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<AnnotationTypeDeclaration> atds, \\n    AnnotationProcessorEnvironment env) { \\n    return new TableCreationProcessor(env);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"81253b8000b01e3f04f78c875bfac8b5\",\n        \"type\": \"source_code\",\n        \"text\": \"return Arrays.asList( \\n      \\\"annotations.database.DBTable\\\", \\n      \\\"annotations.database.Constraints\\\", \\n      \\\"annotations.database.SQLString\\\", \\n      \\\"annotations.database.SQLInteger\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1e2831dea4273ba6008da7f925bb00d\",\n        \"type\": \"source_code\",\n        \"text\": \"return Collections.emptySet();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"29a0b50c9e57a188c08768cd626edd8c\",\n        \"type\": \"source_code\",\n        \"text\": \"implements AnnotationProcessor { \\n    private final AnnotationProcessorEnvironment env; \\n    private String sql = \\\"\\\"; \\n    public TableCreationProcessor( \\n      AnnotationProcessorEnvironment env) { \\n      this.env = env; \\n    } \\n    public void process() { \\n      for(TypeDeclaration typeDecl : \\n        env.getSpecifiedTypeDeclarations()) { \\n        typeDecl.accept(getDeclarationScanner( \\n          new TableCreationVisitor(), NO_OP)); \\n        sql = sql.substring(0, sql.length() - 1) + \\\");\\\"; \\n        System.out.println(\\\"creation SQL is :\\\\n\\\" + sql); \\n        sql = \\\"\\\"; \\n      } \\n    } \\n    private class TableCreationVisitor \\n      extends SimpleDeclarationVisitor { \\n      public void visitClassDeclaration( \\n        ClassDeclaration d) { \\n        DBTable dbTable = d.getAnnotation(DBTable.class);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2bae6df8aa191978b15b1de1f7589779\",\n        \"type\": \"source_code\",\n        \"text\": \"if(dbTable != null) { \\n          sql += \\\"CREATE TABLE \\\"; \\n          sql += (dbTable.name().length() < 1) \\n            ? d.getSimpleName().toUpperCase() \\n            : dbTable.name(); \\n          sql += \\\" (\\\"; \\n        } \\n      } \\n      public void visitFieldDeclaration( \\n        FieldDeclaration d) { \\n        String columnName = \\\"\\\"; \\n        if(d.getAnnotation(SQLInteger.class) != null) { \\n          SQLInteger sInt = d.getAnnotation( \\n              SQLInteger.class); \\n          // Use field name if name not specified \\n          if(sInt.name().length() < 1) \\n            columnName = d.getSimpleName().toUpperCase(); \\n          else \\n            columnName = sInt.name(); \\n          sql += \\\"\\\\n    \\\" + columnName + \\\" INT\\\" + \\n            getConstraints(sInt.constraints()) + \\\",\\\"; \\n        } \\n        if(d.getAnnotation(SQLString.class) != null) { \\n          SQLString sString = d.getAnnotation( \\n              SQLString.class); \\n          // Use field name if name not specified. \\n          if(sString.name().length() < 1) \\n            columnName = d.getSimpleName().toUpperCase(); \\n          else \\n            columnName = sString.name(); \\n          sql += \\\"\\\\n    \\\" + columnName + \\\" VARCHAR(\\\" + \\n            sString.value() + \\\")\\\" + \\n            getConstraints(sString.constraints()) + \\\",\\\"; \\n        } \\n      } \\n      private String getConstraints(Constraints con) { \\n        String constraints = \\\"\\\"; \\n        if(!con.allowNull()) \\n          constraints += \\\" NOT NULL\\\"; \\n        if(con.primaryKey()) \\n          constraints += \\\" PRIMARY KEY\\\"; \\n        if(con.unique()) \\n          constraints += \\\" UNIQUE\\\"; \\n        return constraints; \\n      } \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbff25dfbbc5fd0ff42dc2c8dbe2fa26\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"This is methodOne\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3f797645c0516001b91c01ad4204b97\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"This is methodTwo\\\"); \\n    return 2;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d2804551db4c0bd92246fb15f6d2a0\",\n        \"type\": \"source_code\",\n        \"text\": \"return methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7dbacef8ed39d916fd600de0d76e862d\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit AtUnitExample1\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d2804551db4c0bd92246fb15f6d2a0\",\n        \"type\": \"source_code\",\n        \"text\": \"return methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9badbe8b2a8588b734ff1e743a442a4\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n     \\\"java net.mindview.atunit.AtUnit AtUnitExternalTest\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"706327ad3208ef914a161d378bf7ab35\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\n      testObject.methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a93f4d9e769866eb02b660979ed9dae0\",\n        \"type\": \"source_code\",\n        \"text\": \"return testObject.methodTwo() == 2;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a32588524a7b10cc34d65e014ffb85a5\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n     \\\"java net.mindview.atunit.AtUnit AtUnitComposition\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbff25dfbbc5fd0ff42dc2c8dbe2fa26\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"This is methodOne\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3f797645c0516001b91c01ad4204b97\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"This is methodTwo\\\"); \\n    return 2;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c98c1715d67f3451bcc5bfdfe7e5eb71\",\n        \"type\": \"source_code\",\n        \"text\": \"assert methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b8e04b00b23133496c09a007fee0f500\",\n        \"type\": \"source_code\",\n        \"text\": \"assert 1 == 2: \\\"What a surprise!\\\";\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eaa44db3f0b0e8a8e2feaedc8f510844\",\n        \"type\": \"source_code\",\n        \"text\": \"new FileInputStream(\\\"nofile.txt\\\"); // Throws\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c30846a78327c0efd481615c41cb1396\",\n        \"type\": \"source_code\",\n        \"text\": \"// Assertion with message: \\n    assert methodTwo() == 2: \\\"methodTwo must equal 2\\\"; \\n    return methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c6ec7931916373c6571ef579b403010d\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit AtUnitExample2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"365ca66dd66060ed175a2ad280f8c26d\",\n        \"type\": \"source_code\",\n        \"text\": \"assert testObject.isEmpty();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b246e501b18e26d663ad436d4541de83\",\n        \"type\": \"source_code\",\n        \"text\": \"testObject.add(\\\"one\\\"); \\n    assert testObject.contains(\\\"one\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7a6776bc80f6257c97fbc68f82928036\",\n        \"type\": \"source_code\",\n        \"text\": \"testObject.add(\\\"one\\\"); \\n    testObject.remove(\\\"one\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"365ca66dd66060ed175a2ad280f8c26d\",\n        \"type\": \"source_code\",\n        \"text\": \"assert testObject.isEmpty();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"239ed760111e5f8fd949e714cae616b0\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit HashSetTest\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbff25dfbbc5fd0ff42dc2c8dbe2fa26\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"This is methodOne\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3f797645c0516001b91c01ad4204b97\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"This is methodTwo\\\"); \\n    return 2;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"27ba9f212f257778f427e5aa530b73c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return new AtUnitExample3(47);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d2804551db4c0bd92246fb15f6d2a0\",\n        \"type\": \"source_code\",\n        \"text\": \"return methodOne().equals(\\\"This is methodOne\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e123247ab97acc78c155d116cec5b306\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit AtUnitExample3\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b1c892bb50c7521ad4510e15e86b39f2\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"are thin at one end, much MUCH thicker in the \\\" + \\n    \\\"middle, and then thin again at the far end.\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3595830ad6d838af28ecb8404177cdac\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Character> chars = new ArrayList<Character>(); \\n    for(Character c : word.toCharArray()) \\n      chars.add(c); \\n    Collections.shuffle(chars, rand); \\n    StringBuilder result = new StringBuilder(); \\n    for(char ch : chars) \\n      result.append(ch); \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"67dbeab4a9dc4a1d19fa0f226368a317\",\n        \"type\": \"source_code\",\n        \"text\": \"Arrays.asList(theory.split(\\\" \\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed593573ae2830dc8d82ca552b120abb\",\n        \"type\": \"source_code\",\n        \"text\": \"static Iterator<String> words = input.iterator();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fc0dcfa8c8f912e65fee7062ade90ee3\",\n        \"type\": \"source_code\",\n        \"text\": \"if(words.hasNext()) \\n      return new AtUnitExample4(words.next()); \\n    else \\n      return null;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8c9f4b8134c420f418d4d7f4f89ac711\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"\\u2018\\\" + getWord() + \\\"\\u2018\\\"); \\n    return getWord().equals(\\\"are\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70a135068e63dfdbf18d47fb2b5d1838\",\n        \"type\": \"source_code\",\n        \"text\": \"// Change to a specific seed to get verifiable results: \\n    rand = new Random(47); \\n    print(\\\"\\u2018\\\" + getWord() + \\\"\\u2018\\\"); \\n    String scrambled = scrambleWord(); \\n    print(scrambled);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcdb0dc8ca74ee9d4e6909245a5e666c\",\n        \"type\": \"source_code\",\n        \"text\": \"return scrambled.equals(\\\"lAl\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fccef3dfc0dd233eac1b0fd33f8204b7\",\n        \"type\": \"source_code\",\n        \"text\": \"rand = new Random(74); \\n    print(\\\"\\u2018\\\" + getWord() + \\\"\\u2018\\\"); \\n    String scrambled = scrambleWord(); \\n    print(scrambled); \\n    return scrambled.equals(\\\"tsaeborornussu\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9eb103ce0f78f4726d5a91bb67c875ed\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"starting\\\"); \\n    OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit AtUnitExample4\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"243d5c5eb82b21b316cb43e082183cf9\",\n        \"type\": \"source_code\",\n        \"text\": \"String id = Integer.toString(counter++); \\n    try { \\n      output = new PrintWriter(\\\"Test\\\" + id + \\\".txt\\\"); \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    } \\n    return new AtUnitExample5(id);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da830b0818293e12e13b0107c07f41b6\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Running cleanup\\\"); \\n    output.close();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1a52165e7cfb2bab4963733b47f9a49\",\n        \"type\": \"source_code\",\n        \"text\": \"output.print(\\\"test1\\\"); \\n    return true;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7bfd3b879213a833ab6662c1ca38b2a\",\n        \"type\": \"source_code\",\n        \"text\": \"output.print(\\\"test2\\\"); \\n    return true;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"462c49acfa6392970e59372f8cd3be14\",\n        \"type\": \"source_code\",\n        \"text\": \"output.print(\\\"test3\\\"); \\n    return true;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3eb29b0f7cab52b5aeab2fb53ee9c285\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit AtUnitExample5\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"baa7ff533389858714ad15b615c88793\",\n        \"type\": \"source_code\",\n        \"text\": \"push(\\\"one\\\"); \\n    assert top().equals(\\\"one\\\"); \\n    push(\\\"two\\\"); \\n    assert top().equals(\\\"two\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a4f0366cdbc2062929fdf5e9eaef746\",\n        \"type\": \"source_code\",\n        \"text\": \"push(\\\"one\\\"); \\n    push(\\\"two\\\"); \\n    assert pop().equals(\\\"two\\\"); \\n    assert pop().equals(\\\"one\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1289dc5c3881fd7d5b2d5bf59534387b\",\n        \"type\": \"source_code\",\n        \"text\": \"push(\\\"A\\\"); \\n    push(\\\"B\\\"); \\n    assert top().equals(\\\"B\\\"); \\n    assert top().equals(\\\"B\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8e9b526a495281c0215bc7a523c4859\",\n        \"type\": \"source_code\",\n        \"text\": \"OSExecute.command( \\n      \\\"java net.mindview.atunit.AtUnit StackLStringTest\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94649c3666f8fb307cb34531c412b493\",\n        \"type\": \"source_code\",\n        \"text\": \"ClassLoader.getSystemClassLoader() \\n      .setDefaultAssertionStatus(true); // Enable asserts \\n    new ProcessFiles(new AtUnit(), \\\"class\\\").start(args);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1a41e0897567f135fb7a2838b30ad98\",\n        \"type\": \"source_code\",\n        \"text\": \"if(failures == 0) \\n      print(\\\"OK (\\\" + testsRun + \\\" tests)\\\"); \\n    else { \\n      print(\\\"(\\\" + testsRun + \\\" tests)\\\"); \\n      print(\\\"\\\\n>>> \\\" + failures + \\\" FAILURE\\\" + \\n        (failures > 1 ? \\\"S\\\" : \\\"\\\") + \\\" <<<\\\"); \\n      for(String failed : failedTests) \\n        print(\\\"  \\\" + failed); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"085d9b06b23d5d1b3609d1082981f882\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      String cName = ClassNameFinder.thisClass( \\n        BinaryFile.read(cFile)); \\n      if(!cName.contains(\\\".\\\")) \\n        return; // Ignore unpackaged classes \\n      testClass = Class.forName(cName); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    } \\n    TestMethods testMethods = new TestMethods(); \\n    Method creator = null; \\n    Method cleanup = null; \\n    for(Method m : testClass.getDeclaredMethods()) { \\n      testMethods.addIfTestMethod(m); \\n      if(creator == null) \\n        creator = checkForCreatorMethod(m); \\n      if(cleanup == null) \\n        cleanup = checkForCleanupMethod(m); \\n    } \\n    if(testMethods.size() > 0) { \\n      if(creator == null) \\n        try { \\n          if(!Modifier.isPublic(testClass \\n             .getDeclaredConstructor().getModifiers())) { \\n            print(\\\"Error: \\\" + testClass + \\n              \\\" default constructor must be public\\\"); \\n            System.exit(1); \\n          } \\n        } catch(NoSuchMethodException e) { \\n          // Synthesized default constructor; OK \\n        } \\n      print(testClass.getName()); \\n    } \\n    for(Method m : testMethods) { \\n      printnb(\\\"  . \\\" + m.getName() + \\\" \\\"); \\n      try { \\n        Object testObject = createTestObject(creator); \\n        boolean success = false; \\n        try { \\n          if(m.getReturnType().equals(boolean.class)) \\n            success = (Boolean)m.invoke(testObject); \\n          else { \\n            m.invoke(testObject); \\n            success = true; // If no assert fails \\n          } \\n        } catch(InvocationTargetException e) { \\n          // Actual exception is inside e: \\n          print(e.getCause()); \\n        } \\n        print(success ? \\\"\\\" : \\\"(failed)\\\"); \\n        testsRun++; \\n        if(!success) {\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97612051fb5c3e9413687bbb565c262a\",\n        \"type\": \"source_code\",\n        \"text\": \"failures++; \\n          failedTests.add(testClass.getName() + \\n            \\\": \\\" + m.getName()); \\n        } \\n        if(cleanup != null) \\n          cleanup.invoke(testObject, testObject); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"938df96c59aa51a4bdb0b5da7fd9b68e\",\n        \"type\": \"source_code\",\n        \"text\": \"void addIfTestMethod(Method m) { \\n      if(m.getAnnotation(Test.class) == null) \\n        return; \\n      if(!(m.getReturnType().equals(boolean.class) || \\n          m.getReturnType().equals(void.class))) \\n        throw new RuntimeException(\\\"@Test method\\\" + \\n          \\\" must return boolean or void\\\"); \\n      m.setAccessible(true); // In case it\\u2019s private, etc. \\n      add(m); \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"08bbce02f6f94a0dfede9b14f96ce4a7\",\n        \"type\": \"source_code\",\n        \"text\": \"if(m.getAnnotation(TestObjectCreate.class) == null) \\n      return null; \\n    if(!m.getReturnType().equals(testClass)) \\n      throw new RuntimeException(\\\"@TestObjectCreate \\\" + \\n        \\\"must return instance of Class to be tested\\\"); \\n    if((m.getModifiers() & \\n         java.lang.reflect.Modifier.STATIC) < 1) \\n      throw new RuntimeException(\\\"@TestObjectCreate \\\" + \\n        \\\"must be static.\\\"); \\n    m.setAccessible(true); \\n    return m;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e20d92db27977d9889064cf2f9ca54cc\",\n        \"type\": \"source_code\",\n        \"text\": \"if(m.getAnnotation(TestObjectCleanup.class) == null) \\n      return null; \\n    if(!m.getReturnType().equals(void.class)) \\n      throw new RuntimeException(\\\"@TestObjectCleanup \\\" + \\n        \\\"must return void\\\"); \\n    if((m.getModifiers() & \\n        java.lang.reflect.Modifier.STATIC) < 1) \\n      throw new RuntimeException(\\\"@TestObjectCleanup \\\" + \\n        \\\"must be static.\\\"); \\n    if(m.getParameterTypes().length == 0 || \\n       m.getParameterTypes()[0] != testClass) \\n      throw new RuntimeException(\\\"@TestObjectCleanup \\\" + \\n        \\\"must take an argument of the tested type.\\\"); \\n    m.setAccessible(true); \\n    return m;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0992c104dd64f106d07b7c1c69e346d8\",\n        \"type\": \"source_code\",\n        \"text\": \"if(creator != null) { \\n      try { \\n        return creator.invoke(testClass); \\n      } catch(Exception e) { \\n        throw new RuntimeException(\\\"Couldn\\u2019t run \\\" + \\n          \\\"@TestObject (creator) method.\\\"); \\n      } \\n    } else { // Use the default constructor: \\n      try {\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c198772b6f4b51d4745031df6e512e43\",\n        \"type\": \"source_code\",\n        \"text\": \"return testClass.newInstance(); \\n      } catch(Exception e) { \\n        throw new RuntimeException(\\\"Couldn\\u2019t create a \\\" + \\n          \\\"test object. Try using a @TestObject method.\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7df4acf8c90d1fd33bcd924b0713d36\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<Integer,Integer> offsetTable = \\n      new HashMap<Integer,Integer>(); \\n    Map<Integer,String> classNameTable = \\n      new HashMap<Integer,String>(); \\n    try { \\n      DataInputStream data = new DataInputStream( \\n        new ByteArrayInputStream(classBytes)); \\n      int magic = data.readInt();  // 0xcafebabe \\n      int minorVersion = data.readShort(); \\n      int majorVersion = data.readShort(); \\n      int constant_pool_count = data.readShort(); \\n      int[] constant_pool = new int[constant_pool_count]; \\n      for(int i = 1; i < constant_pool_count; i++) { \\n        int tag = data.read(); \\n        int tableSize; \\n        switch(tag) { \\n          case 1: // UTF \\n            int length = data.readShort(); \\n            char[] bytes = new char[length]; \\n            for(int k = 0; k < bytes.length; k++) \\n              bytes[k] = (char)data.read();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"49f72261838e79c010bf817b417cd787\",\n        \"type\": \"source_code\",\n        \"text\": \"String className = new String(bytes); \\n            classNameTable.put(i, className); \\n            break; \\n          case 5: // LONG \\n          case 6: // DOUBLE \\n            data.readLong(); // discard 8 bytes \\n            i++; // Special skip necessary \\n            break; \\n          case 7: // CLASS \\n            int offset = data.readShort(); \\n            offsetTable.put(i, offset); \\n            break; \\n          case 8: // STRING \\n            data.readShort(); // discard 2 bytes \\n            break; \\n          case 3:  // INTEGER \\n          case 4:  // FLOAT \\n          case 9:  // FIELD_REF \\n          case 10: // METHOD_REF \\n          case 11: // INTERFACE_METHOD_REF \\n          case 12: // NAME_AND_TYPE \\n            data.readInt(); // discard 4 bytes; \\n            break; \\n          default: \\n            throw new RuntimeException(\\\"Bad tag \\\" + tag); \\n        } \\n      } \\n      short access_flags = data.readShort(); \\n      int this_class = data.readShort(); \\n      int super_class = data.readShort(); \\n      return classNameTable.get( \\n        offsetTable.get(this_class)).replace(\\u2018/\\u2019, \\u2018.\\u2019); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc8ff2bda97d20f41071a00e447b6b5c\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) { \\n      for(String arg : args) \\n        print(thisClass(BinaryFile.read(new File(arg)))); \\n    } else \\n      // Walk the entire tree: \\n      for(File klass : Directory.walk(\\\".\\\", \\\".*\\\\\\\\.class\\\")) \\n        print(thisClass(BinaryFile.read(klass)));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f30f62e13b16f87c979a443d0dd5da8e\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0 && args[0].equals(\\\"-r\\\")) { \\n      remove = true; \\n      String[] nargs = new String[args.length - 1]; \\n      System.arraycopy(args, 1, nargs, 0, nargs.length); \\n      args = nargs; \\n    } \\n    new ProcessFiles( \\n      new AtUnitRemover(), \\\"class\\\").start(args);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6111412d5d575bacbb37a296e64afbcd\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean modified = false; \\n    try { \\n      String cName = ClassNameFinder.thisClass( \\n        BinaryFile.read(cFile)); \\n      if(!cName.contains(\\\".\\\")) \\n        return; // Ignore unpackaged classes \\n      ClassPool cPool = ClassPool.getDefault(); \\n      CtClass ctClass = cPool.get(cName); \\n      for(CtMethod method : ctClass.getDeclaredMethods()) { \\n        MethodInfo mi = method.getMethodInfo(); \\n        AnnotationsAttribute attr = (AnnotationsAttribute) \\n          mi.getAttribute(AnnotationsAttribute.visibleTag); \\n        if(attr == null) continue; \\n        for(Annotation ann : attr.getAnnotations()) { \\n          if(ann.getTypeName() \\n             .startsWith(\\\"net.mindview.atunit\\\")) { \\n            print(ctClass.getName() + \\\" Method: \\\" \\n              + mi.getName() + \\\" \\\" + ann); \\n            if(remove) { \\n              ctClass.removeMethod(method); \\n              modified = true; \\n            } \\n          } \\n        } \\n      } \\n      // Fields are not removed in this version (see text). \\n      if(modified) \\n        ctClass.toBytecode(new DataOutputStream( \\n          new FileOutputStream(cFile))); \\n      ctClass.detach(); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66d762c0051ed18ae9a30cbe3d95d224\",\n        \"type\": \"source_code\",\n        \"text\": \"this.countDown = countDown;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97b4bef9ac8144ae020fc30fff05d5d4\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"#\\\" + id + \\\"(\\\" + \\n      (countDown > 0 ? countDown : \\\"Liftoff!\\\") + \\\"), \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5130cd6fec271ba9669a6a0e44bd958e\",\n        \"type\": \"source_code\",\n        \"text\": \"while(countDown-- > 0) { \\n      System.out.print(status()); \\n      Thread.yield(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af201b4d8492eb8544807b956bcef8b8\",\n        \"type\": \"source_code\",\n        \"text\": \"LiftOff launch = new LiftOff(); \\n    launch.run();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e626c4768c303f77450d256d8385edc4\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t = new Thread(new LiftOff()); \\n    t.start(); \\n    System.out.println(\\\"Waiting for LiftOff\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2afc5ec968902969f6229c07323430a5\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) \\n      new Thread(new LiftOff()).start(); \\n    System.out.println(\\\"Waiting for LiftOff\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d59e48c33d5eb6437686f3c8ea46c806\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new LiftOff());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"134c4ec3581b9696dd8a23c9f9cd5440\",\n        \"type\": \"source_code\",\n        \"text\": \"exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f86490c54038249ce1a49cded5cccf5d\",\n        \"type\": \"source_code\",\n        \"text\": \"// Constructor argument is number of threads: \\n    ExecutorService exec = Executors.newFixedThreadPool(5); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new LiftOff()); \\n    exec.shutdown();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37f8cc5611317aa9b2d728e0dab44852\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = \\n      Executors.newSingleThreadExecutor(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new LiftOff()); \\n    exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b2fa80087ef70e58c5af49a892930cfe\",\n        \"type\": \"source_code\",\n        \"text\": \"this.id = id;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9f90c035e180cbc4edc1979355b117e\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"result of TaskWithResult \\\" + id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6417fbbcc7232a0cc215e16586da8432\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    ArrayList<Future<String>> results = \\n      new ArrayList<Future<String>>(); \\n    for(int i = 0; i < 10; i++) \\n      results.add(exec.submit(new TaskWithResult(i))); \\n    for(Future<String> fs : results) \\n      try { \\n        // get() blocks until completion: \\n        System.out.println(fs.get()); \\n      } catch(InterruptedException e) { \\n        System.out.println(e); \\n        return; \\n      } catch(ExecutionException e) { \\n        System.out.println(e); \\n      } finally { \\n        exec.shutdown(); \\n      }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"63de354725a02e544d3b4127c8b44ae7\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(countDown-- > 0) { \\n        System.out.print(status()); \\n        // Old-style: \\n        // Thread.sleep(100); \\n        // Java SE5/6-style: \\n        TimeUnit.MILLISECONDS.sleep(100); \\n      } \\n    } catch(InterruptedException e) { \\n      System.err.println(\\\"Interrupted\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"17a00f24bc314d5f8865280eccce12e4\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new SleepingTask()); \\n    exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f039f6061feb99ba41e2143cae9807c8\",\n        \"type\": \"source_code\",\n        \"text\": \"this.priority = priority;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdc56cfe8e400961490258e7d22cf28e\",\n        \"type\": \"source_code\",\n        \"text\": \"return Thread.currentThread() + \\\": \\\" + countDown;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0a4a737a886b760d478a58465ff4c0b8\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread.currentThread().setPriority(priority); \\n    while(true) { \\n      // An expensive, interruptable operation: \\n      for(int i = 1; i < 100000; i++) { \\n        d += (Math.PI + Math.E) / (double)i; \\n        if(i % 1000 == 0) \\n          Thread.yield(); \\n      } \\n      System.out.println(this); \\n      if(--countDown == 0) return; \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0a0108aaa7d9112f3f8b02806144b87a\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute( \\n        new SimplePriorities(Thread.MIN_PRIORITY)); \\n    exec.execute( \\n        new SimplePriorities(Thread.MAX_PRIORITY)); \\n    exec.shutdown();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae6bc3813fb13be8b0793be4c0881fe7\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(true) { \\n        TimeUnit.MILLISECONDS.sleep(100); \\n        print(Thread.currentThread() + \\\" \\\" + this); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"sleep() interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78f395d3725a390c0f940dcee23dc87f\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 10; i++) { \\n      Thread daemon = new Thread(new SimpleDaemons()); \\n      daemon.setDaemon(true); // Must call before start() \\n      daemon.start(); \\n    } \\n    print(\\\"All daemons started\\\"); \\n    TimeUnit.MILLISECONDS.sleep(175);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64b00e5d246ab7c791a295d25e1a6195\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t = new Thread(r); \\n    t.setDaemon(true); \\n    return t;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25363bb52a0b7fd15d155bd6900d4e25\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(true) { \\n        TimeUnit.MILLISECONDS.sleep(100); \\n        print(Thread.currentThread() + \\\" \\\" + this); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c27fa977525c374ff3f98d3908e3e4dc\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool( \\n      new DaemonThreadFactory()); \\n    for(int i = 0; i < 10; i++) \\n      exec.execute(new DaemonFromFactory()); \\n    print(\\\"All daemons started\\\"); \\n    TimeUnit.MILLISECONDS.sleep(500); // Run for a while\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0b1459b6a6aeb0dc48a27bd7c5ff62b3\",\n        \"type\": \"source_code\",\n        \"text\": \"super(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, \\n      new SynchronousQueue<Runnable>(), \\n      new DaemonThreadFactory());\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee23f2dc35f6e5168c8212ac5d55389a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < t.length; i++) { \\n      t[i] = new Thread(new DaemonSpawn()); \\n      t[i].start(); \\n      printnb(\\\"DaemonSpawn \\\" + i + \\\" started, \\\"); \\n    } \\n    for(int i = 0; i < t.length; i++) \\n      printnb(\\\"t[\\\" + i + \\\"].isDaemon() = \\\" + \\n        t[i].isDaemon() + \\\", \\\"); \\n    while(true) \\n      Thread.yield();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34c0ff7f682905cecccb82109a9b8d44\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) \\n      Thread.yield();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12fae38b460a5a9153cf9dcf6c7ae532\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread d = new Thread(new Daemon()); \\n    d.setDaemon(true); \\n    d.start(); \\n    printnb(\\\"d.isDaemon() = \\\" + d.isDaemon() + \\\", \\\"); \\n    // Allow the daemon threads to \\n    // finish their startup processes: \\n    TimeUnit.SECONDS.sleep(1);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d9b8302590940bd7e4f0eb127645c10\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      print(\\\"Starting ADaemon\\\"); \\n      TimeUnit.SECONDS.sleep(1); \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via InterruptedException\\\"); \\n    } finally { \\n      print(\\\"This should always run?\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebc2382bd6fe9f33906f4b689f76b22e\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t = new Thread(new ADaemon()); \\n    t.setDaemon(true); \\n    t.start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"156e6e906d945ae7206c6ac75ea218e7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Store the thread name: \\n    super(Integer.toString(++threadCount)); \\n    start();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"51bead45308595f2d6bacfff7e6af87a\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"#\\\" + getName() + \\\"(\\\" + countDown + \\\"), \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"931183693de9f843c79cc4cb8df98ae7\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) { \\n      System.out.print(this); \\n      if(--countDown == 0) \\n        return; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a67850f82f8d279336cb09cc3ab42ce3\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) \\n      new SimpleThread();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"22c892789bdfc0d6a4724291e4b6b4c6\",\n        \"type\": \"source_code\",\n        \"text\": \"return Thread.currentThread().getName() + \\n      \\\"(\\\" + countDown + \\\"), \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"931183693de9f843c79cc4cb8df98ae7\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) { \\n      System.out.print(this); \\n      if(--countDown == 0) \\n        return; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55727f2d6411a546875cc314ed9176cb\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) \\n      new SelfManaged();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f261626e79e8c4b3b1663459b52bb74a\",\n        \"type\": \"source_code\",\n        \"text\": \"Inner(String name) { \\n      super(name); \\n      start(); \\n    } \\n    public void run() { \\n      try { \\n        while(true) { \\n          print(this); \\n          if(--countDown == 0) return; \\n          sleep(10); \\n        } \\n      } catch(InterruptedException e) { \\n        print(\\\"interrupted\\\"); \\n      } \\n    } \\n    public String toString() { \\n      return getName() + \\\": \\\" + countDown; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c995ec9c79738cfeabc3f7cf8b3f2c05\",\n        \"type\": \"source_code\",\n        \"text\": \"inner = new Inner(name);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"86f0e13141e0555e1f44c86349ffde87\",\n        \"type\": \"source_code\",\n        \"text\": \"t = new Thread(name) { \\n      public void run() { \\n        try { \\n          while(true) { \\n            print(this); \\n            if(--countDown == 0) return; \\n            sleep(10); \\n          } \\n        } catch(InterruptedException e) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2dd5f5df1657efad5ceeec634798906\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"sleep() interrupted\\\"); \\n        } \\n      } \\n      public String toString() { \\n        return getName() + \\\": \\\" + countDown; \\n      } \\n    }; \\n    t.start();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fed381baa07732ed895dad09c4db783\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t; \\n    Inner(String name) { \\n      t = new Thread(this, name); \\n      t.start(); \\n    } \\n    public void run() { \\n      try { \\n        while(true) { \\n          print(this); \\n          if(--countDown == 0) return; \\n          TimeUnit.MILLISECONDS.sleep(10); \\n        } \\n      } catch(InterruptedException e) { \\n        print(\\\"sleep() interrupted\\\"); \\n      } \\n    } \\n    public String toString() { \\n      return t.getName() + \\\": \\\" + countDown; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c995ec9c79738cfeabc3f7cf8b3f2c05\",\n        \"type\": \"source_code\",\n        \"text\": \"inner = new Inner(name);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6e85a1b284c62d5f5d9904a911e073a7\",\n        \"type\": \"source_code\",\n        \"text\": \"t = new Thread(new Runnable() { \\n      public void run() { \\n        try { \\n          while(true) { \\n            print(this); \\n            if(--countDown == 0) return; \\n            TimeUnit.MILLISECONDS.sleep(10); \\n          } \\n        } catch(InterruptedException e) { \\n          print(\\\"sleep() interrupted\\\"); \\n        } \\n      } \\n      public String toString() { \\n        return Thread.currentThread().getName() + \\n          \\\": \\\" + countDown; \\n      } \\n    }, name);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b74982e8b7edc1e1f7120e2ae4408150\",\n        \"type\": \"source_code\",\n        \"text\": \"t.start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1e63759bfdd235d9128c711f8ece620e\",\n        \"type\": \"source_code\",\n        \"text\": \"if(t == null) { \\n      t = new Thread(name) { \\n        public void run() { \\n          try { \\n            while(true) { \\n              print(this); \\n              if(--countDown == 0) return; \\n              sleep(10); \\n            } \\n          } catch(InterruptedException e) { \\n            print(\\\"sleep() interrupted\\\"); \\n          } \\n        } \\n        public String toString() { \\n          return getName() + \\\": \\\" + countDown; \\n        } \\n      }; \\n      t.start(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12b7ea7dbb66247108b0c50d8748cecb\",\n        \"type\": \"source_code\",\n        \"text\": \"new InnerThread1(\\\"InnerThread1\\\"); \\n    new InnerThread2(\\\"InnerThread2\\\"); \\n    new InnerRunnable1(\\\"InnerRunnable1\\\"); \\n    new InnerRunnable2(\\\"InnerRunnable2\\\"); \\n    new ThreadMethod(\\\"ThreadMethod\\\").runTask();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a95a7e98ce1b633c44448773b0f882c\",\n        \"type\": \"source_code\",\n        \"text\": \"super(name); \\n    duration = sleepTime; \\n    start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"71aafc072160d822f6a5027663788965\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      sleep(duration); \\n    } catch(InterruptedException e) { \\n      print(getName() + \\\" was interrupted. \\\" + \\n        \\\"isInterrupted(): \\\" + isInterrupted()); \\n      return; \\n    } \\n    print(getName() + \\\" has awakened\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"642e2097c9345095db144f6c50810a19\",\n        \"type\": \"source_code\",\n        \"text\": \"super(name); \\n    this.sleeper = sleeper; \\n    start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf5c850fe8c2a5a56e117cdc2a2799fa\",\n        \"type\": \"source_code\",\n        \"text\": \"sleeper.join(); \\n    } catch(InterruptedException e) { \\n      print(\\\"Interrupted\\\"); \\n    } \\n    print(getName() + \\\" join completed\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1e9b651a30322a0d34dda748ec53975b\",\n        \"type\": \"source_code\",\n        \"text\": \"Sleeper \\n      sleepy = new Sleeper(\\\"Sleepy\\\", 1500), \\n      grumpy = new Sleeper(\\\"Grumpy\\\", 1500); \\n    Joiner \\n      dopey = new Joiner(\\\"Dopey\\\", sleepy), \\n      doc = new Joiner(\\\"Doc\\\", grumpy); \\n    grumpy.interrupt();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9f1531cc39788496fa8e59d70c94f6bd\",\n        \"type\": \"source_code\",\n        \"text\": \"while(d > 0) \\n      d = d + (Math.PI + Math.E) / d; \\n    System.in.read(); // Never gets here\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57724a2fd2f4c74ac3154f6ebcb5dd39\",\n        \"type\": \"source_code\",\n        \"text\": \"setDaemon(true); \\n    start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3d0e7f88a67f9eb29c5b6135cf2bb51\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) { \\n      d = d + (Math.PI + Math.E) / d; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c091001eb64193d170e7f59f08f135b2\",\n        \"type\": \"source_code\",\n        \"text\": \"//! new UnresponsiveUI(); // Must kill this process \\n    new ResponsiveUI(); \\n    System.in.read(); \\n    System.out.println(d); // Shows progress\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0662d71e46c81756a163bb44d06718c8\",\n        \"type\": \"source_code\",\n        \"text\": \"throw new RuntimeException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"800cfb5ea5b487bf2bf72fe093456300\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(new ExceptionThread());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ec05739fc2050ea5c829ee3f42eefc5\",\n        \"type\": \"source_code\",\n        \"text\": \"at ExceptionThread.run(ExceptionThread.java:7) \\n       at ThreadPoolExecutor$Worker.runTask(Unknown Source) \\n       at ThreadPoolExecutor$Worker.run(Unknown Source) \\n       at Java.lang.Thread.run(Unknown Source)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"951648e4fb807286f9d9763f684fcf39\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      ExecutorService exec = \\n        Executors.newCachedThreadPool(); \\n      exec.execute(new ExceptionThread()); \\n    } catch(RuntimeException ue) { \\n      // This statement will NOT execute! \\n      System.out.println(\\\"Exception has been handled!\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f085de7f7eb5a395af550d5bcbea4f1\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t = Thread.currentThread(); \\n    System.out.println(\\\"run() by \\\" + t); \\n    System.out.println( \\n      \\\"eh = \\\" + t.getUncaughtExceptionHandler()); \\n    throw new RuntimeException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24eb4dbf70a4b603ee2875d60b0caab2\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"caught \\\" + e);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83de4f6c14d9d6a468748f36931715a9\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(this + \\\" creating new Thread\\\"); \\n    Thread t = new Thread(r); \\n    System.out.println(\\\"created \\\" + t); \\n    t.setUncaughtExceptionHandler(\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bcf8f48dd007d9b9a7172eb56162c241\",\n        \"type\": \"source_code\",\n        \"text\": \"new MyUncaughtExceptionHandler()); \\n    System.out.println( \\n      \\\"eh = \\\" + t.getUncaughtExceptionHandler()); \\n    return t;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8da874469b11fb0e15ceb699d8ac286\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool( \\n      new HandlerThreadFactory()); \\n    exec.execute(new ExceptionThread2());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad5eb12d2029ee99445e7b5d9db8d2aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread.setDefaultUncaughtExceptionHandler( \\n      new MyUncaughtExceptionHandler()); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(new ExceptionThread());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd88acb4766374ccdc8c6695965cabc1\",\n        \"type\": \"source_code\",\n        \"text\": \"generator = g; \\n    id = ident;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9bdc9a5f9e49cda48cd11eaedfeb914a\",\n        \"type\": \"source_code\",\n        \"text\": \"while(!generator.isCanceled()) { \\n      int val = generator.next(); \\n      if(val % 2 != 0) { \\n        System.out.println(val + \\\" not even!\\\"); \\n        generator.cancel(); // Cancels all EvenCheckers \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4d4182fe6cb7aba74ed4d0d941ec7757\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Press Control-C to exit\\\"); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < count; i++)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f915a8df3a19d75ac463a43d447e6cb6\",\n        \"type\": \"source_code\",\n        \"text\": \"exec.execute(new EvenChecker(gp, i)); \\n    exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f95d2daef13903aa785b459a03800bcc\",\n        \"type\": \"source_code\",\n        \"text\": \"test(gp, 10);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c79a651461fb5efd766a4a618b86cc8\",\n        \"type\": \"source_code\",\n        \"text\": \"++currentEvenValue; // Danger point here! \\n    ++currentEvenValue; \\n    return currentEvenValue;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a54a9f9de110dc90394686f7e97dfab8\",\n        \"type\": \"source_code\",\n        \"text\": \"EvenChecker.test(new EvenGenerator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a3991aa5424de321f47b3c2c1e804a4\",\n        \"type\": \"source_code\",\n        \"text\": \"++currentEvenValue; \\n    Thread.yield(); // Cause failure faster \\n    ++currentEvenValue; \\n    return currentEvenValue;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8603fe5ee76c976f197fe9e52b000f9f\",\n        \"type\": \"source_code\",\n        \"text\": \"EvenChecker.test(new SynchronizedEvenGenerator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b30a63d1cf66ee5ee9140998242460f\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      ++currentEvenValue; \\n      Thread.yield(); // Cause failure faster \\n      ++currentEvenValue; \\n      return currentEvenValue; \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72f43d72cc6c3863758105e1fc4d23dc\",\n        \"type\": \"source_code\",\n        \"text\": \"EvenChecker.test(new MutexEvenGenerator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c7ee6a14b921479238d46b1d9397f03\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean captured = lock.tryLock(); \\n    try { \\n      System.out.println(\\\"tryLock(): \\\" + captured); \\n    } finally { \\n      if(captured) \\n        lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"61ea34aeab957053328285969a343bff\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean captured = false; \\n    try { \\n      captured = lock.tryLock(2, TimeUnit.SECONDS); \\n    } catch(InterruptedException e) { \\n      throw new RuntimeException(e); \\n    } \\n    try { \\n      System.out.println(\\\"tryLock(2, TimeUnit.SECONDS): \\\" + \\n        captured); \\n    } finally { \\n      if(captured) \\n        lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a6cd89e12a2b51fe93a36af98f17140e\",\n        \"type\": \"source_code\",\n        \"text\": \"final AttemptLocking al = new AttemptLocking(); \\n    al.untimed(); // True -- lock is available \\n    al.timed();   // True -- lock is available\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bef1741d064a89db288aca581b94de87\",\n        \"type\": \"source_code\",\n        \"text\": \"// Now create a separate task to grab the lock: \\n    new Thread() { \\n      { setDaemon(true); } \\n      public void run() { \\n        al.lock.lock(); \\n        System.out.println(\\\"acquired\\\"); \\n      } \\n    }.start(); \\n    Thread.yield(); // Give the 2nd task a chance \\n    al.untimed(); // False -- lock grabbed by task \\n    al.timed();   // False -- lock grabbed by task\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ccbc63128d1c1614bef322b6b5fbaa5\",\n        \"type\": \"source_code\",\n        \"text\": \"getfield        #2; //Field i:I\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0cc183fae42dc900511347c0fe5b171a\",\n        \"type\": \"source_code\",\n        \"text\": \"iconst_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26492ed3ca1d3e998caa8e1392d161db\",\n        \"type\": \"source_code\",\n        \"text\": \"iadd\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7c90a03c7648afe51b3265143ff5c0a\",\n        \"type\": \"source_code\",\n        \"text\": \"putfield        #2; //Field i:I\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04e607d9a2e1b26ded53a02c29c5d509\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ccbc63128d1c1614bef322b6b5fbaa5\",\n        \"type\": \"source_code\",\n        \"text\": \"getfield        #2; //Field i:I\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb5d96a02f87a20b126d1afe5bffca07\",\n        \"type\": \"source_code\",\n        \"text\": \"iconst_3\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26492ed3ca1d3e998caa8e1392d161db\",\n        \"type\": \"source_code\",\n        \"text\": \"iadd\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7c90a03c7648afe51b3265143ff5c0a\",\n        \"type\": \"source_code\",\n        \"text\": \"putfield        #2; //Field i:I\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24906763d50b920a7556d071e6c0805b\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) \\n      evenIncrement();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d9021635a256d459711e4878b2b860ad\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    AtomicityTest at = new AtomicityTest(); \\n    exec.execute(at); \\n    while(true) { \\n      int val = at.getValue(); \\n      if(val % 2 != 0) { \\n        System.out.println(val); \\n        System.exit(0); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e3c57bd9f8c7e4607369ec2ebb53bb3d\",\n        \"type\": \"source_code\",\n        \"text\": \"return serialNumber++; // Not thread-safe\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34e3bc22bf15dcccd8bb067931e3d8a5\",\n        \"type\": \"source_code\",\n        \"text\": \"array = new int[size]; \\n    len = size; \\n    // Initialize to a value not produced \\n    // by the SerialNumberGenerator: \\n    for(int i = 0; i < size; i++) \\n      array[i] = -1;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"88917e67b93bdc7218804314cff22e08\",\n        \"type\": \"source_code\",\n        \"text\": \"array[index] = i; \\n    // Wrap index and write over old elements: \\n    index = ++index % len;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1b076b6adf9fc02d4a9c0face294f57\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < len; i++) \\n      if(array[i] == val) return true; \\n    return false;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"23f0487dfe81cd3ee0e55f40db105aa6\",\n        \"type\": \"source_code\",\n        \"text\": \"new CircularSet(1000);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c23539246db1546d265aafaea3f738aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newCachedThreadPool();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5d17244925e0330a1b9185905886f11\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      while(true) { \\n        int serial = \\n          SerialNumberGenerator.nextSerialNumber(); \\n        if(serials.contains(serial)) { \\n          System.out.println(\\\"Duplicate: \\\" + serial); \\n          System.exit(0); \\n        } \\n        serials.add(serial); \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fd42208fe56e43590f338903fff1c61f\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < SIZE; i++) \\n      exec.execute(new SerialChecker());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e8a6f094d22440d80a04c612dcab70d\",\n        \"type\": \"source_code\",\n        \"text\": \"// Stop after n seconds if there\\u2019s an argument: \\n    if(args.length > 0) { \\n      TimeUnit.SECONDS.sleep(new Integer(args[0])); \\n      System.out.println(\\\"No duplicates detected\\\"); \\n      System.exit(0); \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"24906763d50b920a7556d071e6c0805b\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) \\n      evenIncrement();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f31ca731a3b44cd95836c48015b7dd0\",\n        \"type\": \"source_code\",\n        \"text\": \"new Timer().schedule(new TimerTask() { \\n      public void run() { \\n        System.err.println(\\\"Aborting\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eaf02c5946979eb206a89f596bce46de\",\n        \"type\": \"source_code\",\n        \"text\": \"System.exit(0); \\n      } \\n    }, 5000); // Terminate after 5 seconds \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    AtomicIntegerTest ait = new AtomicIntegerTest(); \\n    exec.execute(ait); \\n    while(true) { \\n      int val = ait.getValue(); \\n      if(val % 2 != 0) { \\n        System.out.println(val); \\n        System.exit(0); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e89e8124007727d9aa09c257db1652fb\",\n        \"type\": \"source_code\",\n        \"text\": \"new AtomicInteger(0);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a8a8dccbb0fd51a184366ada9ad4529\",\n        \"type\": \"source_code\",\n        \"text\": \"return currentEvenValue.addAndGet(2);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fdd609b02654e0f4cf5b9117df5fad99\",\n        \"type\": \"source_code\",\n        \"text\": \"EvenChecker.test(new AtomicEvenGenerator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c545aac2548cbfbb4ec9343ac8753c25\",\n        \"type\": \"source_code\",\n        \"text\": \"this.x = x; \\n    this.y = y;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"530b433ff8a7e779301ec0f18cb33a55\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"x: \\\" + x + \\\", y: \\\" + y;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a0aa9dd9879597cf592003e1961fc36a\",\n        \"type\": \"source_code\",\n        \"text\": \"public PairValuesNotEqualException() { \\n      super(\\\"Pair values not equal: \\\" + Pair.this); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"47b1754556a2d31b0f8decacdf5ff384\",\n        \"type\": \"source_code\",\n        \"text\": \"if(x != y) \\n      throw new PairValuesNotEqualException();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a781fef368bdb7996dad0743f2e6120d\",\n        \"type\": \"source_code\",\n        \"text\": \"Collections.synchronizedList(new ArrayList<Pair>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ced82e7024dd71e43c08d32e7d0a1ccc\",\n        \"type\": \"source_code\",\n        \"text\": \"// Make a copy to keep the original safe: \\n    return new Pair(p.getX(), p.getY());\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70523dde549d274772b5389747dc56fc\",\n        \"type\": \"source_code\",\n        \"text\": \"storage.add(p); \\n    try { \\n      TimeUnit.MILLISECONDS.sleep(50);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e963e2cee5e66abcd30c4d1ff01ee06b\",\n        \"type\": \"source_code\",\n        \"text\": \"} catch(InterruptedException ignore) {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"96e8453f03bd397e67f6582b8a921ff6\",\n        \"type\": \"source_code\",\n        \"text\": \"p.incrementX(); \\n    p.incrementY(); \\n    store(getPair());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65945887088b842f5670175ec1f8b5e6\",\n        \"type\": \"source_code\",\n        \"text\": \"Pair temp; \\n    synchronized(this) { \\n      p.incrementX(); \\n      p.incrementY(); \\n      temp = getPair(); \\n    } \\n    store(temp);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94132ef3b1500d1fdae057a7eb6e8f2e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.pm = pm;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ab1fc981c0a5475acbc0592b34a110a\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) \\n      pm.increment();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55ea3cf71d4ea7fb555b893395bbbed5\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Pair: \\\" + pm.getPair() + \\n      \\\" checkCounter = \\\" + pm.checkCounter.get();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94132ef3b1500d1fdae057a7eb6e8f2e\",\n        \"type\": \"source_code\",\n        \"text\": \"this.pm = pm;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"414725acaa15ae387624c357d28ffc59\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) { \\n      pm.checkCounter.incrementAndGet(); \\n      pm.getPair().checkState(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"512c421b2a2b9974f0972a55b8c2cee5\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    PairManipulator \\n      pm1 = new PairManipulator(pman1), \\n      pm2 = new PairManipulator(pman2);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1f5aeefa0f8e54e26d25f08ca9a25e41\",\n        \"type\": \"source_code\",\n        \"text\": \"PairChecker \\n      pcheck1 = new PairChecker(pman1), \\n      pcheck2 = new PairChecker(pman2); \\n    exec.execute(pm1); \\n    exec.execute(pm2); \\n    exec.execute(pcheck1); \\n    exec.execute(pcheck2); \\n    try { \\n      TimeUnit.MILLISECONDS.sleep(500); \\n    } catch(InterruptedException e) { \\n      System.out.println(\\\"Sleep interrupted\\\"); \\n    } \\n    System.out.println(\\\"pm1: \\\" + pm1 + \\\"\\\\npm2: \\\" + pm2); \\n    System.exit(0);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53f097b5712124c8489313ce5ec63232\",\n        \"type\": \"source_code\",\n        \"text\": \"PairManager \\n      pman1 = new PairManager1(), \\n      pman2 = new PairManager2(); \\n    testApproaches(pman1, pman2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"530db6c3dd5606138c1af185dc79954d\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      p.incrementX(); \\n      p.incrementY(); \\n      store(getPair()); \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa4fb19a22b6df2cf4b6edde6c3736c2\",\n        \"type\": \"source_code\",\n        \"text\": \"Pair temp; \\n    lock.lock(); \\n    try { \\n      p.incrementX(); \\n      p.incrementY(); \\n      temp = getPair(); \\n    } finally { \\n      lock.unlock(); \\n    } \\n    store(temp);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a04ce6ca067c1d4a08bfb0259ac94b7d\",\n        \"type\": \"source_code\",\n        \"text\": \"PairManager \\n      pman1 = new ExplicitPairManager1(), \\n      pman2 = new ExplicitPairManager2(); \\n    CriticalSection.testApproaches(pman1, pman2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e30864aecfc132dbffbfcd7ab1e7b5ac\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 5; i++) { \\n      print(\\\"f()\\\"); \\n      Thread.yield(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b68f4d8b79e6c4f6ff20353068b5520\",\n        \"type\": \"source_code\",\n        \"text\": \"synchronized(syncObject) { \\n      for(int i = 0; i < 5; i++) { \\n        print(\\\"g()\\\"); \\n        Thread.yield(); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a531dde565db1f53ef7262105ceca21\",\n        \"type\": \"source_code\",\n        \"text\": \"final DualSynch ds = new DualSynch(); \\n    new Thread() { \\n      public void run() { \\n        ds.f(); \\n      } \\n    }.start(); \\n    ds.g();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0cfc5f12c68c0da2129057896012afda\",\n        \"type\": \"source_code\",\n        \"text\": \"while(!Thread.currentThread().isInterrupted()) { \\n      ThreadLocalVariableHolder.increment(); \\n      System.out.println(this); \\n      Thread.yield(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e37699e0f93bed8e335cee0f9fd6ea72\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"#\\\" + id + \\\": \\\" + \\n      ThreadLocalVariableHolder.get();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2e8cfd499e564f3ef6a1b2888ec1256\",\n        \"type\": \"source_code\",\n        \"text\": \"new ThreadLocal<Integer>() { \\n      private Random rand = new Random(47); \\n      protected synchronized Integer initialValue() { \\n        return rand.nextInt(10000); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"656c4a6d74652834cd97608fc602d76e\",\n        \"type\": \"source_code\",\n        \"text\": \"value.set(value.get() + 1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3a11069e972c32f0af6a8b2706a27c2\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new Accessor(i)); \\n    TimeUnit.SECONDS.sleep(3);  // Run for a while \\n    exec.shutdownNow();         // All Accessors will quit\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f4034dee9952b28f70acf3c6b64c557b\",\n        \"type\": \"source_code\",\n        \"text\": \"int temp = count; \\n    if(rand.nextBoolean()) // Yield half the time \\n      Thread.yield(); \\n    return (count = ++temp);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0ab243673ad59002421d58ce25e3160f\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Entrance>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc2fd7e0d050b9ef62a61159106ea502\",\n        \"type\": \"source_code\",\n        \"text\": \"this.id = id; \\n    // Keep this task in a list. Also prevents \\n    // garbage collection of dead tasks: \\n    entrances.add(this);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b65cb373dd96121b9e4898bfbe3983b\",\n        \"type\": \"source_code\",\n        \"text\": \"while(!canceled) { \\n      synchronized(this) { \\n        ++number; \\n      } \\n      print(this + \\\" Total: \\\" + count.increment()); \\n      try { \\n        TimeUnit.MILLISECONDS.sleep(100); \\n      } catch(InterruptedException e) { \\n        print(\\\"sleep interrupted\\\"); \\n      } \\n    } \\n    print(\\\"Stopping \\\" + this);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ec3110b2113cbb0e09c0c4c441da521\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Entrance \\\" + id + \\\": \\\" + getValue();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e35c0b88b5e3488479a7e3bc9876911e\",\n        \"type\": \"source_code\",\n        \"text\": \"return count.value();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f2b463e6161bcfe471166965dcfad777\",\n        \"type\": \"source_code\",\n        \"text\": \"int sum = 0; \\n    for(Entrance entrance : entrances) \\n      sum += entrance.getValue(); \\n    return sum;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97de44cbd1c6cc01f6c998e6123ee943\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new Entrance(i)); \\n    // Run for a while, then stop and collect the data: \\n    TimeUnit.SECONDS.sleep(3); \\n    Entrance.cancel(); \\n    exec.shutdown(); \\n    if(!exec.awaitTermination(250, TimeUnit.MILLISECONDS)) \\n      print(\\\"Some tasks were not terminated!\\\"); \\n    print(\\\"Total: \\\" + Entrance.getTotalCount()); \\n    print(\\\"Sum of Entrances: \\\" + Entrance.sumEntrances());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f241bba367e3792650229ccd0e99c0e\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      TimeUnit.SECONDS.sleep(100); \\n    } catch(InterruptedException e) { \\n      print(\\\"InterruptedException\\\"); \\n    } \\n    print(\\\"Exiting SleepBlocked.run()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a3f78b674d8bfb7237866bf2ba265de4\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      print(\\\"Waiting for read():\\\"); \\n      in.read(); \\n    } catch(IOException e) { \\n      if(Thread.currentThread().isInterrupted()) { \\n        print(\\\"Interrupted from blocked I/O\\\"); \\n      } else { \\n        throw new RuntimeException(e); \\n      } \\n    } \\n    print(\\\"Exiting IOBlocked.run()\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdc4c65b75de2c495ed05fee08357de7\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) // Never releases lock \\n      Thread.yield();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ccdf35ec7c2c4a6b10aee7f46afc0ca1\",\n        \"type\": \"source_code\",\n        \"text\": \"new Thread() { \\n      public void run() { \\n        f(); // Lock acquired by this thread \\n      } \\n    }.start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fec22a584964be835c19e3f51840f87\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Trying to call f()\\\"); \\n    f(); \\n    print(\\\"Exiting SynchronizedBlocked.run()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c23539246db1546d265aafaea3f738aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newCachedThreadPool();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15d2f260bbf35e369520e1b36a21831a\",\n        \"type\": \"source_code\",\n        \"text\": \"Future<?> f = exec.submit(r); \\n    TimeUnit.MILLISECONDS.sleep(100); \\n    print(\\\"Interrupting \\\" + r.getClass().getName()); \\n    f.cancel(true); // Interrupts if running \\n    print(\\\"Interrupt sent to \\\" + r.getClass().getName());\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7e20e4430a429f44b026c2251bfe4270\",\n        \"type\": \"source_code\",\n        \"text\": \"test(new SleepBlocked()); \\n    test(new IOBlocked(System.in)); \\n    test(new SynchronizedBlocked()); \\n    TimeUnit.SECONDS.sleep(3); \\n    print(\\\"Aborting with System.exit(0)\\\"); \\n    System.exit(0); // ... since last 2 interrupts failed\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ba035f0f06a3ee90558a1bcc189c69f2\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    ServerSocket server = new ServerSocket(8080); \\n    InputStream socketInput = \\n      new Socket(\\\"localhost\\\", 8080).getInputStream(); \\n    exec.execute(new IOBlocked(socketInput)); \\n    exec.execute(new IOBlocked(System.in)); \\n    TimeUnit.MILLISECONDS.sleep(100); \\n    print(\\\"Shutting down all threads\\\"); \\n    exec.shutdownNow(); \\n    TimeUnit.SECONDS.sleep(1); \\n    print(\\\"Closing \\\" + socketInput.getClass().getName()); \\n    socketInput.close(); // Releases blocked thread \\n    TimeUnit.SECONDS.sleep(1); \\n    print(\\\"Closing \\\" + System.in.getClass().getName()); \\n    System.in.close(); // Releases blocked thread\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"389fd8b8070ea2c14fa01bcd9c32e4bc\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      print(\\\"Waiting for read() in \\\" + this); \\n      sc.read(ByteBuffer.allocate(1)); \\n    } catch(ClosedByInterruptException e) { \\n      print(\\\"ClosedByInterruptException\\\"); \\n    } catch(AsynchronousCloseException e) { \\n      print(\\\"AsynchronousCloseException\\\"); \\n    } catch(IOException e) { \\n      throw new RuntimeException(e); \\n    } \\n    print(\\\"Exiting NIOBlocked.run() \\\" + this);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3414ef9437f5d6fc8c2508939453675f\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    ServerSocket server = new ServerSocket(8080); \\n    InetSocketAddress isa = \\n      new InetSocketAddress(\\\"localhost\\\", 8080); \\n    SocketChannel sc1 = SocketChannel.open(isa); \\n    SocketChannel sc2 = SocketChannel.open(isa); \\n    Future<?> f = exec.submit(new NIOBlocked(sc1)); \\n    exec.execute(new NIOBlocked(sc2)); \\n    exec.shutdown(); \\n    TimeUnit.SECONDS.sleep(1); \\n    // Produce an interrupt via cancel: \\n    f.cancel(true); \\n    TimeUnit.SECONDS.sleep(1); \\n    // Release the block by closing the channel: \\n    sc2.close();\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"11be93e59becbcdc5943dfcd801dd435\",\n        \"type\": \"source_code\",\n        \"text\": \"if(count-- > 0) {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78738ba43155aee4904b48c159f705b7\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"f1() calling f2() with count \\\" + count); \\n      f2(count); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d8159b4d9fed9c20c25e09f34ac6d651\",\n        \"type\": \"source_code\",\n        \"text\": \"if(count-- > 0) { \\n      print(\\\"f2() calling f1() with count \\\" + count); \\n      f1(count); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1f9e72a11872466b59efe948268d7bc9\",\n        \"type\": \"source_code\",\n        \"text\": \"final MultiLock multiLock = new MultiLock(); \\n    new Thread() { \\n      public void run() { \\n        multiLock.f1(10); \\n      } \\n    }.start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6ecb8d26c5aa2673e7d33649ef310924\",\n        \"type\": \"source_code\",\n        \"text\": \"// Acquire it right away, to demonstrate interruption \\n    // of a task blocked on a ReentrantLock: \\n    lock.lock();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4387cb8ab7010163fda722c74e566e5b\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      // This will never be available to a second task \\n      lock.lockInterruptibly(); // Special call \\n      print(\\\"lock acquired in f()\\\"); \\n    } catch(InterruptedException e) {\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"34219125fcc96ecc920a7127bd8ec76d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Interrupted from lock acquisition in f()\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6daf637065e041db6af332b8b757d556\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Waiting for f() in BlockedMutex\\\"); \\n    blocked.f(); \\n    print(\\\"Broken out of blocked call\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"913870e8b4f3de26d924cd7aa938ba26\",\n        \"type\": \"source_code\",\n        \"text\": \"Thread t = new Thread(new Blocked2()); \\n    t.start(); \\n    TimeUnit.SECONDS.sleep(1); \\n    System.out.println(\\\"Issuing t.interrupt()\\\"); \\n    t.interrupt();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8122176c6db0c2805c4f62e958da5dd2\",\n        \"type\": \"source_code\",\n        \"text\": \"id = ident; \\n    print(\\\"NeedsCleanup \\\" + id);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ada2181ab1e136ef132175bbba42f04\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Cleaning up \\\" + id);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e598ad3e6430cb4ee87693bd2bf758e3\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // point1 \\n        NeedsCleanup n1 = new NeedsCleanup(1); \\n        // Start try-finally immediately after definition \\n        // of n1, to guarantee proper cleanup of n1: \\n        try { \\n          print(\\\"Sleeping\\\"); \\n          TimeUnit.SECONDS.sleep(1); \\n          // point2 \\n          NeedsCleanup n2 = new NeedsCleanup(2); \\n          // Guarantee proper cleanup of n2: \\n          try { \\n            print(\\\"Calculating\\\"); \\n            // A time-consuming, non-blocking operation: \\n            for(int i = 1; i < 2500000; i++) \\n              d = d + (Math.PI + Math.E) / d; \\n            print(\\\"Finished time-consuming operation\\\"); \\n          } finally { \\n            n2.cleanup(); \\n          } \\n        } finally { \\n          n1.cleanup(); \\n        } \\n      } \\n      print(\\\"Exiting via while() test\\\"); \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via InterruptedException\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"01c73133283cbe40199e867affe677e2\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length != 1) { \\n      print(\\\"usage: java InterruptingIdiom delay-in-mS\\\"); \\n      System.exit(1); \\n    } \\n    Thread t = new Thread(new Blocked3()); \\n    t.start(); \\n    TimeUnit.MILLISECONDS.sleep(new Integer(args[0])); \\n    t.interrupt();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b238e79777f7fe3deccafb1337ccbfd6\",\n        \"type\": \"source_code\",\n        \"text\": \"waxOn = true; // Ready to buff \\n    notifyAll();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c4bcc827807174a34742f091eadac06d\",\n        \"type\": \"source_code\",\n        \"text\": \"waxOn = false; // Ready for another coat of wax \\n    notifyAll();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b5deceead0bbeb84b1434aad169bede\",\n        \"type\": \"source_code\",\n        \"text\": \"while(waxOn == false) \\n      wait();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09848c97bb414a97ad8cc850d8aa29c5\",\n        \"type\": \"source_code\",\n        \"text\": \"while(waxOn == true) \\n      wait();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd220bc39a149bff3dc4f5240e24a581\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        printnb(\\\"Wax On! \\\"); \\n        TimeUnit.MILLISECONDS.sleep(200); \\n        car.waxed(); \\n        car.waitForBuffing(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via interrupt\\\"); \\n    } \\n    print(\\\"Ending Wax On task\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a4eef89eca0cd771d75a71311b13b923\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        car.waitForWaxing(); \\n        printnb(\\\"Wax Off! \\\"); \\n        TimeUnit.MILLISECONDS.sleep(200); \\n        car.buffed(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via interrupt\\\"); \\n    } \\n    print(\\\"Ending Wax Off task\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"377f3c0fec6cdd984a2d216ba1c9e411\",\n        \"type\": \"source_code\",\n        \"text\": \"Car car = new Car(); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(new WaxOff(car)); \\n    exec.execute(new WaxOn(car)); \\n    TimeUnit.SECONDS.sleep(5); // Run for a while... \\n    exec.shutdownNow(); // Interrupt all tasks\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"14a917d97c6796426a76fb4c9b0b44bd\",\n        \"type\": \"source_code\",\n        \"text\": \"sharedMonitor.wait();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"14a917d97c6796426a76fb4c9b0b44bd\",\n        \"type\": \"source_code\",\n        \"text\": \"sharedMonitor.wait();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8600ffff4a84f14285cab730734b763d\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        wait(); \\n        System.out.print(Thread.currentThread() + \\\" \\\"); \\n      } \\n    } catch(InterruptedException e) { \\n      // OK to exit this way \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c51aa20d422b9a40c70f07da29dbbf1\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < 5; i++) \\n      exec.execute(new Task()); \\n    exec.execute(new Task2()); \\n    Timer timer = new Timer(); \\n    timer.scheduleAtFixedRate(new TimerTask() { \\n      boolean prod = true; \\n      public void run() { \\n        if(prod) { \\n          System.out.print(\\\"\\\\nnotify() \\\"); \\n          Task.blocker.prod(); \\n          prod = false; \\n        } else { \\n          System.out.print(\\\"\\\\nnotifyAll() \\\"); \\n          Task.blocker.prodAll(); \\n          prod = true; \\n        } \\n      } \\n    }, 400, 400); // Run every .4 second \\n    TimeUnit.SECONDS.sleep(5); // Run for a while... \\n    timer.cancel(); \\n    System.out.println(\\\"\\\\nTimer canceled\\\"); \\n    TimeUnit.MILLISECONDS.sleep(500); \\n    System.out.print(\\\"Task2.blocker.prodAll() \\\"); \\n    Task2.blocker.prodAll(); \\n    TimeUnit.MILLISECONDS.sleep(500); \\n    System.out.println(\\\"\\\\nShutting down\\\"); \\n    exec.shutdownNow(); // Interrupt all tasks\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ebb0a7419916f488ee36cbb8ed60d89\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        synchronized(this) { \\n          while(restaurant.meal == null) \\n            wait(); // ... for the chef to produce a meal \\n        } \\n        print(\\\"Waitperson got \\\" + restaurant.meal); \\n        synchronized(restaurant.chef) { \\n          restaurant.meal = null; \\n          restaurant.chef.notifyAll(); // Ready for another \\n        } \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"WaitPerson interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e54058ea39ef7f27959c6f0bb082435b\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        synchronized(this) { \\n          while(restaurant.meal != null) \\n            wait(); // ... for the meal to be taken \\n        } \\n        if(++count == 10) { \\n          print(\\\"Out of food, closing\\\"); \\n          restaurant.exec.shutdownNow(); \\n        } \\n        printnb(\\\"Order up! \\\"); \\n        synchronized(restaurant.waitPerson) { \\n          restaurant.meal = new Meal(count); \\n          restaurant.waitPerson.notifyAll(); \\n        } \\n        TimeUnit.MILLISECONDS.sleep(100); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Chef interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"11989219699e74aa9394dfb6c2fb3e45\",\n        \"type\": \"source_code\",\n        \"text\": \"exec.execute(chef); \\n    exec.execute(waitPerson);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f55d9c06832ff9947fd498fb91a542d\",\n        \"type\": \"source_code\",\n        \"text\": \"new Restaurant();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b37e65619eeb1494c22692565e271a12\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      waxOn = true; // Ready to buff \\n      condition.signalAll(); \\n    } finally {\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"227a23b99b423e00ec3638723cc1d7e4\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.unlock(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b6f861d9bff2e969398bb3f3dc8bf9fa\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      waxOn = false; // Ready for another coat of wax \\n      condition.signalAll(); \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b3d72528bc62f7dff4ed9152b22b804\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      while(waxOn == false) \\n        condition.await(); \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5522c506dbb90f440b9f5a7789dd37b6\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      while(waxOn == true) \\n        condition.await(); \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd220bc39a149bff3dc4f5240e24a581\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        printnb(\\\"Wax On! \\\"); \\n        TimeUnit.MILLISECONDS.sleep(200); \\n        car.waxed(); \\n        car.waitForBuffing(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via interrupt\\\"); \\n    } \\n    print(\\\"Ending Wax On task\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"045fc706ba4b9a2ea544f05a4420c9a8\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        car.waitForWaxing(); \\n        printnb(\\\"Wax Off! \\\"); \\n        TimeUnit.MILLISECONDS.sleep(200); \\n        car.buffed(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting via interrupt\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e60d7ed5f1e43ea5c53bf87e0f50e76\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    print(\\\"Ending Wax Off task\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"565c1a3096b92333e12f9fe19a5e9faa\",\n        \"type\": \"source_code\",\n        \"text\": \"Car car = new Car(); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(new WaxOff(car)); \\n    exec.execute(new WaxOn(car)); \\n    TimeUnit.SECONDS.sleep(5); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"130ed8c671d0ba23cd288a6c9198aca9\",\n        \"type\": \"source_code\",\n        \"text\": \"rockets = queue;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4aa42fe45140fbfae2c38ca48f19a849\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      rockets.put(lo); \\n    } catch(InterruptedException e) { \\n      print(\\\"Interrupted during put()\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57e98a356d25ff03457ae62a681245a6\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        LiftOff rocket = rockets.take(); \\n        rocket.run(); // Use this thread \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Waking from take()\\\"); \\n    } \\n    print(\\\"Exiting LiftOffRunner\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39fe4ff15afc71f755a2a76112c93b6f\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      // Compensate for Windows/Linux difference in the \\n      // length of the result produced by the Enter key: \\n      new BufferedReader( \\n        new InputStreamReader(System.in)).readLine(); \\n    } catch(java.io.IOException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2518dfbf8a48a40e53059f05a7ca1ef0\",\n        \"type\": \"source_code\",\n        \"text\": \"print(message); \\n    getkey();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a0a0a415618c28b4bcf70fcf27c2b099\",\n        \"type\": \"source_code\",\n        \"text\": \"print(msg); \\n    LiftOffRunner runner = new LiftOffRunner(queue); \\n    Thread t = new Thread(runner); \\n    t.start(); \\n    for(int i = 0; i < 5; i++) \\n      runner.add(new LiftOff(5)); \\n    getkey(\\\"Press \\u2018Enter\\u2019 (\\\" + msg + \\\")\\\"); \\n    t.interrupt(); \\n    print(\\\"Finished \\\" + msg + \\\" test\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0c649c28f4b9934882c07888bbe09642\",\n        \"type\": \"source_code\",\n        \"text\": \"test(\\\"LinkedBlockingQueue\\\", // Unlimited size\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d1a0f3f8d99b7b918c9db333e4d39756\",\n        \"type\": \"source_code\",\n        \"text\": \"new LinkedBlockingQueue<LiftOff>()); \\n    test(\\\"ArrayBlockingQueue\\\", // Fixed size \\n      new ArrayBlockingQueue<LiftOff>(3)); \\n    test(\\\"SynchronousQueue\\\", // Size of 1 \\n      new SynchronousQueue<LiftOff>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"880cff4dd97b80af81d3a0ee9e950b45\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Toast \\\" + id + \\\": \\\" + status;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d5d337a79c295e3a15b2a603e5693e7c\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        TimeUnit.MILLISECONDS.sleep( \\n          100 + rand.nextInt(500)); \\n        // Make toast \\n        Toast t = new Toast(count++); \\n        print(t); \\n        // Insert into queue \\n        toastQueue.put(t); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Toaster interrupted\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"02c9ab397aa850646734780c649d1730\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    print(\\\"Toaster off\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3779001ce7ae291f7268a4ec0b45fc91\",\n        \"type\": \"source_code\",\n        \"text\": \"dryQueue = dry; \\n    butteredQueue = buttered;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"581e6ac2c48f43858b5fe040b05ab5d7\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until next piece of toast is available: \\n        Toast t = dryQueue.take(); \\n        t.butter(); \\n        print(t); \\n        butteredQueue.put(t); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Butterer interrupted\\\"); \\n    } \\n    print(\\\"Butterer off\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0dccb5d26e328c18dc2612274bd48d12\",\n        \"type\": \"source_code\",\n        \"text\": \"butteredQueue = buttered; \\n    finishedQueue = finished;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f732e84d07b74ab23f2a4c4eb35ad226\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until next piece of toast is available: \\n        Toast t = butteredQueue.take(); \\n        t.jam(); \\n        print(t); \\n        finishedQueue.put(t); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Jammer interrupted\\\"); \\n    } \\n    print(\\\"Jammer off\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d999a01a844534ebd4bb1b8564b0742d\",\n        \"type\": \"source_code\",\n        \"text\": \"finishedQueue = finished;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"00713cce6257931b055f206de5862f63\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until next piece of toast is available: \\n        Toast t = finishedQueue.take();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"def7db329009984ddcc61f3cfaf9bc0f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Verify that the toast is coming in order, \\n        // and that all pieces are getting jammed: \\n        if(t.getId() != counter++ || \\n           t.getStatus() != Toast.Status.JAMMED) { \\n          print(\\\">>>> Error: \\\" + t); \\n          System.exit(1); \\n        } else \\n          print(\\\"Chomp! \\\" + t); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Eater interrupted\\\"); \\n    } \\n    print(\\\"Eater off\\\");\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5a46d62890b796aa93c552ecf12192f1\",\n        \"type\": \"source_code\",\n        \"text\": \"ToastQueue dryQueue = new ToastQueue(), \\n               butteredQueue = new ToastQueue(), \\n               finishedQueue = new ToastQueue(); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(new Toaster(dryQueue)); \\n    exec.execute(new Butterer(dryQueue, butteredQueue)); \\n    exec.execute(new Jammer(butteredQueue, finishedQueue)); \\n    exec.execute(new Eater(finishedQueue)); \\n    TimeUnit.SECONDS.sleep(5); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4d467ecadc6dd38ff87d2d11a760faf2\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(true) \\n        for(char c = \\u2018A\\u2019; c <= \\u2018z\\u2019; c++) { \\n          out.write(c); \\n          TimeUnit.MILLISECONDS.sleep(rand.nextInt(500)); \\n        } \\n    } catch(IOException e) { \\n      print(e + \\\" Sender write exception\\\"); \\n    } catch(InterruptedException e) { \\n      print(e + \\\" Sender sleep interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5575a0966853f1ee38a8ee1d21536aa\",\n        \"type\": \"source_code\",\n        \"text\": \"in = new PipedReader(sender.getPipedWriter());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f61d39a92576ca7e9fe1510224c3919\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(true) { \\n        // Blocks until characters are there: \\n        printnb(\\\"Read: \\\" + (char)in.read() + \\\", \\\"); \\n      } \\n    } catch(IOException e) { \\n      print(e + \\\" Receiver read exception\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e69fcbf5a4f612f6d9356cec4080dc98\",\n        \"type\": \"source_code\",\n        \"text\": \"Sender sender = new Sender(); \\n    Receiver receiver = new Receiver(sender); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    exec.execute(sender); \\n    exec.execute(receiver); \\n    TimeUnit.SECONDS.sleep(4); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c75f177fbfc1223cd7e9815e0751ac9\",\n        \"type\": \"source_code\",\n        \"text\": \"while(taken) \\n      wait(); \\n    taken = true;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c46a34ca90af94342a586bd4e2639b4\",\n        \"type\": \"source_code\",\n        \"text\": \"taken = false; \\n    notifyAll();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"738598ba4dcb38e6e25b50d21a8b3996\",\n        \"type\": \"source_code\",\n        \"text\": \"if(ponderFactor == 0) return; \\n    TimeUnit.MILLISECONDS.sleep( \\n      rand.nextInt(ponderFactor * 250));\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"51fcae841e8636842c50ffa15e442a3d\",\n        \"type\": \"source_code\",\n        \"text\": \"int ident, int ponder) { \\n    this.left = left; \\n    this.right = right; \\n    id = ident; \\n    ponderFactor = ponder;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a35c7cd3b69b6f866ddee827854e8f9\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        print(this + \\\" \\\" + \\\"thinking\\\"); \\n        pause(); \\n        // Philosopher becomes hungry \\n        print(this + \\\" \\\" + \\\"grabbing right\\\"); \\n        right.take(); \\n        print(this + \\\" \\\" + \\\"grabbing left\\\"); \\n        left.take(); \\n        print(this + \\\" \\\" + \\\"eating\\\"); \\n        pause(); \\n        right.drop(); \\n        left.drop(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(this + \\\" \\\" + \\\"exiting via interrupt\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cf332b32d4db648acfc2256411c8bc27\",\n        \"type\": \"source_code\",\n        \"text\": \"int ponder = 5; \\n    if(args.length > 0) \\n      ponder = Integer.parseInt(args[0]); \\n    int size = 5; \\n    if(args.length > 1) \\n      size = Integer.parseInt(args[1]); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    Chopstick[] sticks = new Chopstick[size]; \\n    for(int i = 0; i < size; i++) \\n      sticks[i] = new Chopstick(); \\n    for(int i = 0; i < size; i++) \\n      exec.execute(new Philosopher( \\n        sticks[i], sticks[(i+1) % size], i, ponder)); \\n    if(args.length == 3 && args[2].equals(\\\"timeout\\\")) \\n      TimeUnit.SECONDS.sleep(5); \\n    else { \\n      System.out.println(\\\"Press \\u2018Enter\\u2019 to quit\\\"); \\n      System.in.read(); \\n    } \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"002dabdd003247d3c74baeb9b82d7003\",\n        \"type\": \"source_code\",\n        \"text\": \"int ponder = 5; \\n    if(args.length > 0) \\n      ponder = Integer.parseInt(args[0]); \\n    int size = 5; \\n    if(args.length > 1) \\n      size = Integer.parseInt(args[1]); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    Chopstick[] sticks = new Chopstick[size]; \\n    for(int i = 0; i < size; i++) \\n      sticks[i] = new Chopstick(); \\n    for(int i = 0; i < size; i++) \\n      if(i < (size-1)) \\n        exec.execute(new Philosopher( \\n          sticks[i], sticks[i+1], i, ponder)); \\n      else\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9acc305afe715f3bfae94c52b0c4a080\",\n        \"type\": \"source_code\",\n        \"text\": \"exec.execute(new Philosopher( \\n          sticks[0], sticks[i], i, ponder)); \\n    if(args.length == 3 && args[2].equals(\\\"timeout\\\")) \\n      TimeUnit.SECONDS.sleep(5); \\n    else { \\n      System.out.println(\\\"Press \\u2018Enter\\u2019 to quit\\\"); \\n      System.in.read(); \\n    } \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0a8d250b43864eb82008e9bc71e1e5f\",\n        \"type\": \"source_code\",\n        \"text\": \"this.latch = latch;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cee1e80e049c37640c4c27763f9e87af\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      doWork(); \\n      latch.countDown(); \\n    } catch(InterruptedException ex) { \\n      // Acceptable way to exit \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95b1347c222d6e47b8efe5de8c635061\",\n        \"type\": \"source_code\",\n        \"text\": \"TimeUnit.MILLISECONDS.sleep(rand.nextInt(2000));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8dae5d825b45f53b750bdf03baa42719\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\"completed\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3a73f9bb6c21d52741f4a94bc7e9ef1f\",\n        \"type\": \"source_code\",\n        \"text\": \"return String.format(\\\"%1$-3d \\\", id);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0a8d250b43864eb82008e9bc71e1e5f\",\n        \"type\": \"source_code\",\n        \"text\": \"this.latch = latch;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a4e02a8eab4ca43d0f4fd7ef23302bdd\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      latch.await(); \\n      print(\\\"Latch barrier passed for \\\" + this); \\n    } catch(InterruptedException ex) { \\n      print(this + \\\" interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78340414f1628aa2a450fa55dca223b2\",\n        \"type\": \"source_code\",\n        \"text\": \"return String.format(\\\"WaitingTask %1$-3d \\\", id);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"97db21d0b18052d8d808e6a5bdc2601f\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    // All must share a single CountDownLatch object: \\n    CountDownLatch latch = new CountDownLatch(SIZE); \\n    for(int i = 0; i < 10; i++) \\n      exec.execute(new WaitingTask(latch)); \\n    for(int i = 0; i < SIZE; i++) \\n      exec.execute(new TaskPortion(latch)); \\n    print(\\\"Launched all tasks\\\"); \\n    exec.shutdown(); // Quit when all tasks complete\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5cf99f3895603530349a4c8a73bcb26d\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        synchronized(this) { \\n          strides += rand.nextInt(3); // Produces 0, 1 or 2 \\n        } \\n        barrier.await(); \\n      } \\n    } catch(InterruptedException e) { \\n      // A legitimate way to exit \\n    } catch(BrokenBarrierException e) { \\n      // This one we want to know about \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b02762675d5eac10602f4ef2aa9d2424\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder s = new StringBuilder(); \\n    for(int i = 0; i < getStrides(); i++) \\n      s.append(\\\"*\\\"); \\n    s.append(id); \\n    return s.toString();\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c23539246db1546d265aafaea3f738aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newCachedThreadPool();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1b5aa6c6a94bee8492ce702f5a698935\",\n        \"type\": \"source_code\",\n        \"text\": \"barrier = new CyclicBarrier(nHorses, new Runnable() { \\n      public void run() { \\n        StringBuilder s = new StringBuilder(); \\n        for(int i = 0; i < FINISH_LINE; i++) \\n          s.append(\\\"=\\\"); // The fence on the racetrack \\n        print(s); \\n        for(Horse horse : horses) \\n          print(horse.tracks()); \\n        for(Horse horse : horses) \\n          if(horse.getStrides() >= FINISH_LINE) { \\n            print(horse + \\\"won!\\\"); \\n            exec.shutdownNow(); \\n            return; \\n          } \\n        try { \\n          TimeUnit.MILLISECONDS.sleep(pause); \\n        } catch(InterruptedException e) { \\n          print(\\\"barrier-action sleep interrupted\\\"); \\n        } \\n      } \\n    }); \\n    for(int i = 0; i < nHorses; i++) { \\n      Horse horse = new Horse(barrier); \\n      horses.add(horse); \\n      exec.execute(horse); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"efb5fa13a396f7bd35f1495202be4d8b\",\n        \"type\": \"source_code\",\n        \"text\": \"int nHorses = 7; \\n    int pause = 200; \\n    if(args.length > 0) { // Optional argument \\n      int n = new Integer(args[0]); \\n      nHorses = n > 0 ? n : nHorses; \\n    } \\n    if(args.length > 1) { // Optional argument \\n      int p = new Integer(args[1]); \\n      pause = p > -1 ? p : pause; \\n    } \\n    new HorseRace(nHorses, pause);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6fc8b08197e6408f24b49917a144bdc0\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<DelayedTask>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21fc34d52945fbcb30380c7efb687de6\",\n        \"type\": \"source_code\",\n        \"text\": \"delta = delayInMilliseconds; \\n    trigger = System.nanoTime() + \\n      NANOSECONDS.convert(delta, MILLISECONDS); \\n    sequence.add(this);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b6f28db01e3e76d31509299893c31385\",\n        \"type\": \"source_code\",\n        \"text\": \"return unit.convert( \\n      trigger - System.nanoTime(), NANOSECONDS);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07e3d547030565cb6874c485e6f4cac5\",\n        \"type\": \"source_code\",\n        \"text\": \"DelayedTask that = (DelayedTask)arg; \\n    if(trigger < that.trigger) return -1; \\n    if(trigger > that.trigger) return 1; \\n    return 0;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a8f87619fd6382750fb38d14104ef415\",\n        \"type\": \"source_code\",\n        \"text\": \"return String.format(\\\"[%1$-4d]\\\", delta) + \\n      \\\" Task \\\" + id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1645bf36ddf519b3f78d8cf1ee9eb1c0\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + id + \\\":\\\" + delta + \\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"666bd6374a7df3b3b86b12e580a039f1\",\n        \"type\": \"source_code\",\n        \"text\": \"private ExecutorService exec; \\n    public EndSentinel(int delay, ExecutorService e) { \\n      super(delay); \\n      exec = e;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8c0a5cd65e80f9f16df9c43d856c8f68\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    public void run() { \\n      for(DelayedTask pt : sequence) { \\n        printnb(pt.summary() + \\\" \\\"); \\n      } \\n      print(); \\n      print(this + \\\" Calling shutdownNow()\\\"); \\n      exec.shutdownNow(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35521bf385eaeea66179c779d8f59393\",\n        \"type\": \"source_code\",\n        \"text\": \"this.q = q;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5bfc634efb1409d0096700144f81caff\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) \\n        q.take().run(); // Run task with the current thread \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    } \\n    print(\\\"Finished DelayedTaskConsumer\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"278fcbfe5372d9c1ece8f754acf6b54b\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    DelayQueue<DelayedTask> queue = \\n      new DelayQueue<DelayedTask>(); \\n    // Fill with tasks that have random delays: \\n    for(int i = 0; i < 20; i++) \\n      queue.put(new DelayedTask(rand.nextInt(5000))); \\n    // Set the stopping point \\n    queue.add(new DelayedTask.EndSentinel(5000, exec)); \\n    exec.execute(new DelayedTaskConsumer(queue));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b828fc3db9413a8d8d2e91f0fffb430d\",\n        \"type\": \"source_code\",\n        \"text\": \"NANOSECONDS.convert(delta, MILLISECONDS);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7c617125f81570c0947928e2d5e62afc\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<PrioritizedTask>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b7dd0f94b72189f9870b984206af4cf\",\n        \"type\": \"source_code\",\n        \"text\": \"this.priority = priority; \\n    sequence.add(this);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9fca97a52e5b68632de1e790f13109e5\",\n        \"type\": \"source_code\",\n        \"text\": \"return priority < arg.priority ? 1 : \\n      (priority > arg.priority ? -1 : 0);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8e6bd36746fa1aeddb5eabcd28479c21\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      TimeUnit.MILLISECONDS.sleep(rand.nextInt(250)); \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    } \\n    print(this);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b9e542376b2c176a44a48e00b2bdea3\",\n        \"type\": \"source_code\",\n        \"text\": \"return String.format(\\\"[%1$-3d]\\\", priority) + \\n      \\\" Task \\\" + id;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a3878a71d767bc23e634b2f8ccae06d8\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"(\\\" + id + \\\":\\\" + priority + \\\")\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f004d44f572ef53cde89e9ab7f81e0ef\",\n        \"type\": \"source_code\",\n        \"text\": \"private ExecutorService exec; \\n    public EndSentinel(ExecutorService e) { \\n      super(-1); // Lowest priority in this program \\n      exec = e; \\n    } \\n    public void run() { \\n      int count = 0; \\n      for(PrioritizedTask pt : sequence) { \\n        printnb(pt.summary()); \\n        if(++count % 5 == 0) \\n          print(); \\n      } \\n      print(); \\n      print(this + \\\" Calling shutdownNow()\\\"); \\n      exec.shutdownNow(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b05bf9976403c7f5e3b9c0fa204ae71f\",\n        \"type\": \"source_code\",\n        \"text\": \"Queue<Runnable> q, ExecutorService e) { \\n    queue = q; \\n    exec = e; // Used for EndSentinel\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e28335cb6355e98823b208d19dd93d86\",\n        \"type\": \"source_code\",\n        \"text\": \"// Unbounded queue; never blocks. \\n    // Fill it up fast with random priorities: \\n    for(int i = 0; i < 20; i++) { \\n      queue.add(new PrioritizedTask(rand.nextInt(10))); \\n      Thread.yield(); \\n    } \\n    // Trickle in highest-priority jobs: \\n    try { \\n      for(int i = 0; i < 10; i++) { \\n        TimeUnit.MILLISECONDS.sleep(250); \\n        queue.add(new PrioritizedTask(10)); \\n      } \\n      // Add jobs, lowest priority first: \\n      for(int i = 0; i < 10; i++) \\n        queue.add(new PrioritizedTask(i)); \\n      // A sentinel to stop all the tasks: \\n      queue.add(new PrioritizedTask.EndSentinel(exec)); \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    } \\n    print(\\\"Finished PrioritizedTaskProducer\\\");\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55e56680b507f47495e26d02fb3254a8\",\n        \"type\": \"source_code\",\n        \"text\": \"PriorityBlockingQueue<Runnable> q) { \\n    this.q = q;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43ce54cdda826741b28533781a6f0675\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) \\n        // Use current thread to run the task: \\n        q.take().run(); \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    } \\n    print(\\\"Finished PrioritizedTaskConsumer\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"789b77c4e6418a43c67989059a3f347f\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    PriorityBlockingQueue<Runnable> queue = \\n      new PriorityBlockingQueue<Runnable>(); \\n    exec.execute(new PrioritizedTaskProducer(queue, exec)); \\n    exec.execute(new PrioritizedTaskConsumer(queue));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d4e66c4b84b67f292c8e0bb4bd72cf7a\",\n        \"type\": \"source_code\",\n        \"text\": \"return thermostat;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3408292caadd7d8f304eb659e876083f\",\n        \"type\": \"source_code\",\n        \"text\": \"thermostat = value;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0b90aee8ad9b4d53acd430b0a20da28d\",\n        \"type\": \"source_code\",\n        \"text\": \"new ScheduledThreadPoolExecutor(10);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d89528a7547a79f84290278099499015\",\n        \"type\": \"source_code\",\n        \"text\": \"scheduler.schedule(event,delay,TimeUnit.MILLISECONDS);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aec0c5540d4a6d4abb648f48765be59f\",\n        \"type\": \"source_code\",\n        \"text\": \"scheduler.scheduleAtFixedRate( \\n      event, initialDelay, period, TimeUnit.MILLISECONDS);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1979cfd06a34dac8dff20449c5950c80\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here to \\n      // physically turn on the light. \\n      System.out.println(\\\"Turning on lights\\\"); \\n      light = true; \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb928dfe868965c5cbc9f33eb7a824cc\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here to \\n      // physically turn off the light. \\n      System.out.println(\\\"Turning off lights\\\"); \\n      light = false; \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25ea0c9c1f5024d9f2001fbf582e35b5\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here. \\n      System.out.println(\\\"Turning greenhouse water on\\\"); \\n      water = true; \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"696eb3aadae75a5055274ee85b365392\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here. \\n      System.out.println(\\\"Turning greenhouse water off\\\"); \\n      water = false; \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebf393b5d638cc1fcce0e0b6b5ef18ce\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here. \\n      System.out.println(\\\"Thermostat to night setting\\\"); \\n      setThermostat(\\\"Night\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c39ad0477e5b207d5929543d44416587\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      // Put hardware control code here. \\n      System.out.println(\\\"Thermostat to day setting\\\"); \\n      setThermostat(\\\"Day\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"98088f4ef99ba76bc5c76c2506fe978d\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { System.out.println(\\\"Bing!\\\"); }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"225966bfa57f7e5e20138b40f0dd2c59\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      System.out.println(\\\"Terminating\\\"); \\n      scheduler.shutdownNow(); \\n      // Must start a separate task to do this job, \\n      // since the scheduler has been shut down: \\n      new Thread() { \\n        public void run() { \\n          for(DataPoint d : data) \\n            System.out.println(d); \\n        } \\n      }.start(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0057f9ec438266d1c1c41745760c3e17\",\n        \"type\": \"source_code\",\n        \"text\": \"final Calendar time; \\n    final float temperature; \\n    final float humidity; \\n    public DataPoint(Calendar d, float temp, float hum) { \\n      time = d; \\n      temperature = temp; \\n      humidity = hum; \\n    } \\n    public String toString() { \\n      return time.getTime() + \\n        String.format( \\n          \\\" temperature: %1$.1f humidity: %2$.2f\\\", \\n          temperature, humidity); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7354a90b4047b51c73121a4f17e1eeb4\",\n        \"type\": \"source_code\",\n        \"text\": \"lastTime.set(Calendar.MINUTE, 30); \\n    lastTime.set(Calendar.SECOND, 00);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"727c79de89bf5b57e5c2c08ff4b355fd\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<DataPoint>());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3e67f9254e8d4d7dd503bc6c3085988\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      System.out.println(\\\"Collecting data\\\"); \\n      synchronized(GreenhouseScheduler.this) { \\n        // Pretend the interval is longer than it is: \\n        lastTime.set(Calendar.MINUTE, \\n          lastTime.get(Calendar.MINUTE) + 30); \\n        // One in 5 chances of reversing the direction: \\n        if(rand.nextInt(5) == 4) \\n          tempDirection = -tempDirection; \\n        // Store previous value: \\n        lastTemp = lastTemp + \\n          tempDirection * (1.0f + rand.nextFloat()); \\n        if(rand.nextInt(5) == 4) \\n          humidityDirection = -humidityDirection; \\n        lastHumidity = lastHumidity + \\n          humidityDirection * rand.nextFloat();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"622bbc158020099dc0d826d7f423bce4\",\n        \"type\": \"source_code\",\n        \"text\": \"// Calendar must be cloned, otherwise all \\n        // DataPoints hold references to the same lastTime. \\n        // For a basic object like Calendar, clone() is OK. \\n        data.add(new DataPoint((Calendar)lastTime.clone(), \\n          lastTemp, lastHumidity)); \\n      } \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a22d0eec8d1671650e05dbe9b2229119\",\n        \"type\": \"source_code\",\n        \"text\": \"GreenhouseScheduler gh = new GreenhouseScheduler(); \\n    gh.schedule(gh.new Terminate(), 5000); \\n    // Former \\\"Restart\\\" class not necessary: \\n    gh.repeat(gh.new Bell(), 0, 1000); \\n    gh.repeat(gh.new ThermostatNight(), 0, 2000); \\n    gh.repeat(gh.new LightOn(), 0, 200); \\n    gh.repeat(gh.new LightOff(), 0, 400); \\n    gh.repeat(gh.new WaterOn(), 0, 600); \\n    gh.repeat(gh.new WaterOff(), 0, 800); \\n    gh.repeat(gh.new ThermostatDay(), 0, 1400); \\n    gh.repeat(gh.new CollectData(), 500, 500);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9045ffe84c064f830f8213a94c5b438c\",\n        \"type\": \"source_code\",\n        \"text\": \"this.size = size; \\n    checkedOut = new boolean[size]; \\n    available = new Semaphore(size, true); \\n    // Load pool with objects that can be checked out: \\n    for(int i = 0; i < size; ++i) \\n      try { \\n        // Assumes a default constructor: \\n        items.add(classObject.newInstance()); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"050465bb9f61f2ddc6874732ebe2c017\",\n        \"type\": \"source_code\",\n        \"text\": \"available.acquire(); \\n    return getItem();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5d5b322fbc9dddfc8b17a58f312ac48\",\n        \"type\": \"source_code\",\n        \"text\": \"if(releaseItem(x)) \\n      available.release();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c53bb68a50387472b039f5edf49a49c6\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < size; ++i) \\n      if(!checkedOut[i]) { \\n        checkedOut[i] = true; \\n        return items.get(i); \\n      } \\n    return null; // Semaphore prevents reaching here\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9740b0f65a325065c2152830dd573fd0\",\n        \"type\": \"source_code\",\n        \"text\": \"int index = items.indexOf(item); \\n    if(index == -1) return false; // Not in the list \\n    if(checkedOut[index]) { \\n      checkedOut[index] = false; \\n      return true; \\n    } \\n    return false; // Wasn\\u2019t checked out\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e3f50b316c1c3b1630595d228177cc6\",\n        \"type\": \"source_code\",\n        \"text\": \"// Expensive, interruptible operation: \\n    for(int i = 1; i < 10000; i++) { \\n      d += (Math.PI + Math.E) / (double)i; \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"01d54da70bb133b26b44491a43cbeae7\",\n        \"type\": \"source_code\",\n        \"text\": \"this.pool = pool;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"85bb85c1b1bc7096672250cbba204292\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      T item = pool.checkOut(); \\n      print(this + \\\"checked out \\\" + item); \\n      TimeUnit.SECONDS.sleep(1); \\n      print(this +\\\"checking in \\\" + item); \\n      pool.checkIn(item); \\n    } catch(InterruptedException e) { \\n      // Acceptable way to terminate \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7039b29bb1f56388fb3ee92caab97872\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"CheckoutTask \\\" + id + \\\" \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"45707effac40329836eee90eae66b459\",\n        \"type\": \"source_code\",\n        \"text\": \"final Pool<Fat> pool = \\n      new Pool<Fat>(Fat.class, SIZE); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < SIZE; i++) \\n      exec.execute(new CheckoutTask<Fat>(pool)); \\n    print(\\\"All CheckoutTasks created\\\"); \\n    List<Fat> list = new ArrayList<Fat>(); \\n    for(int i = 0; i < SIZE; i++) { \\n      Fat f = pool.checkOut(); \\n      printnb(i + \\\": main() thread checked out \\\"); \\n      f.operation(); \\n      list.add(f); \\n    } \\n    Future<?> blocked = exec.submit(new Runnable() { \\n      public void run() { \\n        try {\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"df2495da1922d984db09b8fa08456478\",\n        \"type\": \"source_code\",\n        \"text\": \"// Semaphore prevents additional checkout, \\n          // so call is blocked: \\n          pool.checkOut(); \\n        } catch(InterruptedException e) { \\n          print(\\\"checkOut() Interrupted\\\"); \\n        } \\n      } \\n    }); \\n    TimeUnit.SECONDS.sleep(2); \\n    blocked.cancel(true); // Break out of blocked call \\n    print(\\\"Checking in objects in \\\" + list); \\n    for(Fat f : list) \\n      pool.checkIn(f); \\n    for(Fat f : list) \\n      pool.checkIn(f); // Second checkIn ignored \\n    exec.shutdown();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42022eda712b2a6538f2260539a72a0b\",\n        \"type\": \"source_code\",\n        \"text\": \"exchanger = exchg;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57e8aa45ee8423c9f0a3499408037946\",\n        \"type\": \"source_code\",\n        \"text\": \"generator = gen; \\n    this.holder = holder;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bff42c50924e60989f5e6f8823d2982a\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        for(int i = 0; i < ExchangerDemo.size; i++) \\n          holder.add(generator.next()); \\n        // Exchange full for empty: \\n        holder = exchanger.exchange(holder); \\n      } \\n    } catch(InterruptedException e) { \\n      // OK to terminate this way. \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecf9550fd87af399777c33d5db65fba8\",\n        \"type\": \"source_code\",\n        \"text\": \"exchanger = ex; \\n    this.holder = holder;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5d2b5046d46660b842ca93b0187922c\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        holder = exchanger.exchange(holder); \\n        for(T x : holder) { \\n          value = x; // Fetch out value \\n          holder.remove(x); // OK for CopyOnWriteArrayList \\n        } \\n      } \\n    } catch(InterruptedException e) { \\n      // OK to terminate this way. \\n    } \\n    System.out.println(\\\"Final value: \\\" + value);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff987a0a56c1ef3cdca2419cb5f09582\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) \\n      size = new Integer(args[0]); \\n    if(args.length > 1) \\n      delay = new Integer(args[1]); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    Exchanger<List<Fat>> xc = new Exchanger<List<Fat>>(); \\n    List<Fat> \\n      producerList = new CopyOnWriteArrayList<Fat>(), \\n      consumerList = new CopyOnWriteArrayList<Fat>(); \\n    exec.execute(new ExchangerProducer<Fat>(xc, \\n      BasicGenerator.create(Fat.class), producerList)); \\n    exec.execute( \\n      new ExchangerConsumer<Fat>(xc,consumerList)); \\n    TimeUnit.SECONDS.sleep(delay); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64f88112347e181a5ddbbc0a32095721\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"[\\\" + serviceTime + \\\"]\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbb5230d13ebe13717246cee36d19f3b\",\n        \"type\": \"source_code\",\n        \"text\": \"super(maxLineSize);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4e70e0bc05ea6c57d922a0de71de458c\",\n        \"type\": \"source_code\",\n        \"text\": \"if(this.size() == 0) \\n      return \\\"[Empty]\\\"; \\n    StringBuilder result = new StringBuilder(); \\n    for(Customer customer : this) \\n      result.append(customer); \\n    return result.toString();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"371ab31b31d992625a2651d1733184ab\",\n        \"type\": \"source_code\",\n        \"text\": \"customers = cq;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1c43c214f517a5eccfd3b9f14d9ff13\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        TimeUnit.MILLISECONDS.sleep(rand.nextInt(300)); \\n        customers.put(new Customer(rand.nextInt(1000))); \\n      } \\n    } catch(InterruptedException e) { \\n      System.out.println(\\\"CustomerGenerator interrupted\\\"); \\n    } \\n    System.out.println(\\\"CustomerGenerator terminating\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4e312d4153f8757c542d170862e3b3e8\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        Customer customer = customers.take(); \\n        TimeUnit.MILLISECONDS.sleep( \\n          customer.getServiceTime()); \\n        synchronized(this) { \\n          customersServed++; \\n          while(!servingCustomerLine) \\n            wait(); \\n        } \\n      } \\n    } catch(InterruptedException e) { \\n      System.out.println(this + \\\"interrupted\\\"); \\n    } \\n    System.out.println(this + \\\"terminating\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"041af52ddb8069bb179b63407da333ae\",\n        \"type\": \"source_code\",\n        \"text\": \"customersServed = 0; \\n    servingCustomerLine = false;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"624618b378a8cdd5df71ed29f81ab606\",\n        \"type\": \"source_code\",\n        \"text\": \"assert !servingCustomerLine:\\\"already serving: \\\" + this; \\n    servingCustomerLine = true; \\n    notifyAll();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0add99a07c86929a625d56bae207f8b4\",\n        \"type\": \"source_code\",\n        \"text\": \"return customersServed < other.customersServed ? -1 : \\n      (customersServed == other.customersServed ? 0 : 1);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd3935ad2931472319aede1f3427fb5f\",\n        \"type\": \"source_code\",\n        \"text\": \"new PriorityQueue<Teller>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0780808549326a8733e98ef20039edad\",\n        \"type\": \"source_code\",\n        \"text\": \"new LinkedList<Teller>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64f855b6f7241c15ab592bff4128f818\",\n        \"type\": \"source_code\",\n        \"text\": \"CustomerLine customers, int adjustmentPeriod) { \\n    exec = e; \\n    this.customers = customers; \\n    this.adjustmentPeriod = adjustmentPeriod; \\n    // Start with a single teller: \\n    Teller teller = new Teller(customers); \\n    exec.execute(teller); \\n    workingTellers.add(teller);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb059bb470f11c1618515d677caf6f04\",\n        \"type\": \"source_code\",\n        \"text\": \"// This is actually a control system. By adjusting \\n    // the numbers, you can reveal stability issues in \\n    // the control mechanism. \\n    // If line is too long, add another teller: \\n    if(customers.size() / workingTellers.size() > 2) { \\n        // If tellers are on break or doing \\n        // another job, bring one back: \\n        if(tellersDoingOtherThings.size() > 0) { \\n          Teller teller = tellersDoingOtherThings.remove(); \\n          teller.serveCustomerLine(); \\n          workingTellers.offer(teller); \\n          return; \\n        } \\n      // Else create (hire) a new teller \\n      Teller teller = new Teller(customers); \\n      exec.execute(teller); \\n      workingTellers.add(teller); \\n      return; \\n    } \\n    // If line is short enough, remove a teller: \\n    if(workingTellers.size() > 1 && \\n      customers.size() / workingTellers.size() < 2) \\n        reassignOneTeller(); \\n    // If there is no line, we only need one teller: \\n    if(customers.size() == 0) \\n      while(workingTellers.size() > 1) \\n        reassignOneTeller();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"73ddc239273d10b3aa277c42d44895f1\",\n        \"type\": \"source_code\",\n        \"text\": \"Teller teller = workingTellers.poll(); \\n    teller.doSomethingElse(); \\n    tellersDoingOtherThings.offer(teller);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"86030c81bc991f57e2c977d0d1c409e9\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        TimeUnit.MILLISECONDS.sleep(adjustmentPeriod); \\n        adjustTellerNumber(); \\n        System.out.print(customers + \\\" { \\\"); \\n        for(Teller teller : workingTellers) \\n          System.out.print(teller.shortString() + \\\" \\\"); \\n        System.out.println(\\\"}\\\"); \\n      } \\n    } catch(InterruptedException e) { \\n      System.out.println(this + \\\"interrupted\\\"); \\n    } \\n    System.out.println(this + \\\"terminating\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"317d041e510912a9b813d42a01656701\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    // If line is too long, customers will leave: \\n    CustomerLine customers = \\n      new CustomerLine(MAX_LINE_SIZE); \\n    exec.execute(new CustomerGenerator(customers)); \\n    // Manager will add and remove tellers as necessary: \\n    exec.execute(new TellerManager( \\n      exec, customers, ADJUSTMENT_PERIOD)); \\n    if(args.length > 0) // Optional argument \\n      TimeUnit.SECONDS.sleep(new Integer(args[0])); \\n    else { \\n      System.out.println(\\\"Press \\u2018Enter\\u2019 to quit\\\"); \\n      System.in.read(); \\n    } \\n    exec.shutdownNow();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78ea26c79e9364b371a9082c7dc14038\",\n        \"type\": \"source_code\",\n        \"text\": \"customer = cust; \\n    waitPerson = wp; \\n    food = f;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"829cbd91d6b69bda510fd5f1bcee5c26\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Order: \\\" + id + \\\" item: \\\" + food + \\n      \\\" for: \\\" + customer + \\n      \\\" served by: \\\" + waitPerson;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d307eb3dedb89995572fd53a5b23b36c\",\n        \"type\": \"source_code\",\n        \"text\": \"order = ord; \\n    food = f;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f909382599428ddd14b7a1f1943462af\",\n        \"type\": \"source_code\",\n        \"text\": \"new SynchronousQueue<Plate>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5c82bae1e83abb38dd7cd0654c30bae2\",\n        \"type\": \"source_code\",\n        \"text\": \"// Only blocks if customer is still \\n    // eating the previous course: \\n    placeSetting.put(p);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33a10929b959b0e863c55cd331c52842\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Course course : Course.values()) { \\n      Food food = course.randomSelection(); \\n      try { \\n        waitPerson.placeOrder(this, food); \\n        // Blocks until course has been delivered: \\n        print(this + \\\"eating \\\" + placeSetting.take()); \\n      } catch(InterruptedException e) { \\n        print(this + \\\"waiting for \\\" + \\n          course + \\\" interrupted\\\"); \\n        break; \\n      } \\n    } \\n    print(this + \\\"finished meal, leaving\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"22048b57ff08a3648026764fcea1f48a\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Customer \\\" + id + \\\" \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"797cfdafeac6c07c7fe225fe4e4aa2d3\",\n        \"type\": \"source_code\",\n        \"text\": \"new LinkedBlockingQueue<Plate>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"440ec8d196263d8b71853c45497d80ba\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      // Shouldn\\u2019t actually block because this is \\n      // a LinkedBlockingQueue with no size limit: \\n      restaurant.orders.put(new Order(cust, this, food)); \\n    } catch(InterruptedException e) { \\n      print(this + \\\" placeOrder interrupted\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c97a883b7882ba87b594902b25613994\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until a course is ready \\n        Plate plate = filledOrders.take(); \\n        print(this + \\\"received \\\" + plate + \\n          \\\" delivering to \\\" + \\n          plate.getOrder().getCustomer()); \\n        plate.getOrder().getCustomer().deliver(plate); \\n      } \\n    } catch(InterruptedException e) { \\n      print(this + \\\" interrupted\\\"); \\n    } \\n    print(this + \\\" off duty\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15153fce6fe3ad34fa69c630efcc05b9\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"WaitPerson \\\" + id + \\\" \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e0ac9c094b74aac78c37ec2f470cd727\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until an order appears: \\n        Order order = restaurant.orders.take(); \\n        Food requestedItem = order.item(); \\n        // Time to prepare order: \\n        TimeUnit.MILLISECONDS.sleep(rand.nextInt(500)); \\n        Plate plate = new Plate(order, requestedItem); \\n        order.getWaitPerson().filledOrders.put(plate); \\n      } \\n    } catch(InterruptedException e) { \\n      print(this + \\\" interrupted\\\"); \\n    } \\n    print(this + \\\" off duty\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1d0ffe867a6d7d970c79348e036870e2\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<WaitPerson>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eaf96908bf150b9078a2ea67de83b1ee\",\n        \"type\": \"source_code\",\n        \"text\": \"orders = new LinkedBlockingQueue<Order>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7cb76451dfa580f38a430b5dd79ed288\",\n        \"type\": \"source_code\",\n        \"text\": \"int nChefs) { \\n    exec = e; \\n    for(int i = 0; i < nWaitPersons; i++) { \\n      WaitPerson waitPerson = new WaitPerson(this); \\n      waitPersons.add(waitPerson); \\n      exec.execute(waitPerson); \\n    } \\n    for(int i = 0; i < nChefs; i++) { \\n      Chef chef = new Chef(this); \\n      chefs.add(chef);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d3b3eb0b9669d0f2cd6dbdc876b110a\",\n        \"type\": \"source_code\",\n        \"text\": \"exec.execute(chef); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64d7311478e528b5296494191ec8786b\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // A new customer arrives; assign a WaitPerson: \\n        WaitPerson wp = waitPersons.get( \\n          rand.nextInt(waitPersons.size())); \\n        Customer c = new Customer(wp); \\n        exec.execute(c); \\n        TimeUnit.MILLISECONDS.sleep(100); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Restaurant interrupted\\\"); \\n    } \\n    print(\\\"Restaurant closing\\\");\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b9346daa9586ce1c2f3f0ddebc3b135c\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    Restaurant restaurant = new Restaurant(exec, 5, 2); \\n    exec.execute(restaurant); \\n    if(args.length > 0) // Optional argument \\n      TimeUnit.SECONDS.sleep(new Integer(args[0])); \\n    else { \\n      print(\\\"Press \\u2018Enter\\u2019 to quit\\\"); \\n      System.in.read(); \\n    } \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e58e861fbfe4cf9d0d6123b3c513952\",\n        \"type\": \"source_code\",\n        \"text\": \"engine = false, driveTrain = false, wheels = false;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d0a259c2bc59371ed5f01fbfb8814797\",\n        \"type\": \"source_code\",\n        \"text\": \"driveTrain = true;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdd87bce761dfa5802b8cd34ff960239\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Car \\\" + id + \\\" [\\\" + \\\" engine: \\\" + engine \\n      + \\\" driveTrain: \\\" + driveTrain \\n      + \\\" wheels: \\\" + wheels + \\\" ]\\\";\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c02ff8bc4179e9e48f2b4c7a33dd2b1\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        TimeUnit.MILLISECONDS.sleep(500); \\n        // Make chassis: \\n        Car c = new Car(counter++); \\n        print(\\\"ChassisBuilder created \\\" + c); \\n        // Insert into queue \\n        carQueue.put(c); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Interrupted: ChassisBuilder\\\"); \\n    } \\n    print(\\\"ChassisBuilder off\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b710dfcda039d7a2f78501c1722e8675\",\n        \"type\": \"source_code\",\n        \"text\": \"chassisQueue = cq; \\n    finishingQueue = fq; \\n    robotPool = rp;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d27ce9e9351a001735ec34610f4f9dd8\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until chassis is available: \\n        car = chassisQueue.take(); \\n        // Hire robots to perform work: \\n        robotPool.hire(EngineRobot.class, this); \\n        robotPool.hire(DriveTrainRobot.class, this); \\n        robotPool.hire(WheelRobot.class, this); \\n        barrier.await(); // Until the robots finish \\n        // Put car into finishingQueue for further work \\n        finishingQueue.put(car); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting Assembler via interrupt\\\"); \\n    } catch(BrokenBarrierException e) { \\n      // This one we want to know about \\n      throw new RuntimeException(e); \\n    } \\n    print(\\\"Assembler off\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1820609a6a1d7c432a7dd48f52c16d4e\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        print(carQueue.take()); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting Reporter via interrupt\\\"); \\n    } \\n    print(\\\"Reporter off\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5f22779b8bbe157c96655a8bbcd410c\",\n        \"type\": \"source_code\",\n        \"text\": \"this.assembler = assembler; \\n    return this;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a44ad6ca642af81fc584c582122a1960\",\n        \"type\": \"source_code\",\n        \"text\": \"engage = true; \\n    notifyAll();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42857719988a08c9d24a9c40c81038c6\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      powerDown(); // Wait until needed\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a787bccdcf5476444d5506e9bf804d3\",\n        \"type\": \"source_code\",\n        \"text\": \"while(!Thread.interrupted()) { \\n        performService(); \\n        assembler.barrier().await(); // Synchronize \\n        // We\\u2019re done with that job... \\n        powerDown(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting \\\" + this + \\\" via interrupt\\\"); \\n    } catch(BrokenBarrierException e) { \\n      // This one we want to know about \\n      throw new RuntimeException(e); \\n    } \\n    print(this + \\\" off\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"190c210a4b987aabc08a3ac98c565634\",\n        \"type\": \"source_code\",\n        \"text\": \"engage = false; \\n    assembler = null; // Disconnect from the Assembler \\n    // Put ourselves back in the available pool: \\n    pool.release(this); \\n    while(engage == false)  // Power down \\n      wait();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af63721faee3c16e540d809d4bcff45b\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\" installing engine\\\"); \\n    assembler.car().addEngine();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e138a94b87082eb6d349eed4a936796\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\" installing DriveTrain\\\"); \\n    assembler.car().addDriveTrain();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d586158f85d4beaef0da46cc0b638f27\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\" installing Wheels\\\"); \\n    assembler.car().addWheels();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40535d1f65316e194d2ad8bc31bb84d9\",\n        \"type\": \"source_code\",\n        \"text\": \"pool.add(r); \\n    notifyAll();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2177ba80bedbb365be91fbb10edec260\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Robot r : pool) \\n      if(r.getClass().equals(robotType)) { \\n        pool.remove(r);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48ee08bceab687d5dbb1944a82560a74\",\n        \"type\": \"source_code\",\n        \"text\": \"r.assignAssembler(d); \\n        r.engage(); // Power it up to do the task \\n        return; \\n      } \\n    wait(); // None available \\n    hire(robotType, d); // Try again, recursively\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d1cf870736230c2d345bee0470b32160\",\n        \"type\": \"source_code\",\n        \"text\": \"CarQueue chassisQueue = new CarQueue(), \\n             finishingQueue = new CarQueue(); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    RobotPool robotPool = new RobotPool(); \\n    exec.execute(new EngineRobot(robotPool)); \\n    exec.execute(new DriveTrainRobot(robotPool)); \\n    exec.execute(new WheelRobot(robotPool)); \\n    exec.execute(new Assembler( \\n      chassisQueue, finishingQueue, robotPool)); \\n    exec.execute(new Reporter(finishingQueue)); \\n    // Start everything running by producing chassis: \\n    exec.execute(new ChassisBuilder(chassisQueue)); \\n    TimeUnit.SECONDS.sleep(7); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"86c20b1286968fc7a756bfbf5ec3563c\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      ++counter; \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"345fbd74d5bfbb97fa1ec668ddd5c94b\",\n        \"type\": \"source_code\",\n        \"text\": \"long start = System.nanoTime(); \\n    for(long i = 0; i < 10000000L; i++) \\n      incr.increment(); \\n    return System.nanoTime() - start;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"670b55d820b9771a3120c6680375c459\",\n        \"type\": \"source_code\",\n        \"text\": \"long synchTime = test(new SynchronizingTest()); \\n    long lockTime = test(new LockingTest()); \\n    System.out.printf(\\\"synchronized: %1$10d\\\\n\\\", synchTime); \\n    System.out.printf(\\\"Lock:         %1$10d\\\\n\\\", lockTime); \\n    System.out.printf(\\\"Lock/synchronized = %1$.3f\\\", \\n      (double)lockTime/(double)synchTime);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ba9371ef0e003ad81cac7d3f978b59f5\",\n        \"type\": \"source_code\",\n        \"text\": \"939098964\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f3a67e5b2268867ae6e8bb3fa657876\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newFixedThreadPool(N*2);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38860bbc6713bdf6be68759aee38f11a\",\n        \"type\": \"source_code\",\n        \"text\": \"new CyclicBarrier(N*2 + 1);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d36dd0b78a931aabdc0bd3a97fc0ad96\",\n        \"type\": \"source_code\",\n        \"text\": \"// Load the array of random numbers:\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8213b5eba516ea425bf103df2fd8e453\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    for(int i = 0; i < SIZE; i++) \\n      preLoaded[i] = rand.nextInt();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c9bded6c9ce3e33669fc7de5f603f70c\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      for(long i = 0; i < cycles; i++) \\n        accumulate(); \\n      try { \\n        barrier.await(); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcc93bf64e1dee84bc6de1fb16bed63f\",\n        \"type\": \"source_code\",\n        \"text\": \"private volatile long value; \\n    public void run() { \\n      for(long i = 0; i < cycles; i++) \\n        value = read(); \\n      try { \\n        barrier.await(); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"355be9d760a344468b8da65f5776d235\",\n        \"type\": \"source_code\",\n        \"text\": \"long start = System.nanoTime(); \\n    for(int i = 0; i < N; i++) { \\n      exec.execute(new Modifier()); \\n      exec.execute(new Reader()); \\n    } \\n    try { \\n      barrier.await(); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    } \\n    duration = System.nanoTime() - start; \\n    printf(\\\"%-13s: %13d\\\\n\\\", id, duration);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"453aa8ca6f4c9369a22ff41ef5a4f03b\",\n        \"type\": \"source_code\",\n        \"text\": \"printf(\\\"%-22s: %.2f\\\\n\\\", acc1.id + \\\"/\\\" + acc2.id, \\n      (double)acc1.duration/(double)acc2.duration);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57a99c03954aa09ab5242b5b00776727\",\n        \"type\": \"source_code\",\n        \"text\": \"value += preLoaded[index++]; \\n    if(index >= SIZE) index = 0;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae07cb0df2f07d94203b74a9acad30f0\",\n        \"type\": \"source_code\",\n        \"text\": \"value += preLoaded[index++];\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d8471a7148c4f28908988d170da1e7e1\",\n        \"type\": \"source_code\",\n        \"text\": \"if(index >= SIZE) index = 0;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7a71c53eb1fd797e31c55762a8a7b63\",\n        \"type\": \"source_code\",\n        \"text\": \"return value;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d7eb731f2cc19d99b00f632aef425328\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      value += preLoaded[index++]; \\n      if(index >= SIZE) index = 0; \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9d6dd66aced3cec479f884ce88fcfa9b\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      return value; \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"941579c1f3dab0c7bac11fdd9fdba7fb\",\n        \"type\": \"source_code\",\n        \"text\": \"// Oops! Relying on more than one Atomic at \\n    // a time doesn\\u2019t work. But it still gives us \\n    // a performance indicator: \\n    int i = index.getAndIncrement(); \\n    value.getAndAdd(preLoaded[i]); \\n    if(++i >= SIZE) \\n      index.set(0);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcda5c5bbac0d6b7991a255f1b3c9a7a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"============================\\\"); \\n    printf(\\\"%-12s : %13d\\\\n\\\", \\\"Cycles\\\", Accumulator.cycles); \\n    baseLine.timedTest(); \\n    synch.timedTest(); \\n    lock.timedTest(); \\n    atomic.timedTest(); \\n    Accumulator.report(synch, baseLine); \\n    Accumulator.report(lock, baseLine); \\n    Accumulator.report(atomic, baseLine); \\n    Accumulator.report(synch, lock); \\n    Accumulator.report(synch, atomic); \\n    Accumulator.report(lock, atomic);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5cfa5cf7dbdfac9087582bdbbf9ed069\",\n        \"type\": \"source_code\",\n        \"text\": \"int iterations = 5; // Default \\n    if(args.length > 0) // Optionally change iterations \\n      iterations = new Integer(args[0]); \\n    // The first time fills the thread pool: \\n    print(\\\"Warmup\\\"); \\n    baseLine.timedTest(); \\n    // Now the initial test doesn\\u2019t include the cost \\n    // of starting the threads for the first time. \\n    // Produce multiple data points: \\n    for(int i = 0; i < iterations; i++) { \\n      test(); \\n      Accumulator.cycles *= 2; \\n    } \\n    Accumulator.exec.shutdown();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60f07395211046d8507fd1c903cd17de\",\n        \"type\": \"source_code\",\n        \"text\": \":      34237033\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ac01565ff87f7a077f1cff5a3d5b09d\",\n        \"type\": \"source_code\",\n        \"text\": \":         50000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f61cfd6ed884e1d016a9e9c4e58b3c0\",\n        \"type\": \"source_code\",\n        \"text\": \":      20966632\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2fe2bdfcb93a18d41e32946665d90e16\",\n        \"type\": \"source_code\",\n        \"text\": \"24326555\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f1c7481999942156c569148cc151ea6e\",\n        \"type\": \"source_code\",\n        \"text\": \":      53669950\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a46e6e2e3dcccefa838b8965218ea924\",\n        \"type\": \"source_code\",\n        \"text\": \":      30552487\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0058c0f35f0520227478d8f0d802a2cf\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.56\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a8c46e4b107906fbfa62e30825b26b1\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.46\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f888df6e4093ea128f130548cadb2934\",\n        \"type\": \"source_code\",\n        \"text\": \": 0.45\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4476dade336d1f9ad974e7d45fadca55\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.76\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d174402c3ff18cc8e495b5ed5cc1ac76\",\n        \"type\": \"source_code\",\n        \"text\": \":        100000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3987fcf3ef654d5ceb5b4ac0e30c5631\",\n        \"type\": \"source_code\",\n        \"text\": \":      41512818\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"544ad6e7e47dd8800abb24178ca9ebd5\",\n        \"type\": \"source_code\",\n        \"text\": \"43843003\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9e0a3503bd19b3eebd7d02ec0220608a\",\n        \"type\": \"source_code\",\n        \"text\": \":      87430386\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"46147e6b871fcdf8962fd0e3881bc8d8\",\n        \"type\": \"source_code\",\n        \"text\": \":      51892350\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d78821c3daa6ee73d2e2e2280ffc34fe\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.11\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff7d3a2921b0787288bb71436b6e1efd\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.25\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c29550686c79b2d19284ba1e148ab8a\",\n        \"type\": \"source_code\",\n        \"text\": \": 0.50\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"59cb5ff78a8aca5566d00e9ea9d90eeb\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.68\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b8ac9c21c0ffb47a57af1b8c194afb2a\",\n        \"type\": \"source_code\",\n        \"text\": \":        200000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07c9c19292cce47bd3d3edd1f281ebe1\",\n        \"type\": \"source_code\",\n        \"text\": \":      80176670\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"611aeab8fafd637c510a9859b97324e8\",\n        \"type\": \"source_code\",\n        \"text\": \"5455046661\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e94fcf9abbb15b5553401932bc600157\",\n        \"type\": \"source_code\",\n        \"text\": \":     177686829\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52a841e4d4e57498879363eac0cbe5a2\",\n        \"type\": \"source_code\",\n        \"text\": \":     101789194\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"19fbeb166a60162a89df37a5c1ae7ef6\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.22\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a002b194fce2eedb5e4f04270d13169\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.27\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eb05ab2714c48312de6c34b20826f8b4\",\n        \"type\": \"source_code\",\n        \"text\": \": 30.70\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c006fd9ef42d75116da1070321c21c0\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.75\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6303f16a49a07a9c534e9b508f844837\",\n        \"type\": \"source_code\",\n        \"text\": \":        400000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5cc765ddfdae97293fc78971b07cdb1\",\n        \"type\": \"source_code\",\n        \"text\": \":     160383513\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"27b80f9092b3874262d4b09c3f0101bd\",\n        \"type\": \"source_code\",\n        \"text\": \"780052493\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e93455fa28165e5ea0a1855f91052d4\",\n        \"type\": \"source_code\",\n        \"text\": \":     362187652\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dfe15e65227e3884c87f77c70f4e68f6\",\n        \"type\": \"source_code\",\n        \"text\": \":     202030984\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea333e01cdc832c9e3499f0a751e9b31\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.26\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c7ab3f6d551ceea21f05df4f2d5be831\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.26\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72147155bdc3067e815d8cb2d24f0555\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.15\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83b072c8b1117c0896805c7a0b6a0010\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.79\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"033653ad5f5faee111e58263f0902381\",\n        \"type\": \"source_code\",\n        \"text\": \":        800000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9bf73ada624168328d46e8bc3f8286\",\n        \"type\": \"source_code\",\n        \"text\": \":     322064955\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1ed411367b88d2955a0a6d196fa8b01\",\n        \"type\": \"source_code\",\n        \"text\": \"336155014\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc5ef88c6b96c0ece204873bfb920413\",\n        \"type\": \"source_code\",\n        \"text\": \":     704615531\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87e8fe0e091b9ba74b794ef53132a27f\",\n        \"type\": \"source_code\",\n        \"text\": \":     393231542\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e9c979dd300d1d138a17712da9eb912\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.19\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"050a61b80bd176c23f68c8c2e62c254b\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.22\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d36546a7daa2462c1d33f365ada1de5f\",\n        \"type\": \"source_code\",\n        \"text\": \": 0.47\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83b072c8b1117c0896805c7a0b6a0010\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.79\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d3ee3c239724f06ef442ca05bd58f4f\",\n        \"type\": \"source_code\",\n        \"text\": \":       1600000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a2c26ba474f05d99a39f380651a3f320\",\n        \"type\": \"source_code\",\n        \"text\": \":     650004120\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"320a638aaf83e3f230969c8dc2e1d9aa\",\n        \"type\": \"source_code\",\n        \"text\": \":    1419602771\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7f847e581831ddf3d8e709c7fda7d2a\",\n        \"type\": \"source_code\",\n        \"text\": \":     796950171\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"509d711006ba213d349a7ba85b3fc29a\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.18\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae3088a6ed16f051eadc2ecb411de995\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.23\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33f95ea506712f9765907a70888ff8b7\",\n        \"type\": \"source_code\",\n        \"text\": \": 36.80\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe66bc6a4a7dcde75903cc53429af8c0\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.78\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa3bc363477cd9b6d198d41d2db3eab3\",\n        \"type\": \"source_code\",\n        \"text\": \":       3200000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94ac0263e85ba16740cc5dbcab7f2916\",\n        \"type\": \"source_code\",\n        \"text\": \":    1285664519\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4fa6767a4fd7c6e10029bd131f055f4c\",\n        \"type\": \"source_code\",\n        \"text\": \":    2846988654\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e5017f56d7d778fae4c0fb3603c8e71\",\n        \"type\": \"source_code\",\n        \"text\": \":    1590545726\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"632f87295bf78230be8c7a8a35faf3e8\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.21\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fba770baba9408c7320b76738f16cee6\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.24\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f601f557ffb1649a2bcca4b33653e76f\",\n        \"type\": \"source_code\",\n        \"text\": \": 33.84\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83b072c8b1117c0896805c7a0b6a0010\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.79\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c23539246db1546d265aafaea3f738aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newCachedThreadPool();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c269780a30d06a291a2a71287a8ba83a\",\n        \"type\": \"source_code\",\n        \"text\": \"this.testId = testId + \\\" \\\" + \\n      nReaders + \\\"r \\\" + nWriters + \\\"w\\\"; \\n    this.nReaders = nReaders; \\n    this.nWriters = nWriters; \\n    writeData = Generated.array(Integer.class, \\n      new RandomGenerator.Integer(), containerSize); \\n    for(int i = 0; i < testReps; i++) { \\n      runTest(); \\n      readTime = 0; \\n      writeTime = 0; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c9648b11de077f4e68c69533fa3080a0\",\n        \"type\": \"source_code\",\n        \"text\": \"endLatch = new CountDownLatch(nReaders + nWriters); \\n    testContainer = containerInitializer(); \\n    startReadersAndWriters(); \\n    try { \\n      endLatch.await(); \\n    } catch(InterruptedException ex) { \\n      System.out.println(\\\"endLatch interrupted\\\"); \\n    } \\n    System.out.printf(\\\"%-27s %14d %14d\\\\n\\\", \\n      testId, readTime, writeTime); \\n    if(readTime != 0 && writeTime != 0) \\n      System.out.printf(\\\"%-27s %14d\\\\n\\\", \\n        \\\"readTime + writeTime =\\\", readTime + writeTime);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e72a098348dd4e3e345b745c97f55259\",\n        \"type\": \"source_code\",\n        \"text\": \"abstract void test(); \\n    abstract void putResults(); \\n    long duration; \\n    public void run() { \\n      long startTime = System.nanoTime(); \\n      test(); \\n      duration = System.nanoTime() - startTime; \\n      synchronized(Tester.this) { \\n        putResults(); \\n      } \\n      endLatch.countDown(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"580e6971a51adce605f0bf423a346266\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) \\n      testReps = new Integer(args[0]); \\n    if(args.length > 1) \\n      testCycles = new Integer(args[1]); \\n    if(args.length > 2) \\n      containerSize = new Integer(args[2]); \\n    System.out.printf(\\\"%-27s %14s %14s\\\\n\\\",\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c98d4271f7b02c8ddc419d02537cc5f\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Type\\\", \\\"Read time\\\", \\\"Write time\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f62d2003dbebee9c77fd35de0d38ea1e\",\n        \"type\": \"source_code\",\n        \"text\": \"super(testId, nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8beaa4033189baf23bd188f5e727c66d\",\n        \"type\": \"source_code\",\n        \"text\": \"long result = 0; \\n    void test() { \\n      for(long i = 0; i < testCycles; i++) \\n        for(int index = 0; index < containerSize; index++) \\n          result += testContainer.get(index); \\n    } \\n    void putResults() { \\n      readResult += result; \\n      readTime += duration; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a74d2e23670b03e486fd780a0a8335f0\",\n        \"type\": \"source_code\",\n        \"text\": \"void test() { \\n      for(long i = 0; i < testCycles; i++) \\n        for(int index = 0; index < containerSize; index++) \\n          testContainer.set(index, writeData[index]); \\n    } \\n    void putResults() { \\n      writeTime += duration; \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c34518c16fc15b7a56010e89fe4a4fe8\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nReaders; i++) \\n      exec.execute(new Reader());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c741e99766f8aea79eb5f2cdb17ec151\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nWriters; i++) \\n      exec.execute(new Writer());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0be46112da611da3c185c258d0cf5fec\",\n        \"type\": \"source_code\",\n        \"text\": \"return Collections.synchronizedList( \\n      new ArrayList<Integer>( \\n        new CountingIntegerList(containerSize)));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"69805076084223ed72513ddfa2d71b78\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"Synched ArrayList\\\", nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a7914a00456eded2a635d291eab9c19\",\n        \"type\": \"source_code\",\n        \"text\": \"return new CopyOnWriteArrayList<Integer>( \\n      new CountingIntegerList(containerSize));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4e700fe6d90c20e73101143ad2bf6290\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"CopyOnWriteArrayList\\\", nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b0927f0aa80d33cb3b884f23c20f598\",\n        \"type\": \"source_code\",\n        \"text\": \"Tester.initMain(args); \\n    new SynchronizedArrayListTest(10, 0); \\n    new SynchronizedArrayListTest(9, 1); \\n    new SynchronizedArrayListTest(5, 5); \\n    new CopyOnWriteArrayListTest(10, 0); \\n    new CopyOnWriteArrayListTest(9, 1); \\n    new CopyOnWriteArrayListTest(5, 5); \\n    Tester.exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5879be05d91b298151146cacf4f9bc8\",\n        \"type\": \"source_code\",\n        \"text\": \"Read time     Write time\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0065b23b9407c7f6f82d387bfdc9a3c\",\n        \"type\": \"source_code\",\n        \"text\": \"232158294700              0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6d85047f6fff5f094d2b1f2225f828e8\",\n        \"type\": \"source_code\",\n        \"text\": \"198947618203    24918613399\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fc637b18ab21aa9f5a19a5174ab47454\",\n        \"type\": \"source_code\",\n        \"text\": \"223866231602\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"242be2c8027b402bf9b000d75b15aa53\",\n        \"type\": \"source_code\",\n        \"text\": \"117367305062   132176613508\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f36585e7505ff12e069e35b1c3c88ad\",\n        \"type\": \"source_code\",\n        \"text\": \"249543918570\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af245fd7635ab16f8682538b8194ee49\",\n        \"type\": \"source_code\",\n        \"text\": \"758386889              0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2a7625c9d52f076966b6cdb64a8b23f0\",\n        \"type\": \"source_code\",\n        \"text\": \"741305671      136145237\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ec109e18f484215cd5a959af422119b2\",\n        \"type\": \"source_code\",\n        \"text\": \"877450908\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83b5ea0018fc95fe1a00b1856b1fc318\",\n        \"type\": \"source_code\",\n        \"text\": \"212763075    67967464300\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"087444caa7c1f46988328c67ece1a9e0\",\n        \"type\": \"source_code\",\n        \"text\": \"68180227375\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f62d2003dbebee9c77fd35de0d38ea1e\",\n        \"type\": \"source_code\",\n        \"text\": \"super(testId, nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8beaa4033189baf23bd188f5e727c66d\",\n        \"type\": \"source_code\",\n        \"text\": \"long result = 0; \\n    void test() { \\n      for(long i = 0; i < testCycles; i++) \\n        for(int index = 0; index < containerSize; index++) \\n          result += testContainer.get(index); \\n    } \\n    void putResults() { \\n      readResult += result; \\n      readTime += duration; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b524bd548d4a7e1467798c97530ca96\",\n        \"type\": \"source_code\",\n        \"text\": \"void test() { \\n      for(long i = 0; i < testCycles; i++) \\n        for(int index = 0; index < containerSize; index++) \\n          testContainer.put(index, writeData[index]); \\n    } \\n    void putResults() { \\n      writeTime += duration; \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26914bc0b344725397c56301231b1940\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nReaders; i++) \\n      exec.execute(new Reader()); \\n    for(int i = 0; i < nWriters; i++) \\n      exec.execute(new Writer());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb2205d424fb8b8fba58db308022f4af\",\n        \"type\": \"source_code\",\n        \"text\": \"return Collections.synchronizedMap( \\n      new HashMap<Integer,Integer>( \\n        MapData.map( \\n          new CountingGenerator.Integer(), \\n          new CountingGenerator.Integer(), \\n          containerSize)));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d0bcd9561743357391be31bed0d1f4b8\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"Synched HashMap\\\", nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26d250a21b2cbf06f4c2f5aee405756a\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ConcurrentHashMap<Integer,Integer>( \\n      MapData.map( \\n        new CountingGenerator.Integer(), \\n        new CountingGenerator.Integer(), containerSize));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"867734f075c807b9f7ecc50f02f00016\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"ConcurrentHashMap\\\", nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae1fea7d9249eb4fe185565b3369acbe\",\n        \"type\": \"source_code\",\n        \"text\": \"Tester.initMain(args); \\n    new SynchronizedHashMapTest(10, 0); \\n    new SynchronizedHashMapTest(9, 1); \\n    new SynchronizedHashMapTest(5, 5); \\n    new ConcurrentHashMapTest(10, 0); \\n    new ConcurrentHashMapTest(9, 1); \\n    new ConcurrentHashMapTest(5, 5); \\n    Tester.exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5879be05d91b298151146cacf4f9bc8\",\n        \"type\": \"source_code\",\n        \"text\": \"Read time     Write time\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b2964fc8509b035cde268b56f4040ef1\",\n        \"type\": \"source_code\",\n        \"text\": \"306052025049              0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a4b6a6fbc1f034a19b9e9003ad585ed2\",\n        \"type\": \"source_code\",\n        \"text\": \"428319156207    47697347568\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6127f58c873bf74975933b7fff2eb70a\",\n        \"type\": \"source_code\",\n        \"text\": \"476016503775\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9db0b4cce343bb353f71079f6340b4f9\",\n        \"type\": \"source_code\",\n        \"text\": \"243956877760   244012003202\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1afe8826994a592d162e7459118d75b8\",\n        \"type\": \"source_code\",\n        \"text\": \"487968880962\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d09a09f93eb48d6254c1f586f341b9a0\",\n        \"type\": \"source_code\",\n        \"text\": \"23352654318              0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32e3581f443e962078074770813a6629\",\n        \"type\": \"source_code\",\n        \"text\": \"18833089400     1541853224\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e0babe64bc19cc5cc8609fa60677eeb4\",\n        \"type\": \"source_code\",\n        \"text\": \"20374942624\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c44700123109e30b5b4ed0a89fd7f3bf\",\n        \"type\": \"source_code\",\n        \"text\": \"12037625732    11850489099\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"537280019e81f1a9b5a7592a276b03e8\",\n        \"type\": \"source_code\",\n        \"text\": \"23888114831\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da6dab1e1cdf6104b23edb9246a28b64\",\n        \"type\": \"source_code\",\n        \"text\": \"new AtomicInteger[N_ELEMENTS][N_GENES];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33b8154650fc861a7f01c1e2d293b61b\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      while(!Thread.interrupted()) { \\n        // Randomly select an element to work on: \\n        int element = rand.nextInt(N_ELEMENTS); \\n        for(int i = 0; i < N_GENES; i++) { \\n          int previous = element - 1; \\n          if(previous < 0) previous = N_ELEMENTS - 1; \\n          int next = element + 1; \\n          if(next >= N_ELEMENTS) next = 0; \\n          int oldvalue = GRID[element][i].get();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6ebcbd056fed5ee2e6af572ba9d32528\",\n        \"type\": \"source_code\",\n        \"text\": \"// Perform some kind of modeling calculation: \\n          int newvalue = oldvalue + \\n            GRID[previous][i].get() + GRID[next][i].get(); \\n          newvalue /= 3; // Average the three values \\n          if(!GRID[element][i] \\n            .compareAndSet(oldvalue, newvalue)) { \\n            // Policy here to deal with failure. Here, we \\n            // just report it and ignore it; our model \\n            // will eventually deal with it. \\n            print(\\\"Old value changed from \\\" + oldvalue); \\n          } \\n        } \\n      } \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fdb59fce5108e9d3bea324745697887e\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < N_ELEMENTS; i++) \\n      for(int j = 0; j < N_GENES; j++) \\n        GRID[i][j] = new AtomicInteger(rand.nextInt(1000)); \\n    for(int i = 0; i < N_EVOLVERS; i++) \\n      exec.execute(new Evolver()); \\n    TimeUnit.SECONDS.sleep(5); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9f1a20e73949cdbb204ad64f731f0e6\",\n        \"type\": \"source_code\",\n        \"text\": \"new ReentrantReadWriteLock(true);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d408110ed0231e163c3d46e276bda84\",\n        \"type\": \"source_code\",\n        \"text\": \"lockedList = new ArrayList<T>( \\n      Collections.nCopies(size, initialValue));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"91ee0114d1b00abbf87f50a2613f071f\",\n        \"type\": \"source_code\",\n        \"text\": \"Lock wlock = lock.writeLock(); \\n    wlock.lock(); \\n    try { \\n      return lockedList.set(index, element); \\n    } finally { \\n      wlock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48d3e2379aef2104cb79e66ed8f740e9\",\n        \"type\": \"source_code\",\n        \"text\": \"Lock rlock = lock.readLock(); \\n    rlock.lock(); \\n    try { \\n      // Show that multiple readers \\n      // may acquire the read lock: \\n      if(lock.getReadLockCount() > 1) \\n        print(lock.getReadLockCount()); \\n      return lockedList.get(index); \\n    } finally { \\n      rlock.unlock(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ace27d78b98c55ca93406d1c837648c\",\n        \"type\": \"source_code\",\n        \"text\": \"new ReaderWriterListTest(30, 1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7e5fcdfca994be1ac0d9adae2b17cdc2\",\n        \"type\": \"source_code\",\n        \"text\": \"new ReaderWriterList<Integer>(SIZE, 0);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4dc69060569c2caf8136dda4b628db45\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      try { \\n        for(int i = 0; i < 20; i++) { // 2 second test \\n          list.set(i, rand.nextInt()); \\n          TimeUnit.MILLISECONDS.sleep(100); \\n        } \\n      } catch(InterruptedException e) { \\n        // Acceptable way to exit \\n      } \\n      print(\\\"Writer finished, shutting down\\\"); \\n      exec.shutdownNow(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a129c2f9c031018ce4e33a9ea0ea66d\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      try { \\n        while(!Thread.interrupted()) { \\n          for(int i = 0; i < SIZE; i++) { \\n            list.get(i); \\n            TimeUnit.MILLISECONDS.sleep(1); \\n          }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"957574976ef3bd320c531684a438e27d\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n      } catch(InterruptedException e) { \\n        // Acceptable way to exit \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"735eba1af2ab716440bf2bef593c55c3\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < readers; i++) \\n      exec.execute(new Reader()); \\n    for(int i = 0; i < writers; i++) \\n      exec.execute(new Writer());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1023bf6a8e582f63e6e1546bd8b024c\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newSingleThreadExecutor();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"987954e2fe6fda6db94c928cbf87629d\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      TimeUnit.MILLISECONDS.sleep( \\n        100 + rand.nextInt(factor)); \\n    } catch(InterruptedException e) { \\n      print(\\\"sleep() interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1acce789b7c5ad481eab10031f51579\",\n        \"type\": \"source_code\",\n        \"text\": \"return ex.submit(new Callable<Integer>() { \\n      public Integer call() { \\n        print(\\\"starting \\\" + x + \\\" + \\\" + y); \\n        pause(500); \\n        return x + y; \\n      } \\n    });\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53df489a956a66c893866a50afa720ac\",\n        \"type\": \"source_code\",\n        \"text\": \"return ex.submit(new Callable<Float>() { \\n      public Float call() { \\n        print(\\\"starting \\\" + x + \\\" + \\\" + y); \\n        pause(2000); \\n        return x + y; \\n      } \\n    });\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc47b7bd35c8a95e2dcb1f971a03203b\",\n        \"type\": \"source_code\",\n        \"text\": \"ActiveObjectDemo d1 = new ActiveObjectDemo(); \\n    // Prevents ConcurrentModificationException: \\n    List<Future<?>> results = \\n      new CopyOnWriteArrayList<Future<?>>(); \\n    for(float f = 0.0f; f < 1.0f; f += 0.2f) \\n      results.add(d1.calculateFloat(f, f)); \\n    for(int i = 0; i < 5; i++) \\n      results.add(d1.calculateInt(i, i)); \\n    print(\\\"All asynch calls made\\\"); \\n    while(results.size() > 0) {\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d8a3b3eed5e8dbb51f26a42db7b2dcf\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Future<?> f : results) \\n        if(f.isDone()) { \\n          try { \\n            print(f.get()); \\n          } catch(Exception e) { \\n            throw new RuntimeException(e); \\n          } \\n          results.remove(f); \\n        } \\n    } \\n    d1.shutdown();\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"756640f0aea5f5bea1cbe250a9d08989\",\n        \"type\": \"source_code\",\n        \"text\": \"Interfaces\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"885ffbe314b8be471040b1ae58a8ee8a\",\n        \"type\": \"source_code\",\n        \"text\": \"JFrame frame = new JFrame(\\\"Hello Swing\\\"); \\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \\n    frame.setSize(300, 100); \\n    frame.setVisible(true);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a980bda21ba9b5edc34c5519b8ab104c\",\n        \"type\": \"source_code\",\n        \"text\": \"JFrame frame = new JFrame(\\\"Hello Swing\\\"); \\n    JLabel label = new JLabel(\\\"A Label\\\"); \\n    frame.add(label); \\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \\n    frame.setSize(300, 100); \\n    frame.setVisible(true); \\n    TimeUnit.SECONDS.sleep(1); \\n    label.setText(\\\"Hey! This is Different!\\\");\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc5500e27183e46ebabe2f71a6e72c1f\",\n        \"type\": \"source_code\",\n        \"text\": \"JFrame frame = new JFrame(\\\"Hello Swing\\\"); \\n    final JLabel label = new JLabel(\\\"A Label\\\"); \\n    frame.add(label); \\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \\n    frame.setSize(300, 100); \\n    frame.setVisible(true); \\n    TimeUnit.SECONDS.sleep(1); \\n    SwingUtilities.invokeLater(new Runnable() { \\n      public void run() { \\n        label.setText(\\\"Hey! This is Different!\\\"); \\n      } \\n    });\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"47ade092b2e15390a11c1b71239835a6\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"Hello Swing\\\"); \\n    label = new JLabel(\\\"A Label\\\"); \\n    add(label); \\n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \\n    setSize(300, 100); \\n    setVisible(true);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1e41befd9d98269c970c1ce40ca4c80\",\n        \"type\": \"source_code\",\n        \"text\": \"SwingUtilities.invokeLater(new Runnable() { \\n      public void run() { ssp = new SubmitSwingProgram(); } \\n    }); \\n    TimeUnit.SECONDS.sleep(1); \\n    SwingUtilities.invokeLater(new Runnable() { \\n      public void run() { \\n        ssp.label.setText(\\\"Hey! This is Different!\\\"); \\n      } \\n    });\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6391bbf2fe5c5b0875e01e9a3cfef075\",\n        \"type\": \"source_code\",\n        \"text\": \"SwingUtilities.invokeLater(new Runnable() { \\n      public void run() { \\n        f.setTitle(f.getClass().getSimpleName()); \\n        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \\n        f.setSize(width, height); \\n        f.setVisible(true); \\n      } \\n    });\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"197ee3a588d76c244978d190cb7201fb\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Button 1\\\"), \\n    b2 = new JButton(\\\"Button 2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c3e371d59438e6154955c9689ac1055\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d03a46440c85e48332e5a36f7344859\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Button1(), 200, 100);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"197ee3a588d76c244978d190cb7201fb\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Button 1\\\"), \\n    b2 = new JButton(\\\"Button 2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6669bd4244a898d3f4380c866f65a32b\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      String name = ((JButton)e.getSource()).getText(); \\n      txt.setText(name);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"650ebc6b08d1514cc79c1a8a5fd16183\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(bl); \\n    b2.addActionListener(bl); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2); \\n    add(txt);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4e2f278d54f51491c5551e6dcf151570\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Button2(), 200, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"197ee3a588d76c244978d190cb7201fb\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Button 1\\\"), \\n    b2 = new JButton(\\\"Button 2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ebe3bf28f31906ba61f226f5b24b621\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      String name = ((JButton)e.getSource()).getText(); \\n      txt.setText(name); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"650ebc6b08d1514cc79c1a8a5fd16183\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(bl); \\n    b2.addActionListener(bl); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2); \\n    add(txt);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a98952242f8e39e714655bef7b928bf6\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Button2b(), 200, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0ccb214a7e6d10283628c8eefc2a7232\",\n        \"type\": \"source_code\",\n        \"text\": \"b = new JButton(\\\"Add Data\\\"), \\n    c = new JButton(\\\"Clear Data\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"92b65223ceb9ca351e2b5a497beb363e\",\n        \"type\": \"source_code\",\n        \"text\": \"new HashMap<String,String>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5885d24a0ec6cfcbc884e9c7458471ea\",\n        \"type\": \"source_code\",\n        \"text\": \"// Use up all the data: \\n    m.putAll(Countries.capitals()); \\n    b.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        for(Map.Entry me : m.entrySet()) \\n          t.append(me.getKey() + \\\": \\\"+ me.getValue()+\\\"\\\\n\\\"); \\n      } \\n    }); \\n    c.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        t.setText(\\\"\\\"); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(new JScrollPane(t)); \\n    add(b); \\n    add(c);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d6251e168d3eed98e62081744fe5e2de\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TextArea(), 475, 425);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b0afac17cfc82195fceccab8a8b43319\",\n        \"type\": \"source_code\",\n        \"text\": \"add(BorderLayout.NORTH, new JButton(\\\"North\\\")); \\n    add(BorderLayout.SOUTH, new JButton(\\\"South\\\")); \\n    add(BorderLayout.EAST, new JButton(\\\"East\\\")); \\n    add(BorderLayout.WEST, new JButton(\\\"West\\\")); \\n    add(BorderLayout.CENTER, new JButton(\\\"Center\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e68b63cf1e63223dfcefd3cb7c90ff6b\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new BorderLayout1(), 300, 250);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3bc460ab9ddb02bedcc7770f03f8c8d0\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    for(int i = 0; i < 20; i++) \\n      add(new JButton(\\\"Button \\\" + i));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9c6031ee5c93d404999e29d4b0cfabc\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new FlowLayout1(), 300, 300);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b590d11e921f113a1941f8055147c71f\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new GridLayout(7,3)); \\n    for(int i = 0; i < 20; i++) \\n      add(new JButton(\\\"Button \\\" + i));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ddede31aaec2af3ffb7e73b1a9425abf\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new GridLayout1(), 300, 300);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"20436b342d1a3649e3d0a754ff1a63c6\",\n        \"type\": \"source_code\",\n        \"text\": \"Pattern.compile(\\\"(add\\\\\\\\w+?Listener\\\\\\\\(.*?\\\\\\\\))\\\");\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d7e68a389b748cd05690a098060707b5\",\n        \"type\": \"source_code\",\n        \"text\": \"Pattern.compile(\\\"\\\\\\\\w+\\\\\\\\.\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b75e3b6adadc295cbfd8ad7c27fb46fe\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      String nm = name.getText().trim(); \\n      if(nm.length() == 0) { \\n        results.setText(\\\"No match\\\"); \\n        return; \\n      } \\n      Class<?> kind; \\n      try { \\n        kind = Class.forName(\\\"javax.swing.\\\" + nm); \\n      } catch(ClassNotFoundException ex) { \\n        results.setText(\\\"No match\\\"); \\n        return; \\n      } \\n      Method[] methods = kind.getMethods(); \\n      results.setText(\\\"\\\"); \\n      for(Method m : methods) { \\n        Matcher matcher = \\n          addListener.matcher(m.toString()); \\n        if(matcher.find()) \\n          results.append(qualifier.matcher( \\n            matcher.group(1)).replaceAll(\\\"\\\") + \\\"\\\\n\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"96348983c34545ed4fd59399f82ef3be\",\n        \"type\": \"source_code\",\n        \"text\": \"NameL nameListener = new NameL(); \\n    name.addActionListener(nameListener); \\n    JPanel top = new JPanel(); \\n    top.add(new JLabel(\\\"Swing class name (press Enter):\\\")); \\n    top.add(name); \\n    add(BorderLayout.NORTH, top); \\n    add(new JScrollPane(results)); \\n    // Initial data and test: \\n    name.setText(\\\"JTextArea\\\"); \\n    nameListener.actionPerformed( \\n      new ActionEvent(\\\"\\\", 0 ,\\\"\\\"));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32c8ffa5350c2d8ba4c48a890d8bc45d\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new ShowAddListeners(), 500, 400);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed99379da9fc03b91f03a42b4bdf3341\",\n        \"type\": \"source_code\",\n        \"text\": \"// Respond to mouse click...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed99379da9fc03b91f03a42b4bdf3341\",\n        \"type\": \"source_code\",\n        \"text\": \"// Respond to mouse click...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fabedd9f1a7fc551eefa04c2f5f9a119\",\n        \"type\": \"source_code\",\n        \"text\": \"new HashMap<String,JTextField>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db46bd4dc080c3ac4084f615dfa32778\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"focusGained\\\", \\\"focusLost\\\", \\\"keyPressed\\\", \\n    \\\"keyReleased\\\", \\\"keyTyped\\\", \\\"mouseClicked\\\", \\n    \\\"mouseEntered\\\", \\\"mouseExited\\\", \\\"mousePressed\\\", \\n    \\\"mouseReleased\\\", \\\"mouseDragged\\\", \\\"mouseMoved\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c2cfd974d2606a3d919afe68c21bbfa9\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new MyButton(Color.BLUE, \\\"test1\\\"), \\n    b2 = new MyButton(Color.RED, \\\"test2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"342efe64693ac59fa51c02bac6d79b2b\",\n        \"type\": \"source_code\",\n        \"text\": \"void report(String field, String msg) { \\n      h.get(field).setText(msg); \\n    } \\n    FocusListener fl = new FocusListener() { \\n      public void focusGained(FocusEvent e) { \\n        report(\\\"focusGained\\\", e.paramString()); \\n      } \\n      public void focusLost(FocusEvent e) { \\n        report(\\\"focusLost\\\", e.paramString()); \\n      } \\n    }; \\n    KeyListener kl = new KeyListener() { \\n      public void keyPressed(KeyEvent e) { \\n        report(\\\"keyPressed\\\", e.paramString());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3d2fb067fd91fad1adf8d682d8e7c98\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n      public void keyReleased(KeyEvent e) { \\n        report(\\\"keyReleased\\\", e.paramString()); \\n      } \\n      public void keyTyped(KeyEvent e) { \\n        report(\\\"keyTyped\\\", e.paramString()); \\n      } \\n    }; \\n    MouseListener ml = new MouseListener() { \\n      public void mouseClicked(MouseEvent e) { \\n        report(\\\"mouseClicked\\\", e.paramString()); \\n      } \\n      public void mouseEntered(MouseEvent e) { \\n        report(\\\"mouseEntered\\\", e.paramString()); \\n      } \\n      public void mouseExited(MouseEvent e) { \\n        report(\\\"mouseExited\\\", e.paramString()); \\n      } \\n      public void mousePressed(MouseEvent e) { \\n        report(\\\"mousePressed\\\", e.paramString()); \\n      } \\n      public void mouseReleased(MouseEvent e) { \\n        report(\\\"mouseReleased\\\", e.paramString()); \\n      } \\n    }; \\n    MouseMotionListener mml = new MouseMotionListener() { \\n      public void mouseDragged(MouseEvent e) { \\n        report(\\\"mouseDragged\\\", e.paramString()); \\n      } \\n      public void mouseMoved(MouseEvent e) { \\n        report(\\\"mouseMoved\\\", e.paramString()); \\n      } \\n    }; \\n    public MyButton(Color color, String label) { \\n      super(label); \\n      setBackground(color); \\n      addFocusListener(fl); \\n      addKeyListener(kl); \\n      addMouseListener(ml); \\n      addMouseMotionListener(mml); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ec8b26bfd426ca9f5ae98ae8ceae295\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new GridLayout(event.length + 1, 2)); \\n    for(String evt : event) { \\n      JTextField t = new JTextField(); \\n      t.setEditable(false); \\n      add(new JLabel(evt, JLabel.RIGHT)); \\n      add(t); \\n      h.put(evt, t); \\n    } \\n    add(b1); \\n    add(b2);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"809bf26f47a94adbf06136dfba627a64\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TrackEvent(), 700, 500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1e8cf20b461950dc8f52ea36b203b544\",\n        \"type\": \"source_code\",\n        \"text\": \"up = new BasicArrowButton(BasicArrowButton.NORTH), \\n    down = new BasicArrowButton(BasicArrowButton.SOUTH), \\n    right = new BasicArrowButton(BasicArrowButton.EAST), \\n    left = new BasicArrowButton(BasicArrowButton.WEST);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"31a8a0606e413740a31c425aa125a430\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    add(jb); \\n    add(new JToggleButton(\\\"JToggleButton\\\")); \\n    add(new JCheckBox(\\\"JCheckBox\\\")); \\n    add(new JRadioButton(\\\"JRadioButton\\\")); \\n    JPanel jp = new JPanel(); \\n    jp.setBorder(new TitledBorder(\\\"Directions\\\")); \\n    jp.add(up); \\n    jp.add(down); \\n    jp.add(left); \\n    jp.add(right); \\n    add(jp);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c6120cff48ae5e52eae53d5a09714357\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Buttons(), 350, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6d961ec120ab732a38569f9a8ebe611c\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"June\\\", \\\"Ward\\\", \\\"Beaver\\\", \\\"Wally\\\", \\\"Eddie\\\", \\\"Lumpy\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c83d47d39366aeb76a1d76f31a41e0b\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<? extends AbstractButton> kind, String[] ids) { \\n    ButtonGroup bg = new ButtonGroup(); \\n    JPanel jp = new JPanel(); \\n    String title = kind.getName(); \\n    title = title.substring(title.lastIndexOf(\\u2018.\\u2019) + 1); \\n    jp.setBorder(new TitledBorder(title)); \\n    for(String id : ids) { \\n      AbstractButton ab = new JButton(\\\"failed\\\"); \\n      try { \\n        // Get the dynamic constructor method \\n        // that takes a String argument: \\n        Constructor ctor = \\n          kind.getConstructor(String.class); \\n        // Create a new object: \\n        ab = (AbstractButton)ctor.newInstance(id); \\n      } catch(Exception ex) { \\n        System.err.println(\\\"can\\u2019t create \\\" + kind); \\n      } \\n      bg.add(ab); \\n      jp.add(ab); \\n    } \\n    return jp;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4eb651bc1fbcefd162adc743948dcfe9\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    add(makeBPanel(JButton.class, ids)); \\n    add(makeBPanel(JToggleButton.class, ids)); \\n    add(makeBPanel(JCheckBox.class, ids)); \\n    add(makeBPanel(JRadioButton.class, ids));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03aae7b5b6a3988c728fd02ed5bd93f3\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new ButtonGroups(), 500, 350);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd184b81cde5fc1109a4a389d6e35914\",\n        \"type\": \"source_code\",\n        \"text\": \"faces = new Icon[]{ \\n      new ImageIcon(getClass().getResource(\\\"Face0.gif\\\")), \\n      new ImageIcon(getClass().getResource(\\\"Face1.gif\\\")), \\n      new ImageIcon(getClass().getResource(\\\"Face2.gif\\\")), \\n      new ImageIcon(getClass().getResource(\\\"Face3.gif\\\")), \\n      new ImageIcon(getClass().getResource(\\\"Face4.gif\\\")), \\n    }; \\n    jb = new JButton(\\\"JButton\\\", faces[3]); \\n    setLayout(new FlowLayout()); \\n    jb.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        if(mad) { \\n          jb.setIcon(faces[3]); \\n          mad = false; \\n        } else { \\n          jb.setIcon(faces[0]); \\n          mad = true; \\n        } \\n        jb.setVerticalAlignment(JButton.TOP); \\n        jb.setHorizontalAlignment(JButton.LEFT); \\n      } \\n    }); \\n    jb.setRolloverEnabled(true); \\n    jb.setRolloverIcon(faces[1]); \\n    jb.setPressedIcon(faces[2]); \\n    jb.setDisabledIcon(faces[4]); \\n    jb.setToolTipText(\\\"Yow!\\\"); \\n    add(jb); \\n    jb2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        if(jb.isEnabled()) { \\n          jb.setEnabled(false); \\n          jb2.setText(\\\"Enable\\\"); \\n        } else { \\n          jb.setEnabled(true); \\n          jb2.setText(\\\"Disable\\\"); \\n        } \\n      } \\n    }); \\n    add(jb2);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90953faef6a7c40a88e7410bf1dcde4b\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Faces(), 250, 125);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66e90206518dbc3bc7c7b150df5a4507\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Get Text\\\"), \\n    b2 = new JButton(\\\"Set Text\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70bf7717000f14b9b4b5fc814d91cf25\",\n        \"type\": \"source_code\",\n        \"text\": \"t1 = new JTextField(30), \\n    t2 = new JTextField(30), \\n    t3 = new JTextField(30);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef6a632c0902373b05033a5fe5294bfe\",\n        \"type\": \"source_code\",\n        \"text\": \"t1.setDocument(ucd); \\n    ucd.addDocumentListener(new T1()); \\n    b1.addActionListener(new B1()); \\n    b2.addActionListener(new B2()); \\n    t1.addActionListener(new T1A()); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2); \\n    add(t1); \\n    add(t2); \\n    add(t3);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"69cceddb22a19250e82e23ae1b213f0e\",\n        \"type\": \"source_code\",\n        \"text\": \"public void changedUpdate(DocumentEvent e) {} \\n    public void insertUpdate(DocumentEvent e) { \\n      t2.setText(t1.getText()); \\n      t3.setText(\\\"Text: \\\"+ t1.getText());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab0fb55041ad30a862c224866a64ab4a\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    public void removeUpdate(DocumentEvent e) { \\n      t2.setText(t1.getText()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c717f46c452d0a505644d76f8369ff46\",\n        \"type\": \"source_code\",\n        \"text\": \"private int count = 0; \\n    public void actionPerformed(ActionEvent e) { \\n      t3.setText(\\\"t1 Action Event \\\" + count++); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3cd942eec059de48c992414c71bdec69\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      if(t1.getSelectedText() == null) \\n        s = t1.getText(); \\n      else \\n        s = t1.getSelectedText(); \\n      t1.setEditable(true); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c22d649bf55793183950b2444e5b5f83\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      ucd.setUpperCase(false); \\n      t1.setText(\\\"Inserted by Button 2: \\\" + s); \\n      ucd.setUpperCase(true); \\n      t1.setEditable(false); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7dd73d74412a1098edc942e26e041d0\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TextFields(), 375, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"352a91c3414a4838e4e4ef5c3896868b\",\n        \"type\": \"source_code\",\n        \"text\": \"upperCase = flag;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ffea183953caa27ddd0332dd4956e10\",\n        \"type\": \"source_code\",\n        \"text\": \"if(upperCase) str = str.toUpperCase(); \\n    super.insertString(offset, str, attSet);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc7b28a3611acb148b7a95a27984f04d\",\n        \"type\": \"source_code\",\n        \"text\": \"JPanel jp = new JPanel(); \\n    jp.setLayout(new BorderLayout()); \\n    String nm = b.getClass().toString(); \\n    nm = nm.substring(nm.lastIndexOf(\\u2018.\\u2019) + 1); \\n    jp.add(new JLabel(nm, JLabel.CENTER), \\n      BorderLayout.CENTER); \\n    jp.setBorder(b); \\n    return jp;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad991f079c3e356752a7125dacab4bfd\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new GridLayout(2,4)); \\n    add(showBorder(new TitledBorder(\\\"Title\\\"))); \\n    add(showBorder(new EtchedBorder())); \\n    add(showBorder(new LineBorder(Color.BLUE))); \\n    add(showBorder( \\n      new MatteBorder(5,5,30,30,Color.GREEN))); \\n    add(showBorder( \\n      new BevelBorder(BevelBorder.RAISED))); \\n    add(showBorder( \\n      new SoftBevelBorder(BevelBorder.LOWERED))); \\n    add(showBorder(new CompoundBorder( \\n      new EtchedBorder(), \\n      new LineBorder(Color.RED))));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c5e95ea88b56b37b51930f05e253029f\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Borders(), 500, 300);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5965cbd298357ba4dcf0f387ae83db4a\",\n        \"type\": \"source_code\",\n        \"text\": \"new RandomGenerator.String(7);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da84fdeed8589f69d615199f399b7372\",\n        \"type\": \"source_code\",\n        \"text\": \"b.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        for(int i = 1; i < 10; i++) \\n          tp.setText(tp.getText() + sg.next() + \\\"\\\\n\\\"); \\n      } \\n    }); \\n    add(new JScrollPane(tp)); \\n    add(BorderLayout.SOUTH, b);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33cc7288abdae6e8bd58236f6c8ba918\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TextPane(), 475, 425);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8c79e50fb046fb91ccee72b2bdd19287\",\n        \"type\": \"source_code\",\n        \"text\": \"cb1 = new JCheckBox(\\\"Check Box 1\\\"), \\n    cb2 = new JCheckBox(\\\"Check Box 2\\\"), \\n    cb3 = new JCheckBox(\\\"Check Box 3\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"585e0a720776f7486747b0e4a8d2dbe7\",\n        \"type\": \"source_code\",\n        \"text\": \"cb1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        trace(\\\"1\\\", cb1); \\n      } \\n    }); \\n    cb2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        trace(\\\"2\\\", cb2); \\n      } \\n    }); \\n    cb3.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        trace(\\\"3\\\", cb3); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(new JScrollPane(t)); \\n    add(cb1); \\n    add(cb2); \\n    add(cb3);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d16dce6033cf0eeda02f2568bb266c\",\n        \"type\": \"source_code\",\n        \"text\": \"if(cb.isSelected()) \\n      t.append(\\\"Box \\\" + b + \\\" Set\\\\n\\\"); \\n    else \\n      t.append(\\\"Box \\\" + b + \\\" Cleared\\\\n\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ae863d0aafd2cc7b5b7d9819369265e\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new CheckBoxes(), 200, 300);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f6eedad0d5026667e7a2449daa2b461f\",\n        \"type\": \"source_code\",\n        \"text\": \"rb1 = new JRadioButton(\\\"one\\\", false), \\n    rb2 = new JRadioButton(\\\"two\\\", false), \\n    rb3 = new JRadioButton(\\\"three\\\", false);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"228e31f8259f3d3665a304a7729825ce\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      t.setText(\\\"Radio button \\\" + \\n        ((JRadioButton)e.getSource()).getText()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7edad8e0683023ecc9f5050ed80a9e96\",\n        \"type\": \"source_code\",\n        \"text\": \"rb1.addActionListener(al); \\n    rb2.addActionListener(al); \\n    rb3.addActionListener(al); \\n    g.add(rb1); g.add(rb2); g.add(rb3); \\n    t.setEditable(false); \\n    setLayout(new FlowLayout()); \\n    add(t); \\n    add(rb1); \\n    add(rb2); \\n    add(rb3);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5c3db051a9be3a0585cbe373e92ce0da\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new RadioButtons(), 200, 125);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cdc5e30b858d13dd42f3d1e889fd9a9c\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Ebullient\\\", \\\"Obtuse\\\", \\\"Recalcitrant\\\", \\\"Brilliant\\\", \\n    \\\"Somnescent\\\", \\\"Timorous\\\", \\\"Florid\\\", \\\"Putrescent\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2509444524c57ff9766c2de7851be09\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 4; i++) \\n      c.addItem(description[count++]); \\n    t.setEditable(false); \\n    b.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        if(count < description.length) \\n          c.addItem(description[count++]); \\n      } \\n    }); \\n    c.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        t.setText(\\\"index: \\\"+ c.getSelectedIndex() + \\\"   \\\" + \\n         ((JComboBox)e.getSource()).getSelectedItem()); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(t); \\n    add(c); \\n    add(b);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd06cf7b7c97df0d242533864756f9b7\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new ComboBoxes(), 200, 175);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e446a83f98947a13bd61ecce0efb7112\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Chocolate\\\", \\\"Strawberry\\\", \\\"Vanilla Fudge Swirl\\\", \\n    \\\"Mint Chip\\\", \\\"Mocha Almond Fudge\\\", \\\"Rum Raisin\\\", \\n    \\\"Praline Cream\\\", \\\"Mud Pie\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44c8381d4903c00cf809663464eaaac2\",\n        \"type\": \"source_code\",\n        \"text\": \"new JTextArea(flavors.length, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90e4cc2fc73a162b6c405c658c39f4bc\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      if(count < flavors.length) { \\n        lItems.add(0, flavors[count++]); \\n      } else { \\n        // Disable, since there are no more \\n        // flavors left to be added to the List \\n        b.setEnabled(false); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39cc849f6da5e4ff7dcac954ec6617fe\",\n        \"type\": \"source_code\",\n        \"text\": \"new ListSelectionListener() { \\n      public void valueChanged(ListSelectionEvent e) { \\n        if(e.getValueIsAdjusting()) return; \\n        t.setText(\\\"\\\"); \\n        for(Object item : lst.getSelectedValues()) \\n          t.append(item + \\\"\\\\n\\\"); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"478af28d39fac9b66daf5e26cc51435f\",\n        \"type\": \"source_code\",\n        \"text\": \"t.setEditable(false); \\n    setLayout(new FlowLayout()); \\n    // Create Borders for components: \\n    Border brd = BorderFactory.createMatteBorder( \\n      1, 1, 2, 2, Color.BLACK); \\n    lst.setBorder(brd); \\n    t.setBorder(brd); \\n    // Add the first four items to the List \\n    for(int i = 0; i < 4; i++) \\n      lItems.addElement(flavors[count++]); \\n    add(t); \\n    add(lst); \\n    add(b); \\n    // Register event listeners \\n    lst.addListSelectionListener(ll); \\n    b.addActionListener(bl);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d038c326abf499f93c28f34ef3fdc85a\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new List(), 250, 375);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e446a83f98947a13bd61ecce0efb7112\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Chocolate\\\", \\\"Strawberry\\\", \\\"Vanilla Fudge Swirl\\\", \\n    \\\"Mint Chip\\\", \\\"Mocha Almond Fudge\\\", \\\"Rum Raisin\\\", \\n    \\\"Praline Cream\\\", \\\"Mud Pie\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9a662e9803790766ea1d3bcd3c4cd68\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = 0; \\n    for(String flavor : flavors) \\n      tabs.addTab(flavors[i], \\n        new JButton(\\\"Tabbed pane \\\" + i++)); \\n    tabs.addChangeListener(new ChangeListener() { \\n      public void stateChanged(ChangeEvent e) { \\n        txt.setText(\\\"Tab selected: \\\" + \\n          tabs.getSelectedIndex()); \\n      } \\n    }); \\n    add(BorderLayout.SOUTH, txt); \\n    add(tabs);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e80a9596ac8ef7a2b75ee404a009bec7\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TabbedPane1(), 400, 250);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8cfe2b301e97e93bc6ab28f4e08867da\",\n        \"type\": \"source_code\",\n        \"text\": \"new JButton(\\\"Alert\\\"), new JButton(\\\"Yes/No\\\"), \\n    new JButton(\\\"Color\\\"), new JButton(\\\"Input\\\"), \\n    new JButton(\\\"3 Vals\\\")\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"08c73267bb29f6a79a4f0e5d0759d640\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      String id = ((JButton)e.getSource()).getText(); \\n      if(id.equals(\\\"Alert\\\")) \\n        JOptionPane.showMessageDialog(null, \\n          \\\"There\\u2019s a bug on you!\\\", \\\"Hey!\\\", \\n          JOptionPane.ERROR_MESSAGE); \\n      else if(id.equals(\\\"Yes/No\\\")) \\n        JOptionPane.showConfirmDialog(null, \\n          \\\"or no\\\", \\\"choose yes\\\", \\n          JOptionPane.YES_NO_OPTION); \\n      else if(id.equals(\\\"Color\\\")) { \\n        Object[] options = { \\\"Red\\\", \\\"Green\\\" }; \\n        int sel = JOptionPane.showOptionDialog( \\n          null, \\\"Choose a Color!\\\", \\\"Warning\\\", \\n          JOptionPane.DEFAULT_OPTION, \\n          JOptionPane.WARNING_MESSAGE, null, \\n          options, options[0]); \\n        if(sel != JOptionPane.CLOSED_OPTION) \\n          txt.setText(\\\"Color Selected: \\\" + options[sel]); \\n      } else if(id.equals(\\\"Input\\\")) { \\n        String val = JOptionPane.showInputDialog( \\n            \\\"How many fingers do you see?\\\"); \\n        txt.setText(val); \\n      } else if(id.equals(\\\"3 Vals\\\")) { \\n        Object[] selections = {\\\"First\\\", \\\"Second\\\", \\\"Third\\\"}; \\n        Object val = JOptionPane.showInputDialog( \\n          null, \\\"Choose one\\\", \\\"Input\\\", \\n          JOptionPane.INFORMATION_MESSAGE, \\n          null, selections, selections[0]); \\n        if(val != null) \\n          txt.setText(val.toString()); \\n      } \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"de9c883645144c3e4c0935ac652e6a5b\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    for(int i = 0; i < b.length; i++) { \\n      b[i].addActionListener(al); \\n      add(b[i]); \\n    } \\n    add(txt);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3433da08180fc17d1599314d3779891\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new MessageBoxes(), 200, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6922fc514229bc854dc1be87c8004582\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      t.setText(((JMenuItem)e.getSource()).getText()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e0bd154c5561fa9aabbb928c88f2145f\",\n        \"type\": \"source_code\",\n        \"text\": \"new JMenu(\\\"Winken\\\"), new JMenu(\\\"Blinken\\\"), \\n    new JMenu(\\\"Nod\\\")\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ed6d157593d3e519233d46958744707\",\n        \"type\": \"source_code\",\n        \"text\": \"new JMenuItem(\\\"Fee\\\"), new JMenuItem(\\\"Fi\\\"), \\n    new JMenuItem(\\\"Fo\\\"),  new JMenuItem(\\\"Zip\\\"), \\n    new JMenuItem(\\\"Zap\\\"), new JMenuItem(\\\"Zot\\\"), \\n    new JMenuItem(\\\"Olly\\\"), new JMenuItem(\\\"Oxen\\\"), \\n    new JMenuItem(\\\"Free\\\")\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e543d31833fedbc951d19c11c1f3695e\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < items.length; i++) { \\n      items[i].addActionListener(al); \\n      menus[i % 3].add(items[i]); \\n    } \\n    JMenuBar mb = new JMenuBar();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2477bdd270f03a472352adb77b4c3607\",\n        \"type\": \"source_code\",\n        \"text\": \"for(JMenu jm : menus) \\n      mb.add(jm); \\n    setJMenuBar(mb); \\n    setLayout(new FlowLayout()); \\n    add(t);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"137b617df3a2a0e81bf262f800bd218b\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new SimpleMenus(), 200, 150);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e446a83f98947a13bd61ecce0efb7112\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Chocolate\\\", \\\"Strawberry\\\", \\\"Vanilla Fudge Swirl\\\", \\n    \\\"Mint Chip\\\", \\\"Mocha Almond Fudge\\\", \\\"Rum Raisin\\\", \\n    \\\"Praline Cream\\\", \\\"Mud Pie\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"85fe6cd6edd51e1c456ff14382d1a7c7\",\n        \"type\": \"source_code\",\n        \"text\": \"f = new JMenu(\\\"File\\\"), \\n    m = new JMenu(\\\"Flavors\\\"), \\n    s = new JMenu(\\\"Safety\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8a34585b016b5ea1b2854d43ea95499\",\n        \"type\": \"source_code\",\n        \"text\": \"new JCheckBoxMenuItem(\\\"Guard\\\"), \\n    new JCheckBoxMenuItem(\\\"Hide\\\")\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8208eddbe45aca6d4c14fd8c4520cc37\",\n        \"type\": \"source_code\",\n        \"text\": \"// Adding a menu shortcut (mnemonic) is very \\n    // simple, but only JMenuItems can have them \\n    // in their constructors: \\n    new JMenuItem(\\\"Foo\\\", KeyEvent.VK_F), \\n    new JMenuItem(\\\"Bar\\\", KeyEvent.VK_A),\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b7f54e8784e91520c6c7544c37822bc\",\n        \"type\": \"source_code\",\n        \"text\": \"// No shortcut: \\n    new JMenuItem(\\\"Baz\\\"),\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f09b7cfb035bad8b2d1db0d9d0d7a83\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JMenuBar m = getJMenuBar(); \\n      setJMenuBar(m == mb1 ? mb2 : mb1); \\n      validate(); // Refresh the frame \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"054aa64af52bca0661d3ffecbee50e2a\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JMenuItem target = (JMenuItem)e.getSource(); \\n      String actionCommand = target.getActionCommand(); \\n      if(actionCommand.equals(\\\"Open\\\")) { \\n        String s = t.getText(); \\n        boolean chosen = false; \\n        for(String flavor : flavors) \\n          if(s.equals(flavor)) \\n            chosen = true; \\n        if(!chosen) \\n          t.setText(\\\"Choose a flavor first!\\\"); \\n        else \\n          t.setText(\\\"Opening \\\" + s + \\\". Mmm, mm!\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32aab663a4efc4615afee2e8d46d2430\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JMenuItem target = (JMenuItem)e.getSource(); \\n      t.setText(target.getText()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dcd2b2198bc3b75ca3f73678917388d2\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      t.setText(\\\"Foo selected\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b922b06c8a672b24f7a2d26ae559b6fb\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      t.setText(\\\"Bar selected\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09374ed3c6ac9da20c5b18d8a6ac6a5f\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      t.setText(\\\"Baz selected\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87bf1c6ab6ab2a97db9a3e4c035506ec\",\n        \"type\": \"source_code\",\n        \"text\": \"public void itemStateChanged(ItemEvent e) { \\n      JCheckBoxMenuItem target = \\n        (JCheckBoxMenuItem)e.getSource(); \\n      String actionCommand = target.getActionCommand(); \\n      if(actionCommand.equals(\\\"Guard\\\")) \\n        t.setText(\\\"Guard the Ice Cream! \\\" + \\n          \\\"Guarding is \\\" + target.getState()); \\n      else if(actionCommand.equals(\\\"Hide\\\")) \\n        t.setText(\\\"Hide the Ice Cream! \\\" + \\n          \\\"Is it hidden? \\\" + target.getState());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dfa7c63eae6cc9df3a84d464ef79053f\",\n        \"type\": \"source_code\",\n        \"text\": \"ML ml = new ML(); \\n    CMIL cmil = new CMIL(); \\n    safety[0].setActionCommand(\\\"Guard\\\"); \\n    safety[0].setMnemonic(KeyEvent.VK_G); \\n    safety[0].addItemListener(cmil); \\n    safety[1].setActionCommand(\\\"Hide\\\"); \\n    safety[1].setMnemonic(KeyEvent.VK_H); \\n    safety[1].addItemListener(cmil); \\n    other[0].addActionListener(new FooL()); \\n    other[1].addActionListener(new BarL()); \\n    other[2].addActionListener(new BazL()); \\n    FL fl = new FL(); \\n    int n = 0; \\n    for(String flavor : flavors) { \\n      JMenuItem mi = new JMenuItem(flavor); \\n      mi.addActionListener(fl); \\n      m.add(mi); \\n      // Add separators at intervals: \\n      if((n++ + 1) % 3 == 0) \\n        m.addSeparator(); \\n    } \\n    for(JCheckBoxMenuItem sfty : safety) \\n      s.add(sfty); \\n    s.setMnemonic(KeyEvent.VK_A); \\n    f.add(s); \\n    f.setMnemonic(KeyEvent.VK_F); \\n    for(int i = 0; i < file.length; i++) { \\n      file[i].addActionListener(ml); \\n      f.add(file[i]); \\n    } \\n    mb1.add(f); \\n    mb1.add(m); \\n    setJMenuBar(mb1); \\n    t.setEditable(false); \\n    add(t, BorderLayout.CENTER); \\n    // Set up the system for swapping menus: \\n    b.addActionListener(new BL()); \\n    b.setMnemonic(KeyEvent.VK_S); \\n    add(b, BorderLayout.NORTH); \\n    for(JMenuItem oth : other) \\n      fooBar.add(oth); \\n    fooBar.setMnemonic(KeyEvent.VK_B); \\n    mb2.add(fooBar);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af32cf0439546a0e18f9f207657a2783\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Menus(), 300, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b33ff0a349e66b78a9b800f6e15e2a0a\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    add(t); \\n    ActionListener al = new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        t.setText(((JMenuItem)e.getSource()).getText()); \\n      } \\n    }; \\n    JMenuItem m = new JMenuItem(\\\"Hither\\\"); \\n    m.addActionListener(al); \\n    popup.add(m); \\n    m = new JMenuItem(\\\"Yon\\\"); \\n    m.addActionListener(al); \\n    popup.add(m); \\n    m = new JMenuItem(\\\"Afar\\\"); \\n    m.addActionListener(al); \\n    popup.add(m); \\n    popup.addSeparator(); \\n    m = new JMenuItem(\\\"Stay Here\\\"); \\n    m.addActionListener(al); \\n    popup.add(m); \\n    PopupListener pl = new PopupListener(); \\n    addMouseListener(pl); \\n    t.addMouseListener(pl);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09a3678566d9573dd011b2b8fb8a9e96\",\n        \"type\": \"source_code\",\n        \"text\": \"public void mousePressed(MouseEvent e) { \\n      maybeShowPopup(e); \\n    } \\n    public void mouseReleased(MouseEvent e) { \\n      maybeShowPopup(e); \\n    } \\n    private void maybeShowPopup(MouseEvent e) { \\n      if(e.isPopupTrigger()) \\n        popup.show(e.getComponent(), e.getX(), e.getY()); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d6946a0f92a3b1e1cfb85a7cf7dc7e4\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Popup(), 300, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5d8b895fcde3b2db899c6784101526a\",\n        \"type\": \"source_code\",\n        \"text\": \"super.paintComponent(g); \\n    int maxWidth = getWidth(); \\n    double hstep = (double)maxWidth / (double)points; \\n    int maxHeight = getHeight(); \\n    pts = new int[points]; \\n    for(int i = 0; i < points; i++) \\n      pts[i] = \\n        (int)(sines[i] * maxHeight/2 * .95 + maxHeight/2); \\n    g.setColor(Color.RED); \\n    for(int i = 1; i < points; i++) { \\n      int x1 = (int)((i - 1) * hstep); \\n      int x2 = (int)(i * hstep); \\n      int y1 = pts[i-1]; \\n      int y2 = pts[i];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9cc67c4546b862f666a668d552b68ddf\",\n        \"type\": \"source_code\",\n        \"text\": \"g.drawLine(x1, y1, x2, y2); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"571c24c042b7e26c1ee0032674463bbd\",\n        \"type\": \"source_code\",\n        \"text\": \"cycles = newCycles; \\n    points = SCALEFACTOR * cycles * 2; \\n    sines = new double[points]; \\n    for(int i = 0; i < points; i++) { \\n      double radians = (Math.PI / SCALEFACTOR) * i; \\n      sines[i] = Math.sin(radians); \\n    } \\n    repaint();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1885f801a086ad144de52cd266407363\",\n        \"type\": \"source_code\",\n        \"text\": \"add(sines); \\n    adjustCycles.addChangeListener(new ChangeListener() { \\n      public void stateChanged(ChangeEvent e) { \\n        sines.setCycles( \\n          ((JSlider)e.getSource()).getValue()); \\n      } \\n    }); \\n    add(BorderLayout.SOUTH, adjustCycles);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40589fc7743d82c2cbced06bca0a6dc5\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new SineWave(), 700, 400);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbe1d82b00bb551051c22c2cd6f217af\",\n        \"type\": \"source_code\",\n        \"text\": \"super(parent, \\\"My dialog\\\", true); \\n    setLayout(new FlowLayout()); \\n    add(new JLabel(\\\"Here is my dialog\\\")); \\n    JButton ok = new JButton(\\\"OK\\\"); \\n    ok.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        dispose(); // Closes the dialog \\n      } \\n    }); \\n    add(ok); \\n    setSize(150,125);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e36160d0d508c31c4e3a201a3b420a51\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        dlg.setVisible(true); \\n      } \\n    }); \\n    add(b1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b1ad931f3fd3e239f88f6ee90766987\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Dialogs(), 125, 75);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a74a21e93235b30fd1b35367c44095fe\",\n        \"type\": \"source_code\",\n        \"text\": \"rows = new JTextField(\\\"3\\\"),\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8c3bfc74d8b5762f26479c88ae3164e5\",\n        \"type\": \"source_code\",\n        \"text\": \"cols = new JTextField(\\\"3\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aafbdcd07616b4133686baa49ce3140c\",\n        \"type\": \"source_code\",\n        \"text\": \"private State turn = State.XX; // Start with x\\u2019s turn \\n    ToeDialog(int cellsWide, int cellsHigh) { \\n      setTitle(\\\"The game itself\\\"); \\n      setLayout(new GridLayout(cellsWide, cellsHigh)); \\n      for(int i = 0; i < cellsWide * cellsHigh; i++) \\n        add(new ToeButton()); \\n      setSize(cellsWide * 50, cellsHigh * 50); \\n      setDefaultCloseOperation(DISPOSE_ON_CLOSE); \\n    } \\n    class ToeButton extends JPanel { \\n      private State state = State.BLANK; \\n      public ToeButton() { addMouseListener(new ML()); } \\n      public void paintComponent(Graphics g) { \\n        super.paintComponent(g); \\n        int \\n          x1 = 0, y1 = 0, \\n          x2 = getSize().width - 1, \\n          y2 = getSize().height - 1; \\n        g.drawRect(x1, y1, x2, y2); \\n        x1 = x2/4; \\n        y1 = y2/4; \\n        int wide = x2/2, high = y2/2; \\n        if(state == State.XX) { \\n          g.drawLine(x1, y1, x1 + wide, y1 + high); \\n          g.drawLine(x1, y1 + high, x1 + wide, y1); \\n        } \\n        if(state == State.OO) \\n          g.drawOval(x1, y1, x1 + wide/2, y1 + high/2); \\n      } \\n      class ML extends MouseAdapter { \\n        public void mousePressed(MouseEvent e) { \\n          if(state == State.BLANK) { \\n            state = turn; \\n            turn = \\n              (turn == State.XX ? State.OO : State.XX); \\n          } \\n          else \\n            state = \\n              (state == State.XX ? State.OO : State.XX); \\n          repaint(); \\n        } \\n      } \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"91f3cb2aa9728fcf16a4aadb2aa4432d\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JDialog d = new ToeDialog( \\n        new Integer(rows.getText()), \\n        new Integer(cols.getText())); \\n      d.setVisible(true); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07729b583598d57b2b438604521ef007\",\n        \"type\": \"source_code\",\n        \"text\": \"JPanel p = new JPanel(); \\n    p.setLayout(new GridLayout(2,2)); \\n    p.add(new JLabel(\\\"Rows\\\", JLabel.CENTER)); \\n    p.add(rows); \\n    p.add(new JLabel(\\\"Columns\\\", JLabel.CENTER)); \\n    p.add(cols); \\n    add(p, BorderLayout.NORTH);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c8cc4095a166a3ff3c3edf90c8d1a22\",\n        \"type\": \"source_code\",\n        \"text\": \"JButton b = new JButton(\\\"go\\\"); \\n    b.addActionListener(new BL()); \\n    add(b, BorderLayout.SOUTH);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"889f68ffda7342b5ebfa9eeb41e2f982\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TicTacToe(), 200, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"216f8592058b79e412680ceb345c643b\",\n        \"type\": \"source_code\",\n        \"text\": \"fileName = new JTextField(), \\n    dir = new JTextField();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"459ff1856ad7be7e50968852e7b180ac\",\n        \"type\": \"source_code\",\n        \"text\": \"open = new JButton(\\\"Open\\\"), \\n    save = new JButton(\\\"Save\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"160bf59e42147b43d0d88f2a02692f4e\",\n        \"type\": \"source_code\",\n        \"text\": \"JPanel p = new JPanel();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38f49458d83268a3a907abc56d116366\",\n        \"type\": \"source_code\",\n        \"text\": \"open.addActionListener(new OpenL()); \\n    p.add(open); \\n    save.addActionListener(new SaveL()); \\n    p.add(save); \\n    add(p, BorderLayout.SOUTH); \\n    dir.setEditable(false); \\n    fileName.setEditable(false); \\n    p = new JPanel(); \\n    p.setLayout(new GridLayout(2,1)); \\n    p.add(fileName); \\n    p.add(dir); \\n    add(p, BorderLayout.NORTH);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc6313a96b45182309c9e71eae88d718\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JFileChooser c = new JFileChooser(); \\n      // Demonstrate \\\"Open\\\" dialog: \\n      int rVal = c.showOpenDialog(FileChooserTest.this); \\n      if(rVal == JFileChooser.APPROVE_OPTION) { \\n        fileName.setText(c.getSelectedFile().getName()); \\n        dir.setText(c.getCurrentDirectory().toString()); \\n      } \\n      if(rVal == JFileChooser.CANCEL_OPTION) { \\n        fileName.setText(\\\"You pressed cancel\\\"); \\n        dir.setText(\\\"\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebe4f8a59c77bf13ef6042c5f6ebc3eb\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JFileChooser c = new JFileChooser(); \\n      // Demonstrate \\\"Save\\\" dialog: \\n      int rVal = c.showSaveDialog(FileChooserTest.this); \\n      if(rVal == JFileChooser.APPROVE_OPTION) { \\n        fileName.setText(c.getSelectedFile().getName()); \\n        dir.setText(c.getCurrentDirectory().toString()); \\n      } \\n      if(rVal == JFileChooser.CANCEL_OPTION) { \\n        fileName.setText(\\\"You pressed cancel\\\"); \\n        dir.setText(\\\"\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d9522e52e280e0a2a16bd2610d68486f\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new FileChooserTest(), 250, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9bb96572924447d347360bd0e5c2bde\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"<html><b><font size=+2>\\\" + \\n    \\\"<center>Hello!<br><i>Press me now!\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64af36135484723bcfd6ff57e615e3f6\",\n        \"type\": \"source_code\",\n        \"text\": \"b.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        add(new JLabel(\\\"<html>\\\" + \\n          \\\"<i><font size=+4>Kapow!\\\")); \\n        // Force a re-layout to include the new label: \\n        validate(); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(b);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"49c7dadbf818ac08efc483ae0e982d36\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new HTMLButton(), 200, 500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff182c155ea10ba645a9f1863e7ea4a0\",\n        \"type\": \"source_code\",\n        \"text\": \"this, \\\"Monitoring Progress\\\", \\\"Test\\\", 0, 100);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcf0364fefe7387028498c2575cffaab\",\n        \"type\": \"source_code\",\n        \"text\": \"new JSlider(JSlider.HORIZONTAL, 0, 100, 60);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef4e11cd3fee6419fb064529b86d6655\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new GridLayout(2,1)); \\n    add(pb); \\n    pm.setProgress(0); \\n    pm.setMillisToPopup(1000); \\n    sb.setValue(0); \\n    sb.setPaintTicks(true); \\n    sb.setMajorTickSpacing(20); \\n    sb.setMinorTickSpacing(5); \\n    sb.setBorder(new TitledBorder(\\\"Slide Me\\\")); \\n    pb.setModel(sb.getModel()); // Share model \\n    add(sb); \\n    sb.addChangeListener(new ChangeListener() { \\n      public void stateChanged(ChangeEvent e) { \\n        pm.setProgress(sb.getValue()); \\n      } \\n    });\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0477ab4054a343fd111c2b3387358ef3\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Progress(), 300, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"584e63b573b60fad8c14e1b755982e54\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Eeny Meeny Minnie Mickey Moe Larry Curly\\\".split(\\\" \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea340a6383f06f4799a77007e196ea1a\",\n        \"type\": \"source_code\",\n        \"text\": \"new JButton(\\\"JButton\\\"), \\n    new JTextField(\\\"JTextField\\\"), \\n    new JLabel(\\\"JLabel\\\"), \\n    new JCheckBox(\\\"JCheckBox\\\"), \\n    new JRadioButton(\\\"Radio\\\"), \\n    new JComboBox(choices), \\n    new JList(choices),\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1a65c23bbf27886d0b81d296ae34841e\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"Look And Feel\\\"); \\n    setLayout(new FlowLayout()); \\n    for(Component component : samples) \\n      add(component);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1d2c9dc0c8ab9141bf5470f254eabbc5\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n      \\\"Usage:LookAndFeel [cross|system|motif]\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be9b362ddf64f7529eb9f8f53fbf813d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.exit(1);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dfce50342b49d5dba87875d967a129ad\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length == 0) usageError(); \\n    if(args[0].equals(\\\"cross\\\")) { \\n      try { \\n        UIManager.setLookAndFeel(UIManager. \\n          getCrossPlatformLookAndFeelClassName()); \\n      } catch(Exception e) { \\n        e.printStackTrace(); \\n      } \\n    } else if(args[0].equals(\\\"system\\\")) { \\n      try { \\n        UIManager.setLookAndFeel(UIManager. \\n          getSystemLookAndFeelClassName()); \\n      } catch(Exception e) { \\n        e.printStackTrace(); \\n      } \\n    } else if(args[0].equals(\\\"motif\\\")) { \\n      try { \\n        UIManager.setLookAndFeel(\\\"com.sun.java.\\\"+ \\n          \\\"swing.plaf.motif.MotifLookAndFeel\\\"); \\n      } catch(Exception e) { \\n        e.printStackTrace(); \\n      } \\n    } else usageError(); \\n    // Note the look & feel must be set before \\n    // any components are created. \\n    run(new LookAndFeel(), 300, 300);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"459ff1856ad7be7e50968852e7b180ac\",\n        \"type\": \"source_code\",\n        \"text\": \"open = new JButton(\\\"Open\\\"), \\n    save = new JButton(\\\"Save\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"998288ced6117f2a024ab30bed695c0c\",\n        \"type\": \"source_code\",\n        \"text\": \"JPanel p = new JPanel(); \\n    open.addActionListener(new OpenL()); \\n    p.add(open); \\n    save.addActionListener(new SaveL()); \\n    p.add(save); \\n    jsp.getViewport().add(ep); \\n    add(jsp, BorderLayout.CENTER); \\n    add(p, BorderLayout.SOUTH); \\n    fileName.setEditable(false); \\n    p = new JPanel(); \\n    p.setLayout(new GridLayout(2,1)); \\n    p.add(fileName); \\n    add(p, BorderLayout.NORTH); \\n    ep.setContentType(\\\"text\\\"); \\n    save.setEnabled(false);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc301acbc3c05f94553287e805ac3d01\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      FileOpenService fs = null; \\n      try { \\n        fs = (FileOpenService)ServiceManager.lookup( \\n          \\\"javax.jnlp.FileOpenService\\\"); \\n      } catch(UnavailableServiceException use) { \\n        throw new RuntimeException(use); \\n      } \\n      if(fs != null) { \\n        try { \\n          fileContents = fs.openFileDialog(\\\".\\\", \\n            new String[]{\\\"txt\\\", \\\"*\\\"}); \\n          if(fileContents == null) \\n            return; \\n          fileName.setText(fileContents.getName()); \\n          ep.read(fileContents.getInputStream(), null); \\n        } catch(Exception exc) { \\n          throw new RuntimeException(exc); \\n        } \\n        save.setEnabled(true); \\n      } \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9158f6f2e6e7d22da0823d2c011fa3c\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      FileSaveService fs = null; \\n      try { \\n        fs = (FileSaveService)ServiceManager.lookup( \\n          \\\"javax.jnlp.FileSaveService\\\"); \\n      } catch(UnavailableServiceException use) { \\n        throw new RuntimeException(use); \\n      } \\n      if(fs != null) { \\n        try { \\n          fileContents = fs.saveFileDialog(\\\".\\\", \\n            new String[]{\\\"txt\\\"}, \\n            new ByteArrayInputStream( \\n              ep.getText().getBytes()), \\n            fileContents.getName());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"46385796b95aebe76fd6e1aedbbbf669\",\n        \"type\": \"source_code\",\n        \"text\": \"if(fileContents == null) \\n            return; \\n          fileName.setText(fileContents.getName()); \\n        } catch(Exception exc) { \\n          throw new RuntimeException(exc); \\n        } \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f20e45e16f8ff14610872d5bbd63f1ea\",\n        \"type\": \"source_code\",\n        \"text\": \"JnlpFileChooser fc = new JnlpFileChooser(); \\n    fc.setSize(400, 300); \\n    fc.setVisible(true);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f3d887236d4976f735c80aa478ff3e4\",\n        \"type\": \"source_code\",\n        \"text\": \"<title>FileChooser demo application</title> \\n    <vendor>Mindview Inc.</vendor> \\n    <description> \\n      Jnlp File chooser Application \\n    </description> \\n    <description kind=\\\"short\\\"> \\n      Demonstrates opening, reading and writing a text file \\n    </description> \\n    <icon href=\\\"mindview.gif\\\"/> \\n    <offline-allowed/>\",\n        \"programming_language\": \"XML\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42380f4ea8e6d61bfdce8900a1b27237\",\n        \"type\": \"source_code\",\n        \"text\": \"<j2se version=\\\"1.3+\\\" \\n      href=\\\"http://java.sun.com/products/autodl/j2se\\\"/> \\n    <jar href=\\\"jnlpfilechooser.jar\\\" download=\\\"eager\\\"/>\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"372aaf063df499d0095a03e94ec7b97d\",\n        \"type\": \"source_code\",\n        \"text\": \"main-class=\\\"gui.jnlp.JnlpFileChooser\\\"/>\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"210e2f63d75f29f4ef0fcfb4ccac6731\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Start Long Running Task\\\"), \\n    b2 = new JButton(\\\"End Long Running Task\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0adca0d7149895befb627f25d5a22fb\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent evt) { \\n        try { \\n          TimeUnit.SECONDS.sleep(3); \\n        } catch(InterruptedException e) { \\n          System.out.println(\\\"Task interrupted\\\"); \\n          return; \\n        } \\n        System.out.println(\\\"Task completed\\\"); \\n      } \\n    }); \\n    b2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent evt) { \\n        // Interrupt yourself? \\n        Thread.currentThread().interrupt(); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4a46ac20e084b97417267ed62ccf91a\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new LongRunningTask(), 200, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f892d671df56c71507ce4594602bf306\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(this + \\\" started\\\"); \\n    try { \\n      TimeUnit.SECONDS.sleep(3); \\n    } catch(InterruptedException e) { \\n      System.out.println(this + \\\" interrupted\\\"); \\n      return; \\n    } \\n    System.out.println(this + \\\" completed\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"210e2f63d75f29f4ef0fcfb4ccac6731\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Start Long Running Task\\\"), \\n    b2 = new JButton(\\\"End Long Running Task\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1023bf6a8e582f63e6e1546bd8b024c\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newSingleThreadExecutor();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04f316aeac8bf510a20433382dba1e21\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        Task task = new Task(); \\n        executor.execute(task); \\n        System.out.println(task + \\\" added to the queue\\\"); \\n      } \\n    }); \\n    b2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        executor.shutdownNow(); // Heavy-handed \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c48aae89c2c9dfcb1db478978e84a3a\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new InterruptableLongRunningTask(), 200, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f220879a0aa3e1435e1e3b4d4fcaa7ea\",\n        \"type\": \"source_code\",\n        \"text\": \"this.future = future; \\n    this.task = task;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1023bf6a8e582f63e6e1546bd8b024c\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newSingleThreadExecutor();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0df9a57fc4cb3c617e5d0b6796900537\",\n        \"type\": \"source_code\",\n        \"text\": \"add(new TaskItem<R,C>(exec.submit(task),task));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d5b97fee302f4f5ebe40db6d5da1d07\",\n        \"type\": \"source_code\",\n        \"text\": \"Iterator<TaskItem<R,C>> items = iterator(); \\n    List<R> results = new ArrayList<R>(); \\n    while(items.hasNext()) { \\n      TaskItem<R,C> item = items.next(); \\n      if(item.future.isDone()) { \\n        try { \\n          results.add(item.future.get()); \\n        } catch(Exception e) { \\n          throw new RuntimeException(e); \\n        } \\n        items.remove(); \\n      } \\n    } \\n    return results;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecff1c2c2f693319e5c845008ae366b6\",\n        \"type\": \"source_code\",\n        \"text\": \"Iterator<TaskItem<R,C>> items = iterator(); \\n    List<String> results = new ArrayList<String>(); \\n    while(items.hasNext()) { \\n      TaskItem<R,C> item = items.next(); \\n      // Leave completed tasks for results reporting: \\n      if(!item.future.isDone()) { \\n        results.add(\\\"Cancelling \\\" + item.task); \\n        item.future.cancel(true); // May interrupt \\n        items.remove(); \\n      } \\n    } \\n    return results;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da2cd2e94eefd7081eec0e3c54a120ab\",\n        \"type\": \"source_code\",\n        \"text\": \"run(); \\n    return \\\"Return value of \\\" + this;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ec8ca8e65e1f7973adb8a8e679bee009\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Start Long Running Task\\\"), \\n    b2 = new JButton(\\\"End Long Running Task\\\"), \\n    b3 = new JButton(\\\"Get results\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"86efe55a1ca8184fc4d5db4f58c3b80b\",\n        \"type\": \"source_code\",\n        \"text\": \"new TaskManager<String,CallableTask>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87b037ccbbec545049c6fd6ff21fa4ff\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        CallableTask task = new CallableTask(); \\n        manager.add(task); \\n        System.out.println(task + \\\" added to the queue\\\"); \\n      } \\n    }); \\n    b2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        for(String result : manager.purge()) \\n          System.out.println(result);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab4641d82835b5e9c8475599231a2962\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    }); \\n    b3.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        // Sample call to a Task method: \\n        for(TaskItem<String,CallableTask> tt : \\n            manager) \\n          tt.task.id(); // No cast required \\n        for(String result : manager.getResults()) \\n          System.out.println(result); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2); \\n    add(b3);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a3203fc6cdb367e86016d842348eaf4e\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new InterruptableLongRunningCallable(), 200, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"05719ac69f7e313c2ca2ff664fb8dd89\",\n        \"type\": \"source_code\",\n        \"text\": \"this.monitor = monitor; \\n    monitor.setNote(toString()); \\n    monitor.setMaximum(MAX - 1); \\n    monitor.setMillisToPopup(500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"92dec778f606e014919f6ece131a1b5d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(this + \\\" started\\\"); \\n    try { \\n      for(int i = 0; i < MAX; i++) { \\n        TimeUnit.MILLISECONDS.sleep(500); \\n        if(monitor.isCanceled()) \\n          Thread.currentThread().interrupt();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6557ff17fcac41c61d4d37ba895f74c4\",\n        \"type\": \"source_code\",\n        \"text\": \"final int progress = i; \\n        SwingUtilities.invokeLater( \\n          new Runnable() { \\n            public void run() { \\n              monitor.setProgress(progress); \\n            } \\n          } \\n        ); \\n      } \\n    } catch(InterruptedException e) { \\n      monitor.close(); \\n      System.out.println(this + \\\" interrupted\\\"); \\n      return \\\"Result: \\\" + this + \\\" interrupted\\\"; \\n    } \\n    System.out.println(this + \\\" completed\\\"); \\n    return \\\"Result: \\\" + this + \\\" completed\\\";\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ec8ca8e65e1f7973adb8a8e679bee009\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Start Long Running Task\\\"), \\n    b2 = new JButton(\\\"End Long Running Task\\\"), \\n    b3 = new JButton(\\\"Get results\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"890d1cbbfab7add00dc394bcd27985e5\",\n        \"type\": \"source_code\",\n        \"text\": \"new TaskManager<String,MonitoredCallable>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"849f4f98a1bb6f5b9c8afa033f04d73a\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        MonitoredCallable task = new MonitoredCallable( \\n          new ProgressMonitor( \\n            MonitoredLongRunningCallable.this, \\n            \\\"Long-Running Task\\\", \\\"\\\", 0, 0) \\n        ); \\n        manager.add(task); \\n        System.out.println(task + \\\" added to the queue\\\"); \\n      } \\n    }); \\n    b2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        for(String result : manager.purge()) \\n          System.out.println(result); \\n      } \\n    }); \\n    b3.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        for(String result : manager.getResults()) \\n          System.out.println(result); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2); \\n    add(b3);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"488054d189aba75697710bfd0aea8d46\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new MonitoredLongRunningCallable(), 200, 500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"455a868e60b52e1d24b50379d80911bd\",\n        \"type\": \"source_code\",\n        \"text\": \"g.setColor(color); \\n    Dimension s = getSize(); \\n    g.fillRect(0, 0, s.width, s.height);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"75eb06032be0c533b939a0842b4dbd05\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        color = new Color(rand.nextInt(0xFFFFFF)); \\n        repaint(); // Asynchronously request a paint() \\n        TimeUnit.MILLISECONDS.sleep(pause); \\n      } \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c23539246db1546d265aafaea3f738aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newCachedThreadPool();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5f3645c2c8012baf46ec0520131ab27\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new GridLayout(grid, grid)); \\n    for(int i = 0; i < grid * grid; i++) { \\n      CBox cb = new CBox(pause); \\n      add(cb); \\n      exec.execute(cb); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9dfe884102abe316daf3d822f1fb2969\",\n        \"type\": \"source_code\",\n        \"text\": \"ColorBoxes boxes = new ColorBoxes(); \\n    if(args.length > 0) \\n      boxes.grid = new Integer(args[0]); \\n    if(args.length > 1) \\n      boxes.pause = new Integer(args[1]); \\n    boxes.setUp(); \\n    run(boxes, 500, 400);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93a9a0dd419805253c6fb2f58a6bb9ab\",\n        \"type\": \"source_code\",\n        \"text\": \"and JavaBeans\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7d7eea4a0102ae9df5c591370f9d7b0b\",\n        \"type\": \"source_code\",\n        \"text\": \"jumps = newJumps;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6eed0067fd440a15608264c822280a5d\",\n        \"type\": \"source_code\",\n        \"text\": \"color = newColor;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ca81bdb25f3d42ec4c126f5240e3313\",\n        \"type\": \"source_code\",\n        \"text\": \"spots = newSpots;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"329527aecf585ceb2e5f3b36effd6fea\",\n        \"type\": \"source_code\",\n        \"text\": \"//...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8fe5a459b8cf7a79462d079c3b9164ba\",\n        \"type\": \"source_code\",\n        \"text\": \"// ...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8fe5a459b8cf7a79462d079c3b9164ba\",\n        \"type\": \"source_code\",\n        \"text\": \"// ...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8fe5a459b8cf7a79462d079c3b9164ba\",\n        \"type\": \"source_code\",\n        \"text\": \"// ...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2f96c9d7951f1a832f7b878177ab1dc\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Ribbet!\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f1a9d0da6c954452354529e3f773069a\",\n        \"type\": \"source_code\",\n        \"text\": \"results.setText(\\\"\\\"); \\n    BeanInfo bi = null; \\n    try { \\n      bi = Introspector.getBeanInfo(bean, Object.class); \\n    } catch(IntrospectionException e) { \\n      print(\\\"Couldn\\u2019t introspect \\\" +  bean.getName()); \\n      return; \\n    } \\n    for(PropertyDescriptor d: bi.getPropertyDescriptors()){ \\n      Class<?> p = d.getPropertyType(); \\n      if(p == null) continue; \\n      print(\\\"Property type:\\\\n  \\\" + p.getName() + \\n        \\\"Property name:\\\\n  \\\" + d.getName()); \\n      Method readMethod = d.getReadMethod(); \\n      if(readMethod != null) \\n        print(\\\"Read method:\\\\n  \\\" + readMethod); \\n      Method writeMethod = d.getWriteMethod(); \\n      if(writeMethod != null) \\n        print(\\\"Write method:\\\\n  \\\" + writeMethod); \\n      print(\\\"====================\\\"); \\n    } \\n    print(\\\"Public methods:\\\"); \\n    for(MethodDescriptor m : bi.getMethodDescriptors()) \\n      print(m.getMethod().toString()); \\n    print(\\\"======================\\\"); \\n    print(\\\"Event support:\\\"); \\n    for(EventSetDescriptor e: bi.getEventSetDescriptors()){ \\n      print(\\\"Listener type:\\\\n  \\\" + \\n        e.getListenerType().getName()); \\n      for(Method lm : e.getListenerMethods()) \\n        print(\\\"Listener method:\\\\n  \\\" + lm.getName()); \\n      for(MethodDescriptor lmd : \\n          e.getListenerMethodDescriptors() ) \\n        print(\\\"Method descriptor:\\\\n  \\\" + lmd.getMethod()); \\n      Method addListener= e.getAddListenerMethod(); \\n      print(\\\"Add Listener Method:\\\\n  \\\" + addListener); \\n      Method removeListener = e.getRemoveListenerMethod(); \\n      print(\\\"Remove Listener Method:\\\\n  \\\"+ removeListener); \\n      print(\\\"====================\\\");\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1534c9f4b2c68a6116a9faa00b89c5ad\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      String name = query.getText(); \\n      Class<?> c = null; \\n      try { \\n        c = Class.forName(name); \\n      } catch(ClassNotFoundException ex) { \\n        results.setText(\\\"Couldn\\u2019t find \\\" + name); \\n        return; \\n      } \\n      dump(c); \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f8cbbf57e3ec1f21ccd4f085cadc0d6\",\n        \"type\": \"source_code\",\n        \"text\": \"JPanel p = new JPanel(); \\n    p.setLayout(new FlowLayout()); \\n    p.add(new JLabel(\\\"Qualified bean name:\\\")); \\n    p.add(query); \\n    add(BorderLayout.NORTH, p); \\n    add(new JScrollPane(results)); \\n    Dumper dmpr = new Dumper(); \\n    query.addActionListener(dmpr); \\n    query.setText(\\\"frogbean.Frog\\\"); \\n    // Force evaluation \\n    dmpr.actionPerformed(new ActionEvent(dmpr, 0, \\\"\\\"));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa3a955ecb7b5abdfd15e1f69bd69404\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new BeanDumper(), 600, 500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"892940ca8752940426107e4cc2386c12\",\n        \"type\": \"source_code\",\n        \"text\": \"addMouseListener(new ML()); \\n    addMouseMotionListener(new MML());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e99551fda5dffe60ce6ca38613dc9086\",\n        \"type\": \"source_code\",\n        \"text\": \"cSize = newSize;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07ff35ad90fffbc6564cc1eb3beddf1b\",\n        \"type\": \"source_code\",\n        \"text\": \"text = newText;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09214a48f79a6d1e4743b176ea3f9cb8\",\n        \"type\": \"source_code\",\n        \"text\": \"fontSize = newSize;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1bdb02e7b703325e98d0c0465b2b0c93\",\n        \"type\": \"source_code\",\n        \"text\": \"tColor = newColor;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b522b4b6f6560ebe9173b305abab142\",\n        \"type\": \"source_code\",\n        \"text\": \"super.paintComponent(g); \\n    g.setColor(Color.BLACK); \\n    g.drawOval(xm - cSize/2, ym - cSize/2, cSize, cSize);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b5c85031655bc300cd1cfc8339c5ed84\",\n        \"type\": \"source_code\",\n        \"text\": \"if(actionListener != null) \\n      throw new TooManyListenersException(); \\n    actionListener = l;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44abdafb318fb182e6169e0a3dd162d1\",\n        \"type\": \"source_code\",\n        \"text\": \"actionListener = null;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"51a3fdc3ffcd73f942d9bdde9cf58011\",\n        \"type\": \"source_code\",\n        \"text\": \"public void mousePressed(MouseEvent e) { \\n      Graphics g = getGraphics(); \\n      g.setColor(tColor); \\n      g.setFont( \\n        new Font(\\\"TimesRoman\\\", Font.BOLD, fontSize)); \\n      int width = g.getFontMetrics().stringWidth(text); \\n      g.drawString(text, (getSize().width - width) /2, \\n        getSize().height/2); \\n      g.dispose(); \\n      // Call the listener\\u2019s method: \\n      if(actionListener != null) \\n        actionListener.actionPerformed( \\n          new ActionEvent(BangBean.this, \\n            ActionEvent.ACTION_PERFORMED, null)); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c4f7255d65eb7cf7ea5b5f7436307d25\",\n        \"type\": \"source_code\",\n        \"text\": \"public void mouseMoved(MouseEvent e) { \\n      xm = e.getX(); \\n      ym = e.getY();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9d3f0538eb3a8a1b3541ac30b7e4e459\",\n        \"type\": \"source_code\",\n        \"text\": \"repaint(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7525077d100e832c78c5a0adb8417592\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Dimension(200, 200);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"048704892935debe74cd49687e1e5e06\",\n        \"type\": \"source_code\",\n        \"text\": \"private int count = 0; \\n    public void actionPerformed(ActionEvent e) { \\n      txt.setText(\\\"BangBean action \\\"+ count++); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ced142d411c585e569ed64d338a284a4\",\n        \"type\": \"source_code\",\n        \"text\": \"BangBean bb = new BangBean(); \\n    try { \\n      bb.addActionListener(new BBL()); \\n    } catch(TooManyListenersException e) { \\n      txt.setText(\\\"Too many listeners\\\"); \\n    } \\n    add(bb); \\n    add(BorderLayout.SOUTH, txt);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0222c94a2ec2b56c51c45861ab557f67\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new BangBeanTest(), 400, 500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1800f5262668c3ad13482cba8cc511bc\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<ActionListener>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ebf480df3fdb65f0b730879e40013c5\",\n        \"type\": \"source_code\",\n        \"text\": \"addMouseListener(new ML()); \\n    addMouseMotionListener(new MM());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e99551fda5dffe60ce6ca38613dc9086\",\n        \"type\": \"source_code\",\n        \"text\": \"cSize = newSize;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07ff35ad90fffbc6564cc1eb3beddf1b\",\n        \"type\": \"source_code\",\n        \"text\": \"text = newText;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09214a48f79a6d1e4743b176ea3f9cb8\",\n        \"type\": \"source_code\",\n        \"text\": \"fontSize = newSize;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1bdb02e7b703325e98d0c0465b2b0c93\",\n        \"type\": \"source_code\",\n        \"text\": \"tColor = newColor;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b522b4b6f6560ebe9173b305abab142\",\n        \"type\": \"source_code\",\n        \"text\": \"super.paintComponent(g); \\n    g.setColor(Color.BLACK); \\n    g.drawOval(xm - cSize/2, ym - cSize/2, cSize, cSize);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43e4633e18984ddbefe6383f9f3e0d09\",\n        \"type\": \"source_code\",\n        \"text\": \"actionListeners.add(l);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3419aa2a7f9b11826a01f978cf18de67\",\n        \"type\": \"source_code\",\n        \"text\": \"actionListeners.remove(l);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fbada9b44d8431aa7b8f174c7d200d7\",\n        \"type\": \"source_code\",\n        \"text\": \"ActionEvent a = new ActionEvent(BangBean2.this, \\n      ActionEvent.ACTION_PERFORMED, null); \\n    ArrayList<ActionListener> lv = null; \\n    // Make a shallow copy of the List in case \\n    // someone adds a listener while we\\u2019re \\n    // calling listeners: \\n    synchronized(this) { \\n      lv = new ArrayList<ActionListener>(actionListeners); \\n    } \\n    // Call all the listener methods: \\n    for(ActionListener al : lv) \\n      al.actionPerformed(a);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"73256f600e5ad9918d00fe3a5b184794\",\n        \"type\": \"source_code\",\n        \"text\": \"public void mousePressed(MouseEvent e) { \\n      Graphics g = getGraphics(); \\n      g.setColor(tColor); \\n      g.setFont( \\n        new Font(\\\"TimesRoman\\\", Font.BOLD, fontSize)); \\n      int width = g.getFontMetrics().stringWidth(text); \\n      g.drawString(text, (getSize().width - width) /2, \\n        getSize().height/2); \\n      g.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"545049d188235ce6b8b70e54746802bf\",\n        \"type\": \"source_code\",\n        \"text\": \"notifyListeners(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32bc850da06395f129d188c1e555eaf2\",\n        \"type\": \"source_code\",\n        \"text\": \"public void mouseMoved(MouseEvent e) { \\n      xm = e.getX(); \\n      ym = e.getY(); \\n      repaint(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"564b6a16e55963d7127300f07e1a4874\",\n        \"type\": \"source_code\",\n        \"text\": \"BangBean2 bb2 = new BangBean2(); \\n    bb2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        System.out.println(\\\"ActionEvent\\\" + e); \\n      } \\n    }); \\n    bb2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        System.out.println(\\\"BangBean2 action\\\"); \\n      } \\n    }); \\n    bb2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        System.out.println(\\\"More action\\\"); \\n      } \\n    }); \\n    JFrame frame = new JFrame(); \\n    frame.add(bb2); \\n    run(frame, 300, 300);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09d2bd168181f1e64c2b1651a80a8aa8\",\n        \"type\": \"source_code\",\n        \"text\": \"Flex\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdfa731a0f1ffebdb1b2f10a68f9883f\",\n        \"type\": \"source_code\",\n        \"text\": \"<![CDATA[ \\n    function updateOutput() { \\n      output.text = \\\"Hello! \\\" + input.text; \\n    } \\n    ]]>\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"548b967f878ef06a5a1722e5e3f5305b\",\n        \"type\": \"source_code\",\n        \"text\": \"change=\\\"updateOutput()\\\" />\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b279a44439c70c144133e66f4b442f88\",\n        \"type\": \"source_code\",\n        \"text\": \"titleStyleDeclaration=\\\"headerText\\\" \\n    title=\\\"Flex MP3 Library\\\"> \\n    <mx:HBox verticalAlign=\\\"bottom\\\"> \\n      <mx:DataGrid id=\\\"songGrid\\\" \\n        cellPress=\\\"selectSong(event)\\\" rowCount=\\\"8\\\"> \\n        <mx:columns> \\n          <mx:Array> \\n            <mx:DataGridColumn columnName=\\\"name\\\" \\n              headerText=\\\"Song Name\\\" width=\\\"120\\\" /> \\n            <mx:DataGridColumn columnName=\\\"artist\\\" \\n              headerText=\\\"Artist\\\" width=\\\"180\\\" /> \\n            <mx:DataGridColumn columnName=\\\"album\\\" \\n              headerText=\\\"Album\\\" width=\\\"160\\\" /> \\n          </mx:Array> \\n        </mx:columns> \\n      </mx:DataGrid> \\n      <mx:VBox> \\n        <mx:HBox height=\\\"100\\\" > \\n          <mx:Image id=\\\"albumImage\\\" source=\\\"\\\" \\n            height=\\\"80\\\" width=\\\"100\\\" \\n            mouseOverEffect=\\\"resizeBig\\\" \\n            mouseOutEffect=\\\"resizeSmall\\\" /> \\n          <mx:TextArea id=\\\"songInfo\\\" \\n            styleName=\\\"boldText\\\" height=\\\"100%\\\" width=\\\"120\\\" \\n            vScrollPolicy=\\\"off\\\" borderStyle=\\\"none\\\" /> \\n        </mx:HBox> \\n        <mx:MediaPlayback id=\\\"songPlayer\\\" \\n          contentPath=\\\"\\\" \\n          mediaType=\\\"MP3\\\" \\n          height=\\\"70\\\" \\n          width=\\\"230\\\" \\n          controllerPolicy=\\\"on\\\" \\n          autoPlay=\\\"false\\\" \\n          visible=\\\"false\\\" /> \\n      </mx:VBox> \\n    </mx:HBox> \\n    <mx:ControlBar horizontalAlign=\\\"right\\\"> \\n      <mx:Button id=\\\"refreshSongsButton\\\" \\n        label=\\\"Refresh Songs\\\" width=\\\"100\\\" \\n        toolTip=\\\"Refresh Song List\\\" \\n        click=\\\"songService.getSongs()\\\" /> \\n    </mx:ControlBar>\",\n        \"programming_language\": \"XML\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c627f60c28a37600fb835fec8aea65da\",\n        \"type\": \"source_code\",\n        \"text\": \"<mx:Resize name=\\\"resizeBig\\\" heightTo=\\\"100\\\" \\n      duration=\\\"500\\\"/> \\n    <mx:Resize name=\\\"resizeSmall\\\" heightTo=\\\"80\\\" \\n      duration=\\\"500\\\"/>\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9e8b4bb2ea615c45e2b91684fcfd6dfe\",\n        \"type\": \"source_code\",\n        \"text\": \"source=\\\"gui.flex.SongService\\\" \\n    result=\\\"onSongs(event.result)\\\" \\n    fault=\\\"alert(event.fault.faultstring, \\u2018Error\\u2019)\\\"> \\n    <mx:method name=\\\"getSongs\\\"/>\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9ba325307aa3922c70bc0be51baf62f\",\n        \"type\": \"source_code\",\n        \"text\": \"addSong(new Song(\\\"Chocolate\\\", \\\"Snow Patrol\\\", \\n      \\\"Final Straw\\\", \\\"sp-final-straw.jpg\\\", \\n      \\\"chocolate.mp3\\\")); \\n    addSong(new Song(\\\"Concerto No. 2 in E\\\", \\\"Hilary Hahn\\\", \\n      \\\"Bach: Violin Concertos\\\", \\\"hahn.jpg\\\", \\n      \\\"bachviolin2.mp3\\\")); \\n    addSong(new Song(\\\"\\u2018Round Midnight\\\", \\\"Wes Montgomery\\\", \\n      \\\"The Artistry of Wes Montgomery\\\", \\n      \\\"wesmontgomery.jpg\\\", \\\"roundmidnight.mp3\\\"));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ffb128b831d91cf0a95212eaf7d0c2a\",\n        \"type\": \"source_code\",\n        \"text\": \"this.name = name; \\n    this.artist = artist; \\n    this.album = album; \\n    this.albumImageUrl = albumImageUrl; \\n    this.songMediaUrl = songMediaUrl;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a3dd2796a9f269e607f0f4155141bdc3\",\n        \"type\": \"source_code\",\n        \"text\": \"this.albumImageUrl = albumImageUrl;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a05a235740ef66b99cb6c0cce390e084\",\n        \"type\": \"source_code\",\n        \"text\": \"this.artist = artist;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b906cfcd282b91e04efc126420d4746\",\n        \"type\": \"source_code\",\n        \"text\": \"this.songMediaUrl = songMediaUrl;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1293491b922b282b98deccc8baceca49\",\n        \"type\": \"source_code\",\n        \"text\": \"Display display = new Display(); \\n    Shell shell = new Shell(display); \\n    shell.setText(\\\"Hi there, SWT!\\\"); // Title bar \\n    shell.open(); \\n    while(!shell.isDisposed()) \\n      if(!display.readAndDispatch()) \\n        display.sleep(); \\n    display.dispose();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32094b590d1c45f943895a88e568a3ce\",\n        \"type\": \"source_code\",\n        \"text\": \"Display display = new Display(); \\n    for(int i = 0; i < shells.length; i++) { \\n      shells[i] = new Shell(display); \\n      shells[i].setText(\\\"Shell #\\\" + i); \\n      shells[i].open(); \\n    } \\n    while(!shellsDisposed()) \\n      if(!display.readAndDispatch()) \\n        display.sleep(); \\n    display.dispose();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d8148be3bad4c49c8c41583608e523f5\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < shells.length; i++) \\n      if(shells[i].isDisposed()) \\n        return true; \\n    return false;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"422af3526ee79249b1d82ab39ec59b50\",\n        \"type\": \"source_code\",\n        \"text\": \"Display display = new Display(); \\n    Shell shell = new Shell(display); \\n    shell.setText(\\\"Display Properties\\\"); \\n    shell.setLayout(new FillLayout()); \\n    Text text = new Text(shell, SWT.WRAP | SWT.V_SCROLL); \\n    StringWriter props = new StringWriter(); \\n    System.getProperties().list(new PrintWriter(props));\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d17e8ecd836909289897fae3da77516\",\n        \"type\": \"source_code\",\n        \"text\": \"text.setText(props.toString()); \\n    shell.open(); \\n    while(!shell.isDisposed()) \\n      if(!display.readAndDispatch()) \\n        display.sleep(); \\n    display.dispose();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09f297bc405b0f1d7301c29a314c45e1\",\n        \"type\": \"source_code\",\n        \"text\": \"Display display = new Display(); \\n    Shell shell = new Shell(display); \\n    shell.setText(swtApp.getClass().getSimpleName()); \\n    swtApp.createContents(shell);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21373efbad32f3e8ef5c0106d5f35bac\",\n        \"type\": \"source_code\",\n        \"text\": \"shell.setSize(width, height); \\n    shell.open(); \\n    while(!shell.isDisposed()) { \\n      if(!display.readAndDispatch()) \\n        display.sleep(); \\n    } \\n    display.dispose();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"403a6582b806ac457cc8e06c43cef407\",\n        \"type\": \"source_code\",\n        \"text\": \"parent.setLayout(new FillLayout()); \\n    Text text = new Text(parent, SWT.WRAP | SWT.V_SCROLL); \\n    for(Map.Entry entry: System.getenv().entrySet()) { \\n      text.append(entry.getKey() + \\\": \\\" + \\n        entry.getValue() + \\\"\\\\n\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3a94f03c8ade7639de0e2c6d4fab2bc0\",\n        \"type\": \"source_code\",\n        \"text\": \"SWTConsole.run(new DisplayEnvironment(), 800, 600);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"00b6642e13242eede096986e047aab7b\",\n        \"type\": \"source_code\",\n        \"text\": \"shell = parent.getShell(); \\n    Menu bar = new Menu(shell, SWT.BAR); \\n    shell.setMenuBar(bar); \\n    Set<String> words = new TreeSet<String>( \\n      new TextFile(\\\"Menus.java\\\", \\\"\\\\\\\\W+\\\")); \\n    Iterator<String> it = words.iterator(); \\n    while(it.next().matches(\\\"[0-9]+\\\")) \\n      ; // Move past the numbers. \\n    MenuItem[] mItem = new MenuItem[7]; \\n    for(int i = 0; i < mItem.length; i++) { \\n      mItem[i] = new MenuItem(bar, SWT.CASCADE); \\n      mItem[i].setText(it.next()); \\n      Menu submenu = new Menu(shell, SWT.DROP_DOWN); \\n      mItem[i].setMenu(submenu); \\n    } \\n    int i = 0; \\n    while(it.hasNext()) { \\n      addItem(bar, it, mItem[i]); \\n      i = (i + 1) % mItem.length; \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f687ec10603d19b03d4c73239e9c9e7f\",\n        \"type\": \"source_code\",\n        \"text\": \"public void handleEvent(Event e) { \\n      System.out.println(e.toString()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"388e4fa8fda10ddaebd9d141022b0505\",\n        \"type\": \"source_code\",\n        \"text\": \"MenuItem item = new MenuItem(mItem.getMenu(),SWT.PUSH); \\n    item.addListener(SWT.Selection, listener); \\n    item.setText(it.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a1e3a8ad44b615eb0e26d77922bf120\",\n        \"type\": \"source_code\",\n        \"text\": \"SWTConsole.run(new Menus(), 600, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25e1cda0b1769a2bc80a650e03a80d7e\",\n        \"type\": \"source_code\",\n        \"text\": \"shell = parent.getShell(); \\n    parent.setLayout(new FillLayout()); \\n    folder = new TabFolder(shell, SWT.BORDER); \\n    labelTab(); \\n    directoryDialogTab(); \\n    buttonTab(); \\n    sliderTab(); \\n    scribbleTab(); \\n    browserTab();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12b49afaa56195975936ad5e3b77c649\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"A Label\\\"); // Text on the tab \\n    tab.setToolTipText(\\\"A simple label\\\"); \\n    Label label = new Label(folder, SWT.CENTER); \\n    label.setText(\\\"Label text\\\"); \\n    tab.setControl(label);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"104d91e981106111f3719f83daf58e6f\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"Directory Dialog\\\"); \\n    tab.setToolTipText(\\\"Select a directory\\\"); \\n    final Button b = new Button(folder, SWT.PUSH); \\n    b.setText(\\\"Select a Directory\\\"); \\n    b.addListener(SWT.MouseDown, new Listener() { \\n        public void handleEvent(Event e) { \\n          DirectoryDialog dd = new DirectoryDialog(shell); \\n          String path = dd.open(); \\n          if(path != null) \\n            b.setText(path); \\n        } \\n      }); \\n    tab.setControl(b);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0fcdb21db35d41935f4f852c8543b51e\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"Buttons\\\"); \\n    tab.setToolTipText(\\\"Different kinds of Buttons\\\"); \\n    Composite composite = new Composite(folder, SWT.NONE); \\n    composite.setLayout(new GridLayout(4, true)); \\n    for(int dir : new int[]{ \\n        SWT.UP, SWT.RIGHT, SWT.LEFT, SWT.DOWN \\n      }) { \\n      Button b = new Button(composite, SWT.ARROW | dir); \\n      b.addListener(SWT.MouseDown, listener);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"88f1c488e11ce574f9fd7ed5b034f4f4\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    newButton(composite, SWT.CHECK, \\\"Check button\\\"); \\n    newButton(composite, SWT.PUSH, \\\"Push button\\\"); \\n    newButton(composite, SWT.RADIO, \\\"Radio button\\\"); \\n    newButton(composite, SWT.TOGGLE, \\\"Toggle button\\\"); \\n    newButton(composite, SWT.FLAT, \\\"Flat button\\\"); \\n    tab.setControl(composite);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37d93288b362c57f5e37bb78f3b7f1d7\",\n        \"type\": \"source_code\",\n        \"text\": \"public void handleEvent(Event e) { \\n        MessageBox m = new MessageBox(shell, SWT.OK); \\n        m.setMessage(e.toString()); \\n        m.open(); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"76fd278ccf62cd493d4ff4b9e80ddb10\",\n        \"type\": \"source_code\",\n        \"text\": \"int type, String label) { \\n    Button b = new Button(composite, type); \\n    b.setText(label); \\n    b.addListener(SWT.MouseDown, listener);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64017dfae10df1a2f7d209efdd083dfa\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"Sliders and Progress bars\\\"); \\n    tab.setToolTipText(\\\"Tied Slider to ProgressBar\\\"); \\n    Composite composite = new Composite(folder, SWT.NONE); \\n    composite.setLayout(new GridLayout(2, true)); \\n    final Slider slider = \\n      new Slider(composite, SWT.HORIZONTAL); \\n    final ProgressBar progress = \\n      new ProgressBar(composite, SWT.HORIZONTAL); \\n    slider.addSelectionListener(new SelectionAdapter() { \\n        public void widgetSelected(SelectionEvent event) { \\n          progress.setSelection(slider.getSelection()); \\n        } \\n      }); \\n    tab.setControl(composite);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef7b9c561093c3a60d4e6217620841a4\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"Scribble\\\"); \\n    tab.setToolTipText(\\\"Simple graphics: drawing\\\"); \\n    final Canvas canvas = new Canvas(folder, SWT.NONE); \\n    ScribbleMouseListener sml= new ScribbleMouseListener(); \\n    canvas.addMouseListener(sml); \\n    canvas.addMouseMoveListener(sml); \\n    tab.setControl(canvas);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e4000034bef741ecc4f8862ea1fc270\",\n        \"type\": \"source_code\",\n        \"text\": \"extends MouseAdapter implements MouseMoveListener { \\n    private Point p = new Point(0, 0); \\n    public void mouseMove(MouseEvent e) { \\n      if((e.stateMask & SWT.BUTTON1) == 0) \\n        return; \\n      GC gc = new GC((Canvas)e.widget); \\n      gc.drawLine(p.x, p.y, e.x, e.y); \\n      gc.dispose(); \\n      updatePoint(e); \\n    } \\n    public void mouseDown(MouseEvent e) { updatePoint(e); } \\n    private void updatePoint(MouseEvent e) { \\n      p.x = e.x; \\n      p.y = e.y;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7a1794b61984e0e0ff142e9ec7b0c7b9\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"A Browser\\\"); \\n    tab.setToolTipText(\\\"A Web browser\\\"); \\n    Browser browser = null; \\n    try { \\n      browser = new Browser(folder, SWT.NONE); \\n    } catch(SWTError e) { \\n      Label label = new Label(folder, SWT.BORDER); \\n      label.setText(\\\"Could not initialize browser\\\"); \\n      tab.setControl(label); \\n    } \\n    if(browser != null) { \\n      browser.setUrl(\\\"http://www.mindview.net\\\"); \\n      tab.setControl(browser); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"98cd42d7f72ab02076d4b2724f6938e1\",\n        \"type\": \"source_code\",\n        \"text\": \"SWTConsole.run(new TabbedPane(), 800, 600);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"54cd9c7bf0f0f46c99ddde08fafad5aa\",\n        \"type\": \"source_code\",\n        \"text\": \"super(parent, style); \\n    addPaintListener(new PaintListener() { \\n      public void paintControl(PaintEvent e) { \\n        int maxWidth = getSize().x; \\n        double hstep = (double)maxWidth / (double)points; \\n        int maxHeight = getSize().y; \\n        pts = new int[points]; \\n        for(int i = 0; i < points; i++) \\n          pts[i] = (int)((sines[i] * maxHeight / 2 * .95) \\n            + (maxHeight / 2)); \\n        e.gc.setForeground( \\n          e.display.getSystemColor(SWT.COLOR_RED)); \\n        for(int i = 1; i < points; i++) { \\n          int x1 = (int)((i - 1) * hstep); \\n          int x2 = (int)(i * hstep); \\n          int y1 = pts[i - 1]; \\n          int y2 = pts[i]; \\n          e.gc.drawLine(x1, y1, x2, y2); \\n        } \\n      } \\n    }); \\n    setCycles(5);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a6e79f110f0ef7541fe0a1fab778221f\",\n        \"type\": \"source_code\",\n        \"text\": \"cycles = newCycles; \\n    points = SCALEFACTOR * cycles * 2; \\n    sines = new double[points]; \\n    for(int i = 0; i < points; i++) { \\n      double radians = (Math.PI / SCALEFACTOR) * i; \\n      sines[i] = Math.sin(radians); \\n    } \\n    redraw();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a8a778867253d2a00c4d5e3f426ac88e\",\n        \"type\": \"source_code\",\n        \"text\": \"parent.setLayout(new GridLayout(1, true)); \\n    sines = new SineDraw(parent, SWT.NONE); \\n    sines.setLayoutData( \\n      new GridData(SWT.FILL, SWT.FILL, true, true)); \\n    sines.setFocus(); \\n    slider = new Slider(parent, SWT.HORIZONTAL); \\n    slider.setValues(5, 1, 30, 1, 1, 1); \\n    slider.setLayoutData( \\n      new GridData(SWT.FILL, SWT.DEFAULT, true, false)); \\n    slider.addSelectionListener(new SelectionAdapter() { \\n      public void widgetSelected(SelectionEvent event) { \\n        sines.setCycles(slider.getSelection()); \\n      } \\n    });\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87cb624c4996c2ec7e09d1f23c257b7b\",\n        \"type\": \"source_code\",\n        \"text\": \"SWTConsole.run(new SineWave(), 700, 400);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5c98009f128544675cc942a3fad72a16\",\n        \"type\": \"source_code\",\n        \"text\": \"public void paintControl(PaintEvent e) { \\n      Color color = new Color(e.display, cColor); \\n      e.gc.setBackground(color); \\n      Point size = getSize(); \\n      e.gc.fillRectangle(0, 0, size.x, size.y); \\n      color.dispose(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"89325c0d21691686bad245ba08c028ed\",\n        \"type\": \"source_code\",\n        \"text\": \"return new RGB(rand.nextInt(255), \\n      rand.nextInt(255), rand.nextInt(255));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0162a305ead26703fb472d10670c6daa\",\n        \"type\": \"source_code\",\n        \"text\": \"super(parent, SWT.NONE); \\n    this.pause = pause; \\n    addPaintListener(new CBoxPaintListener());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c11eb8879cce13555cda384a17073fc\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        cColor = newColor();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d59062dd7c6a33a62b293a3c264b33bb\",\n        \"type\": \"source_code\",\n        \"text\": \"getDisplay().asyncExec(new Runnable() { \\n          public void run() { \\n            try { redraw(); } catch(SWTException e) {} \\n            // SWTException is OK when the parent \\n            // is terminated from under us. \\n          } \\n        }); \\n        TimeUnit.MILLISECONDS.sleep(pause); \\n      } \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    } catch(SWTException e) { \\n      // Acceptable way to exit: our parent \\n      // was terminated from under us. \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94c53dc171071800472c3d9f209d963f\",\n        \"type\": \"source_code\",\n        \"text\": \"GridLayout gridLayout = new GridLayout(grid, true); \\n    gridLayout.horizontalSpacing = 0; \\n    gridLayout.verticalSpacing = 0; \\n    parent.setLayout(gridLayout); \\n    ExecutorService exec = new DaemonThreadPoolExecutor(); \\n    for(int i = 0; i < (grid * grid); i++) { \\n      final CBox cb = new CBox(parent, pause); \\n      cb.setLayoutData(new GridData(GridData.FILL_BOTH)); \\n      exec.execute(cb); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1947a9b51ba46fc43798a05026e608f1\",\n        \"type\": \"source_code\",\n        \"text\": \"ColorBoxes boxes = new ColorBoxes(); \\n    if(args.length > 0) \\n      boxes.grid = new Integer(args[0]); \\n    if(args.length > 1) \\n      boxes.pause = new Integer(args[1]); \\n    SWTConsole.run(boxes, 500, 400);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    }\n]"
            }
        },
        {
            "file": {
                "File": "pdf_to_knowledgehooks.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/pdf_to_knowledgehooks.py",
                "Relative Path": "pdf_to_knowledgehooks.py",
                "Size": 2066,
                "Last Modified": "2024-12-03 15:12:00",
                "Lines": 56,
                "Source_Code": "\"\"\" import os\nfrom com_worktwins_data_source.PDFBook import PDFBook\n\nPDF_DIR = \"com_worktwins_data/books_pdf\"\n\ndef main():\n #   for file_name in [os.listdir(PDF_DIR)[0]]:\n    for file_name in [\"/brainboost/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_data/books_pdf/Bruce Eckel - Thinking in Java 4th Edition.pdf\"]:\n        if file_name.endswith(\".pdf\"):\n            pdf_path = os.path.join(PDF_DIR, file_name)\n            print(f\"Processing {file_name}...\")\n            book = PDFBook(pdf_path)\n            book.to_knowledge_hooks()\n    print(\"Processing complete.\")\n\nif __name__ == \"__main__\":\n    main()\n \"\"\"\n\nimport os\nfrom com_worktwins_data_source.PDFBook import PDFBook\n\nPDF_DIR = \"com_worktwins_data/books_pdf\"\n\ndef main():\n    for file_name in [\"/brainboost/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_data/books_pdf/Bruce Eckel - Thinking in Java 4th Edition.pdf\"]:\n        if file_name.endswith(\".pdf\"):\n            pdf_path = os.path.join(PDF_DIR, file_name)\n            print(f\"Processing {file_name}...\")\n            book = PDFBook(pdf_path)\n            \n            # Generate knowledge hooks\n            book.to_knowledge_hooks()\n\n            # Evaluate with keywords\n            keywords = [\"binary\", \"shift\", \"operation\"]  # Example keywords\n            print(f\"Evaluating book for keywords: {keywords}\")\n            topics = book.evaluate(keywords)\n\n            print(\"Evaluation Results:\")\n            if not topics:\n                print(\"No topics matched the given keywords.\")\n            else:\n                for topic in topics:\n                    print(f\"ID: {topic['id']}\")\n                    print(f\"Path: {topic['path']}\")\n                    print(f\"Semantics: {topic['semantics']}\")\n                    print(f\"Matched Keywords: {topic['matched_keywords']}\")\n                    print(f\"Relevance Score: {topic['relevance_score']:.2f}\")\n                    print(\"-----------\")\n\n    print(\"Processing complete.\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
            }
        },
        {
            "file": {
                "File": "README.md",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/README.md",
                "Relative Path": "README.md",
                "Size": 142,
                "Last Modified": "2024-11-25 23:05:17",
                "Lines": 4,
                "Source_Code": "Once code is pulled initializethe environment to recreate symlinks \n\n./initialize_environment.sh\n# brainboost_datatools_subjective_semantizer\n"
            }
        },
        {
            "file": {
                "File": "pdf_to_dependency_graph.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/pdf_to_dependency_graph.py",
                "Relative Path": "pdf_to_dependency_graph.py",
                "Size": 11171,
                "Last Modified": "2024-11-25 16:29:26",
                "Lines": 295,
                "Source_Code": "import os\nimport pandas as pd\nfrom collections import defaultdict\nfrom hashlib import sha256\nfrom wordfreq import word_frequency\nfrom alive_progress import alive_bar\nfrom com_worktwins_data_source.PDFBook import PDFBook\nimport spacy\nimport unicodedata\nimport json\n\n# File paths\nPDF_PATH = \"com_worktwins_data/books_pdf/Bruce Eckel - Thinking in Java 4th Edition.pdf\"\nENGLISH_FREQUENCIES_PATH = \"report_english_frequencies.json\"\nBOOK_FREQUENCIES_PATH = \"report_book_frequencies.json\"\nBOOK_PARAGRAPHS_PATH = \"report_book_paragraphs.json\"\nEXCLUDED_WORDS_PATH = \"report_excluded_words.json\"\n\n# Constants\nMIN_BOOK_FREQUENCY = 10  # Minimum frequency in the book for inclusion\nENGLISH_TOP_PERCENTILE = 0.9  # Top 10% of English frequency\nBOOK_TOP_PERCENTILE = 0.9  # Top 10% of book frequency\n\n# Load spaCy model\nnlp = spacy.load(\"en_core_web_sm\")\n\n\ndef save_to_txt(data, output_path):\n    \"\"\"\n    Save raw text data to a .txt file.\n    \"\"\"\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(data)\n    print(f\"Saved TXT to {output_path}\")\n\n\ndef save_to_json(data, output_path):\n    \"\"\"\n    Save data to a JSON file.\n    \"\"\"\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f, indent=4)\n    print(f\"Saved JSON to {output_path}\")\n\n\ndef create_output_folder(pdf_path):\n    \"\"\"\n    Create an output folder with the same name as the PDF file.\n    \"\"\"\n    folder_name = os.path.splitext(os.path.basename(pdf_path))[0]\n    output_dir = os.path.join(os.path.dirname(pdf_path), folder_name)\n    os.makedirs(output_dir, exist_ok=True)\n    return output_dir\n\ndef prepend_pdf_name(output_dir, pdf_path, suffix):\n    \"\"\"\n    Generate file path with the PDF file name prepended in the output directory.\n    \"\"\"\n    base_name = os.path.splitext(os.path.basename(pdf_path))[0]\n    return os.path.join(output_dir, f\"{base_name}_{suffix}\")\n\n\n\n\ndef generate_content_hash(sentence, book_freq_df, english_freq_df):\n    \"\"\"\n    Generate a hash based on sorted words by their frequency in the book and English language.\n    \"\"\"\n    # Tokenize and normalize\n    words = [word.lower() for word in sentence.split() if word.isalnum()]\n\n    # Merge frequency data\n    frequencies = []\n    for word in words:\n        book_freq = book_freq_df.get(word, float('inf'))  # Higher means less frequent\n        english_freq = english_freq_df.get(word, float('inf'))\n        frequencies.append((word, book_freq, english_freq))\n\n    # Sort by book frequency (primary) and English frequency (secondary)\n    sorted_words = sorted(frequencies, key=lambda x: (x[1], x[2]))\n\n    # Extract only the words for hashing\n    sorted_word_list = [word for word, _, _ in sorted_words]\n    joined_words = \" \".join(sorted_word_list)\n\n    # Generate hash\n    return sha256(joined_words.encode()).hexdigest()[:8]\n\n\ndef clean_text(text):\n    \"\"\"\n    Clean the text by normalizing Unicode characters and removing unwanted symbols.\n    \"\"\"\n    # Normalize Unicode (e.g., fix 'modi\\ufb01ed' -> 'modified')\n    text = unicodedata.normalize(\"NFKC\", text)\n\n    # Remove numbers and punctuation\n    words = text.split()\n    words = [word for word in words if word.isalnum() and not word.isdigit()]  # Remove numbers\n    return \" \".join(words)\n\n\ndef extract_keywords(sentence, book_freq_df, english_freq_df):\n    \"\"\"\n    Extract the most meaningful keywords for a sentence.\n    \"\"\"\n    # Tokenize and normalize\n    words = [word.lower() for word in sentence.split() if word.isalnum() and len(word) >= 3]\n\n    # Get frequencies\n    word_data = [\n        {\n            \"word\": word,\n            \"book_frequency\": book_freq_df.get(word, 0),\n            \"english_frequency\": english_freq_df.get(word, float(\"inf\")),\n        }\n        for word in words\n    ]\n\n    # Sort by book frequency (desc) and English frequency (asc)\n    sorted_words = sorted(\n        word_data, key=lambda x: (-x[\"book_frequency\"], x[\"english_frequency\"])\n    )\n\n    # Deduplicate and select up to 10 keywords\n    seen_words = set()\n    top_keywords = []\n    for item in sorted_words:\n        if item[\"word\"] not in seen_words:\n            top_keywords.append(item[\"word\"])\n            seen_words.add(item[\"word\"])\n        if len(top_keywords) == 10:\n            break\n\n    return top_keywords\n\n\ndef generate_frequencies(book_text):\n    \"\"\"\n    Generate word frequencies and related data from the book text.\n    \"\"\"\n    # Split text into paragraphs and generate paragraph IDs\n    paragraphs = [para.strip() for para in book_text.split(\"\\n\\n\") if para.strip()]\n    paragraph_ids = [sha256(para.encode()).hexdigest()[:8] for para in paragraphs]\n\n    # Create a DataFrame for paragraphs\n    paragraphs_df = pd.DataFrame({\"id\": paragraph_ids, \"text\": paragraphs})\n\n    # Count word frequencies in the book\n    word_counts = defaultdict(int)\n    word_paragraph_map = defaultdict(set)\n\n    with alive_bar(len(paragraphs), title=\"Processing paragraphs\") as bar:\n        for pid, para in zip(paragraph_ids, paragraphs):\n            words = [word.lower() for word in para.split() if word.isalnum()]\n            for word in words:\n                word_counts[word] += 1\n                word_paragraph_map[word].add(pid)\n            bar()\n\n    # Create a DataFrame for book word frequencies\n    book_freq_df = pd.DataFrame(\n        [(word, count, list(word_paragraph_map[word])) for word, count in word_counts.items()],\n        columns=[\"word\", \"book_frequency\", \"paragraphs\"],\n    )\n\n    # Add English language frequencies\n    book_freq_df[\"english_frequency\"] = book_freq_df[\"word\"].apply(lambda word: word_frequency(word, \"en\"))\n\n    # Identify high-frequency English and book words\n    english_top_threshold = book_freq_df[\"english_frequency\"].quantile(ENGLISH_TOP_PERCENTILE)\n    book_top_threshold = book_freq_df[\"book_frequency\"].quantile(BOOK_TOP_PERCENTILE)\n\n    # Exclude connector words (high-frequency in both English and book)\n    excluded_connectors = book_freq_df[\n        (book_freq_df[\"english_frequency\"] >= english_top_threshold) &\n        (book_freq_df[\"book_frequency\"] >= book_top_threshold)\n    ]\n\n    # Exclude low-frequency non-English words\n    excluded_non_english = book_freq_df[\n        (book_freq_df[\"english_frequency\"] == 0) &  # Not in English language\n        (book_freq_df[\"book_frequency\"] < MIN_BOOK_FREQUENCY)  # Low frequency in book\n    ]\n\n    # Combine excluded words\n    excluded_words_df = pd.concat([excluded_connectors, excluded_non_english]).drop_duplicates(subset=[\"word\"])\n\n    # Filter out excluded words from the main book frequencies\n    book_freq_df = book_freq_df[~book_freq_df[\"word\"].isin(excluded_words_df[\"word\"])]\n\n    # Sort book and English frequency data\n    book_freq_df = book_freq_df.sort_values(by=\"book_frequency\", ascending=False)\n    english_freq_df = book_freq_df[[\"word\", \"english_frequency\"]].sort_values(by=\"english_frequency\", ascending=False)\n\n    return paragraphs_df, book_freq_df, excluded_words_df, english_freq_df\n\n\ndef process_paragraphs(paragraphs_df, book_freq_df, english_freq_df):\n    \"\"\"\n    Process paragraphs and split them into sentences, generating content-based hashes and paragraph-level keywords.\n    \"\"\"\n    book_freq_dict = book_freq_df.set_index(\"word\")[\"book_frequency\"].to_dict()\n    english_freq_dict = english_freq_df.set_index(\"word\")[\"english_frequency\"].to_dict()\n\n    enriched_paragraphs = []\n    with alive_bar(len(paragraphs_df), title=\"Processing sentences\") as bar:\n        for _, paragraph in paragraphs_df.iterrows():\n            paragraph_id = paragraph[\"id\"]\n            paragraph_text = clean_text(paragraph[\"text\"])\n\n            # Use spaCy to tokenize into sentences\n            doc = nlp(paragraph_text)\n            sentences = []\n            paragraph_keywords = set()\n            \n            for sent in doc.sents:\n                sentence_text = clean_text(sent.text)\n                keywords = extract_keywords(sentence_text, book_freq_dict, english_freq_dict)\n                sentence_hash = f\"{paragraph_id}_{generate_content_hash(sentence_text, book_freq_dict, english_freq_dict)}\"\n\n                sentences.append({\n                    \"id\": sentence_hash,\n                    \"type\": \"sentence\",\n                    \"text\": sentence_text,\n                    \"keywords\": keywords,\n                    \"weight\": 0.0\n                })\n                # Accumulate keywords from each sentence\n                paragraph_keywords.update(keywords)\n\n            # Sort the paragraph-level keywords\n            sorted_paragraph_keywords = sorted(\n                paragraph_keywords,\n                key=lambda word: (-book_freq_dict.get(word, 0), english_freq_dict.get(word, float('inf')))\n            )\n\n            enriched_paragraphs.append({\n                \"id\": paragraph_id,\n                \"type\": \"paragraph\",\n                \"text\": paragraph_text,\n                \"keywords\": sorted_paragraph_keywords,\n                \"weight\": 0.0,\n                \"sentences\": sentences\n            })\n            bar()\n\n    return enriched_paragraphs\n\n\ndef main():\n    # Step 1: Create output folder\n    output_dir = create_output_folder(PDF_PATH)\n\n    # Step 2: Extract text from the book\n    book = PDFBook(PDF_PATH)\n\n    # Step 3: Save raw text\n    raw_text = book.extract_raw()\n    raw_text_path = prepend_pdf_name(output_dir, PDF_PATH, \"raw_text.txt\")\n    save_to_txt(raw_text, raw_text_path)\n\n    # Step 4: Extract and save code blocks\n    print(\"Extracting code blocks...\")\n    code_blocks = book.extract_code_blocks()\n    code_blocks_json_path = prepend_pdf_name(output_dir, PDF_PATH, \"code_blocks.json\")\n    save_to_json(code_blocks, code_blocks_json_path)\n\n    code_blocks_script_path = prepend_pdf_name(output_dir, PDF_PATH, \"code_blocks.py\")\n    book.save_code_blocks_as_python_script(code_blocks, code_blocks_script_path)\n\n    # Step 5: Normalize text and generate frequencies\n    normalized_text = book.extract_normalized()\n    print(\"Generating frequencies and paragraphs...\")\n    paragraphs_df, book_freq_df, excluded_words_df, english_freq_df = generate_frequencies(normalized_text)\n\n    # Step 6: Save initial results to JSON files\n    save_to_json(paragraphs_df.to_dict(orient=\"records\"), prepend_pdf_name(output_dir, PDF_PATH, \"paragraphs.json\"))\n    save_to_json(book_freq_df[[\"word\", \"book_frequency\", \"paragraphs\"]].to_dict(orient=\"records\"),\n                 prepend_pdf_name(output_dir, PDF_PATH, \"book_frequencies.json\"))\n    save_to_json(english_freq_df.to_dict(orient=\"records\"),\n                 prepend_pdf_name(output_dir, PDF_PATH, \"english_frequencies.json\"))\n    save_to_json(excluded_words_df[[\"word\", \"paragraphs\"]].to_dict(orient=\"records\"),\n                 prepend_pdf_name(output_dir, PDF_PATH, \"excluded_words.json\"))\n\n    # Step 7: Process paragraphs into sentences\n    print(\"Processing sentences...\")\n    enriched_paragraphs = process_paragraphs(paragraphs_df, book_freq_df, english_freq_df)\n\n    # Step 8: Save enriched paragraph data with sentences\n    enriched_paragraphs_path = prepend_pdf_name(output_dir, PDF_PATH, \"paragraphs_with_sentences.json\")\n    save_to_json(enriched_paragraphs, enriched_paragraphs_path)\n\n    print(f\"All outputs saved in {output_dir}\")\n\n"
            }
        },
        {
            "file": {
                "File": "convert_llama_weights.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/convert_llama_weights.py",
                "Relative Path": "convert_llama_weights.py",
                "Size": 2153,
                "Last Modified": "2024-11-18 23:31:20",
                "Lines": 56,
                "Source_Code": "import torch\nimport os\nimport json\nfrom transformers import LlamaConfig, LlamaForCausalLM\n\ndef convert_to_hf_format(input_dir, output_dir):\n    # Load model parameters\n    with open(os.path.join(input_dir, \"params.json\"), \"r\") as config_file:\n        config_data = json.load(config_file)\n\n    # Set up configuration\n    config = LlamaConfig(\n        vocab_size=config_data[\"vocab_size\"],\n        hidden_size=config_data[\"dim\"],\n        num_hidden_layers=config_data[\"n_layers\"],\n        num_attention_heads=config_data[\"n_heads\"],\n        intermediate_size=4 * config_data[\"dim\"],\n        max_position_embeddings=config_data.get(\"max_seq_len\", 2048),  # Default to 2048 if not present\n    )\n\n    # Load weights\n    weights_path = os.path.join(input_dir, \"consolidated.00.pth\")\n    device_gpu = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    device_cpu = torch.device(\"cpu\")\n\n    print(f\"Loading weights. GPU: {device_gpu}, CPU: {device_cpu}...\")\n    state_dict = torch.load(weights_path, map_location=device_cpu)\n\n    # Load the model structure\n    model = LlamaForCausalLM(config)\n    \n    # Move parts to GPU as needed\n    print(\"Loading model weights and transferring parts to GPU...\")\n    for name, param in state_dict.items():\n        if param.numel() > 1e6:  # Large tensors to GPU\n            state_dict[name] = param.to(device_gpu)\n        else:  # Smaller tensors to CPU\n            state_dict[name] = param.to(device_cpu)\n\n    model.load_state_dict(state_dict, strict=False)\n\n    # Save in Hugging Face format\n    print(f\"Saving converted model to {output_dir}...\")\n    os.makedirs(output_dir, exist_ok=True)\n    model.save_pretrained(output_dir)\n\n    # Save tokenizer\n    tokenizer_path = os.path.join(input_dir, \"tokenizer.model\")\n    os.symlink(tokenizer_path, os.path.join(output_dir, \"tokenizer.model\"))\n\n    print(f\"Model successfully converted and saved to {output_dir}\")\n\nif __name__ == \"__main__\":\n    input_directory = \"/home/golden/.llama/checkpoints/Llama3.2-3B-Instruct\"\n    output_directory = \"/home/golden/.llama/checkpoints/Llama3.2-3B-Instruct-HF\"\n    convert_to_hf_format(input_directory, output_directory)\n"
            }
        },
        {
            "file": {
                "File": "tools_context.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/tools_context.py",
                "Relative Path": "tools_context.py",
                "Size": 15579,
                "Last Modified": "2024-11-04 15:32:58",
                "Lines": 363,
                "Source_Code": "import os\nimport re\nfrom datetime import datetime\nimport json\nfrom collections import defaultdict\nimport argparse\nimport shutil\n\n\nclass SnapshotGenerator:\n    def __init__(self, config):\n        self.root_dir = config['root_dir']\n        self.avoid_folders = config['avoid_folders']\n        self.avoid_files = set(config.get('avoid_files', []))\n        self.include_extensions = set(config['include_extensions'])\n        self.key_files = config['key_files']\n        self.output_file = config['output_file']\n        self.compress = config['compress']\n        self.amount_of_chunks = config['amount_of_chunks']\n        self.size_of_chunk = config['size_of_chunk']\n        self.imports = defaultdict(int)\n        self.project_name = os.path.basename(self.root_dir)\n        self.language_extensions = {\n            'python': ['.py'],\n            'javascript': ['.js', '.mjs', '.jsx'],\n            'typescript': ['.ts', '.tsx'],\n            'java': ['.java'],\n            'csharp': ['.cs', '.csproj'],\n            'cpp': ['.cpp', '.hpp', '.h', '.cc'],\n            'c': ['.c', '.h'],\n            'ruby': ['.rb', '.erb', '.rake'],\n            'php': ['.php', '.phtml', '.php3', '.php4', '.php5', '.phps'],\n            'swift': ['.swift'],\n            'kotlin': ['.kt', '.kts'],\n            'go': ['.go'],\n            'r': ['.R', '.r'],\n            'perl': ['.pl', '.pm', '.t'],\n            'bash': ['.sh', '.bash'],\n            'html': ['.html', '.htm'],\n            'css': ['.css', '.scss', '.sass', '.less'],\n            'sql': ['.sql'],\n            'scala': ['.scala', '.sc'],\n            'haskell': ['.hs', '.lhs'],\n            'lua': ['.lua'],\n            'rust': ['.rs'],\n            'dart': ['.dart'],\n            'matlab': ['.m'],\n            'julia': ['.jl'],\n            'vb': ['.vb', '.vbs'],\n            'asm': ['.asm', '.s'],\n            'fsharp': ['.fs', '.fsi', '.fsx'],\n            'groovy': ['.groovy', '.gvy', '.gy', '.gsh'],\n            'erlang': ['.erl', '.hrl'],\n            'elixir': ['.ex', '.exs'],\n            'cobol': ['.cob', '.cbl'],\n            'fortran': ['.f', '.for', '.f90', '.f95'],\n            'ada': ['.adb', '.ads'],\n            'prolog': ['.pl', '.pro', '.P'],\n            'lisp': ['.lisp', '.lsp'],\n            'scheme': ['.scm', '.ss'],\n            'racket': ['.rkt'],\n            'verilog': ['.v', '.vh'],\n            'vhdl': ['.vhdl', '.vhd'],\n            'markdown': ['.md', '.markdown'],\n            'vue': ['.vue'],\n            'svelte': ['.svelte'],\n            'json': ['.json'],\n            'yaml': ['.yaml', '.yml'],\n            'xml': ['.xml'],\n            'git': ['.gitignore', '.gitattributes'],\n            'cicd': ['.travis.yml', 'Jenkinsfile', '.circleci/config.yml', '.gitlab-ci.yml', 'azure-pipelines.yml']\n        }\n        self.detected_language = None\n\n    def exclude_directories(self, dirs):\n        exclude_set = set(self.avoid_folders)\n        return [d for d in dirs if d not in exclude_set]\n\n    def detect_programming_language(self, file):\n        for language, extensions in self.language_extensions.items():\n            if file.endswith(tuple(extensions)):\n                return language\n        return None\n\n    def build_tree_structure(self, root_dir):\n        tree = {\"directory_name\": os.path.basename(root_dir), \"children\": []}\n        for root, dirs, files in os.walk(root_dir):\n            dirs[:] = self.exclude_directories(dirs)\n            path = os.path.relpath(root, root_dir).split(os.sep)\n            subdir = tree\n            for part in path:\n                if part == '.':\n                    continue\n                for child in subdir[\"children\"]:\n                    if child.get(\"directory_name\") == part:\n                        subdir = child\n                        break\n                else:\n                    new_dir = {\"directory_name\": part, \"children\": []}\n                    subdir[\"children\"].append(new_dir)\n                    subdir = new_dir\n            for file in files:\n                if file.endswith(tuple(self.include_extensions)) or file in self.key_files:\n                    subdir[\"children\"].append({\"file_name\": file})\n        return tree\n\n    def extract_imports(self, content, extension):\n        patterns = {\n            \".py\": r\"^\\s*(?:import|from)\\s+([\\w\\.]+)\",\n            \".js\": r\"^\\s*import\\s+.*?\\s+from\\s+['\\\"]([\\w\\-\\/]+)['\\\"]\",\n            \".java\": r\"^\\s*import\\s+([\\w\\.]+)\",\n            \".cpp\": r\"^\\s*#\\s*include\\s*<([\\w\\.\\/]+)>\",\n            \".c\": r\"^\\s*#\\s*include\\s*<([\\w\\.\\/]+)>\",\n            \".cs\": r\"^\\s*using\\s+([\\w\\.]+)\",\n            \".rb\": r\"^\\s*require\\s+['\\\"]([\\w\\/]+)['\\\"]\",\n            \".php\": r\"^\\s*use\\s+([\\w\\\\]+)\",\n            \".go\": r\"^\\s*import\\s+['\\\"]([\\w\\/]+)['\\\"]\",\n            \".rs\": r\"^\\s*extern\\s+crate\\s+([\\w_]+)\",\n            \".dart\": r\"^\\s*import\\s+['\\\"]([\\w\\/]+)['\\\"]\",\n            \".ts\": r\"^\\s*import\\s+.*?\\s+from\\s+['\\\"]([\\w\\-\\/]+)['\\\"]\",\n            \".swift\": r\"^\\s*import\\s+([\\w]+)\",\n            \".kt\": r\"^\\s*import\\s+([\\w\\.]+)\"\n        }\n\n        pattern = patterns.get(extension)\n        if not pattern:\n            return []\n\n        regex = re.compile(pattern, re.MULTILINE)\n        matches = regex.findall(content)\n        for match in matches:\n            self.imports[match] += 1\n        return matches\n\n    def generate_context_file(self):\n        print(f\"Generating context file: {self.output_file}\")\n        project_data = {\n            'project_name': self.project_name,\n            'programming_language': '',  # Will be detected later\n            'project_tree_structure': self.build_tree_structure(self.root_dir),\n            'project_sources': [],\n            'external_libraries': [],\n            'observations': []\n        }\n\n        for root, dirs, files in os.walk(self.root_dir, topdown=True):\n            dirs[:] = self.exclude_directories(dirs)\n            if files:\n                for file in files:\n                    file_path = os.path.join(root, file)\n                    relative_file_path = os.path.relpath(file_path, self.root_dir)\n                    if (\n                        (file.endswith(tuple(self.include_extensions)) or file in self.key_files) and\n                        file not in self.avoid_files and\n                        relative_file_path not in self.avoid_files\n                    ):\n                        try:\n                            with open(file_path, 'r', encoding='utf-8') as f_in:\n                                content = f_in.read()\n                                file_info = os.stat(file_path)\n                                source_data = {\n                                    'file': {\n                                        'File': file,\n                                        'Full Path': file_path,\n                                        'Relative Path': relative_file_path,\n                                        'Size': file_info.st_size,\n                                        'Last Modified': datetime.fromtimestamp(file_info.st_mtime).strftime('%Y-%m-%d %H:%M:%S'),\n                                        'Lines': len(content.splitlines()),\n                                        'Source_Code': content\n                                    }\n                                }\n                                project_data['project_sources'].append(source_data)\n\n                                extension = os.path.splitext(file)[1]\n                                self.extract_imports(content, extension)\n\n                                # Detect programming language\n                                if not self.detected_language:\n                                    self.detected_language = self.detect_programming_language(file)\n\n                        except UnicodeDecodeError as e:\n                            print(f\"Skipping file {file_path} due to decoding error: {e}\")\n                        except Exception as e:\n                            print(f\"Skipping file {file_path} due to an unexpected error: {e}\")\n\n        project_data['programming_language'] = self.detected_language or 'unknown'\n        project_data['external_libraries'] = [{\"import_name\": imp, \"count\": count} for imp, count in self.imports.items()]\n\n        if not self.imports:\n            project_data['observations'].append(\"No external libraries or imports were detected in the source code.\")\n\n        # Ensure the output directory exists\n        output_dir = os.path.dirname(self.output_file)\n        os.makedirs(output_dir, exist_ok=True)\n\n        with open(self.output_file, 'w', encoding='utf-8') as f_out:\n            json.dump(project_data, f_out, indent=4)\n\n        os.chmod(self.output_file, 0o666)\n        print(f\"Context file generated at: {self.output_file}\")\n\n    def split_file(self, file_path, num_chunks=None, chunk_size=None):\n        output_dir = f\"{os.path.splitext(file_path)[0]}_parts\"\n        os.makedirs(output_dir, exist_ok=True)\n        print(f\"Splitting file {file_path} into parts in directory {output_dir}\")\n\n        with open(file_path, 'r', encoding='utf-8') as f:\n            content = f.read()\n\n        if num_chunks:\n            chunk_size = len(content) // num_chunks + (len(content) % num_chunks > 0)\n\n        chunk_size = chunk_size or len(content)\n        part_num = 0\n\n        for i in range(0, len(content), chunk_size):\n            part_filename = os.path.join(output_dir, f\"{os.path.basename(file_path)}.part{part_num}\")\n            with open(part_filename, 'w', encoding='utf-8') as part_file:\n                part_file.write(content[i:i + chunk_size])\n            os.chmod(part_filename, 0o666)\n            print(f\"Created part file: {part_filename}\")\n            part_num += 1\n\n        new_output_file_path = os.path.join(output_dir, os.path.basename(file_path))\n        os.rename(file_path, new_output_file_path)\n        os.chmod(new_output_file_path, 0o666)\n        print(f\"Moved original context file to: {new_output_file_path}\")\n\n        return output_dir\n\n\n# Common folders to avoid\nCOMMON_AVOID_FOLDERS = [\n    \"node_modules\", \"venv\", \"env\", \"__pycache__\", \"site-packages\", \"myenv\",\n    \"target\", \"bin\", \"build\", \"obj\", \"vendor\", \".next\",\"worktwins_env\", \"font\", \"animations\", \"package-lock\",\"worktwins\",\"com_worktwins_data_github\",\"com_worktwins_data_gitlab\",\"com_worktwins_data_tmp\",\n]\n\n# Common files to avoid\nCOMMON_AVOID_FILES = [\n    \"package-lock.json\",\n    \"yarn.lock\",\n    \"pnpm-lock.yaml\",\n    \"Cargo.lock\",\n    \"Pipfile.lock\",\n    \"composer.lock\",\n    \".DS_Store\",\n    \"thumbs.db\",\n    \"Thumbs.db\",\n    \"npm-debug.log\",\n    \"yarn-error.log\",\n    \"Dockerfile\",\n    \"docker-compose.yml\",\n    \".env\",\n    \".gitignore\",\n    \".gitattributes\",\n    \"Makefile\"\n]\n\ndef main(\n    root_dir='.',\n    additional_avoid_folders=[],\n    additional_avoid_files=[],\n    output_file='snapshot.context',\n    output_folder='./context',\n    compress=0,\n    amount_of_chunks=10,\n    size_of_chunk=None\n):\n    # Combine common avoid folders with additional avoid folders\n    avoid_folders = COMMON_AVOID_FOLDERS + additional_avoid_folders\n\n    # Combine common avoid files with additional avoid files\n    avoid_files = COMMON_AVOID_FILES + additional_avoid_files\n    avoid_files_set = set(avoid_files)\n\n    # Create a temporary instance of SnapshotGenerator to access the language_extensions\n    temp_config = {\n        \"root_dir\": root_dir,\n        \"avoid_folders\": avoid_folders,\n        \"avoid_files\": avoid_files_set,\n        \"include_extensions\": [],\n        \"key_files\": [],\n        \"output_file\": \"\",\n        \"compress\": 0,\n        \"amount_of_chunks\": 0,\n        \"size_of_chunk\": 0,\n    }\n    temp_generator = SnapshotGenerator(temp_config)\n    language_extensions = set()\n    for extensions in temp_generator.language_extensions.values():\n        language_extensions.update(extensions)\n\n    # Get current timestamp in the format '-YYYYMMDDHHMMSS'\n    timestamp = datetime.now().strftime(\"-%Y%m%d%H%M%S\")\n\n    # Append the timestamp to the output file name\n    output_file_with_timestamp = f\"{os.path.splitext(output_file)[0]}{timestamp}{os.path.splitext(output_file)[1]}\"\n\n    # Ensure the output folder exists\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder, exist_ok=True)\n\n    # Adjust the output file path to be within the output folder\n    output_file_with_timestamp = os.path.join(output_folder, os.path.basename(output_file_with_timestamp))\n\n    config = {\n        \"root_dir\": root_dir,\n        \"avoid_folders\": avoid_folders,\n        \"avoid_files\": avoid_files_set,\n        \"include_extensions\": list(language_extensions),\n        \"key_files\": temp_generator.key_files,  # Using existing key files from the class\n        \"output_file\": output_file_with_timestamp,\n        \"compress\": compress,\n        \"amount_of_chunks\": amount_of_chunks,\n        \"size_of_chunk\": size_of_chunk,\n    }\n\n    generator = SnapshotGenerator(config)\n    generator.generate_context_file()\n\n    if compress:\n        if amount_of_chunks:\n            parts_dir = generator.split_file(output_file_with_timestamp, num_chunks=amount_of_chunks)\n        elif size_of_chunk:\n            parts_dir = generator.split_file(output_file_with_timestamp, chunk_size=size_of_chunk)\n\n        # Move the parts directory to the output folder if necessary\n        new_parts_dir = os.path.join(output_folder, os.path.basename(parts_dir))\n        parts_dir_abs = os.path.abspath(parts_dir)\n        new_parts_dir_abs = os.path.abspath(new_parts_dir)\n\n        if parts_dir_abs != new_parts_dir_abs:\n            if os.path.exists(new_parts_dir):\n                # Remove the existing directory before moving\n                shutil.rmtree(new_parts_dir)\n            os.rename(parts_dir, new_parts_dir)\n            print(f\"Parts directory moved to: {new_parts_dir}\")\n        else:\n            print(f\"Parts directory is already in the output folder: {new_parts_dir}\")\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Generate a single context for a project.\")\n    parser.add_argument(\"--root_dir\", required=False, default=os.getcwd(), help=\"Root directory of the project to scan (default: current working directory)\")\n    parser.add_argument(\"--output_file\", required=False, default=\"snapshot.context\", help=\"Output file for the snapshot (default: snapshot.context in the current working directory)\")\n    parser.add_argument(\"--output_folder\", required=False, default=\"./context\", help=\"Output folder for the parts directory (default: ./context)\")\n    parser.add_argument(\"--additional-avoid-folders\", required=False, default=\"\", help=\"Comma-separated list of additional folders to avoid\")\n    parser.add_argument(\"--additional-avoid-files\", required=False, default=\"\", help=\"Comma-separated list of additional files to avoid\")\n    parser.add_argument(\"--compress\", type=int, choices=[0, 1], default=1, help=\"Whether to compress the output (0 or 1, default: 1)\")\n    parser.add_argument(\"--amount-of-chunks\", type=int, default=10, help=\"Number of chunks to split the file into (default: 10)\")\n    parser.add_argument(\"--size-of-chunk\", type=int, help=\"Size of each chunk in bytes\")\n\n    args = parser.parse_args()\n\n    main(\n        root_dir=args.root_dir,\n        additional_avoid_folders=args.additional_avoid_folders.split(',') if args.additional_avoid_folders else [],\n        additional_avoid_files=args.additional_avoid_files.split(',') if args.additional_avoid_files else [],\n        output_file=args.output_file,\n        output_folder=args.output_folder,\n        compress=args.compress,\n        amount_of_chunks=args.amount_of_chunks,\n        size_of_chunk=args.size_of_chunk\n    )\n"
            }
        },
        {
            "file": {
                "File": "tools_gpu.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/tools_gpu.py",
                "Relative Path": "tools_gpu.py",
                "Size": 131,
                "Last Modified": "2024-11-18 23:16:37",
                "Lines": 3,
                "Source_Code": "import torch\nprint(torch.cuda.is_available())  # Should return True\nprint(torch.cuda.get_device_name(0))  # Displays your GPU name\n"
            }
        },
        {
            "file": {
                "File": "download_tutorial_html.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/download_tutorial_html.py",
                "Relative Path": "download_tutorial_html.py",
                "Size": 5397,
                "Last Modified": "2024-11-23 12:26:10",
                "Lines": 145,
                "Source_Code": "import fitz  # PyMuPDF\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\nimport json\nimport os\n\n# Paths\nPDF_PATH = \"com_worktwins_data/books_pdf/Scott Chacon - Pro Git.pdf\"\nEXTRACTED_TEXT_PATH = \"git1.txt\"\nKNOWLEDGE_HOOKS_OUTPUT_PATH = \"knowledgehooks.json\"\nRAW_OUTPUT_PATH = \"raw_outputs.json\"\nLLAMA_MODEL_PATH = \"/home/golden/.llama/checkpoints/Llama3.2-3B-Instruct-HF\"\nTEMP_PROGRESS_FILE = \"progress.json\"  # Temporary file to save progress\nCHUNK_SIZE = 1000  # Characters per chunk to feed into the model\n\n\ndef extract_text_from_pdf(pdf_path, output_path):\n    \"\"\"\n    Extracts text from a PDF and saves it to a text file.\n    \"\"\"\n    with fitz.open(pdf_path) as pdf:\n        text_content = []\n        for page_num in range(pdf.page_count):\n            page = pdf[page_num]\n            text = page.get_text(\"text\")\n            text_content.append(text)\n            print(f\"Extracted text from page {page_num + 1}/{pdf.page_count}\")\n\n    with open(output_path, \"w\", encoding=\"utf-8\") as output_file:\n        output_file.write(\"\\n\\n\".join(text_content))\n\n    print(f\"Text extracted and saved to {output_path}\")\n    return \"\\n\\n\".join(text_content)\n\n\ndef generate_knowledge_hooks(\n    text, model_path, output_path, raw_output_path, temp_progress_file\n):\n    \"\"\"\n    Generate knowledge hooks from the provided text using a language model.\n    \"\"\"\n    # Load tokenizer and model\n    tokenizer = AutoTokenizer.from_pretrained(model_path)\n    model = AutoModelForCausalLM.from_pretrained(model_path)\n\n    # Split the text into manageable chunks\n    def split_text_into_chunks(text, max_chunk_size=512):\n        \"\"\"\n        Split text into chunks of manageable size for the model.\n        \"\"\"\n        words = text.split()\n        chunks = []\n        current_chunk = []\n        current_length = 0\n\n        for word in words:\n            word_length = len(word) + 1  # Account for space\n            if current_length + word_length <= max_chunk_size:\n                current_chunk.append(word)\n                current_length += word_length\n            else:\n                chunks.append(\" \".join(current_chunk))\n                current_chunk = [word]\n                current_length = word_length\n\n        if current_chunk:\n            chunks.append(\" \".join(current_chunk))\n        return chunks\n\n    chunks = split_text_into_chunks(text)\n    knowledge_hooks = []\n    raw_outputs = []\n\n    # Resume progress if a temporary file exists\n    if os.path.exists(temp_progress_file):\n        with open(temp_progress_file, \"r\") as f:\n            progress_data = json.load(f)\n            start_chunk = progress_data.get(\"last_processed_chunk\", 0)\n            print(f\"Resuming from chunk {start_chunk + 1}/{len(chunks)}...\")\n    else:\n        start_chunk = 0\n        print(\"No previous progress found. Starting fresh.\")\n\n    # Process each chunk\n    for i, chunk in enumerate(chunks[start_chunk:], start=start_chunk):\n        print(f\"Processing chunk {i + 1}/{len(chunks)}...\")\n        prompt = (\n            \"Generate a JSON array of knowledge hooks from the following text. Each knowledge hook should include:\\n\"\n            \"1. 'description': A concise summary of the main idea.\\n\"\n            \"2. 'keywords': Relevant keywords.\\n\"\n            \"Format the output as a JSON array.\\n\\n\"\n            f\"Text:\\n{chunk}\"\n        )\n\n        inputs = tokenizer(prompt, return_tensors=\"pt\", truncation=True)\n        outputs = model.generate(**inputs, max_length=512, temperature=0.7, do_sample=True)\n\n        generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)\n        raw_outputs.append(generated_text)\n\n        try:\n            hooks = json.loads(generated_text)\n            if isinstance(hooks, list):\n                knowledge_hooks.extend(hooks)\n            else:\n                print(f\"Chunk {i + 1} did not generate a valid JSON array. Skipping...\")\n        except json.JSONDecodeError:\n            print(f\"Chunk {i + 1} generated invalid JSON. Skipping...\")\n\n        # Save progress to the temporary file\n        with open(temp_progress_file, \"w\") as f:\n            json.dump({\"last_processed_chunk\": i}, f)\n\n    # Save final outputs and remove the temporary progress file\n    with open(output_path, \"w\") as f:\n        json.dump(knowledge_hooks, f, indent=4)\n\n    with open(raw_output_path, \"w\") as f:\n        json.dump(raw_outputs, f, indent=4)\n\n    print(f\"Knowledge hooks saved to {output_path}\")\n    print(f\"Raw model outputs saved to {raw_output_path}\")\n\n    if os.path.exists(temp_progress_file):\n        os.remove(temp_progress_file)  # Clean up after completion\n        print(f\"Temporary progress file {temp_progress_file} removed.\")\n\n\nif __name__ == \"__main__\":\n    # Step 1: Extract text or load existing text file\n    if not os.path.exists(EXTRACTED_TEXT_PATH):\n        print(f\"File {EXTRACTED_TEXT_PATH} not found. Extracting text from the PDF...\")\n        extracted_text = extract_text_from_pdf(PDF_PATH, EXTRACTED_TEXT_PATH)\n    else:\n        print(f\"Found existing {EXTRACTED_TEXT_PATH}. Skipping text extraction.\")\n        with open(EXTRACTED_TEXT_PATH, \"r\", encoding=\"utf-8\") as f:\n            extracted_text = f.read()\n\n    # Step 2: Generate knowledge hooks from the extracted text\n    generate_knowledge_hooks(\n        extracted_text,\n        LLAMA_MODEL_PATH,\n        KNOWLEDGE_HOOKS_OUTPUT_PATH,\n        RAW_OUTPUT_PATH,\n        TEMP_PROGRESS_FILE,\n    )\n"
            }
        },
        {
            "file": {
                "File": "html_to_text.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/html_to_text.py",
                "Relative Path": "html_to_text.py",
                "Size": 3442,
                "Last Modified": "2024-11-04 12:53:31",
                "Lines": 98,
                "Source_Code": "import os\nimport subprocess\nimport requests\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin, urlparse\nimport re\n\ndef is_valid_url(url):\n    parsed = urlparse(url)\n    return bool(parsed.netloc) and bool(parsed.scheme)\n\ndef is_web_page(url):\n    # Only allow specific web extensions\n    web_extensions = ('.html', '.htm', '.php', '/')\n    return url.endswith(web_extensions) or '?' in url\n\ndef fetch_links(url, base_domain):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        links = set()\n        for a_tag in soup.find_all('a', href=True):\n            href = a_tag['href']\n            full_url = urljoin(url, href)\n            # Ensure the URL is valid, is a web page, and stays within the same domain\n            if is_valid_url(full_url) and is_web_page(full_url) and urlparse(full_url).netloc == base_domain:\n                links.add(full_url)\n        return links\n    except requests.RequestException as e:\n        print(f\"Error fetching {url}: {e}\")\n        return set()\n\ndef fetch_text_with_lynx(url):\n    # Check content type before fetching with lynx\n    try:\n        head_response = requests.head(url, allow_redirects=True)\n        if head_response.headers.get('Content-Type', '').startswith('text/html'):\n            result = subprocess.run(['lynx', '-dump', url], capture_output=True, text=True, check=True)\n            return result.stdout\n        else:\n            print(f\"Skipping non-HTML content: {url}\")\n            return \"\"\n    except (requests.RequestException, subprocess.CalledProcessError) as e:\n        print(f\"Error fetching text from {url}: {e}\")\n        return \"\"\n\ndef sanitize_filename(filename):\n    # Remove invalid characters for filenames\n    return re.sub(r'[\\\\/*?:\"<>|]', \"_\", filename)\n\ndef save_intermediate_text(url, text, output_dir):\n    parsed_url = urlparse(url)\n    # Create a filename based on the URL path\n    filename = f\"{parsed_url.netloc}{parsed_url.path}\".replace('/', '_').strip('_') + \".txt\"\n    filename = sanitize_filename(filename)\n    filepath = os.path.join(output_dir, filename)\n    with open(filepath, 'w', encoding='utf-8') as f:\n        f.write(text)\n    return filepath\n\ndef main():\n    initial_url = \"https://docs.python.org/3/tutorial/index.html\"\n    base_domain = urlparse(initial_url).netloc  # Extract the base domain of the initial URL\n\n    if not is_valid_url(initial_url):\n        print(\"Invalid URL. Please enter a valid URL.\")\n        return\n\n    output_dir = \"python\"\n    os.makedirs(output_dir, exist_ok=True)\n\n    visited = set()\n    to_visit = {initial_url}\n    all_text = \"\"\n\n    while to_visit:\n        current_url = to_visit.pop()\n        if current_url in visited:\n            continue\n        visited.add(current_url)\n        print(f\"Processing: {current_url}\")\n        page_text = fetch_text_with_lynx(current_url)\n        if page_text:\n            all_text += page_text + \"\\n\\n\"\n            intermediate_file = save_intermediate_text(current_url, page_text, output_dir)\n            print(f\"Saved intermediate text to {intermediate_file}\")\n        links = fetch_links(current_url, base_domain)\n        to_visit.update(links - visited)\n\n    combined_file = \"python.txt\"\n    with open(combined_file, 'w', encoding='utf-8') as f:\n        f.write(all_text)\n\n    print(f\"Combined text saved to {combined_file}\")\n\nif __name__ == \"__main__\":\n    main()\n"
            }
        },
        {
            "file": {
                "File": "initialize_environment.sh",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/initialize_environment.sh",
                "Relative Path": "initialize_environment.sh",
                "Size": 137,
                "Last Modified": "2024-11-04 15:43:54",
                "Lines": 1,
                "Source_Code": "ln -s /brainboost/brainboost_data/data_storage/storage_local/brainboost_data_storage_local_programming_books com_worktwins_data/books_pdf"
            }
        },
        {
            "file": {
                "File": "test_languages.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_test/test_languages.py",
                "Relative Path": "com_worktwins_test/test_languages.py",
                "Size": 1689,
                "Last Modified": "2024-11-04 15:27:58",
                "Lines": 42,
                "Source_Code": "import time\nimport pytest\nfrom com_worktwins_languages.Language import Language  # Replace 'your_module' with the actual module name\n\n@pytest.fixture(scope=\"module\")\ndef language_instance():\n    # Initialize the Language class with the path to your YAML file\n    yaml_file = 'com_worktwins_data/languages.yml'  # Update with the correct path\n    return Language(yaml_file)\n\ndef test_get_language_attributes(language_instance):\n    language_name = 'Python'\n    start_time = time.time()\n    attributes = language_instance.get_language_attributes(language_name)\n    end_time = time.time()\n    print(f\"Execution time for get_language_attributes: {end_time - start_time:.6f} seconds\")\n    assert attributes is not None\n    assert attributes['name'] == language_name\n\ndef test_find_by_extension(language_instance):\n    extension = '.py'\n    start_time = time.time()\n    languages = language_instance.find_by_extension(extension)\n    end_time = time.time()\n    print(f\"Execution time for find_by_extension: {end_time - start_time:.6f} seconds\")\n    assert 'Python' in languages\n\ndef test_find_by_alias(language_instance):\n    alias = 'python3'\n    start_time = time.time()\n    languages = language_instance.find_by_alias(alias)\n    end_time = time.time()\n    print(f\"Execution time for find_by_alias: {end_time - start_time:.6f} seconds\")\n    assert 'Python' in languages\n\ndef test_find_by_interpreter(language_instance):\n    interpreter = 'python3'\n    start_time = time.time()\n    languages = language_instance.find_by_interpreter(interpreter)\n    end_time = time.time()\n    print(f\"Execution time for find_by_interpreter: {end_time - start_time:.6f} seconds\")\n    assert 'Python' in languages\n"
            }
        },
        {
            "file": {
                "File": "test_model_use.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_test/test_model_use.py",
                "Relative Path": "com_worktwins_test/test_model_use.py",
                "Size": 1568,
                "Last Modified": "2024-11-18 23:46:43",
                "Lines": 43,
                "Source_Code": "import pytest\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\n@pytest.fixture\ndef model_path():\n    \"\"\"Path to the converted Hugging Face model.\"\"\"\n    return \"/home/golden/.llama/checkpoints/Llama3.2-3B-Instruct-HF\"\n\ndef test_model_load(model_path):\n    \"\"\"\n    Test if the LLaMA model and tokenizer load correctly.\n    \"\"\"\n    try:\n        model = AutoModelForCausalLM.from_pretrained(model_path)\n        tokenizer = AutoTokenizer.from_pretrained(model_path)\n        assert model is not None, \"Model failed to load\"\n        assert tokenizer is not None, \"Tokenizer failed to load\"\n        print(\"Model and tokenizer loaded successfully!\")\n    except Exception as e:\n        pytest.fail(f\"Failed to load model or tokenizer: {e}\")\n\ndef test_inference(model_path):\n    \"\"\"\n    Test if the LLaMA model can generate text given a simple prompt.\n    \"\"\"\n    try:\n        model = AutoModelForCausalLM.from_pretrained(model_path)\n        tokenizer = AutoTokenizer.from_pretrained(model_path)\n\n        # Sample input prompt\n        prompt = \"Explain the importance of version control in software development.\"\n\n        # Tokenize input\n        inputs = tokenizer(prompt, return_tensors=\"pt\")\n\n        # Generate output\n        outputs = model.generate(**inputs, max_length=50)\n        generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)\n\n        assert len(generated_text) > 0, \"Model failed to generate output\"\n        print(f\"Generated Text: {generated_text}\")\n    except Exception as e:\n        pytest.fail(f\"Model inference failed: {e}\")\n"
            }
        },
        {
            "file": {
                "File": "test_pdf_to_text.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_test/test_pdf_to_text.py",
                "Relative Path": "com_worktwins_test/test_pdf_to_text.py",
                "Size": 784,
                "Last Modified": "2024-11-25 16:29:26",
                "Lines": 32,
                "Source_Code": "import pytest\nfrom com_worktwins_data_source.PDFBook import PDFBook\n\nPDF_PATH = \"com_worktwins_data/books_pdf/Scott Chacon - Pro Git.pdf\"\n\n\n@pytest.fixture\ndef sample_pdf():\n    \"\"\"\n    Use the provided PDF for testing.\n    \"\"\"\n    return PDF_PATH\n\n\ndef test_pdfbook_initialization(sample_pdf):\n    \"\"\"\n    Test that PDFBook initializes correctly with a valid PDF file.\n    \"\"\"\n    book = PDFBook(sample_pdf)\n    assert book.text is not None\n    assert \"Git\" in book.text  # Expecting 'Git' to be present in the extracted text\n\n\n\n\ndef test_pdfbook_invalid_path():\n    \"\"\"\n    Test that PDFBook raises a FileNotFoundError when initialized with an invalid path.\n    \"\"\"\n    invalid_path = \"non_existent_file.pdf\"\n    with pytest.raises(FileNotFoundError):\n        PDFBook(invalid_path)\n"
            }
        },
        {
            "file": {
                "File": "README.md",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_test/.pytest_cache/README.md",
                "Relative Path": "com_worktwins_test/.pytest_cache/README.md",
                "Size": 302,
                "Last Modified": "2024-11-04 15:22:21",
                "Lines": 8,
                "Source_Code": "# pytest cache directory #\n\nThis directory contains data from the pytest's cache plugin,\nwhich provides the `--lf` and `--ff` options, as well as the `cache` fixture.\n\n**Do not** commit this to version control.\n\nSee [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.\n"
            }
        },
        {
            "file": {
                "File": "Language.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_languages/Language.py",
                "Relative Path": "com_worktwins_languages/Language.py",
                "Size": 3634,
                "Last Modified": "2024-11-28 17:15:44",
                "Lines": 106,
                "Source_Code": "import ast\nimport json\nimport pandas as pd\nimport re\nfrom pygments.lexers import guess_lexer, ClassNotFound\n\n\nclass Language:\n    @staticmethod\n    def load_json_to_dataframe(json_file):\n        \"\"\"\n        Load the JSON file into a Pandas DataFrame.\n        \"\"\"\n        with open(json_file, 'r', encoding='utf-8') as file:\n            try:\n                data = json.load(file)\n                # Convert nested dictionaries to DataFrame\n                df = pd.DataFrame.from_dict(data, orient='index')\n                # Reset index to have 'name' as a column\n                df.reset_index(inplace=True)\n                df.rename(columns={'index': 'name'}, inplace=True)\n                return df\n            except json.JSONDecodeError as e:\n                print(f\"Error loading JSON file: {e}\")\n                return pd.DataFrame()\n\n    @staticmethod\n    def get_language_attributes(df, language_name):\n        \"\"\"\n        Get attributes of a language by its name.\n        \"\"\"\n        result = df[df['name'].str.lower() == language_name.lower()]\n        if not result.empty:\n            return result.to_dict(orient='records')[0]\n        else:\n            print(f\"Language '{language_name}' not found.\")\n            return None\n\n    @staticmethod\n    def find_by_extension(df, extension):\n        \"\"\"\n        Find languages by file extension.\n        \"\"\"\n        if not extension.startswith('.'):\n            extension = f'.{extension}'\n        result = df[df['extensions'].apply(lambda x: extension in x if isinstance(x, list) else False)]\n        return result['name'].tolist()\n\n    @staticmethod\n    def find_by_alias(df, alias):\n        \"\"\"\n        Find languages by their aliases.\n        \"\"\"\n        result = df[df['aliases'].apply(lambda x: alias.lower() in [a.lower() for a in x] if isinstance(x, list) else False)]\n        return result['name'].tolist()\n\n    @staticmethod\n    def find_by_interpreter(df, interpreter):\n        \"\"\"\n        Find languages by their interpreters.\n        \"\"\"\n        result = df[df['interpreters'].apply(lambda x: interpreter.lower() in [i.lower() for i in x] if isinstance(x, list) else False)]\n        return result['name'].tolist()\n\n    @staticmethod\n    def detect_programming_language(code_block):\n        \"\"\"\n        Guess the programming language from a code block using Pygments.\n        \"\"\"\n        try:\n            lexer = guess_lexer(code_block)\n            return lexer.name.lower()  # Return the detected language name in lowercase\n        except ClassNotFound:\n            return \"unknown\"  # If Pygments cannot determine the language, return \"unknown\"\n\n    @staticmethod\n    def code_to_ast_json(code):\n        \"\"\"\n        Convert Python code to its AST and return as a JSON-compatible dictionary.\n        \"\"\"\n        try:\n            tree = ast.parse(code)\n            return Language.ast_to_dict(tree)\n        except SyntaxError as e:\n            print(f\"Syntax error in code block: {e}\")\n            return {}\n\n    @staticmethod\n    def ast_to_dict(node):\n        \"\"\"\n        Convert an AST node to a dictionary recursively.\n        \"\"\"\n        if isinstance(node, ast.AST):\n            return {key: Language.ast_to_dict(value) for key, value in ast.iter_fields(node)}\n        elif isinstance(node, list):\n            return [Language.ast_to_dict(item) for item in node]\n        else:\n            return node\n\n    @staticmethod\n    def load_languages(file_path='com_worktwins_data/languages.json'):\n        \"\"\"\n        Load programming languages data from a JSON file.\n        \"\"\"\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            return json.load(f)"
            }
        },
        {
            "file": {
                "File": "languages_improved.json",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_languages/languages_improved.json",
                "Relative Path": "com_worktwins_languages/languages_improved.json",
                "Size": 110866,
                "Last Modified": "2024-11-28 14:54:54",
                "Lines": 3933,
                "Source_Code": "[\n    {\n        \"1C Enterprise\": {\n            \"type\": \"programming\",\n            \"color\": \"#814CCC\",\n            \"extensions\": [\n                \".bsl\",\n                \".os\"\n            ],\n            \"tm_scope\": \"source.bsl\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 0,\n            \"function_def\": \"procedure myProcedure;\",\n            \"import_statement\": \"use MyClass;\",\n            \"print_statement\": \"Message(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"2-Dimensional Array\": {\n            \"type\": \"data\",\n            \"color\": \"#38761D\",\n            \"extensions\": [\n                \".2da\"\n            ],\n            \"tm_scope\": \"source.2da\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 387204628\n        }\n    },\n    {\n        \"4D\": {\n            \"type\": \"programming\",\n            \"color\": \"#004289\",\n            \"extensions\": [\n                \".4dm\"\n            ],\n            \"tm_scope\": \"source.4dm\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 577529595,\n            \"function_def\": \"var myMethod;\",\n            \"import_statement\": \"import MyLibrary;\",\n            \"print_statement\": \"ALERT(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ABAP\": {\n            \"type\": \"programming\",\n            \"color\": \"#E8274B\",\n            \"extensions\": [\n                \".abap\"\n            ],\n            \"tm_scope\": \"source.abap\",\n            \"ace_mode\": \"abap\",\n            \"language_id\": 1,\n            \"function_def\": \"FORM my_form.\",\n            \"import_statement\": \"INCLUDE my_program.\",\n            \"print_statement\": \"WRITE: 'my_text'.\"\n        }\n    },\n    {\n        \"ABAP CDS\": {\n            \"type\": \"programming\",\n            \"color\": \"#555e25\",\n            \"extensions\": [\n                \".asddls\"\n            ],\n            \"tm_scope\": \"source.abapcds\",\n            \"language_id\": 452681853,\n            \"ace_mode\": \"text\",\n            \"function_def\": \"entity my_entity as select from my_table;\",\n            \"import_statement\": \"using namespace my_namespace;\",\n            \"print_statement\": \"SELECT * INTO my_table WHERE value = 'my_text'.\"\n        }\n    },\n    {\n        \"ABNF\": {\n            \"type\": \"data\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".abnf\"\n            ],\n            \"tm_scope\": \"source.abnf\",\n            \"language_id\": 429\n        }\n    },\n    {\n        \"AGS Script\": {\n            \"type\": \"programming\",\n            \"color\": \"#B9D9FF\",\n            \"aliases\": [\n                \"ags\"\n            ],\n            \"extensions\": [\n                \".asc\",\n                \".ash\"\n            ],\n            \"tm_scope\": \"source.c++\",\n            \"ace_mode\": \"c_cpp\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 2,\n            \"function_def\": \"function my_function() { }\",\n            \"import_statement\": \"import MyLibrary;\",\n            \"print_statement\": \"Display(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"AIDL\": {\n            \"type\": \"programming\",\n            \"color\": \"#34EB6B\",\n            \"tm_scope\": \"source.aidl\",\n            \"extensions\": [\n                \".aidl\"\n            ],\n            \"ace_mode\": \"text\",\n            \"interpreters\": [\n                \"aidl\"\n            ],\n            \"language_id\": 451700185,\n            \"function_def\": \"interface MyService { void my_function(); }\",\n            \"import_statement\": \"import my.library;\",\n            \"print_statement\": \"System.out.println(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"AL\": {\n            \"type\": \"programming\",\n            \"color\": \"#3AA2B5\",\n            \"extensions\": [\n                \".al\"\n            ],\n            \"tm_scope\": \"source.al\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 658971832,\n            \"function_def\": \"procedure MyProcedure;\",\n            \"import_statement\": \"codeunit MyCodeunit;\",\n            \"print_statement\": \"Message('my_text');\"\n        }\n    },\n    {\n        \"AMPL\": {\n            \"type\": \"programming\",\n            \"color\": \"#E6EFBB\",\n            \"extensions\": [\n                \".ampl\",\n                \".mod\"\n            ],\n            \"tm_scope\": \"source.ampl\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 3,\n            \"function_def\": \"function my_function; solve;\",\n            \"import_statement\": \"include my_library.mod;\",\n            \"print_statement\": \"display 'my_text';\"\n        }\n    },\n    {\n        \"ANTLR\": {\n            \"type\": \"programming\",\n            \"color\": \"#9DC3FF\",\n            \"extensions\": [\n                \".g4\"\n            ],\n            \"tm_scope\": \"source.antlr\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 4,\n            \"function_def\": \"grammar MyGrammar;\",\n            \"import_statement\": \"import MyLexer;\",\n            \"print_statement\": \"// Printing is not typically used in grammars\"\n        }\n    },\n    {\n        \"API Blueprint\": {\n            \"type\": \"markup\",\n            \"color\": \"#2ACCA8\",\n            \"ace_mode\": \"markdown\",\n            \"extensions\": [\n                \".apib\"\n            ],\n            \"tm_scope\": \"text.html.markdown.source.gfm.apib\",\n            \"language_id\": 5,\n            \"function_def\": \"# My API Function\",\n            \"import_statement\": \"FORMAT: 1A\",\n            \"print_statement\": \"// API documentation does not execute prints\"\n        }\n    },\n    {\n        \"API Blueprint\": {\n            \"type\": \"markup\",\n            \"color\": \"#2ACCA8\",\n            \"ace_mode\": \"markdown\",\n            \"extensions\": [\n                \".apib\"\n            ],\n            \"tm_scope\": \"text.html.markdown.source.gfm.apib\",\n            \"language_id\": 5,\n            \"function_def\": \"# My API Function\",\n            \"import_statement\": \"FORMAT: 1A\",\n            \"print_statement\": \"// API documentation does not execute prints\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    },\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    },\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    }\n    ,\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    },\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    }\n    ,\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    },\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    }\n    ,\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    }\n    ,\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    }\n    ,\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    },\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    }\n    ,\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    }\n\n    ,\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    }\n    ,\n{\n    \"Adblock Filter List\": {\n        \"type\": \"data\",\n        \"color\": \"#800000\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".txt\"\n        ],\n        \"aliases\": [\n            \"ad block filters\",\n            \"ad block\",\n            \"adb\",\n            \"adblock\"\n        ],\n        \"tm_scope\": \"text.adblock\",\n        \"language_id\": 884614762\n    }\n},\n{\n    \"Adobe Font Metrics\": {\n        \"type\": \"data\",\n        \"color\": \"#fa0f00\",\n        \"tm_scope\": \"source.afm\",\n        \"extensions\": [\n            \".afm\"\n        ],\n        \"aliases\": [\n            \"acfm\",\n            \"adobe composite font metrics\",\n            \"adobe multiple font metrics\",\n            \"amfm\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 147198098\n    }\n},\n{\n    \"Agda\": {\n        \"type\": \"programming\",\n        \"color\": \"#315665\",\n        \"extensions\": [\n            \".agda\"\n        ],\n        \"tm_scope\": \"source.agda\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 12,\n        \"function_def\": \"myFunction : A -> B -> C\",\n        \"import_statement\": \"open import MyModule\",\n        \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n    }\n},\n{\n    \"Alloy\": {\n        \"type\": \"programming\",\n        \"color\": \"#64C800\",\n        \"extensions\": [\n            \".als\"\n        ],\n        \"tm_scope\": \"source.alloy\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 13,\n        \"function_def\": \"sig MySig { myFunction: set MyType }\",\n        \"import_statement\": \"// Alloy does not use imports\",\n        \"print_statement\": \"// Alloy is declarative and does not print\"\n    }\n},\n{\n    \"Alpine Abuild\": {\n        \"type\": \"programming\",\n        \"color\": \"#0D597F\",\n        \"group\": \"Shell\",\n        \"aliases\": [\n            \"abuild\",\n            \"apkbuild\"\n        ],\n        \"filenames\": [\n            \"APKBUILD\"\n        ],\n        \"tm_scope\": \"source.shell\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 14,\n        \"function_def\": \"my_function() { ... }\",\n        \"import_statement\": \". my_library.sh\",\n        \"print_statement\": \"echo \\\"my_text\\\"\"\n    }\n},\n{\n    \"Altium Designer\": {\n        \"type\": \"data\",\n        \"color\": \"#A89663\",\n        \"aliases\": [\n            \"altium\"\n        ],\n        \"extensions\": [\n            \".OutJob\",\n            \".PcbDoc\",\n            \".PrjPCB\",\n            \".SchDoc\"\n        ],\n        \"tm_scope\": \"source.ini\",\n        \"ace_mode\": \"ini\",\n        \"language_id\": 187772328\n    }\n},\n{\n    \"AngelScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#C7D7DC\",\n        \"extensions\": [\n            \".as\",\n            \".angelscript\"\n        ],\n        \"tm_scope\": \"source.angelscript\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"language_id\": 389477596,\n        \"function_def\": \"void myFunction() { }\",\n        \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n        \"print_statement\": \"Print(\\\"my_text\\\");\"\n    }\n},\n{\n    \"Ant Build System\": {\n        \"type\": \"data\",\n        \"color\": \"#A9157E\",\n        \"tm_scope\": \"text.xml.ant\",\n        \"filenames\": [\n            \"ant.xml\",\n            \"build.xml\"\n        ],\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"application/xml\",\n        \"language_id\": 15\n    }\n},\n{\n    \"Antlers\": {\n        \"type\": \"markup\",\n        \"color\": \"#ff269e\",\n        \"extensions\": [\n            \".antlers.html\",\n            \".antlers.php\",\n            \".antlers.xml\"\n        ],\n        \"tm_scope\": \"text.html.statamic\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 1067292663,\n        \"function_def\": \"{{ my_function() }}\",\n        \"import_statement\": \"// Antlers does not use imports\",\n        \"print_statement\": \"{{ 'my_text' }}\"\n    }\n},\n{\n    \"ApacheConf\": {\n        \"type\": \"data\",\n        \"color\": \"#d12127\",\n        \"aliases\": [\n            \"aconf\",\n            \"apache\"\n        ],\n        \"extensions\": [\n            \".apacheconf\",\n            \".vhost\"\n        ],\n        \"filenames\": [\n            \".htaccess\",\n            \"apache2.conf\",\n            \"httpd.conf\"\n        ],\n        \"tm_scope\": \"source.apache-config\",\n        \"ace_mode\": \"apache_conf\",\n        \"language_id\": 16,\n        \"function_def\": \"# Functions not applicable in config files\",\n        \"import_statement\": \"Include my_config.conf\",\n        \"print_statement\": \"# Directives output information\"\n    }\n},\n{\n    \"Apex\": {\n        \"type\": \"programming\",\n        \"color\": \"#1797c0\",\n        \"extensions\": [\n            \".cls\",\n            \".trigger\"\n        ],\n        \"tm_scope\": \"source.apex\",\n        \"ace_mode\": \"java\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-java\",\n        \"language_id\": 17,\n        \"function_def\": \"public void myFunction() { }\",\n        \"import_statement\": \"import MyNamespace.MyClass;\",\n        \"print_statement\": \"System.debug('my_text');\"\n    }\n},\n{\n    \"APL\": {\n        \"type\": \"programming\",\n        \"color\": \"#5A8164\",\n        \"extensions\": [\n            \".apl\",\n            \".dyalog\"\n        ],\n        \"interpreters\": [\n            \"apl\",\n            \"aplx\",\n            \"dyalog\"\n        ],\n        \"tm_scope\": \"source.apl\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"apl\",\n        \"codemirror_mime_type\": \"text/apl\",\n        \"language_id\": 6,\n        \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n        \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n        \"print_statement\": \"'my_text'\"\n    }\n}\n\n,\n{\n    \"ASL\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".asl\",\n            \".dsl\"\n        ],\n        \"tm_scope\": \"source.asl\",\n        \"language_id\": 124996147,\n        \"function_def\": \"Method myMethod;\",\n        \"import_statement\": \"Include myScript;\",\n        \"print_statement\": \"Output('my_text');\"\n    }\n},\n{\n    \"ASN.1\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".asn\",\n            \".asn1\"\n        ],\n        \"tm_scope\": \"source.asn\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"asn.1\",\n        \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n        \"language_id\": 7,\n        \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n        \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n        \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n    }\n},\n{\n    \"ASP.NET\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"text.html.asp\",\n        \"color\": \"#9400ff\",\n        \"aliases\": [\n            \"aspx\",\n            \"aspx-vb\"\n        ],\n        \"extensions\": [\n            \".asax\",\n            \".ascx\",\n            \".ashx\",\n            \".asmx\",\n            \".aspx\",\n            \".axd\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"htmlembedded\",\n        \"codemirror_mime_type\": \"application/x-aspx\",\n        \"language_id\": 564186416,\n        \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n        \"import_statement\": \"using MyNamespace;\",\n        \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n    }\n},\n{\n    \"ATS\": {\n        \"type\": \"programming\",\n        \"color\": \"#1ac620\",\n        \"aliases\": [\n            \"ats2\"\n        ],\n        \"extensions\": [\n            \".dats\",\n            \".hats\",\n            \".sats\"\n        ],\n        \"tm_scope\": \"source.ats\",\n        \"ace_mode\": \"ocaml\",\n        \"language_id\": 9,\n        \"function_def\": \"fun myFunction(): void = { ... }\",\n        \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n        \"print_statement\": \"print(\\\"my_text\\\")\"\n    }\n},\n{\n    \"ActionScript\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.actionscript.3\",\n        \"color\": \"#882B0F\",\n        \"aliases\": [\n            \"actionscript 3\",\n            \"actionscript3\",\n            \"as3\"\n        ],\n        \"extensions\": [\n            \".as\"\n        ],\n        \"ace_mode\": \"actionscript\",\n        \"language_id\": 10,\n        \"function_def\": \"function myFunction(): void { }\",\n        \"import_statement\": \"import MyPackage.*;\",\n        \"print_statement\": \"trace(\\\"my_text\\\");\"\n    }\n},\n{\n    \"Ada\": {\n        \"type\": \"programming\",\n        \"color\": \"#02f88c\",\n        \"extensions\": [\n            \".adb\",\n            \".ada\",\n            \".ads\"\n        ],\n        \"aliases\": [\n            \"ada95\",\n            \"ada2005\"\n        ],\n        \"tm_scope\": \"source.ada\",\n        \"ace_mode\": \"ada\",\n        \"language_id\": 11,\n        \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n        \"import_statement\": \"with My_Package;\",\n        \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n    }\n},\n{\n    \"Adblock Filter List\": {\n        \"type\": \"data\",\n        \"color\": \"#800000\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".txt\"\n        ],\n        \"aliases\": [\n            \"ad block filters\",\n            \"ad block\",\n            \"adb\",\n            \"adblock\"\n        ],\n        \"tm_scope\": \"text.adblock\",\n        \"language_id\": 884614762\n    }\n},\n{\n    \"Adobe Font Metrics\": {\n        \"type\": \"data\",\n        \"color\": \"#fa0f00\",\n        \"tm_scope\": \"source.afm\",\n        \"extensions\": [\n            \".afm\"\n        ],\n        \"aliases\": [\n            \"acfm\",\n            \"adobe composite font metrics\",\n            \"adobe multiple font metrics\",\n            \"amfm\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 147198098\n    }\n},\n{\n    \"Agda\": {\n        \"type\": \"programming\",\n        \"color\": \"#315665\",\n        \"extensions\": [\n            \".agda\"\n        ],\n        \"tm_scope\": \"source.agda\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 12,\n        \"function_def\": \"myFunction : A -> B -> C\",\n        \"import_statement\": \"open import MyModule\",\n        \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n    }\n},\n{\n    \"Alloy\": {\n        \"type\": \"programming\",\n        \"color\": \"#64C800\",\n        \"extensions\": [\n            \".als\"\n        ],\n        \"tm_scope\": \"source.alloy\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 13,\n        \"function_def\": \"sig MySig { myFunction: set MyType }\",\n        \"import_statement\": \"// Alloy does not use imports\",\n        \"print_statement\": \"// Alloy is declarative and does not print\"\n    }\n},\n{\n    \"Alpine Abuild\": {\n        \"type\": \"programming\",\n        \"color\": \"#0D597F\",\n        \"group\": \"Shell\",\n        \"aliases\": [\n            \"abuild\",\n            \"apkbuild\"\n        ],\n        \"filenames\": [\n            \"APKBUILD\"\n        ],\n        \"tm_scope\": \"source.shell\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 14,\n        \"function_def\": \"my_function() { ... }\",\n        \"import_statement\": \". my_library.sh\",\n        \"print_statement\": \"echo \\\"my_text\\\"\"\n    }\n},\n{\n    \"Altium Designer\": {\n        \"type\": \"data\",\n        \"color\": \"#A89663\",\n        \"aliases\": [\n            \"altium\"\n        ],\n        \"extensions\": [\n            \".OutJob\",\n            \".PcbDoc\",\n            \".PrjPCB\",\n            \".SchDoc\"\n        ],\n        \"tm_scope\": \"source.ini\",\n        \"ace_mode\": \"ini\",\n        \"language_id\": 187772328\n    }\n},\n{\n    \"AngelScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#C7D7DC\",\n        \"extensions\": [\n            \".as\",\n            \".angelscript\"\n        ],\n        \"tm_scope\": \"source.angelscript\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"language_id\": 389477596,\n        \"function_def\": \"void myFunction() { }\",\n        \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n        \"print_statement\": \"Print(\\\"my_text\\\");\"\n    }\n},\n{\n    \"Ant Build System\": {\n        \"type\": \"data\",\n        \"color\": \"#A9157E\",\n        \"tm_scope\": \"text.xml.ant\",\n        \"filenames\": [\n            \"ant.xml\",\n            \"build.xml\"\n        ],\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"application/xml\",\n        \"language_id\": 15\n    }\n}\n,\n{\n    \"Antlers\": {\n        \"type\": \"markup\",\n        \"color\": \"#ff269e\",\n        \"extensions\": [\n            \".antlers.html\",\n            \".antlers.php\",\n            \".antlers.xml\"\n        ],\n        \"tm_scope\": \"text.html.statamic\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 1067292663,\n        \"function_def\": \"{{ my_function() }}\",\n        \"import_statement\": \"// Antlers does not use imports\",\n        \"print_statement\": \"{{ 'my_text' }}\"\n    }\n},\n{\n    \"ApacheConf\": {\n        \"type\": \"data\",\n        \"color\": \"#d12127\",\n        \"aliases\": [\n            \"aconf\",\n            \"apache\"\n        ],\n        \"extensions\": [\n            \".apacheconf\",\n            \".vhost\"\n        ],\n        \"filenames\": [\n            \".htaccess\",\n            \"apache2.conf\",\n            \"httpd.conf\"\n        ],\n        \"tm_scope\": \"source.apache-config\",\n        \"ace_mode\": \"apache_conf\",\n        \"language_id\": 16,\n        \"function_def\": \"# Functions not applicable in config files\",\n        \"import_statement\": \"Include my_config.conf\",\n        \"print_statement\": \"# Directives output information\"\n    }\n},\n{\n    \"Apex\": {\n        \"type\": \"programming\",\n        \"color\": \"#1797c0\",\n        \"extensions\": [\n            \".cls\",\n            \".trigger\"\n        ],\n        \"tm_scope\": \"source.apex\",\n        \"ace_mode\": \"java\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-java\",\n        \"language_id\": 17,\n        \"function_def\": \"public void myFunction() { }\",\n        \"import_statement\": \"import MyNamespace.MyClass;\",\n        \"print_statement\": \"System.debug('my_text');\"\n    }\n},\n{\n    \"APL\": {\n        \"type\": \"programming\",\n        \"color\": \"#5A8164\",\n        \"extensions\": [\n            \".apl\",\n            \".dyalog\"\n        ],\n        \"interpreters\": [\n            \"apl\",\n            \"aplx\",\n            \"dyalog\"\n        ],\n        \"tm_scope\": \"source.apl\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"apl\",\n        \"codemirror_mime_type\": \"text/apl\",\n        \"language_id\": 6,\n        \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n        \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n        \"print_statement\": \"'my_text'\"\n    }\n},\n{\n    \"ASL\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".asl\",\n            \".dsl\"\n        ],\n        \"tm_scope\": \"source.asl\",\n        \"language_id\": 124996147,\n        \"function_def\": \"Method myMethod;\",\n        \"import_statement\": \"Include myScript;\",\n        \"print_statement\": \"Output('my_text');\"\n    }\n},\n{\n    \"ASN.1\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".asn\",\n            \".asn1\"\n        ],\n        \"tm_scope\": \"source.asn\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"asn.1\",\n        \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n        \"language_id\": 7,\n        \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n        \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n        \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n    }\n},\n{\n    \"ASP.NET\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"text.html.asp\",\n        \"color\": \"#9400ff\",\n        \"aliases\": [\n            \"aspx\",\n            \"aspx-vb\"\n        ],\n        \"extensions\": [\n            \".asax\",\n            \".ascx\",\n            \".ashx\",\n            \".asmx\",\n            \".aspx\",\n            \".axd\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"htmlembedded\",\n        \"codemirror_mime_type\": \"application/x-aspx\",\n        \"language_id\": 564186416,\n        \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n        \"import_statement\": \"using MyNamespace;\",\n        \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n    }\n},\n{\n    \"ATS\": {\n        \"type\": \"programming\",\n        \"color\": \"#1ac620\",\n        \"aliases\": [\n            \"ats2\"\n        ],\n        \"extensions\": [\n            \".dats\",\n            \".hats\",\n            \".sats\"\n        ],\n        \"tm_scope\": \"source.ats\",\n        \"ace_mode\": \"ocaml\",\n        \"language_id\": 9,\n        \"function_def\": \"fun myFunction(): void = { ... }\",\n        \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n        \"print_statement\": \"print(\\\"my_text\\\")\"\n    }\n},\n{\n    \"ActionScript\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.actionscript.3\",\n        \"color\": \"#882B0F\",\n        \"aliases\": [\n            \"actionscript 3\",\n            \"actionscript3\",\n            \"as3\"\n        ],\n        \"extensions\": [\n            \".as\"\n        ],\n        \"ace_mode\": \"actionscript\",\n        \"language_id\": 10,\n        \"function_def\": \"function myFunction(): void { }\",\n        \"import_statement\": \"import MyPackage.*;\",\n        \"print_statement\": \"trace(\\\"my_text\\\");\"\n    }\n},\n{\n    \"Ada\": {\n        \"type\": \"programming\",\n        \"color\": \"#02f88c\",\n        \"extensions\": [\n            \".adb\",\n            \".ada\",\n            \".ads\"\n        ],\n        \"aliases\": [\n            \"ada95\",\n            \"ada2005\"\n        ],\n        \"tm_scope\": \"source.ada\",\n        \"ace_mode\": \"ada\",\n        \"language_id\": 11,\n        \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n        \"import_statement\": \"with My_Package;\",\n        \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n    }\n}\n,\n{\n    \"Adblock Filter List\": {\n        \"type\": \"data\",\n        \"color\": \"#800000\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".txt\"\n        ],\n        \"aliases\": [\n            \"ad block filters\",\n            \"ad block\",\n            \"adb\",\n            \"adblock\"\n        ],\n        \"tm_scope\": \"text.adblock\",\n        \"language_id\": 884614762\n    }\n},\n{\n    \"Adobe Font Metrics\": {\n        \"type\": \"data\",\n        \"color\": \"#fa0f00\",\n        \"tm_scope\": \"source.afm\",\n        \"extensions\": [\n            \".afm\"\n        ],\n        \"aliases\": [\n            \"acfm\",\n            \"adobe composite font metrics\",\n            \"adobe multiple font metrics\",\n            \"amfm\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 147198098\n    }\n},\n{\n    \"Agda\": {\n        \"type\": \"programming\",\n        \"color\": \"#315665\",\n        \"extensions\": [\n            \".agda\"\n        ],\n        \"tm_scope\": \"source.agda\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 12,\n        \"function_def\": \"myFunction : A -> B -> C\",\n        \"import_statement\": \"open import MyModule\",\n        \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n    }\n},\n{\n    \"Alloy\": {\n        \"type\": \"programming\",\n        \"color\": \"#64C800\",\n        \"extensions\": [\n            \".als\"\n        ],\n        \"tm_scope\": \"source.alloy\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 13,\n        \"function_def\": \"sig MySig { myFunction: set MyType }\",\n        \"import_statement\": \"// Alloy does not use imports\",\n        \"print_statement\": \"// Alloy is declarative and does not print\"\n    }\n},\n{\n    \"Alpine Abuild\": {\n        \"type\": \"programming\",\n        \"color\": \"#0D597F\",\n        \"group\": \"Shell\",\n        \"aliases\": [\n            \"abuild\",\n            \"apkbuild\"\n        ],\n        \"filenames\": [\n            \"APKBUILD\"\n        ],\n        \"tm_scope\": \"source.shell\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 14,\n        \"function_def\": \"my_function() { ... }\",\n        \"import_statement\": \". my_library.sh\",\n        \"print_statement\": \"echo \\\"my_text\\\"\"\n    }\n},\n{\n    \"Altium Designer\": {\n        \"type\": \"data\",\n        \"color\": \"#A89663\",\n        \"aliases\": [\n            \"altium\"\n        ],\n        \"extensions\": [\n            \".OutJob\",\n            \".PcbDoc\",\n            \".PrjPCB\",\n            \".SchDoc\"\n        ],\n        \"tm_scope\": \"source.ini\",\n        \"ace_mode\": \"ini\",\n        \"language_id\": 187772328\n    }\n},\n{\n    \"AngelScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#C7D7DC\",\n        \"extensions\": [\n            \".as\",\n            \".angelscript\"\n        ],\n        \"tm_scope\": \"source.angelscript\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"language_id\": 389477596,\n        \"function_def\": \"void myFunction() { }\",\n        \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n        \"print_statement\": \"Print(\\\"my_text\\\");\"\n    }\n},\n{\n    \"Ant Build System\": {\n        \"type\": \"data\",\n        \"color\": \"#A9157E\",\n        \"tm_scope\": \"text.xml.ant\",\n        \"filenames\": [\n            \"ant.xml\",\n            \"build.xml\"\n        ],\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"application/xml\",\n        \"language_id\": 15\n    }\n},\n{\n    \"Antlers\": {\n        \"type\": \"markup\",\n        \"color\": \"#ff269e\",\n        \"extensions\": [\n            \".antlers.html\",\n            \".antlers.php\",\n            \".antlers.xml\"\n        ],\n        \"tm_scope\": \"text.html.statamic\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 1067292663,\n        \"function_def\": \"{{ my_function() }}\",\n        \"import_statement\": \"// Antlers does not use imports\",\n        \"print_statement\": \"{{ 'my_text' }}\"\n    }\n},\n{\n    \"ApacheConf\": {\n        \"type\": \"data\",\n        \"color\": \"#d12127\",\n        \"aliases\": [\n            \"aconf\",\n            \"apache\"\n        ],\n        \"extensions\": [\n            \".apacheconf\",\n            \".vhost\"\n        ],\n        \"filenames\": [\n            \".htaccess\",\n            \"apache2.conf\",\n            \"httpd.conf\"\n        ],\n        \"tm_scope\": \"source.apache-config\",\n        \"ace_mode\": \"apache_conf\",\n        \"language_id\": 16,\n        \"function_def\": \"# Functions not applicable in config files\",\n        \"import_statement\": \"Include my_config.conf\",\n        \"print_statement\": \"# Directives output information\"\n    }\n},\n{\n    \"Apex\": {\n        \"type\": \"programming\",\n        \"color\": \"#1797c0\",\n        \"extensions\": [\n            \".cls\",\n            \".trigger\"\n        ],\n        \"tm_scope\": \"source.apex\",\n        \"ace_mode\": \"java\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-java\",\n        \"language_id\": 17,\n        \"function_def\": \"public void myFunction() { }\",\n        \"import_statement\": \"import MyNamespace.MyClass;\",\n        \"print_statement\": \"System.debug('my_text');\"\n    }\n}\n,\n{\n    \"Antlers\": {\n        \"type\": \"markup\",\n        \"color\": \"#ff269e\",\n        \"extensions\": [\n            \".antlers.html\",\n            \".antlers.php\",\n            \".antlers.xml\"\n        ],\n        \"tm_scope\": \"text.html.statamic\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 1067292663,\n        \"function_def\": \"{{ my_function() }}\",\n        \"import_statement\": \"// Antlers does not use imports\",\n        \"print_statement\": \"{{ 'my_text' }}\"\n    }\n},\n{\n    \"ApacheConf\": {\n        \"type\": \"data\",\n        \"color\": \"#d12127\",\n        \"aliases\": [\n            \"aconf\",\n            \"apache\"\n        ],\n        \"extensions\": [\n            \".apacheconf\",\n            \".vhost\"\n        ],\n        \"filenames\": [\n            \".htaccess\",\n            \"apache2.conf\",\n            \"httpd.conf\"\n        ],\n        \"tm_scope\": \"source.apache-config\",\n        \"ace_mode\": \"apache_conf\",\n        \"language_id\": 16,\n        \"function_def\": \"# Functions not applicable in config files\",\n        \"import_statement\": \"Include my_config.conf\",\n        \"print_statement\": \"# Directives output information\"\n    }\n},\n{\n    \"Apex\": {\n        \"type\": \"programming\",\n        \"color\": \"#1797c0\",\n        \"extensions\": [\n            \".cls\",\n            \".trigger\"\n        ],\n        \"tm_scope\": \"source.apex\",\n        \"ace_mode\": \"java\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-java\",\n        \"language_id\": 17,\n        \"function_def\": \"public void myFunction() { }\",\n        \"import_statement\": \"import MyNamespace.MyClass;\",\n        \"print_statement\": \"System.debug('my_text');\"\n    }\n},\n{\n    \"APL\": {\n        \"type\": \"programming\",\n        \"color\": \"#5A8164\",\n        \"extensions\": [\n            \".apl\",\n            \".dyalog\"\n        ],\n        \"interpreters\": [\n            \"apl\",\n            \"aplx\",\n            \"dyalog\"\n        ],\n        \"tm_scope\": \"source.apl\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"apl\",\n        \"codemirror_mime_type\": \"text/apl\",\n        \"language_id\": 6,\n        \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n        \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n        \"print_statement\": \"'my_text'\"\n    }\n},\n{\n    \"ASL\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".asl\",\n            \".dsl\"\n        ],\n        \"tm_scope\": \"source.asl\",\n        \"language_id\": 124996147,\n        \"function_def\": \"Method myMethod;\",\n        \"import_statement\": \"Include myScript;\",\n        \"print_statement\": \"Output('my_text');\"\n    }\n},\n{\n    \"ASN.1\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".asn\",\n            \".asn1\"\n        ],\n        \"tm_scope\": \"source.asn\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"asn.1\",\n        \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n        \"language_id\": 7,\n        \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n        \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n        \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n    }\n},\n{\n    \"ASP.NET\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"text.html.asp\",\n        \"color\": \"#9400ff\",\n        \"aliases\": [\n            \"aspx\",\n            \"aspx-vb\"\n        ],\n        \"extensions\": [\n            \".asax\",\n            \".ascx\",\n            \".ashx\",\n            \".asmx\",\n            \".aspx\",\n            \".axd\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"htmlembedded\",\n        \"codemirror_mime_type\": \"application/x-aspx\",\n        \"language_id\": 564186416,\n        \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n        \"import_statement\": \"using MyNamespace;\",\n        \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n    }\n},\n{\n    \"ATS\": {\n        \"type\": \"programming\",\n        \"color\": \"#1ac620\",\n        \"aliases\": [\n            \"ats2\"\n        ],\n        \"extensions\": [\n            \".dats\",\n            \".hats\",\n            \".sats\"\n        ],\n        \"tm_scope\": \"source.ats\",\n        \"ace_mode\": \"ocaml\",\n        \"language_id\": 9,\n        \"function_def\": \"fun myFunction(): void = { ... }\",\n        \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n        \"print_statement\": \"print(\\\"my_text\\\")\"\n    }\n},\n{\n    \"ActionScript\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.actionscript.3\",\n        \"color\": \"#882B0F\",\n        \"aliases\": [\n            \"actionscript 3\",\n            \"actionscript3\",\n            \"as3\"\n        ],\n        \"extensions\": [\n            \".as\"\n        ],\n        \"ace_mode\": \"actionscript\",\n        \"language_id\": 10,\n        \"function_def\": \"function myFunction(): void { }\",\n        \"import_statement\": \"import MyPackage.*;\",\n        \"print_statement\": \"trace(\\\"my_text\\\");\"\n    }\n},\n{\n    \"Ada\": {\n        \"type\": \"programming\",\n        \"color\": \"#02f88c\",\n        \"extensions\": [\n            \".adb\",\n            \".ada\",\n            \".ads\"\n        ],\n        \"aliases\": [\n            \"ada95\",\n            \"ada2005\"\n        ],\n        \"tm_scope\": \"source.ada\",\n        \"ace_mode\": \"ada\",\n        \"language_id\": 11,\n        \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n        \"import_statement\": \"with My_Package;\",\n        \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n    }\n}\n,\n{\n    \"APL\": {\n        \"type\": \"programming\",\n        \"color\": \"#5A8164\",\n        \"extensions\": [\n            \".apl\",\n            \".dyalog\"\n        ],\n        \"interpreters\": [\n            \"apl\",\n            \"aplx\",\n            \"dyalog\"\n        ],\n        \"tm_scope\": \"source.apl\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"apl\",\n        \"codemirror_mime_type\": \"text/apl\",\n        \"language_id\": 6,\n        \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n        \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n        \"print_statement\": \"'my_text'\"\n    }\n},\n{\n    \"ASL\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".asl\",\n            \".dsl\"\n        ],\n        \"tm_scope\": \"source.asl\",\n        \"language_id\": 124996147,\n        \"function_def\": \"Method myMethod;\",\n        \"import_statement\": \"Include myScript;\",\n        \"print_statement\": \"Output('my_text');\"\n    }\n},\n{\n    \"ASN.1\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".asn\",\n            \".asn1\"\n        ],\n        \"tm_scope\": \"source.asn\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"asn.1\",\n        \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n        \"language_id\": 7,\n        \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n        \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n        \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n    }\n}\n,\n{\n    \"ASP.NET\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"text.html.asp\",\n        \"color\": \"#9400ff\",\n        \"aliases\": [\n            \"aspx\",\n            \"aspx-vb\"\n        ],\n        \"extensions\": [\n            \".asax\",\n            \".ascx\",\n            \".ashx\",\n            \".asmx\",\n            \".aspx\",\n            \".axd\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"htmlembedded\",\n        \"codemirror_mime_type\": \"application/x-aspx\",\n        \"language_id\": 564186416,\n        \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n        \"import_statement\": \"using MyNamespace;\",\n        \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n    }\n},\n{\n    \"ATS\": {\n        \"type\": \"programming\",\n        \"color\": \"#1ac620\",\n        \"aliases\": [\n            \"ats2\"\n        ],\n        \"extensions\": [\n            \".dats\",\n            \".hats\",\n            \".sats\"\n        ],\n        \"tm_scope\": \"source.ats\",\n        \"ace_mode\": \"ocaml\",\n        \"language_id\": 9,\n        \"function_def\": \"fun myFunction(): void = { ... }\",\n        \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n        \"print_statement\": \"print(\\\"my_text\\\")\"\n    }\n},\n{\n    \"ActionScript\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.actionscript.3\",\n        \"color\": \"#882B0F\",\n        \"aliases\": [\n            \"actionscript 3\",\n            \"actionscript3\",\n            \"as3\"\n        ],\n        \"extensions\": [\n            \".as\"\n        ],\n        \"ace_mode\": \"actionscript\",\n        \"language_id\": 10,\n        \"function_def\": \"function myFunction(): void { }\",\n        \"import_statement\": \"import MyPackage.*;\",\n        \"print_statement\": \"trace(\\\"my_text\\\");\"\n    }\n}\n\n]"
            }
        },
        {
            "file": {
                "File": "README.md",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/.pytest_cache/README.md",
                "Relative Path": ".pytest_cache/README.md",
                "Size": 302,
                "Last Modified": "2024-11-04 15:15:30",
                "Lines": 8,
                "Source_Code": "# pytest cache directory #\n\nThis directory contains data from the pytest's cache plugin,\nwhich provides the `--lf` and `--ff` options, as well as the `cache` fixture.\n\n**Do not** commit this to version control.\n\nSee [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.\n"
            }
        },
        {
            "file": {
                "File": "PDFBook.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_data_source/PDFBook.py",
                "Relative Path": "com_worktwins_data_source/PDFBook.py",
                "Size": 4830,
                "Last Modified": "2024-12-05 18:58:34",
                "Lines": 134,
                "Source_Code": "import os\nimport pandas as pd\nfrom collections import defaultdict\nfrom hashlib import sha256\nimport hashlib\nimport json\nfrom pygments.lexers import guess_lexer, get_lexer_by_name\nfrom pygments.util import ClassNotFound\nfrom wordfreq import word_frequency\nfrom alive_progress import alive_bar\nimport spacy\nimport json\nimport fitz  # PyMuPDF\nfrom com_worktwins_languages.Language import Language\nfrom transformers import pipeline\nfrom com_worktwins_pipe.SemanticTreePipe import SemanticTreePipe\nfrom com_worktwins_pipe.SemanticNormalizationPipe import SemanticNormalizationPipe\nfrom com_worktwins_pipe.SourceCodeExtractorPipe import SourceCodeExtractorPipe\nfrom com_worktwins_pipe.WordFrequenciesPipe import WordFrequenciesPipe\nfrom com_worktwins_pipe.ParagraphsPipe import ParagraphsPipe\n\n\n\n# Load spaCy model\nnlp = spacy.load(\"en_core_web_sm\")\n\nMIN_BOOK_FREQUENCY = 10  # Minimum frequency in the book for inclusion\nENGLISH_TOP_PERCENTILE = 0.9  # Top 10% of English frequency\nBOOK_TOP_PERCENTILE = 0.9  # Top 10% of book frequency\n\nclass PDFBook:\n    def __init__(self, pdf_path):\n        \"\"\"\n        Initialize the PDFBook class with the path to a PDF file.\n        \"\"\"\n        self.pdf_path = pdf_path\n        self.name = os.path.splitext(os.path.basename(pdf_path))[0]\n        self.output_dir = os.path.join(os.path.dirname(pdf_path), self.name)\n        os.makedirs(self.output_dir, exist_ok=True)\n\n    def extract_raw(self):\n        \"\"\"\n        Extract raw text from the PDF.\n        \"\"\"\n        if not os.path.exists(self.pdf_path):\n            raise FileNotFoundError(f\"The file {self.pdf_path} does not exist.\")\n\n        with fitz.open(self.pdf_path) as pdf:\n            text_content = []\n            total_pages = pdf.page_count\n            with alive_bar(total_pages, title=\"Extracting Raw Text\") as bar:\n                for page_num in range(total_pages):\n                    page = pdf[page_num]\n                    text = page.get_text(\"text\")\n                    text_content.append(text)\n                    bar()\n\n\n        # Write to the file\n        with open(os.path.join(self.output_dir + \"/\" + self.name + \".txt\"), \"w\", encoding=\"utf-8\") as f:\n            f.write(\"\".join(text_content))\n\n\n        return \"\\n\\n\".join(text_content)\n\n\n\n    def evaluate(self, keywords):\n        \"\"\"\n        Evaluate the book for topics matching the given keywords using the semantic tree.\n        \"\"\"\n        # Normalize and sort keywords\n        normalized_keywords = [kw.lower() for kw in keywords]\n        sorted_keywords = sorted(normalized_keywords, key=lambda kw: (\n            -self.book_frequency.get(kw, 0),  # Descending book frequency\n            self.english_frequency.get(kw, float('inf'))  # Ascending English frequency\n        ))\n\n        # Generate hash for the keyword combination\n        keyword_hash = hashlib.md5(\"\".join(sorted_keywords).encode()).hexdigest()\n\n        # Search for the hash in the semantic tree\n        semantic_tree_path = os.path.join(self.output_dir, f\"{self.name}_semantic_tree.json\")\n        if not os.path.exists(semantic_tree_path):\n            raise FileNotFoundError(\"Semantic tree file not found. Ensure to_knowledge_hooks has been run.\")\n\n        with open(semantic_tree_path, \"r\", encoding=\"utf-8\") as f:\n            semantic_tree = json.load(f)\n\n        # Find the matching topic\n        matched_topic = semantic_tree.get(keyword_hash)\n\n        # Debug information\n        print(\"[DEBUG] No match found for keywords:\", keywords)\n        print(\"[DEBUG] Normalized Keywords:\", normalized_keywords)\n        print(\"[DEBUG] Sorted Keywords:\", sorted_keywords)\n        print(\"[DEBUG] Generated Hash:\", keyword_hash)\n\n        # If no match is found, return an empty list\n        if not matched_topic:\n            return []\n\n        # Format the result\n        return [{\n            \"id\": matched_topic[\"id\"],\n            \"path\": matched_topic[\"path\"],\n            \"semantics\": matched_topic[\"semantics\"],\n            \"matched_keywords\": keywords,\n            \"relevance_score\": 1.0  # Placeholder for more complex relevance scoring\n        }]\n\n\n\n    def to_knowledge_hooks(self):\n        \"\"\"\n        Generate all knowledge hooks for the book and save the results.\n        \"\"\"\n        raw_text = self.extract_raw()\n\n\n        WordFrequenciesPipe(name=self.name,output_dir=self.output_dir).execute(input_data=raw_text)\n        SourceCodeExtractorPipe(name=self.name,output_dir=self.output_dir).execute(input_data=raw_text)\n        paragraphs = ParagraphsPipe(name=self.name,output_dir=self.output_dir).execute(input_data=raw_text)\n        \n        normalized_paragraphs = SemanticNormalizationPipe(name=self.name,output_dir=self.output_dir).execute(input_data=paragraphs)\n        SemanticTreePipe(name=self.name,output_dir=self.output_dir).execute(input_data=normalized_paragraphs)\n\n\n\n\n\n\n\n\n"
            }
        },
        {
            "file": {
                "File": "HTMLPage.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_data_source/HTMLPage.py",
                "Relative Path": "com_worktwins_data_source/HTMLPage.py",
                "Size": 4283,
                "Last Modified": "2024-11-25 17:20:48",
                "Lines": 113,
                "Source_Code": "import os\nimport subprocess\nimport requests\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin, urlparse\nimport re\nfrom urllib.parse import urlparse\nfrom urllib.parse import urlparse\n\n\nclass HTMLPage:\n\n    #initial_url = \"https://docs.python.org/3/tutorial/index.html\"\n\n    def __init__(self,initial_url) -> None:\n        self.initial_url = initial_url\n       \n        parsed_url = urlparse(initial_url)\n        self.domain = parsed_url.netloc\n\n\n    def extract_raw(self):\n\n\n        def is_valid_url(url):\n            parsed = urlparse(url)\n            return bool(parsed.netloc) and bool(parsed.scheme)\n\n        def is_web_page(url):\n            # Only allow specific web extensions\n            web_extensions = ('.html', '.htm', '.php', '/')\n            return url.endswith(web_extensions) or '?' in url\n\n        def fetch_links(url, base_domain):\n            try:\n                response = requests.get(url)\n                response.raise_for_status()\n                soup = BeautifulSoup(response.text, 'html.parser')\n                links = set()\n                for a_tag in soup.find_all('a', href=True):\n                    href = a_tag['href']\n                    full_url = urljoin(url, href)\n                    # Ensure the URL is valid, is a web page, and stays within the same domain\n                    if is_valid_url(full_url) and is_web_page(full_url) and urlparse(full_url).netloc == base_domain:\n                        links.add(full_url)\n                return links\n            except requests.RequestException as e:\n                print(f\"Error fetching {url}: {e}\")\n                return set()\n\n        def fetch_text_with_lynx(url):\n            # Check content type before fetching with lynx\n            try:\n                head_response = requests.head(url, allow_redirects=True)\n                if head_response.headers.get('Content-Type', '').startswith('text/html'):\n                    result = subprocess.run(['lynx', '-dump', url], capture_output=True, text=True, check=True)\n                    return result.stdout\n                else:\n                    print(f\"Skipping non-HTML content: {url}\")\n                    return \"\"\n            except (requests.RequestException, subprocess.CalledProcessError) as e:\n                print(f\"Error fetching text from {url}: {e}\")\n                return \"\"\n\n        def sanitize_filename(filename):\n            # Remove invalid characters for filenames\n            return re.sub(r'[\\\\/*?:\"<>|]', \"_\", filename)\n\n        def save_intermediate_text(url, text, output_dir):\n            parsed_url = urlparse(url)\n            # Create a filename based on the URL path\n            filename = f\"{parsed_url.netloc}{parsed_url.path}\".replace('/', '_').strip('_') + \".txt\"\n            filename = sanitize_filename(filename)\n            filepath = os.path.join(output_dir, filename)\n            with open(filepath, 'w', encoding='utf-8') as f:\n                f.write(text)\n            return filepath\n        \n        \n        initial_url = self.initial_url\n        base_domain = urlparse(initial_url).netloc  # Extract the base domain of the initial URL\n\n        if not is_valid_url(initial_url):\n            print(\"Invalid URL. Please enter a valid URL.\")\n            return\n\n        output_dir = \"com_worktwins_data/books_html\"\n        os.makedirs(output_dir, exist_ok=True)\n\n        visited = set()\n        to_visit = {initial_url}\n        all_text = \"\"\n\n        while to_visit:\n            current_url = to_visit.pop()\n            if current_url in visited:\n                continue\n            visited.add(current_url)\n            print(f\"Processing: {current_url}\")\n            page_text = fetch_text_with_lynx(current_url)\n            if page_text:\n                all_text += page_text + \"\\n\\n\"\n                intermediate_file = save_intermediate_text(current_url, page_text, output_dir)\n                print(f\"Saved intermediate text to {intermediate_file}\")\n            links = fetch_links(current_url, base_domain)\n            to_visit.update(links - visited)\n\n        combined_file = self.domain + '.txt'\n        with open(combined_file, 'w', encoding='utf-8') as f:\n            f.write(all_text)\n\n        print(f\"Combined text saved to {combined_file}\")\n        return all_text\n"
            }
        },
        {
            "file": {
                "File": "settings.json",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/.vscode/settings.json",
                "Relative Path": ".vscode/settings.json",
                "Size": 196,
                "Last Modified": "2024-11-25 23:05:25",
                "Lines": 8,
                "Source_Code": "{\n    \"python.testing.pytestArgs\": [\n        \"com_worktwins_test\"\n    ],\n    \"python.testing.unittestEnabled\": false,\n    \"python.testing.pytestEnabled\": true,\n    \"git.ignoreLimitWarning\": true\n}"
            }
        },
        {
            "file": {
                "File": "languages.json",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_data/languages.json",
                "Relative Path": "com_worktwins_data/languages.json",
                "Size": 245493,
                "Last Modified": "2024-11-26 19:35:35",
                "Lines": 10444,
                "Source_Code": "{\n    \"1C Enterprise\": {\n        \"type\": \"programming\",\n        \"color\": \"#814CCC\",\n        \"extensions\": [\n            \".bsl\",\n            \".os\"\n        ],\n        \"tm_scope\": \"source.bsl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 0\n    },\n    \"2-Dimensional Array\": {\n        \"type\": \"data\",\n        \"color\": \"#38761D\",\n        \"extensions\": [\n            \".2da\"\n        ],\n        \"tm_scope\": \"source.2da\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 387204628\n    },\n    \"4D\": {\n        \"type\": \"programming\",\n        \"color\": \"#004289\",\n        \"extensions\": [\n            \".4dm\"\n        ],\n        \"tm_scope\": \"source.4dm\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 577529595\n    },\n    \"ABAP\": {\n        \"type\": \"programming\",\n        \"color\": \"#E8274B\",\n        \"extensions\": [\n            \".abap\"\n        ],\n        \"tm_scope\": \"source.abap\",\n        \"ace_mode\": \"abap\",\n        \"language_id\": 1\n    },\n    \"ABAP CDS\": {\n        \"type\": \"programming\",\n        \"color\": \"#555e25\",\n        \"extensions\": [\n            \".asddls\"\n        ],\n        \"tm_scope\": \"source.abapcds\",\n        \"language_id\": 452681853,\n        \"ace_mode\": \"text\"\n    },\n    \"ABNF\": {\n        \"type\": \"data\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".abnf\"\n        ],\n        \"tm_scope\": \"source.abnf\",\n        \"language_id\": 429\n    },\n    \"AGS Script\": {\n        \"type\": \"programming\",\n        \"color\": \"#B9D9FF\",\n        \"aliases\": [\n            \"ags\"\n        ],\n        \"extensions\": [\n            \".asc\",\n            \".ash\"\n        ],\n        \"tm_scope\": \"source.c++\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"language_id\": 2\n    },\n    \"AIDL\": {\n        \"type\": \"programming\",\n        \"color\": \"#34EB6B\",\n        \"tm_scope\": \"source.aidl\",\n        \"extensions\": [\n            \".aidl\"\n        ],\n        \"ace_mode\": \"text\",\n        \"interpreters\": [\n            \"aidl\"\n        ],\n        \"language_id\": 451700185\n    },\n    \"AL\": {\n        \"type\": \"programming\",\n        \"color\": \"#3AA2B5\",\n        \"extensions\": [\n            \".al\"\n        ],\n        \"tm_scope\": \"source.al\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 658971832\n    },\n    \"AMPL\": {\n        \"type\": \"programming\",\n        \"color\": \"#E6EFBB\",\n        \"extensions\": [\n            \".ampl\",\n            \".mod\"\n        ],\n        \"tm_scope\": \"source.ampl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 3\n    },\n    \"ANTLR\": {\n        \"type\": \"programming\",\n        \"color\": \"#9DC3FF\",\n        \"extensions\": [\n            \".g4\"\n        ],\n        \"tm_scope\": \"source.antlr\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 4\n    },\n    \"API Blueprint\": {\n        \"type\": \"markup\",\n        \"color\": \"#2ACCA8\",\n        \"ace_mode\": \"markdown\",\n        \"extensions\": [\n            \".apib\"\n        ],\n        \"tm_scope\": \"text.html.markdown.source.gfm.apib\",\n        \"language_id\": 5\n    },\n    \"APL\": {\n        \"type\": \"programming\",\n        \"color\": \"#5A8164\",\n        \"extensions\": [\n            \".apl\",\n            \".dyalog\"\n        ],\n        \"interpreters\": [\n            \"apl\",\n            \"aplx\",\n            \"dyalog\"\n        ],\n        \"tm_scope\": \"source.apl\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"apl\",\n        \"codemirror_mime_type\": \"text/apl\",\n        \"language_id\": 6\n    },\n    \"ASL\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".asl\",\n            \".dsl\"\n        ],\n        \"tm_scope\": \"source.asl\",\n        \"language_id\": 124996147\n    },\n    \"ASN.1\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".asn\",\n            \".asn1\"\n        ],\n        \"tm_scope\": \"source.asn\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"asn.1\",\n        \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n        \"language_id\": 7\n    },\n    \"ASP.NET\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"text.html.asp\",\n        \"color\": \"#9400ff\",\n        \"aliases\": [\n            \"aspx\",\n            \"aspx-vb\"\n        ],\n        \"extensions\": [\n            \".asax\",\n            \".ascx\",\n            \".ashx\",\n            \".asmx\",\n            \".aspx\",\n            \".axd\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"htmlembedded\",\n        \"codemirror_mime_type\": \"application/x-aspx\",\n        \"language_id\": 564186416\n    },\n    \"ATS\": {\n        \"type\": \"programming\",\n        \"color\": \"#1ac620\",\n        \"aliases\": [\n            \"ats2\"\n        ],\n        \"extensions\": [\n            \".dats\",\n            \".hats\",\n            \".sats\"\n        ],\n        \"tm_scope\": \"source.ats\",\n        \"ace_mode\": \"ocaml\",\n        \"language_id\": 9\n    },\n    \"ActionScript\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.actionscript.3\",\n        \"color\": \"#882B0F\",\n        \"aliases\": [\n            \"actionscript 3\",\n            \"actionscript3\",\n            \"as3\"\n        ],\n        \"extensions\": [\n            \".as\"\n        ],\n        \"ace_mode\": \"actionscript\",\n        \"language_id\": 10\n    },\n    \"Ada\": {\n        \"type\": \"programming\",\n        \"color\": \"#02f88c\",\n        \"extensions\": [\n            \".adb\",\n            \".ada\",\n            \".ads\"\n        ],\n        \"aliases\": [\n            \"ada95\",\n            \"ada2005\"\n        ],\n        \"tm_scope\": \"source.ada\",\n        \"ace_mode\": \"ada\",\n        \"language_id\": 11\n    },\n    \"Adblock Filter List\": {\n        \"type\": \"data\",\n        \"color\": \"#800000\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".txt\"\n        ],\n        \"aliases\": [\n            \"ad block filters\",\n            \"ad block\",\n            \"adb\",\n            \"adblock\"\n        ],\n        \"tm_scope\": \"text.adblock\",\n        \"language_id\": 884614762\n    },\n    \"Adobe Font Metrics\": {\n        \"type\": \"data\",\n        \"color\": \"#fa0f00\",\n        \"tm_scope\": \"source.afm\",\n        \"extensions\": [\n            \".afm\"\n        ],\n        \"aliases\": [\n            \"acfm\",\n            \"adobe composite font metrics\",\n            \"adobe multiple font metrics\",\n            \"amfm\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 147198098\n    },\n    \"Agda\": {\n        \"type\": \"programming\",\n        \"color\": \"#315665\",\n        \"extensions\": [\n            \".agda\"\n        ],\n        \"tm_scope\": \"source.agda\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 12\n    },\n    \"Alloy\": {\n        \"type\": \"programming\",\n        \"color\": \"#64C800\",\n        \"extensions\": [\n            \".als\"\n        ],\n        \"tm_scope\": \"source.alloy\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 13\n    },\n    \"Alpine Abuild\": {\n        \"type\": \"programming\",\n        \"color\": \"#0D597F\",\n        \"group\": \"Shell\",\n        \"aliases\": [\n            \"abuild\",\n            \"apkbuild\"\n        ],\n        \"filenames\": [\n            \"APKBUILD\"\n        ],\n        \"tm_scope\": \"source.shell\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 14\n    },\n    \"Altium Designer\": {\n        \"type\": \"data\",\n        \"color\": \"#A89663\",\n        \"aliases\": [\n            \"altium\"\n        ],\n        \"extensions\": [\n            \".OutJob\",\n            \".PcbDoc\",\n            \".PrjPCB\",\n            \".SchDoc\"\n        ],\n        \"tm_scope\": \"source.ini\",\n        \"ace_mode\": \"ini\",\n        \"language_id\": 187772328\n    },\n    \"AngelScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#C7D7DC\",\n        \"extensions\": [\n            \".as\",\n            \".angelscript\"\n        ],\n        \"tm_scope\": \"source.angelscript\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"language_id\": 389477596\n    },\n    \"Ant Build System\": {\n        \"type\": \"data\",\n        \"color\": \"#A9157E\",\n        \"tm_scope\": \"text.xml.ant\",\n        \"filenames\": [\n            \"ant.xml\",\n            \"build.xml\"\n        ],\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"application/xml\",\n        \"language_id\": 15\n    },\n    \"Antlers\": {\n        \"type\": \"markup\",\n        \"color\": \"#ff269e\",\n        \"extensions\": [\n            \".antlers.html\",\n            \".antlers.php\",\n            \".antlers.xml\"\n        ],\n        \"tm_scope\": \"text.html.statamic\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 1067292663\n    },\n    \"ApacheConf\": {\n        \"type\": \"data\",\n        \"color\": \"#d12127\",\n        \"aliases\": [\n            \"aconf\",\n            \"apache\"\n        ],\n        \"extensions\": [\n            \".apacheconf\",\n            \".vhost\"\n        ],\n        \"filenames\": [\n            \".htaccess\",\n            \"apache2.conf\",\n            \"httpd.conf\"\n        ],\n        \"tm_scope\": \"source.apache-config\",\n        \"ace_mode\": \"apache_conf\",\n        \"language_id\": 16\n    },\n    \"Apex\": {\n        \"type\": \"programming\",\n        \"color\": \"#1797c0\",\n        \"extensions\": [\n            \".cls\",\n            \".trigger\"\n        ],\n        \"tm_scope\": \"source.apex\",\n        \"ace_mode\": \"java\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-java\",\n        \"language_id\": 17\n    },\n    \"Apollo Guidance Computer\": {\n        \"type\": \"programming\",\n        \"color\": \"#0B3D91\",\n        \"group\": \"Assembly\",\n        \"extensions\": [\n            \".agc\"\n        ],\n        \"tm_scope\": \"source.agc\",\n        \"ace_mode\": \"assembly_x86\",\n        \"language_id\": 18\n    },\n    \"AppleScript\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"osascript\"\n        ],\n        \"extensions\": [\n            \".applescript\",\n            \".scpt\"\n        ],\n        \"interpreters\": [\n            \"osascript\"\n        ],\n        \"tm_scope\": \"source.applescript\",\n        \"ace_mode\": \"applescript\",\n        \"color\": \"#101F1F\",\n        \"language_id\": 19\n    },\n    \"Arc\": {\n        \"type\": \"programming\",\n        \"color\": \"#aa2afe\",\n        \"extensions\": [\n            \".arc\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 20\n    },\n    \"AsciiDoc\": {\n        \"type\": \"prose\",\n        \"color\": \"#73a0c5\",\n        \"ace_mode\": \"asciidoc\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".asciidoc\",\n            \".adoc\",\n            \".asc\"\n        ],\n        \"tm_scope\": \"text.html.asciidoc\",\n        \"language_id\": 22\n    },\n    \"AspectJ\": {\n        \"type\": \"programming\",\n        \"color\": \"#a957b0\",\n        \"extensions\": [\n            \".aj\"\n        ],\n        \"tm_scope\": \"source.aspectj\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 23\n    },\n    \"Assembly\": {\n        \"type\": \"programming\",\n        \"color\": \"#6E4C13\",\n        \"aliases\": [\n            \"asm\",\n            \"nasm\"\n        ],\n        \"extensions\": [\n            \".asm\",\n            \".a51\",\n            \".i\",\n            \".inc\",\n            \".nas\",\n            \".nasm\"\n        ],\n        \"tm_scope\": \"source.assembly\",\n        \"ace_mode\": \"assembly_x86\",\n        \"language_id\": 24\n    },\n    \"Astro\": {\n        \"type\": \"markup\",\n        \"color\": \"#ff5a03\",\n        \"extensions\": [\n            \".astro\"\n        ],\n        \"tm_scope\": \"source.astro\",\n        \"ace_mode\": \"html\",\n        \"codemirror_mode\": \"jsx\",\n        \"codemirror_mime_type\": \"text/jsx\",\n        \"language_id\": 578209015\n    },\n    \"Asymptote\": {\n        \"type\": \"programming\",\n        \"color\": \"#ff0000\",\n        \"extensions\": [\n            \".asy\"\n        ],\n        \"interpreters\": [\n            \"asy\"\n        ],\n        \"tm_scope\": \"source.c++\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-kotlin\",\n        \"language_id\": 591605007\n    },\n    \"Augeas\": {\n        \"type\": \"programming\",\n        \"color\": \"#9CC134\",\n        \"extensions\": [\n            \".aug\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 25\n    },\n    \"AutoHotkey\": {\n        \"type\": \"programming\",\n        \"color\": \"#6594b9\",\n        \"aliases\": [\n            \"ahk\"\n        ],\n        \"extensions\": [\n            \".ahk\",\n            \".ahkl\"\n        ],\n        \"tm_scope\": \"source.ahk\",\n        \"ace_mode\": \"autohotkey\",\n        \"language_id\": 26\n    },\n    \"AutoIt\": {\n        \"type\": \"programming\",\n        \"color\": \"#1C3552\",\n        \"aliases\": [\n            \"au3\",\n            \"AutoIt3\",\n            \"AutoItScript\"\n        ],\n        \"extensions\": [\n            \".au3\"\n        ],\n        \"tm_scope\": \"source.autoit\",\n        \"ace_mode\": \"autohotkey\",\n        \"language_id\": 27\n    },\n    \"Avro IDL\": {\n        \"type\": \"data\",\n        \"color\": \"#0040FF\",\n        \"extensions\": [\n            \".avdl\"\n        ],\n        \"tm_scope\": \"source.avro\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 785497837\n    },\n    \"Awk\": {\n        \"type\": \"programming\",\n        \"color\": \"#c30e9b\",\n        \"extensions\": [\n            \".awk\",\n            \".auk\",\n            \".gawk\",\n            \".mawk\",\n            \".nawk\"\n        ],\n        \"interpreters\": [\n            \"awk\",\n            \"gawk\",\n            \"mawk\",\n            \"nawk\"\n        ],\n        \"tm_scope\": \"source.awk\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 28\n    },\n    \"B4X\": {\n        \"type\": \"programming\",\n        \"color\": \"#00e4ff\",\n        \"extensions\": [\n            \".bas\"\n        ],\n        \"tm_scope\": \"source.vba\",\n        \"aliases\": [\n            \"basic for android\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"vb\",\n        \"codemirror_mime_type\": \"text/x-vb\",\n        \"language_id\": 96642275\n    },\n    \"BASIC\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".bas\"\n        ],\n        \"tm_scope\": \"source.basic\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#ff0000\",\n        \"language_id\": 28923963\n    },\n    \"BQN\": {\n        \"type\": \"programming\",\n        \"color\": \"#2b7067\",\n        \"extensions\": [\n            \".bqn\"\n        ],\n        \"tm_scope\": \"source.bqn\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 330386870\n    },\n    \"Ballerina\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".bal\"\n        ],\n        \"tm_scope\": \"source.ballerina\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#FF5000\",\n        \"language_id\": 720859680\n    },\n    \"Batchfile\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"bat\",\n            \"batch\",\n            \"dosbatch\",\n            \"winbatch\"\n        ],\n        \"extensions\": [\n            \".bat\",\n            \".cmd\"\n        ],\n        \"tm_scope\": \"source.batchfile\",\n        \"ace_mode\": \"batchfile\",\n        \"color\": \"#C1F12E\",\n        \"language_id\": 29\n    },\n    \"Beef\": {\n        \"type\": \"programming\",\n        \"color\": \"#a52f4e\",\n        \"extensions\": [\n            \".bf\"\n        ],\n        \"tm_scope\": \"source.cs\",\n        \"ace_mode\": \"csharp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csharp\",\n        \"language_id\": 545626333\n    },\n    \"Befunge\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".befunge\",\n            \".bf\"\n        ],\n        \"tm_scope\": \"source.befunge\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 30\n    },\n    \"Berry\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".be\"\n        ],\n        \"tm_scope\": \"source.berry\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#15A13C\",\n        \"aliases\": [\n            \"be\"\n        ],\n        \"language_id\": 121855308\n    },\n    \"BibTeX\": {\n        \"type\": \"markup\",\n        \"color\": \"#778899\",\n        \"group\": \"TeX\",\n        \"extensions\": [\n            \".bib\",\n            \".bibtex\"\n        ],\n        \"tm_scope\": \"text.bibtex\",\n        \"ace_mode\": \"tex\",\n        \"codemirror_mode\": \"stex\",\n        \"codemirror_mime_type\": \"text/x-stex\",\n        \"language_id\": 982188347\n    },\n    \"Bicep\": {\n        \"type\": \"programming\",\n        \"color\": \"#519aba\",\n        \"extensions\": [\n            \".bicep\",\n            \".bicepparam\"\n        ],\n        \"tm_scope\": \"source.bicep\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 321200902\n    },\n    \"Bikeshed\": {\n        \"type\": \"markup\",\n        \"color\": \"#5562ac\",\n        \"extensions\": [\n            \".bs\"\n        ],\n        \"tm_scope\": \"source.csswg\",\n        \"ace_mode\": \"html\",\n        \"codemirror_mode\": \"htmlmixed\",\n        \"codemirror_mime_type\": \"text/html\",\n        \"language_id\": 1055528081\n    },\n    \"Bison\": {\n        \"type\": \"programming\",\n        \"color\": \"#6A463F\",\n        \"group\": \"Yacc\",\n        \"tm_scope\": \"source.yacc\",\n        \"extensions\": [\n            \".bison\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 31\n    },\n    \"BitBake\": {\n        \"type\": \"programming\",\n        \"color\": \"#00bce4\",\n        \"tm_scope\": \"source.bb\",\n        \"extensions\": [\n            \".bb\",\n            \".bbappend\",\n            \".bbclass\",\n            \".inc\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 32\n    },\n    \"Blade\": {\n        \"type\": \"markup\",\n        \"color\": \"#f7523f\",\n        \"extensions\": [\n            \".blade\",\n            \".blade.php\"\n        ],\n        \"tm_scope\": \"text.html.php.blade\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 33\n    },\n    \"BlitzBasic\": {\n        \"type\": \"programming\",\n        \"color\": \"#00FFAE\",\n        \"aliases\": [\n            \"b3d\",\n            \"blitz3d\",\n            \"blitzplus\",\n            \"bplus\"\n        ],\n        \"extensions\": [\n            \".bb\",\n            \".decls\"\n        ],\n        \"tm_scope\": \"source.blitzmax\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 34\n    },\n    \"BlitzMax\": {\n        \"type\": \"programming\",\n        \"color\": \"#cd6400\",\n        \"extensions\": [\n            \".bmx\"\n        ],\n        \"aliases\": [\n            \"bmax\"\n        ],\n        \"tm_scope\": \"source.blitzmax\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 35\n    },\n    \"Bluespec\": {\n        \"type\": \"programming\",\n        \"color\": \"#12223c\",\n        \"extensions\": [\n            \".bsv\"\n        ],\n        \"aliases\": [\n            \"bluespec bsv\",\n            \"bsv\"\n        ],\n        \"tm_scope\": \"source.bsv\",\n        \"ace_mode\": \"verilog\",\n        \"codemirror_mode\": \"verilog\",\n        \"codemirror_mime_type\": \"text/x-systemverilog\",\n        \"language_id\": 36\n    },\n    \"Bluespec BH\": {\n        \"type\": \"programming\",\n        \"group\": \"Bluespec\",\n        \"color\": \"#12223c\",\n        \"extensions\": [\n            \".bs\"\n        ],\n        \"aliases\": [\n            \"bh\",\n            \"bluespec classic\"\n        ],\n        \"tm_scope\": \"source.bh\",\n        \"ace_mode\": \"haskell\",\n        \"codemirror_mode\": \"haskell\",\n        \"codemirror_mime_type\": \"text/x-haskell\",\n        \"language_id\": 641580358\n    },\n    \"Boo\": {\n        \"type\": \"programming\",\n        \"color\": \"#d4bec1\",\n        \"extensions\": [\n            \".boo\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.boo\",\n        \"language_id\": 37\n    },\n    \"Boogie\": {\n        \"type\": \"programming\",\n        \"color\": \"#c80fa0\",\n        \"extensions\": [\n            \".bpl\"\n        ],\n        \"interpreters\": [\n            \"boogie\"\n        ],\n        \"tm_scope\": \"source.boogie\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 955017407\n    },\n    \"Brainfuck\": {\n        \"type\": \"programming\",\n        \"color\": \"#2F2530\",\n        \"extensions\": [\n            \".b\",\n            \".bf\"\n        ],\n        \"tm_scope\": \"source.bf\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"brainfuck\",\n        \"codemirror_mime_type\": \"text/x-brainfuck\",\n        \"language_id\": 38\n    },\n    \"BrighterScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#66AABB\",\n        \"extensions\": [\n            \".bs\"\n        ],\n        \"tm_scope\": \"source.brs\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 943571030\n    },\n    \"Brightscript\": {\n        \"type\": \"programming\",\n        \"color\": \"#662D91\",\n        \"extensions\": [\n            \".brs\"\n        ],\n        \"tm_scope\": \"source.brs\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 39\n    },\n    \"Browserslist\": {\n        \"type\": \"data\",\n        \"color\": \"#ffd539\",\n        \"filenames\": [\n            \".browserslistrc\",\n            \"browserslist\"\n        ],\n        \"tm_scope\": \"text.browserslist\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 153503348\n    },\n    \"C\": {\n        \"type\": \"programming\",\n        \"color\": \"#555555\",\n        \"extensions\": [\n            \".c\",\n            \".cats\",\n            \".h\",\n            \".idc\"\n        ],\n        \"interpreters\": [\n            \"tcc\"\n        ],\n        \"tm_scope\": \"source.c\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"language_id\": 41\n    },\n    \"C#\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"csharp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csharp\",\n        \"tm_scope\": \"source.cs\",\n        \"color\": \"#178600\",\n        \"aliases\": [\n            \"csharp\",\n            \"cake\",\n            \"cakescript\"\n        ],\n        \"extensions\": [\n            \".cs\",\n            \".cake\",\n            \".cs.pp\",\n            \".csx\",\n            \".linq\"\n        ],\n        \"language_id\": 42\n    },\n    \"C++\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.c++\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"color\": \"#f34b7d\",\n        \"aliases\": [\n            \"cpp\"\n        ],\n        \"extensions\": [\n            \".cpp\",\n            \".c++\",\n            \".cc\",\n            \".cp\",\n            \".cppm\",\n            \".cxx\",\n            \".h\",\n            \".h++\",\n            \".hh\",\n            \".hpp\",\n            \".hxx\",\n            \".inc\",\n            \".inl\",\n            \".ino\",\n            \".ipp\",\n            \".ixx\",\n            \".re\",\n            \".tcc\",\n            \".tpp\",\n            \".txx\"\n        ],\n        \"language_id\": 43\n    },\n    \"C-ObjDump\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".c-objdump\"\n        ],\n        \"tm_scope\": \"objdump.x86asm\",\n        \"ace_mode\": \"assembly_x86\",\n        \"language_id\": 44\n    },\n    \"C2hs Haskell\": {\n        \"type\": \"programming\",\n        \"group\": \"Haskell\",\n        \"aliases\": [\n            \"c2hs\"\n        ],\n        \"extensions\": [\n            \".chs\"\n        ],\n        \"tm_scope\": \"source.haskell\",\n        \"ace_mode\": \"haskell\",\n        \"codemirror_mode\": \"haskell\",\n        \"codemirror_mime_type\": \"text/x-haskell\",\n        \"language_id\": 45\n    },\n    \"CAP CDS\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.cds\",\n        \"color\": \"#0092d1\",\n        \"aliases\": [\n            \"cds\"\n        ],\n        \"extensions\": [\n            \".cds\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 390788699\n    },\n    \"CIL\": {\n        \"type\": \"data\",\n        \"tm_scope\": \"source.cil\",\n        \"extensions\": [\n            \".cil\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 29176339\n    },\n    \"CLIPS\": {\n        \"type\": \"programming\",\n        \"color\": \"#00A300\",\n        \"extensions\": [\n            \".clp\"\n        ],\n        \"tm_scope\": \"source.clips\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 46\n    },\n    \"CMake\": {\n        \"type\": \"programming\",\n        \"color\": \"#DA3434\",\n        \"extensions\": [\n            \".cmake\",\n            \".cmake.in\"\n        ],\n        \"filenames\": [\n            \"CMakeLists.txt\"\n        ],\n        \"tm_scope\": \"source.cmake\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"cmake\",\n        \"codemirror_mime_type\": \"text/x-cmake\",\n        \"language_id\": 47\n    },\n    \"COBOL\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".cob\",\n            \".cbl\",\n            \".ccp\",\n            \".cobol\",\n            \".cpy\"\n        ],\n        \"tm_scope\": \"source.cobol\",\n        \"ace_mode\": \"cobol\",\n        \"codemirror_mode\": \"cobol\",\n        \"codemirror_mime_type\": \"text/x-cobol\",\n        \"language_id\": 48\n    },\n    \"CODEOWNERS\": {\n        \"type\": \"data\",\n        \"filenames\": [\n            \"CODEOWNERS\"\n        ],\n        \"tm_scope\": \"text.codeowners\",\n        \"ace_mode\": \"gitignore\",\n        \"language_id\": 321684729\n    },\n    \"COLLADA\": {\n        \"type\": \"data\",\n        \"color\": \"#F1A42B\",\n        \"extensions\": [\n            \".dae\"\n        ],\n        \"tm_scope\": \"text.xml\",\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"language_id\": 49\n    },\n    \"CSON\": {\n        \"type\": \"data\",\n        \"color\": \"#244776\",\n        \"tm_scope\": \"source.coffee\",\n        \"ace_mode\": \"coffee\",\n        \"codemirror_mode\": \"coffeescript\",\n        \"codemirror_mime_type\": \"text/x-coffeescript\",\n        \"extensions\": [\n            \".cson\"\n        ],\n        \"language_id\": 424\n    },\n    \"CSS\": {\n        \"type\": \"markup\",\n        \"tm_scope\": \"source.css\",\n        \"ace_mode\": \"css\",\n        \"codemirror_mode\": \"css\",\n        \"codemirror_mime_type\": \"text/css\",\n        \"color\": \"#563d7c\",\n        \"extensions\": [\n            \".css\"\n        ],\n        \"language_id\": 50\n    },\n    \"CSV\": {\n        \"type\": \"data\",\n        \"color\": \"#237346\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"none\",\n        \"extensions\": [\n            \".csv\"\n        ],\n        \"language_id\": 51\n    },\n    \"CUE\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".cue\"\n        ],\n        \"tm_scope\": \"source.cue\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#5886E1\",\n        \"language_id\": 356063509\n    },\n    \"CWeb\": {\n        \"type\": \"programming\",\n        \"color\": \"#00007a\",\n        \"extensions\": [\n            \".w\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 657332628\n    },\n    \"Cabal Config\": {\n        \"type\": \"data\",\n        \"color\": \"#483465\",\n        \"aliases\": [\n            \"Cabal\"\n        ],\n        \"extensions\": [\n            \".cabal\"\n        ],\n        \"filenames\": [\n            \"cabal.config\",\n            \"cabal.project\"\n        ],\n        \"ace_mode\": \"haskell\",\n        \"codemirror_mode\": \"haskell\",\n        \"codemirror_mime_type\": \"text/x-haskell\",\n        \"tm_scope\": \"source.cabal\",\n        \"language_id\": 677095381\n    },\n    \"Caddyfile\": {\n        \"type\": \"data\",\n        \"color\": \"#22b638\",\n        \"aliases\": [\n            \"Caddy\"\n        ],\n        \"extensions\": [\n            \".caddyfile\"\n        ],\n        \"filenames\": [\n            \"Caddyfile\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.Caddyfile\",\n        \"language_id\": 615465151\n    },\n    \"Cadence\": {\n        \"type\": \"programming\",\n        \"color\": \"#00ef8b\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.cadence\",\n        \"extensions\": [\n            \".cdc\"\n        ],\n        \"language_id\": 270184138\n    },\n    \"Cairo\": {\n        \"type\": \"programming\",\n        \"color\": \"#ff4a48\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.cairo\",\n        \"extensions\": [\n            \".cairo\"\n        ],\n        \"group\": \"Cairo\",\n        \"language_id\": 620599567\n    },\n    \"Cairo Zero\": {\n        \"type\": \"programming\",\n        \"color\": \"#ff4a48\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.cairo0\",\n        \"extensions\": [\n            \".cairo\"\n        ],\n        \"group\": \"Cairo\",\n        \"language_id\": 891399890\n    },\n    \"CameLIGO\": {\n        \"type\": \"programming\",\n        \"color\": \"#3be133\",\n        \"extensions\": [\n            \".mligo\"\n        ],\n        \"tm_scope\": \"source.mligo\",\n        \"ace_mode\": \"ocaml\",\n        \"codemirror_mode\": \"mllike\",\n        \"codemirror_mime_type\": \"text/x-ocaml\",\n        \"group\": \"LigoLANG\",\n        \"language_id\": 829207807\n    },\n    \"Cap'n Proto\": {\n        \"type\": \"programming\",\n        \"color\": \"#c42727\",\n        \"tm_scope\": \"source.capnp\",\n        \"extensions\": [\n            \".capnp\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 52\n    },\n    \"Carbon\": {\n        \"type\": \"programming\",\n        \"color\": \"#222222\",\n        \"extensions\": [\n            \".carbon\"\n        ],\n        \"ace_mode\": \"golang\",\n        \"codemirror_mode\": \"go\",\n        \"codemirror_mime_type\": \"text/x-go\",\n        \"tm_scope\": \"source.v\",\n        \"language_id\": 55627273\n    },\n    \"CartoCSS\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"Carto\"\n        ],\n        \"extensions\": [\n            \".mss\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.css.mss\",\n        \"language_id\": 53\n    },\n    \"Ceylon\": {\n        \"type\": \"programming\",\n        \"color\": \"#dfa535\",\n        \"extensions\": [\n            \".ceylon\"\n        ],\n        \"tm_scope\": \"source.ceylon\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 54\n    },\n    \"Chapel\": {\n        \"type\": \"programming\",\n        \"color\": \"#8dc63f\",\n        \"aliases\": [\n            \"chpl\"\n        ],\n        \"extensions\": [\n            \".chpl\"\n        ],\n        \"tm_scope\": \"source.chapel\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 55\n    },\n    \"Charity\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".ch\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 56\n    },\n    \"Checksums\": {\n        \"type\": \"data\",\n        \"tm_scope\": \"text.checksums\",\n        \"aliases\": [\n            \"checksum\",\n            \"hash\",\n            \"hashes\",\n            \"sum\",\n            \"sums\"\n        ],\n        \"filenames\": [\n            \"MD5SUMS\",\n            \"SHA1SUMS\",\n            \"SHA256SUMS\",\n            \"SHA256SUMS.txt\",\n            \"SHA512SUMS\",\n            \"checksums.txt\",\n            \"cksums\",\n            \"md5sum.txt\"\n        ],\n        \"extensions\": [\n            \".crc32\",\n            \".md2\",\n            \".md4\",\n            \".md5\",\n            \".sha1\",\n            \".sha2\",\n            \".sha224\",\n            \".sha256\",\n            \".sha256sum\",\n            \".sha3\",\n            \".sha384\",\n            \".sha512\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 372063053\n    },\n    \"ChucK\": {\n        \"type\": \"programming\",\n        \"color\": \"#3f8000\",\n        \"extensions\": [\n            \".ck\"\n        ],\n        \"tm_scope\": \"source.java\",\n        \"ace_mode\": \"java\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-java\",\n        \"language_id\": 57\n    },\n    \"Circom\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".circom\"\n        ],\n        \"color\": \"#707575\",\n        \"tm_scope\": \"source.circom\",\n        \"language_id\": 1042332086\n    },\n    \"Cirru\": {\n        \"type\": \"programming\",\n        \"color\": \"#ccccff\",\n        \"tm_scope\": \"source.cirru\",\n        \"ace_mode\": \"cirru\",\n        \"extensions\": [\n            \".cirru\"\n        ],\n        \"language_id\": 58\n    },\n    \"Clarion\": {\n        \"type\": \"programming\",\n        \"color\": \"#db901e\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".clw\"\n        ],\n        \"tm_scope\": \"source.clarion\",\n        \"language_id\": 59\n    },\n    \"Clarity\": {\n        \"type\": \"programming\",\n        \"color\": \"#5546ff\",\n        \"ace_mode\": \"lisp\",\n        \"extensions\": [\n            \".clar\"\n        ],\n        \"tm_scope\": \"source.clar\",\n        \"language_id\": 91493841\n    },\n    \"Classic ASP\": {\n        \"type\": \"programming\",\n        \"color\": \"#6a40fd\",\n        \"tm_scope\": \"text.html.asp\",\n        \"aliases\": [\n            \"asp\"\n        ],\n        \"extensions\": [\n            \".asp\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 8\n    },\n    \"Clean\": {\n        \"type\": \"programming\",\n        \"color\": \"#3F85AF\",\n        \"extensions\": [\n            \".icl\",\n            \".dcl\"\n        ],\n        \"tm_scope\": \"source.clean\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 60\n    },\n    \"Click\": {\n        \"type\": \"programming\",\n        \"color\": \"#E4E6F3\",\n        \"extensions\": [\n            \".click\"\n        ],\n        \"tm_scope\": \"source.click\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 61\n    },\n    \"Clojure\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.clojure\",\n        \"ace_mode\": \"clojure\",\n        \"codemirror_mode\": \"clojure\",\n        \"codemirror_mime_type\": \"text/x-clojure\",\n        \"color\": \"#db5855\",\n        \"extensions\": [\n            \".clj\",\n            \".bb\",\n            \".boot\",\n            \".cl2\",\n            \".cljc\",\n            \".cljs\",\n            \".cljs.hl\",\n            \".cljscm\",\n            \".cljx\",\n            \".hic\"\n        ],\n        \"filenames\": [\n            \"riemann.config\"\n        ],\n        \"interpreters\": [\n            \"bb\"\n        ],\n        \"language_id\": 62\n    },\n    \"Closure Templates\": {\n        \"type\": \"markup\",\n        \"color\": \"#0d948f\",\n        \"ace_mode\": \"soy_template\",\n        \"codemirror_mode\": \"soy\",\n        \"codemirror_mime_type\": \"text/x-soy\",\n        \"aliases\": [\n            \"soy\"\n        ],\n        \"extensions\": [\n            \".soy\"\n        ],\n        \"tm_scope\": \"text.html.soy\",\n        \"language_id\": 357046146\n    },\n    \"Cloud Firestore Security Rules\": {\n        \"type\": \"data\",\n        \"color\": \"#FFA000\",\n        \"ace_mode\": \"less\",\n        \"codemirror_mode\": \"css\",\n        \"codemirror_mime_type\": \"text/css\",\n        \"tm_scope\": \"source.firestore\",\n        \"filenames\": [\n            \"firestore.rules\"\n        ],\n        \"language_id\": 407996372\n    },\n    \"CoNLL-U\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".conllu\",\n            \".conll\"\n        ],\n        \"tm_scope\": \"text.conllu\",\n        \"ace_mode\": \"text\",\n        \"aliases\": [\n            \"CoNLL\",\n            \"CoNLL-X\"\n        ],\n        \"language_id\": 421026389\n    },\n    \"CodeQL\": {\n        \"type\": \"programming\",\n        \"color\": \"#140f46\",\n        \"extensions\": [\n            \".ql\",\n            \".qll\"\n        ],\n        \"tm_scope\": \"source.ql\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 424259634,\n        \"aliases\": [\n            \"ql\"\n        ]\n    },\n    \"CoffeeScript\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.coffee\",\n        \"ace_mode\": \"coffee\",\n        \"codemirror_mode\": \"coffeescript\",\n        \"codemirror_mime_type\": \"text/x-coffeescript\",\n        \"color\": \"#244776\",\n        \"aliases\": [\n            \"coffee\",\n            \"coffee-script\"\n        ],\n        \"extensions\": [\n            \".coffee\",\n            \"._coffee\",\n            \".cake\",\n            \".cjsx\",\n            \".iced\"\n        ],\n        \"filenames\": [\n            \"Cakefile\"\n        ],\n        \"interpreters\": [\n            \"coffee\"\n        ],\n        \"language_id\": 63\n    },\n    \"ColdFusion\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"coldfusion\",\n        \"color\": \"#ed2cd6\",\n        \"aliases\": [\n            \"cfm\",\n            \"cfml\",\n            \"coldfusion html\"\n        ],\n        \"extensions\": [\n            \".cfm\",\n            \".cfml\"\n        ],\n        \"tm_scope\": \"text.html.cfm\",\n        \"language_id\": 64\n    },\n    \"ColdFusion CFC\": {\n        \"type\": \"programming\",\n        \"color\": \"#ed2cd6\",\n        \"group\": \"ColdFusion\",\n        \"ace_mode\": \"coldfusion\",\n        \"aliases\": [\n            \"cfc\"\n        ],\n        \"extensions\": [\n            \".cfc\"\n        ],\n        \"tm_scope\": \"source.cfscript\",\n        \"language_id\": 65\n    },\n    \"Common Lisp\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.commonlisp\",\n        \"color\": \"#3fb68b\",\n        \"aliases\": [\n            \"lisp\"\n        ],\n        \"extensions\": [\n            \".lisp\",\n            \".asd\",\n            \".cl\",\n            \".l\",\n            \".lsp\",\n            \".ny\",\n            \".podsl\",\n            \".sexp\"\n        ],\n        \"interpreters\": [\n            \"lisp\",\n            \"sbcl\",\n            \"ccl\",\n            \"clisp\",\n            \"ecl\"\n        ],\n        \"ace_mode\": \"lisp\",\n        \"codemirror_mode\": \"commonlisp\",\n        \"codemirror_mime_type\": \"text/x-common-lisp\",\n        \"language_id\": 66\n    },\n    \"Common Workflow Language\": {\n        \"aliases\": [\n            \"cwl\"\n        ],\n        \"type\": \"programming\",\n        \"ace_mode\": \"yaml\",\n        \"codemirror_mode\": \"yaml\",\n        \"codemirror_mime_type\": \"text/x-yaml\",\n        \"extensions\": [\n            \".cwl\"\n        ],\n        \"interpreters\": [\n            \"cwl-runner\"\n        ],\n        \"color\": \"#B5314C\",\n        \"tm_scope\": \"source.cwl\",\n        \"language_id\": 988547172\n    },\n    \"Component Pascal\": {\n        \"type\": \"programming\",\n        \"color\": \"#B0CE4E\",\n        \"extensions\": [\n            \".cp\",\n            \".cps\"\n        ],\n        \"tm_scope\": \"source.pascal\",\n        \"ace_mode\": \"pascal\",\n        \"codemirror_mode\": \"pascal\",\n        \"codemirror_mime_type\": \"text/x-pascal\",\n        \"language_id\": 67\n    },\n    \"Cool\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".cl\"\n        ],\n        \"tm_scope\": \"source.cool\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 68\n    },\n    \"Coq\": {\n        \"type\": \"programming\",\n        \"color\": \"#d0b68c\",\n        \"extensions\": [\n            \".coq\",\n            \".v\"\n        ],\n        \"tm_scope\": \"source.coq\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 69\n    },\n    \"Cpp-ObjDump\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".cppobjdump\",\n            \".c++-objdump\",\n            \".c++objdump\",\n            \".cpp-objdump\",\n            \".cxx-objdump\"\n        ],\n        \"tm_scope\": \"objdump.x86asm\",\n        \"aliases\": [\n            \"c++-objdump\"\n        ],\n        \"ace_mode\": \"assembly_x86\",\n        \"language_id\": 70\n    },\n    \"Creole\": {\n        \"type\": \"prose\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".creole\"\n        ],\n        \"tm_scope\": \"text.html.creole\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 71\n    },\n    \"Crystal\": {\n        \"type\": \"programming\",\n        \"color\": \"#000100\",\n        \"extensions\": [\n            \".cr\"\n        ],\n        \"ace_mode\": \"ruby\",\n        \"codemirror_mode\": \"crystal\",\n        \"codemirror_mime_type\": \"text/x-crystal\",\n        \"tm_scope\": \"source.crystal\",\n        \"interpreters\": [\n            \"crystal\"\n        ],\n        \"language_id\": 72\n    },\n    \"Csound\": {\n        \"type\": \"programming\",\n        \"color\": \"#1a1a1a\",\n        \"aliases\": [\n            \"csound-orc\"\n        ],\n        \"extensions\": [\n            \".orc\",\n            \".udo\"\n        ],\n        \"tm_scope\": \"source.csound\",\n        \"ace_mode\": \"csound_orchestra\",\n        \"language_id\": 73\n    },\n    \"Csound Document\": {\n        \"type\": \"programming\",\n        \"color\": \"#1a1a1a\",\n        \"aliases\": [\n            \"csound-csd\"\n        ],\n        \"extensions\": [\n            \".csd\"\n        ],\n        \"tm_scope\": \"source.csound-document\",\n        \"ace_mode\": \"csound_document\",\n        \"language_id\": 74\n    },\n    \"Csound Score\": {\n        \"type\": \"programming\",\n        \"color\": \"#1a1a1a\",\n        \"aliases\": [\n            \"csound-sco\"\n        ],\n        \"extensions\": [\n            \".sco\"\n        ],\n        \"tm_scope\": \"source.csound-score\",\n        \"ace_mode\": \"csound_score\",\n        \"language_id\": 75\n    },\n    \"Cuda\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".cu\",\n            \".cuh\"\n        ],\n        \"tm_scope\": \"source.cuda-c++\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"color\": \"#3A4E3A\",\n        \"language_id\": 77\n    },\n    \"Cue Sheet\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".cue\"\n        ],\n        \"tm_scope\": \"source.cuesheet\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 942714150\n    },\n    \"Curry\": {\n        \"type\": \"programming\",\n        \"color\": \"#531242\",\n        \"extensions\": [\n            \".curry\"\n        ],\n        \"tm_scope\": \"source.curry\",\n        \"ace_mode\": \"haskell\",\n        \"language_id\": 439829048\n    },\n    \"Cycript\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".cy\"\n        ],\n        \"tm_scope\": \"source.js\",\n        \"ace_mode\": \"javascript\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"text/javascript\",\n        \"language_id\": 78\n    },\n    \"Cylc\": {\n        \"type\": \"data\",\n        \"color\": \"#00b3fd\",\n        \"extensions\": [\n            \".cylc\"\n        ],\n        \"filenames\": [\n            \"suite.rc\"\n        ],\n        \"tm_scope\": \"source.cylc\",\n        \"ace_mode\": \"ini\",\n        \"group\": \"INI\",\n        \"language_id\": 476447814\n    },\n    \"Cypher\": {\n        \"type\": \"programming\",\n        \"color\": \"#34c0eb\",\n        \"extensions\": [\n            \".cyp\",\n            \".cypher\"\n        ],\n        \"tm_scope\": \"source.cypher\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 850806976\n    },\n    \"Cython\": {\n        \"type\": \"programming\",\n        \"color\": \"#fedf5b\",\n        \"extensions\": [\n            \".pyx\",\n            \".pxd\",\n            \".pxi\"\n        ],\n        \"aliases\": [\n            \"pyrex\"\n        ],\n        \"tm_scope\": \"source.cython\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"python\",\n        \"codemirror_mime_type\": \"text/x-cython\",\n        \"language_id\": 79\n    },\n    \"D\": {\n        \"type\": \"programming\",\n        \"color\": \"#ba595e\",\n        \"aliases\": [\n            \"Dlang\"\n        ],\n        \"extensions\": [\n            \".d\",\n            \".di\"\n        ],\n        \"tm_scope\": \"source.d\",\n        \"ace_mode\": \"d\",\n        \"codemirror_mode\": \"d\",\n        \"codemirror_mime_type\": \"text/x-d\",\n        \"language_id\": 80\n    },\n    \"D-ObjDump\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".d-objdump\"\n        ],\n        \"tm_scope\": \"objdump.x86asm\",\n        \"ace_mode\": \"assembly_x86\",\n        \"language_id\": 81\n    },\n    \"D2\": {\n        \"type\": \"markup\",\n        \"color\": \"#526ee8\",\n        \"extensions\": [\n            \".d2\"\n        ],\n        \"aliases\": [\n            \"d2lang\"\n        ],\n        \"tm_scope\": \"source.d2\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 37531557\n    },\n    \"DIGITAL Command Language\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"dcl\"\n        ],\n        \"extensions\": [\n            \".com\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 82\n    },\n    \"DM\": {\n        \"type\": \"programming\",\n        \"color\": \"#447265\",\n        \"extensions\": [\n            \".dm\"\n        ],\n        \"aliases\": [\n            \"byond\"\n        ],\n        \"tm_scope\": \"source.dm\",\n        \"ace_mode\": \"c_cpp\",\n        \"language_id\": 83\n    },\n    \"DNS Zone\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".zone\",\n            \".arpa\"\n        ],\n        \"tm_scope\": \"text.zone_file\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 84\n    },\n    \"DTrace\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"dtrace-script\"\n        ],\n        \"extensions\": [\n            \".d\"\n        ],\n        \"interpreters\": [\n            \"dtrace\"\n        ],\n        \"tm_scope\": \"source.c\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"language_id\": 85\n    },\n    \"Dafny\": {\n        \"type\": \"programming\",\n        \"color\": \"#FFEC25\",\n        \"extensions\": [\n            \".dfy\"\n        ],\n        \"interpreters\": [\n            \"dafny\"\n        ],\n        \"tm_scope\": \"text.dfy.dafny\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 969323346\n    },\n    \"Darcs Patch\": {\n        \"type\": \"data\",\n        \"color\": \"#8eff23\",\n        \"aliases\": [\n            \"dpatch\"\n        ],\n        \"extensions\": [\n            \".darcspatch\",\n            \".dpatch\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 86\n    },\n    \"Dart\": {\n        \"type\": \"programming\",\n        \"color\": \"#00B4AB\",\n        \"extensions\": [\n            \".dart\"\n        ],\n        \"interpreters\": [\n            \"dart\"\n        ],\n        \"tm_scope\": \"source.dart\",\n        \"ace_mode\": \"dart\",\n        \"codemirror_mode\": \"dart\",\n        \"codemirror_mime_type\": \"application/dart\",\n        \"language_id\": 87\n    },\n    \"DataWeave\": {\n        \"type\": \"programming\",\n        \"color\": \"#003a52\",\n        \"extensions\": [\n            \".dwl\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.data-weave\",\n        \"language_id\": 974514097\n    },\n    \"Debian Package Control File\": {\n        \"type\": \"data\",\n        \"color\": \"#D70751\",\n        \"extensions\": [\n            \".dsc\"\n        ],\n        \"tm_scope\": \"source.deb-control\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 527438264\n    },\n    \"DenizenScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#FBEE96\",\n        \"ace_mode\": \"yaml\",\n        \"codemirror_mode\": \"yaml\",\n        \"codemirror_mime_type\": \"text/x-yaml\",\n        \"extensions\": [\n            \".dsc\"\n        ],\n        \"tm_scope\": \"source.denizenscript\",\n        \"language_id\": 435000929\n    },\n    \"Dhall\": {\n        \"type\": \"programming\",\n        \"color\": \"#dfafff\",\n        \"extensions\": [\n            \".dhall\"\n        ],\n        \"tm_scope\": \"source.haskell\",\n        \"ace_mode\": \"haskell\",\n        \"codemirror_mode\": \"haskell\",\n        \"codemirror_mime_type\": \"text/x-haskell\",\n        \"language_id\": 793969321\n    },\n    \"Diff\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".diff\",\n            \".patch\"\n        ],\n        \"aliases\": [\n            \"udiff\"\n        ],\n        \"tm_scope\": \"source.diff\",\n        \"ace_mode\": \"diff\",\n        \"codemirror_mode\": \"diff\",\n        \"codemirror_mime_type\": \"text/x-diff\",\n        \"language_id\": 88\n    },\n    \"DirectX 3D File\": {\n        \"type\": \"data\",\n        \"color\": \"#aace60\",\n        \"extensions\": [\n            \".x\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"none\",\n        \"language_id\": 201049282\n    },\n    \"Dockerfile\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"Containerfile\"\n        ],\n        \"color\": \"#384d54\",\n        \"tm_scope\": \"source.dockerfile\",\n        \"extensions\": [\n            \".dockerfile\"\n        ],\n        \"filenames\": [\n            \"Containerfile\",\n            \"Dockerfile\"\n        ],\n        \"ace_mode\": \"dockerfile\",\n        \"codemirror_mode\": \"dockerfile\",\n        \"codemirror_mime_type\": \"text/x-dockerfile\",\n        \"language_id\": 89\n    },\n    \"Dogescript\": {\n        \"type\": \"programming\",\n        \"color\": \"#cca760\",\n        \"extensions\": [\n            \".djs\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 90\n    },\n    \"Dotenv\": {\n        \"type\": \"data\",\n        \"color\": \"#e5d559\",\n        \"extensions\": [\n            \".env\"\n        ],\n        \"filenames\": [\n            \".env\",\n            \".env.ci\",\n            \".env.dev\",\n            \".env.development\",\n            \".env.development.local\",\n            \".env.example\",\n            \".env.local\",\n            \".env.prod\",\n            \".env.production\",\n            \".env.sample\",\n            \".env.staging\",\n            \".env.test\",\n            \".env.testing\"\n        ],\n        \"tm_scope\": \"source.dotenv\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 111148035\n    },\n    \"Dune\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"lisp\",\n        \"filenames\": [\n            \"dune-project\"\n        ],\n        \"tm_scope\": \"source.dune\",\n        \"color\": \"#89421e\",\n        \"language_id\": 754574151\n    },\n    \"Dylan\": {\n        \"type\": \"programming\",\n        \"color\": \"#6c616e\",\n        \"extensions\": [\n            \".dylan\",\n            \".dyl\",\n            \".intr\",\n            \".lid\"\n        ],\n        \"tm_scope\": \"source.dylan\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"dylan\",\n        \"codemirror_mime_type\": \"text/x-dylan\",\n        \"language_id\": 91\n    },\n    \"E\": {\n        \"type\": \"programming\",\n        \"color\": \"#ccce35\",\n        \"extensions\": [\n            \".e\"\n        ],\n        \"interpreters\": [\n            \"rune\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 92\n    },\n    \"E-mail\": {\n        \"type\": \"data\",\n        \"aliases\": [\n            \"email\",\n            \"eml\",\n            \"mail\",\n            \"mbox\"\n        ],\n        \"extensions\": [\n            \".eml\",\n            \".mbox\"\n        ],\n        \"tm_scope\": \"text.eml.basic\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"mbox\",\n        \"codemirror_mime_type\": \"application/mbox\",\n        \"language_id\": 529653389\n    },\n    \"EBNF\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".ebnf\"\n        ],\n        \"tm_scope\": \"source.ebnf\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"ebnf\",\n        \"codemirror_mime_type\": \"text/x-ebnf\",\n        \"language_id\": 430\n    },\n    \"ECL\": {\n        \"type\": \"programming\",\n        \"color\": \"#8a1267\",\n        \"extensions\": [\n            \".ecl\",\n            \".eclxml\"\n        ],\n        \"tm_scope\": \"source.ecl\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"ecl\",\n        \"codemirror_mime_type\": \"text/x-ecl\",\n        \"language_id\": 93\n    },\n    \"ECLiPSe\": {\n        \"type\": \"programming\",\n        \"color\": \"#001d9d\",\n        \"group\": \"Prolog\",\n        \"extensions\": [\n            \".ecl\"\n        ],\n        \"tm_scope\": \"source.prolog.eclipse\",\n        \"ace_mode\": \"prolog\",\n        \"language_id\": 94\n    },\n    \"EJS\": {\n        \"type\": \"markup\",\n        \"color\": \"#a91e50\",\n        \"extensions\": [\n            \".ejs\",\n            \".ect\",\n            \".ejs.t\",\n            \".jst\"\n        ],\n        \"tm_scope\": \"text.html.js\",\n        \"ace_mode\": \"ejs\",\n        \"language_id\": 95\n    },\n    \"EQ\": {\n        \"type\": \"programming\",\n        \"color\": \"#a78649\",\n        \"extensions\": [\n            \".eq\"\n        ],\n        \"tm_scope\": \"source.cs\",\n        \"ace_mode\": \"csharp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csharp\",\n        \"language_id\": 96\n    },\n    \"Eagle\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".sch\",\n            \".brd\"\n        ],\n        \"tm_scope\": \"text.xml\",\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"language_id\": 97\n    },\n    \"Earthly\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"Earthfile\"\n        ],\n        \"color\": \"#2af0ff\",\n        \"tm_scope\": \"source.earthfile\",\n        \"ace_mode\": \"text\",\n        \"filenames\": [\n            \"Earthfile\"\n        ],\n        \"language_id\": 963512632\n    },\n    \"Easybuild\": {\n        \"type\": \"data\",\n        \"color\": \"#069406\",\n        \"group\": \"Python\",\n        \"ace_mode\": \"python\",\n        \"codemirror_mode\": \"python\",\n        \"codemirror_mime_type\": \"text/x-python\",\n        \"tm_scope\": \"source.python\",\n        \"extensions\": [\n            \".eb\"\n        ],\n        \"language_id\": 342840477\n    },\n    \"Ecere Projects\": {\n        \"type\": \"data\",\n        \"color\": \"#913960\",\n        \"group\": \"JavaScript\",\n        \"extensions\": [\n            \".epj\"\n        ],\n        \"tm_scope\": \"source.json\",\n        \"ace_mode\": \"json\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/json\",\n        \"language_id\": 98\n    },\n    \"Ecmarkup\": {\n        \"type\": \"markup\",\n        \"color\": \"#eb8131\",\n        \"group\": \"HTML\",\n        \"extensions\": [\n            \".html\"\n        ],\n        \"tm_scope\": \"text.html.ecmarkup\",\n        \"ace_mode\": \"html\",\n        \"codemirror_mode\": \"htmlmixed\",\n        \"codemirror_mime_type\": \"text/html\",\n        \"aliases\": [\n            \"ecmarkdown\"\n        ],\n        \"language_id\": 844766630\n    },\n    \"Edge\": {\n        \"type\": \"markup\",\n        \"color\": \"#0dffe0\",\n        \"extensions\": [\n            \".edge\"\n        ],\n        \"tm_scope\": \"text.html.edge\",\n        \"ace_mode\": \"html\",\n        \"language_id\": 460509620\n    },\n    \"EdgeQL\": {\n        \"type\": \"programming\",\n        \"color\": \"#31A7FF\",\n        \"aliases\": [\n            \"esdl\"\n        ],\n        \"extensions\": [\n            \".edgeql\",\n            \".esdl\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.edgeql\",\n        \"language_id\": 925235833\n    },\n    \"EditorConfig\": {\n        \"type\": \"data\",\n        \"color\": \"#fff1f2\",\n        \"group\": \"INI\",\n        \"extensions\": [\n            \".editorconfig\"\n        ],\n        \"filenames\": [\n            \".editorconfig\"\n        ],\n        \"aliases\": [\n            \"editor-config\"\n        ],\n        \"ace_mode\": \"ini\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"tm_scope\": \"source.editorconfig\",\n        \"language_id\": 96139566\n    },\n    \"Edje Data Collection\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".edc\"\n        ],\n        \"tm_scope\": \"source.c++\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"language_id\": 342840478\n    },\n    \"Eiffel\": {\n        \"type\": \"programming\",\n        \"color\": \"#4d6977\",\n        \"extensions\": [\n            \".e\"\n        ],\n        \"tm_scope\": \"source.eiffel\",\n        \"ace_mode\": \"eiffel\",\n        \"codemirror_mode\": \"eiffel\",\n        \"codemirror_mime_type\": \"text/x-eiffel\",\n        \"language_id\": 99\n    },\n    \"Elixir\": {\n        \"type\": \"programming\",\n        \"color\": \"#6e4a7e\",\n        \"extensions\": [\n            \".ex\",\n            \".exs\"\n        ],\n        \"tm_scope\": \"source.elixir\",\n        \"ace_mode\": \"elixir\",\n        \"filenames\": [\n            \"mix.lock\"\n        ],\n        \"interpreters\": [\n            \"elixir\"\n        ],\n        \"language_id\": 100\n    },\n    \"Elm\": {\n        \"type\": \"programming\",\n        \"color\": \"#60B5CC\",\n        \"extensions\": [\n            \".elm\"\n        ],\n        \"tm_scope\": \"source.elm\",\n        \"ace_mode\": \"elm\",\n        \"codemirror_mode\": \"elm\",\n        \"codemirror_mime_type\": \"text/x-elm\",\n        \"language_id\": 101\n    },\n    \"Elvish\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".elv\"\n        ],\n        \"interpreters\": [\n            \"elvish\"\n        ],\n        \"tm_scope\": \"source.elvish\",\n        \"color\": \"#55BB55\",\n        \"language_id\": 570996448\n    },\n    \"Elvish Transcript\": {\n        \"type\": \"programming\",\n        \"group\": \"Elvish\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.elvish-transcript\",\n        \"color\": \"#55BB55\",\n        \"language_id\": 452025714\n    },\n    \"Emacs Lisp\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.emacs.lisp\",\n        \"color\": \"#c065db\",\n        \"aliases\": [\n            \"elisp\",\n            \"emacs\"\n        ],\n        \"filenames\": [\n            \".abbrev_defs\",\n            \".emacs\",\n            \".emacs.desktop\",\n            \".gnus\",\n            \".spacemacs\",\n            \".viper\",\n            \"Cask\",\n            \"Project.ede\",\n            \"_emacs\",\n            \"abbrev_defs\"\n        ],\n        \"extensions\": [\n            \".el\",\n            \".emacs\",\n            \".emacs.desktop\"\n        ],\n        \"ace_mode\": \"lisp\",\n        \"codemirror_mode\": \"commonlisp\",\n        \"codemirror_mime_type\": \"text/x-common-lisp\",\n        \"language_id\": 102\n    },\n    \"EmberScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#FFF4F3\",\n        \"extensions\": [\n            \".em\",\n            \".emberscript\"\n        ],\n        \"tm_scope\": \"source.coffee\",\n        \"ace_mode\": \"coffee\",\n        \"codemirror_mode\": \"coffeescript\",\n        \"codemirror_mime_type\": \"text/x-coffeescript\",\n        \"language_id\": 103\n    },\n    \"Erlang\": {\n        \"type\": \"programming\",\n        \"color\": \"#B83998\",\n        \"extensions\": [\n            \".erl\",\n            \".app\",\n            \".app.src\",\n            \".es\",\n            \".escript\",\n            \".hrl\",\n            \".xrl\",\n            \".yrl\"\n        ],\n        \"filenames\": [\n            \"Emakefile\",\n            \"rebar.config\",\n            \"rebar.config.lock\",\n            \"rebar.lock\"\n        ],\n        \"tm_scope\": \"source.erlang\",\n        \"ace_mode\": \"erlang\",\n        \"codemirror_mode\": \"erlang\",\n        \"codemirror_mime_type\": \"text/x-erlang\",\n        \"interpreters\": [\n            \"escript\"\n        ],\n        \"language_id\": 104\n    },\n    \"Euphoria\": {\n        \"type\": \"programming\",\n        \"color\": \"#FF790B\",\n        \"extensions\": [\n            \".e\",\n            \".ex\"\n        ],\n        \"interpreters\": [\n            \"eui\",\n            \"euiw\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.euphoria\",\n        \"language_id\": 880693982\n    },\n    \"F#\": {\n        \"type\": \"programming\",\n        \"color\": \"#b845fc\",\n        \"aliases\": [\n            \"fsharp\"\n        ],\n        \"extensions\": [\n            \".fs\",\n            \".fsi\",\n            \".fsx\"\n        ],\n        \"tm_scope\": \"source.fsharp\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"mllike\",\n        \"codemirror_mime_type\": \"text/x-fsharp\",\n        \"language_id\": 105\n    },\n    \"F*\": {\n        \"fs_name\": \"Fstar\",\n        \"type\": \"programming\",\n        \"color\": \"#572e30\",\n        \"aliases\": [\n            \"fstar\"\n        ],\n        \"extensions\": [\n            \".fst\",\n            \".fsti\"\n        ],\n        \"tm_scope\": \"source.fstar\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 336943375\n    },\n    \"FIGlet Font\": {\n        \"type\": \"data\",\n        \"color\": \"#FFDDBB\",\n        \"aliases\": [\n            \"FIGfont\"\n        ],\n        \"extensions\": [\n            \".flf\"\n        ],\n        \"tm_scope\": \"source.figfont\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 686129783\n    },\n    \"FIRRTL\": {\n        \"type\": \"programming\",\n        \"color\": \"#2f632f\",\n        \"extensions\": [\n            \".fir\"\n        ],\n        \"tm_scope\": \"source.firrtl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 906694254\n    },\n    \"FLUX\": {\n        \"type\": \"programming\",\n        \"color\": \"#88ccff\",\n        \"extensions\": [\n            \".fx\",\n            \".flux\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 106\n    },\n    \"Factor\": {\n        \"type\": \"programming\",\n        \"color\": \"#636746\",\n        \"extensions\": [\n            \".factor\"\n        ],\n        \"filenames\": [\n            \".factor-boot-rc\",\n            \".factor-rc\"\n        ],\n        \"tm_scope\": \"source.factor\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"factor\",\n        \"codemirror_mime_type\": \"text/x-factor\",\n        \"language_id\": 108\n    },\n    \"Fancy\": {\n        \"type\": \"programming\",\n        \"color\": \"#7b9db4\",\n        \"extensions\": [\n            \".fy\",\n            \".fancypack\"\n        ],\n        \"filenames\": [\n            \"Fakefile\"\n        ],\n        \"tm_scope\": \"source.fancy\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 109\n    },\n    \"Fantom\": {\n        \"type\": \"programming\",\n        \"color\": \"#14253c\",\n        \"extensions\": [\n            \".fan\"\n        ],\n        \"tm_scope\": \"source.fan\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 110\n    },\n    \"Faust\": {\n        \"type\": \"programming\",\n        \"color\": \"#c37240\",\n        \"extensions\": [\n            \".dsp\"\n        ],\n        \"tm_scope\": \"source.faust\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 622529198\n    },\n    \"Fennel\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.fnl\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#fff3d7\",\n        \"interpreters\": [\n            \"fennel\"\n        ],\n        \"extensions\": [\n            \".fnl\"\n        ],\n        \"language_id\": 239946126\n    },\n    \"Filebench WML\": {\n        \"type\": \"programming\",\n        \"color\": \"#F6B900\",\n        \"extensions\": [\n            \".f\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 111\n    },\n    \"Filterscript\": {\n        \"type\": \"programming\",\n        \"group\": \"RenderScript\",\n        \"extensions\": [\n            \".fs\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 112\n    },\n    \"Fluent\": {\n        \"type\": \"programming\",\n        \"color\": \"#ffcc33\",\n        \"extensions\": [\n            \".ftl\"\n        ],\n        \"tm_scope\": \"source.ftl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 206353404\n    },\n    \"Formatted\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".for\",\n            \".eam.fs\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 113\n    },\n    \"Forth\": {\n        \"type\": \"programming\",\n        \"color\": \"#341708\",\n        \"extensions\": [\n            \".fth\",\n            \".4th\",\n            \".f\",\n            \".for\",\n            \".forth\",\n            \".fr\",\n            \".frt\",\n            \".fs\"\n        ],\n        \"tm_scope\": \"source.forth\",\n        \"ace_mode\": \"forth\",\n        \"codemirror_mode\": \"forth\",\n        \"codemirror_mime_type\": \"text/x-forth\",\n        \"language_id\": 114\n    },\n    \"Fortran\": {\n        \"group\": \"Fortran\",\n        \"type\": \"programming\",\n        \"color\": \"#4d41b1\",\n        \"extensions\": [\n            \".f\",\n            \".f77\",\n            \".for\",\n            \".fpp\"\n        ],\n        \"tm_scope\": \"source.fortran\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"fortran\",\n        \"codemirror_mime_type\": \"text/x-fortran\",\n        \"language_id\": 107\n    },\n    \"Fortran Free Form\": {\n        \"group\": \"Fortran\",\n        \"color\": \"#4d41b1\",\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".f90\",\n            \".f03\",\n            \".f08\",\n            \".f95\"\n        ],\n        \"tm_scope\": \"source.fortran.modern\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"fortran\",\n        \"codemirror_mime_type\": \"text/x-fortran\",\n        \"language_id\": 761352333\n    },\n    \"FreeBasic\": {\n        \"type\": \"programming\",\n        \"color\": \"#141AC9\",\n        \"extensions\": [\n            \".bi\",\n            \".bas\"\n        ],\n        \"tm_scope\": \"source.vbnet\",\n        \"aliases\": [\n            \"fb\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"vb\",\n        \"codemirror_mime_type\": \"text/x-vb\",\n        \"language_id\": 472896659\n    },\n    \"FreeMarker\": {\n        \"type\": \"programming\",\n        \"color\": \"#0050b2\",\n        \"aliases\": [\n            \"ftl\"\n        ],\n        \"extensions\": [\n            \".ftl\"\n        ],\n        \"tm_scope\": \"text.html.ftl\",\n        \"ace_mode\": \"ftl\",\n        \"language_id\": 115\n    },\n    \"Frege\": {\n        \"type\": \"programming\",\n        \"color\": \"#00cafe\",\n        \"extensions\": [\n            \".fr\"\n        ],\n        \"tm_scope\": \"source.haskell\",\n        \"ace_mode\": \"haskell\",\n        \"language_id\": 116\n    },\n    \"Futhark\": {\n        \"type\": \"programming\",\n        \"color\": \"#5f021f\",\n        \"extensions\": [\n            \".fut\"\n        ],\n        \"tm_scope\": \"source.futhark\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 97358117\n    },\n    \"G-code\": {\n        \"type\": \"programming\",\n        \"color\": \"#D08CF2\",\n        \"extensions\": [\n            \".g\",\n            \".cnc\",\n            \".gco\",\n            \".gcode\"\n        ],\n        \"tm_scope\": \"source.gcode\",\n        \"ace_mode\": \"gcode\",\n        \"language_id\": 117\n    },\n    \"GAML\": {\n        \"type\": \"programming\",\n        \"color\": \"#FFC766\",\n        \"extensions\": [\n            \".gaml\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 290345951\n    },\n    \"GAMS\": {\n        \"type\": \"programming\",\n        \"color\": \"#f49a22\",\n        \"extensions\": [\n            \".gms\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 118\n    },\n    \"GAP\": {\n        \"type\": \"programming\",\n        \"color\": \"#0000cc\",\n        \"extensions\": [\n            \".g\",\n            \".gap\",\n            \".gd\",\n            \".gi\",\n            \".tst\"\n        ],\n        \"tm_scope\": \"source.gap\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 119\n    },\n    \"GCC Machine Description\": {\n        \"type\": \"programming\",\n        \"color\": \"#FFCFAB\",\n        \"extensions\": [\n            \".md\"\n        ],\n        \"tm_scope\": \"source.lisp\",\n        \"ace_mode\": \"lisp\",\n        \"codemirror_mode\": \"commonlisp\",\n        \"codemirror_mime_type\": \"text/x-common-lisp\",\n        \"language_id\": 121\n    },\n    \"GDB\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".gdb\",\n            \".gdbinit\"\n        ],\n        \"tm_scope\": \"source.gdb\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 122\n    },\n    \"GDScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#355570\",\n        \"extensions\": [\n            \".gd\"\n        ],\n        \"tm_scope\": \"source.gdscript\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 123\n    },\n    \"GEDCOM\": {\n        \"type\": \"data\",\n        \"color\": \"#003058\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".ged\"\n        ],\n        \"tm_scope\": \"source.gedcom\",\n        \"language_id\": 459577965\n    },\n    \"GLSL\": {\n        \"type\": \"programming\",\n        \"color\": \"#5686a5\",\n        \"extensions\": [\n            \".glsl\",\n            \".fp\",\n            \".frag\",\n            \".frg\",\n            \".fs\",\n            \".fsh\",\n            \".fshader\",\n            \".geo\",\n            \".geom\",\n            \".glslf\",\n            \".glslv\",\n            \".gs\",\n            \".gshader\",\n            \".rchit\",\n            \".rmiss\",\n            \".shader\",\n            \".tesc\",\n            \".tese\",\n            \".vert\",\n            \".vrx\",\n            \".vs\",\n            \".vsh\",\n            \".vshader\"\n        ],\n        \"tm_scope\": \"source.glsl\",\n        \"ace_mode\": \"glsl\",\n        \"language_id\": 124\n    },\n    \"GN\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".gn\",\n            \".gni\"\n        ],\n        \"interpreters\": [\n            \"gn\"\n        ],\n        \"filenames\": [\n            \".gn\"\n        ],\n        \"tm_scope\": \"source.gn\",\n        \"ace_mode\": \"python\",\n        \"codemirror_mode\": \"python\",\n        \"codemirror_mime_type\": \"text/x-python\",\n        \"language_id\": 302957008\n    },\n    \"GSC\": {\n        \"type\": \"programming\",\n        \"color\": \"#FF6800\",\n        \"extensions\": [\n            \".gsc\",\n            \".csc\",\n            \".gsh\"\n        ],\n        \"tm_scope\": \"source.gsc\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"language_id\": 257856279\n    },\n    \"Game Maker Language\": {\n        \"type\": \"programming\",\n        \"color\": \"#71b417\",\n        \"extensions\": [\n            \".gml\"\n        ],\n        \"tm_scope\": \"source.c++\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"language_id\": 125\n    },\n    \"Gemfile.lock\": {\n        \"type\": \"data\",\n        \"color\": \"#701516\",\n        \"searchable\": false,\n        \"tm_scope\": \"source.gemfile-lock\",\n        \"ace_mode\": \"text\",\n        \"filenames\": [\n            \"Gemfile.lock\"\n        ],\n        \"language_id\": 907065713\n    },\n    \"Gemini\": {\n        \"type\": \"prose\",\n        \"color\": \"#ff6900\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".gmi\"\n        ],\n        \"aliases\": [\n            \"gemtext\"\n        ],\n        \"wrap\": true,\n        \"tm_scope\": \"source.gemini\",\n        \"language_id\": 310828396\n    },\n    \"Genero 4gl\": {\n        \"type\": \"programming\",\n        \"color\": \"#63408e\",\n        \"extensions\": [\n            \".4gl\"\n        ],\n        \"tm_scope\": \"source.genero-4gl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 986054050\n    },\n    \"Genero per\": {\n        \"type\": \"markup\",\n        \"color\": \"#d8df39\",\n        \"extensions\": [\n            \".per\"\n        ],\n        \"tm_scope\": \"source.genero-per\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 902995658\n    },\n    \"Genie\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".gs\"\n        ],\n        \"color\": \"#fb855d\",\n        \"tm_scope\": \"none\",\n        \"language_id\": 792408528\n    },\n    \"Genshi\": {\n        \"type\": \"programming\",\n        \"color\": \"#951531\",\n        \"extensions\": [\n            \".kid\"\n        ],\n        \"tm_scope\": \"text.xml.genshi\",\n        \"aliases\": [\n            \"xml+genshi\",\n            \"xml+kid\"\n        ],\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"language_id\": 126\n    },\n    \"Gentoo Ebuild\": {\n        \"type\": \"programming\",\n        \"color\": \"#9400ff\",\n        \"group\": \"Shell\",\n        \"extensions\": [\n            \".ebuild\"\n        ],\n        \"tm_scope\": \"source.shell\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 127\n    },\n    \"Gentoo Eclass\": {\n        \"type\": \"programming\",\n        \"color\": \"#9400ff\",\n        \"group\": \"Shell\",\n        \"extensions\": [\n            \".eclass\"\n        ],\n        \"tm_scope\": \"source.shell\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 128\n    },\n    \"Gerber Image\": {\n        \"type\": \"data\",\n        \"color\": \"#d20b00\",\n        \"aliases\": [\n            \"rs-274x\"\n        ],\n        \"extensions\": [\n            \".gbr\",\n            \".cmp\",\n            \".gbl\",\n            \".gbo\",\n            \".gbp\",\n            \".gbs\",\n            \".gko\",\n            \".gml\",\n            \".gpb\",\n            \".gpt\",\n            \".gtl\",\n            \".gto\",\n            \".gtp\",\n            \".gts\",\n            \".ncl\",\n            \".sol\"\n        ],\n        \"interpreters\": [\n            \"gerbv\",\n            \"gerbview\"\n        ],\n        \"tm_scope\": \"source.gerber\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 404627610\n    },\n    \"Gettext Catalog\": {\n        \"type\": \"prose\",\n        \"aliases\": [\n            \"pot\"\n        ],\n        \"extensions\": [\n            \".po\",\n            \".pot\"\n        ],\n        \"tm_scope\": \"source.po\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 129\n    },\n    \"Gherkin\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".feature\",\n            \".story\"\n        ],\n        \"tm_scope\": \"text.gherkin.feature\",\n        \"aliases\": [\n            \"cucumber\"\n        ],\n        \"ace_mode\": \"text\",\n        \"color\": \"#5B2063\",\n        \"language_id\": 76\n    },\n    \"Git Attributes\": {\n        \"type\": \"data\",\n        \"color\": \"#F44D27\",\n        \"aliases\": [\n            \"gitattributes\"\n        ],\n        \"filenames\": [\n            \".gitattributes\"\n        ],\n        \"tm_scope\": \"source.gitattributes\",\n        \"ace_mode\": \"gitignore\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 956324166\n    },\n    \"Git Config\": {\n        \"type\": \"data\",\n        \"color\": \"#F44D27\",\n        \"group\": \"INI\",\n        \"aliases\": [\n            \"gitconfig\",\n            \"gitmodules\"\n        ],\n        \"extensions\": [\n            \".gitconfig\"\n        ],\n        \"filenames\": [\n            \".gitconfig\",\n            \".gitmodules\"\n        ],\n        \"ace_mode\": \"ini\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"tm_scope\": \"source.gitconfig\",\n        \"language_id\": 807968997\n    },\n    \"Git Revision List\": {\n        \"type\": \"data\",\n        \"color\": \"#F44D27\",\n        \"aliases\": [\n            \"Git Blame Ignore Revs\"\n        ],\n        \"filenames\": [\n            \".git-blame-ignore-revs\"\n        ],\n        \"tm_scope\": \"source.git-revlist\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 461881235\n    },\n    \"Gleam\": {\n        \"type\": \"programming\",\n        \"color\": \"#ffaff3\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".gleam\"\n        ],\n        \"tm_scope\": \"source.gleam\",\n        \"language_id\": 1054258749\n    },\n    \"Glimmer JS\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".gjs\"\n        ],\n        \"ace_mode\": \"javascript\",\n        \"color\": \"#F5835F\",\n        \"tm_scope\": \"source.gjs\",\n        \"group\": \"JavaScript\",\n        \"language_id\": 5523150\n    },\n    \"Glimmer TS\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".gts\"\n        ],\n        \"ace_mode\": \"typescript\",\n        \"color\": \"#3178c6\",\n        \"tm_scope\": \"source.gts\",\n        \"group\": \"TypeScript\",\n        \"language_id\": 95110458\n    },\n    \"Glyph\": {\n        \"type\": \"programming\",\n        \"color\": \"#c1ac7f\",\n        \"extensions\": [\n            \".glf\"\n        ],\n        \"tm_scope\": \"source.tcl\",\n        \"ace_mode\": \"tcl\",\n        \"codemirror_mode\": \"tcl\",\n        \"codemirror_mime_type\": \"text/x-tcl\",\n        \"language_id\": 130\n    },\n    \"Glyph Bitmap Distribution Format\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".bdf\"\n        ],\n        \"tm_scope\": \"source.bdf\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 997665271\n    },\n    \"Gnuplot\": {\n        \"type\": \"programming\",\n        \"color\": \"#f0a9f0\",\n        \"extensions\": [\n            \".gp\",\n            \".gnu\",\n            \".gnuplot\",\n            \".p\",\n            \".plot\",\n            \".plt\"\n        ],\n        \"interpreters\": [\n            \"gnuplot\"\n        ],\n        \"tm_scope\": \"source.gnuplot\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 131\n    },\n    \"Go\": {\n        \"type\": \"programming\",\n        \"color\": \"#00ADD8\",\n        \"aliases\": [\n            \"golang\"\n        ],\n        \"extensions\": [\n            \".go\"\n        ],\n        \"tm_scope\": \"source.go\",\n        \"ace_mode\": \"golang\",\n        \"codemirror_mode\": \"go\",\n        \"codemirror_mime_type\": \"text/x-go\",\n        \"language_id\": 132\n    },\n    \"Go Checksums\": {\n        \"type\": \"data\",\n        \"color\": \"#00ADD8\",\n        \"aliases\": [\n            \"go.sum\",\n            \"go sum\",\n            \"go.work.sum\",\n            \"go work sum\"\n        ],\n        \"filenames\": [\n            \"go.sum\",\n            \"go.work.sum\"\n        ],\n        \"tm_scope\": \"go.sum\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 1054391671\n    },\n    \"Go Module\": {\n        \"type\": \"data\",\n        \"color\": \"#00ADD8\",\n        \"aliases\": [\n            \"go.mod\",\n            \"go mod\"\n        ],\n        \"filenames\": [\n            \"go.mod\"\n        ],\n        \"tm_scope\": \"go.mod\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 947461016\n    },\n    \"Go Workspace\": {\n        \"type\": \"data\",\n        \"color\": \"#00ADD8\",\n        \"aliases\": [\n            \"go.work\",\n            \"go work\"\n        ],\n        \"filenames\": [\n            \"go.work\"\n        ],\n        \"tm_scope\": \"go.mod\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 934546256\n    },\n    \"Godot Resource\": {\n        \"type\": \"data\",\n        \"color\": \"#355570\",\n        \"extensions\": [\n            \".gdnlib\",\n            \".gdns\",\n            \".tres\",\n            \".tscn\"\n        ],\n        \"filenames\": [\n            \"project.godot\"\n        ],\n        \"tm_scope\": \"source.gdresource\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 738107771\n    },\n    \"Golo\": {\n        \"type\": \"programming\",\n        \"color\": \"#88562A\",\n        \"extensions\": [\n            \".golo\"\n        ],\n        \"tm_scope\": \"source.golo\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 133\n    },\n    \"Gosu\": {\n        \"type\": \"programming\",\n        \"color\": \"#82937f\",\n        \"extensions\": [\n            \".gs\",\n            \".gst\",\n            \".gsx\",\n            \".vark\"\n        ],\n        \"tm_scope\": \"source.gosu.2\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 134\n    },\n    \"Grace\": {\n        \"type\": \"programming\",\n        \"color\": \"#615f8b\",\n        \"extensions\": [\n            \".grace\"\n        ],\n        \"tm_scope\": \"source.grace\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 135\n    },\n    \"Gradle\": {\n        \"type\": \"data\",\n        \"color\": \"#02303a\",\n        \"extensions\": [\n            \".gradle\"\n        ],\n        \"tm_scope\": \"source.groovy.gradle\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 136\n    },\n    \"Gradle Kotlin DSL\": {\n        \"group\": \"Gradle\",\n        \"type\": \"data\",\n        \"color\": \"#02303a\",\n        \"extensions\": [\n            \".gradle.kts\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.kotlin\",\n        \"language_id\": 432600901\n    },\n    \"Grammatical Framework\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"gf\"\n        ],\n        \"extensions\": [\n            \".gf\"\n        ],\n        \"color\": \"#ff0000\",\n        \"tm_scope\": \"source.gf\",\n        \"ace_mode\": \"haskell\",\n        \"codemirror_mode\": \"haskell\",\n        \"codemirror_mime_type\": \"text/x-haskell\",\n        \"language_id\": 137\n    },\n    \"Graph Modeling Language\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".gml\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 138\n    },\n    \"GraphQL\": {\n        \"type\": \"data\",\n        \"color\": \"#e10098\",\n        \"extensions\": [\n            \".graphql\",\n            \".gql\",\n            \".graphqls\"\n        ],\n        \"tm_scope\": \"source.graphql\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 139\n    },\n    \"Graphviz (DOT)\": {\n        \"type\": \"data\",\n        \"color\": \"#2596be\",\n        \"tm_scope\": \"source.dot\",\n        \"extensions\": [\n            \".dot\",\n            \".gv\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 140\n    },\n    \"Groovy\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.groovy\",\n        \"ace_mode\": \"groovy\",\n        \"codemirror_mode\": \"groovy\",\n        \"codemirror_mime_type\": \"text/x-groovy\",\n        \"color\": \"#4298b8\",\n        \"extensions\": [\n            \".groovy\",\n            \".grt\",\n            \".gtpl\",\n            \".gvy\"\n        ],\n        \"interpreters\": [\n            \"groovy\"\n        ],\n        \"filenames\": [\n            \"Jenkinsfile\"\n        ],\n        \"language_id\": 142\n    },\n    \"Groovy Server Pages\": {\n        \"type\": \"programming\",\n        \"color\": \"#4298b8\",\n        \"group\": \"Groovy\",\n        \"aliases\": [\n            \"gsp\",\n            \"java server page\"\n        ],\n        \"extensions\": [\n            \".gsp\"\n        ],\n        \"tm_scope\": \"text.html.jsp\",\n        \"ace_mode\": \"jsp\",\n        \"codemirror_mode\": \"htmlembedded\",\n        \"codemirror_mime_type\": \"application/x-jsp\",\n        \"language_id\": 143\n    },\n    \"HAProxy\": {\n        \"type\": \"data\",\n        \"color\": \"#106da9\",\n        \"extensions\": [\n            \".cfg\"\n        ],\n        \"filenames\": [\n            \"haproxy.cfg\"\n        ],\n        \"tm_scope\": \"source.haproxy-config\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 366607477\n    },\n    \"HCL\": {\n        \"type\": \"programming\",\n        \"color\": \"#844FBA\",\n        \"extensions\": [\n            \".hcl\",\n            \".nomad\",\n            \".tf\",\n            \".tfvars\",\n            \".workflow\"\n        ],\n        \"aliases\": [\n            \"HashiCorp Configuration Language\",\n            \"terraform\"\n        ],\n        \"ace_mode\": \"ruby\",\n        \"codemirror_mode\": \"ruby\",\n        \"codemirror_mime_type\": \"text/x-ruby\",\n        \"tm_scope\": \"source.hcl\",\n        \"language_id\": 144\n    },\n    \"HLSL\": {\n        \"type\": \"programming\",\n        \"color\": \"#aace60\",\n        \"extensions\": [\n            \".hlsl\",\n            \".cginc\",\n            \".fx\",\n            \".fxh\",\n            \".hlsli\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.hlsl\",\n        \"language_id\": 145\n    },\n    \"HOCON\": {\n        \"type\": \"data\",\n        \"color\": \"#9ff8ee\",\n        \"extensions\": [\n            \".hocon\"\n        ],\n        \"filenames\": [\n            \".scalafix.conf\",\n            \".scalafmt.conf\"\n        ],\n        \"tm_scope\": \"source.hocon\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 679725279\n    },\n    \"HTML\": {\n        \"type\": \"markup\",\n        \"tm_scope\": \"text.html.basic\",\n        \"ace_mode\": \"html\",\n        \"codemirror_mode\": \"htmlmixed\",\n        \"codemirror_mime_type\": \"text/html\",\n        \"color\": \"#e34c26\",\n        \"aliases\": [\n            \"xhtml\"\n        ],\n        \"extensions\": [\n            \".html\",\n            \".hta\",\n            \".htm\",\n            \".html.hl\",\n            \".inc\",\n            \".xht\",\n            \".xhtml\"\n        ],\n        \"language_id\": 146\n    },\n    \"HTML+ECR\": {\n        \"type\": \"markup\",\n        \"color\": \"#2e1052\",\n        \"tm_scope\": \"text.html.ecr\",\n        \"group\": \"HTML\",\n        \"aliases\": [\n            \"ecr\"\n        ],\n        \"extensions\": [\n            \".ecr\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"htmlmixed\",\n        \"codemirror_mime_type\": \"text/html\",\n        \"language_id\": 148\n    },\n    \"HTML+EEX\": {\n        \"type\": \"markup\",\n        \"color\": \"#6e4a7e\",\n        \"tm_scope\": \"text.html.elixir\",\n        \"group\": \"HTML\",\n        \"aliases\": [\n            \"eex\",\n            \"heex\",\n            \"leex\"\n        ],\n        \"extensions\": [\n            \".eex\",\n            \".html.heex\",\n            \".html.leex\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"htmlmixed\",\n        \"codemirror_mime_type\": \"text/html\",\n        \"language_id\": 149\n    },\n    \"HTML+ERB\": {\n        \"type\": \"markup\",\n        \"color\": \"#701516\",\n        \"tm_scope\": \"text.html.erb\",\n        \"group\": \"HTML\",\n        \"aliases\": [\n            \"erb\",\n            \"rhtml\",\n            \"html+ruby\"\n        ],\n        \"extensions\": [\n            \".erb\",\n            \".erb.deface\",\n            \".rhtml\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"htmlembedded\",\n        \"codemirror_mime_type\": \"application/x-erb\",\n        \"language_id\": 150\n    },\n    \"HTML+PHP\": {\n        \"type\": \"markup\",\n        \"color\": \"#4f5d95\",\n        \"tm_scope\": \"text.html.php\",\n        \"group\": \"HTML\",\n        \"extensions\": [\n            \".phtml\"\n        ],\n        \"ace_mode\": \"php\",\n        \"codemirror_mode\": \"php\",\n        \"codemirror_mime_type\": \"application/x-httpd-php\",\n        \"language_id\": 151\n    },\n    \"HTML+Razor\": {\n        \"type\": \"markup\",\n        \"color\": \"#512be4\",\n        \"tm_scope\": \"text.html.cshtml\",\n        \"group\": \"HTML\",\n        \"aliases\": [\n            \"razor\"\n        ],\n        \"extensions\": [\n            \".cshtml\",\n            \".razor\"\n        ],\n        \"ace_mode\": \"razor\",\n        \"codemirror_mode\": \"htmlmixed\",\n        \"codemirror_mime_type\": \"text/html\",\n        \"language_id\": 479039817\n    },\n    \"HTTP\": {\n        \"type\": \"data\",\n        \"color\": \"#005C9C\",\n        \"extensions\": [\n            \".http\"\n        ],\n        \"tm_scope\": \"source.httpspec\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"http\",\n        \"codemirror_mime_type\": \"message/http\",\n        \"language_id\": 152\n    },\n    \"HXML\": {\n        \"type\": \"data\",\n        \"color\": \"#f68712\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".hxml\"\n        ],\n        \"tm_scope\": \"source.hxml\",\n        \"language_id\": 786683730\n    },\n    \"Hack\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"php\",\n        \"codemirror_mode\": \"php\",\n        \"codemirror_mime_type\": \"application/x-httpd-php\",\n        \"extensions\": [\n            \".hack\",\n            \".hh\",\n            \".hhi\",\n            \".php\"\n        ],\n        \"tm_scope\": \"source.hack\",\n        \"color\": \"#878787\",\n        \"language_id\": 153\n    },\n    \"Haml\": {\n        \"type\": \"markup\",\n        \"color\": \"#ece2a9\",\n        \"extensions\": [\n            \".haml\",\n            \".haml.deface\"\n        ],\n        \"tm_scope\": \"text.haml\",\n        \"ace_mode\": \"haml\",\n        \"codemirror_mode\": \"haml\",\n        \"codemirror_mime_type\": \"text/x-haml\",\n        \"language_id\": 154\n    },\n    \"Handlebars\": {\n        \"type\": \"markup\",\n        \"color\": \"#f7931e\",\n        \"aliases\": [\n            \"hbs\",\n            \"htmlbars\"\n        ],\n        \"extensions\": [\n            \".handlebars\",\n            \".hbs\"\n        ],\n        \"tm_scope\": \"text.html.handlebars\",\n        \"ace_mode\": \"handlebars\",\n        \"language_id\": 155\n    },\n    \"Harbour\": {\n        \"type\": \"programming\",\n        \"color\": \"#0e60e3\",\n        \"extensions\": [\n            \".hb\"\n        ],\n        \"tm_scope\": \"source.harbour\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 156\n    },\n    \"Haskell\": {\n        \"type\": \"programming\",\n        \"color\": \"#5e5086\",\n        \"extensions\": [\n            \".hs\",\n            \".hs-boot\",\n            \".hsc\"\n        ],\n        \"interpreters\": [\n            \"runghc\",\n            \"runhaskell\",\n            \"runhugs\"\n        ],\n        \"tm_scope\": \"source.haskell\",\n        \"ace_mode\": \"haskell\",\n        \"codemirror_mode\": \"haskell\",\n        \"codemirror_mime_type\": \"text/x-haskell\",\n        \"language_id\": 157\n    },\n    \"Haxe\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"haxe\",\n        \"codemirror_mode\": \"haxe\",\n        \"codemirror_mime_type\": \"text/x-haxe\",\n        \"color\": \"#df7900\",\n        \"extensions\": [\n            \".hx\",\n            \".hxsl\"\n        ],\n        \"tm_scope\": \"source.hx\",\n        \"language_id\": 158\n    },\n    \"HiveQL\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".q\",\n            \".hql\"\n        ],\n        \"color\": \"#dce200\",\n        \"tm_scope\": \"source.hql\",\n        \"ace_mode\": \"sql\",\n        \"language_id\": 931814087\n    },\n    \"HolyC\": {\n        \"type\": \"programming\",\n        \"color\": \"#ffefaf\",\n        \"extensions\": [\n            \".hc\"\n        ],\n        \"tm_scope\": \"source.hc\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"language_id\": 928121743\n    },\n    \"Hosts File\": {\n        \"type\": \"data\",\n        \"color\": \"#308888\",\n        \"filenames\": [\n            \"HOSTS\",\n            \"hosts\",\n            \"hosts.txt\"\n        ],\n        \"aliases\": [\n            \"hosts\"\n        ],\n        \"tm_scope\": \"source.hosts\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 231021894\n    },\n    \"Hy\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#7790B2\",\n        \"extensions\": [\n            \".hy\"\n        ],\n        \"interpreters\": [\n            \"hy\"\n        ],\n        \"aliases\": [\n            \"hylang\"\n        ],\n        \"tm_scope\": \"source.hy\",\n        \"language_id\": 159\n    },\n    \"HyPhy\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".bf\"\n        ],\n        \"tm_scope\": \"none\",\n        \"language_id\": 160\n    },\n    \"IDL\": {\n        \"type\": \"programming\",\n        \"color\": \"#a3522f\",\n        \"extensions\": [\n            \".pro\",\n            \".dlm\"\n        ],\n        \"tm_scope\": \"source.idl\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"idl\",\n        \"codemirror_mime_type\": \"text/x-idl\",\n        \"language_id\": 161\n    },\n    \"IGOR Pro\": {\n        \"type\": \"programming\",\n        \"color\": \"#0000cc\",\n        \"extensions\": [\n            \".ipf\"\n        ],\n        \"aliases\": [\n            \"igor\",\n            \"igorpro\"\n        ],\n        \"tm_scope\": \"source.igor\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 162\n    },\n    \"INI\": {\n        \"type\": \"data\",\n        \"color\": \"#d1dbe0\",\n        \"extensions\": [\n            \".ini\",\n            \".cfg\",\n            \".cnf\",\n            \".dof\",\n            \".lektorproject\",\n            \".prefs\",\n            \".pro\",\n            \".properties\",\n            \".url\"\n        ],\n        \"filenames\": [\n            \".coveragerc\",\n            \".flake8\",\n            \".pylintrc\",\n            \"HOSTS\",\n            \"buildozer.spec\",\n            \"hosts\",\n            \"pylintrc\",\n            \"vlcrc\"\n        ],\n        \"tm_scope\": \"source.ini\",\n        \"aliases\": [\n            \"dosini\"\n        ],\n        \"ace_mode\": \"ini\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"language_id\": 163\n    },\n    \"IRC log\": {\n        \"type\": \"data\",\n        \"aliases\": [\n            \"irc\",\n            \"irc logs\"\n        ],\n        \"extensions\": [\n            \".irclog\",\n            \".weechatlog\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"mirc\",\n        \"codemirror_mime_type\": \"text/mirc\",\n        \"language_id\": 164\n    },\n    \"Idris\": {\n        \"type\": \"programming\",\n        \"color\": \"#b30000\",\n        \"extensions\": [\n            \".idr\",\n            \".lidr\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.idris\",\n        \"language_id\": 165\n    },\n    \"Ignore List\": {\n        \"type\": \"data\",\n        \"color\": \"#000000\",\n        \"aliases\": [\n            \"ignore\",\n            \"gitignore\",\n            \"git-ignore\"\n        ],\n        \"extensions\": [\n            \".gitignore\"\n        ],\n        \"filenames\": [\n            \".atomignore\",\n            \".babelignore\",\n            \".bzrignore\",\n            \".coffeelintignore\",\n            \".cvsignore\",\n            \".dockerignore\",\n            \".eleventyignore\",\n            \".eslintignore\",\n            \".gitignore\",\n            \".markdownlintignore\",\n            \".nodemonignore\",\n            \".npmignore\",\n            \".prettierignore\",\n            \".stylelintignore\",\n            \".vercelignore\",\n            \".vscodeignore\",\n            \"gitignore-global\",\n            \"gitignore_global\"\n        ],\n        \"ace_mode\": \"gitignore\",\n        \"tm_scope\": \"source.gitignore\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 74444240\n    },\n    \"ImageJ Macro\": {\n        \"type\": \"programming\",\n        \"color\": \"#99AAFF\",\n        \"aliases\": [\n            \"ijm\"\n        ],\n        \"extensions\": [\n            \".ijm\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"none\",\n        \"language_id\": 575143428\n    },\n    \"Imba\": {\n        \"type\": \"programming\",\n        \"color\": \"#16cec6\",\n        \"extensions\": [\n            \".imba\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.imba\",\n        \"language_id\": 1057618448\n    },\n    \"Inform 7\": {\n        \"type\": \"programming\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".ni\",\n            \".i7x\"\n        ],\n        \"tm_scope\": \"source.inform7\",\n        \"aliases\": [\n            \"i7\",\n            \"inform7\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 166\n    },\n    \"Ink\": {\n        \"type\": \"programming\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".ink\"\n        ],\n        \"tm_scope\": \"source.ink\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 838252715\n    },\n    \"Inno Setup\": {\n        \"type\": \"programming\",\n        \"color\": \"#264b99\",\n        \"extensions\": [\n            \".iss\",\n            \".isl\"\n        ],\n        \"tm_scope\": \"source.inno\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 167\n    },\n    \"Io\": {\n        \"type\": \"programming\",\n        \"color\": \"#a9188d\",\n        \"extensions\": [\n            \".io\"\n        ],\n        \"interpreters\": [\n            \"io\"\n        ],\n        \"tm_scope\": \"source.io\",\n        \"ace_mode\": \"io\",\n        \"language_id\": 168\n    },\n    \"Ioke\": {\n        \"type\": \"programming\",\n        \"color\": \"#078193\",\n        \"extensions\": [\n            \".ik\"\n        ],\n        \"interpreters\": [\n            \"ioke\"\n        ],\n        \"tm_scope\": \"source.ioke\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 169\n    },\n    \"Isabelle\": {\n        \"type\": \"programming\",\n        \"color\": \"#FEFE00\",\n        \"extensions\": [\n            \".thy\"\n        ],\n        \"tm_scope\": \"source.isabelle.theory\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 170\n    },\n    \"Isabelle ROOT\": {\n        \"type\": \"programming\",\n        \"color\": \"#FEFE00\",\n        \"group\": \"Isabelle\",\n        \"filenames\": [\n            \"ROOT\"\n        ],\n        \"tm_scope\": \"source.isabelle.root\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 171\n    },\n    \"J\": {\n        \"type\": \"programming\",\n        \"color\": \"#9EEDFF\",\n        \"extensions\": [\n            \".ijs\"\n        ],\n        \"interpreters\": [\n            \"jconsole\"\n        ],\n        \"tm_scope\": \"source.j\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 172\n    },\n    \"JAR Manifest\": {\n        \"type\": \"data\",\n        \"color\": \"#b07219\",\n        \"filenames\": [\n            \"MANIFEST.MF\"\n        ],\n        \"tm_scope\": \"source.yaml\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 447261135\n    },\n    \"JCL\": {\n        \"type\": \"programming\",\n        \"color\": \"#d90e09\",\n        \"extensions\": [\n            \".jcl\"\n        ],\n        \"tm_scope\": \"source.jcl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 316620079\n    },\n    \"JFlex\": {\n        \"type\": \"programming\",\n        \"color\": \"#DBCA00\",\n        \"group\": \"Lex\",\n        \"extensions\": [\n            \".flex\",\n            \".jflex\"\n        ],\n        \"tm_scope\": \"source.jflex\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 173\n    },\n    \"JSON\": {\n        \"type\": \"data\",\n        \"color\": \"#292929\",\n        \"tm_scope\": \"source.json\",\n        \"ace_mode\": \"json\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/json\",\n        \"aliases\": [\n            \"geojson\",\n            \"jsonl\",\n            \"sarif\",\n            \"topojson\"\n        ],\n        \"extensions\": [\n            \".json\",\n            \".4DForm\",\n            \".4DProject\",\n            \".avsc\",\n            \".geojson\",\n            \".gltf\",\n            \".har\",\n            \".ice\",\n            \".JSON-tmLanguage\",\n            \".jsonl\",\n            \".mcmeta\",\n            \".sarif\",\n            \".tfstate\",\n            \".tfstate.backup\",\n            \".topojson\",\n            \".webapp\",\n            \".webmanifest\",\n            \".yy\",\n            \".yyp\"\n        ],\n        \"filenames\": [\n            \".all-contributorsrc\",\n            \".arcconfig\",\n            \".auto-changelog\",\n            \".c8rc\",\n            \".htmlhintrc\",\n            \".imgbotconfig\",\n            \".nycrc\",\n            \".tern-config\",\n            \".tern-project\",\n            \".watchmanconfig\",\n            \"MODULE.bazel.lock\",\n            \"Pipfile.lock\",\n            \"composer.lock\",\n            \"deno.lock\",\n            \"flake.lock\",\n            \"mcmod.info\"\n        ],\n        \"language_id\": 174\n    },\n    \"JSON with Comments\": {\n        \"type\": \"data\",\n        \"color\": \"#292929\",\n        \"group\": \"JSON\",\n        \"tm_scope\": \"source.js\",\n        \"ace_mode\": \"javascript\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"text/javascript\",\n        \"aliases\": [\n            \"jsonc\"\n        ],\n        \"extensions\": [\n            \".jsonc\",\n            \".code-snippets\",\n            \".code-workspace\",\n            \".sublime-build\",\n            \".sublime-color-scheme\",\n            \".sublime-commands\",\n            \".sublime-completions\",\n            \".sublime-keymap\",\n            \".sublime-macro\",\n            \".sublime-menu\",\n            \".sublime-mousemap\",\n            \".sublime-project\",\n            \".sublime-settings\",\n            \".sublime-theme\",\n            \".sublime-workspace\",\n            \".sublime_metrics\",\n            \".sublime_session\"\n        ],\n        \"filenames\": [\n            \".babelrc\",\n            \".devcontainer.json\",\n            \".eslintrc.json\",\n            \".jscsrc\",\n            \".jshintrc\",\n            \".jslintrc\",\n            \".swcrc\",\n            \"api-extractor.json\",\n            \"devcontainer.json\",\n            \"jsconfig.json\",\n            \"language-configuration.json\",\n            \"tsconfig.json\",\n            \"tslint.json\"\n        ],\n        \"language_id\": 423\n    },\n    \"JSON5\": {\n        \"type\": \"data\",\n        \"color\": \"#267CB9\",\n        \"extensions\": [\n            \".json5\"\n        ],\n        \"tm_scope\": \"source.js\",\n        \"ace_mode\": \"javascript\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/json\",\n        \"language_id\": 175\n    },\n    \"JSONLD\": {\n        \"type\": \"data\",\n        \"color\": \"#0c479c\",\n        \"extensions\": [\n            \".jsonld\"\n        ],\n        \"tm_scope\": \"source.js\",\n        \"ace_mode\": \"javascript\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/json\",\n        \"language_id\": 176\n    },\n    \"JSONiq\": {\n        \"color\": \"#40d47e\",\n        \"type\": \"programming\",\n        \"ace_mode\": \"jsoniq\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/json\",\n        \"extensions\": [\n            \".jq\"\n        ],\n        \"tm_scope\": \"source.jsoniq\",\n        \"language_id\": 177\n    },\n    \"Janet\": {\n        \"type\": \"programming\",\n        \"color\": \"#0886a5\",\n        \"extensions\": [\n            \".janet\"\n        ],\n        \"tm_scope\": \"source.janet\",\n        \"ace_mode\": \"scheme\",\n        \"codemirror_mode\": \"scheme\",\n        \"codemirror_mime_type\": \"text/x-scheme\",\n        \"interpreters\": [\n            \"janet\"\n        ],\n        \"language_id\": 1028705371\n    },\n    \"Jasmin\": {\n        \"type\": \"programming\",\n        \"color\": \"#d03600\",\n        \"ace_mode\": \"java\",\n        \"extensions\": [\n            \".j\"\n        ],\n        \"tm_scope\": \"source.jasmin\",\n        \"language_id\": 180\n    },\n    \"Java\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.java\",\n        \"ace_mode\": \"java\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-java\",\n        \"color\": \"#b07219\",\n        \"extensions\": [\n            \".java\",\n            \".jav\",\n            \".jsh\"\n        ],\n        \"language_id\": 181\n    },\n    \"Java Properties\": {\n        \"type\": \"data\",\n        \"color\": \"#2A6277\",\n        \"extensions\": [\n            \".properties\"\n        ],\n        \"tm_scope\": \"source.java-properties\",\n        \"ace_mode\": \"properties\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"language_id\": 519377561\n    },\n    \"Java Server Pages\": {\n        \"type\": \"programming\",\n        \"color\": \"#2A6277\",\n        \"group\": \"Java\",\n        \"aliases\": [\n            \"jsp\"\n        ],\n        \"extensions\": [\n            \".jsp\",\n            \".tag\"\n        ],\n        \"tm_scope\": \"text.html.jsp\",\n        \"ace_mode\": \"jsp\",\n        \"codemirror_mode\": \"htmlembedded\",\n        \"codemirror_mime_type\": \"application/x-jsp\",\n        \"language_id\": 182\n    },\n    \"Java Template Engine\": {\n        \"type\": \"programming\",\n        \"color\": \"#2A6277\",\n        \"group\": \"Java\",\n        \"aliases\": [\n            \"jte\"\n        ],\n        \"extensions\": [\n            \".jte\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"text.html.jte\",\n        \"language_id\": 599494012\n    },\n    \"JavaScript\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.js\",\n        \"ace_mode\": \"javascript\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"text/javascript\",\n        \"color\": \"#f1e05a\",\n        \"aliases\": [\n            \"js\",\n            \"node\"\n        ],\n        \"extensions\": [\n            \".js\",\n            \"._js\",\n            \".bones\",\n            \".cjs\",\n            \".es\",\n            \".es6\",\n            \".frag\",\n            \".gs\",\n            \".jake\",\n            \".javascript\",\n            \".jsb\",\n            \".jscad\",\n            \".jsfl\",\n            \".jslib\",\n            \".jsm\",\n            \".jspre\",\n            \".jss\",\n            \".jsx\",\n            \".mjs\",\n            \".njs\",\n            \".pac\",\n            \".sjs\",\n            \".ssjs\",\n            \".xsjs\",\n            \".xsjslib\"\n        ],\n        \"filenames\": [\n            \"Jakefile\"\n        ],\n        \"interpreters\": [\n            \"chakra\",\n            \"d8\",\n            \"gjs\",\n            \"js\",\n            \"node\",\n            \"nodejs\",\n            \"qjs\",\n            \"rhino\",\n            \"v8\",\n            \"v8-shell\"\n        ],\n        \"language_id\": 183\n    },\n    \"JavaScript+ERB\": {\n        \"type\": \"programming\",\n        \"color\": \"#f1e05a\",\n        \"tm_scope\": \"source.js\",\n        \"group\": \"JavaScript\",\n        \"extensions\": [\n            \".js.erb\"\n        ],\n        \"ace_mode\": \"javascript\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/javascript\",\n        \"language_id\": 914318960\n    },\n    \"Jest Snapshot\": {\n        \"type\": \"data\",\n        \"color\": \"#15c213\",\n        \"tm_scope\": \"source.jest.snap\",\n        \"extensions\": [\n            \".snap\"\n        ],\n        \"ace_mode\": \"javascript\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/javascript\",\n        \"language_id\": 774635084\n    },\n    \"JetBrains MPS\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"mps\"\n        ],\n        \"color\": \"#21D789\",\n        \"extensions\": [\n            \".mps\",\n            \".mpl\",\n            \".msd\"\n        ],\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"tm_scope\": \"none\",\n        \"language_id\": 465165328\n    },\n    \"Jinja\": {\n        \"type\": \"markup\",\n        \"color\": \"#a52a22\",\n        \"aliases\": [\n            \"django\",\n            \"html+django\",\n            \"html+jinja\",\n            \"htmldjango\"\n        ],\n        \"extensions\": [\n            \".jinja\",\n            \".j2\",\n            \".jinja2\"\n        ],\n        \"tm_scope\": \"text.html.django\",\n        \"ace_mode\": \"django\",\n        \"codemirror_mode\": \"django\",\n        \"codemirror_mime_type\": \"text/x-django\",\n        \"language_id\": 147\n    },\n    \"Jison\": {\n        \"type\": \"programming\",\n        \"color\": \"#56b3cb\",\n        \"group\": \"Yacc\",\n        \"extensions\": [\n            \".jison\"\n        ],\n        \"tm_scope\": \"source.jison\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 284531423\n    },\n    \"Jison Lex\": {\n        \"type\": \"programming\",\n        \"color\": \"#56b3cb\",\n        \"group\": \"Lex\",\n        \"extensions\": [\n            \".jisonlex\"\n        ],\n        \"tm_scope\": \"source.jisonlex\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 406395330\n    },\n    \"Jolie\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".ol\",\n            \".iol\"\n        ],\n        \"interpreters\": [\n            \"jolie\"\n        ],\n        \"color\": \"#843179\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.jolie\",\n        \"language_id\": 998078858\n    },\n    \"Jsonnet\": {\n        \"color\": \"#0064bd\",\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".jsonnet\",\n            \".libsonnet\"\n        ],\n        \"tm_scope\": \"source.jsonnet\",\n        \"language_id\": 664885656\n    },\n    \"Julia\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".jl\"\n        ],\n        \"interpreters\": [\n            \"julia\"\n        ],\n        \"color\": \"#a270ba\",\n        \"tm_scope\": \"source.julia\",\n        \"ace_mode\": \"julia\",\n        \"codemirror_mode\": \"julia\",\n        \"codemirror_mime_type\": \"text/x-julia\",\n        \"language_id\": 184\n    },\n    \"Julia REPL\": {\n        \"type\": \"programming\",\n        \"color\": \"#a270ba\",\n        \"tm_scope\": \"source.julia.console\",\n        \"group\": \"Julia\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 220689142\n    },\n    \"Jupyter Notebook\": {\n        \"type\": \"markup\",\n        \"ace_mode\": \"json\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/json\",\n        \"tm_scope\": \"source.json\",\n        \"color\": \"#DA5B0B\",\n        \"extensions\": [\n            \".ipynb\"\n        ],\n        \"filenames\": [\n            \"Notebook\"\n        ],\n        \"aliases\": [\n            \"IPython Notebook\"\n        ],\n        \"language_id\": 185\n    },\n    \"Just\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"Justfile\"\n        ],\n        \"color\": \"#384d54\",\n        \"tm_scope\": \"source.just\",\n        \"filenames\": [\n            \".JUSTFILE\",\n            \".Justfile\",\n            \".justfile\",\n            \"JUSTFILE\",\n            \"Justfile\",\n            \"justfile\"\n        ],\n        \"extensions\": [\n            \".just\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 128447695\n    },\n    \"KRL\": {\n        \"type\": \"programming\",\n        \"color\": \"#28430A\",\n        \"extensions\": [\n            \".krl\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 186\n    },\n    \"Kaitai Struct\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"ksy\"\n        ],\n        \"ace_mode\": \"yaml\",\n        \"codemirror_mode\": \"yaml\",\n        \"codemirror_mime_type\": \"text/x-yaml\",\n        \"color\": \"#773b37\",\n        \"extensions\": [\n            \".ksy\"\n        ],\n        \"tm_scope\": \"source.yaml\",\n        \"language_id\": 818804755\n    },\n    \"KakouneScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#6f8042\",\n        \"tm_scope\": \"source.kakscript\",\n        \"aliases\": [\n            \"kak\",\n            \"kakscript\"\n        ],\n        \"extensions\": [\n            \".kak\"\n        ],\n        \"filenames\": [\n            \"kakrc\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 603336474\n    },\n    \"KerboScript\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".ks\"\n        ],\n        \"color\": \"#41adf0\",\n        \"tm_scope\": \"source.kerboscript\",\n        \"language_id\": 59716426\n    },\n    \"KiCad Layout\": {\n        \"type\": \"data\",\n        \"color\": \"#2f4aab\",\n        \"aliases\": [\n            \"pcbnew\"\n        ],\n        \"extensions\": [\n            \".kicad_pcb\",\n            \".kicad_mod\",\n            \".kicad_wks\"\n        ],\n        \"filenames\": [\n            \"fp-lib-table\"\n        ],\n        \"tm_scope\": \"source.pcb.sexp\",\n        \"ace_mode\": \"lisp\",\n        \"codemirror_mode\": \"commonlisp\",\n        \"codemirror_mime_type\": \"text/x-common-lisp\",\n        \"language_id\": 187\n    },\n    \"KiCad Legacy Layout\": {\n        \"type\": \"data\",\n        \"color\": \"#2f4aab\",\n        \"extensions\": [\n            \".brd\"\n        ],\n        \"tm_scope\": \"source.pcb.board\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 140848857\n    },\n    \"KiCad Schematic\": {\n        \"type\": \"data\",\n        \"color\": \"#2f4aab\",\n        \"aliases\": [\n            \"eeschema schematic\"\n        ],\n        \"extensions\": [\n            \".kicad_sch\",\n            \".sch\"\n        ],\n        \"tm_scope\": \"source.pcb.schematic\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 622447435\n    },\n    \"Kickstart\": {\n        \"type\": \"data\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".ks\"\n        ],\n        \"tm_scope\": \"source.kickstart\",\n        \"language_id\": 692635484\n    },\n    \"Kit\": {\n        \"type\": \"markup\",\n        \"ace_mode\": \"html\",\n        \"codemirror_mode\": \"htmlmixed\",\n        \"codemirror_mime_type\": \"text/html\",\n        \"extensions\": [\n            \".kit\"\n        ],\n        \"tm_scope\": \"text.html.basic\",\n        \"language_id\": 188\n    },\n    \"Kotlin\": {\n        \"type\": \"programming\",\n        \"color\": \"#A97BFF\",\n        \"extensions\": [\n            \".kt\",\n            \".ktm\",\n            \".kts\"\n        ],\n        \"tm_scope\": \"source.kotlin\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-kotlin\",\n        \"language_id\": 189\n    },\n    \"Kusto\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".csl\",\n            \".kql\"\n        ],\n        \"tm_scope\": \"source.kusto\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 225697190\n    },\n    \"LFE\": {\n        \"type\": \"programming\",\n        \"color\": \"#4C3023\",\n        \"extensions\": [\n            \".lfe\"\n        ],\n        \"tm_scope\": \"source.lisp\",\n        \"ace_mode\": \"lisp\",\n        \"codemirror_mode\": \"commonlisp\",\n        \"codemirror_mime_type\": \"text/x-common-lisp\",\n        \"language_id\": 190\n    },\n    \"LLVM\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".ll\"\n        ],\n        \"tm_scope\": \"source.llvm\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#185619\",\n        \"language_id\": 191\n    },\n    \"LOLCODE\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".lol\"\n        ],\n        \"color\": \"#cc9900\",\n        \"tm_scope\": \"source.lolcode\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 192\n    },\n    \"LSL\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.lsl\",\n        \"ace_mode\": \"lsl\",\n        \"extensions\": [\n            \".lsl\",\n            \".lslp\"\n        ],\n        \"interpreters\": [\n            \"lsl\"\n        ],\n        \"color\": \"#3d9970\",\n        \"language_id\": 193\n    },\n    \"LTspice Symbol\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".asy\"\n        ],\n        \"tm_scope\": \"source.ltspice.symbol\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"spreadsheet\",\n        \"codemirror_mime_type\": \"text/x-spreadsheet\",\n        \"language_id\": 1013566805\n    },\n    \"LabVIEW\": {\n        \"type\": \"programming\",\n        \"color\": \"#fede06\",\n        \"extensions\": [\n            \".lvproj\",\n            \".lvclass\",\n            \".lvlib\"\n        ],\n        \"tm_scope\": \"text.xml\",\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"language_id\": 194\n    },\n    \"Lark\": {\n        \"type\": \"data\",\n        \"color\": \"#2980B9\",\n        \"extensions\": [\n            \".lark\"\n        ],\n        \"tm_scope\": \"source.lark\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"ebnf\",\n        \"codemirror_mime_type\": \"text/x-ebnf\",\n        \"language_id\": 758480799\n    },\n    \"Lasso\": {\n        \"type\": \"programming\",\n        \"color\": \"#999999\",\n        \"extensions\": [\n            \".lasso\",\n            \".las\",\n            \".lasso8\",\n            \".lasso9\"\n        ],\n        \"tm_scope\": \"file.lasso\",\n        \"aliases\": [\n            \"lassoscript\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 195\n    },\n    \"Latte\": {\n        \"type\": \"markup\",\n        \"color\": \"#f2a542\",\n        \"extensions\": [\n            \".latte\"\n        ],\n        \"tm_scope\": \"text.html.smarty\",\n        \"ace_mode\": \"smarty\",\n        \"codemirror_mode\": \"smarty\",\n        \"codemirror_mime_type\": \"text/x-smarty\",\n        \"language_id\": 196\n    },\n    \"Lean\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".lean\",\n            \".hlean\"\n        ],\n        \"tm_scope\": \"source.lean\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 197\n    },\n    \"Lean 4\": {\n        \"type\": \"programming\",\n        \"group\": \"Lean\",\n        \"extensions\": [\n            \".lean\"\n        ],\n        \"tm_scope\": \"source.lean4\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 455147478\n    },\n    \"Less\": {\n        \"type\": \"markup\",\n        \"color\": \"#1d365d\",\n        \"aliases\": [\n            \"less-css\"\n        ],\n        \"extensions\": [\n            \".less\"\n        ],\n        \"tm_scope\": \"source.css.less\",\n        \"ace_mode\": \"less\",\n        \"codemirror_mode\": \"css\",\n        \"codemirror_mime_type\": \"text/css\",\n        \"language_id\": 198\n    },\n    \"Lex\": {\n        \"type\": \"programming\",\n        \"color\": \"#DBCA00\",\n        \"aliases\": [\n            \"flex\"\n        ],\n        \"extensions\": [\n            \".l\",\n            \".lex\"\n        ],\n        \"filenames\": [\n            \"Lexer.x\",\n            \"lexer.x\"\n        ],\n        \"tm_scope\": \"source.lex\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 199\n    },\n    \"LigoLANG\": {\n        \"type\": \"programming\",\n        \"color\": \"#0e74ff\",\n        \"extensions\": [\n            \".ligo\"\n        ],\n        \"tm_scope\": \"source.ligo\",\n        \"ace_mode\": \"pascal\",\n        \"codemirror_mode\": \"pascal\",\n        \"codemirror_mime_type\": \"text/x-pascal\",\n        \"group\": \"LigoLANG\",\n        \"language_id\": 1040646257\n    },\n    \"LilyPond\": {\n        \"type\": \"programming\",\n        \"color\": \"#9ccc7c\",\n        \"extensions\": [\n            \".ly\",\n            \".ily\"\n        ],\n        \"tm_scope\": \"source.lilypond\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 200\n    },\n    \"Limbo\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".b\",\n            \".m\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 201\n    },\n    \"Linker Script\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".ld\",\n            \".lds\",\n            \".x\"\n        ],\n        \"filenames\": [\n            \"ld.script\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 202\n    },\n    \"Linux Kernel Module\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".mod\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 203\n    },\n    \"Liquid\": {\n        \"type\": \"markup\",\n        \"color\": \"#67b8de\",\n        \"extensions\": [\n            \".liquid\"\n        ],\n        \"tm_scope\": \"text.html.liquid\",\n        \"ace_mode\": \"liquid\",\n        \"language_id\": 204\n    },\n    \"Literate Agda\": {\n        \"type\": \"programming\",\n        \"color\": \"#315665\",\n        \"group\": \"Agda\",\n        \"extensions\": [\n            \".lagda\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 205\n    },\n    \"Literate CoffeeScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#244776\",\n        \"tm_scope\": \"source.litcoffee\",\n        \"group\": \"CoffeeScript\",\n        \"ace_mode\": \"text\",\n        \"wrap\": true,\n        \"aliases\": [\n            \"litcoffee\"\n        ],\n        \"extensions\": [\n            \".litcoffee\",\n            \".coffee.md\"\n        ],\n        \"language_id\": 206\n    },\n    \"Literate Haskell\": {\n        \"type\": \"programming\",\n        \"color\": \"#5e5086\",\n        \"group\": \"Haskell\",\n        \"aliases\": [\n            \"lhaskell\",\n            \"lhs\"\n        ],\n        \"extensions\": [\n            \".lhs\"\n        ],\n        \"tm_scope\": \"text.tex.latex.haskell\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"haskell-literate\",\n        \"codemirror_mime_type\": \"text/x-literate-haskell\",\n        \"language_id\": 207\n    },\n    \"LiveCode Script\": {\n        \"type\": \"programming\",\n        \"color\": \"#0c5ba5\",\n        \"extensions\": [\n            \".livecodescript\"\n        ],\n        \"tm_scope\": \"source.livecodescript\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 891017\n    },\n    \"LiveScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#499886\",\n        \"aliases\": [\n            \"live-script\",\n            \"ls\"\n        ],\n        \"extensions\": [\n            \".ls\",\n            \"._ls\"\n        ],\n        \"filenames\": [\n            \"Slakefile\"\n        ],\n        \"tm_scope\": \"source.livescript\",\n        \"ace_mode\": \"livescript\",\n        \"codemirror_mode\": \"livescript\",\n        \"codemirror_mime_type\": \"text/x-livescript\",\n        \"language_id\": 208\n    },\n    \"Logos\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".xm\",\n            \".x\",\n            \".xi\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.logos\",\n        \"language_id\": 209\n    },\n    \"Logtalk\": {\n        \"type\": \"programming\",\n        \"color\": \"#295b9a\",\n        \"extensions\": [\n            \".lgt\",\n            \".logtalk\"\n        ],\n        \"tm_scope\": \"source.logtalk\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 210\n    },\n    \"LookML\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"yaml\",\n        \"codemirror_mode\": \"yaml\",\n        \"codemirror_mime_type\": \"text/x-yaml\",\n        \"color\": \"#652B81\",\n        \"extensions\": [\n            \".lkml\",\n            \".lookml\"\n        ],\n        \"tm_scope\": \"source.yaml\",\n        \"language_id\": 211\n    },\n    \"LoomScript\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".ls\"\n        ],\n        \"tm_scope\": \"source.loomscript\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 212\n    },\n    \"Lua\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.lua\",\n        \"ace_mode\": \"lua\",\n        \"codemirror_mode\": \"lua\",\n        \"codemirror_mime_type\": \"text/x-lua\",\n        \"color\": \"#000080\",\n        \"extensions\": [\n            \".lua\",\n            \".fcgi\",\n            \".nse\",\n            \".p8\",\n            \".pd_lua\",\n            \".rbxs\",\n            \".rockspec\",\n            \".wlua\"\n        ],\n        \"filenames\": [\n            \".luacheckrc\"\n        ],\n        \"interpreters\": [\n            \"lua\"\n        ],\n        \"language_id\": 213\n    },\n    \"Luau\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.luau\",\n        \"ace_mode\": \"lua\",\n        \"codemirror_mode\": \"lua\",\n        \"codemirror_mime_type\": \"text/x-lua\",\n        \"color\": \"#00A2FF\",\n        \"extensions\": [\n            \".luau\"\n        ],\n        \"interpreters\": [\n            \"luau\"\n        ],\n        \"language_id\": 365050359\n    },\n    \"M\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"mumps\"\n        ],\n        \"extensions\": [\n            \".mumps\",\n            \".m\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"mumps\",\n        \"codemirror_mime_type\": \"text/x-mumps\",\n        \"language_id\": 214,\n        \"tm_scope\": \"none\"\n    },\n    \"M4\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".m4\",\n            \".mc\"\n        ],\n        \"tm_scope\": \"source.m4\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 215\n    },\n    \"M4Sugar\": {\n        \"type\": \"programming\",\n        \"group\": \"M4\",\n        \"aliases\": [\n            \"autoconf\"\n        ],\n        \"extensions\": [\n            \".m4\"\n        ],\n        \"filenames\": [\n            \"configure.ac\"\n        ],\n        \"tm_scope\": \"source.m4\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 216\n    },\n    \"MATLAB\": {\n        \"type\": \"programming\",\n        \"color\": \"#e16737\",\n        \"aliases\": [\n            \"octave\"\n        ],\n        \"extensions\": [\n            \".matlab\",\n            \".m\"\n        ],\n        \"tm_scope\": \"source.matlab\",\n        \"ace_mode\": \"matlab\",\n        \"codemirror_mode\": \"octave\",\n        \"codemirror_mime_type\": \"text/x-octave\",\n        \"language_id\": 225\n    },\n    \"MAXScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#00a6a6\",\n        \"extensions\": [\n            \".ms\",\n            \".mcr\"\n        ],\n        \"tm_scope\": \"source.maxscript\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 217\n    },\n    \"MDX\": {\n        \"type\": \"markup\",\n        \"color\": \"#fcb32c\",\n        \"ace_mode\": \"markdown\",\n        \"codemirror_mode\": \"gfm\",\n        \"codemirror_mime_type\": \"text/x-gfm\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".mdx\"\n        ],\n        \"tm_scope\": \"source.mdx\",\n        \"language_id\": 512838272\n    },\n    \"MLIR\": {\n        \"type\": \"programming\",\n        \"color\": \"#5EC8DB\",\n        \"extensions\": [\n            \".mlir\"\n        ],\n        \"tm_scope\": \"source.mlir\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 448253929\n    },\n    \"MQL4\": {\n        \"type\": \"programming\",\n        \"color\": \"#62A8D6\",\n        \"extensions\": [\n            \".mq4\",\n            \".mqh\"\n        ],\n        \"tm_scope\": \"source.mql5\",\n        \"ace_mode\": \"c_cpp\",\n        \"language_id\": 426\n    },\n    \"MQL5\": {\n        \"type\": \"programming\",\n        \"color\": \"#4A76B8\",\n        \"extensions\": [\n            \".mq5\",\n            \".mqh\"\n        ],\n        \"tm_scope\": \"source.mql5\",\n        \"ace_mode\": \"c_cpp\",\n        \"language_id\": 427\n    },\n    \"MTML\": {\n        \"type\": \"markup\",\n        \"color\": \"#b7e1f4\",\n        \"extensions\": [\n            \".mtml\"\n        ],\n        \"tm_scope\": \"text.html.basic\",\n        \"ace_mode\": \"html\",\n        \"codemirror_mode\": \"htmlmixed\",\n        \"codemirror_mime_type\": \"text/html\",\n        \"language_id\": 218\n    },\n    \"MUF\": {\n        \"type\": \"programming\",\n        \"group\": \"Forth\",\n        \"extensions\": [\n            \".muf\",\n            \".m\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"forth\",\n        \"codemirror_mode\": \"forth\",\n        \"codemirror_mime_type\": \"text/x-forth\",\n        \"language_id\": 219\n    },\n    \"Macaulay2\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".m2\"\n        ],\n        \"aliases\": [\n            \"m2\"\n        ],\n        \"interpreters\": [\n            \"M2\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.m2\",\n        \"color\": \"#d8ffff\",\n        \"language_id\": 34167825\n    },\n    \"Makefile\": {\n        \"type\": \"programming\",\n        \"color\": \"#427819\",\n        \"aliases\": [\n            \"bsdmake\",\n            \"make\",\n            \"mf\"\n        ],\n        \"extensions\": [\n            \".mak\",\n            \".d\",\n            \".make\",\n            \".makefile\",\n            \".mk\",\n            \".mkfile\"\n        ],\n        \"filenames\": [\n            \"BSDmakefile\",\n            \"GNUmakefile\",\n            \"Kbuild\",\n            \"Makefile\",\n            \"Makefile.am\",\n            \"Makefile.boot\",\n            \"Makefile.frag\",\n            \"Makefile.in\",\n            \"Makefile.inc\",\n            \"Makefile.wat\",\n            \"makefile\",\n            \"makefile.sco\",\n            \"mkfile\"\n        ],\n        \"interpreters\": [\n            \"make\"\n        ],\n        \"tm_scope\": \"source.makefile\",\n        \"ace_mode\": \"makefile\",\n        \"codemirror_mode\": \"cmake\",\n        \"codemirror_mime_type\": \"text/x-cmake\",\n        \"language_id\": 220\n    },\n    \"Mako\": {\n        \"type\": \"programming\",\n        \"color\": \"#7e858d\",\n        \"extensions\": [\n            \".mako\",\n            \".mao\"\n        ],\n        \"tm_scope\": \"text.html.mako\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 221\n    },\n    \"Markdown\": {\n        \"type\": \"prose\",\n        \"color\": \"#083fa1\",\n        \"aliases\": [\n            \"md\",\n            \"pandoc\"\n        ],\n        \"ace_mode\": \"markdown\",\n        \"codemirror_mode\": \"gfm\",\n        \"codemirror_mime_type\": \"text/x-gfm\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".md\",\n            \".livemd\",\n            \".markdown\",\n            \".mdown\",\n            \".mdwn\",\n            \".mkd\",\n            \".mkdn\",\n            \".mkdown\",\n            \".ronn\",\n            \".scd\",\n            \".workbook\"\n        ],\n        \"filenames\": [\n            \"contents.lr\"\n        ],\n        \"tm_scope\": \"text.md\",\n        \"language_id\": 222\n    },\n    \"Marko\": {\n        \"type\": \"markup\",\n        \"color\": \"#42bff2\",\n        \"tm_scope\": \"text.marko\",\n        \"extensions\": [\n            \".marko\"\n        ],\n        \"aliases\": [\n            \"markojs\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"htmlmixed\",\n        \"codemirror_mime_type\": \"text/html\",\n        \"language_id\": 932782397\n    },\n    \"Mask\": {\n        \"type\": \"markup\",\n        \"color\": \"#f97732\",\n        \"ace_mode\": \"mask\",\n        \"extensions\": [\n            \".mask\"\n        ],\n        \"tm_scope\": \"source.mask\",\n        \"language_id\": 223\n    },\n    \"Mathematica\": {\n        \"type\": \"programming\",\n        \"color\": \"#dd1100\",\n        \"extensions\": [\n            \".mathematica\",\n            \".cdf\",\n            \".m\",\n            \".ma\",\n            \".mt\",\n            \".nb\",\n            \".nbp\",\n            \".wl\",\n            \".wlt\"\n        ],\n        \"aliases\": [\n            \"mma\",\n            \"wolfram\",\n            \"wolfram language\",\n            \"wolfram lang\",\n            \"wl\"\n        ],\n        \"tm_scope\": \"source.mathematica\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"mathematica\",\n        \"codemirror_mime_type\": \"text/x-mathematica\",\n        \"language_id\": 224\n    },\n    \"Maven POM\": {\n        \"type\": \"data\",\n        \"group\": \"XML\",\n        \"tm_scope\": \"text.xml.pom\",\n        \"filenames\": [\n            \"pom.xml\"\n        ],\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"language_id\": 226\n    },\n    \"Max\": {\n        \"type\": \"programming\",\n        \"color\": \"#c4a79c\",\n        \"aliases\": [\n            \"max/msp\",\n            \"maxmsp\"\n        ],\n        \"extensions\": [\n            \".maxpat\",\n            \".maxhelp\",\n            \".maxproj\",\n            \".mxt\",\n            \".pat\"\n        ],\n        \"tm_scope\": \"source.json\",\n        \"ace_mode\": \"json\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/json\",\n        \"language_id\": 227\n    },\n    \"Mercury\": {\n        \"type\": \"programming\",\n        \"color\": \"#ff2b2b\",\n        \"ace_mode\": \"prolog\",\n        \"interpreters\": [\n            \"mmi\"\n        ],\n        \"extensions\": [\n            \".m\",\n            \".moo\"\n        ],\n        \"tm_scope\": \"source.mercury\",\n        \"language_id\": 229\n    },\n    \"Mermaid\": {\n        \"type\": \"markup\",\n        \"color\": \"#ff3670\",\n        \"aliases\": [\n            \"mermaid example\"\n        ],\n        \"extensions\": [\n            \".mmd\",\n            \".mermaid\"\n        ],\n        \"tm_scope\": \"source.mermaid\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 385992043\n    },\n    \"Meson\": {\n        \"type\": \"programming\",\n        \"color\": \"#007800\",\n        \"filenames\": [\n            \"meson.build\",\n            \"meson_options.txt\"\n        ],\n        \"tm_scope\": \"source.meson\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 799141244\n    },\n    \"Metal\": {\n        \"type\": \"programming\",\n        \"color\": \"#8f14e9\",\n        \"extensions\": [\n            \".metal\"\n        ],\n        \"tm_scope\": \"source.c++\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"language_id\": 230\n    },\n    \"Microsoft Developer Studio Project\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".dsp\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 800983837\n    },\n    \"Microsoft Visual Studio Solution\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".sln\"\n        ],\n        \"tm_scope\": \"source.solution\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 849523096\n    },\n    \"MiniD\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".minid\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 231\n    },\n    \"MiniYAML\": {\n        \"type\": \"data\",\n        \"color\": \"#ff1111\",\n        \"tm_scope\": \"source.miniyaml\",\n        \"extensions\": [\n            \".yaml\",\n            \".yml\"\n        ],\n        \"ace_mode\": \"yaml\",\n        \"codemirror_mode\": \"yaml\",\n        \"codemirror_mime_type\": \"text/x-yaml\",\n        \"language_id\": 4896465\n    },\n    \"Mint\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".mint\"\n        ],\n        \"ace_mode\": \"text\",\n        \"color\": \"#02b046\",\n        \"tm_scope\": \"source.mint\",\n        \"language_id\": 968740319\n    },\n    \"Mirah\": {\n        \"type\": \"programming\",\n        \"color\": \"#c7a938\",\n        \"extensions\": [\n            \".druby\",\n            \".duby\",\n            \".mirah\"\n        ],\n        \"tm_scope\": \"source.ruby\",\n        \"ace_mode\": \"ruby\",\n        \"codemirror_mode\": \"ruby\",\n        \"codemirror_mime_type\": \"text/x-ruby\",\n        \"language_id\": 232\n    },\n    \"Modelica\": {\n        \"type\": \"programming\",\n        \"color\": \"#de1d31\",\n        \"extensions\": [\n            \".mo\"\n        ],\n        \"tm_scope\": \"source.modelica\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"modelica\",\n        \"codemirror_mime_type\": \"text/x-modelica\",\n        \"language_id\": 233\n    },\n    \"Modula-2\": {\n        \"type\": \"programming\",\n        \"color\": \"#10253f\",\n        \"extensions\": [\n            \".mod\"\n        ],\n        \"tm_scope\": \"source.modula2\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 234\n    },\n    \"Modula-3\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".i3\",\n            \".ig\",\n            \".m3\",\n            \".mg\"\n        ],\n        \"color\": \"#223388\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.modula-3\",\n        \"language_id\": 564743864\n    },\n    \"Module Management System\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".mms\",\n            \".mmk\"\n        ],\n        \"filenames\": [\n            \"descrip.mmk\",\n            \"descrip.mms\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 235\n    },\n    \"Mojo\": {\n        \"type\": \"programming\",\n        \"color\": \"#ff4c1f\",\n        \"extensions\": [\n            \".mojo\"\n        ],\n        \"ace_mode\": \"python\",\n        \"codemirror_mode\": \"python\",\n        \"codemirror_mime_type\": \"text/x-python\",\n        \"tm_scope\": \"source.mojo\",\n        \"language_id\": 1045019587\n    },\n    \"Monkey\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".monkey\",\n            \".monkey2\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.monkey\",\n        \"language_id\": 236\n    },\n    \"Monkey C\": {\n        \"type\": \"programming\",\n        \"color\": \"#8D6747\",\n        \"extensions\": [\n            \".mc\"\n        ],\n        \"tm_scope\": \"source.mc\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"language_id\": 231751931\n    },\n    \"Moocode\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".moo\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 237\n    },\n    \"MoonScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#ff4585\",\n        \"extensions\": [\n            \".moon\"\n        ],\n        \"interpreters\": [\n            \"moon\"\n        ],\n        \"tm_scope\": \"source.moonscript\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 238\n    },\n    \"Motoko\": {\n        \"type\": \"programming\",\n        \"color\": \"#fbb03b\",\n        \"extensions\": [\n            \".mo\"\n        ],\n        \"tm_scope\": \"source.mo\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 202937027\n    },\n    \"Motorola 68K Assembly\": {\n        \"type\": \"programming\",\n        \"color\": \"#005daa\",\n        \"group\": \"Assembly\",\n        \"aliases\": [\n            \"m68k\"\n        ],\n        \"extensions\": [\n            \".asm\",\n            \".i\",\n            \".inc\",\n            \".s\",\n            \".x68\"\n        ],\n        \"tm_scope\": \"source.m68k\",\n        \"ace_mode\": \"assembly_x86\",\n        \"language_id\": 477582706\n    },\n    \"Move\": {\n        \"type\": \"programming\",\n        \"color\": \"#4a137a\",\n        \"extensions\": [\n            \".move\"\n        ],\n        \"tm_scope\": \"source.move\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 638334599\n    },\n    \"Muse\": {\n        \"type\": \"prose\",\n        \"extensions\": [\n            \".muse\"\n        ],\n        \"tm_scope\": \"text.muse\",\n        \"ace_mode\": \"text\",\n        \"wrap\": true,\n        \"language_id\": 474864066,\n        \"aliases\": [\n            \"amusewiki\",\n            \"emacs muse\"\n        ]\n    },\n    \"Mustache\": {\n        \"type\": \"markup\",\n        \"color\": \"#724b3b\",\n        \"extensions\": [\n            \".mustache\"\n        ],\n        \"tm_scope\": \"text.html.smarty\",\n        \"ace_mode\": \"smarty\",\n        \"codemirror_mode\": \"smarty\",\n        \"codemirror_mime_type\": \"text/x-smarty\",\n        \"language_id\": 638334590\n    },\n    \"Myghty\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".myt\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 239\n    },\n    \"NASL\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".nasl\",\n            \".inc\"\n        ],\n        \"tm_scope\": \"source.nasl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 171666519\n    },\n    \"NCL\": {\n        \"type\": \"programming\",\n        \"color\": \"#28431f\",\n        \"extensions\": [\n            \".ncl\"\n        ],\n        \"tm_scope\": \"source.ncl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 240\n    },\n    \"NEON\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".neon\"\n        ],\n        \"tm_scope\": \"source.neon\",\n        \"ace_mode\": \"text\",\n        \"aliases\": [\n            \"nette object notation\",\n            \"ne-on\"\n        ],\n        \"language_id\": 481192983\n    },\n    \"NL\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".nl\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 241\n    },\n    \"NMODL\": {\n        \"type\": \"programming\",\n        \"color\": \"#00356B\",\n        \"extensions\": [\n            \".mod\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 136456478\n    },\n    \"NPM Config\": {\n        \"type\": \"data\",\n        \"color\": \"#cb3837\",\n        \"group\": \"INI\",\n        \"aliases\": [\n            \"npmrc\"\n        ],\n        \"filenames\": [\n            \".npmrc\"\n        ],\n        \"tm_scope\": \"source.ini.npmrc\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 685022663\n    },\n    \"NSIS\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".nsi\",\n            \".nsh\"\n        ],\n        \"tm_scope\": \"source.nsis\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"nsis\",\n        \"codemirror_mime_type\": \"text/x-nsis\",\n        \"language_id\": 242\n    },\n    \"NWScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#111522\",\n        \"extensions\": [\n            \".nss\"\n        ],\n        \"tm_scope\": \"source.c.nwscript\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"language_id\": 731233819\n    },\n    \"Nasal\": {\n        \"type\": \"programming\",\n        \"color\": \"#1d2c4e\",\n        \"extensions\": [\n            \".nas\"\n        ],\n        \"tm_scope\": \"source.nasal\",\n        \"ace_mode\": \"nasal\",\n        \"language_id\": 178322513\n    },\n    \"Nearley\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#990000\",\n        \"extensions\": [\n            \".ne\",\n            \".nearley\"\n        ],\n        \"tm_scope\": \"source.ne\",\n        \"language_id\": 521429430\n    },\n    \"Nemerle\": {\n        \"type\": \"programming\",\n        \"color\": \"#3d3c6e\",\n        \"extensions\": [\n            \".n\"\n        ],\n        \"tm_scope\": \"source.nemerle\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 243\n    },\n    \"NetLinx\": {\n        \"type\": \"programming\",\n        \"color\": \"#0aa0ff\",\n        \"extensions\": [\n            \".axs\",\n            \".axi\"\n        ],\n        \"tm_scope\": \"source.netlinx\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 244\n    },\n    \"NetLinx+ERB\": {\n        \"type\": \"programming\",\n        \"color\": \"#747faa\",\n        \"extensions\": [\n            \".axs.erb\",\n            \".axi.erb\"\n        ],\n        \"tm_scope\": \"source.netlinx.erb\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 245\n    },\n    \"NetLogo\": {\n        \"type\": \"programming\",\n        \"color\": \"#ff6375\",\n        \"extensions\": [\n            \".nlogo\"\n        ],\n        \"tm_scope\": \"source.lisp\",\n        \"ace_mode\": \"lisp\",\n        \"codemirror_mode\": \"commonlisp\",\n        \"codemirror_mime_type\": \"text/x-common-lisp\",\n        \"language_id\": 246\n    },\n    \"NewLisp\": {\n        \"type\": \"programming\",\n        \"color\": \"#87AED7\",\n        \"extensions\": [\n            \".nl\",\n            \".lisp\",\n            \".lsp\"\n        ],\n        \"interpreters\": [\n            \"newlisp\"\n        ],\n        \"tm_scope\": \"source.lisp\",\n        \"ace_mode\": \"lisp\",\n        \"codemirror_mode\": \"commonlisp\",\n        \"codemirror_mime_type\": \"text/x-common-lisp\",\n        \"language_id\": 247\n    },\n    \"Nextflow\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"groovy\",\n        \"tm_scope\": \"source.nextflow\",\n        \"color\": \"#3ac486\",\n        \"extensions\": [\n            \".nf\"\n        ],\n        \"filenames\": [\n            \"nextflow.config\"\n        ],\n        \"interpreters\": [\n            \"nextflow\"\n        ],\n        \"language_id\": 506780613\n    },\n    \"Nginx\": {\n        \"type\": \"data\",\n        \"color\": \"#009639\",\n        \"extensions\": [\n            \".nginx\",\n            \".nginxconf\",\n            \".vhost\"\n        ],\n        \"filenames\": [\n            \"nginx.conf\"\n        ],\n        \"tm_scope\": \"source.nginx\",\n        \"aliases\": [\n            \"nginx configuration file\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"nginx\",\n        \"codemirror_mime_type\": \"text/x-nginx-conf\",\n        \"language_id\": 248\n    },\n    \"Nim\": {\n        \"type\": \"programming\",\n        \"color\": \"#ffc200\",\n        \"extensions\": [\n            \".nim\",\n            \".nim.cfg\",\n            \".nimble\",\n            \".nimrod\",\n            \".nims\"\n        ],\n        \"filenames\": [\n            \"nim.cfg\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.nim\",\n        \"language_id\": 249\n    },\n    \"Ninja\": {\n        \"type\": \"data\",\n        \"tm_scope\": \"source.ninja\",\n        \"extensions\": [\n            \".ninja\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 250\n    },\n    \"Nit\": {\n        \"type\": \"programming\",\n        \"color\": \"#009917\",\n        \"extensions\": [\n            \".nit\"\n        ],\n        \"tm_scope\": \"source.nit\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 251\n    },\n    \"Nix\": {\n        \"type\": \"programming\",\n        \"color\": \"#7e7eff\",\n        \"extensions\": [\n            \".nix\"\n        ],\n        \"aliases\": [\n            \"nixos\"\n        ],\n        \"tm_scope\": \"source.nix\",\n        \"ace_mode\": \"nix\",\n        \"language_id\": 252\n    },\n    \"Noir\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"nargo\"\n        ],\n        \"ace_mode\": \"rust\",\n        \"codemirror_mode\": \"rust\",\n        \"codemirror_mime_type\": \"text/x-rustsrc\",\n        \"extensions\": [\n            \".nr\"\n        ],\n        \"color\": \"#2f1f49\",\n        \"tm_scope\": \"source.nr\",\n        \"language_id\": 813068465\n    },\n    \"Nu\": {\n        \"type\": \"programming\",\n        \"color\": \"#c9df40\",\n        \"aliases\": [\n            \"nush\"\n        ],\n        \"extensions\": [\n            \".nu\"\n        ],\n        \"filenames\": [\n            \"Nukefile\"\n        ],\n        \"tm_scope\": \"source.nu\",\n        \"ace_mode\": \"scheme\",\n        \"codemirror_mode\": \"scheme\",\n        \"codemirror_mime_type\": \"text/x-scheme\",\n        \"interpreters\": [\n            \"nush\"\n        ],\n        \"language_id\": 253\n    },\n    \"NumPy\": {\n        \"type\": \"programming\",\n        \"color\": \"#9C8AF9\",\n        \"group\": \"Python\",\n        \"extensions\": [\n            \".numpy\",\n            \".numpyw\",\n            \".numsc\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"python\",\n        \"codemirror_mime_type\": \"text/x-python\",\n        \"language_id\": 254\n    },\n    \"Nunjucks\": {\n        \"type\": \"markup\",\n        \"color\": \"#3d8137\",\n        \"extensions\": [\n            \".njk\"\n        ],\n        \"aliases\": [\n            \"njk\"\n        ],\n        \"tm_scope\": \"text.html.nunjucks\",\n        \"ace_mode\": \"nunjucks\",\n        \"language_id\": 461856962\n    },\n    \"Nushell\": {\n        \"type\": \"programming\",\n        \"color\": \"#4E9906\",\n        \"extensions\": [\n            \".nu\"\n        ],\n        \"interpreters\": [\n            \"nu\"\n        ],\n        \"aliases\": [\n            \"nu-script\",\n            \"nushell-script\"\n        ],\n        \"tm_scope\": \"source.nushell\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 446573572\n    },\n    \"OASv2-json\": {\n        \"type\": \"data\",\n        \"color\": \"#85ea2d\",\n        \"extensions\": [\n            \".json\"\n        ],\n        \"group\": \"OpenAPI Specification v2\",\n        \"tm_scope\": \"source.json\",\n        \"ace_mode\": \"json\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/json\",\n        \"language_id\": 834374816\n    },\n    \"OASv2-yaml\": {\n        \"type\": \"data\",\n        \"color\": \"#85ea2d\",\n        \"extensions\": [\n            \".yaml\",\n            \".yml\"\n        ],\n        \"group\": \"OpenAPI Specification v2\",\n        \"tm_scope\": \"source.yaml\",\n        \"ace_mode\": \"yaml\",\n        \"codemirror_mode\": \"yaml\",\n        \"codemirror_mime_type\": \"text/x-yaml\",\n        \"language_id\": 105187618\n    },\n    \"OASv3-json\": {\n        \"type\": \"data\",\n        \"color\": \"#85ea2d\",\n        \"extensions\": [\n            \".json\"\n        ],\n        \"group\": \"OpenAPI Specification v3\",\n        \"tm_scope\": \"source.json\",\n        \"ace_mode\": \"json\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/json\",\n        \"language_id\": 980062566\n    },\n    \"OASv3-yaml\": {\n        \"type\": \"data\",\n        \"color\": \"#85ea2d\",\n        \"extensions\": [\n            \".yaml\",\n            \".yml\"\n        ],\n        \"group\": \"OpenAPI Specification v3\",\n        \"tm_scope\": \"source.yaml\",\n        \"ace_mode\": \"yaml\",\n        \"codemirror_mode\": \"yaml\",\n        \"codemirror_mime_type\": \"text/x-yaml\",\n        \"language_id\": 51239111\n    },\n    \"OCaml\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"ocaml\",\n        \"codemirror_mode\": \"mllike\",\n        \"codemirror_mime_type\": \"text/x-ocaml\",\n        \"color\": \"#ef7a08\",\n        \"extensions\": [\n            \".ml\",\n            \".eliom\",\n            \".eliomi\",\n            \".ml4\",\n            \".mli\",\n            \".mll\",\n            \".mly\"\n        ],\n        \"interpreters\": [\n            \"ocaml\",\n            \"ocamlrun\",\n            \"ocamlscript\"\n        ],\n        \"tm_scope\": \"source.ocaml\",\n        \"language_id\": 255\n    },\n    \"Oberon\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".ob2\"\n        ],\n        \"tm_scope\": \"source.modula2\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 677210597\n    },\n    \"ObjDump\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".objdump\"\n        ],\n        \"tm_scope\": \"objdump.x86asm\",\n        \"ace_mode\": \"assembly_x86\",\n        \"language_id\": 256\n    },\n    \"Object Data Instance Notation\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".odin\"\n        ],\n        \"tm_scope\": \"source.odin-ehr\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 985227236\n    },\n    \"ObjectScript\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".cls\"\n        ],\n        \"language_id\": 202735509,\n        \"tm_scope\": \"source.objectscript\",\n        \"color\": \"#424893\",\n        \"ace_mode\": \"text\"\n    },\n    \"Objective-C\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.objc\",\n        \"color\": \"#438eff\",\n        \"aliases\": [\n            \"obj-c\",\n            \"objc\",\n            \"objectivec\"\n        ],\n        \"extensions\": [\n            \".m\",\n            \".h\"\n        ],\n        \"ace_mode\": \"objectivec\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-objectivec\",\n        \"language_id\": 257\n    },\n    \"Objective-C++\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.objc++\",\n        \"color\": \"#6866fb\",\n        \"aliases\": [\n            \"obj-c++\",\n            \"objc++\",\n            \"objectivec++\"\n        ],\n        \"extensions\": [\n            \".mm\"\n        ],\n        \"ace_mode\": \"objectivec\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-objectivec\",\n        \"language_id\": 258\n    },\n    \"Objective-J\": {\n        \"type\": \"programming\",\n        \"color\": \"#ff0c5a\",\n        \"aliases\": [\n            \"obj-j\",\n            \"objectivej\",\n            \"objj\"\n        ],\n        \"extensions\": [\n            \".j\",\n            \".sj\"\n        ],\n        \"tm_scope\": \"source.js.objj\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 259\n    },\n    \"Odin\": {\n        \"type\": \"programming\",\n        \"color\": \"#60AFFE\",\n        \"aliases\": [\n            \"odinlang\",\n            \"odin-lang\"\n        ],\n        \"extensions\": [\n            \".odin\"\n        ],\n        \"tm_scope\": \"source.odin\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 889244082\n    },\n    \"Omgrofl\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".omgrofl\"\n        ],\n        \"color\": \"#cabbff\",\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 260\n    },\n    \"Opa\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".opa\"\n        ],\n        \"tm_scope\": \"source.opa\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 261\n    },\n    \"Opal\": {\n        \"type\": \"programming\",\n        \"color\": \"#f7ede0\",\n        \"extensions\": [\n            \".opal\"\n        ],\n        \"tm_scope\": \"source.opal\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 262\n    },\n    \"Open Policy Agent\": {\n        \"type\": \"programming\",\n        \"color\": \"#7d9199\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".rego\"\n        ],\n        \"language_id\": 840483232,\n        \"tm_scope\": \"source.rego\"\n    },\n    \"OpenAPI Specification v2\": {\n        \"aliases\": [\n            \"oasv2\"\n        ],\n        \"type\": \"data\",\n        \"color\": \"#85ea2d\",\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 848295328\n    },\n    \"OpenAPI Specification v3\": {\n        \"aliases\": [\n            \"oasv3\"\n        ],\n        \"type\": \"data\",\n        \"color\": \"#85ea2d\",\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 557959099\n    },\n    \"OpenCL\": {\n        \"type\": \"programming\",\n        \"color\": \"#ed2e2d\",\n        \"group\": \"C\",\n        \"extensions\": [\n            \".cl\",\n            \".opencl\"\n        ],\n        \"tm_scope\": \"source.c\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"language_id\": 263\n    },\n    \"OpenEdge ABL\": {\n        \"type\": \"programming\",\n        \"color\": \"#5ce600\",\n        \"aliases\": [\n            \"progress\",\n            \"openedge\",\n            \"abl\"\n        ],\n        \"extensions\": [\n            \".p\",\n            \".cls\",\n            \".w\"\n        ],\n        \"tm_scope\": \"source.abl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 264\n    },\n    \"OpenQASM\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".qasm\"\n        ],\n        \"color\": \"#AA70FF\",\n        \"tm_scope\": \"source.qasm\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 153739399\n    },\n    \"OpenRC runscript\": {\n        \"type\": \"programming\",\n        \"group\": \"Shell\",\n        \"aliases\": [\n            \"openrc\"\n        ],\n        \"interpreters\": [\n            \"openrc-run\"\n        ],\n        \"tm_scope\": \"source.shell\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 265\n    },\n    \"OpenSCAD\": {\n        \"type\": \"programming\",\n        \"color\": \"#e5cd45\",\n        \"extensions\": [\n            \".scad\"\n        ],\n        \"tm_scope\": \"source.scad\",\n        \"ace_mode\": \"scad\",\n        \"language_id\": 266\n    },\n    \"OpenStep Property List\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".plist\",\n            \".glyphs\"\n        ],\n        \"tm_scope\": \"source.plist\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 598917541\n    },\n    \"OpenType Feature File\": {\n        \"type\": \"data\",\n        \"aliases\": [\n            \"AFDKO\"\n        ],\n        \"extensions\": [\n            \".fea\"\n        ],\n        \"tm_scope\": \"source.opentype\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 374317347\n    },\n    \"Option List\": {\n        \"type\": \"data\",\n        \"color\": \"#476732\",\n        \"aliases\": [\n            \"opts\",\n            \"ackrc\"\n        ],\n        \"filenames\": [\n            \".ackrc\",\n            \".rspec\",\n            \".yardopts\",\n            \"ackrc\",\n            \"mocha.opts\"\n        ],\n        \"tm_scope\": \"source.opts\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 723589315\n    },\n    \"Org\": {\n        \"type\": \"prose\",\n        \"color\": \"#77aa99\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".org\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 267\n    },\n    \"Ox\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".ox\",\n            \".oxh\",\n            \".oxo\"\n        ],\n        \"tm_scope\": \"source.ox\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 268\n    },\n    \"Oxygene\": {\n        \"type\": \"programming\",\n        \"color\": \"#cdd0e3\",\n        \"extensions\": [\n            \".oxygene\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 269\n    },\n    \"Oz\": {\n        \"type\": \"programming\",\n        \"color\": \"#fab738\",\n        \"extensions\": [\n            \".oz\"\n        ],\n        \"tm_scope\": \"source.oz\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"oz\",\n        \"codemirror_mime_type\": \"text/x-oz\",\n        \"language_id\": 270\n    },\n    \"P4\": {\n        \"type\": \"programming\",\n        \"color\": \"#7055b5\",\n        \"extensions\": [\n            \".p4\"\n        ],\n        \"tm_scope\": \"source.p4\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 348895984\n    },\n    \"PDDL\": {\n        \"type\": \"programming\",\n        \"color\": \"#0d00ff\",\n        \"extensions\": [\n            \".pddl\"\n        ],\n        \"tm_scope\": \"source.pddl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 736235603\n    },\n    \"PEG.js\": {\n        \"type\": \"programming\",\n        \"color\": \"#234d6b\",\n        \"extensions\": [\n            \".pegjs\",\n            \".peggy\"\n        ],\n        \"tm_scope\": \"source.peggy\",\n        \"ace_mode\": \"javascript\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"text/javascript\",\n        \"language_id\": 81442128\n    },\n    \"PHP\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"text.html.php\",\n        \"ace_mode\": \"php\",\n        \"codemirror_mode\": \"php\",\n        \"codemirror_mime_type\": \"application/x-httpd-php\",\n        \"color\": \"#4F5D95\",\n        \"extensions\": [\n            \".php\",\n            \".aw\",\n            \".ctp\",\n            \".fcgi\",\n            \".inc\",\n            \".php3\",\n            \".php4\",\n            \".php5\",\n            \".phps\",\n            \".phpt\"\n        ],\n        \"filenames\": [\n            \".php\",\n            \".php_cs\",\n            \".php_cs.dist\",\n            \"Phakefile\"\n        ],\n        \"interpreters\": [\n            \"php\"\n        ],\n        \"aliases\": [\n            \"inc\"\n        ],\n        \"language_id\": 272\n    },\n    \"PLSQL\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"sql\",\n        \"codemirror_mode\": \"sql\",\n        \"codemirror_mime_type\": \"text/x-plsql\",\n        \"tm_scope\": \"none\",\n        \"color\": \"#dad8d8\",\n        \"extensions\": [\n            \".pls\",\n            \".bdy\",\n            \".ddl\",\n            \".fnc\",\n            \".pck\",\n            \".pkb\",\n            \".pks\",\n            \".plb\",\n            \".plsql\",\n            \".prc\",\n            \".spc\",\n            \".sql\",\n            \".tpb\",\n            \".tps\",\n            \".trg\",\n            \".vw\"\n        ],\n        \"language_id\": 273\n    },\n    \"PLpgSQL\": {\n        \"type\": \"programming\",\n        \"color\": \"#336790\",\n        \"ace_mode\": \"pgsql\",\n        \"codemirror_mode\": \"sql\",\n        \"codemirror_mime_type\": \"text/x-sql\",\n        \"tm_scope\": \"source.sql\",\n        \"extensions\": [\n            \".pgsql\",\n            \".sql\"\n        ],\n        \"language_id\": 274\n    },\n    \"POV-Ray SDL\": {\n        \"type\": \"programming\",\n        \"color\": \"#6bac65\",\n        \"aliases\": [\n            \"pov-ray\",\n            \"povray\"\n        ],\n        \"extensions\": [\n            \".pov\",\n            \".inc\"\n        ],\n        \"tm_scope\": \"source.pov-ray sdl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 275\n    },\n    \"Pact\": {\n        \"type\": \"programming\",\n        \"color\": \"#F7A8B8\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.pact\",\n        \"extensions\": [\n            \".pact\"\n        ],\n        \"language_id\": 756774415\n    },\n    \"Pan\": {\n        \"type\": \"programming\",\n        \"color\": \"#cc0000\",\n        \"extensions\": [\n            \".pan\"\n        ],\n        \"tm_scope\": \"source.pan\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 276\n    },\n    \"Papyrus\": {\n        \"type\": \"programming\",\n        \"color\": \"#6600cc\",\n        \"extensions\": [\n            \".psc\"\n        ],\n        \"tm_scope\": \"source.papyrus.skyrim\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 277\n    },\n    \"Parrot\": {\n        \"type\": \"programming\",\n        \"color\": \"#f3ca0a\",\n        \"extensions\": [\n            \".parrot\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 278\n    },\n    \"Parrot Assembly\": {\n        \"group\": \"Parrot\",\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"pasm\"\n        ],\n        \"extensions\": [\n            \".pasm\"\n        ],\n        \"interpreters\": [\n            \"parrot\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 279\n    },\n    \"Parrot Internal Representation\": {\n        \"group\": \"Parrot\",\n        \"tm_scope\": \"source.parrot.pir\",\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"pir\"\n        ],\n        \"extensions\": [\n            \".pir\"\n        ],\n        \"interpreters\": [\n            \"parrot\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 280\n    },\n    \"Pascal\": {\n        \"type\": \"programming\",\n        \"color\": \"#E3F171\",\n        \"aliases\": [\n            \"delphi\",\n            \"objectpascal\"\n        ],\n        \"extensions\": [\n            \".pas\",\n            \".dfm\",\n            \".dpr\",\n            \".inc\",\n            \".lpr\",\n            \".pascal\",\n            \".pp\"\n        ],\n        \"interpreters\": [\n            \"instantfpc\"\n        ],\n        \"tm_scope\": \"source.pascal\",\n        \"ace_mode\": \"pascal\",\n        \"codemirror_mode\": \"pascal\",\n        \"codemirror_mime_type\": \"text/x-pascal\",\n        \"language_id\": 281\n    },\n    \"Pawn\": {\n        \"type\": \"programming\",\n        \"color\": \"#dbb284\",\n        \"extensions\": [\n            \".pwn\",\n            \".inc\",\n            \".sma\"\n        ],\n        \"tm_scope\": \"source.pawn\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 271\n    },\n    \"Pep8\": {\n        \"type\": \"programming\",\n        \"color\": \"#C76F5B\",\n        \"extensions\": [\n            \".pep\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.pep8\",\n        \"language_id\": 840372442\n    },\n    \"Perl\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.perl\",\n        \"ace_mode\": \"perl\",\n        \"codemirror_mode\": \"perl\",\n        \"codemirror_mime_type\": \"text/x-perl\",\n        \"color\": \"#0298c3\",\n        \"extensions\": [\n            \".pl\",\n            \".al\",\n            \".cgi\",\n            \".fcgi\",\n            \".perl\",\n            \".ph\",\n            \".plx\",\n            \".pm\",\n            \".psgi\",\n            \".t\"\n        ],\n        \"filenames\": [\n            \".latexmkrc\",\n            \"Makefile.PL\",\n            \"Rexfile\",\n            \"ack\",\n            \"cpanfile\",\n            \"latexmkrc\"\n        ],\n        \"interpreters\": [\n            \"cperl\",\n            \"perl\"\n        ],\n        \"aliases\": [\n            \"cperl\"\n        ],\n        \"language_id\": 282\n    },\n    \"Pic\": {\n        \"type\": \"markup\",\n        \"group\": \"Roff\",\n        \"tm_scope\": \"source.pic\",\n        \"extensions\": [\n            \".pic\",\n            \".chem\"\n        ],\n        \"aliases\": [\n            \"pikchr\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"troff\",\n        \"codemirror_mime_type\": \"text/troff\",\n        \"language_id\": 425\n    },\n    \"Pickle\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".pkl\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 284\n    },\n    \"PicoLisp\": {\n        \"type\": \"programming\",\n        \"color\": \"#6067af\",\n        \"extensions\": [\n            \".l\"\n        ],\n        \"interpreters\": [\n            \"picolisp\",\n            \"pil\"\n        ],\n        \"tm_scope\": \"source.lisp\",\n        \"ace_mode\": \"lisp\",\n        \"language_id\": 285\n    },\n    \"PigLatin\": {\n        \"type\": \"programming\",\n        \"color\": \"#fcd7de\",\n        \"extensions\": [\n            \".pig\"\n        ],\n        \"tm_scope\": \"source.pig_latin\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 286\n    },\n    \"Pike\": {\n        \"type\": \"programming\",\n        \"color\": \"#005390\",\n        \"extensions\": [\n            \".pike\",\n            \".pmod\"\n        ],\n        \"interpreters\": [\n            \"pike\"\n        ],\n        \"tm_scope\": \"source.pike\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 287\n    },\n    \"Pip Requirements\": {\n        \"type\": \"data\",\n        \"color\": \"#FFD343\",\n        \"filenames\": [\n            \"requirements-dev.txt\",\n            \"requirements.txt\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.pip-requirements\",\n        \"language_id\": 684385621\n    },\n    \"Pkl\": {\n        \"type\": \"programming\",\n        \"color\": \"#6b9543\",\n        \"extensions\": [\n            \".pkl\"\n        ],\n        \"interpreters\": [\n            \"pkl\"\n        ],\n        \"tm_scope\": \"source.pkl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 288822799\n    },\n    \"PlantUML\": {\n        \"type\": \"data\",\n        \"color\": \"#fbbd16\",\n        \"extensions\": [\n            \".puml\",\n            \".iuml\",\n            \".plantuml\"\n        ],\n        \"tm_scope\": \"source.wsd\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 833504686\n    },\n    \"Pod\": {\n        \"type\": \"prose\",\n        \"ace_mode\": \"perl\",\n        \"codemirror_mode\": \"perl\",\n        \"codemirror_mime_type\": \"text/x-perl\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".pod\"\n        ],\n        \"interpreters\": [\n            \"perl\"\n        ],\n        \"tm_scope\": \"none\",\n        \"language_id\": 288\n    },\n    \"Pod 6\": {\n        \"type\": \"prose\",\n        \"ace_mode\": \"perl\",\n        \"tm_scope\": \"source.raku\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".pod\",\n            \".pod6\"\n        ],\n        \"interpreters\": [\n            \"perl6\"\n        ],\n        \"language_id\": 155357471\n    },\n    \"PogoScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#d80074\",\n        \"extensions\": [\n            \".pogo\"\n        ],\n        \"tm_scope\": \"source.pogoscript\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 289\n    },\n    \"Polar\": {\n        \"type\": \"programming\",\n        \"color\": \"#ae81ff\",\n        \"extensions\": [\n            \".polar\"\n        ],\n        \"tm_scope\": \"source.polar\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 839112914\n    },\n    \"Pony\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".pony\"\n        ],\n        \"tm_scope\": \"source.pony\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 290\n    },\n    \"Portugol\": {\n        \"type\": \"programming\",\n        \"color\": \"#f8bd00\",\n        \"extensions\": [\n            \".por\"\n        ],\n        \"tm_scope\": \"source.portugol\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 832391833\n    },\n    \"PostCSS\": {\n        \"type\": \"markup\",\n        \"color\": \"#dc3a0c\",\n        \"tm_scope\": \"source.postcss\",\n        \"group\": \"CSS\",\n        \"extensions\": [\n            \".pcss\",\n            \".postcss\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 262764437\n    },\n    \"PostScript\": {\n        \"type\": \"markup\",\n        \"color\": \"#da291c\",\n        \"extensions\": [\n            \".ps\",\n            \".eps\",\n            \".epsi\",\n            \".pfa\"\n        ],\n        \"tm_scope\": \"source.postscript\",\n        \"aliases\": [\n            \"postscr\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 291\n    },\n    \"PowerBuilder\": {\n        \"type\": \"programming\",\n        \"color\": \"#8f0f8d\",\n        \"extensions\": [\n            \".pbt\",\n            \".sra\",\n            \".sru\",\n            \".srw\"\n        ],\n        \"tm_scope\": \"source.powerbuilder\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 292\n    },\n    \"PowerShell\": {\n        \"type\": \"programming\",\n        \"color\": \"#012456\",\n        \"tm_scope\": \"source.powershell\",\n        \"ace_mode\": \"powershell\",\n        \"codemirror_mode\": \"powershell\",\n        \"codemirror_mime_type\": \"application/x-powershell\",\n        \"aliases\": [\n            \"posh\",\n            \"pwsh\"\n        ],\n        \"extensions\": [\n            \".ps1\",\n            \".psd1\",\n            \".psm1\"\n        ],\n        \"interpreters\": [\n            \"pwsh\"\n        ],\n        \"language_id\": 293\n    },\n    \"Praat\": {\n        \"type\": \"programming\",\n        \"color\": \"#c8506d\",\n        \"tm_scope\": \"source.praat\",\n        \"ace_mode\": \"praat\",\n        \"extensions\": [\n            \".praat\"\n        ],\n        \"language_id\": 106029007\n    },\n    \"Prisma\": {\n        \"type\": \"data\",\n        \"color\": \"#0c344b\",\n        \"extensions\": [\n            \".prisma\"\n        ],\n        \"tm_scope\": \"source.prisma\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 499933428\n    },\n    \"Processing\": {\n        \"type\": \"programming\",\n        \"color\": \"#0096D8\",\n        \"extensions\": [\n            \".pde\"\n        ],\n        \"tm_scope\": \"source.processing\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 294\n    },\n    \"Procfile\": {\n        \"type\": \"programming\",\n        \"color\": \"#3B2F63\",\n        \"filenames\": [\n            \"Procfile\"\n        ],\n        \"tm_scope\": \"source.procfile\",\n        \"ace_mode\": \"batchfile\",\n        \"language_id\": 305313959\n    },\n    \"Proguard\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".pro\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 716513858\n    },\n    \"Prolog\": {\n        \"type\": \"programming\",\n        \"color\": \"#74283c\",\n        \"extensions\": [\n            \".pl\",\n            \".plt\",\n            \".pro\",\n            \".prolog\",\n            \".yap\"\n        ],\n        \"interpreters\": [\n            \"swipl\",\n            \"yap\"\n        ],\n        \"tm_scope\": \"source.prolog\",\n        \"ace_mode\": \"prolog\",\n        \"language_id\": 295\n    },\n    \"Promela\": {\n        \"type\": \"programming\",\n        \"color\": \"#de0000\",\n        \"tm_scope\": \"source.promela\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".pml\"\n        ],\n        \"language_id\": 441858312\n    },\n    \"Propeller Spin\": {\n        \"type\": \"programming\",\n        \"color\": \"#7fa2a7\",\n        \"extensions\": [\n            \".spin\"\n        ],\n        \"tm_scope\": \"source.spin\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 296\n    },\n    \"Protocol Buffer\": {\n        \"type\": \"data\",\n        \"aliases\": [\n            \"proto\",\n            \"protobuf\",\n            \"Protocol Buffers\"\n        ],\n        \"extensions\": [\n            \".proto\"\n        ],\n        \"tm_scope\": \"source.proto\",\n        \"ace_mode\": \"protobuf\",\n        \"codemirror_mode\": \"protobuf\",\n        \"codemirror_mime_type\": \"text/x-protobuf\",\n        \"language_id\": 297\n    },\n    \"Protocol Buffer Text Format\": {\n        \"type\": \"data\",\n        \"aliases\": [\n            \"text proto\",\n            \"protobuf text format\"\n        ],\n        \"extensions\": [\n            \".textproto\",\n            \".pbt\",\n            \".pbtxt\"\n        ],\n        \"tm_scope\": \"source.textproto\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 436568854\n    },\n    \"Public Key\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".asc\",\n            \".pub\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"asciiarmor\",\n        \"codemirror_mime_type\": \"application/pgp\",\n        \"language_id\": 298\n    },\n    \"Pug\": {\n        \"type\": \"markup\",\n        \"color\": \"#a86454\",\n        \"extensions\": [\n            \".jade\",\n            \".pug\"\n        ],\n        \"tm_scope\": \"text.jade\",\n        \"ace_mode\": \"jade\",\n        \"codemirror_mode\": \"pug\",\n        \"codemirror_mime_type\": \"text/x-pug\",\n        \"language_id\": 179\n    },\n    \"Puppet\": {\n        \"type\": \"programming\",\n        \"color\": \"#302B6D\",\n        \"extensions\": [\n            \".pp\"\n        ],\n        \"filenames\": [\n            \"Modulefile\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"puppet\",\n        \"codemirror_mime_type\": \"text/x-puppet\",\n        \"tm_scope\": \"source.puppet\",\n        \"language_id\": 299\n    },\n    \"Pure Data\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".pd\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 300\n    },\n    \"PureBasic\": {\n        \"type\": \"programming\",\n        \"color\": \"#5a6986\",\n        \"extensions\": [\n            \".pb\",\n            \".pbi\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 301\n    },\n    \"PureScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#1D222D\",\n        \"extensions\": [\n            \".purs\"\n        ],\n        \"tm_scope\": \"source.purescript\",\n        \"ace_mode\": \"haskell\",\n        \"codemirror_mode\": \"haskell\",\n        \"codemirror_mime_type\": \"text/x-haskell\",\n        \"language_id\": 302\n    },\n    \"Pyret\": {\n        \"type\": \"programming\",\n        \"color\": \"#ee1e10\",\n        \"extensions\": [\n            \".arr\"\n        ],\n        \"ace_mode\": \"python\",\n        \"tm_scope\": \"source.arr\",\n        \"language_id\": 252961827\n    },\n    \"Python\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.python\",\n        \"ace_mode\": \"python\",\n        \"codemirror_mode\": \"python\",\n        \"codemirror_mime_type\": \"text/x-python\",\n        \"color\": \"#3572A5\",\n        \"extensions\": [\n            \".py\",\n            \".cgi\",\n            \".fcgi\",\n            \".gyp\",\n            \".gypi\",\n            \".lmi\",\n            \".py3\",\n            \".pyde\",\n            \".pyi\",\n            \".pyp\",\n            \".pyt\",\n            \".pyw\",\n            \".rpy\",\n            \".spec\",\n            \".tac\",\n            \".wsgi\",\n            \".xpy\"\n        ],\n        \"filenames\": [\n            \".gclient\",\n            \"DEPS\",\n            \"SConscript\",\n            \"SConstruct\",\n            \"wscript\"\n        ],\n        \"interpreters\": [\n            \"python\",\n            \"python2\",\n            \"python3\",\n            \"py\",\n            \"pypy\",\n            \"pypy3\"\n        ],\n        \"aliases\": [\n            \"python3\",\n            \"rusthon\"\n        ],\n        \"language_id\": 303\n    },\n    \"Python console\": {\n        \"type\": \"programming\",\n        \"color\": \"#3572A5\",\n        \"group\": \"Python\",\n        \"aliases\": [\n            \"pycon\"\n        ],\n        \"tm_scope\": \"text.python.console\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 428\n    },\n    \"Python traceback\": {\n        \"type\": \"data\",\n        \"color\": \"#3572A5\",\n        \"group\": \"Python\",\n        \"extensions\": [\n            \".pytb\"\n        ],\n        \"tm_scope\": \"text.python.traceback\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 304\n    },\n    \"Q#\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".qs\"\n        ],\n        \"aliases\": [\n            \"qsharp\"\n        ],\n        \"color\": \"#fed659\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.qsharp\",\n        \"language_id\": 697448245\n    },\n    \"QML\": {\n        \"type\": \"programming\",\n        \"color\": \"#44a51c\",\n        \"extensions\": [\n            \".qml\",\n            \".qbs\"\n        ],\n        \"tm_scope\": \"source.qml\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 305\n    },\n    \"QMake\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".pro\",\n            \".pri\"\n        ],\n        \"interpreters\": [\n            \"qmake\"\n        ],\n        \"tm_scope\": \"source.qmake\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 306\n    },\n    \"Qt Script\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"javascript\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"text/javascript\",\n        \"extensions\": [\n            \".qs\"\n        ],\n        \"filenames\": [\n            \"installscript.qs\",\n            \"toolchain_installscript.qs\"\n        ],\n        \"color\": \"#00b841\",\n        \"tm_scope\": \"source.js\",\n        \"language_id\": 558193693\n    },\n    \"Quake\": {\n        \"type\": \"programming\",\n        \"filenames\": [\n            \"m3makefile\",\n            \"m3overrides\"\n        ],\n        \"color\": \"#882233\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.quake\",\n        \"language_id\": 375265331\n    },\n    \"R\": {\n        \"type\": \"programming\",\n        \"color\": \"#198CE7\",\n        \"aliases\": [\n            \"Rscript\",\n            \"splus\"\n        ],\n        \"extensions\": [\n            \".r\",\n            \".rd\",\n            \".rsx\"\n        ],\n        \"filenames\": [\n            \".Rprofile\",\n            \"expr-dist\"\n        ],\n        \"interpreters\": [\n            \"Rscript\"\n        ],\n        \"tm_scope\": \"source.r\",\n        \"ace_mode\": \"r\",\n        \"codemirror_mode\": \"r\",\n        \"codemirror_mime_type\": \"text/x-rsrc\",\n        \"language_id\": 307\n    },\n    \"RAML\": {\n        \"type\": \"markup\",\n        \"ace_mode\": \"yaml\",\n        \"codemirror_mode\": \"yaml\",\n        \"codemirror_mime_type\": \"text/x-yaml\",\n        \"tm_scope\": \"source.yaml\",\n        \"color\": \"#77d9fb\",\n        \"extensions\": [\n            \".raml\"\n        ],\n        \"language_id\": 308\n    },\n    \"RBS\": {\n        \"type\": \"data\",\n        \"ace_mode\": \"ruby\",\n        \"codemirror_mode\": \"ruby\",\n        \"codemirror_mime_type\": \"text/x-ruby\",\n        \"extensions\": [\n            \".rbs\"\n        ],\n        \"color\": \"#701516\",\n        \"tm_scope\": \"source.rbs\",\n        \"group\": \"Ruby\",\n        \"language_id\": 899227493\n    },\n    \"RDoc\": {\n        \"type\": \"prose\",\n        \"color\": \"#701516\",\n        \"ace_mode\": \"rdoc\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".rdoc\"\n        ],\n        \"tm_scope\": \"text.rdoc\",\n        \"language_id\": 309\n    },\n    \"REALbasic\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".rbbas\",\n            \".rbfrm\",\n            \".rbmnu\",\n            \".rbres\",\n            \".rbtbar\",\n            \".rbuistate\"\n        ],\n        \"tm_scope\": \"source.vbnet\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 310\n    },\n    \"REXX\": {\n        \"type\": \"programming\",\n        \"color\": \"#d90e09\",\n        \"aliases\": [\n            \"arexx\"\n        ],\n        \"extensions\": [\n            \".rexx\",\n            \".pprx\",\n            \".rex\"\n        ],\n        \"interpreters\": [\n            \"regina\",\n            \"rexx\"\n        ],\n        \"tm_scope\": \"source.rexx\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 311\n    },\n    \"RMarkdown\": {\n        \"type\": \"prose\",\n        \"color\": \"#198ce7\",\n        \"wrap\": true,\n        \"ace_mode\": \"markdown\",\n        \"codemirror_mode\": \"gfm\",\n        \"codemirror_mime_type\": \"text/x-gfm\",\n        \"extensions\": [\n            \".qmd\",\n            \".rmd\"\n        ],\n        \"tm_scope\": \"text.md\",\n        \"language_id\": 313\n    },\n    \"RON\": {\n        \"type\": \"data\",\n        \"color\": \"#a62c00\",\n        \"extensions\": [\n            \".ron\"\n        ],\n        \"ace_mode\": \"rust\",\n        \"tm_scope\": \"source.ron\",\n        \"language_id\": 587855233\n    },\n    \"RPC\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"rpcgen\",\n            \"oncrpc\",\n            \"xdr\"\n        ],\n        \"ace_mode\": \"c_cpp\",\n        \"extensions\": [\n            \".x\"\n        ],\n        \"tm_scope\": \"source.c\",\n        \"language_id\": 1031374237\n    },\n    \"RPGLE\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#2BDE21\",\n        \"aliases\": [\n            \"ile rpg\",\n            \"sqlrpgle\"\n        ],\n        \"extensions\": [\n            \".rpgle\",\n            \".sqlrpgle\"\n        ],\n        \"tm_scope\": \"source.rpgle\",\n        \"language_id\": 609977990\n    },\n    \"RPM Spec\": {\n        \"type\": \"data\",\n        \"tm_scope\": \"source.rpm-spec\",\n        \"extensions\": [\n            \".spec\"\n        ],\n        \"aliases\": [\n            \"specfile\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"rpm\",\n        \"codemirror_mime_type\": \"text/x-rpm-spec\",\n        \"language_id\": 314\n    },\n    \"RUNOFF\": {\n        \"type\": \"markup\",\n        \"color\": \"#665a4e\",\n        \"extensions\": [\n            \".rnh\",\n            \".rno\"\n        ],\n        \"wrap\": true,\n        \"tm_scope\": \"text.runoff\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 315\n    },\n    \"Racket\": {\n        \"type\": \"programming\",\n        \"color\": \"#3c5caa\",\n        \"extensions\": [\n            \".rkt\",\n            \".rktd\",\n            \".rktl\",\n            \".scrbl\"\n        ],\n        \"interpreters\": [\n            \"racket\"\n        ],\n        \"tm_scope\": \"source.racket\",\n        \"ace_mode\": \"lisp\",\n        \"language_id\": 316\n    },\n    \"Ragel\": {\n        \"type\": \"programming\",\n        \"color\": \"#9d5200\",\n        \"extensions\": [\n            \".rl\"\n        ],\n        \"aliases\": [\n            \"ragel-rb\",\n            \"ragel-ruby\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 317\n    },\n    \"Raku\": {\n        \"type\": \"programming\",\n        \"color\": \"#0000fb\",\n        \"extensions\": [\n            \".6pl\",\n            \".6pm\",\n            \".nqp\",\n            \".p6\",\n            \".p6l\",\n            \".p6m\",\n            \".pl\",\n            \".pl6\",\n            \".pm\",\n            \".pm6\",\n            \".raku\",\n            \".rakumod\",\n            \".t\"\n        ],\n        \"interpreters\": [\n            \"perl6\",\n            \"raku\",\n            \"rakudo\"\n        ],\n        \"aliases\": [\n            \"perl6\",\n            \"perl-6\"\n        ],\n        \"tm_scope\": \"source.raku\",\n        \"ace_mode\": \"perl\",\n        \"codemirror_mode\": \"perl\",\n        \"codemirror_mime_type\": \"text/x-perl\",\n        \"language_id\": 283\n    },\n    \"Rascal\": {\n        \"type\": \"programming\",\n        \"color\": \"#fffaa0\",\n        \"extensions\": [\n            \".rsc\"\n        ],\n        \"tm_scope\": \"source.rascal\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 173616037\n    },\n    \"Raw token data\": {\n        \"type\": \"data\",\n        \"aliases\": [\n            \"raw\"\n        ],\n        \"extensions\": [\n            \".raw\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 318\n    },\n    \"ReScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#ed5051\",\n        \"ace_mode\": \"rust\",\n        \"codemirror_mode\": \"rust\",\n        \"codemirror_mime_type\": \"text/x-rustsrc\",\n        \"extensions\": [\n            \".res\"\n        ],\n        \"interpreters\": [\n            \"ocaml\"\n        ],\n        \"tm_scope\": \"source.rescript\",\n        \"language_id\": 501875647\n    },\n    \"Readline Config\": {\n        \"type\": \"data\",\n        \"group\": \"INI\",\n        \"aliases\": [\n            \"inputrc\",\n            \"readline\"\n        ],\n        \"filenames\": [\n            \".inputrc\",\n            \"inputrc\"\n        ],\n        \"tm_scope\": \"source.inputrc\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 538732839\n    },\n    \"Reason\": {\n        \"type\": \"programming\",\n        \"color\": \"#ff5847\",\n        \"ace_mode\": \"rust\",\n        \"codemirror_mode\": \"rust\",\n        \"codemirror_mime_type\": \"text/x-rustsrc\",\n        \"extensions\": [\n            \".re\",\n            \".rei\"\n        ],\n        \"tm_scope\": \"source.reason\",\n        \"language_id\": 869538413\n    },\n    \"ReasonLIGO\": {\n        \"type\": \"programming\",\n        \"color\": \"#ff5847\",\n        \"ace_mode\": \"rust\",\n        \"codemirror_mode\": \"rust\",\n        \"codemirror_mime_type\": \"text/x-rustsrc\",\n        \"group\": \"LigoLANG\",\n        \"extensions\": [\n            \".religo\"\n        ],\n        \"tm_scope\": \"source.religo\",\n        \"language_id\": 319002153\n    },\n    \"Rebol\": {\n        \"type\": \"programming\",\n        \"color\": \"#358a5b\",\n        \"extensions\": [\n            \".reb\",\n            \".r\",\n            \".r2\",\n            \".r3\",\n            \".rebol\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.rebol\",\n        \"language_id\": 319\n    },\n    \"Record Jar\": {\n        \"type\": \"data\",\n        \"filenames\": [\n            \"language-subtag-registry.txt\"\n        ],\n        \"tm_scope\": \"source.record-jar\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#0673ba\",\n        \"language_id\": 865765202\n    },\n    \"Red\": {\n        \"type\": \"programming\",\n        \"color\": \"#f50000\",\n        \"extensions\": [\n            \".red\",\n            \".reds\"\n        ],\n        \"aliases\": [\n            \"red/system\"\n        ],\n        \"tm_scope\": \"source.red\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 320\n    },\n    \"Redcode\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".cw\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 321\n    },\n    \"Redirect Rules\": {\n        \"type\": \"data\",\n        \"aliases\": [\n            \"redirects\"\n        ],\n        \"filenames\": [\n            \"_redirects\"\n        ],\n        \"tm_scope\": \"source.redirects\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 1020148948\n    },\n    \"Regular Expression\": {\n        \"type\": \"data\",\n        \"color\": \"#009a00\",\n        \"extensions\": [\n            \".regexp\",\n            \".regex\"\n        ],\n        \"aliases\": [\n            \"regexp\",\n            \"regex\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.regexp\",\n        \"language_id\": 363378884\n    },\n    \"Ren'Py\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"renpy\"\n        ],\n        \"color\": \"#ff7f7f\",\n        \"extensions\": [\n            \".rpy\"\n        ],\n        \"tm_scope\": \"source.renpy\",\n        \"ace_mode\": \"python\",\n        \"language_id\": 322\n    },\n    \"RenderScript\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".rs\",\n            \".rsh\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 323\n    },\n    \"Rez\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".r\"\n        ],\n        \"tm_scope\": \"source.rez\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#FFDAB3\",\n        \"language_id\": 498022874\n    },\n    \"Rich Text Format\": {\n        \"type\": \"markup\",\n        \"extensions\": [\n            \".rtf\"\n        ],\n        \"tm_scope\": \"text.rtf\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 51601661\n    },\n    \"Ring\": {\n        \"type\": \"programming\",\n        \"color\": \"#2D54CB\",\n        \"extensions\": [\n            \".ring\"\n        ],\n        \"tm_scope\": \"source.ring\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 431\n    },\n    \"Riot\": {\n        \"type\": \"markup\",\n        \"color\": \"#A71E49\",\n        \"ace_mode\": \"html\",\n        \"extensions\": [\n            \".riot\"\n        ],\n        \"tm_scope\": \"text.html.riot\",\n        \"language_id\": 878396783\n    },\n    \"RobotFramework\": {\n        \"type\": \"programming\",\n        \"color\": \"#00c0b5\",\n        \"extensions\": [\n            \".robot\",\n            \".resource\"\n        ],\n        \"tm_scope\": \"text.robot\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 324\n    },\n    \"Roc\": {\n        \"type\": \"programming\",\n        \"color\": \"#7c38f5\",\n        \"extensions\": [\n            \".roc\"\n        ],\n        \"tm_scope\": \"source.roc\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 440182480\n    },\n    \"Roff\": {\n        \"type\": \"markup\",\n        \"color\": \"#ecdebe\",\n        \"extensions\": [\n            \".roff\",\n            \".1\",\n            \".1in\",\n            \".1m\",\n            \".1x\",\n            \".2\",\n            \".3\",\n            \".3in\",\n            \".3m\",\n            \".3p\",\n            \".3pm\",\n            \".3qt\",\n            \".3x\",\n            \".4\",\n            \".5\",\n            \".6\",\n            \".7\",\n            \".8\",\n            \".9\",\n            \".l\",\n            \".man\",\n            \".mdoc\",\n            \".me\",\n            \".ms\",\n            \".n\",\n            \".nr\",\n            \".rno\",\n            \".tmac\"\n        ],\n        \"filenames\": [\n            \"eqnrc\",\n            \"mmn\",\n            \"mmt\",\n            \"troffrc\",\n            \"troffrc-end\"\n        ],\n        \"tm_scope\": \"text.roff\",\n        \"aliases\": [\n            \"groff\",\n            \"man\",\n            \"manpage\",\n            \"man page\",\n            \"man-page\",\n            \"mdoc\",\n            \"nroff\",\n            \"troff\"\n        ],\n        \"wrap\": true,\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"troff\",\n        \"codemirror_mime_type\": \"text/troff\",\n        \"language_id\": 141\n    },\n    \"Roff Manpage\": {\n        \"type\": \"markup\",\n        \"color\": \"#ecdebe\",\n        \"group\": \"Roff\",\n        \"extensions\": [\n            \".1\",\n            \".1in\",\n            \".1m\",\n            \".1x\",\n            \".2\",\n            \".3\",\n            \".3in\",\n            \".3m\",\n            \".3p\",\n            \".3pm\",\n            \".3qt\",\n            \".3x\",\n            \".4\",\n            \".5\",\n            \".6\",\n            \".7\",\n            \".8\",\n            \".9\",\n            \".man\",\n            \".mdoc\"\n        ],\n        \"wrap\": true,\n        \"tm_scope\": \"text.roff\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"troff\",\n        \"codemirror_mime_type\": \"text/troff\",\n        \"language_id\": 612669833\n    },\n    \"Rouge\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"clojure\",\n        \"codemirror_mode\": \"clojure\",\n        \"codemirror_mime_type\": \"text/x-clojure\",\n        \"color\": \"#cc0088\",\n        \"extensions\": [\n            \".rg\"\n        ],\n        \"tm_scope\": \"source.clojure\",\n        \"language_id\": 325\n    },\n    \"RouterOS Script\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".rsc\"\n        ],\n        \"interpreters\": [\n            \"RouterOS\"\n        ],\n        \"color\": \"#DE3941\",\n        \"tm_scope\": \"none\",\n        \"language_id\": 592853203\n    },\n    \"Ruby\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.ruby\",\n        \"ace_mode\": \"ruby\",\n        \"codemirror_mode\": \"ruby\",\n        \"codemirror_mime_type\": \"text/x-ruby\",\n        \"color\": \"#701516\",\n        \"aliases\": [\n            \"jruby\",\n            \"macruby\",\n            \"rake\",\n            \"rb\",\n            \"rbx\"\n        ],\n        \"extensions\": [\n            \".rb\",\n            \".builder\",\n            \".eye\",\n            \".fcgi\",\n            \".gemspec\",\n            \".god\",\n            \".jbuilder\",\n            \".mspec\",\n            \".pluginspec\",\n            \".podspec\",\n            \".prawn\",\n            \".rabl\",\n            \".rake\",\n            \".rbi\",\n            \".rbuild\",\n            \".rbw\",\n            \".rbx\",\n            \".ru\",\n            \".ruby\",\n            \".spec\",\n            \".thor\",\n            \".watchr\"\n        ],\n        \"interpreters\": [\n            \"ruby\",\n            \"macruby\",\n            \"rake\",\n            \"jruby\",\n            \"rbx\"\n        ],\n        \"filenames\": [\n            \".irbrc\",\n            \".pryrc\",\n            \".simplecov\",\n            \"Appraisals\",\n            \"Berksfile\",\n            \"Brewfile\",\n            \"Buildfile\",\n            \"Capfile\",\n            \"Dangerfile\",\n            \"Deliverfile\",\n            \"Fastfile\",\n            \"Gemfile\",\n            \"Guardfile\",\n            \"Jarfile\",\n            \"Mavenfile\",\n            \"Podfile\",\n            \"Puppetfile\",\n            \"Rakefile\",\n            \"Snapfile\",\n            \"Steepfile\",\n            \"Thorfile\",\n            \"Vagrantfile\",\n            \"buildfile\"\n        ],\n        \"language_id\": 326\n    },\n    \"Rust\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"rs\"\n        ],\n        \"color\": \"#dea584\",\n        \"extensions\": [\n            \".rs\",\n            \".rs.in\"\n        ],\n        \"tm_scope\": \"source.rust\",\n        \"ace_mode\": \"rust\",\n        \"codemirror_mode\": \"rust\",\n        \"codemirror_mime_type\": \"text/x-rustsrc\",\n        \"interpreters\": [\n            \"rust-script\"\n        ],\n        \"language_id\": 327\n    },\n    \"SAS\": {\n        \"type\": \"programming\",\n        \"color\": \"#B34936\",\n        \"extensions\": [\n            \".sas\"\n        ],\n        \"tm_scope\": \"source.sas\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"sas\",\n        \"codemirror_mime_type\": \"text/x-sas\",\n        \"language_id\": 328\n    },\n    \"SCSS\": {\n        \"type\": \"markup\",\n        \"color\": \"#c6538c\",\n        \"tm_scope\": \"source.css.scss\",\n        \"ace_mode\": \"scss\",\n        \"codemirror_mode\": \"css\",\n        \"codemirror_mime_type\": \"text/x-scss\",\n        \"extensions\": [\n            \".scss\"\n        ],\n        \"language_id\": 329\n    },\n    \"SELinux Policy\": {\n        \"aliases\": [\n            \"SELinux Kernel Policy Language\",\n            \"sepolicy\"\n        ],\n        \"type\": \"data\",\n        \"tm_scope\": \"source.sepolicy\",\n        \"extensions\": [\n            \".te\"\n        ],\n        \"filenames\": [\n            \"file_contexts\",\n            \"genfs_contexts\",\n            \"initial_sids\",\n            \"port_contexts\",\n            \"security_classes\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 880010326\n    },\n    \"SMT\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".smt2\",\n            \".smt\"\n        ],\n        \"interpreters\": [\n            \"boolector\",\n            \"cvc4\",\n            \"mathsat5\",\n            \"opensmt\",\n            \"smtinterpol\",\n            \"smt-rat\",\n            \"stp\",\n            \"verit\",\n            \"yices2\",\n            \"z3\"\n        ],\n        \"tm_scope\": \"source.smt\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 330\n    },\n    \"SPARQL\": {\n        \"type\": \"data\",\n        \"color\": \"#0C4597\",\n        \"tm_scope\": \"source.sparql\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"sparql\",\n        \"codemirror_mime_type\": \"application/sparql-query\",\n        \"extensions\": [\n            \".sparql\",\n            \".rq\"\n        ],\n        \"language_id\": 331\n    },\n    \"SQF\": {\n        \"type\": \"programming\",\n        \"color\": \"#3F3F3F\",\n        \"extensions\": [\n            \".sqf\",\n            \".hqf\"\n        ],\n        \"tm_scope\": \"source.sqf\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 332\n    },\n    \"SQL\": {\n        \"type\": \"data\",\n        \"color\": \"#e38c00\",\n        \"tm_scope\": \"source.sql\",\n        \"ace_mode\": \"sql\",\n        \"codemirror_mode\": \"sql\",\n        \"codemirror_mime_type\": \"text/x-sql\",\n        \"extensions\": [\n            \".sql\",\n            \".cql\",\n            \".ddl\",\n            \".inc\",\n            \".mysql\",\n            \".prc\",\n            \".tab\",\n            \".udf\",\n            \".viw\"\n        ],\n        \"language_id\": 333\n    },\n    \"SQLPL\": {\n        \"type\": \"programming\",\n        \"color\": \"#e38c00\",\n        \"ace_mode\": \"sql\",\n        \"codemirror_mode\": \"sql\",\n        \"codemirror_mime_type\": \"text/x-sql\",\n        \"tm_scope\": \"source.sql\",\n        \"extensions\": [\n            \".sql\",\n            \".db2\"\n        ],\n        \"language_id\": 334\n    },\n    \"SRecode Template\": {\n        \"type\": \"markup\",\n        \"color\": \"#348a34\",\n        \"tm_scope\": \"source.lisp\",\n        \"ace_mode\": \"lisp\",\n        \"codemirror_mode\": \"commonlisp\",\n        \"codemirror_mime_type\": \"text/x-common-lisp\",\n        \"extensions\": [\n            \".srt\"\n        ],\n        \"language_id\": 335\n    },\n    \"SSH Config\": {\n        \"type\": \"data\",\n        \"group\": \"INI\",\n        \"filenames\": [\n            \"ssh-config\",\n            \"ssh_config\",\n            \"sshconfig\",\n            \"sshconfig.snip\",\n            \"sshd-config\",\n            \"sshd_config\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.ssh-config\",\n        \"language_id\": 554920715\n    },\n    \"STAR\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".star\"\n        ],\n        \"tm_scope\": \"source.star\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 424510560\n    },\n    \"STL\": {\n        \"type\": \"data\",\n        \"color\": \"#373b5e\",\n        \"aliases\": [\n            \"ascii stl\",\n            \"stla\"\n        ],\n        \"extensions\": [\n            \".stl\"\n        ],\n        \"tm_scope\": \"source.stl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 455361735\n    },\n    \"STON\": {\n        \"type\": \"data\",\n        \"group\": \"Smalltalk\",\n        \"extensions\": [\n            \".ston\"\n        ],\n        \"tm_scope\": \"source.smalltalk\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 336\n    },\n    \"SVG\": {\n        \"type\": \"data\",\n        \"color\": \"#ff9900\",\n        \"extensions\": [\n            \".svg\"\n        ],\n        \"tm_scope\": \"text.xml.svg\",\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"language_id\": 337\n    },\n    \"SWIG\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".i\"\n        ],\n        \"tm_scope\": \"source.c++\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"language_id\": 1066250075\n    },\n    \"Sage\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".sage\",\n            \".sagews\"\n        ],\n        \"tm_scope\": \"source.python\",\n        \"ace_mode\": \"python\",\n        \"codemirror_mode\": \"python\",\n        \"codemirror_mime_type\": \"text/x-python\",\n        \"language_id\": 338\n    },\n    \"SaltStack\": {\n        \"type\": \"programming\",\n        \"color\": \"#646464\",\n        \"aliases\": [\n            \"saltstate\",\n            \"salt\"\n        ],\n        \"extensions\": [\n            \".sls\"\n        ],\n        \"tm_scope\": \"source.yaml.salt\",\n        \"ace_mode\": \"yaml\",\n        \"codemirror_mode\": \"yaml\",\n        \"codemirror_mime_type\": \"text/x-yaml\",\n        \"language_id\": 339\n    },\n    \"Sass\": {\n        \"type\": \"markup\",\n        \"color\": \"#a53b70\",\n        \"tm_scope\": \"source.sass\",\n        \"extensions\": [\n            \".sass\"\n        ],\n        \"ace_mode\": \"sass\",\n        \"codemirror_mode\": \"sass\",\n        \"codemirror_mime_type\": \"text/x-sass\",\n        \"language_id\": 340\n    },\n    \"Scala\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.scala\",\n        \"ace_mode\": \"scala\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-scala\",\n        \"color\": \"#c22d40\",\n        \"extensions\": [\n            \".scala\",\n            \".kojo\",\n            \".sbt\",\n            \".sc\"\n        ],\n        \"interpreters\": [\n            \"scala\"\n        ],\n        \"language_id\": 341\n    },\n    \"Scaml\": {\n        \"type\": \"markup\",\n        \"color\": \"#bd181a\",\n        \"extensions\": [\n            \".scaml\"\n        ],\n        \"tm_scope\": \"source.scaml\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 342\n    },\n    \"Scenic\": {\n        \"type\": \"programming\",\n        \"color\": \"#fdc700\",\n        \"extensions\": [\n            \".scenic\"\n        ],\n        \"tm_scope\": \"source.scenic\",\n        \"ace_mode\": \"text\",\n        \"interpreters\": [\n            \"scenic\"\n        ],\n        \"language_id\": 619814037\n    },\n    \"Scheme\": {\n        \"type\": \"programming\",\n        \"color\": \"#1e4aec\",\n        \"extensions\": [\n            \".scm\",\n            \".sch\",\n            \".sld\",\n            \".sls\",\n            \".sps\",\n            \".ss\"\n        ],\n        \"interpreters\": [\n            \"scheme\",\n            \"guile\",\n            \"bigloo\",\n            \"chicken\",\n            \"csi\",\n            \"gosh\",\n            \"r6rs\"\n        ],\n        \"tm_scope\": \"source.scheme\",\n        \"ace_mode\": \"scheme\",\n        \"codemirror_mode\": \"scheme\",\n        \"codemirror_mime_type\": \"text/x-scheme\",\n        \"language_id\": 343\n    },\n    \"Scilab\": {\n        \"type\": \"programming\",\n        \"color\": \"#ca0f21\",\n        \"extensions\": [\n            \".sci\",\n            \".sce\",\n            \".tst\"\n        ],\n        \"tm_scope\": \"source.scilab\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 344\n    },\n    \"Self\": {\n        \"type\": \"programming\",\n        \"color\": \"#0579aa\",\n        \"extensions\": [\n            \".self\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 345\n    },\n    \"ShaderLab\": {\n        \"type\": \"programming\",\n        \"color\": \"#222c37\",\n        \"extensions\": [\n            \".shader\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.shaderlab\",\n        \"language_id\": 664257356\n    },\n    \"Shell\": {\n        \"type\": \"programming\",\n        \"color\": \"#89e051\",\n        \"aliases\": [\n            \"sh\",\n            \"shell-script\",\n            \"bash\",\n            \"zsh\",\n            \"envrc\"\n        ],\n        \"extensions\": [\n            \".sh\",\n            \".bash\",\n            \".bats\",\n            \".cgi\",\n            \".command\",\n            \".fcgi\",\n            \".ksh\",\n            \".sh.in\",\n            \".tmux\",\n            \".tool\",\n            \".trigger\",\n            \".zsh\",\n            \".zsh-theme\"\n        ],\n        \"filenames\": [\n            \".bash_aliases\",\n            \".bash_functions\",\n            \".bash_history\",\n            \".bash_logout\",\n            \".bash_profile\",\n            \".bashrc\",\n            \".cshrc\",\n            \".envrc\",\n            \".flaskenv\",\n            \".kshrc\",\n            \".login\",\n            \".profile\",\n            \".tmux.conf\",\n            \".zlogin\",\n            \".zlogout\",\n            \".zprofile\",\n            \".zshenv\",\n            \".zshrc\",\n            \"9fs\",\n            \"PKGBUILD\",\n            \"bash_aliases\",\n            \"bash_logout\",\n            \"bash_profile\",\n            \"bashrc\",\n            \"cshrc\",\n            \"gradlew\",\n            \"kshrc\",\n            \"login\",\n            \"man\",\n            \"profile\",\n            \"tmux.conf\",\n            \"zlogin\",\n            \"zlogout\",\n            \"zprofile\",\n            \"zshenv\",\n            \"zshrc\"\n        ],\n        \"interpreters\": [\n            \"ash\",\n            \"bash\",\n            \"dash\",\n            \"ksh\",\n            \"mksh\",\n            \"pdksh\",\n            \"rc\",\n            \"sh\",\n            \"zsh\"\n        ],\n        \"tm_scope\": \"source.shell\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 346\n    },\n    \"ShellCheck Config\": {\n        \"type\": \"data\",\n        \"color\": \"#cecfcb\",\n        \"filenames\": [\n            \".shellcheckrc\"\n        ],\n        \"aliases\": [\n            \"shellcheckrc\"\n        ],\n        \"tm_scope\": \"source.shellcheckrc\",\n        \"ace_mode\": \"ini\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"language_id\": 687511714\n    },\n    \"ShellSession\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".sh-session\"\n        ],\n        \"aliases\": [\n            \"bash session\",\n            \"console\"\n        ],\n        \"tm_scope\": \"text.shell-session\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 347\n    },\n    \"Shen\": {\n        \"type\": \"programming\",\n        \"color\": \"#120F14\",\n        \"extensions\": [\n            \".shen\"\n        ],\n        \"tm_scope\": \"source.shen\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 348\n    },\n    \"Sieve\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.sieve\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".sieve\"\n        ],\n        \"codemirror_mode\": \"sieve\",\n        \"codemirror_mime_type\": \"application/sieve\",\n        \"language_id\": 208976687\n    },\n    \"Simple File Verification\": {\n        \"type\": \"data\",\n        \"group\": \"Checksums\",\n        \"color\": \"#C9BFED\",\n        \"extensions\": [\n            \".sfv\"\n        ],\n        \"aliases\": [\n            \"sfv\"\n        ],\n        \"tm_scope\": \"source.sfv\",\n        \"ace_mode\": \"ini\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"language_id\": 735623761\n    },\n    \"Singularity\": {\n        \"type\": \"programming\",\n        \"color\": \"#64E6AD\",\n        \"tm_scope\": \"source.singularity\",\n        \"filenames\": [\n            \"Singularity\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 987024632\n    },\n    \"Slash\": {\n        \"type\": \"programming\",\n        \"color\": \"#007eff\",\n        \"extensions\": [\n            \".sl\"\n        ],\n        \"tm_scope\": \"text.html.slash\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 349\n    },\n    \"Slice\": {\n        \"type\": \"programming\",\n        \"color\": \"#003fa2\",\n        \"tm_scope\": \"source.ice\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".ice\"\n        ],\n        \"language_id\": 894641667\n    },\n    \"Slim\": {\n        \"type\": \"markup\",\n        \"color\": \"#2b2b2b\",\n        \"extensions\": [\n            \".slim\"\n        ],\n        \"tm_scope\": \"text.slim\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"slim\",\n        \"codemirror_mime_type\": \"text/x-slim\",\n        \"language_id\": 350\n    },\n    \"Slint\": {\n        \"type\": \"markup\",\n        \"color\": \"#2379F4\",\n        \"extensions\": [\n            \".slint\"\n        ],\n        \"tm_scope\": \"source.slint\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 119900149\n    },\n    \"SmPL\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".cocci\"\n        ],\n        \"aliases\": [\n            \"coccinelle\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.smpl\",\n        \"color\": \"#c94949\",\n        \"language_id\": 164123055\n    },\n    \"Smali\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".smali\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.smali\",\n        \"language_id\": 351\n    },\n    \"Smalltalk\": {\n        \"type\": \"programming\",\n        \"color\": \"#596706\",\n        \"extensions\": [\n            \".st\",\n            \".cs\"\n        ],\n        \"aliases\": [\n            \"squeak\"\n        ],\n        \"tm_scope\": \"source.smalltalk\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"smalltalk\",\n        \"codemirror_mime_type\": \"text/x-stsrc\",\n        \"language_id\": 352\n    },\n    \"Smarty\": {\n        \"type\": \"programming\",\n        \"color\": \"#f0c040\",\n        \"extensions\": [\n            \".tpl\"\n        ],\n        \"ace_mode\": \"smarty\",\n        \"codemirror_mode\": \"smarty\",\n        \"codemirror_mime_type\": \"text/x-smarty\",\n        \"tm_scope\": \"text.html.smarty\",\n        \"language_id\": 353\n    },\n    \"Smithy\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"tm_scope\": \"source.smithy\",\n        \"color\": \"#c44536\",\n        \"extensions\": [\n            \".smithy\"\n        ],\n        \"language_id\": 1027892786\n    },\n    \"Snakemake\": {\n        \"type\": \"programming\",\n        \"group\": \"Python\",\n        \"tm_scope\": \"source.python\",\n        \"ace_mode\": \"python\",\n        \"codemirror_mode\": \"python\",\n        \"codemirror_mime_type\": \"text/x-python\",\n        \"color\": \"#419179\",\n        \"extensions\": [\n            \".smk\",\n            \".snakefile\"\n        ],\n        \"filenames\": [\n            \"Snakefile\"\n        ],\n        \"aliases\": [\n            \"snakefile\"\n        ],\n        \"language_id\": 151241392\n    },\n    \"Solidity\": {\n        \"type\": \"programming\",\n        \"color\": \"#AA6746\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.solidity\",\n        \"extensions\": [\n            \".sol\"\n        ],\n        \"language_id\": 237469032\n    },\n    \"Soong\": {\n        \"type\": \"data\",\n        \"tm_scope\": \"source.bp\",\n        \"ace_mode\": \"text\",\n        \"filenames\": [\n            \"Android.bp\"\n        ],\n        \"language_id\": 222900098\n    },\n    \"SourcePawn\": {\n        \"type\": \"programming\",\n        \"color\": \"#f69e1d\",\n        \"aliases\": [\n            \"sourcemod\"\n        ],\n        \"extensions\": [\n            \".sp\",\n            \".inc\"\n        ],\n        \"tm_scope\": \"source.sourcepawn\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 354\n    },\n    \"Spline Font Database\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".sfd\"\n        ],\n        \"tm_scope\": \"text.sfd\",\n        \"ace_mode\": \"yaml\",\n        \"language_id\": 767169629\n    },\n    \"Squirrel\": {\n        \"type\": \"programming\",\n        \"color\": \"#800000\",\n        \"extensions\": [\n            \".nut\"\n        ],\n        \"tm_scope\": \"source.nut\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-c++src\",\n        \"language_id\": 355\n    },\n    \"Stan\": {\n        \"type\": \"programming\",\n        \"color\": \"#b2011d\",\n        \"extensions\": [\n            \".stan\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.stan\",\n        \"language_id\": 356\n    },\n    \"Standard ML\": {\n        \"type\": \"programming\",\n        \"color\": \"#dc566d\",\n        \"aliases\": [\n            \"sml\"\n        ],\n        \"extensions\": [\n            \".ml\",\n            \".fun\",\n            \".sig\",\n            \".sml\"\n        ],\n        \"tm_scope\": \"source.ml\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"mllike\",\n        \"codemirror_mime_type\": \"text/x-ocaml\",\n        \"language_id\": 357\n    },\n    \"Starlark\": {\n        \"type\": \"programming\",\n        \"tm_scope\": \"source.python\",\n        \"ace_mode\": \"python\",\n        \"codemirror_mode\": \"python\",\n        \"codemirror_mime_type\": \"text/x-python\",\n        \"color\": \"#76d275\",\n        \"extensions\": [\n            \".bzl\",\n            \".star\"\n        ],\n        \"filenames\": [\n            \"BUCK\",\n            \"BUILD\",\n            \"BUILD.bazel\",\n            \"MODULE.bazel\",\n            \"Tiltfile\",\n            \"WORKSPACE\",\n            \"WORKSPACE.bazel\"\n        ],\n        \"aliases\": [\n            \"bazel\",\n            \"bzl\"\n        ],\n        \"language_id\": 960266174\n    },\n    \"Stata\": {\n        \"type\": \"programming\",\n        \"color\": \"#1a5f91\",\n        \"extensions\": [\n            \".do\",\n            \".ado\",\n            \".doh\",\n            \".ihlp\",\n            \".mata\",\n            \".matah\",\n            \".sthlp\"\n        ],\n        \"tm_scope\": \"source.stata\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 358\n    },\n    \"StringTemplate\": {\n        \"type\": \"markup\",\n        \"color\": \"#3fb34f\",\n        \"extensions\": [\n            \".st\"\n        ],\n        \"tm_scope\": \"source.string-template\",\n        \"ace_mode\": \"html\",\n        \"codemirror_mode\": \"htmlmixed\",\n        \"codemirror_mime_type\": \"text/html\",\n        \"language_id\": 89855901\n    },\n    \"Stylus\": {\n        \"type\": \"markup\",\n        \"color\": \"#ff6347\",\n        \"extensions\": [\n            \".styl\"\n        ],\n        \"tm_scope\": \"source.stylus\",\n        \"ace_mode\": \"stylus\",\n        \"language_id\": 359\n    },\n    \"SubRip Text\": {\n        \"type\": \"data\",\n        \"color\": \"#9e0101\",\n        \"extensions\": [\n            \".srt\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"text.srt\",\n        \"language_id\": 360\n    },\n    \"SugarSS\": {\n        \"type\": \"markup\",\n        \"color\": \"#2fcc9f\",\n        \"tm_scope\": \"source.css.postcss.sugarss\",\n        \"extensions\": [\n            \".sss\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 826404698\n    },\n    \"SuperCollider\": {\n        \"type\": \"programming\",\n        \"color\": \"#46390b\",\n        \"extensions\": [\n            \".sc\",\n            \".scd\"\n        ],\n        \"interpreters\": [\n            \"sclang\",\n            \"scsynth\"\n        ],\n        \"tm_scope\": \"source.supercollider\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 361\n    },\n    \"Svelte\": {\n        \"type\": \"markup\",\n        \"color\": \"#ff3e00\",\n        \"tm_scope\": \"source.svelte\",\n        \"ace_mode\": \"html\",\n        \"codemirror_mode\": \"htmlmixed\",\n        \"codemirror_mime_type\": \"text/html\",\n        \"extensions\": [\n            \".svelte\"\n        ],\n        \"language_id\": 928734530\n    },\n    \"Sway\": {\n        \"type\": \"programming\",\n        \"color\": \"#00F58C\",\n        \"extensions\": [\n            \".sw\"\n        ],\n        \"tm_scope\": \"source.sway\",\n        \"ace_mode\": \"rust\",\n        \"codemirror_mode\": \"rust\",\n        \"codemirror_mime_type\": \"text/x-rustsrc\",\n        \"language_id\": 271471144\n    },\n    \"Sweave\": {\n        \"type\": \"prose\",\n        \"color\": \"#198ce7\",\n        \"extensions\": [\n            \".rnw\"\n        ],\n        \"tm_scope\": \"text.tex.latex.sweave\",\n        \"ace_mode\": \"tex\",\n        \"language_id\": 558779190\n    },\n    \"Swift\": {\n        \"type\": \"programming\",\n        \"color\": \"#F05138\",\n        \"extensions\": [\n            \".swift\"\n        ],\n        \"tm_scope\": \"source.swift\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"swift\",\n        \"codemirror_mime_type\": \"text/x-swift\",\n        \"language_id\": 362\n    },\n    \"SystemVerilog\": {\n        \"type\": \"programming\",\n        \"color\": \"#DAE1C2\",\n        \"extensions\": [\n            \".sv\",\n            \".svh\",\n            \".vh\"\n        ],\n        \"tm_scope\": \"source.systemverilog\",\n        \"ace_mode\": \"verilog\",\n        \"codemirror_mode\": \"verilog\",\n        \"codemirror_mime_type\": \"text/x-systemverilog\",\n        \"language_id\": 363\n    },\n    \"TI Program\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#A0AA87\",\n        \"extensions\": [\n            \".8xp\",\n            \".8xp.txt\"\n        ],\n        \"language_id\": 422,\n        \"tm_scope\": \"source.8xp\"\n    },\n    \"TL-Verilog\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".tlv\"\n        ],\n        \"tm_scope\": \"source.tlverilog\",\n        \"ace_mode\": \"verilog\",\n        \"color\": \"#C40023\",\n        \"language_id\": 118656070\n    },\n    \"TLA\": {\n        \"type\": \"programming\",\n        \"color\": \"#4b0079\",\n        \"extensions\": [\n            \".tla\"\n        ],\n        \"tm_scope\": \"source.tla\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 364\n    },\n    \"TOML\": {\n        \"type\": \"data\",\n        \"color\": \"#9c4221\",\n        \"extensions\": [\n            \".toml\"\n        ],\n        \"filenames\": [\n            \"Cargo.lock\",\n            \"Cargo.toml.orig\",\n            \"Gopkg.lock\",\n            \"Pipfile\",\n            \"pdm.lock\",\n            \"poetry.lock\",\n            \"uv.lock\"\n        ],\n        \"tm_scope\": \"source.toml\",\n        \"ace_mode\": \"toml\",\n        \"codemirror_mode\": \"toml\",\n        \"codemirror_mime_type\": \"text/x-toml\",\n        \"language_id\": 365\n    },\n    \"TSQL\": {\n        \"type\": \"programming\",\n        \"color\": \"#e38c00\",\n        \"extensions\": [\n            \".sql\"\n        ],\n        \"ace_mode\": \"sql\",\n        \"tm_scope\": \"source.tsql\",\n        \"language_id\": 918334941\n    },\n    \"TSV\": {\n        \"type\": \"data\",\n        \"color\": \"#237346\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.generic-db\",\n        \"extensions\": [\n            \".tsv\",\n            \".vcf\"\n        ],\n        \"aliases\": [\n            \"tab-seperated values\"\n        ],\n        \"language_id\": 1035892117\n    },\n    \"TSX\": {\n        \"type\": \"programming\",\n        \"color\": \"#3178c6\",\n        \"group\": \"TypeScript\",\n        \"extensions\": [\n            \".tsx\"\n        ],\n        \"tm_scope\": \"source.tsx\",\n        \"ace_mode\": \"javascript\",\n        \"codemirror_mode\": \"jsx\",\n        \"codemirror_mime_type\": \"text/jsx\",\n        \"language_id\": 94901924\n    },\n    \"TXL\": {\n        \"type\": \"programming\",\n        \"color\": \"#0178b8\",\n        \"extensions\": [\n            \".txl\"\n        ],\n        \"tm_scope\": \"source.txl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 366\n    },\n    \"Talon\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#333333\",\n        \"extensions\": [\n            \".talon\"\n        ],\n        \"tm_scope\": \"source.talon\",\n        \"language_id\": 959889508\n    },\n    \"Tcl\": {\n        \"type\": \"programming\",\n        \"color\": \"#e4cc98\",\n        \"extensions\": [\n            \".tcl\",\n            \".adp\",\n            \".sdc\",\n            \".tcl.in\",\n            \".tm\",\n            \".xdc\"\n        ],\n        \"aliases\": [\n            \"sdc\",\n            \"xdc\"\n        ],\n        \"filenames\": [\n            \"owh\",\n            \"starfield\"\n        ],\n        \"interpreters\": [\n            \"tclsh\",\n            \"wish\"\n        ],\n        \"tm_scope\": \"source.tcl\",\n        \"ace_mode\": \"tcl\",\n        \"codemirror_mode\": \"tcl\",\n        \"codemirror_mime_type\": \"text/x-tcl\",\n        \"language_id\": 367\n    },\n    \"Tcsh\": {\n        \"type\": \"programming\",\n        \"group\": \"Shell\",\n        \"extensions\": [\n            \".tcsh\",\n            \".csh\"\n        ],\n        \"interpreters\": [\n            \"tcsh\",\n            \"csh\"\n        ],\n        \"tm_scope\": \"source.shell\",\n        \"ace_mode\": \"sh\",\n        \"codemirror_mode\": \"shell\",\n        \"codemirror_mime_type\": \"text/x-sh\",\n        \"language_id\": 368\n    },\n    \"TeX\": {\n        \"type\": \"markup\",\n        \"color\": \"#3D6117\",\n        \"ace_mode\": \"tex\",\n        \"codemirror_mode\": \"stex\",\n        \"codemirror_mime_type\": \"text/x-stex\",\n        \"tm_scope\": \"text.tex.latex\",\n        \"wrap\": true,\n        \"aliases\": [\n            \"latex\"\n        ],\n        \"extensions\": [\n            \".tex\",\n            \".aux\",\n            \".bbx\",\n            \".cbx\",\n            \".cls\",\n            \".dtx\",\n            \".ins\",\n            \".lbx\",\n            \".ltx\",\n            \".mkii\",\n            \".mkiv\",\n            \".mkvi\",\n            \".sty\",\n            \".toc\"\n        ],\n        \"language_id\": 369\n    },\n    \"Tea\": {\n        \"type\": \"markup\",\n        \"extensions\": [\n            \".tea\"\n        ],\n        \"tm_scope\": \"source.tea\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 370\n    },\n    \"Terra\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".t\"\n        ],\n        \"color\": \"#00004c\",\n        \"tm_scope\": \"source.terra\",\n        \"ace_mode\": \"lua\",\n        \"codemirror_mode\": \"lua\",\n        \"codemirror_mime_type\": \"text/x-lua\",\n        \"interpreters\": [\n            \"lua\"\n        ],\n        \"language_id\": 371\n    },\n    \"Terraform Template\": {\n        \"type\": \"markup\",\n        \"extensions\": [\n            \".tftpl\"\n        ],\n        \"color\": \"#7b42bb\",\n        \"tm_scope\": \"source.hcl.terraform\",\n        \"ace_mode\": \"ruby\",\n        \"codemirror_mode\": \"ruby\",\n        \"codemirror_mime_type\": \"text/x-ruby\",\n        \"group\": \"HCL\",\n        \"language_id\": 856832701\n    },\n    \"Texinfo\": {\n        \"type\": \"prose\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".texinfo\",\n            \".texi\",\n            \".txi\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"text.texinfo\",\n        \"interpreters\": [\n            \"makeinfo\"\n        ],\n        \"language_id\": 988020015\n    },\n    \"Text\": {\n        \"type\": \"prose\",\n        \"wrap\": true,\n        \"aliases\": [\n            \"fundamental\",\n            \"plain text\"\n        ],\n        \"extensions\": [\n            \".txt\",\n            \".fr\",\n            \".nb\",\n            \".ncl\",\n            \".no\"\n        ],\n        \"filenames\": [\n            \"CITATION\",\n            \"CITATIONS\",\n            \"COPYING\",\n            \"COPYING.regex\",\n            \"COPYRIGHT.regex\",\n            \"FONTLOG\",\n            \"INSTALL\",\n            \"INSTALL.mysql\",\n            \"LICENSE\",\n            \"LICENSE.mysql\",\n            \"NEWS\",\n            \"README.me\",\n            \"README.mysql\",\n            \"README.nss\",\n            \"click.me\",\n            \"delete.me\",\n            \"keep.me\",\n            \"package.mask\",\n            \"package.use.mask\",\n            \"package.use.stable.mask\",\n            \"read.me\",\n            \"readme.1st\",\n            \"test.me\",\n            \"use.mask\",\n            \"use.stable.mask\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 372\n    },\n    \"TextGrid\": {\n        \"type\": \"data\",\n        \"color\": \"#c8506d\",\n        \"tm_scope\": \"source.textgrid\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".TextGrid\"\n        ],\n        \"language_id\": 965696054\n    },\n    \"TextMate Properties\": {\n        \"type\": \"data\",\n        \"color\": \"#df66e4\",\n        \"aliases\": [\n            \"tm-properties\"\n        ],\n        \"filenames\": [\n            \".tm_properties\"\n        ],\n        \"ace_mode\": \"properties\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"tm_scope\": \"source.tm-properties\",\n        \"language_id\": 981795023\n    },\n    \"Textile\": {\n        \"type\": \"prose\",\n        \"color\": \"#ffe7ac\",\n        \"ace_mode\": \"textile\",\n        \"codemirror_mode\": \"textile\",\n        \"codemirror_mime_type\": \"text/x-textile\",\n        \"wrap\": true,\n        \"extensions\": [\n            \".textile\"\n        ],\n        \"tm_scope\": \"none\",\n        \"language_id\": 373\n    },\n    \"Thrift\": {\n        \"type\": \"programming\",\n        \"color\": \"#D12127\",\n        \"tm_scope\": \"source.thrift\",\n        \"extensions\": [\n            \".thrift\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 374\n    },\n    \"Toit\": {\n        \"type\": \"programming\",\n        \"color\": \"#c2c9fb\",\n        \"extensions\": [\n            \".toit\"\n        ],\n        \"tm_scope\": \"source.toit\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 356554395\n    },\n    \"Turing\": {\n        \"type\": \"programming\",\n        \"color\": \"#cf142b\",\n        \"extensions\": [\n            \".t\",\n            \".tu\"\n        ],\n        \"tm_scope\": \"source.turing\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 375\n    },\n    \"Turtle\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".ttl\"\n        ],\n        \"tm_scope\": \"source.turtle\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"turtle\",\n        \"codemirror_mime_type\": \"text/turtle\",\n        \"language_id\": 376\n    },\n    \"Twig\": {\n        \"type\": \"markup\",\n        \"color\": \"#c1d026\",\n        \"extensions\": [\n            \".twig\"\n        ],\n        \"tm_scope\": \"text.html.twig\",\n        \"ace_mode\": \"twig\",\n        \"codemirror_mode\": \"twig\",\n        \"codemirror_mime_type\": \"text/x-twig\",\n        \"language_id\": 377\n    },\n    \"Type Language\": {\n        \"type\": \"data\",\n        \"aliases\": [\n            \"tl\"\n        ],\n        \"extensions\": [\n            \".tl\"\n        ],\n        \"tm_scope\": \"source.tl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 632765617\n    },\n    \"TypeScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#3178c6\",\n        \"aliases\": [\n            \"ts\"\n        ],\n        \"interpreters\": [\n            \"deno\",\n            \"ts-node\",\n            \"tsx\"\n        ],\n        \"extensions\": [\n            \".ts\",\n            \".cts\",\n            \".mts\"\n        ],\n        \"tm_scope\": \"source.ts\",\n        \"ace_mode\": \"typescript\",\n        \"codemirror_mode\": \"javascript\",\n        \"codemirror_mime_type\": \"application/typescript\",\n        \"language_id\": 378\n    },\n    \"Typst\": {\n        \"type\": \"programming\",\n        \"color\": \"#239dad\",\n        \"aliases\": [\n            \"typ\"\n        ],\n        \"extensions\": [\n            \".typ\"\n        ],\n        \"tm_scope\": \"source.typst\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 704730682\n    },\n    \"Unified Parallel C\": {\n        \"type\": \"programming\",\n        \"color\": \"#4e3617\",\n        \"group\": \"C\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"extensions\": [\n            \".upc\"\n        ],\n        \"tm_scope\": \"source.c\",\n        \"language_id\": 379\n    },\n    \"Unity3D Asset\": {\n        \"type\": \"data\",\n        \"color\": \"#222c37\",\n        \"ace_mode\": \"yaml\",\n        \"codemirror_mode\": \"yaml\",\n        \"codemirror_mime_type\": \"text/x-yaml\",\n        \"extensions\": [\n            \".anim\",\n            \".asset\",\n            \".mask\",\n            \".mat\",\n            \".meta\",\n            \".prefab\",\n            \".unity\"\n        ],\n        \"tm_scope\": \"source.yaml\",\n        \"language_id\": 380\n    },\n    \"Unix Assembly\": {\n        \"type\": \"programming\",\n        \"group\": \"Assembly\",\n        \"extensions\": [\n            \".s\",\n            \".ms\"\n        ],\n        \"aliases\": [\n            \"gas\",\n            \"gnu asm\",\n            \"unix asm\"\n        ],\n        \"tm_scope\": \"source.x86\",\n        \"ace_mode\": \"assembly_x86\",\n        \"language_id\": 120\n    },\n    \"Uno\": {\n        \"type\": \"programming\",\n        \"color\": \"#9933cc\",\n        \"extensions\": [\n            \".uno\"\n        ],\n        \"ace_mode\": \"csharp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csharp\",\n        \"tm_scope\": \"source.cs\",\n        \"language_id\": 381\n    },\n    \"UnrealScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#a54c4d\",\n        \"extensions\": [\n            \".uc\"\n        ],\n        \"tm_scope\": \"source.java\",\n        \"ace_mode\": \"java\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-java\",\n        \"language_id\": 382\n    },\n    \"UrWeb\": {\n        \"type\": \"programming\",\n        \"color\": \"#ccccee\",\n        \"aliases\": [\n            \"Ur/Web\",\n            \"Ur\"\n        ],\n        \"extensions\": [\n            \".ur\",\n            \".urs\"\n        ],\n        \"tm_scope\": \"source.ur\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 383\n    },\n    \"V\": {\n        \"type\": \"programming\",\n        \"color\": \"#4f87c4\",\n        \"aliases\": [\n            \"vlang\"\n        ],\n        \"extensions\": [\n            \".v\"\n        ],\n        \"tm_scope\": \"source.v\",\n        \"ace_mode\": \"golang\",\n        \"codemirror_mode\": \"go\",\n        \"codemirror_mime_type\": \"text/x-go\",\n        \"language_id\": 603371597\n    },\n    \"VBA\": {\n        \"type\": \"programming\",\n        \"color\": \"#867db1\",\n        \"extensions\": [\n            \".bas\",\n            \".cls\",\n            \".frm\",\n            \".vba\"\n        ],\n        \"tm_scope\": \"source.vba\",\n        \"aliases\": [\n            \"visual basic for applications\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"vb\",\n        \"codemirror_mime_type\": \"text/x-vb\",\n        \"language_id\": 399230729\n    },\n    \"VBScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#15dcdc\",\n        \"extensions\": [\n            \".vbs\"\n        ],\n        \"tm_scope\": \"source.vbnet\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"vbscript\",\n        \"codemirror_mime_type\": \"text/vbscript\",\n        \"language_id\": 408016005\n    },\n    \"VCL\": {\n        \"type\": \"programming\",\n        \"color\": \"#148AA8\",\n        \"extensions\": [\n            \".vcl\"\n        ],\n        \"tm_scope\": \"source.varnish.vcl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 384\n    },\n    \"VHDL\": {\n        \"type\": \"programming\",\n        \"color\": \"#adb2cb\",\n        \"extensions\": [\n            \".vhdl\",\n            \".vhd\",\n            \".vhf\",\n            \".vhi\",\n            \".vho\",\n            \".vhs\",\n            \".vht\",\n            \".vhw\"\n        ],\n        \"tm_scope\": \"source.vhdl\",\n        \"ace_mode\": \"vhdl\",\n        \"codemirror_mode\": \"vhdl\",\n        \"codemirror_mime_type\": \"text/x-vhdl\",\n        \"language_id\": 385\n    },\n    \"Vala\": {\n        \"type\": \"programming\",\n        \"color\": \"#a56de2\",\n        \"extensions\": [\n            \".vala\",\n            \".vapi\"\n        ],\n        \"tm_scope\": \"source.vala\",\n        \"ace_mode\": \"vala\",\n        \"language_id\": 386\n    },\n    \"Valve Data Format\": {\n        \"type\": \"data\",\n        \"color\": \"#f26025\",\n        \"aliases\": [\n            \"keyvalues\",\n            \"vdf\"\n        ],\n        \"extensions\": [\n            \".vdf\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.keyvalues\",\n        \"language_id\": 544060961\n    },\n    \"Velocity Template Language\": {\n        \"type\": \"markup\",\n        \"color\": \"#507cff\",\n        \"aliases\": [\n            \"vtl\",\n            \"velocity\"\n        ],\n        \"extensions\": [\n            \".vtl\"\n        ],\n        \"ace_mode\": \"velocity\",\n        \"tm_scope\": \"source.velocity\",\n        \"codemirror_mode\": \"velocity\",\n        \"codemirror_mime_type\": \"text/velocity\",\n        \"language_id\": 292377326\n    },\n    \"Verilog\": {\n        \"type\": \"programming\",\n        \"color\": \"#b2b7f8\",\n        \"extensions\": [\n            \".v\",\n            \".veo\"\n        ],\n        \"tm_scope\": \"source.verilog\",\n        \"ace_mode\": \"verilog\",\n        \"codemirror_mode\": \"verilog\",\n        \"codemirror_mime_type\": \"text/x-verilog\",\n        \"language_id\": 387\n    },\n    \"Vim Help File\": {\n        \"type\": \"prose\",\n        \"color\": \"#199f4b\",\n        \"aliases\": [\n            \"help\",\n            \"vimhelp\"\n        ],\n        \"extensions\": [\n            \".txt\"\n        ],\n        \"tm_scope\": \"text.vim-help\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 508563686\n    },\n    \"Vim Script\": {\n        \"type\": \"programming\",\n        \"color\": \"#199f4b\",\n        \"tm_scope\": \"source.viml\",\n        \"aliases\": [\n            \"vim\",\n            \"viml\",\n            \"nvim\",\n            \"vimscript\"\n        ],\n        \"extensions\": [\n            \".vim\",\n            \".vba\",\n            \".vimrc\",\n            \".vmb\"\n        ],\n        \"filenames\": [\n            \".exrc\",\n            \".gvimrc\",\n            \".nvimrc\",\n            \".vimrc\",\n            \"_vimrc\",\n            \"gvimrc\",\n            \"nvimrc\",\n            \"vimrc\"\n        ],\n        \"ace_mode\": \"text\",\n        \"language_id\": 388\n    },\n    \"Vim Snippet\": {\n        \"type\": \"markup\",\n        \"color\": \"#199f4b\",\n        \"aliases\": [\n            \"SnipMate\",\n            \"UltiSnip\",\n            \"UltiSnips\",\n            \"NeoSnippet\"\n        ],\n        \"extensions\": [\n            \".snip\",\n            \".snippet\",\n            \".snippets\"\n        ],\n        \"tm_scope\": \"source.vim-snippet\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 81265970\n    },\n    \"Visual Basic .NET\": {\n        \"type\": \"programming\",\n        \"color\": \"#945db7\",\n        \"extensions\": [\n            \".vb\",\n            \".vbhtml\"\n        ],\n        \"aliases\": [\n            \"visual basic\",\n            \"vbnet\",\n            \"vb .net\",\n            \"vb.net\"\n        ],\n        \"tm_scope\": \"source.vbnet\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"vb\",\n        \"codemirror_mime_type\": \"text/x-vb\",\n        \"language_id\": 389\n    },\n    \"Visual Basic 6.0\": {\n        \"type\": \"programming\",\n        \"color\": \"#2c6353\",\n        \"extensions\": [\n            \".bas\",\n            \".cls\",\n            \".ctl\",\n            \".Dsr\",\n            \".frm\"\n        ],\n        \"tm_scope\": \"source.vba\",\n        \"aliases\": [\n            \"vb6\",\n            \"vb 6\",\n            \"visual basic 6\",\n            \"visual basic classic\",\n            \"classic visual basic\"\n        ],\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"vb\",\n        \"codemirror_mime_type\": \"text/x-vb\",\n        \"language_id\": 679594952\n    },\n    \"Volt\": {\n        \"type\": \"programming\",\n        \"color\": \"#1F1F1F\",\n        \"extensions\": [\n            \".volt\"\n        ],\n        \"tm_scope\": \"source.d\",\n        \"ace_mode\": \"d\",\n        \"codemirror_mode\": \"d\",\n        \"codemirror_mime_type\": \"text/x-d\",\n        \"language_id\": 390\n    },\n    \"Vue\": {\n        \"type\": \"markup\",\n        \"color\": \"#41b883\",\n        \"extensions\": [\n            \".vue\"\n        ],\n        \"tm_scope\": \"text.html.vue\",\n        \"ace_mode\": \"html\",\n        \"language_id\": 391\n    },\n    \"Vyper\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".vy\"\n        ],\n        \"color\": \"#2980b9\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.vyper\",\n        \"language_id\": 1055641948\n    },\n    \"WDL\": {\n        \"aliases\": [\n            \"Workflow Description Language\"\n        ],\n        \"type\": \"programming\",\n        \"color\": \"#42f1f4\",\n        \"extensions\": [\n            \".wdl\"\n        ],\n        \"tm_scope\": \"source.wdl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 374521672\n    },\n    \"WGSL\": {\n        \"type\": \"programming\",\n        \"color\": \"#1a5e9a\",\n        \"extensions\": [\n            \".wgsl\"\n        ],\n        \"tm_scope\": \"source.wgsl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 836605993\n    },\n    \"Wavefront Material\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".mtl\"\n        ],\n        \"tm_scope\": \"source.wavefront.mtl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 392\n    },\n    \"Wavefront Object\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".obj\"\n        ],\n        \"tm_scope\": \"source.wavefront.obj\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 393\n    },\n    \"Web Ontology Language\": {\n        \"type\": \"data\",\n        \"color\": \"#5b70bd\",\n        \"extensions\": [\n            \".owl\"\n        ],\n        \"tm_scope\": \"text.xml\",\n        \"ace_mode\": \"xml\",\n        \"language_id\": 394\n    },\n    \"WebAssembly\": {\n        \"type\": \"programming\",\n        \"color\": \"#04133b\",\n        \"extensions\": [\n            \".wast\",\n            \".wat\"\n        ],\n        \"aliases\": [\n            \"wast\",\n            \"wasm\"\n        ],\n        \"tm_scope\": \"source.webassembly\",\n        \"ace_mode\": \"lisp\",\n        \"codemirror_mode\": \"commonlisp\",\n        \"codemirror_mime_type\": \"text/x-common-lisp\",\n        \"language_id\": 956556503\n    },\n    \"WebAssembly Interface Type\": {\n        \"type\": \"data\",\n        \"color\": \"#6250e7\",\n        \"extensions\": [\n            \".wit\"\n        ],\n        \"aliases\": [\n            \"wit\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.wit\",\n        \"codemirror_mode\": \"webidl\",\n        \"codemirror_mime_type\": \"text/x-webidl\",\n        \"language_id\": 134534086\n    },\n    \"WebIDL\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".webidl\"\n        ],\n        \"tm_scope\": \"source.webidl\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"webidl\",\n        \"codemirror_mime_type\": \"text/x-webidl\",\n        \"language_id\": 395\n    },\n    \"WebVTT\": {\n        \"type\": \"data\",\n        \"wrap\": true,\n        \"aliases\": [\n            \"vtt\"\n        ],\n        \"extensions\": [\n            \".vtt\"\n        ],\n        \"tm_scope\": \"text.vtt\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 658679714\n    },\n    \"Wget Config\": {\n        \"type\": \"data\",\n        \"group\": \"INI\",\n        \"aliases\": [\n            \"wgetrc\"\n        ],\n        \"filenames\": [\n            \".wgetrc\"\n        ],\n        \"tm_scope\": \"source.wgetrc\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 668457123\n    },\n    \"Whiley\": {\n        \"type\": \"programming\",\n        \"color\": \"#d5c397\",\n        \"extensions\": [\n            \".whiley\"\n        ],\n        \"tm_scope\": \"source.whiley\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 888779559\n    },\n    \"Wikitext\": {\n        \"type\": \"prose\",\n        \"color\": \"#fc5757\",\n        \"wrap\": true,\n        \"aliases\": [\n            \"mediawiki\",\n            \"wiki\"\n        ],\n        \"extensions\": [\n            \".mediawiki\",\n            \".wiki\",\n            \".wikitext\"\n        ],\n        \"tm_scope\": \"text.html.mediawiki\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 228\n    },\n    \"Win32 Message File\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".mc\"\n        ],\n        \"tm_scope\": \"source.win32-messages\",\n        \"ace_mode\": \"ini\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"language_id\": 950967261\n    },\n    \"Windows Registry Entries\": {\n        \"type\": \"data\",\n        \"color\": \"#52d5ff\",\n        \"extensions\": [\n            \".reg\"\n        ],\n        \"tm_scope\": \"source.reg\",\n        \"ace_mode\": \"ini\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"language_id\": 969674868\n    },\n    \"Witcher Script\": {\n        \"type\": \"programming\",\n        \"color\": \"#ff0000\",\n        \"extensions\": [\n            \".ws\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.witcherscript\",\n        \"language_id\": 686821385\n    },\n    \"Wollok\": {\n        \"type\": \"programming\",\n        \"color\": \"#a23738\",\n        \"extensions\": [\n            \".wlk\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.wollok\",\n        \"language_id\": 632745969\n    },\n    \"World of Warcraft Addon Data\": {\n        \"type\": \"data\",\n        \"color\": \"#f7e43f\",\n        \"extensions\": [\n            \".toc\"\n        ],\n        \"tm_scope\": \"source.toc\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 396\n    },\n    \"Wren\": {\n        \"type\": \"programming\",\n        \"color\": \"#383838\",\n        \"aliases\": [\n            \"wrenlang\"\n        ],\n        \"extensions\": [\n            \".wren\"\n        ],\n        \"tm_scope\": \"source.wren\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 713580619\n    },\n    \"X BitMap\": {\n        \"type\": \"data\",\n        \"group\": \"C\",\n        \"aliases\": [\n            \"xbm\"\n        ],\n        \"extensions\": [\n            \".xbm\"\n        ],\n        \"ace_mode\": \"c_cpp\",\n        \"tm_scope\": \"source.c\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"language_id\": 782911107\n    },\n    \"X Font Directory Index\": {\n        \"type\": \"data\",\n        \"filenames\": [\n            \"encodings.dir\",\n            \"fonts.alias\",\n            \"fonts.dir\",\n            \"fonts.scale\"\n        ],\n        \"tm_scope\": \"source.fontdir\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 208700028\n    },\n    \"X PixMap\": {\n        \"type\": \"data\",\n        \"group\": \"C\",\n        \"aliases\": [\n            \"xpm\"\n        ],\n        \"extensions\": [\n            \".xpm\",\n            \".pm\"\n        ],\n        \"ace_mode\": \"c_cpp\",\n        \"tm_scope\": \"source.c\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"language_id\": 781846279\n    },\n    \"X10\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"xten\"\n        ],\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".x10\"\n        ],\n        \"color\": \"#4B6BEF\",\n        \"tm_scope\": \"source.x10\",\n        \"language_id\": 397\n    },\n    \"XC\": {\n        \"type\": \"programming\",\n        \"color\": \"#99DA07\",\n        \"extensions\": [\n            \".xc\"\n        ],\n        \"tm_scope\": \"source.xc\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"language_id\": 398\n    },\n    \"XCompose\": {\n        \"type\": \"data\",\n        \"filenames\": [\n            \".XCompose\",\n            \"XCompose\",\n            \"xcompose\"\n        ],\n        \"tm_scope\": \"config.xcompose\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 225167241\n    },\n    \"XML\": {\n        \"type\": \"data\",\n        \"color\": \"#0060ac\",\n        \"tm_scope\": \"text.xml\",\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"aliases\": [\n            \"rss\",\n            \"xsd\",\n            \"wsdl\"\n        ],\n        \"extensions\": [\n            \".xml\",\n            \".adml\",\n            \".admx\",\n            \".ant\",\n            \".axaml\",\n            \".axml\",\n            \".builds\",\n            \".ccproj\",\n            \".ccxml\",\n            \".clixml\",\n            \".cproject\",\n            \".cscfg\",\n            \".csdef\",\n            \".csl\",\n            \".csproj\",\n            \".ct\",\n            \".depproj\",\n            \".dita\",\n            \".ditamap\",\n            \".ditaval\",\n            \".dll.config\",\n            \".dotsettings\",\n            \".filters\",\n            \".fsproj\",\n            \".fxml\",\n            \".glade\",\n            \".gml\",\n            \".gmx\",\n            \".grxml\",\n            \".gst\",\n            \".hzp\",\n            \".iml\",\n            \".ivy\",\n            \".jelly\",\n            \".jsproj\",\n            \".kml\",\n            \".launch\",\n            \".mdpolicy\",\n            \".mjml\",\n            \".mm\",\n            \".mod\",\n            \".mojo\",\n            \".mxml\",\n            \".natvis\",\n            \".ncl\",\n            \".ndproj\",\n            \".nproj\",\n            \".nuspec\",\n            \".odd\",\n            \".osm\",\n            \".pkgproj\",\n            \".pluginspec\",\n            \".proj\",\n            \".props\",\n            \".ps1xml\",\n            \".psc1\",\n            \".pt\",\n            \".qhelp\",\n            \".rdf\",\n            \".res\",\n            \".resx\",\n            \".rs\",\n            \".rss\",\n            \".sch\",\n            \".scxml\",\n            \".sfproj\",\n            \".shproj\",\n            \".srdf\",\n            \".storyboard\",\n            \".sublime-snippet\",\n            \".sw\",\n            \".targets\",\n            \".tml\",\n            \".ts\",\n            \".tsx\",\n            \".typ\",\n            \".ui\",\n            \".urdf\",\n            \".ux\",\n            \".vbproj\",\n            \".vcxproj\",\n            \".vsixmanifest\",\n            \".vssettings\",\n            \".vstemplate\",\n            \".vxml\",\n            \".wixproj\",\n            \".workflow\",\n            \".wsdl\",\n            \".wsf\",\n            \".wxi\",\n            \".wxl\",\n            \".wxs\",\n            \".x3d\",\n            \".xacro\",\n            \".xaml\",\n            \".xib\",\n            \".xlf\",\n            \".xliff\",\n            \".xmi\",\n            \".xml.dist\",\n            \".xmp\",\n            \".xproj\",\n            \".xsd\",\n            \".xspec\",\n            \".xul\",\n            \".zcml\"\n        ],\n        \"filenames\": [\n            \".classpath\",\n            \".cproject\",\n            \".project\",\n            \"App.config\",\n            \"NuGet.config\",\n            \"Settings.StyleCop\",\n            \"Web.Debug.config\",\n            \"Web.Release.config\",\n            \"Web.config\",\n            \"packages.config\"\n        ],\n        \"language_id\": 399\n    },\n    \"XML Property List\": {\n        \"type\": \"data\",\n        \"color\": \"#0060ac\",\n        \"group\": \"XML\",\n        \"extensions\": [\n            \".plist\",\n            \".stTheme\",\n            \".tmCommand\",\n            \".tmLanguage\",\n            \".tmPreferences\",\n            \".tmSnippet\",\n            \".tmTheme\"\n        ],\n        \"tm_scope\": \"text.xml.plist\",\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"language_id\": 75622871\n    },\n    \"XPages\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".xsp-config\",\n            \".xsp.metadata\"\n        ],\n        \"tm_scope\": \"text.xml\",\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"language_id\": 400\n    },\n    \"XProc\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".xpl\",\n            \".xproc\"\n        ],\n        \"tm_scope\": \"text.xml\",\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"language_id\": 401\n    },\n    \"XQuery\": {\n        \"type\": \"programming\",\n        \"color\": \"#5232e7\",\n        \"extensions\": [\n            \".xquery\",\n            \".xq\",\n            \".xql\",\n            \".xqm\",\n            \".xqy\"\n        ],\n        \"ace_mode\": \"xquery\",\n        \"codemirror_mode\": \"xquery\",\n        \"codemirror_mime_type\": \"application/xquery\",\n        \"tm_scope\": \"source.xq\",\n        \"language_id\": 402\n    },\n    \"XS\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".xs\"\n        ],\n        \"tm_scope\": \"source.c\",\n        \"ace_mode\": \"c_cpp\",\n        \"codemirror_mode\": \"clike\",\n        \"codemirror_mime_type\": \"text/x-csrc\",\n        \"language_id\": 403\n    },\n    \"XSLT\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"xsl\"\n        ],\n        \"extensions\": [\n            \".xslt\",\n            \".xsl\"\n        ],\n        \"tm_scope\": \"text.xml.xsl\",\n        \"ace_mode\": \"xml\",\n        \"codemirror_mode\": \"xml\",\n        \"codemirror_mime_type\": \"text/xml\",\n        \"color\": \"#EB8CEB\",\n        \"language_id\": 404\n    },\n    \"Xojo\": {\n        \"type\": \"programming\",\n        \"color\": \"#81bd41\",\n        \"extensions\": [\n            \".xojo_code\",\n            \".xojo_menu\",\n            \".xojo_report\",\n            \".xojo_script\",\n            \".xojo_toolbar\",\n            \".xojo_window\"\n        ],\n        \"tm_scope\": \"source.xojo\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 405\n    },\n    \"Xonsh\": {\n        \"type\": \"programming\",\n        \"color\": \"#285EEF\",\n        \"extensions\": [\n            \".xsh\"\n        ],\n        \"tm_scope\": \"source.python\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"python\",\n        \"codemirror_mime_type\": \"text/x-python\",\n        \"language_id\": 614078284\n    },\n    \"Xtend\": {\n        \"type\": \"programming\",\n        \"color\": \"#24255d\",\n        \"extensions\": [\n            \".xtend\"\n        ],\n        \"tm_scope\": \"source.xtend\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 406\n    },\n    \"YAML\": {\n        \"type\": \"data\",\n        \"color\": \"#cb171e\",\n        \"tm_scope\": \"source.yaml\",\n        \"aliases\": [\n            \"yml\"\n        ],\n        \"extensions\": [\n            \".yml\",\n            \".mir\",\n            \".reek\",\n            \".rviz\",\n            \".sublime-syntax\",\n            \".syntax\",\n            \".yaml\",\n            \".yaml-tmlanguage\",\n            \".yaml.sed\",\n            \".yml.mysql\"\n        ],\n        \"filenames\": [\n            \".clang-format\",\n            \".clang-tidy\",\n            \".gemrc\",\n            \"CITATION.cff\",\n            \"glide.lock\",\n            \"yarn.lock\"\n        ],\n        \"ace_mode\": \"yaml\",\n        \"codemirror_mode\": \"yaml\",\n        \"codemirror_mime_type\": \"text/x-yaml\",\n        \"language_id\": 407\n    },\n    \"YANG\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".yang\"\n        ],\n        \"tm_scope\": \"source.yang\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 408\n    },\n    \"YARA\": {\n        \"type\": \"programming\",\n        \"color\": \"#220000\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".yar\",\n            \".yara\"\n        ],\n        \"tm_scope\": \"source.yara\",\n        \"language_id\": 805122868\n    },\n    \"YASnippet\": {\n        \"type\": \"markup\",\n        \"aliases\": [\n            \"snippet\",\n            \"yas\"\n        ],\n        \"color\": \"#32AB90\",\n        \"extensions\": [\n            \".yasnippet\"\n        ],\n        \"tm_scope\": \"source.yasnippet\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 378760102\n    },\n    \"Yacc\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".y\",\n            \".yacc\",\n            \".yy\"\n        ],\n        \"tm_scope\": \"source.yacc\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#4B6C4B\",\n        \"language_id\": 409\n    },\n    \"Yul\": {\n        \"type\": \"programming\",\n        \"color\": \"#794932\",\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.yul\",\n        \"extensions\": [\n            \".yul\"\n        ],\n        \"language_id\": 237469033\n    },\n    \"ZAP\": {\n        \"type\": \"programming\",\n        \"color\": \"#0d665e\",\n        \"extensions\": [\n            \".zap\",\n            \".xzap\"\n        ],\n        \"tm_scope\": \"source.zap\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 952972794\n    },\n    \"ZIL\": {\n        \"type\": \"programming\",\n        \"color\": \"#dc75e5\",\n        \"extensions\": [\n            \".zil\",\n            \".mud\"\n        ],\n        \"tm_scope\": \"source.zil\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 973483626\n    },\n    \"Zeek\": {\n        \"type\": \"programming\",\n        \"aliases\": [\n            \"bro\"\n        ],\n        \"extensions\": [\n            \".zeek\",\n            \".bro\"\n        ],\n        \"tm_scope\": \"source.zeek\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 40\n    },\n    \"ZenScript\": {\n        \"type\": \"programming\",\n        \"color\": \"#00BCD1\",\n        \"extensions\": [\n            \".zs\"\n        ],\n        \"tm_scope\": \"source.zenscript\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 494938890\n    },\n    \"Zephir\": {\n        \"type\": \"programming\",\n        \"color\": \"#118f9e\",\n        \"extensions\": [\n            \".zep\"\n        ],\n        \"tm_scope\": \"source.php.zephir\",\n        \"ace_mode\": \"php\",\n        \"language_id\": 410\n    },\n    \"Zig\": {\n        \"type\": \"programming\",\n        \"color\": \"#ec915c\",\n        \"extensions\": [\n            \".zig\",\n            \".zig.zon\"\n        ],\n        \"tm_scope\": \"source.zig\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 646424281\n    },\n    \"Zimpl\": {\n        \"type\": \"programming\",\n        \"color\": \"#d67711\",\n        \"extensions\": [\n            \".zimpl\",\n            \".zmpl\",\n            \".zpl\"\n        ],\n        \"tm_scope\": \"none\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 411\n    },\n    \"cURL Config\": {\n        \"type\": \"data\",\n        \"group\": \"INI\",\n        \"aliases\": [\n            \"curlrc\"\n        ],\n        \"filenames\": [\n            \".curlrc\",\n            \"_curlrc\"\n        ],\n        \"tm_scope\": \"source.curlrc\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 992375436\n    },\n    \"crontab\": {\n        \"type\": \"data\",\n        \"color\": \"#ead7ac\",\n        \"aliases\": [\n            \"cron\",\n            \"cron table\"\n        ],\n        \"filenames\": [\n            \"crontab\"\n        ],\n        \"tm_scope\": \"text.crontab\",\n        \"ace_mode\": \"tcl\",\n        \"language_id\": 705203557\n    },\n    \"desktop\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".desktop\",\n            \".desktop.in\",\n            \".service\"\n        ],\n        \"tm_scope\": \"source.desktop\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 412\n    },\n    \"dircolors\": {\n        \"type\": \"data\",\n        \"extensions\": [\n            \".dircolors\"\n        ],\n        \"filenames\": [\n            \".dir_colors\",\n            \".dircolors\",\n            \"DIR_COLORS\",\n            \"_dir_colors\",\n            \"_dircolors\",\n            \"dir_colors\"\n        ],\n        \"tm_scope\": \"source.dircolors\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 691605112\n    },\n    \"eC\": {\n        \"type\": \"programming\",\n        \"color\": \"#913960\",\n        \"extensions\": [\n            \".ec\",\n            \".eh\"\n        ],\n        \"tm_scope\": \"source.c.ec\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 413\n    },\n    \"edn\": {\n        \"type\": \"data\",\n        \"ace_mode\": \"clojure\",\n        \"codemirror_mode\": \"clojure\",\n        \"codemirror_mime_type\": \"text/x-clojure\",\n        \"extensions\": [\n            \".edn\"\n        ],\n        \"tm_scope\": \"source.clojure\",\n        \"language_id\": 414\n    },\n    \"fish\": {\n        \"type\": \"programming\",\n        \"color\": \"#4aae47\",\n        \"group\": \"Shell\",\n        \"interpreters\": [\n            \"fish\"\n        ],\n        \"extensions\": [\n            \".fish\"\n        ],\n        \"tm_scope\": \"source.fish\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 415\n    },\n    \"hoon\": {\n        \"type\": \"programming\",\n        \"color\": \"#00b171\",\n        \"tm_scope\": \"source.hoon\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".hoon\"\n        ],\n        \"language_id\": 560883276\n    },\n    \"iCalendar\": {\n        \"type\": \"data\",\n        \"color\": \"#ec564c\",\n        \"extensions\": [\n            \".ics\",\n            \".ical\"\n        ],\n        \"tm_scope\": \"source.iCalendar\",\n        \"aliases\": [\n            \"iCal\"\n        ],\n        \"ace_mode\": \"properties\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"language_id\": 98384424\n    },\n    \"jq\": {\n        \"color\": \"#c7254e\",\n        \"ace_mode\": \"text\",\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".jq\"\n        ],\n        \"interpreters\": [\n            \"gojq\",\n            \"jaq\",\n            \"jq\",\n            \"jqjq\",\n            \"jqq\",\n            \"query-json\"\n        ],\n        \"tm_scope\": \"source.jq\",\n        \"language_id\": 905371884\n    },\n    \"kvlang\": {\n        \"type\": \"markup\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".kv\"\n        ],\n        \"color\": \"#1da6e0\",\n        \"tm_scope\": \"source.python.kivy\",\n        \"language_id\": 970675279\n    },\n    \"mIRC Script\": {\n        \"type\": \"programming\",\n        \"color\": \"#3d57c3\",\n        \"extensions\": [\n            \".mrc\"\n        ],\n        \"tm_scope\": \"source.msl\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 517654727\n    },\n    \"mcfunction\": {\n        \"type\": \"programming\",\n        \"color\": \"#E22837\",\n        \"extensions\": [\n            \".mcfunction\"\n        ],\n        \"tm_scope\": \"source.mcfunction\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 462488745\n    },\n    \"mupad\": {\n        \"type\": \"programming\",\n        \"color\": \"#244963\",\n        \"extensions\": [\n            \".mu\"\n        ],\n        \"tm_scope\": \"source.mupad\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 416\n    },\n    \"nanorc\": {\n        \"type\": \"data\",\n        \"color\": \"#2d004d\",\n        \"group\": \"INI\",\n        \"extensions\": [\n            \".nanorc\"\n        ],\n        \"filenames\": [\n            \".nanorc\",\n            \"nanorc\"\n        ],\n        \"tm_scope\": \"source.nanorc\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 775996197\n    },\n    \"nesC\": {\n        \"type\": \"programming\",\n        \"color\": \"#94B0C7\",\n        \"extensions\": [\n            \".nc\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.nesc\",\n        \"language_id\": 417\n    },\n    \"ooc\": {\n        \"type\": \"programming\",\n        \"color\": \"#b0b77e\",\n        \"extensions\": [\n            \".ooc\"\n        ],\n        \"tm_scope\": \"source.ooc\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 418\n    },\n    \"q\": {\n        \"type\": \"programming\",\n        \"extensions\": [\n            \".q\"\n        ],\n        \"tm_scope\": \"source.q\",\n        \"ace_mode\": \"text\",\n        \"color\": \"#0040cd\",\n        \"language_id\": 970539067\n    },\n    \"reStructuredText\": {\n        \"type\": \"prose\",\n        \"color\": \"#141414\",\n        \"wrap\": true,\n        \"aliases\": [\n            \"rst\"\n        ],\n        \"extensions\": [\n            \".rst\",\n            \".rest\",\n            \".rest.txt\",\n            \".rst.txt\"\n        ],\n        \"tm_scope\": \"text.restructuredtext\",\n        \"ace_mode\": \"text\",\n        \"codemirror_mode\": \"rst\",\n        \"codemirror_mime_type\": \"text/x-rst\",\n        \"language_id\": 419\n    },\n    \"robots.txt\": {\n        \"type\": \"data\",\n        \"aliases\": [\n            \"robots\",\n            \"robots txt\"\n        ],\n        \"filenames\": [\n            \"robots.txt\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"text.robots-txt\",\n        \"language_id\": 674736065\n    },\n    \"sed\": {\n        \"type\": \"programming\",\n        \"color\": \"#64b970\",\n        \"extensions\": [\n            \".sed\"\n        ],\n        \"interpreters\": [\n            \"gsed\",\n            \"minised\",\n            \"sed\",\n            \"ssed\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.sed\",\n        \"language_id\": 847830017\n    },\n    \"templ\": {\n        \"type\": \"markup\",\n        \"color\": \"#66D0DD\",\n        \"extensions\": [\n            \".templ\"\n        ],\n        \"ace_mode\": \"text\",\n        \"tm_scope\": \"source.templ\",\n        \"language_id\": 795579337\n    },\n    \"vCard\": {\n        \"type\": \"data\",\n        \"color\": \"#ee2647\",\n        \"extensions\": [\n            \".vcf\"\n        ],\n        \"tm_scope\": \"source.vcard\",\n        \"aliases\": [\n            \"virtual contact file\",\n            \"electronic business card\"\n        ],\n        \"ace_mode\": \"properties\",\n        \"codemirror_mode\": \"properties\",\n        \"codemirror_mime_type\": \"text/x-properties\",\n        \"language_id\": 851476558\n    },\n    \"wisp\": {\n        \"type\": \"programming\",\n        \"ace_mode\": \"clojure\",\n        \"codemirror_mode\": \"clojure\",\n        \"codemirror_mime_type\": \"text/x-clojure\",\n        \"color\": \"#7582D1\",\n        \"extensions\": [\n            \".wisp\"\n        ],\n        \"tm_scope\": \"source.clojure\",\n        \"language_id\": 420\n    },\n    \"xBase\": {\n        \"type\": \"programming\",\n        \"color\": \"#403a40\",\n        \"aliases\": [\n            \"advpl\",\n            \"clipper\",\n            \"foxpro\"\n        ],\n        \"extensions\": [\n            \".prg\",\n            \".ch\",\n            \".prw\"\n        ],\n        \"tm_scope\": \"source.harbour\",\n        \"ace_mode\": \"text\",\n        \"language_id\": 421\n    }\n}"
            }
        },
        {
            "file": {
                "File": "yml_to_json.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_data/yml_to_json.py",
                "Relative Path": "com_worktwins_data/yml_to_json.py",
                "Size": 531,
                "Last Modified": "2024-11-26 19:34:38",
                "Lines": 19,
                "Source_Code": "import yaml\nimport json\n\n# Define file paths\nyaml_file_path = 'languages.yml'\njson_file_path = 'languages.json'\n\n# Read the YAML file and convert to JSON\ntry:\n    with open(yaml_file_path, 'r') as yaml_file:\n        data = yaml.safe_load(yaml_file)  # Load the YAML file\n\n    # Write the data to a JSON file\n    with open(json_file_path, 'w') as json_file:\n        json.dump(data, json_file, indent=4)\n\n    print(f\"Conversion successful. JSON saved to {json_file_path}\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n"
            }
        },
        {
            "file": {
                "File": "languages.yml",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_data/languages.yml",
                "Relative Path": "com_worktwins_data/languages.yml",
                "Size": 147624,
                "Last Modified": "2024-11-04 13:06:45",
                "Lines": 8634,
                "Source_Code": "# Defines all Languages known to GitHub.\n#\n# fs_name               - Optional field. Only necessary as a replacement for the sample directory name if the\n#                         language name is not a valid filename under the Windows filesystem (e.g., if it\n#                         contains an asterisk).\n# type                  - Either data, programming, markup, prose, or nil\n# aliases               - An Array of additional aliases (implicitly\n#                         includes name.downcase)\n# ace_mode              - A String name of the Ace Mode used for highlighting whenever\n#                         a file is edited. This must match one of the filenames in https://gh.io/acemodes.\n#                         Use \"text\" if a mode does not exist.\n# codemirror_mode       - A String name of the CodeMirror Mode used for highlighting whenever a file is edited.\n#                         This must match a mode from https://git.io/vi9Fx\n# codemirror_mime_type  - A String name of the file mime type used for highlighting whenever a file is edited.\n#                         This should match the `mime` associated with the mode from https://git.io/f4SoQ\n# wrap                  - Boolean wrap to enable line wrapping (default: false)\n# extensions            - An Array of associated extensions (the first one is\n#                         considered the primary extension, the others should be\n#                         listed alphabetically)\n# filenames             - An Array of filenames commonly associated with the language\n# interpreters          - An Array of associated interpreters\n# language_id           - Integer used as a language-name-independent indexed field so that we can rename\n#                         languages in Linguist without reindexing all the code on GitHub. Must not be\n#                         changed for existing languages without the explicit permission of GitHub staff.\n# color                 - CSS hex color to represent the language. Only used if type is \"programming\" or \"markup\".\n# tm_scope              - The TextMate scope that represents this programming\n#                         language. This should match one of the scopes listed in\n#                         the grammars.yml file. Use \"none\" if there is no grammar\n#                         for this language.\n# group                 - Name of the parent language. Languages in a group are counted\n#                         in the statistics as the parent language.\n#\n# Any additions or modifications (even trivial) should have corresponding\n# test changes in `test/test_blob.rb`.\n#\n# Please keep this list alphabetized. Capitalization comes before lowercase.\n---\n1C Enterprise:\n  type: programming\n  color: \"#814CCC\"\n  extensions:\n  - \".bsl\"\n  - \".os\"\n  tm_scope: source.bsl\n  ace_mode: text\n  language_id: 0\n2-Dimensional Array:\n  type: data\n  color: \"#38761D\"\n  extensions:\n  - \".2da\"\n  tm_scope: source.2da\n  ace_mode: text\n  language_id: 387204628\n4D:\n  type: programming\n  color: \"#004289\"\n  extensions:\n  - \".4dm\"\n  tm_scope: source.4dm\n  ace_mode: text\n  language_id: 577529595\nABAP:\n  type: programming\n  color: \"#E8274B\"\n  extensions:\n  - \".abap\"\n  tm_scope: source.abap\n  ace_mode: abap\n  language_id: 1\nABAP CDS:\n  type: programming\n  color: \"#555e25\"\n  extensions:\n  - \".asddls\"\n  tm_scope: source.abapcds\n  language_id: 452681853\n  ace_mode: text\nABNF:\n  type: data\n  ace_mode: text\n  extensions:\n  - \".abnf\"\n  tm_scope: source.abnf\n  language_id: 429\nAGS Script:\n  type: programming\n  color: \"#B9D9FF\"\n  aliases:\n  - ags\n  extensions:\n  - \".asc\"\n  - \".ash\"\n  tm_scope: source.c++\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-c++src\n  language_id: 2\nAIDL:\n  type: programming\n  color: \"#34EB6B\"\n  tm_scope: source.aidl\n  extensions:\n  - \".aidl\"\n  ace_mode: text\n  interpreters:\n  - aidl\n  language_id: 451700185\nAL:\n  type: programming\n  color: \"#3AA2B5\"\n  extensions:\n  - \".al\"\n  tm_scope: source.al\n  ace_mode: text\n  language_id: 658971832\nAMPL:\n  type: programming\n  color: \"#E6EFBB\"\n  extensions:\n  - \".ampl\"\n  - \".mod\"\n  tm_scope: source.ampl\n  ace_mode: text\n  language_id: 3\nANTLR:\n  type: programming\n  color: \"#9DC3FF\"\n  extensions:\n  - \".g4\"\n  tm_scope: source.antlr\n  ace_mode: text\n  language_id: 4\nAPI Blueprint:\n  type: markup\n  color: \"#2ACCA8\"\n  ace_mode: markdown\n  extensions:\n  - \".apib\"\n  tm_scope: text.html.markdown.source.gfm.apib\n  language_id: 5\nAPL:\n  type: programming\n  color: \"#5A8164\"\n  extensions:\n  - \".apl\"\n  - \".dyalog\"\n  interpreters:\n  - apl\n  - aplx\n  - dyalog\n  tm_scope: source.apl\n  ace_mode: text\n  codemirror_mode: apl\n  codemirror_mime_type: text/apl\n  language_id: 6\nASL:\n  type: programming\n  ace_mode: text\n  extensions:\n  - \".asl\"\n  - \".dsl\"\n  tm_scope: source.asl\n  language_id: 124996147\nASN.1:\n  type: data\n  extensions:\n  - \".asn\"\n  - \".asn1\"\n  tm_scope: source.asn\n  ace_mode: text\n  codemirror_mode: asn.1\n  codemirror_mime_type: text/x-ttcn-asn\n  language_id: 7\nASP.NET:\n  type: programming\n  tm_scope: text.html.asp\n  color: \"#9400ff\"\n  aliases:\n  - aspx\n  - aspx-vb\n  extensions:\n  - \".asax\"\n  - \".ascx\"\n  - \".ashx\"\n  - \".asmx\"\n  - \".aspx\"\n  - \".axd\"\n  ace_mode: text\n  codemirror_mode: htmlembedded\n  codemirror_mime_type: application/x-aspx\n  language_id: 564186416\nATS:\n  type: programming\n  color: \"#1ac620\"\n  aliases:\n  - ats2\n  extensions:\n  - \".dats\"\n  - \".hats\"\n  - \".sats\"\n  tm_scope: source.ats\n  ace_mode: ocaml\n  language_id: 9\nActionScript:\n  type: programming\n  tm_scope: source.actionscript.3\n  color: \"#882B0F\"\n  aliases:\n  - actionscript 3\n  - actionscript3\n  - as3\n  extensions:\n  - \".as\"\n  ace_mode: actionscript\n  language_id: 10\nAda:\n  type: programming\n  color: \"#02f88c\"\n  extensions:\n  - \".adb\"\n  - \".ada\"\n  - \".ads\"\n  aliases:\n  - ada95\n  - ada2005\n  tm_scope: source.ada\n  ace_mode: ada\n  language_id: 11\nAdblock Filter List:\n  type: data\n  color: \"#800000\"\n  ace_mode: text\n  extensions:\n  - \".txt\"\n  aliases:\n  - ad block filters\n  - ad block\n  - adb\n  - adblock\n  tm_scope: text.adblock\n  language_id: 884614762\nAdobe Font Metrics:\n  type: data\n  color: \"#fa0f00\"\n  tm_scope: source.afm\n  extensions:\n  - \".afm\"\n  aliases:\n  - acfm\n  - adobe composite font metrics\n  - adobe multiple font metrics\n  - amfm\n  ace_mode: text\n  language_id: 147198098\nAgda:\n  type: programming\n  color: \"#315665\"\n  extensions:\n  - \".agda\"\n  tm_scope: source.agda\n  ace_mode: text\n  language_id: 12\nAlloy:\n  type: programming\n  color: \"#64C800\"\n  extensions:\n  - \".als\"\n  tm_scope: source.alloy\n  ace_mode: text\n  language_id: 13\nAlpine Abuild:\n  type: programming\n  color: \"#0D597F\"\n  group: Shell\n  aliases:\n  - abuild\n  - apkbuild\n  filenames:\n  - APKBUILD\n  tm_scope: source.shell\n  ace_mode: sh\n  codemirror_mode: shell\n  codemirror_mime_type: text/x-sh\n  language_id: 14\nAltium Designer:\n  type: data\n  color: \"#A89663\"\n  aliases:\n  - altium\n  extensions:\n  - \".OutJob\"\n  - \".PcbDoc\"\n  - \".PrjPCB\"\n  - \".SchDoc\"\n  tm_scope: source.ini\n  ace_mode: ini\n  language_id: 187772328\nAngelScript:\n  type: programming\n  color: \"#C7D7DC\"\n  extensions:\n  - \".as\"\n  - \".angelscript\"\n  tm_scope: source.angelscript\n  ace_mode: text\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-c++src\n  language_id: 389477596\nAnt Build System:\n  type: data\n  color: \"#A9157E\"\n  tm_scope: text.xml.ant\n  filenames:\n  - ant.xml\n  - build.xml\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: application/xml\n  language_id: 15\nAntlers:\n  type: markup\n  color: \"#ff269e\"\n  extensions:\n  - \".antlers.html\"\n  - \".antlers.php\"\n  - \".antlers.xml\"\n  tm_scope: text.html.statamic\n  ace_mode: text\n  language_id: 1067292663\nApacheConf:\n  type: data\n  color: \"#d12127\"\n  aliases:\n  - aconf\n  - apache\n  extensions:\n  - \".apacheconf\"\n  - \".vhost\"\n  filenames:\n  - \".htaccess\"\n  - apache2.conf\n  - httpd.conf\n  tm_scope: source.apache-config\n  ace_mode: apache_conf\n  language_id: 16\nApex:\n  type: programming\n  color: \"#1797c0\"\n  extensions:\n  - \".cls\"\n  - \".trigger\"\n  tm_scope: source.apex\n  ace_mode: java\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-java\n  language_id: 17\nApollo Guidance Computer:\n  type: programming\n  color: \"#0B3D91\"\n  group: Assembly\n  extensions:\n  - \".agc\"\n  tm_scope: source.agc\n  ace_mode: assembly_x86\n  language_id: 18\nAppleScript:\n  type: programming\n  aliases:\n  - osascript\n  extensions:\n  - \".applescript\"\n  - \".scpt\"\n  interpreters:\n  - osascript\n  tm_scope: source.applescript\n  ace_mode: applescript\n  color: \"#101F1F\"\n  language_id: 19\nArc:\n  type: programming\n  color: \"#aa2afe\"\n  extensions:\n  - \".arc\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 20\nAsciiDoc:\n  type: prose\n  color: \"#73a0c5\"\n  ace_mode: asciidoc\n  wrap: true\n  extensions:\n  - \".asciidoc\"\n  - \".adoc\"\n  - \".asc\"\n  tm_scope: text.html.asciidoc\n  language_id: 22\nAspectJ:\n  type: programming\n  color: \"#a957b0\"\n  extensions:\n  - \".aj\"\n  tm_scope: source.aspectj\n  ace_mode: text\n  language_id: 23\nAssembly:\n  type: programming\n  color: \"#6E4C13\"\n  aliases:\n  - asm\n  - nasm\n  extensions:\n  - \".asm\"\n  - \".a51\"\n  - \".i\"\n  - \".inc\"\n  - \".nas\"\n  - \".nasm\"\n  tm_scope: source.assembly\n  ace_mode: assembly_x86\n  language_id: 24\nAstro:\n  type: markup\n  color: \"#ff5a03\"\n  extensions:\n  - \".astro\"\n  tm_scope: source.astro\n  ace_mode: html\n  codemirror_mode: jsx\n  codemirror_mime_type: text/jsx\n  language_id: 578209015\nAsymptote:\n  type: programming\n  color: \"#ff0000\"\n  extensions:\n  - \".asy\"\n  interpreters:\n  - asy\n  tm_scope: source.c++\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-kotlin\n  language_id: 591605007\nAugeas:\n  type: programming\n  color: \"#9CC134\"\n  extensions:\n  - \".aug\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 25\nAutoHotkey:\n  type: programming\n  color: \"#6594b9\"\n  aliases:\n  - ahk\n  extensions:\n  - \".ahk\"\n  - \".ahkl\"\n  tm_scope: source.ahk\n  ace_mode: autohotkey\n  language_id: 26\nAutoIt:\n  type: programming\n  color: \"#1C3552\"\n  aliases:\n  - au3\n  - AutoIt3\n  - AutoItScript\n  extensions:\n  - \".au3\"\n  tm_scope: source.autoit\n  ace_mode: autohotkey\n  language_id: 27\nAvro IDL:\n  type: data\n  color: \"#0040FF\"\n  extensions:\n  - \".avdl\"\n  tm_scope: source.avro\n  ace_mode: text\n  language_id: 785497837\nAwk:\n  type: programming\n  color: \"#c30e9b\"\n  extensions:\n  - \".awk\"\n  - \".auk\"\n  - \".gawk\"\n  - \".mawk\"\n  - \".nawk\"\n  interpreters:\n  - awk\n  - gawk\n  - mawk\n  - nawk\n  tm_scope: source.awk\n  ace_mode: text\n  language_id: 28\nB4X:\n  type: programming\n  color: \"#00e4ff\"\n  extensions:\n  - \".bas\"\n  tm_scope: source.vba\n  aliases:\n  - basic for android\n  ace_mode: text\n  codemirror_mode: vb\n  codemirror_mime_type: text/x-vb\n  language_id: 96642275\nBASIC:\n  type: programming\n  extensions:\n  - \".bas\"\n  tm_scope: source.basic\n  ace_mode: text\n  color: \"#ff0000\"\n  language_id: 28923963\nBQN:\n  type: programming\n  color: \"#2b7067\"\n  extensions:\n  - \".bqn\"\n  tm_scope: source.bqn\n  ace_mode: text\n  language_id: 330386870\nBallerina:\n  type: programming\n  extensions:\n  - \".bal\"\n  tm_scope: source.ballerina\n  ace_mode: text\n  color: \"#FF5000\"\n  language_id: 720859680\nBatchfile:\n  type: programming\n  aliases:\n  - bat\n  - batch\n  - dosbatch\n  - winbatch\n  extensions:\n  - \".bat\"\n  - \".cmd\"\n  tm_scope: source.batchfile\n  ace_mode: batchfile\n  color: \"#C1F12E\"\n  language_id: 29\nBeef:\n  type: programming\n  color: \"#a52f4e\"\n  extensions:\n  - \".bf\"\n  tm_scope: source.cs\n  ace_mode: csharp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csharp\n  language_id: 545626333\nBefunge:\n  type: programming\n  extensions:\n  - \".befunge\"\n  - \".bf\"\n  tm_scope: source.befunge\n  ace_mode: text\n  language_id: 30\nBerry:\n  type: programming\n  extensions:\n  - \".be\"\n  tm_scope: source.berry\n  ace_mode: text\n  color: \"#15A13C\"\n  aliases:\n  - be\n  language_id: 121855308\nBibTeX:\n  type: markup\n  color: \"#778899\"\n  group: TeX\n  extensions:\n  - \".bib\"\n  - \".bibtex\"\n  tm_scope: text.bibtex\n  ace_mode: tex\n  codemirror_mode: stex\n  codemirror_mime_type: text/x-stex\n  language_id: 982188347\nBicep:\n  type: programming\n  color: \"#519aba\"\n  extensions:\n  - \".bicep\"\n  - \".bicepparam\"\n  tm_scope: source.bicep\n  ace_mode: text\n  language_id: 321200902\nBikeshed:\n  type: markup\n  color: \"#5562ac\"\n  extensions:\n  - \".bs\"\n  tm_scope: source.csswg\n  ace_mode: html\n  codemirror_mode: htmlmixed\n  codemirror_mime_type: text/html\n  language_id: 1055528081\nBison:\n  type: programming\n  color: \"#6A463F\"\n  group: Yacc\n  tm_scope: source.yacc\n  extensions:\n  - \".bison\"\n  ace_mode: text\n  language_id: 31\nBitBake:\n  type: programming\n  color: \"#00bce4\"\n  tm_scope: source.bb\n  extensions:\n  - \".bb\"\n  - \".bbappend\"\n  - \".bbclass\"\n  - \".inc\"\n  ace_mode: text\n  language_id: 32\nBlade:\n  type: markup\n  color: \"#f7523f\"\n  extensions:\n  - \".blade\"\n  - \".blade.php\"\n  tm_scope: text.html.php.blade\n  ace_mode: text\n  language_id: 33\nBlitzBasic:\n  type: programming\n  color: \"#00FFAE\"\n  aliases:\n  - b3d\n  - blitz3d\n  - blitzplus\n  - bplus\n  extensions:\n  - \".bb\"\n  - \".decls\"\n  tm_scope: source.blitzmax\n  ace_mode: text\n  language_id: 34\nBlitzMax:\n  type: programming\n  color: \"#cd6400\"\n  extensions:\n  - \".bmx\"\n  aliases:\n  - bmax\n  tm_scope: source.blitzmax\n  ace_mode: text\n  language_id: 35\nBluespec:\n  type: programming\n  color: \"#12223c\"\n  extensions:\n  - \".bsv\"\n  aliases:\n  - bluespec bsv\n  - bsv\n  tm_scope: source.bsv\n  ace_mode: verilog\n  codemirror_mode: verilog\n  codemirror_mime_type: text/x-systemverilog\n  language_id: 36\nBluespec BH:\n  type: programming\n  group: Bluespec\n  color: \"#12223c\"\n  extensions:\n  - \".bs\"\n  aliases:\n  - bh\n  - bluespec classic\n  tm_scope: source.bh\n  ace_mode: haskell\n  codemirror_mode: haskell\n  codemirror_mime_type: text/x-haskell\n  language_id: 641580358\nBoo:\n  type: programming\n  color: \"#d4bec1\"\n  extensions:\n  - \".boo\"\n  ace_mode: text\n  tm_scope: source.boo\n  language_id: 37\nBoogie:\n  type: programming\n  color: \"#c80fa0\"\n  extensions:\n  - \".bpl\"\n  interpreters:\n  - boogie\n  tm_scope: source.boogie\n  ace_mode: text\n  language_id: 955017407\nBrainfuck:\n  type: programming\n  color: \"#2F2530\"\n  extensions:\n  - \".b\"\n  - \".bf\"\n  tm_scope: source.bf\n  ace_mode: text\n  codemirror_mode: brainfuck\n  codemirror_mime_type: text/x-brainfuck\n  language_id: 38\nBrighterScript:\n  type: programming\n  color: \"#66AABB\"\n  extensions:\n  - \".bs\"\n  tm_scope: source.brs\n  ace_mode: text\n  language_id: 943571030\nBrightscript:\n  type: programming\n  color: \"#662D91\"\n  extensions:\n  - \".brs\"\n  tm_scope: source.brs\n  ace_mode: text\n  language_id: 39\nBrowserslist:\n  type: data\n  color: \"#ffd539\"\n  filenames:\n  - \".browserslistrc\"\n  - browserslist\n  tm_scope: text.browserslist\n  ace_mode: text\n  language_id: 153503348\nC:\n  type: programming\n  color: \"#555555\"\n  extensions:\n  - \".c\"\n  - \".cats\"\n  - \".h\"\n  - \".idc\"\n  interpreters:\n  - tcc\n  tm_scope: source.c\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  language_id: 41\nC#:\n  type: programming\n  ace_mode: csharp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csharp\n  tm_scope: source.cs\n  color: \"#178600\"\n  aliases:\n  - csharp\n  - cake\n  - cakescript\n  extensions:\n  - \".cs\"\n  - \".cake\"\n  - \".cs.pp\"\n  - \".csx\"\n  - \".linq\"\n  language_id: 42\nC++:\n  type: programming\n  tm_scope: source.c++\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-c++src\n  color: \"#f34b7d\"\n  aliases:\n  - cpp\n  extensions:\n  - \".cpp\"\n  - \".c++\"\n  - \".cc\"\n  - \".cp\"\n  - \".cppm\"\n  - \".cxx\"\n  - \".h\"\n  - \".h++\"\n  - \".hh\"\n  - \".hpp\"\n  - \".hxx\"\n  - \".inc\"\n  - \".inl\"\n  - \".ino\"\n  - \".ipp\"\n  - \".ixx\"\n  - \".re\"\n  - \".tcc\"\n  - \".tpp\"\n  - \".txx\"\n  language_id: 43\nC-ObjDump:\n  type: data\n  extensions:\n  - \".c-objdump\"\n  tm_scope: objdump.x86asm\n  ace_mode: assembly_x86\n  language_id: 44\nC2hs Haskell:\n  type: programming\n  group: Haskell\n  aliases:\n  - c2hs\n  extensions:\n  - \".chs\"\n  tm_scope: source.haskell\n  ace_mode: haskell\n  codemirror_mode: haskell\n  codemirror_mime_type: text/x-haskell\n  language_id: 45\nCAP CDS:\n  type: programming\n  tm_scope: source.cds\n  color: \"#0092d1\"\n  aliases:\n  - cds\n  extensions:\n  - \".cds\"\n  ace_mode: text\n  language_id: 390788699\nCIL:\n  type: data\n  tm_scope: source.cil\n  extensions:\n  - \".cil\"\n  ace_mode: text\n  language_id: 29176339\nCLIPS:\n  type: programming\n  color: \"#00A300\"\n  extensions:\n  - \".clp\"\n  tm_scope: source.clips\n  ace_mode: text\n  language_id: 46\nCMake:\n  type: programming\n  color: \"#DA3434\"\n  extensions:\n  - \".cmake\"\n  - \".cmake.in\"\n  filenames:\n  - CMakeLists.txt\n  tm_scope: source.cmake\n  ace_mode: text\n  codemirror_mode: cmake\n  codemirror_mime_type: text/x-cmake\n  language_id: 47\nCOBOL:\n  type: programming\n  extensions:\n  - \".cob\"\n  - \".cbl\"\n  - \".ccp\"\n  - \".cobol\"\n  - \".cpy\"\n  tm_scope: source.cobol\n  ace_mode: cobol\n  codemirror_mode: cobol\n  codemirror_mime_type: text/x-cobol\n  language_id: 48\nCODEOWNERS:\n  type: data\n  filenames:\n  - CODEOWNERS\n  tm_scope: text.codeowners\n  ace_mode: gitignore\n  language_id: 321684729\nCOLLADA:\n  type: data\n  color: \"#F1A42B\"\n  extensions:\n  - \".dae\"\n  tm_scope: text.xml\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  language_id: 49\nCSON:\n  type: data\n  color: \"#244776\"\n  tm_scope: source.coffee\n  ace_mode: coffee\n  codemirror_mode: coffeescript\n  codemirror_mime_type: text/x-coffeescript\n  extensions:\n  - \".cson\"\n  language_id: 424\nCSS:\n  type: markup\n  tm_scope: source.css\n  ace_mode: css\n  codemirror_mode: css\n  codemirror_mime_type: text/css\n  color: \"#563d7c\"\n  extensions:\n  - \".css\"\n  language_id: 50\nCSV:\n  type: data\n  color: \"#237346\"\n  ace_mode: text\n  tm_scope: none\n  extensions:\n  - \".csv\"\n  language_id: 51\nCUE:\n  type: programming\n  extensions:\n  - \".cue\"\n  tm_scope: source.cue\n  ace_mode: text\n  color: \"#5886E1\"\n  language_id: 356063509\nCWeb:\n  type: programming\n  color: \"#00007a\"\n  extensions:\n  - \".w\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 657332628\nCabal Config:\n  type: data\n  color: \"#483465\"\n  aliases:\n  - Cabal\n  extensions:\n  - \".cabal\"\n  filenames:\n  - cabal.config\n  - cabal.project\n  ace_mode: haskell\n  codemirror_mode: haskell\n  codemirror_mime_type: text/x-haskell\n  tm_scope: source.cabal\n  language_id: 677095381\nCaddyfile:\n  type: data\n  color: \"#22b638\"\n  aliases:\n  - Caddy\n  extensions:\n  - \".caddyfile\"\n  filenames:\n  - Caddyfile\n  ace_mode: text\n  tm_scope: source.Caddyfile\n  language_id: 615465151\nCadence:\n  type: programming\n  color: \"#00ef8b\"\n  ace_mode: text\n  tm_scope: source.cadence\n  extensions:\n  - \".cdc\"\n  language_id: 270184138\nCairo:\n  type: programming\n  color: \"#ff4a48\"\n  ace_mode: text\n  tm_scope: source.cairo\n  extensions:\n  - \".cairo\"\n  group: Cairo\n  language_id: 620599567\nCairo Zero:\n  type: programming\n  color: \"#ff4a48\"\n  ace_mode: text\n  tm_scope: source.cairo0\n  extensions:\n  - \".cairo\"\n  group: Cairo\n  language_id: 891399890\nCameLIGO:\n  type: programming\n  color: \"#3be133\"\n  extensions:\n  - \".mligo\"\n  tm_scope: source.mligo\n  ace_mode: ocaml\n  codemirror_mode: mllike\n  codemirror_mime_type: text/x-ocaml\n  group: LigoLANG\n  language_id: 829207807\nCap'n Proto:\n  type: programming\n  color: \"#c42727\"\n  tm_scope: source.capnp\n  extensions:\n  - \".capnp\"\n  ace_mode: text\n  language_id: 52\nCarbon:\n  type: programming\n  color: \"#222222\"\n  extensions:\n  - \".carbon\"\n  ace_mode: golang\n  codemirror_mode: go\n  codemirror_mime_type: text/x-go\n  tm_scope: source.v\n  language_id: 55627273\nCartoCSS:\n  type: programming\n  aliases:\n  - Carto\n  extensions:\n  - \".mss\"\n  ace_mode: text\n  tm_scope: source.css.mss\n  language_id: 53\nCeylon:\n  type: programming\n  color: \"#dfa535\"\n  extensions:\n  - \".ceylon\"\n  tm_scope: source.ceylon\n  ace_mode: text\n  language_id: 54\nChapel:\n  type: programming\n  color: \"#8dc63f\"\n  aliases:\n  - chpl\n  extensions:\n  - \".chpl\"\n  tm_scope: source.chapel\n  ace_mode: text\n  language_id: 55\nCharity:\n  type: programming\n  extensions:\n  - \".ch\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 56\nChecksums:\n  type: data\n  tm_scope: text.checksums\n  aliases:\n  - checksum\n  - hash\n  - hashes\n  - sum\n  - sums\n  filenames:\n  - MD5SUMS\n  - SHA1SUMS\n  - SHA256SUMS\n  - SHA256SUMS.txt\n  - SHA512SUMS\n  - checksums.txt\n  - cksums\n  - md5sum.txt\n  extensions:\n  - \".crc32\"\n  - \".md2\"\n  - \".md4\"\n  - \".md5\"\n  - \".sha1\"\n  - \".sha2\"\n  - \".sha224\"\n  - \".sha256\"\n  - \".sha256sum\"\n  - \".sha3\"\n  - \".sha384\"\n  - \".sha512\"\n  ace_mode: text\n  language_id: 372063053\nChucK:\n  type: programming\n  color: \"#3f8000\"\n  extensions:\n  - \".ck\"\n  tm_scope: source.java\n  ace_mode: java\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-java\n  language_id: 57\nCircom:\n  type: programming\n  ace_mode: text\n  extensions:\n  - \".circom\"\n  color: \"#707575\"\n  tm_scope: source.circom\n  language_id: 1042332086\nCirru:\n  type: programming\n  color: \"#ccccff\"\n  tm_scope: source.cirru\n  ace_mode: cirru\n  extensions:\n  - \".cirru\"\n  language_id: 58\nClarion:\n  type: programming\n  color: \"#db901e\"\n  ace_mode: text\n  extensions:\n  - \".clw\"\n  tm_scope: source.clarion\n  language_id: 59\nClarity:\n  type: programming\n  color: \"#5546ff\"\n  ace_mode: lisp\n  extensions:\n  - \".clar\"\n  tm_scope: source.clar\n  language_id: 91493841\nClassic ASP:\n  type: programming\n  color: \"#6a40fd\"\n  tm_scope: text.html.asp\n  aliases:\n  - asp\n  extensions:\n  - \".asp\"\n  ace_mode: text\n  language_id: 8\nClean:\n  type: programming\n  color: \"#3F85AF\"\n  extensions:\n  - \".icl\"\n  - \".dcl\"\n  tm_scope: source.clean\n  ace_mode: text\n  language_id: 60\nClick:\n  type: programming\n  color: \"#E4E6F3\"\n  extensions:\n  - \".click\"\n  tm_scope: source.click\n  ace_mode: text\n  language_id: 61\nClojure:\n  type: programming\n  tm_scope: source.clojure\n  ace_mode: clojure\n  codemirror_mode: clojure\n  codemirror_mime_type: text/x-clojure\n  color: \"#db5855\"\n  extensions:\n  - \".clj\"\n  - \".bb\"\n  - \".boot\"\n  - \".cl2\"\n  - \".cljc\"\n  - \".cljs\"\n  - \".cljs.hl\"\n  - \".cljscm\"\n  - \".cljx\"\n  - \".hic\"\n  filenames:\n  - riemann.config\n  interpreters:\n  - bb\n  language_id: 62\nClosure Templates:\n  type: markup\n  color: \"#0d948f\"\n  ace_mode: soy_template\n  codemirror_mode: soy\n  codemirror_mime_type: text/x-soy\n  aliases:\n  - soy\n  extensions:\n  - \".soy\"\n  tm_scope: text.html.soy\n  language_id: 357046146\nCloud Firestore Security Rules:\n  type: data\n  color: \"#FFA000\"\n  ace_mode: less\n  codemirror_mode: css\n  codemirror_mime_type: text/css\n  tm_scope: source.firestore\n  filenames:\n  - firestore.rules\n  language_id: 407996372\nCoNLL-U:\n  type: data\n  extensions:\n  - \".conllu\"\n  - \".conll\"\n  tm_scope: text.conllu\n  ace_mode: text\n  aliases:\n  - CoNLL\n  - CoNLL-X\n  language_id: 421026389\nCodeQL:\n  type: programming\n  color: \"#140f46\"\n  extensions:\n  - \".ql\"\n  - \".qll\"\n  tm_scope: source.ql\n  ace_mode: text\n  language_id: 424259634\n  aliases:\n  - ql\nCoffeeScript:\n  type: programming\n  tm_scope: source.coffee\n  ace_mode: coffee\n  codemirror_mode: coffeescript\n  codemirror_mime_type: text/x-coffeescript\n  color: \"#244776\"\n  aliases:\n  - coffee\n  - coffee-script\n  extensions:\n  - \".coffee\"\n  - \"._coffee\"\n  - \".cake\"\n  - \".cjsx\"\n  - \".iced\"\n  filenames:\n  - Cakefile\n  interpreters:\n  - coffee\n  language_id: 63\nColdFusion:\n  type: programming\n  ace_mode: coldfusion\n  color: \"#ed2cd6\"\n  aliases:\n  - cfm\n  - cfml\n  - coldfusion html\n  extensions:\n  - \".cfm\"\n  - \".cfml\"\n  tm_scope: text.html.cfm\n  language_id: 64\nColdFusion CFC:\n  type: programming\n  color: \"#ed2cd6\"\n  group: ColdFusion\n  ace_mode: coldfusion\n  aliases:\n  - cfc\n  extensions:\n  - \".cfc\"\n  tm_scope: source.cfscript\n  language_id: 65\nCommon Lisp:\n  type: programming\n  tm_scope: source.commonlisp\n  color: \"#3fb68b\"\n  aliases:\n  - lisp\n  extensions:\n  - \".lisp\"\n  - \".asd\"\n  - \".cl\"\n  - \".l\"\n  - \".lsp\"\n  - \".ny\"\n  - \".podsl\"\n  - \".sexp\"\n  interpreters:\n  - lisp\n  - sbcl\n  - ccl\n  - clisp\n  - ecl\n  ace_mode: lisp\n  codemirror_mode: commonlisp\n  codemirror_mime_type: text/x-common-lisp\n  language_id: 66\nCommon Workflow Language:\n  aliases:\n  - cwl\n  type: programming\n  ace_mode: yaml\n  codemirror_mode: yaml\n  codemirror_mime_type: text/x-yaml\n  extensions:\n  - \".cwl\"\n  interpreters:\n  - cwl-runner\n  color: \"#B5314C\"\n  tm_scope: source.cwl\n  language_id: 988547172\nComponent Pascal:\n  type: programming\n  color: \"#B0CE4E\"\n  extensions:\n  - \".cp\"\n  - \".cps\"\n  tm_scope: source.pascal\n  ace_mode: pascal\n  codemirror_mode: pascal\n  codemirror_mime_type: text/x-pascal\n  language_id: 67\nCool:\n  type: programming\n  extensions:\n  - \".cl\"\n  tm_scope: source.cool\n  ace_mode: text\n  language_id: 68\nCoq:\n  type: programming\n  color: \"#d0b68c\"\n  extensions:\n  - \".coq\"\n  - \".v\"\n  tm_scope: source.coq\n  ace_mode: text\n  language_id: 69\nCpp-ObjDump:\n  type: data\n  extensions:\n  - \".cppobjdump\"\n  - \".c++-objdump\"\n  - \".c++objdump\"\n  - \".cpp-objdump\"\n  - \".cxx-objdump\"\n  tm_scope: objdump.x86asm\n  aliases:\n  - c++-objdump\n  ace_mode: assembly_x86\n  language_id: 70\nCreole:\n  type: prose\n  wrap: true\n  extensions:\n  - \".creole\"\n  tm_scope: text.html.creole\n  ace_mode: text\n  language_id: 71\nCrystal:\n  type: programming\n  color: \"#000100\"\n  extensions:\n  - \".cr\"\n  ace_mode: ruby\n  codemirror_mode: crystal\n  codemirror_mime_type: text/x-crystal\n  tm_scope: source.crystal\n  interpreters:\n  - crystal\n  language_id: 72\nCsound:\n  type: programming\n  color: \"#1a1a1a\"\n  aliases:\n  - csound-orc\n  extensions:\n  - \".orc\"\n  - \".udo\"\n  tm_scope: source.csound\n  ace_mode: csound_orchestra\n  language_id: 73\nCsound Document:\n  type: programming\n  color: \"#1a1a1a\"\n  aliases:\n  - csound-csd\n  extensions:\n  - \".csd\"\n  tm_scope: source.csound-document\n  ace_mode: csound_document\n  language_id: 74\nCsound Score:\n  type: programming\n  color: \"#1a1a1a\"\n  aliases:\n  - csound-sco\n  extensions:\n  - \".sco\"\n  tm_scope: source.csound-score\n  ace_mode: csound_score\n  language_id: 75\nCuda:\n  type: programming\n  extensions:\n  - \".cu\"\n  - \".cuh\"\n  tm_scope: source.cuda-c++\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-c++src\n  color: \"#3A4E3A\"\n  language_id: 77\nCue Sheet:\n  type: data\n  extensions:\n  - \".cue\"\n  tm_scope: source.cuesheet\n  ace_mode: text\n  language_id: 942714150\nCurry:\n  type: programming\n  color: \"#531242\"\n  extensions:\n  - \".curry\"\n  tm_scope: source.curry\n  ace_mode: haskell\n  language_id: 439829048\nCycript:\n  type: programming\n  extensions:\n  - \".cy\"\n  tm_scope: source.js\n  ace_mode: javascript\n  codemirror_mode: javascript\n  codemirror_mime_type: text/javascript\n  language_id: 78\nCylc:\n  type: data\n  color: \"#00b3fd\"\n  extensions:\n  - \".cylc\"\n  filenames:\n  - suite.rc\n  tm_scope: source.cylc\n  ace_mode: ini\n  group: INI\n  language_id: 476447814\nCypher:\n  type: programming\n  color: \"#34c0eb\"\n  extensions:\n  - \".cyp\"\n  - \".cypher\"\n  tm_scope: source.cypher\n  ace_mode: text\n  language_id: 850806976\nCython:\n  type: programming\n  color: \"#fedf5b\"\n  extensions:\n  - \".pyx\"\n  - \".pxd\"\n  - \".pxi\"\n  aliases:\n  - pyrex\n  tm_scope: source.cython\n  ace_mode: text\n  codemirror_mode: python\n  codemirror_mime_type: text/x-cython\n  language_id: 79\nD:\n  type: programming\n  color: \"#ba595e\"\n  aliases:\n  - Dlang\n  extensions:\n  - \".d\"\n  - \".di\"\n  tm_scope: source.d\n  ace_mode: d\n  codemirror_mode: d\n  codemirror_mime_type: text/x-d\n  language_id: 80\nD-ObjDump:\n  type: data\n  extensions:\n  - \".d-objdump\"\n  tm_scope: objdump.x86asm\n  ace_mode: assembly_x86\n  language_id: 81\nD2:\n  type: markup\n  color: \"#526ee8\"\n  extensions:\n  - \".d2\"\n  aliases:\n  - d2lang\n  tm_scope: source.d2\n  ace_mode: text\n  language_id: 37531557\nDIGITAL Command Language:\n  type: programming\n  aliases:\n  - dcl\n  extensions:\n  - \".com\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 82\nDM:\n  type: programming\n  color: \"#447265\"\n  extensions:\n  - \".dm\"\n  aliases:\n  - byond\n  tm_scope: source.dm\n  ace_mode: c_cpp\n  language_id: 83\nDNS Zone:\n  type: data\n  extensions:\n  - \".zone\"\n  - \".arpa\"\n  tm_scope: text.zone_file\n  ace_mode: text\n  language_id: 84\nDTrace:\n  type: programming\n  aliases:\n  - dtrace-script\n  extensions:\n  - \".d\"\n  interpreters:\n  - dtrace\n  tm_scope: source.c\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  language_id: 85\nDafny:\n  type: programming\n  color: \"#FFEC25\"\n  extensions:\n  - \".dfy\"\n  interpreters:\n  - dafny\n  tm_scope: text.dfy.dafny\n  ace_mode: text\n  language_id: 969323346\nDarcs Patch:\n  type: data\n  color: \"#8eff23\"\n  aliases:\n  - dpatch\n  extensions:\n  - \".darcspatch\"\n  - \".dpatch\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 86\nDart:\n  type: programming\n  color: \"#00B4AB\"\n  extensions:\n  - \".dart\"\n  interpreters:\n  - dart\n  tm_scope: source.dart\n  ace_mode: dart\n  codemirror_mode: dart\n  codemirror_mime_type: application/dart\n  language_id: 87\nDataWeave:\n  type: programming\n  color: \"#003a52\"\n  extensions:\n  - \".dwl\"\n  ace_mode: text\n  tm_scope: source.data-weave\n  language_id: 974514097\nDebian Package Control File:\n  type: data\n  color: \"#D70751\"\n  extensions:\n  - \".dsc\"\n  tm_scope: source.deb-control\n  ace_mode: text\n  language_id: 527438264\nDenizenScript:\n  type: programming\n  color: \"#FBEE96\"\n  ace_mode: yaml\n  codemirror_mode: yaml\n  codemirror_mime_type: text/x-yaml\n  extensions:\n  - \".dsc\"\n  tm_scope: source.denizenscript\n  language_id: 435000929\nDhall:\n  type: programming\n  color: \"#dfafff\"\n  extensions:\n  - \".dhall\"\n  tm_scope: source.haskell\n  ace_mode: haskell\n  codemirror_mode: haskell\n  codemirror_mime_type: text/x-haskell\n  language_id: 793969321\nDiff:\n  type: data\n  extensions:\n  - \".diff\"\n  - \".patch\"\n  aliases:\n  - udiff\n  tm_scope: source.diff\n  ace_mode: diff\n  codemirror_mode: diff\n  codemirror_mime_type: text/x-diff\n  language_id: 88\nDirectX 3D File:\n  type: data\n  color: \"#aace60\"\n  extensions:\n  - \".x\"\n  ace_mode: text\n  tm_scope: none\n  language_id: 201049282\nDockerfile:\n  type: programming\n  aliases:\n  - Containerfile\n  color: \"#384d54\"\n  tm_scope: source.dockerfile\n  extensions:\n  - \".dockerfile\"\n  filenames:\n  - Containerfile\n  - Dockerfile\n  ace_mode: dockerfile\n  codemirror_mode: dockerfile\n  codemirror_mime_type: text/x-dockerfile\n  language_id: 89\nDogescript:\n  type: programming\n  color: \"#cca760\"\n  extensions:\n  - \".djs\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 90\nDotenv:\n  type: data\n  color: \"#e5d559\"\n  extensions:\n  - \".env\"\n  filenames:\n  - \".env\"\n  - \".env.ci\"\n  - \".env.dev\"\n  - \".env.development\"\n  - \".env.development.local\"\n  - \".env.example\"\n  - \".env.local\"\n  - \".env.prod\"\n  - \".env.production\"\n  - \".env.sample\"\n  - \".env.staging\"\n  - \".env.test\"\n  - \".env.testing\"\n  tm_scope: source.dotenv\n  ace_mode: text\n  language_id: 111148035\nDune:\n  type: programming\n  ace_mode: lisp\n  filenames:\n  - dune-project\n  tm_scope: source.dune\n  color: \"#89421e\"\n  language_id: 754574151\nDylan:\n  type: programming\n  color: \"#6c616e\"\n  extensions:\n  - \".dylan\"\n  - \".dyl\"\n  - \".intr\"\n  - \".lid\"\n  tm_scope: source.dylan\n  ace_mode: text\n  codemirror_mode: dylan\n  codemirror_mime_type: text/x-dylan\n  language_id: 91\nE:\n  type: programming\n  color: \"#ccce35\"\n  extensions:\n  - \".e\"\n  interpreters:\n  - rune\n  tm_scope: none\n  ace_mode: text\n  language_id: 92\nE-mail:\n  type: data\n  aliases:\n  - email\n  - eml\n  - mail\n  - mbox\n  extensions:\n  - \".eml\"\n  - \".mbox\"\n  tm_scope: text.eml.basic\n  ace_mode: text\n  codemirror_mode: mbox\n  codemirror_mime_type: application/mbox\n  language_id: 529653389\nEBNF:\n  type: data\n  extensions:\n  - \".ebnf\"\n  tm_scope: source.ebnf\n  ace_mode: text\n  codemirror_mode: ebnf\n  codemirror_mime_type: text/x-ebnf\n  language_id: 430\nECL:\n  type: programming\n  color: \"#8a1267\"\n  extensions:\n  - \".ecl\"\n  - \".eclxml\"\n  tm_scope: source.ecl\n  ace_mode: text\n  codemirror_mode: ecl\n  codemirror_mime_type: text/x-ecl\n  language_id: 93\nECLiPSe:\n  type: programming\n  color: \"#001d9d\"\n  group: Prolog\n  extensions:\n  - \".ecl\"\n  tm_scope: source.prolog.eclipse\n  ace_mode: prolog\n  language_id: 94\nEJS:\n  type: markup\n  color: \"#a91e50\"\n  extensions:\n  - \".ejs\"\n  - \".ect\"\n  - \".ejs.t\"\n  - \".jst\"\n  tm_scope: text.html.js\n  ace_mode: ejs\n  language_id: 95\nEQ:\n  type: programming\n  color: \"#a78649\"\n  extensions:\n  - \".eq\"\n  tm_scope: source.cs\n  ace_mode: csharp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csharp\n  language_id: 96\nEagle:\n  type: data\n  extensions:\n  - \".sch\"\n  - \".brd\"\n  tm_scope: text.xml\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  language_id: 97\nEarthly:\n  type: programming\n  aliases:\n  - Earthfile\n  color: \"#2af0ff\"\n  tm_scope: source.earthfile\n  ace_mode: text\n  filenames:\n  - Earthfile\n  language_id: 963512632\nEasybuild:\n  type: data\n  color: \"#069406\"\n  group: Python\n  ace_mode: python\n  codemirror_mode: python\n  codemirror_mime_type: text/x-python\n  tm_scope: source.python\n  extensions:\n  - \".eb\"\n  language_id: 342840477\nEcere Projects:\n  type: data\n  color: \"#913960\"\n  group: JavaScript\n  extensions:\n  - \".epj\"\n  tm_scope: source.json\n  ace_mode: json\n  codemirror_mode: javascript\n  codemirror_mime_type: application/json\n  language_id: 98\nEcmarkup:\n  type: markup\n  color: \"#eb8131\"\n  group: HTML\n  extensions:\n  - \".html\"\n  tm_scope: text.html.ecmarkup\n  ace_mode: html\n  codemirror_mode: htmlmixed\n  codemirror_mime_type: text/html\n  aliases:\n  - ecmarkdown\n  language_id: 844766630\nEdge:\n  type: markup\n  color: \"#0dffe0\"\n  extensions:\n  - \".edge\"\n  tm_scope: text.html.edge\n  ace_mode: html\n  language_id: 460509620\nEdgeQL:\n  type: programming\n  color: \"#31A7FF\"\n  aliases:\n  - esdl\n  extensions:\n  - \".edgeql\"\n  - \".esdl\"\n  ace_mode: text\n  tm_scope: source.edgeql\n  language_id: 925235833\nEditorConfig:\n  type: data\n  color: \"#fff1f2\"\n  group: INI\n  extensions:\n  - \".editorconfig\"\n  filenames:\n  - \".editorconfig\"\n  aliases:\n  - editor-config\n  ace_mode: ini\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  tm_scope: source.editorconfig\n  language_id: 96139566\nEdje Data Collection:\n  type: data\n  extensions:\n  - \".edc\"\n  tm_scope: source.c++\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-c++src\n  language_id: 342840478\nEiffel:\n  type: programming\n  color: \"#4d6977\"\n  extensions:\n  - \".e\"\n  tm_scope: source.eiffel\n  ace_mode: eiffel\n  codemirror_mode: eiffel\n  codemirror_mime_type: text/x-eiffel\n  language_id: 99\nElixir:\n  type: programming\n  color: \"#6e4a7e\"\n  extensions:\n  - \".ex\"\n  - \".exs\"\n  tm_scope: source.elixir\n  ace_mode: elixir\n  filenames:\n  - mix.lock\n  interpreters:\n  - elixir\n  language_id: 100\nElm:\n  type: programming\n  color: \"#60B5CC\"\n  extensions:\n  - \".elm\"\n  tm_scope: source.elm\n  ace_mode: elm\n  codemirror_mode: elm\n  codemirror_mime_type: text/x-elm\n  language_id: 101\nElvish:\n  type: programming\n  ace_mode: text\n  extensions:\n  - \".elv\"\n  interpreters:\n  - elvish\n  tm_scope: source.elvish\n  color: \"#55BB55\"\n  language_id: 570996448\nElvish Transcript:\n  type: programming\n  group: Elvish\n  ace_mode: text\n  tm_scope: source.elvish-transcript\n  color: \"#55BB55\"\n  language_id: 452025714\nEmacs Lisp:\n  type: programming\n  tm_scope: source.emacs.lisp\n  color: \"#c065db\"\n  aliases:\n  - elisp\n  - emacs\n  filenames:\n  - \".abbrev_defs\"\n  - \".emacs\"\n  - \".emacs.desktop\"\n  - \".gnus\"\n  - \".spacemacs\"\n  - \".viper\"\n  - Cask\n  - Project.ede\n  - _emacs\n  - abbrev_defs\n  extensions:\n  - \".el\"\n  - \".emacs\"\n  - \".emacs.desktop\"\n  ace_mode: lisp\n  codemirror_mode: commonlisp\n  codemirror_mime_type: text/x-common-lisp\n  language_id: 102\nEmberScript:\n  type: programming\n  color: \"#FFF4F3\"\n  extensions:\n  - \".em\"\n  - \".emberscript\"\n  tm_scope: source.coffee\n  ace_mode: coffee\n  codemirror_mode: coffeescript\n  codemirror_mime_type: text/x-coffeescript\n  language_id: 103\nErlang:\n  type: programming\n  color: \"#B83998\"\n  extensions:\n  - \".erl\"\n  - \".app\"\n  - \".app.src\"\n  - \".es\"\n  - \".escript\"\n  - \".hrl\"\n  - \".xrl\"\n  - \".yrl\"\n  filenames:\n  - Emakefile\n  - rebar.config\n  - rebar.config.lock\n  - rebar.lock\n  tm_scope: source.erlang\n  ace_mode: erlang\n  codemirror_mode: erlang\n  codemirror_mime_type: text/x-erlang\n  interpreters:\n  - escript\n  language_id: 104\nEuphoria:\n  type: programming\n  color: \"#FF790B\"\n  extensions:\n  - \".e\"\n  - \".ex\"\n  interpreters:\n  - eui\n  - euiw\n  ace_mode: text\n  tm_scope: source.euphoria\n  language_id: 880693982\nF#:\n  type: programming\n  color: \"#b845fc\"\n  aliases:\n  - fsharp\n  extensions:\n  - \".fs\"\n  - \".fsi\"\n  - \".fsx\"\n  tm_scope: source.fsharp\n  ace_mode: text\n  codemirror_mode: mllike\n  codemirror_mime_type: text/x-fsharp\n  language_id: 105\nF*:\n  fs_name: Fstar\n  type: programming\n  color: \"#572e30\"\n  aliases:\n  - fstar\n  extensions:\n  - \".fst\"\n  - \".fsti\"\n  tm_scope: source.fstar\n  ace_mode: text\n  language_id: 336943375\nFIGlet Font:\n  type: data\n  color: \"#FFDDBB\"\n  aliases:\n  - FIGfont\n  extensions:\n  - \".flf\"\n  tm_scope: source.figfont\n  ace_mode: text\n  language_id: 686129783\nFIRRTL:\n  type: programming\n  color: \"#2f632f\"\n  extensions:\n  - \".fir\"\n  tm_scope: source.firrtl\n  ace_mode: text\n  language_id: 906694254\nFLUX:\n  type: programming\n  color: \"#88ccff\"\n  extensions:\n  - \".fx\"\n  - \".flux\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 106\nFactor:\n  type: programming\n  color: \"#636746\"\n  extensions:\n  - \".factor\"\n  filenames:\n  - \".factor-boot-rc\"\n  - \".factor-rc\"\n  tm_scope: source.factor\n  ace_mode: text\n  codemirror_mode: factor\n  codemirror_mime_type: text/x-factor\n  language_id: 108\nFancy:\n  type: programming\n  color: \"#7b9db4\"\n  extensions:\n  - \".fy\"\n  - \".fancypack\"\n  filenames:\n  - Fakefile\n  tm_scope: source.fancy\n  ace_mode: text\n  language_id: 109\nFantom:\n  type: programming\n  color: \"#14253c\"\n  extensions:\n  - \".fan\"\n  tm_scope: source.fan\n  ace_mode: text\n  language_id: 110\nFaust:\n  type: programming\n  color: \"#c37240\"\n  extensions:\n  - \".dsp\"\n  tm_scope: source.faust\n  ace_mode: text\n  language_id: 622529198\nFennel:\n  type: programming\n  tm_scope: source.fnl\n  ace_mode: text\n  color: \"#fff3d7\"\n  interpreters:\n  - fennel\n  extensions:\n  - \".fnl\"\n  language_id: 239946126\nFilebench WML:\n  type: programming\n  color: \"#F6B900\"\n  extensions:\n  - \".f\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 111\nFilterscript:\n  type: programming\n  group: RenderScript\n  extensions:\n  - \".fs\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 112\nFluent:\n  type: programming\n  color: \"#ffcc33\"\n  extensions:\n  - \".ftl\"\n  tm_scope: source.ftl\n  ace_mode: text\n  language_id: 206353404\nFormatted:\n  type: data\n  extensions:\n  - \".for\"\n  - \".eam.fs\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 113\nForth:\n  type: programming\n  color: \"#341708\"\n  extensions:\n  - \".fth\"\n  - \".4th\"\n  - \".f\"\n  - \".for\"\n  - \".forth\"\n  - \".fr\"\n  - \".frt\"\n  - \".fs\"\n  tm_scope: source.forth\n  ace_mode: forth\n  codemirror_mode: forth\n  codemirror_mime_type: text/x-forth\n  language_id: 114\nFortran:\n  group: Fortran\n  type: programming\n  color: \"#4d41b1\"\n  extensions:\n  - \".f\"\n  - \".f77\"\n  - \".for\"\n  - \".fpp\"\n  tm_scope: source.fortran\n  ace_mode: text\n  codemirror_mode: fortran\n  codemirror_mime_type: text/x-fortran\n  language_id: 107\nFortran Free Form:\n  group: Fortran\n  color: \"#4d41b1\"\n  type: programming\n  extensions:\n  - \".f90\"\n  - \".f03\"\n  - \".f08\"\n  - \".f95\"\n  tm_scope: source.fortran.modern\n  ace_mode: text\n  codemirror_mode: fortran\n  codemirror_mime_type: text/x-fortran\n  language_id: 761352333\nFreeBasic:\n  type: programming\n  color: \"#141AC9\"\n  extensions:\n  - \".bi\"\n  - \".bas\"\n  tm_scope: source.vbnet\n  aliases:\n  - fb\n  ace_mode: text\n  codemirror_mode: vb\n  codemirror_mime_type: text/x-vb\n  language_id: 472896659\nFreeMarker:\n  type: programming\n  color: \"#0050b2\"\n  aliases:\n  - ftl\n  extensions:\n  - \".ftl\"\n  tm_scope: text.html.ftl\n  ace_mode: ftl\n  language_id: 115\nFrege:\n  type: programming\n  color: \"#00cafe\"\n  extensions:\n  - \".fr\"\n  tm_scope: source.haskell\n  ace_mode: haskell\n  language_id: 116\nFuthark:\n  type: programming\n  color: \"#5f021f\"\n  extensions:\n  - \".fut\"\n  tm_scope: source.futhark\n  ace_mode: text\n  language_id: 97358117\nG-code:\n  type: programming\n  color: \"#D08CF2\"\n  extensions:\n  - \".g\"\n  - \".cnc\"\n  - \".gco\"\n  - \".gcode\"\n  tm_scope: source.gcode\n  ace_mode: gcode\n  language_id: 117\nGAML:\n  type: programming\n  color: \"#FFC766\"\n  extensions:\n  - \".gaml\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 290345951\nGAMS:\n  type: programming\n  color: \"#f49a22\"\n  extensions:\n  - \".gms\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 118\nGAP:\n  type: programming\n  color: \"#0000cc\"\n  extensions:\n  - \".g\"\n  - \".gap\"\n  - \".gd\"\n  - \".gi\"\n  - \".tst\"\n  tm_scope: source.gap\n  ace_mode: text\n  language_id: 119\nGCC Machine Description:\n  type: programming\n  color: \"#FFCFAB\"\n  extensions:\n  - \".md\"\n  tm_scope: source.lisp\n  ace_mode: lisp\n  codemirror_mode: commonlisp\n  codemirror_mime_type: text/x-common-lisp\n  language_id: 121\nGDB:\n  type: programming\n  extensions:\n  - \".gdb\"\n  - \".gdbinit\"\n  tm_scope: source.gdb\n  ace_mode: text\n  language_id: 122\nGDScript:\n  type: programming\n  color: \"#355570\"\n  extensions:\n  - \".gd\"\n  tm_scope: source.gdscript\n  ace_mode: text\n  language_id: 123\nGEDCOM:\n  type: data\n  color: \"#003058\"\n  ace_mode: text\n  extensions:\n  - \".ged\"\n  tm_scope: source.gedcom\n  language_id: 459577965\nGLSL:\n  type: programming\n  color: \"#5686a5\"\n  extensions:\n  - \".glsl\"\n  - \".fp\"\n  - \".frag\"\n  - \".frg\"\n  - \".fs\"\n  - \".fsh\"\n  - \".fshader\"\n  - \".geo\"\n  - \".geom\"\n  - \".glslf\"\n  - \".glslv\"\n  - \".gs\"\n  - \".gshader\"\n  - \".rchit\"\n  - \".rmiss\"\n  - \".shader\"\n  - \".tesc\"\n  - \".tese\"\n  - \".vert\"\n  - \".vrx\"\n  - \".vs\"\n  - \".vsh\"\n  - \".vshader\"\n  tm_scope: source.glsl\n  ace_mode: glsl\n  language_id: 124\nGN:\n  type: data\n  extensions:\n  - \".gn\"\n  - \".gni\"\n  interpreters:\n  - gn\n  filenames:\n  - \".gn\"\n  tm_scope: source.gn\n  ace_mode: python\n  codemirror_mode: python\n  codemirror_mime_type: text/x-python\n  language_id: 302957008\nGSC:\n  type: programming\n  color: \"#FF6800\"\n  extensions:\n  - \".gsc\"\n  - \".csc\"\n  - \".gsh\"\n  tm_scope: source.gsc\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  language_id: 257856279\nGame Maker Language:\n  type: programming\n  color: \"#71b417\"\n  extensions:\n  - \".gml\"\n  tm_scope: source.c++\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-c++src\n  language_id: 125\nGemfile.lock:\n  type: data\n  color: \"#701516\"\n  searchable: false\n  tm_scope: source.gemfile-lock\n  ace_mode: text\n  filenames:\n  - Gemfile.lock\n  language_id: 907065713\nGemini:\n  type: prose\n  color: \"#ff6900\"\n  ace_mode: text\n  extensions:\n  - \".gmi\"\n  aliases:\n  - gemtext\n  wrap: true\n  tm_scope: source.gemini\n  language_id: 310828396\nGenero 4gl:\n  type: programming\n  color: \"#63408e\"\n  extensions:\n  - \".4gl\"\n  tm_scope: source.genero-4gl\n  ace_mode: text\n  language_id: 986054050\nGenero per:\n  type: markup\n  color: \"#d8df39\"\n  extensions:\n  - \".per\"\n  tm_scope: source.genero-per\n  ace_mode: text\n  language_id: 902995658\nGenie:\n  type: programming\n  ace_mode: text\n  extensions:\n  - \".gs\"\n  color: \"#fb855d\"\n  tm_scope: none\n  language_id: 792408528\nGenshi:\n  type: programming\n  color: \"#951531\"\n  extensions:\n  - \".kid\"\n  tm_scope: text.xml.genshi\n  aliases:\n  - xml+genshi\n  - xml+kid\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  language_id: 126\nGentoo Ebuild:\n  type: programming\n  color: \"#9400ff\"\n  group: Shell\n  extensions:\n  - \".ebuild\"\n  tm_scope: source.shell\n  ace_mode: sh\n  codemirror_mode: shell\n  codemirror_mime_type: text/x-sh\n  language_id: 127\nGentoo Eclass:\n  type: programming\n  color: \"#9400ff\"\n  group: Shell\n  extensions:\n  - \".eclass\"\n  tm_scope: source.shell\n  ace_mode: sh\n  codemirror_mode: shell\n  codemirror_mime_type: text/x-sh\n  language_id: 128\nGerber Image:\n  type: data\n  color: \"#d20b00\"\n  aliases:\n  - rs-274x\n  extensions:\n  - \".gbr\"\n  - \".cmp\"\n  - \".gbl\"\n  - \".gbo\"\n  - \".gbp\"\n  - \".gbs\"\n  - \".gko\"\n  - \".gml\"\n  - \".gpb\"\n  - \".gpt\"\n  - \".gtl\"\n  - \".gto\"\n  - \".gtp\"\n  - \".gts\"\n  - \".ncl\"\n  - \".sol\"\n  interpreters:\n  - gerbv\n  - gerbview\n  tm_scope: source.gerber\n  ace_mode: text\n  language_id: 404627610\nGettext Catalog:\n  type: prose\n  aliases:\n  - pot\n  extensions:\n  - \".po\"\n  - \".pot\"\n  tm_scope: source.po\n  ace_mode: text\n  language_id: 129\nGherkin:\n  type: programming\n  extensions:\n  - \".feature\"\n  - \".story\"\n  tm_scope: text.gherkin.feature\n  aliases:\n  - cucumber\n  ace_mode: text\n  color: \"#5B2063\"\n  language_id: 76\nGit Attributes:\n  type: data\n  color: \"#F44D27\"\n  aliases:\n  - gitattributes\n  filenames:\n  - \".gitattributes\"\n  tm_scope: source.gitattributes\n  ace_mode: gitignore\n  codemirror_mode: shell\n  codemirror_mime_type: text/x-sh\n  language_id: 956324166\nGit Config:\n  type: data\n  color: \"#F44D27\"\n  group: INI\n  aliases:\n  - gitconfig\n  - gitmodules\n  extensions:\n  - \".gitconfig\"\n  filenames:\n  - \".gitconfig\"\n  - \".gitmodules\"\n  ace_mode: ini\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  tm_scope: source.gitconfig\n  language_id: 807968997\nGit Revision List:\n  type: data\n  color: \"#F44D27\"\n  aliases:\n  - Git Blame Ignore Revs\n  filenames:\n  - \".git-blame-ignore-revs\"\n  tm_scope: source.git-revlist\n  ace_mode: text\n  language_id: 461881235\nGleam:\n  type: programming\n  color: \"#ffaff3\"\n  ace_mode: text\n  extensions:\n  - \".gleam\"\n  tm_scope: source.gleam\n  language_id: 1054258749\nGlimmer JS:\n  type: programming\n  extensions:\n  - \".gjs\"\n  ace_mode: javascript\n  color: \"#F5835F\"\n  tm_scope: source.gjs\n  group: JavaScript\n  language_id: 5523150\nGlimmer TS:\n  type: programming\n  extensions:\n  - \".gts\"\n  ace_mode: typescript\n  color: \"#3178c6\"\n  tm_scope: source.gts\n  group: TypeScript\n  language_id: 95110458\nGlyph:\n  type: programming\n  color: \"#c1ac7f\"\n  extensions:\n  - \".glf\"\n  tm_scope: source.tcl\n  ace_mode: tcl\n  codemirror_mode: tcl\n  codemirror_mime_type: text/x-tcl\n  language_id: 130\nGlyph Bitmap Distribution Format:\n  type: data\n  extensions:\n  - \".bdf\"\n  tm_scope: source.bdf\n  ace_mode: text\n  language_id: 997665271\nGnuplot:\n  type: programming\n  color: \"#f0a9f0\"\n  extensions:\n  - \".gp\"\n  - \".gnu\"\n  - \".gnuplot\"\n  - \".p\"\n  - \".plot\"\n  - \".plt\"\n  interpreters:\n  - gnuplot\n  tm_scope: source.gnuplot\n  ace_mode: text\n  language_id: 131\nGo:\n  type: programming\n  color: \"#00ADD8\"\n  aliases:\n  - golang\n  extensions:\n  - \".go\"\n  tm_scope: source.go\n  ace_mode: golang\n  codemirror_mode: go\n  codemirror_mime_type: text/x-go\n  language_id: 132\nGo Checksums:\n  type: data\n  color: \"#00ADD8\"\n  aliases:\n  - go.sum\n  - go sum\n  - go.work.sum\n  - go work sum\n  filenames:\n  - go.sum\n  - go.work.sum\n  tm_scope: go.sum\n  ace_mode: text\n  language_id: 1054391671\nGo Module:\n  type: data\n  color: \"#00ADD8\"\n  aliases:\n  - go.mod\n  - go mod\n  filenames:\n  - go.mod\n  tm_scope: go.mod\n  ace_mode: text\n  language_id: 947461016\nGo Workspace:\n  type: data\n  color: \"#00ADD8\"\n  aliases:\n  - go.work\n  - go work\n  filenames:\n  - go.work\n  tm_scope: go.mod\n  ace_mode: text\n  language_id: 934546256\nGodot Resource:\n  type: data\n  color: \"#355570\"\n  extensions:\n  - \".gdnlib\"\n  - \".gdns\"\n  - \".tres\"\n  - \".tscn\"\n  filenames:\n  - project.godot\n  tm_scope: source.gdresource\n  ace_mode: text\n  language_id: 738107771\nGolo:\n  type: programming\n  color: \"#88562A\"\n  extensions:\n  - \".golo\"\n  tm_scope: source.golo\n  ace_mode: text\n  language_id: 133\nGosu:\n  type: programming\n  color: \"#82937f\"\n  extensions:\n  - \".gs\"\n  - \".gst\"\n  - \".gsx\"\n  - \".vark\"\n  tm_scope: source.gosu.2\n  ace_mode: text\n  language_id: 134\nGrace:\n  type: programming\n  color: \"#615f8b\"\n  extensions:\n  - \".grace\"\n  tm_scope: source.grace\n  ace_mode: text\n  language_id: 135\nGradle:\n  type: data\n  color: \"#02303a\"\n  extensions:\n  - \".gradle\"\n  tm_scope: source.groovy.gradle\n  ace_mode: text\n  language_id: 136\nGradle Kotlin DSL:\n  group: Gradle\n  type: data\n  color: \"#02303a\"\n  extensions:\n  - \".gradle.kts\"\n  ace_mode: text\n  tm_scope: source.kotlin\n  language_id: 432600901\nGrammatical Framework:\n  type: programming\n  aliases:\n  - gf\n  extensions:\n  - \".gf\"\n  color: \"#ff0000\"\n  tm_scope: source.gf\n  ace_mode: haskell\n  codemirror_mode: haskell\n  codemirror_mime_type: text/x-haskell\n  language_id: 137\nGraph Modeling Language:\n  type: data\n  extensions:\n  - \".gml\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 138\nGraphQL:\n  type: data\n  color: \"#e10098\"\n  extensions:\n  - \".graphql\"\n  - \".gql\"\n  - \".graphqls\"\n  tm_scope: source.graphql\n  ace_mode: text\n  language_id: 139\nGraphviz (DOT):\n  type: data\n  color: \"#2596be\"\n  tm_scope: source.dot\n  extensions:\n  - \".dot\"\n  - \".gv\"\n  ace_mode: text\n  language_id: 140\nGroovy:\n  type: programming\n  tm_scope: source.groovy\n  ace_mode: groovy\n  codemirror_mode: groovy\n  codemirror_mime_type: text/x-groovy\n  color: \"#4298b8\"\n  extensions:\n  - \".groovy\"\n  - \".grt\"\n  - \".gtpl\"\n  - \".gvy\"\n  interpreters:\n  - groovy\n  filenames:\n  - Jenkinsfile\n  language_id: 142\nGroovy Server Pages:\n  type: programming\n  color: \"#4298b8\"\n  group: Groovy\n  aliases:\n  - gsp\n  - java server page\n  extensions:\n  - \".gsp\"\n  tm_scope: text.html.jsp\n  ace_mode: jsp\n  codemirror_mode: htmlembedded\n  codemirror_mime_type: application/x-jsp\n  language_id: 143\nHAProxy:\n  type: data\n  color: \"#106da9\"\n  extensions:\n  - \".cfg\"\n  filenames:\n  - haproxy.cfg\n  tm_scope: source.haproxy-config\n  ace_mode: text\n  language_id: 366607477\nHCL:\n  type: programming\n  color: \"#844FBA\"\n  extensions:\n  - \".hcl\"\n  - \".nomad\"\n  - \".tf\"\n  - \".tfvars\"\n  - \".workflow\"\n  aliases:\n  - HashiCorp Configuration Language\n  - terraform\n  ace_mode: ruby\n  codemirror_mode: ruby\n  codemirror_mime_type: text/x-ruby\n  tm_scope: source.hcl\n  language_id: 144\nHLSL:\n  type: programming\n  color: \"#aace60\"\n  extensions:\n  - \".hlsl\"\n  - \".cginc\"\n  - \".fx\"\n  - \".fxh\"\n  - \".hlsli\"\n  ace_mode: text\n  tm_scope: source.hlsl\n  language_id: 145\nHOCON:\n  type: data\n  color: \"#9ff8ee\"\n  extensions:\n  - \".hocon\"\n  filenames:\n  - \".scalafix.conf\"\n  - \".scalafmt.conf\"\n  tm_scope: source.hocon\n  ace_mode: text\n  language_id: 679725279\nHTML:\n  type: markup\n  tm_scope: text.html.basic\n  ace_mode: html\n  codemirror_mode: htmlmixed\n  codemirror_mime_type: text/html\n  color: \"#e34c26\"\n  aliases:\n  - xhtml\n  extensions:\n  - \".html\"\n  - \".hta\"\n  - \".htm\"\n  - \".html.hl\"\n  - \".inc\"\n  - \".xht\"\n  - \".xhtml\"\n  language_id: 146\nHTML+ECR:\n  type: markup\n  color: \"#2e1052\"\n  tm_scope: text.html.ecr\n  group: HTML\n  aliases:\n  - ecr\n  extensions:\n  - \".ecr\"\n  ace_mode: text\n  codemirror_mode: htmlmixed\n  codemirror_mime_type: text/html\n  language_id: 148\nHTML+EEX:\n  type: markup\n  color: \"#6e4a7e\"\n  tm_scope: text.html.elixir\n  group: HTML\n  aliases:\n  - eex\n  - heex\n  - leex\n  extensions:\n  - \".eex\"\n  - \".html.heex\"\n  - \".html.leex\"\n  ace_mode: text\n  codemirror_mode: htmlmixed\n  codemirror_mime_type: text/html\n  language_id: 149\nHTML+ERB:\n  type: markup\n  color: \"#701516\"\n  tm_scope: text.html.erb\n  group: HTML\n  aliases:\n  - erb\n  - rhtml\n  - html+ruby\n  extensions:\n  - \".erb\"\n  - \".erb.deface\"\n  - \".rhtml\"\n  ace_mode: text\n  codemirror_mode: htmlembedded\n  codemirror_mime_type: application/x-erb\n  language_id: 150\nHTML+PHP:\n  type: markup\n  color: \"#4f5d95\"\n  tm_scope: text.html.php\n  group: HTML\n  extensions:\n  - \".phtml\"\n  ace_mode: php\n  codemirror_mode: php\n  codemirror_mime_type: application/x-httpd-php\n  language_id: 151\nHTML+Razor:\n  type: markup\n  color: \"#512be4\"\n  tm_scope: text.html.cshtml\n  group: HTML\n  aliases:\n  - razor\n  extensions:\n  - \".cshtml\"\n  - \".razor\"\n  ace_mode: razor\n  codemirror_mode: htmlmixed\n  codemirror_mime_type: text/html\n  language_id: 479039817\nHTTP:\n  type: data\n  color: \"#005C9C\"\n  extensions:\n  - \".http\"\n  tm_scope: source.httpspec\n  ace_mode: text\n  codemirror_mode: http\n  codemirror_mime_type: message/http\n  language_id: 152\nHXML:\n  type: data\n  color: \"#f68712\"\n  ace_mode: text\n  extensions:\n  - \".hxml\"\n  tm_scope: source.hxml\n  language_id: 786683730\nHack:\n  type: programming\n  ace_mode: php\n  codemirror_mode: php\n  codemirror_mime_type: application/x-httpd-php\n  extensions:\n  - \".hack\"\n  - \".hh\"\n  - \".hhi\"\n  - \".php\"\n  tm_scope: source.hack\n  color: \"#878787\"\n  language_id: 153\nHaml:\n  type: markup\n  color: \"#ece2a9\"\n  extensions:\n  - \".haml\"\n  - \".haml.deface\"\n  tm_scope: text.haml\n  ace_mode: haml\n  codemirror_mode: haml\n  codemirror_mime_type: text/x-haml\n  language_id: 154\nHandlebars:\n  type: markup\n  color: \"#f7931e\"\n  aliases:\n  - hbs\n  - htmlbars\n  extensions:\n  - \".handlebars\"\n  - \".hbs\"\n  tm_scope: text.html.handlebars\n  ace_mode: handlebars\n  language_id: 155\nHarbour:\n  type: programming\n  color: \"#0e60e3\"\n  extensions:\n  - \".hb\"\n  tm_scope: source.harbour\n  ace_mode: text\n  language_id: 156\nHaskell:\n  type: programming\n  color: \"#5e5086\"\n  extensions:\n  - \".hs\"\n  - \".hs-boot\"\n  - \".hsc\"\n  interpreters:\n  - runghc\n  - runhaskell\n  - runhugs\n  tm_scope: source.haskell\n  ace_mode: haskell\n  codemirror_mode: haskell\n  codemirror_mime_type: text/x-haskell\n  language_id: 157\nHaxe:\n  type: programming\n  ace_mode: haxe\n  codemirror_mode: haxe\n  codemirror_mime_type: text/x-haxe\n  color: \"#df7900\"\n  extensions:\n  - \".hx\"\n  - \".hxsl\"\n  tm_scope: source.hx\n  language_id: 158\nHiveQL:\n  type: programming\n  extensions:\n  - \".q\"\n  - \".hql\"\n  color: \"#dce200\"\n  tm_scope: source.hql\n  ace_mode: sql\n  language_id: 931814087\nHolyC:\n  type: programming\n  color: \"#ffefaf\"\n  extensions:\n  - \".hc\"\n  tm_scope: source.hc\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  language_id: 928121743\nHosts File:\n  type: data\n  color: \"#308888\"\n  filenames:\n  - HOSTS\n  - hosts\n  - hosts.txt\n  aliases:\n  - hosts\n  tm_scope: source.hosts\n  ace_mode: text\n  language_id: 231021894\nHy:\n  type: programming\n  ace_mode: text\n  color: \"#7790B2\"\n  extensions:\n  - \".hy\"\n  interpreters:\n  - hy\n  aliases:\n  - hylang\n  tm_scope: source.hy\n  language_id: 159\nHyPhy:\n  type: programming\n  ace_mode: text\n  extensions:\n  - \".bf\"\n  tm_scope: none\n  language_id: 160\nIDL:\n  type: programming\n  color: \"#a3522f\"\n  extensions:\n  - \".pro\"\n  - \".dlm\"\n  tm_scope: source.idl\n  ace_mode: text\n  codemirror_mode: idl\n  codemirror_mime_type: text/x-idl\n  language_id: 161\nIGOR Pro:\n  type: programming\n  color: \"#0000cc\"\n  extensions:\n  - \".ipf\"\n  aliases:\n  - igor\n  - igorpro\n  tm_scope: source.igor\n  ace_mode: text\n  language_id: 162\nINI:\n  type: data\n  color: \"#d1dbe0\"\n  extensions:\n  - \".ini\"\n  - \".cfg\"\n  - \".cnf\"\n  - \".dof\"\n  - \".lektorproject\"\n  - \".prefs\"\n  - \".pro\"\n  - \".properties\"\n  - \".url\"\n  filenames:\n  - \".coveragerc\"\n  - \".flake8\"\n  - \".pylintrc\"\n  - HOSTS\n  - buildozer.spec\n  - hosts\n  - pylintrc\n  - vlcrc\n  tm_scope: source.ini\n  aliases:\n  - dosini\n  ace_mode: ini\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  language_id: 163\nIRC log:\n  type: data\n  aliases:\n  - irc\n  - irc logs\n  extensions:\n  - \".irclog\"\n  - \".weechatlog\"\n  tm_scope: none\n  ace_mode: text\n  codemirror_mode: mirc\n  codemirror_mime_type: text/mirc\n  language_id: 164\nIdris:\n  type: programming\n  color: \"#b30000\"\n  extensions:\n  - \".idr\"\n  - \".lidr\"\n  ace_mode: text\n  tm_scope: source.idris\n  language_id: 165\nIgnore List:\n  type: data\n  color: \"#000000\"\n  aliases:\n  - ignore\n  - gitignore\n  - git-ignore\n  extensions:\n  - \".gitignore\"\n  filenames:\n  - \".atomignore\"\n  - \".babelignore\"\n  - \".bzrignore\"\n  - \".coffeelintignore\"\n  - \".cvsignore\"\n  - \".dockerignore\"\n  - \".eleventyignore\"\n  - \".eslintignore\"\n  - \".gitignore\"\n  - \".markdownlintignore\"\n  - \".nodemonignore\"\n  - \".npmignore\"\n  - \".prettierignore\"\n  - \".stylelintignore\"\n  - \".vercelignore\"\n  - \".vscodeignore\"\n  - gitignore-global\n  - gitignore_global\n  ace_mode: gitignore\n  tm_scope: source.gitignore\n  codemirror_mode: shell\n  codemirror_mime_type: text/x-sh\n  language_id: 74444240\nImageJ Macro:\n  type: programming\n  color: \"#99AAFF\"\n  aliases:\n  - ijm\n  extensions:\n  - \".ijm\"\n  ace_mode: text\n  tm_scope: none\n  language_id: 575143428\nImba:\n  type: programming\n  color: \"#16cec6\"\n  extensions:\n  - \".imba\"\n  ace_mode: text\n  tm_scope: source.imba\n  language_id: 1057618448\nInform 7:\n  type: programming\n  wrap: true\n  extensions:\n  - \".ni\"\n  - \".i7x\"\n  tm_scope: source.inform7\n  aliases:\n  - i7\n  - inform7\n  ace_mode: text\n  language_id: 166\nInk:\n  type: programming\n  wrap: true\n  extensions:\n  - \".ink\"\n  tm_scope: source.ink\n  ace_mode: text\n  language_id: 838252715\nInno Setup:\n  type: programming\n  color: \"#264b99\"\n  extensions:\n  - \".iss\"\n  - \".isl\"\n  tm_scope: source.inno\n  ace_mode: text\n  language_id: 167\nIo:\n  type: programming\n  color: \"#a9188d\"\n  extensions:\n  - \".io\"\n  interpreters:\n  - io\n  tm_scope: source.io\n  ace_mode: io\n  language_id: 168\nIoke:\n  type: programming\n  color: \"#078193\"\n  extensions:\n  - \".ik\"\n  interpreters:\n  - ioke\n  tm_scope: source.ioke\n  ace_mode: text\n  language_id: 169\nIsabelle:\n  type: programming\n  color: \"#FEFE00\"\n  extensions:\n  - \".thy\"\n  tm_scope: source.isabelle.theory\n  ace_mode: text\n  language_id: 170\nIsabelle ROOT:\n  type: programming\n  color: \"#FEFE00\"\n  group: Isabelle\n  filenames:\n  - ROOT\n  tm_scope: source.isabelle.root\n  ace_mode: text\n  language_id: 171\nJ:\n  type: programming\n  color: \"#9EEDFF\"\n  extensions:\n  - \".ijs\"\n  interpreters:\n  - jconsole\n  tm_scope: source.j\n  ace_mode: text\n  language_id: 172\nJAR Manifest:\n  type: data\n  color: \"#b07219\"\n  filenames:\n  - MANIFEST.MF\n  tm_scope: source.yaml\n  ace_mode: text\n  language_id: 447261135\nJCL:\n  type: programming\n  color: \"#d90e09\"\n  extensions:\n  - \".jcl\"\n  tm_scope: source.jcl\n  ace_mode: text\n  language_id: 316620079\nJFlex:\n  type: programming\n  color: \"#DBCA00\"\n  group: Lex\n  extensions:\n  - \".flex\"\n  - \".jflex\"\n  tm_scope: source.jflex\n  ace_mode: text\n  language_id: 173\nJSON:\n  type: data\n  color: \"#292929\"\n  tm_scope: source.json\n  ace_mode: json\n  codemirror_mode: javascript\n  codemirror_mime_type: application/json\n  aliases:\n  - geojson\n  - jsonl\n  - sarif\n  - topojson\n  extensions:\n  - \".json\"\n  - \".4DForm\"\n  - \".4DProject\"\n  - \".avsc\"\n  - \".geojson\"\n  - \".gltf\"\n  - \".har\"\n  - \".ice\"\n  - \".JSON-tmLanguage\"\n  - \".jsonl\"\n  - \".mcmeta\"\n  - \".sarif\"\n  - \".tfstate\"\n  - \".tfstate.backup\"\n  - \".topojson\"\n  - \".webapp\"\n  - \".webmanifest\"\n  - \".yy\"\n  - \".yyp\"\n  filenames:\n  - \".all-contributorsrc\"\n  - \".arcconfig\"\n  - \".auto-changelog\"\n  - \".c8rc\"\n  - \".htmlhintrc\"\n  - \".imgbotconfig\"\n  - \".nycrc\"\n  - \".tern-config\"\n  - \".tern-project\"\n  - \".watchmanconfig\"\n  - MODULE.bazel.lock\n  - Pipfile.lock\n  - composer.lock\n  - deno.lock\n  - flake.lock\n  - mcmod.info\n  language_id: 174\nJSON with Comments:\n  type: data\n  color: \"#292929\"\n  group: JSON\n  tm_scope: source.js\n  ace_mode: javascript\n  codemirror_mode: javascript\n  codemirror_mime_type: text/javascript\n  aliases:\n  - jsonc\n  extensions:\n  - \".jsonc\"\n  - \".code-snippets\"\n  - \".code-workspace\"\n  - \".sublime-build\"\n  - \".sublime-color-scheme\"\n  - \".sublime-commands\"\n  - \".sublime-completions\"\n  - \".sublime-keymap\"\n  - \".sublime-macro\"\n  - \".sublime-menu\"\n  - \".sublime-mousemap\"\n  - \".sublime-project\"\n  - \".sublime-settings\"\n  - \".sublime-theme\"\n  - \".sublime-workspace\"\n  - \".sublime_metrics\"\n  - \".sublime_session\"\n  filenames:\n  - \".babelrc\"\n  - \".devcontainer.json\"\n  - \".eslintrc.json\"\n  - \".jscsrc\"\n  - \".jshintrc\"\n  - \".jslintrc\"\n  - \".swcrc\"\n  - api-extractor.json\n  - devcontainer.json\n  - jsconfig.json\n  - language-configuration.json\n  - tsconfig.json\n  - tslint.json\n  language_id: 423\nJSON5:\n  type: data\n  color: \"#267CB9\"\n  extensions:\n  - \".json5\"\n  tm_scope: source.js\n  ace_mode: javascript\n  codemirror_mode: javascript\n  codemirror_mime_type: application/json\n  language_id: 175\nJSONLD:\n  type: data\n  color: \"#0c479c\"\n  extensions:\n  - \".jsonld\"\n  tm_scope: source.js\n  ace_mode: javascript\n  codemirror_mode: javascript\n  codemirror_mime_type: application/json\n  language_id: 176\nJSONiq:\n  color: \"#40d47e\"\n  type: programming\n  ace_mode: jsoniq\n  codemirror_mode: javascript\n  codemirror_mime_type: application/json\n  extensions:\n  - \".jq\"\n  tm_scope: source.jsoniq\n  language_id: 177\nJanet:\n  type: programming\n  color: \"#0886a5\"\n  extensions:\n  - \".janet\"\n  tm_scope: source.janet\n  ace_mode: scheme\n  codemirror_mode: scheme\n  codemirror_mime_type: text/x-scheme\n  interpreters:\n  - janet\n  language_id: 1028705371\nJasmin:\n  type: programming\n  color: \"#d03600\"\n  ace_mode: java\n  extensions:\n  - \".j\"\n  tm_scope: source.jasmin\n  language_id: 180\nJava:\n  type: programming\n  tm_scope: source.java\n  ace_mode: java\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-java\n  color: \"#b07219\"\n  extensions:\n  - \".java\"\n  - \".jav\"\n  - \".jsh\"\n  language_id: 181\nJava Properties:\n  type: data\n  color: \"#2A6277\"\n  extensions:\n  - \".properties\"\n  tm_scope: source.java-properties\n  ace_mode: properties\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  language_id: 519377561\nJava Server Pages:\n  type: programming\n  color: \"#2A6277\"\n  group: Java\n  aliases:\n  - jsp\n  extensions:\n  - \".jsp\"\n  - \".tag\"\n  tm_scope: text.html.jsp\n  ace_mode: jsp\n  codemirror_mode: htmlembedded\n  codemirror_mime_type: application/x-jsp\n  language_id: 182\nJava Template Engine:\n  type: programming\n  color: \"#2A6277\"\n  group: Java\n  aliases:\n  - jte\n  extensions:\n  - \".jte\"\n  ace_mode: text\n  tm_scope: text.html.jte\n  language_id: 599494012\nJavaScript:\n  type: programming\n  tm_scope: source.js\n  ace_mode: javascript\n  codemirror_mode: javascript\n  codemirror_mime_type: text/javascript\n  color: \"#f1e05a\"\n  aliases:\n  - js\n  - node\n  extensions:\n  - \".js\"\n  - \"._js\"\n  - \".bones\"\n  - \".cjs\"\n  - \".es\"\n  - \".es6\"\n  - \".frag\"\n  - \".gs\"\n  - \".jake\"\n  - \".javascript\"\n  - \".jsb\"\n  - \".jscad\"\n  - \".jsfl\"\n  - \".jslib\"\n  - \".jsm\"\n  - \".jspre\"\n  - \".jss\"\n  - \".jsx\"\n  - \".mjs\"\n  - \".njs\"\n  - \".pac\"\n  - \".sjs\"\n  - \".ssjs\"\n  - \".xsjs\"\n  - \".xsjslib\"\n  filenames:\n  - Jakefile\n  interpreters:\n  - chakra\n  - d8\n  - gjs\n  - js\n  - node\n  - nodejs\n  - qjs\n  - rhino\n  - v8\n  - v8-shell\n  language_id: 183\nJavaScript+ERB:\n  type: programming\n  color: \"#f1e05a\"\n  tm_scope: source.js\n  group: JavaScript\n  extensions:\n  - \".js.erb\"\n  ace_mode: javascript\n  codemirror_mode: javascript\n  codemirror_mime_type: application/javascript\n  language_id: 914318960\nJest Snapshot:\n  type: data\n  color: \"#15c213\"\n  tm_scope: source.jest.snap\n  extensions:\n  - \".snap\"\n  ace_mode: javascript\n  codemirror_mode: javascript\n  codemirror_mime_type: application/javascript\n  language_id: 774635084\nJetBrains MPS:\n  type: programming\n  aliases:\n  - mps\n  color: \"#21D789\"\n  extensions:\n  - \".mps\"\n  - \".mpl\"\n  - \".msd\"\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  tm_scope: none\n  language_id: 465165328\nJinja:\n  type: markup\n  color: \"#a52a22\"\n  aliases:\n  - django\n  - html+django\n  - html+jinja\n  - htmldjango\n  extensions:\n  - \".jinja\"\n  - \".j2\"\n  - \".jinja2\"\n  tm_scope: text.html.django\n  ace_mode: django\n  codemirror_mode: django\n  codemirror_mime_type: text/x-django\n  language_id: 147\nJison:\n  type: programming\n  color: \"#56b3cb\"\n  group: Yacc\n  extensions:\n  - \".jison\"\n  tm_scope: source.jison\n  ace_mode: text\n  language_id: 284531423\nJison Lex:\n  type: programming\n  color: \"#56b3cb\"\n  group: Lex\n  extensions:\n  - \".jisonlex\"\n  tm_scope: source.jisonlex\n  ace_mode: text\n  language_id: 406395330\nJolie:\n  type: programming\n  extensions:\n  - \".ol\"\n  - \".iol\"\n  interpreters:\n  - jolie\n  color: \"#843179\"\n  ace_mode: text\n  tm_scope: source.jolie\n  language_id: 998078858\nJsonnet:\n  color: \"#0064bd\"\n  type: programming\n  ace_mode: text\n  extensions:\n  - \".jsonnet\"\n  - \".libsonnet\"\n  tm_scope: source.jsonnet\n  language_id: 664885656\nJulia:\n  type: programming\n  extensions:\n  - \".jl\"\n  interpreters:\n  - julia\n  color: \"#a270ba\"\n  tm_scope: source.julia\n  ace_mode: julia\n  codemirror_mode: julia\n  codemirror_mime_type: text/x-julia\n  language_id: 184\nJulia REPL:\n  type: programming\n  color: \"#a270ba\"\n  tm_scope: source.julia.console\n  group: Julia\n  ace_mode: text\n  language_id: 220689142\nJupyter Notebook:\n  type: markup\n  ace_mode: json\n  codemirror_mode: javascript\n  codemirror_mime_type: application/json\n  tm_scope: source.json\n  color: \"#DA5B0B\"\n  extensions:\n  - \".ipynb\"\n  filenames:\n  - Notebook\n  aliases:\n  - IPython Notebook\n  language_id: 185\nJust:\n  type: programming\n  aliases:\n  - Justfile\n  color: \"#384d54\"\n  tm_scope: source.just\n  filenames:\n  - \".JUSTFILE\"\n  - \".Justfile\"\n  - \".justfile\"\n  - JUSTFILE\n  - Justfile\n  - justfile\n  extensions:\n  - \".just\"\n  ace_mode: text\n  language_id: 128447695\nKRL:\n  type: programming\n  color: \"#28430A\"\n  extensions:\n  - \".krl\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 186\nKaitai Struct:\n  type: programming\n  aliases:\n  - ksy\n  ace_mode: yaml\n  codemirror_mode: yaml\n  codemirror_mime_type: text/x-yaml\n  color: \"#773b37\"\n  extensions:\n  - \".ksy\"\n  tm_scope: source.yaml\n  language_id: 818804755\nKakouneScript:\n  type: programming\n  color: \"#6f8042\"\n  tm_scope: source.kakscript\n  aliases:\n  - kak\n  - kakscript\n  extensions:\n  - \".kak\"\n  filenames:\n  - kakrc\n  ace_mode: text\n  language_id: 603336474\nKerboScript:\n  type: programming\n  ace_mode: text\n  extensions:\n  - \".ks\"\n  color: \"#41adf0\"\n  tm_scope: source.kerboscript\n  language_id: 59716426\nKiCad Layout:\n  type: data\n  color: \"#2f4aab\"\n  aliases:\n  - pcbnew\n  extensions:\n  - \".kicad_pcb\"\n  - \".kicad_mod\"\n  - \".kicad_wks\"\n  filenames:\n  - fp-lib-table\n  tm_scope: source.pcb.sexp\n  ace_mode: lisp\n  codemirror_mode: commonlisp\n  codemirror_mime_type: text/x-common-lisp\n  language_id: 187\nKiCad Legacy Layout:\n  type: data\n  color: \"#2f4aab\"\n  extensions:\n  - \".brd\"\n  tm_scope: source.pcb.board\n  ace_mode: text\n  language_id: 140848857\nKiCad Schematic:\n  type: data\n  color: \"#2f4aab\"\n  aliases:\n  - eeschema schematic\n  extensions:\n  - \".kicad_sch\"\n  - \".sch\"\n  tm_scope: source.pcb.schematic\n  ace_mode: text\n  language_id: 622447435\nKickstart:\n  type: data\n  ace_mode: text\n  extensions:\n  - \".ks\"\n  tm_scope: source.kickstart\n  language_id: 692635484\nKit:\n  type: markup\n  ace_mode: html\n  codemirror_mode: htmlmixed\n  codemirror_mime_type: text/html\n  extensions:\n  - \".kit\"\n  tm_scope: text.html.basic\n  language_id: 188\nKotlin:\n  type: programming\n  color: \"#A97BFF\"\n  extensions:\n  - \".kt\"\n  - \".ktm\"\n  - \".kts\"\n  tm_scope: source.kotlin\n  ace_mode: text\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-kotlin\n  language_id: 189\nKusto:\n  type: data\n  extensions:\n  - \".csl\"\n  - \".kql\"\n  tm_scope: source.kusto\n  ace_mode: text\n  language_id: 225697190\nLFE:\n  type: programming\n  color: \"#4C3023\"\n  extensions:\n  - \".lfe\"\n  tm_scope: source.lisp\n  ace_mode: lisp\n  codemirror_mode: commonlisp\n  codemirror_mime_type: text/x-common-lisp\n  language_id: 190\nLLVM:\n  type: programming\n  extensions:\n  - \".ll\"\n  tm_scope: source.llvm\n  ace_mode: text\n  color: \"#185619\"\n  language_id: 191\nLOLCODE:\n  type: programming\n  extensions:\n  - \".lol\"\n  color: \"#cc9900\"\n  tm_scope: source.lolcode\n  ace_mode: text\n  language_id: 192\nLSL:\n  type: programming\n  tm_scope: source.lsl\n  ace_mode: lsl\n  extensions:\n  - \".lsl\"\n  - \".lslp\"\n  interpreters:\n  - lsl\n  color: \"#3d9970\"\n  language_id: 193\nLTspice Symbol:\n  type: data\n  extensions:\n  - \".asy\"\n  tm_scope: source.ltspice.symbol\n  ace_mode: text\n  codemirror_mode: spreadsheet\n  codemirror_mime_type: text/x-spreadsheet\n  language_id: 1013566805\nLabVIEW:\n  type: programming\n  color: \"#fede06\"\n  extensions:\n  - \".lvproj\"\n  - \".lvclass\"\n  - \".lvlib\"\n  tm_scope: text.xml\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  language_id: 194\nLark:\n  type: data\n  color: \"#2980B9\"\n  extensions:\n  - \".lark\"\n  tm_scope: source.lark\n  ace_mode: text\n  codemirror_mode: ebnf\n  codemirror_mime_type: text/x-ebnf\n  language_id: 758480799\nLasso:\n  type: programming\n  color: \"#999999\"\n  extensions:\n  - \".lasso\"\n  - \".las\"\n  - \".lasso8\"\n  - \".lasso9\"\n  tm_scope: file.lasso\n  aliases:\n  - lassoscript\n  ace_mode: text\n  language_id: 195\nLatte:\n  type: markup\n  color: \"#f2a542\"\n  extensions:\n  - \".latte\"\n  tm_scope: text.html.smarty\n  ace_mode: smarty\n  codemirror_mode: smarty\n  codemirror_mime_type: text/x-smarty\n  language_id: 196\nLean:\n  type: programming\n  extensions:\n  - \".lean\"\n  - \".hlean\"\n  tm_scope: source.lean\n  ace_mode: text\n  language_id: 197\nLean 4:\n  type: programming\n  group: Lean\n  extensions:\n  - \".lean\"\n  tm_scope: source.lean4\n  ace_mode: text\n  language_id: 455147478\nLess:\n  type: markup\n  color: \"#1d365d\"\n  aliases:\n  - less-css\n  extensions:\n  - \".less\"\n  tm_scope: source.css.less\n  ace_mode: less\n  codemirror_mode: css\n  codemirror_mime_type: text/css\n  language_id: 198\nLex:\n  type: programming\n  color: \"#DBCA00\"\n  aliases:\n  - flex\n  extensions:\n  - \".l\"\n  - \".lex\"\n  filenames:\n  - Lexer.x\n  - lexer.x\n  tm_scope: source.lex\n  ace_mode: text\n  language_id: 199\nLigoLANG:\n  type: programming\n  color: \"#0e74ff\"\n  extensions:\n  - \".ligo\"\n  tm_scope: source.ligo\n  ace_mode: pascal\n  codemirror_mode: pascal\n  codemirror_mime_type: text/x-pascal\n  group: LigoLANG\n  language_id: 1040646257\nLilyPond:\n  type: programming\n  color: \"#9ccc7c\"\n  extensions:\n  - \".ly\"\n  - \".ily\"\n  tm_scope: source.lilypond\n  ace_mode: text\n  language_id: 200\nLimbo:\n  type: programming\n  extensions:\n  - \".b\"\n  - \".m\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 201\nLinker Script:\n  type: data\n  extensions:\n  - \".ld\"\n  - \".lds\"\n  - \".x\"\n  filenames:\n  - ld.script\n  tm_scope: none\n  ace_mode: text\n  language_id: 202\nLinux Kernel Module:\n  type: data\n  extensions:\n  - \".mod\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 203\nLiquid:\n  type: markup\n  color: \"#67b8de\"\n  extensions:\n  - \".liquid\"\n  tm_scope: text.html.liquid\n  ace_mode: liquid\n  language_id: 204\nLiterate Agda:\n  type: programming\n  color: \"#315665\"\n  group: Agda\n  extensions:\n  - \".lagda\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 205\nLiterate CoffeeScript:\n  type: programming\n  color: \"#244776\"\n  tm_scope: source.litcoffee\n  group: CoffeeScript\n  ace_mode: text\n  wrap: true\n  aliases:\n  - litcoffee\n  extensions:\n  - \".litcoffee\"\n  - \".coffee.md\"\n  language_id: 206\nLiterate Haskell:\n  type: programming\n  color: \"#5e5086\"\n  group: Haskell\n  aliases:\n  - lhaskell\n  - lhs\n  extensions:\n  - \".lhs\"\n  tm_scope: text.tex.latex.haskell\n  ace_mode: text\n  codemirror_mode: haskell-literate\n  codemirror_mime_type: text/x-literate-haskell\n  language_id: 207\nLiveCode Script:\n  type: programming\n  color: \"#0c5ba5\"\n  extensions:\n  - \".livecodescript\"\n  tm_scope: source.livecodescript\n  ace_mode: text\n  language_id: 891017\nLiveScript:\n  type: programming\n  color: \"#499886\"\n  aliases:\n  - live-script\n  - ls\n  extensions:\n  - \".ls\"\n  - \"._ls\"\n  filenames:\n  - Slakefile\n  tm_scope: source.livescript\n  ace_mode: livescript\n  codemirror_mode: livescript\n  codemirror_mime_type: text/x-livescript\n  language_id: 208\nLogos:\n  type: programming\n  extensions:\n  - \".xm\"\n  - \".x\"\n  - \".xi\"\n  ace_mode: text\n  tm_scope: source.logos\n  language_id: 209\nLogtalk:\n  type: programming\n  color: \"#295b9a\"\n  extensions:\n  - \".lgt\"\n  - \".logtalk\"\n  tm_scope: source.logtalk\n  ace_mode: text\n  language_id: 210\nLookML:\n  type: programming\n  ace_mode: yaml\n  codemirror_mode: yaml\n  codemirror_mime_type: text/x-yaml\n  color: \"#652B81\"\n  extensions:\n  - \".lkml\"\n  - \".lookml\"\n  tm_scope: source.yaml\n  language_id: 211\nLoomScript:\n  type: programming\n  extensions:\n  - \".ls\"\n  tm_scope: source.loomscript\n  ace_mode: text\n  language_id: 212\nLua:\n  type: programming\n  tm_scope: source.lua\n  ace_mode: lua\n  codemirror_mode: lua\n  codemirror_mime_type: text/x-lua\n  color: \"#000080\"\n  extensions:\n  - \".lua\"\n  - \".fcgi\"\n  - \".nse\"\n  - \".p8\"\n  - \".pd_lua\"\n  - \".rbxs\"\n  - \".rockspec\"\n  - \".wlua\"\n  filenames:\n  - \".luacheckrc\"\n  interpreters:\n  - lua\n  language_id: 213\nLuau:\n  type: programming\n  tm_scope: source.luau\n  ace_mode: lua\n  codemirror_mode: lua\n  codemirror_mime_type: text/x-lua\n  color: \"#00A2FF\"\n  extensions:\n  - \".luau\"\n  interpreters:\n  - luau\n  language_id: 365050359\nM:\n  type: programming\n  aliases:\n  - mumps\n  extensions:\n  - \".mumps\"\n  - \".m\"\n  ace_mode: text\n  codemirror_mode: mumps\n  codemirror_mime_type: text/x-mumps\n  language_id: 214\n  tm_scope: none\nM4:\n  type: programming\n  extensions:\n  - \".m4\"\n  - \".mc\"\n  tm_scope: source.m4\n  ace_mode: text\n  language_id: 215\nM4Sugar:\n  type: programming\n  group: M4\n  aliases:\n  - autoconf\n  extensions:\n  - \".m4\"\n  filenames:\n  - configure.ac\n  tm_scope: source.m4\n  ace_mode: text\n  language_id: 216\nMATLAB:\n  type: programming\n  color: \"#e16737\"\n  aliases:\n  - octave\n  extensions:\n  - \".matlab\"\n  - \".m\"\n  tm_scope: source.matlab\n  ace_mode: matlab\n  codemirror_mode: octave\n  codemirror_mime_type: text/x-octave\n  language_id: 225\nMAXScript:\n  type: programming\n  color: \"#00a6a6\"\n  extensions:\n  - \".ms\"\n  - \".mcr\"\n  tm_scope: source.maxscript\n  ace_mode: text\n  language_id: 217\nMDX:\n  type: markup\n  color: \"#fcb32c\"\n  ace_mode: markdown\n  codemirror_mode: gfm\n  codemirror_mime_type: text/x-gfm\n  wrap: true\n  extensions:\n  - \".mdx\"\n  tm_scope: source.mdx\n  language_id: 512838272\nMLIR:\n  type: programming\n  color: \"#5EC8DB\"\n  extensions:\n  - \".mlir\"\n  tm_scope: source.mlir\n  ace_mode: text\n  language_id: 448253929\nMQL4:\n  type: programming\n  color: \"#62A8D6\"\n  extensions:\n  - \".mq4\"\n  - \".mqh\"\n  tm_scope: source.mql5\n  ace_mode: c_cpp\n  language_id: 426\nMQL5:\n  type: programming\n  color: \"#4A76B8\"\n  extensions:\n  - \".mq5\"\n  - \".mqh\"\n  tm_scope: source.mql5\n  ace_mode: c_cpp\n  language_id: 427\nMTML:\n  type: markup\n  color: \"#b7e1f4\"\n  extensions:\n  - \".mtml\"\n  tm_scope: text.html.basic\n  ace_mode: html\n  codemirror_mode: htmlmixed\n  codemirror_mime_type: text/html\n  language_id: 218\nMUF:\n  type: programming\n  group: Forth\n  extensions:\n  - \".muf\"\n  - \".m\"\n  tm_scope: none\n  ace_mode: forth\n  codemirror_mode: forth\n  codemirror_mime_type: text/x-forth\n  language_id: 219\nMacaulay2:\n  type: programming\n  extensions:\n  - \".m2\"\n  aliases:\n  - m2\n  interpreters:\n  - M2\n  ace_mode: text\n  tm_scope: source.m2\n  color: \"#d8ffff\"\n  language_id: 34167825\nMakefile:\n  type: programming\n  color: \"#427819\"\n  aliases:\n  - bsdmake\n  - make\n  - mf\n  extensions:\n  - \".mak\"\n  - \".d\"\n  - \".make\"\n  - \".makefile\"\n  - \".mk\"\n  - \".mkfile\"\n  filenames:\n  - BSDmakefile\n  - GNUmakefile\n  - Kbuild\n  - Makefile\n  - Makefile.am\n  - Makefile.boot\n  - Makefile.frag\n  - Makefile.in\n  - Makefile.inc\n  - Makefile.wat\n  - makefile\n  - makefile.sco\n  - mkfile\n  interpreters:\n  - make\n  tm_scope: source.makefile\n  ace_mode: makefile\n  codemirror_mode: cmake\n  codemirror_mime_type: text/x-cmake\n  language_id: 220\nMako:\n  type: programming\n  color: \"#7e858d\"\n  extensions:\n  - \".mako\"\n  - \".mao\"\n  tm_scope: text.html.mako\n  ace_mode: text\n  language_id: 221\nMarkdown:\n  type: prose\n  color: \"#083fa1\"\n  aliases:\n  - md\n  - pandoc\n  ace_mode: markdown\n  codemirror_mode: gfm\n  codemirror_mime_type: text/x-gfm\n  wrap: true\n  extensions:\n  - \".md\"\n  - \".livemd\"\n  - \".markdown\"\n  - \".mdown\"\n  - \".mdwn\"\n  - \".mkd\"\n  - \".mkdn\"\n  - \".mkdown\"\n  - \".ronn\"\n  - \".scd\"\n  - \".workbook\"\n  filenames:\n  - contents.lr\n  tm_scope: text.md\n  language_id: 222\nMarko:\n  type: markup\n  color: \"#42bff2\"\n  tm_scope: text.marko\n  extensions:\n  - \".marko\"\n  aliases:\n  - markojs\n  ace_mode: text\n  codemirror_mode: htmlmixed\n  codemirror_mime_type: text/html\n  language_id: 932782397\nMask:\n  type: markup\n  color: \"#f97732\"\n  ace_mode: mask\n  extensions:\n  - \".mask\"\n  tm_scope: source.mask\n  language_id: 223\nMathematica:\n  type: programming\n  color: \"#dd1100\"\n  extensions:\n  - \".mathematica\"\n  - \".cdf\"\n  - \".m\"\n  - \".ma\"\n  - \".mt\"\n  - \".nb\"\n  - \".nbp\"\n  - \".wl\"\n  - \".wlt\"\n  aliases:\n  - mma\n  - wolfram\n  - wolfram language\n  - wolfram lang\n  - wl\n  tm_scope: source.mathematica\n  ace_mode: text\n  codemirror_mode: mathematica\n  codemirror_mime_type: text/x-mathematica\n  language_id: 224\nMaven POM:\n  type: data\n  group: XML\n  tm_scope: text.xml.pom\n  filenames:\n  - pom.xml\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  language_id: 226\nMax:\n  type: programming\n  color: \"#c4a79c\"\n  aliases:\n  - max/msp\n  - maxmsp\n  extensions:\n  - \".maxpat\"\n  - \".maxhelp\"\n  - \".maxproj\"\n  - \".mxt\"\n  - \".pat\"\n  tm_scope: source.json\n  ace_mode: json\n  codemirror_mode: javascript\n  codemirror_mime_type: application/json\n  language_id: 227\nMercury:\n  type: programming\n  color: \"#ff2b2b\"\n  ace_mode: prolog\n  interpreters:\n  - mmi\n  extensions:\n  - \".m\"\n  - \".moo\"\n  tm_scope: source.mercury\n  language_id: 229\nMermaid:\n  type: markup\n  color: \"#ff3670\"\n  aliases:\n  - mermaid example\n  extensions:\n  - \".mmd\"\n  - \".mermaid\"\n  tm_scope: source.mermaid\n  ace_mode: text\n  language_id: 385992043\nMeson:\n  type: programming\n  color: \"#007800\"\n  filenames:\n  - meson.build\n  - meson_options.txt\n  tm_scope: source.meson\n  ace_mode: text\n  language_id: 799141244\nMetal:\n  type: programming\n  color: \"#8f14e9\"\n  extensions:\n  - \".metal\"\n  tm_scope: source.c++\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-c++src\n  language_id: 230\nMicrosoft Developer Studio Project:\n  type: data\n  extensions:\n  - \".dsp\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 800983837\nMicrosoft Visual Studio Solution:\n  type: data\n  extensions:\n  - \".sln\"\n  tm_scope: source.solution\n  ace_mode: text\n  language_id: 849523096\nMiniD:\n  type: programming\n  extensions:\n  - \".minid\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 231\nMiniYAML:\n  type: data\n  color: \"#ff1111\"\n  tm_scope: source.miniyaml\n  extensions:\n  - \".yaml\"\n  - \".yml\"\n  ace_mode: yaml\n  codemirror_mode: yaml\n  codemirror_mime_type: text/x-yaml\n  language_id: 4896465\nMint:\n  type: programming\n  extensions:\n  - \".mint\"\n  ace_mode: text\n  color: \"#02b046\"\n  tm_scope: source.mint\n  language_id: 968740319\nMirah:\n  type: programming\n  color: \"#c7a938\"\n  extensions:\n  - \".druby\"\n  - \".duby\"\n  - \".mirah\"\n  tm_scope: source.ruby\n  ace_mode: ruby\n  codemirror_mode: ruby\n  codemirror_mime_type: text/x-ruby\n  language_id: 232\nModelica:\n  type: programming\n  color: \"#de1d31\"\n  extensions:\n  - \".mo\"\n  tm_scope: source.modelica\n  ace_mode: text\n  codemirror_mode: modelica\n  codemirror_mime_type: text/x-modelica\n  language_id: 233\nModula-2:\n  type: programming\n  color: \"#10253f\"\n  extensions:\n  - \".mod\"\n  tm_scope: source.modula2\n  ace_mode: text\n  language_id: 234\nModula-3:\n  type: programming\n  extensions:\n  - \".i3\"\n  - \".ig\"\n  - \".m3\"\n  - \".mg\"\n  color: \"#223388\"\n  ace_mode: text\n  tm_scope: source.modula-3\n  language_id: 564743864\nModule Management System:\n  type: programming\n  extensions:\n  - \".mms\"\n  - \".mmk\"\n  filenames:\n  - descrip.mmk\n  - descrip.mms\n  tm_scope: none\n  ace_mode: text\n  language_id: 235\nMojo:\n  type: programming\n  color: \"#ff4c1f\"\n  extensions:\n  - \".mojo\"\n  ace_mode: python\n  codemirror_mode: python\n  codemirror_mime_type: text/x-python\n  tm_scope: source.mojo\n  language_id: 1045019587\nMonkey:\n  type: programming\n  extensions:\n  - \".monkey\"\n  - \".monkey2\"\n  ace_mode: text\n  tm_scope: source.monkey\n  language_id: 236\nMonkey C:\n  type: programming\n  color: \"#8D6747\"\n  extensions:\n  - \".mc\"\n  tm_scope: source.mc\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  language_id: 231751931\nMoocode:\n  type: programming\n  extensions:\n  - \".moo\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 237\nMoonScript:\n  type: programming\n  color: \"#ff4585\"\n  extensions:\n  - \".moon\"\n  interpreters:\n  - moon\n  tm_scope: source.moonscript\n  ace_mode: text\n  language_id: 238\nMotoko:\n  type: programming\n  color: \"#fbb03b\"\n  extensions:\n  - \".mo\"\n  tm_scope: source.mo\n  ace_mode: text\n  language_id: 202937027\nMotorola 68K Assembly:\n  type: programming\n  color: \"#005daa\"\n  group: Assembly\n  aliases:\n  - m68k\n  extensions:\n  - \".asm\"\n  - \".i\"\n  - \".inc\"\n  - \".s\"\n  - \".x68\"\n  tm_scope: source.m68k\n  ace_mode: assembly_x86\n  language_id: 477582706\nMove:\n  type: programming\n  color: \"#4a137a\"\n  extensions:\n  - \".move\"\n  tm_scope: source.move\n  ace_mode: text\n  language_id: 638334599\nMuse:\n  type: prose\n  extensions:\n  - \".muse\"\n  tm_scope: text.muse\n  ace_mode: text\n  wrap: true\n  language_id: 474864066\n  aliases:\n  - amusewiki\n  - emacs muse\nMustache:\n  type: markup\n  color: \"#724b3b\"\n  extensions:\n  - \".mustache\"\n  tm_scope: text.html.smarty\n  ace_mode: smarty\n  codemirror_mode: smarty\n  codemirror_mime_type: text/x-smarty\n  language_id: 638334590\nMyghty:\n  type: programming\n  extensions:\n  - \".myt\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 239\nNASL:\n  type: programming\n  extensions:\n  - \".nasl\"\n  - \".inc\"\n  tm_scope: source.nasl\n  ace_mode: text\n  language_id: 171666519\nNCL:\n  type: programming\n  color: \"#28431f\"\n  extensions:\n  - \".ncl\"\n  tm_scope: source.ncl\n  ace_mode: text\n  language_id: 240\nNEON:\n  type: data\n  extensions:\n  - \".neon\"\n  tm_scope: source.neon\n  ace_mode: text\n  aliases:\n  - nette object notation\n  - ne-on\n  language_id: 481192983\nNL:\n  type: data\n  extensions:\n  - \".nl\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 241\nNMODL:\n  type: programming\n  color: \"#00356B\"\n  extensions:\n  - \".mod\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 136456478\nNPM Config:\n  type: data\n  color: \"#cb3837\"\n  group: INI\n  aliases:\n  - npmrc\n  filenames:\n  - \".npmrc\"\n  tm_scope: source.ini.npmrc\n  ace_mode: text\n  language_id: 685022663\nNSIS:\n  type: programming\n  extensions:\n  - \".nsi\"\n  - \".nsh\"\n  tm_scope: source.nsis\n  ace_mode: text\n  codemirror_mode: nsis\n  codemirror_mime_type: text/x-nsis\n  language_id: 242\nNWScript:\n  type: programming\n  color: \"#111522\"\n  extensions:\n  - \".nss\"\n  tm_scope: source.c.nwscript\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  language_id: 731233819\nNasal:\n  type: programming\n  color: \"#1d2c4e\"\n  extensions:\n  - \".nas\"\n  tm_scope: source.nasal\n  ace_mode: nasal\n  language_id: 178322513\nNearley:\n  type: programming\n  ace_mode: text\n  color: \"#990000\"\n  extensions:\n  - \".ne\"\n  - \".nearley\"\n  tm_scope: source.ne\n  language_id: 521429430\nNemerle:\n  type: programming\n  color: \"#3d3c6e\"\n  extensions:\n  - \".n\"\n  tm_scope: source.nemerle\n  ace_mode: text\n  language_id: 243\nNetLinx:\n  type: programming\n  color: \"#0aa0ff\"\n  extensions:\n  - \".axs\"\n  - \".axi\"\n  tm_scope: source.netlinx\n  ace_mode: text\n  language_id: 244\nNetLinx+ERB:\n  type: programming\n  color: \"#747faa\"\n  extensions:\n  - \".axs.erb\"\n  - \".axi.erb\"\n  tm_scope: source.netlinx.erb\n  ace_mode: text\n  language_id: 245\nNetLogo:\n  type: programming\n  color: \"#ff6375\"\n  extensions:\n  - \".nlogo\"\n  tm_scope: source.lisp\n  ace_mode: lisp\n  codemirror_mode: commonlisp\n  codemirror_mime_type: text/x-common-lisp\n  language_id: 246\nNewLisp:\n  type: programming\n  color: \"#87AED7\"\n  extensions:\n  - \".nl\"\n  - \".lisp\"\n  - \".lsp\"\n  interpreters:\n  - newlisp\n  tm_scope: source.lisp\n  ace_mode: lisp\n  codemirror_mode: commonlisp\n  codemirror_mime_type: text/x-common-lisp\n  language_id: 247\nNextflow:\n  type: programming\n  ace_mode: groovy\n  tm_scope: source.nextflow\n  color: \"#3ac486\"\n  extensions:\n  - \".nf\"\n  filenames:\n  - nextflow.config\n  interpreters:\n  - nextflow\n  language_id: 506780613\nNginx:\n  type: data\n  color: \"#009639\"\n  extensions:\n  - \".nginx\"\n  - \".nginxconf\"\n  - \".vhost\"\n  filenames:\n  - nginx.conf\n  tm_scope: source.nginx\n  aliases:\n  - nginx configuration file\n  ace_mode: text\n  codemirror_mode: nginx\n  codemirror_mime_type: text/x-nginx-conf\n  language_id: 248\nNim:\n  type: programming\n  color: \"#ffc200\"\n  extensions:\n  - \".nim\"\n  - \".nim.cfg\"\n  - \".nimble\"\n  - \".nimrod\"\n  - \".nims\"\n  filenames:\n  - nim.cfg\n  ace_mode: text\n  tm_scope: source.nim\n  language_id: 249\nNinja:\n  type: data\n  tm_scope: source.ninja\n  extensions:\n  - \".ninja\"\n  ace_mode: text\n  language_id: 250\nNit:\n  type: programming\n  color: \"#009917\"\n  extensions:\n  - \".nit\"\n  tm_scope: source.nit\n  ace_mode: text\n  language_id: 251\nNix:\n  type: programming\n  color: \"#7e7eff\"\n  extensions:\n  - \".nix\"\n  aliases:\n  - nixos\n  tm_scope: source.nix\n  ace_mode: nix\n  language_id: 252\nNoir:\n  type: programming\n  aliases:\n  - nargo\n  ace_mode: rust\n  codemirror_mode: rust\n  codemirror_mime_type: text/x-rustsrc\n  extensions:\n  - \".nr\"\n  color: \"#2f1f49\"\n  tm_scope: source.nr\n  language_id: 813068465\nNu:\n  type: programming\n  color: \"#c9df40\"\n  aliases:\n  - nush\n  extensions:\n  - \".nu\"\n  filenames:\n  - Nukefile\n  tm_scope: source.nu\n  ace_mode: scheme\n  codemirror_mode: scheme\n  codemirror_mime_type: text/x-scheme\n  interpreters:\n  - nush\n  language_id: 253\nNumPy:\n  type: programming\n  color: \"#9C8AF9\"\n  group: Python\n  extensions:\n  - \".numpy\"\n  - \".numpyw\"\n  - \".numsc\"\n  tm_scope: none\n  ace_mode: text\n  codemirror_mode: python\n  codemirror_mime_type: text/x-python\n  language_id: 254\nNunjucks:\n  type: markup\n  color: \"#3d8137\"\n  extensions:\n  - \".njk\"\n  aliases:\n  - njk\n  tm_scope: text.html.nunjucks\n  ace_mode: nunjucks\n  language_id: 461856962\nNushell:\n  type: programming\n  color: \"#4E9906\"\n  extensions:\n  - \".nu\"\n  interpreters:\n  - nu\n  aliases:\n  - nu-script\n  - nushell-script\n  tm_scope: source.nushell\n  ace_mode: sh\n  codemirror_mode: shell\n  codemirror_mime_type: text/x-sh\n  language_id: 446573572\nOASv2-json:\n  type: data\n  color: \"#85ea2d\"\n  extensions:\n  - \".json\"\n  group: OpenAPI Specification v2\n  tm_scope: source.json\n  ace_mode: json\n  codemirror_mode: javascript\n  codemirror_mime_type: application/json\n  language_id: 834374816\nOASv2-yaml:\n  type: data\n  color: \"#85ea2d\"\n  extensions:\n  - \".yaml\"\n  - \".yml\"\n  group: OpenAPI Specification v2\n  tm_scope: source.yaml\n  ace_mode: yaml\n  codemirror_mode: yaml\n  codemirror_mime_type: text/x-yaml\n  language_id: 105187618\nOASv3-json:\n  type: data\n  color: \"#85ea2d\"\n  extensions:\n  - \".json\"\n  group: OpenAPI Specification v3\n  tm_scope: source.json\n  ace_mode: json\n  codemirror_mode: javascript\n  codemirror_mime_type: application/json\n  language_id: 980062566\nOASv3-yaml:\n  type: data\n  color: \"#85ea2d\"\n  extensions:\n  - \".yaml\"\n  - \".yml\"\n  group: OpenAPI Specification v3\n  tm_scope: source.yaml\n  ace_mode: yaml\n  codemirror_mode: yaml\n  codemirror_mime_type: text/x-yaml\n  language_id: 51239111\nOCaml:\n  type: programming\n  ace_mode: ocaml\n  codemirror_mode: mllike\n  codemirror_mime_type: text/x-ocaml\n  color: \"#ef7a08\"\n  extensions:\n  - \".ml\"\n  - \".eliom\"\n  - \".eliomi\"\n  - \".ml4\"\n  - \".mli\"\n  - \".mll\"\n  - \".mly\"\n  interpreters:\n  - ocaml\n  - ocamlrun\n  - ocamlscript\n  tm_scope: source.ocaml\n  language_id: 255\nOberon:\n  type: programming\n  extensions:\n  - \".ob2\"\n  tm_scope: source.modula2\n  ace_mode: text\n  language_id: 677210597\nObjDump:\n  type: data\n  extensions:\n  - \".objdump\"\n  tm_scope: objdump.x86asm\n  ace_mode: assembly_x86\n  language_id: 256\nObject Data Instance Notation:\n  type: data\n  extensions:\n  - \".odin\"\n  tm_scope: source.odin-ehr\n  ace_mode: text\n  language_id: 985227236\nObjectScript:\n  type: programming\n  extensions:\n  - \".cls\"\n  language_id: 202735509\n  tm_scope: source.objectscript\n  color: \"#424893\"\n  ace_mode: text\nObjective-C:\n  type: programming\n  tm_scope: source.objc\n  color: \"#438eff\"\n  aliases:\n  - obj-c\n  - objc\n  - objectivec\n  extensions:\n  - \".m\"\n  - \".h\"\n  ace_mode: objectivec\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-objectivec\n  language_id: 257\nObjective-C++:\n  type: programming\n  tm_scope: source.objc++\n  color: \"#6866fb\"\n  aliases:\n  - obj-c++\n  - objc++\n  - objectivec++\n  extensions:\n  - \".mm\"\n  ace_mode: objectivec\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-objectivec\n  language_id: 258\nObjective-J:\n  type: programming\n  color: \"#ff0c5a\"\n  aliases:\n  - obj-j\n  - objectivej\n  - objj\n  extensions:\n  - \".j\"\n  - \".sj\"\n  tm_scope: source.js.objj\n  ace_mode: text\n  language_id: 259\nOdin:\n  type: programming\n  color: \"#60AFFE\"\n  aliases:\n  - odinlang\n  - odin-lang\n  extensions:\n  - \".odin\"\n  tm_scope: source.odin\n  ace_mode: text\n  language_id: 889244082\nOmgrofl:\n  type: programming\n  extensions:\n  - \".omgrofl\"\n  color: \"#cabbff\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 260\nOpa:\n  type: programming\n  extensions:\n  - \".opa\"\n  tm_scope: source.opa\n  ace_mode: text\n  language_id: 261\nOpal:\n  type: programming\n  color: \"#f7ede0\"\n  extensions:\n  - \".opal\"\n  tm_scope: source.opal\n  ace_mode: text\n  language_id: 262\nOpen Policy Agent:\n  type: programming\n  color: \"#7d9199\"\n  ace_mode: text\n  extensions:\n  - \".rego\"\n  language_id: 840483232\n  tm_scope: source.rego\nOpenAPI Specification v2:\n  aliases:\n  - oasv2\n  type: data\n  color: \"#85ea2d\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 848295328\nOpenAPI Specification v3:\n  aliases:\n  - oasv3\n  type: data\n  color: \"#85ea2d\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 557959099\nOpenCL:\n  type: programming\n  color: \"#ed2e2d\"\n  group: C\n  extensions:\n  - \".cl\"\n  - \".opencl\"\n  tm_scope: source.c\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  language_id: 263\nOpenEdge ABL:\n  type: programming\n  color: \"#5ce600\"\n  aliases:\n  - progress\n  - openedge\n  - abl\n  extensions:\n  - \".p\"\n  - \".cls\"\n  - \".w\"\n  tm_scope: source.abl\n  ace_mode: text\n  language_id: 264\nOpenQASM:\n  type: programming\n  extensions:\n  - \".qasm\"\n  color: \"#AA70FF\"\n  tm_scope: source.qasm\n  ace_mode: text\n  language_id: 153739399\nOpenRC runscript:\n  type: programming\n  group: Shell\n  aliases:\n  - openrc\n  interpreters:\n  - openrc-run\n  tm_scope: source.shell\n  ace_mode: sh\n  codemirror_mode: shell\n  codemirror_mime_type: text/x-sh\n  language_id: 265\nOpenSCAD:\n  type: programming\n  color: \"#e5cd45\"\n  extensions:\n  - \".scad\"\n  tm_scope: source.scad\n  ace_mode: scad\n  language_id: 266\nOpenStep Property List:\n  type: data\n  extensions:\n  - \".plist\"\n  - \".glyphs\"\n  tm_scope: source.plist\n  ace_mode: text\n  language_id: 598917541\nOpenType Feature File:\n  type: data\n  aliases:\n  - AFDKO\n  extensions:\n  - \".fea\"\n  tm_scope: source.opentype\n  ace_mode: text\n  language_id: 374317347\nOption List:\n  type: data\n  color: \"#476732\"\n  aliases:\n  - opts\n  - ackrc\n  filenames:\n  - \".ackrc\"\n  - \".rspec\"\n  - \".yardopts\"\n  - ackrc\n  - mocha.opts\n  tm_scope: source.opts\n  ace_mode: sh\n  codemirror_mode: shell\n  codemirror_mime_type: text/x-sh\n  language_id: 723589315\nOrg:\n  type: prose\n  color: \"#77aa99\"\n  wrap: true\n  extensions:\n  - \".org\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 267\nOx:\n  type: programming\n  extensions:\n  - \".ox\"\n  - \".oxh\"\n  - \".oxo\"\n  tm_scope: source.ox\n  ace_mode: text\n  language_id: 268\nOxygene:\n  type: programming\n  color: \"#cdd0e3\"\n  extensions:\n  - \".oxygene\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 269\nOz:\n  type: programming\n  color: \"#fab738\"\n  extensions:\n  - \".oz\"\n  tm_scope: source.oz\n  ace_mode: text\n  codemirror_mode: oz\n  codemirror_mime_type: text/x-oz\n  language_id: 270\nP4:\n  type: programming\n  color: \"#7055b5\"\n  extensions:\n  - \".p4\"\n  tm_scope: source.p4\n  ace_mode: text\n  language_id: 348895984\nPDDL:\n  type: programming\n  color: \"#0d00ff\"\n  extensions:\n  - \".pddl\"\n  tm_scope: source.pddl\n  ace_mode: text\n  language_id: 736235603\nPEG.js:\n  type: programming\n  color: \"#234d6b\"\n  extensions:\n  - \".pegjs\"\n  - \".peggy\"\n  tm_scope: source.peggy\n  ace_mode: javascript\n  codemirror_mode: javascript\n  codemirror_mime_type: text/javascript\n  language_id: 81442128\nPHP:\n  type: programming\n  tm_scope: text.html.php\n  ace_mode: php\n  codemirror_mode: php\n  codemirror_mime_type: application/x-httpd-php\n  color: \"#4F5D95\"\n  extensions:\n  - \".php\"\n  - \".aw\"\n  - \".ctp\"\n  - \".fcgi\"\n  - \".inc\"\n  - \".php3\"\n  - \".php4\"\n  - \".php5\"\n  - \".phps\"\n  - \".phpt\"\n  filenames:\n  - \".php\"\n  - \".php_cs\"\n  - \".php_cs.dist\"\n  - Phakefile\n  interpreters:\n  - php\n  aliases:\n  - inc\n  language_id: 272\nPLSQL:\n  type: programming\n  ace_mode: sql\n  codemirror_mode: sql\n  codemirror_mime_type: text/x-plsql\n  tm_scope: none\n  color: \"#dad8d8\"\n  extensions:\n  - \".pls\"\n  - \".bdy\"\n  - \".ddl\"\n  - \".fnc\"\n  - \".pck\"\n  - \".pkb\"\n  - \".pks\"\n  - \".plb\"\n  - \".plsql\"\n  - \".prc\"\n  - \".spc\"\n  - \".sql\"\n  - \".tpb\"\n  - \".tps\"\n  - \".trg\"\n  - \".vw\"\n  language_id: 273\nPLpgSQL:\n  type: programming\n  color: \"#336790\"\n  ace_mode: pgsql\n  codemirror_mode: sql\n  codemirror_mime_type: text/x-sql\n  tm_scope: source.sql\n  extensions:\n  - \".pgsql\"\n  - \".sql\"\n  language_id: 274\nPOV-Ray SDL:\n  type: programming\n  color: \"#6bac65\"\n  aliases:\n  - pov-ray\n  - povray\n  extensions:\n  - \".pov\"\n  - \".inc\"\n  tm_scope: source.pov-ray sdl\n  ace_mode: text\n  language_id: 275\nPact:\n  type: programming\n  color: \"#F7A8B8\"\n  ace_mode: text\n  tm_scope: source.pact\n  extensions:\n  - \".pact\"\n  language_id: 756774415\nPan:\n  type: programming\n  color: \"#cc0000\"\n  extensions:\n  - \".pan\"\n  tm_scope: source.pan\n  ace_mode: text\n  language_id: 276\nPapyrus:\n  type: programming\n  color: \"#6600cc\"\n  extensions:\n  - \".psc\"\n  tm_scope: source.papyrus.skyrim\n  ace_mode: text\n  language_id: 277\nParrot:\n  type: programming\n  color: \"#f3ca0a\"\n  extensions:\n  - \".parrot\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 278\nParrot Assembly:\n  group: Parrot\n  type: programming\n  aliases:\n  - pasm\n  extensions:\n  - \".pasm\"\n  interpreters:\n  - parrot\n  tm_scope: none\n  ace_mode: text\n  language_id: 279\nParrot Internal Representation:\n  group: Parrot\n  tm_scope: source.parrot.pir\n  type: programming\n  aliases:\n  - pir\n  extensions:\n  - \".pir\"\n  interpreters:\n  - parrot\n  ace_mode: text\n  language_id: 280\nPascal:\n  type: programming\n  color: \"#E3F171\"\n  aliases:\n  - delphi\n  - objectpascal\n  extensions:\n  - \".pas\"\n  - \".dfm\"\n  - \".dpr\"\n  - \".inc\"\n  - \".lpr\"\n  - \".pascal\"\n  - \".pp\"\n  interpreters:\n  - instantfpc\n  tm_scope: source.pascal\n  ace_mode: pascal\n  codemirror_mode: pascal\n  codemirror_mime_type: text/x-pascal\n  language_id: 281\nPawn:\n  type: programming\n  color: \"#dbb284\"\n  extensions:\n  - \".pwn\"\n  - \".inc\"\n  - \".sma\"\n  tm_scope: source.pawn\n  ace_mode: text\n  language_id: 271\nPep8:\n  type: programming\n  color: \"#C76F5B\"\n  extensions:\n  - \".pep\"\n  ace_mode: text\n  tm_scope: source.pep8\n  language_id: 840372442\nPerl:\n  type: programming\n  tm_scope: source.perl\n  ace_mode: perl\n  codemirror_mode: perl\n  codemirror_mime_type: text/x-perl\n  color: \"#0298c3\"\n  extensions:\n  - \".pl\"\n  - \".al\"\n  - \".cgi\"\n  - \".fcgi\"\n  - \".perl\"\n  - \".ph\"\n  - \".plx\"\n  - \".pm\"\n  - \".psgi\"\n  - \".t\"\n  filenames:\n  - \".latexmkrc\"\n  - Makefile.PL\n  - Rexfile\n  - ack\n  - cpanfile\n  - latexmkrc\n  interpreters:\n  - cperl\n  - perl\n  aliases:\n  - cperl\n  language_id: 282\nPic:\n  type: markup\n  group: Roff\n  tm_scope: source.pic\n  extensions:\n  - \".pic\"\n  - \".chem\"\n  aliases:\n  - pikchr\n  ace_mode: text\n  codemirror_mode: troff\n  codemirror_mime_type: text/troff\n  language_id: 425\nPickle:\n  type: data\n  extensions:\n  - \".pkl\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 284\nPicoLisp:\n  type: programming\n  color: \"#6067af\"\n  extensions:\n  - \".l\"\n  interpreters:\n  - picolisp\n  - pil\n  tm_scope: source.lisp\n  ace_mode: lisp\n  language_id: 285\nPigLatin:\n  type: programming\n  color: \"#fcd7de\"\n  extensions:\n  - \".pig\"\n  tm_scope: source.pig_latin\n  ace_mode: text\n  language_id: 286\nPike:\n  type: programming\n  color: \"#005390\"\n  extensions:\n  - \".pike\"\n  - \".pmod\"\n  interpreters:\n  - pike\n  tm_scope: source.pike\n  ace_mode: text\n  language_id: 287\nPip Requirements:\n  type: data\n  color: \"#FFD343\"\n  filenames:\n  - requirements-dev.txt\n  - requirements.txt\n  ace_mode: text\n  tm_scope: source.pip-requirements\n  language_id: 684385621\nPkl:\n  type: programming\n  color: \"#6b9543\"\n  extensions:\n  - \".pkl\"\n  interpreters:\n  - pkl\n  tm_scope: source.pkl\n  ace_mode: text\n  language_id: 288822799\nPlantUML:\n  type: data\n  color: \"#fbbd16\"\n  extensions:\n  - \".puml\"\n  - \".iuml\"\n  - \".plantuml\"\n  tm_scope: source.wsd\n  ace_mode: text\n  language_id: 833504686\nPod:\n  type: prose\n  ace_mode: perl\n  codemirror_mode: perl\n  codemirror_mime_type: text/x-perl\n  wrap: true\n  extensions:\n  - \".pod\"\n  interpreters:\n  - perl\n  tm_scope: none\n  language_id: 288\nPod 6:\n  type: prose\n  ace_mode: perl\n  tm_scope: source.raku\n  wrap: true\n  extensions:\n  - \".pod\"\n  - \".pod6\"\n  interpreters:\n  - perl6\n  language_id: 155357471\nPogoScript:\n  type: programming\n  color: \"#d80074\"\n  extensions:\n  - \".pogo\"\n  tm_scope: source.pogoscript\n  ace_mode: text\n  language_id: 289\nPolar:\n  type: programming\n  color: \"#ae81ff\"\n  extensions:\n  - \".polar\"\n  tm_scope: source.polar\n  ace_mode: text\n  language_id: 839112914\nPony:\n  type: programming\n  extensions:\n  - \".pony\"\n  tm_scope: source.pony\n  ace_mode: text\n  language_id: 290\nPortugol:\n  type: programming\n  color: \"#f8bd00\"\n  extensions:\n  - \".por\"\n  tm_scope: source.portugol\n  ace_mode: text\n  language_id: 832391833\nPostCSS:\n  type: markup\n  color: \"#dc3a0c\"\n  tm_scope: source.postcss\n  group: CSS\n  extensions:\n  - \".pcss\"\n  - \".postcss\"\n  ace_mode: text\n  language_id: 262764437\nPostScript:\n  type: markup\n  color: \"#da291c\"\n  extensions:\n  - \".ps\"\n  - \".eps\"\n  - \".epsi\"\n  - \".pfa\"\n  tm_scope: source.postscript\n  aliases:\n  - postscr\n  ace_mode: text\n  language_id: 291\nPowerBuilder:\n  type: programming\n  color: \"#8f0f8d\"\n  extensions:\n  - \".pbt\"\n  - \".sra\"\n  - \".sru\"\n  - \".srw\"\n  tm_scope: source.powerbuilder\n  ace_mode: text\n  language_id: 292\nPowerShell:\n  type: programming\n  color: \"#012456\"\n  tm_scope: source.powershell\n  ace_mode: powershell\n  codemirror_mode: powershell\n  codemirror_mime_type: application/x-powershell\n  aliases:\n  - posh\n  - pwsh\n  extensions:\n  - \".ps1\"\n  - \".psd1\"\n  - \".psm1\"\n  interpreters:\n  - pwsh\n  language_id: 293\nPraat:\n  type: programming\n  color: \"#c8506d\"\n  tm_scope: source.praat\n  ace_mode: praat\n  extensions:\n  - \".praat\"\n  language_id: 106029007\nPrisma:\n  type: data\n  color: \"#0c344b\"\n  extensions:\n  - \".prisma\"\n  tm_scope: source.prisma\n  ace_mode: text\n  language_id: 499933428\nProcessing:\n  type: programming\n  color: \"#0096D8\"\n  extensions:\n  - \".pde\"\n  tm_scope: source.processing\n  ace_mode: text\n  language_id: 294\nProcfile:\n  type: programming\n  color: \"#3B2F63\"\n  filenames:\n  - Procfile\n  tm_scope: source.procfile\n  ace_mode: batchfile\n  language_id: 305313959\nProguard:\n  type: data\n  extensions:\n  - \".pro\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 716513858\nProlog:\n  type: programming\n  color: \"#74283c\"\n  extensions:\n  - \".pl\"\n  - \".plt\"\n  - \".pro\"\n  - \".prolog\"\n  - \".yap\"\n  interpreters:\n  - swipl\n  - yap\n  tm_scope: source.prolog\n  ace_mode: prolog\n  language_id: 295\nPromela:\n  type: programming\n  color: \"#de0000\"\n  tm_scope: source.promela\n  ace_mode: text\n  extensions:\n  - \".pml\"\n  language_id: 441858312\nPropeller Spin:\n  type: programming\n  color: \"#7fa2a7\"\n  extensions:\n  - \".spin\"\n  tm_scope: source.spin\n  ace_mode: text\n  language_id: 296\nProtocol Buffer:\n  type: data\n  aliases:\n  - proto\n  - protobuf\n  - Protocol Buffers\n  extensions:\n  - \".proto\"\n  tm_scope: source.proto\n  ace_mode: protobuf\n  codemirror_mode: protobuf\n  codemirror_mime_type: text/x-protobuf\n  language_id: 297\nProtocol Buffer Text Format:\n  type: data\n  aliases:\n  - text proto\n  - protobuf text format\n  extensions:\n  - \".textproto\"\n  - \".pbt\"\n  - \".pbtxt\"\n  tm_scope: source.textproto\n  ace_mode: text\n  language_id: 436568854\nPublic Key:\n  type: data\n  extensions:\n  - \".asc\"\n  - \".pub\"\n  tm_scope: none\n  ace_mode: text\n  codemirror_mode: asciiarmor\n  codemirror_mime_type: application/pgp\n  language_id: 298\nPug:\n  type: markup\n  color: \"#a86454\"\n  extensions:\n  - \".jade\"\n  - \".pug\"\n  tm_scope: text.jade\n  ace_mode: jade\n  codemirror_mode: pug\n  codemirror_mime_type: text/x-pug\n  language_id: 179\nPuppet:\n  type: programming\n  color: \"#302B6D\"\n  extensions:\n  - \".pp\"\n  filenames:\n  - Modulefile\n  ace_mode: text\n  codemirror_mode: puppet\n  codemirror_mime_type: text/x-puppet\n  tm_scope: source.puppet\n  language_id: 299\nPure Data:\n  type: data\n  extensions:\n  - \".pd\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 300\nPureBasic:\n  type: programming\n  color: \"#5a6986\"\n  extensions:\n  - \".pb\"\n  - \".pbi\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 301\nPureScript:\n  type: programming\n  color: \"#1D222D\"\n  extensions:\n  - \".purs\"\n  tm_scope: source.purescript\n  ace_mode: haskell\n  codemirror_mode: haskell\n  codemirror_mime_type: text/x-haskell\n  language_id: 302\nPyret:\n  type: programming\n  color: \"#ee1e10\"\n  extensions:\n  - \".arr\"\n  ace_mode: python\n  tm_scope: source.arr\n  language_id: 252961827\nPython:\n  type: programming\n  tm_scope: source.python\n  ace_mode: python\n  codemirror_mode: python\n  codemirror_mime_type: text/x-python\n  color: \"#3572A5\"\n  extensions:\n  - \".py\"\n  - \".cgi\"\n  - \".fcgi\"\n  - \".gyp\"\n  - \".gypi\"\n  - \".lmi\"\n  - \".py3\"\n  - \".pyde\"\n  - \".pyi\"\n  - \".pyp\"\n  - \".pyt\"\n  - \".pyw\"\n  - \".rpy\"\n  - \".spec\"\n  - \".tac\"\n  - \".wsgi\"\n  - \".xpy\"\n  filenames:\n  - \".gclient\"\n  - DEPS\n  - SConscript\n  - SConstruct\n  - wscript\n  interpreters:\n  - python\n  - python2\n  - python3\n  - py\n  - pypy\n  - pypy3\n  aliases:\n  - python3\n  - rusthon\n  language_id: 303\nPython console:\n  type: programming\n  color: \"#3572A5\"\n  group: Python\n  aliases:\n  - pycon\n  tm_scope: text.python.console\n  ace_mode: text\n  language_id: 428\nPython traceback:\n  type: data\n  color: \"#3572A5\"\n  group: Python\n  extensions:\n  - \".pytb\"\n  tm_scope: text.python.traceback\n  ace_mode: text\n  language_id: 304\nQ#:\n  type: programming\n  extensions:\n  - \".qs\"\n  aliases:\n  - qsharp\n  color: \"#fed659\"\n  ace_mode: text\n  tm_scope: source.qsharp\n  language_id: 697448245\nQML:\n  type: programming\n  color: \"#44a51c\"\n  extensions:\n  - \".qml\"\n  - \".qbs\"\n  tm_scope: source.qml\n  ace_mode: text\n  language_id: 305\nQMake:\n  type: programming\n  extensions:\n  - \".pro\"\n  - \".pri\"\n  interpreters:\n  - qmake\n  tm_scope: source.qmake\n  ace_mode: text\n  language_id: 306\nQt Script:\n  type: programming\n  ace_mode: javascript\n  codemirror_mode: javascript\n  codemirror_mime_type: text/javascript\n  extensions:\n  - \".qs\"\n  filenames:\n  - installscript.qs\n  - toolchain_installscript.qs\n  color: \"#00b841\"\n  tm_scope: source.js\n  language_id: 558193693\nQuake:\n  type: programming\n  filenames:\n  - m3makefile\n  - m3overrides\n  color: \"#882233\"\n  ace_mode: text\n  tm_scope: source.quake\n  language_id: 375265331\nR:\n  type: programming\n  color: \"#198CE7\"\n  aliases:\n  - Rscript\n  - splus\n  extensions:\n  - \".r\"\n  - \".rd\"\n  - \".rsx\"\n  filenames:\n  - \".Rprofile\"\n  - expr-dist\n  interpreters:\n  - Rscript\n  tm_scope: source.r\n  ace_mode: r\n  codemirror_mode: r\n  codemirror_mime_type: text/x-rsrc\n  language_id: 307\nRAML:\n  type: markup\n  ace_mode: yaml\n  codemirror_mode: yaml\n  codemirror_mime_type: text/x-yaml\n  tm_scope: source.yaml\n  color: \"#77d9fb\"\n  extensions:\n  - \".raml\"\n  language_id: 308\nRBS:\n  type: data\n  ace_mode: ruby\n  codemirror_mode: ruby\n  codemirror_mime_type: text/x-ruby\n  extensions:\n  - \".rbs\"\n  color: \"#701516\"\n  tm_scope: source.rbs\n  group: Ruby\n  language_id: 899227493\nRDoc:\n  type: prose\n  color: \"#701516\"\n  ace_mode: rdoc\n  wrap: true\n  extensions:\n  - \".rdoc\"\n  tm_scope: text.rdoc\n  language_id: 309\nREALbasic:\n  type: programming\n  extensions:\n  - \".rbbas\"\n  - \".rbfrm\"\n  - \".rbmnu\"\n  - \".rbres\"\n  - \".rbtbar\"\n  - \".rbuistate\"\n  tm_scope: source.vbnet\n  ace_mode: text\n  language_id: 310\nREXX:\n  type: programming\n  color: \"#d90e09\"\n  aliases:\n  - arexx\n  extensions:\n  - \".rexx\"\n  - \".pprx\"\n  - \".rex\"\n  interpreters:\n  - regina\n  - rexx\n  tm_scope: source.rexx\n  ace_mode: text\n  language_id: 311\nRMarkdown:\n  type: prose\n  color: \"#198ce7\"\n  wrap: true\n  ace_mode: markdown\n  codemirror_mode: gfm\n  codemirror_mime_type: text/x-gfm\n  extensions:\n  - \".qmd\"\n  - \".rmd\"\n  tm_scope: text.md\n  language_id: 313\nRON:\n  type: data\n  color: \"#a62c00\"\n  extensions:\n  - \".ron\"\n  ace_mode: rust\n  tm_scope: source.ron\n  language_id: 587855233\nRPC:\n  type: programming\n  aliases:\n  - rpcgen\n  - oncrpc\n  - xdr\n  ace_mode: c_cpp\n  extensions:\n  - \".x\"\n  tm_scope: source.c\n  language_id: 1031374237\nRPGLE:\n  type: programming\n  ace_mode: text\n  color: \"#2BDE21\"\n  aliases:\n  - ile rpg\n  - sqlrpgle\n  extensions:\n  - \".rpgle\"\n  - \".sqlrpgle\"\n  tm_scope: source.rpgle\n  language_id: 609977990\nRPM Spec:\n  type: data\n  tm_scope: source.rpm-spec\n  extensions:\n  - \".spec\"\n  aliases:\n  - specfile\n  ace_mode: text\n  codemirror_mode: rpm\n  codemirror_mime_type: text/x-rpm-spec\n  language_id: 314\nRUNOFF:\n  type: markup\n  color: \"#665a4e\"\n  extensions:\n  - \".rnh\"\n  - \".rno\"\n  wrap: true\n  tm_scope: text.runoff\n  ace_mode: text\n  language_id: 315\nRacket:\n  type: programming\n  color: \"#3c5caa\"\n  extensions:\n  - \".rkt\"\n  - \".rktd\"\n  - \".rktl\"\n  - \".scrbl\"\n  interpreters:\n  - racket\n  tm_scope: source.racket\n  ace_mode: lisp\n  language_id: 316\nRagel:\n  type: programming\n  color: \"#9d5200\"\n  extensions:\n  - \".rl\"\n  aliases:\n  - ragel-rb\n  - ragel-ruby\n  tm_scope: none\n  ace_mode: text\n  language_id: 317\nRaku:\n  type: programming\n  color: \"#0000fb\"\n  extensions:\n  - \".6pl\"\n  - \".6pm\"\n  - \".nqp\"\n  - \".p6\"\n  - \".p6l\"\n  - \".p6m\"\n  - \".pl\"\n  - \".pl6\"\n  - \".pm\"\n  - \".pm6\"\n  - \".raku\"\n  - \".rakumod\"\n  - \".t\"\n  interpreters:\n  - perl6\n  - raku\n  - rakudo\n  aliases:\n  - perl6\n  - perl-6\n  tm_scope: source.raku\n  ace_mode: perl\n  codemirror_mode: perl\n  codemirror_mime_type: text/x-perl\n  language_id: 283\nRascal:\n  type: programming\n  color: \"#fffaa0\"\n  extensions:\n  - \".rsc\"\n  tm_scope: source.rascal\n  ace_mode: text\n  language_id: 173616037\nRaw token data:\n  type: data\n  aliases:\n  - raw\n  extensions:\n  - \".raw\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 318\nReScript:\n  type: programming\n  color: \"#ed5051\"\n  ace_mode: rust\n  codemirror_mode: rust\n  codemirror_mime_type: text/x-rustsrc\n  extensions:\n  - \".res\"\n  interpreters:\n  - ocaml\n  tm_scope: source.rescript\n  language_id: 501875647\nReadline Config:\n  type: data\n  group: INI\n  aliases:\n  - inputrc\n  - readline\n  filenames:\n  - \".inputrc\"\n  - inputrc\n  tm_scope: source.inputrc\n  ace_mode: text\n  language_id: 538732839\nReason:\n  type: programming\n  color: \"#ff5847\"\n  ace_mode: rust\n  codemirror_mode: rust\n  codemirror_mime_type: text/x-rustsrc\n  extensions:\n  - \".re\"\n  - \".rei\"\n  tm_scope: source.reason\n  language_id: 869538413\nReasonLIGO:\n  type: programming\n  color: \"#ff5847\"\n  ace_mode: rust\n  codemirror_mode: rust\n  codemirror_mime_type: text/x-rustsrc\n  group: LigoLANG\n  extensions:\n  - \".religo\"\n  tm_scope: source.religo\n  language_id: 319002153\nRebol:\n  type: programming\n  color: \"#358a5b\"\n  extensions:\n  - \".reb\"\n  - \".r\"\n  - \".r2\"\n  - \".r3\"\n  - \".rebol\"\n  ace_mode: text\n  tm_scope: source.rebol\n  language_id: 319\nRecord Jar:\n  type: data\n  filenames:\n  - language-subtag-registry.txt\n  tm_scope: source.record-jar\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  ace_mode: text\n  color: \"#0673ba\"\n  language_id: 865765202\nRed:\n  type: programming\n  color: \"#f50000\"\n  extensions:\n  - \".red\"\n  - \".reds\"\n  aliases:\n  - red/system\n  tm_scope: source.red\n  ace_mode: text\n  language_id: 320\nRedcode:\n  type: programming\n  extensions:\n  - \".cw\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 321\nRedirect Rules:\n  type: data\n  aliases:\n  - redirects\n  filenames:\n  - _redirects\n  tm_scope: source.redirects\n  ace_mode: text\n  language_id: 1020148948\nRegular Expression:\n  type: data\n  color: \"#009a00\"\n  extensions:\n  - \".regexp\"\n  - \".regex\"\n  aliases:\n  - regexp\n  - regex\n  ace_mode: text\n  tm_scope: source.regexp\n  language_id: 363378884\nRen'Py:\n  type: programming\n  aliases:\n  - renpy\n  color: \"#ff7f7f\"\n  extensions:\n  - \".rpy\"\n  tm_scope: source.renpy\n  ace_mode: python\n  language_id: 322\nRenderScript:\n  type: programming\n  extensions:\n  - \".rs\"\n  - \".rsh\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 323\nRez:\n  type: programming\n  extensions:\n  - \".r\"\n  tm_scope: source.rez\n  ace_mode: text\n  color: \"#FFDAB3\"\n  language_id: 498022874\nRich Text Format:\n  type: markup\n  extensions:\n  - \".rtf\"\n  tm_scope: text.rtf\n  ace_mode: text\n  language_id: 51601661\nRing:\n  type: programming\n  color: \"#2D54CB\"\n  extensions:\n  - \".ring\"\n  tm_scope: source.ring\n  ace_mode: text\n  language_id: 431\nRiot:\n  type: markup\n  color: \"#A71E49\"\n  ace_mode: html\n  extensions:\n  - \".riot\"\n  tm_scope: text.html.riot\n  language_id: 878396783\nRobotFramework:\n  type: programming\n  color: \"#00c0b5\"\n  extensions:\n  - \".robot\"\n  - \".resource\"\n  tm_scope: text.robot\n  ace_mode: text\n  language_id: 324\nRoc:\n  type: programming\n  color: \"#7c38f5\"\n  extensions:\n  - \".roc\"\n  tm_scope: source.roc\n  ace_mode: text\n  language_id: 440182480\nRoff:\n  type: markup\n  color: \"#ecdebe\"\n  extensions:\n  - \".roff\"\n  - \".1\"\n  - \".1in\"\n  - \".1m\"\n  - \".1x\"\n  - \".2\"\n  - \".3\"\n  - \".3in\"\n  - \".3m\"\n  - \".3p\"\n  - \".3pm\"\n  - \".3qt\"\n  - \".3x\"\n  - \".4\"\n  - \".5\"\n  - \".6\"\n  - \".7\"\n  - \".8\"\n  - \".9\"\n  - \".l\"\n  - \".man\"\n  - \".mdoc\"\n  - \".me\"\n  - \".ms\"\n  - \".n\"\n  - \".nr\"\n  - \".rno\"\n  - \".tmac\"\n  filenames:\n  - eqnrc\n  - mmn\n  - mmt\n  - troffrc\n  - troffrc-end\n  tm_scope: text.roff\n  aliases:\n  - groff\n  - man\n  - manpage\n  - man page\n  - man-page\n  - mdoc\n  - nroff\n  - troff\n  wrap: true\n  ace_mode: text\n  codemirror_mode: troff\n  codemirror_mime_type: text/troff\n  language_id: 141\nRoff Manpage:\n  type: markup\n  color: \"#ecdebe\"\n  group: Roff\n  extensions:\n  - \".1\"\n  - \".1in\"\n  - \".1m\"\n  - \".1x\"\n  - \".2\"\n  - \".3\"\n  - \".3in\"\n  - \".3m\"\n  - \".3p\"\n  - \".3pm\"\n  - \".3qt\"\n  - \".3x\"\n  - \".4\"\n  - \".5\"\n  - \".6\"\n  - \".7\"\n  - \".8\"\n  - \".9\"\n  - \".man\"\n  - \".mdoc\"\n  wrap: true\n  tm_scope: text.roff\n  ace_mode: text\n  codemirror_mode: troff\n  codemirror_mime_type: text/troff\n  language_id: 612669833\nRouge:\n  type: programming\n  ace_mode: clojure\n  codemirror_mode: clojure\n  codemirror_mime_type: text/x-clojure\n  color: \"#cc0088\"\n  extensions:\n  - \".rg\"\n  tm_scope: source.clojure\n  language_id: 325\nRouterOS Script:\n  type: programming\n  ace_mode: text\n  extensions:\n  - \".rsc\"\n  interpreters:\n  - RouterOS\n  color: \"#DE3941\"\n  tm_scope: none\n  language_id: 592853203\nRuby:\n  type: programming\n  tm_scope: source.ruby\n  ace_mode: ruby\n  codemirror_mode: ruby\n  codemirror_mime_type: text/x-ruby\n  color: \"#701516\"\n  aliases:\n  - jruby\n  - macruby\n  - rake\n  - rb\n  - rbx\n  extensions:\n  - \".rb\"\n  - \".builder\"\n  - \".eye\"\n  - \".fcgi\"\n  - \".gemspec\"\n  - \".god\"\n  - \".jbuilder\"\n  - \".mspec\"\n  - \".pluginspec\"\n  - \".podspec\"\n  - \".prawn\"\n  - \".rabl\"\n  - \".rake\"\n  - \".rbi\"\n  - \".rbuild\"\n  - \".rbw\"\n  - \".rbx\"\n  - \".ru\"\n  - \".ruby\"\n  - \".spec\"\n  - \".thor\"\n  - \".watchr\"\n  interpreters:\n  - ruby\n  - macruby\n  - rake\n  - jruby\n  - rbx\n  filenames:\n  - \".irbrc\"\n  - \".pryrc\"\n  - \".simplecov\"\n  - Appraisals\n  - Berksfile\n  - Brewfile\n  - Buildfile\n  - Capfile\n  - Dangerfile\n  - Deliverfile\n  - Fastfile\n  - Gemfile\n  - Guardfile\n  - Jarfile\n  - Mavenfile\n  - Podfile\n  - Puppetfile\n  - Rakefile\n  - Snapfile\n  - Steepfile\n  - Thorfile\n  - Vagrantfile\n  - buildfile\n  language_id: 326\nRust:\n  type: programming\n  aliases:\n  - rs\n  color: \"#dea584\"\n  extensions:\n  - \".rs\"\n  - \".rs.in\"\n  tm_scope: source.rust\n  ace_mode: rust\n  codemirror_mode: rust\n  codemirror_mime_type: text/x-rustsrc\n  interpreters:\n  - rust-script\n  language_id: 327\nSAS:\n  type: programming\n  color: \"#B34936\"\n  extensions:\n  - \".sas\"\n  tm_scope: source.sas\n  ace_mode: text\n  codemirror_mode: sas\n  codemirror_mime_type: text/x-sas\n  language_id: 328\nSCSS:\n  type: markup\n  color: \"#c6538c\"\n  tm_scope: source.css.scss\n  ace_mode: scss\n  codemirror_mode: css\n  codemirror_mime_type: text/x-scss\n  extensions:\n  - \".scss\"\n  language_id: 329\nSELinux Policy:\n  aliases:\n  - SELinux Kernel Policy Language\n  - sepolicy\n  type: data\n  tm_scope: source.sepolicy\n  extensions:\n  - \".te\"\n  filenames:\n  - file_contexts\n  - genfs_contexts\n  - initial_sids\n  - port_contexts\n  - security_classes\n  ace_mode: text\n  language_id: 880010326\nSMT:\n  type: programming\n  extensions:\n  - \".smt2\"\n  - \".smt\"\n  interpreters:\n  - boolector\n  - cvc4\n  - mathsat5\n  - opensmt\n  - smtinterpol\n  - smt-rat\n  - stp\n  - verit\n  - yices2\n  - z3\n  tm_scope: source.smt\n  ace_mode: text\n  language_id: 330\nSPARQL:\n  type: data\n  color: \"#0C4597\"\n  tm_scope: source.sparql\n  ace_mode: text\n  codemirror_mode: sparql\n  codemirror_mime_type: application/sparql-query\n  extensions:\n  - \".sparql\"\n  - \".rq\"\n  language_id: 331\nSQF:\n  type: programming\n  color: \"#3F3F3F\"\n  extensions:\n  - \".sqf\"\n  - \".hqf\"\n  tm_scope: source.sqf\n  ace_mode: text\n  language_id: 332\nSQL:\n  type: data\n  color: \"#e38c00\"\n  tm_scope: source.sql\n  ace_mode: sql\n  codemirror_mode: sql\n  codemirror_mime_type: text/x-sql\n  extensions:\n  - \".sql\"\n  - \".cql\"\n  - \".ddl\"\n  - \".inc\"\n  - \".mysql\"\n  - \".prc\"\n  - \".tab\"\n  - \".udf\"\n  - \".viw\"\n  language_id: 333\nSQLPL:\n  type: programming\n  color: \"#e38c00\"\n  ace_mode: sql\n  codemirror_mode: sql\n  codemirror_mime_type: text/x-sql\n  tm_scope: source.sql\n  extensions:\n  - \".sql\"\n  - \".db2\"\n  language_id: 334\nSRecode Template:\n  type: markup\n  color: \"#348a34\"\n  tm_scope: source.lisp\n  ace_mode: lisp\n  codemirror_mode: commonlisp\n  codemirror_mime_type: text/x-common-lisp\n  extensions:\n  - \".srt\"\n  language_id: 335\nSSH Config:\n  type: data\n  group: INI\n  filenames:\n  - ssh-config\n  - ssh_config\n  - sshconfig\n  - sshconfig.snip\n  - sshd-config\n  - sshd_config\n  ace_mode: text\n  tm_scope: source.ssh-config\n  language_id: 554920715\nSTAR:\n  type: data\n  extensions:\n  - \".star\"\n  tm_scope: source.star\n  ace_mode: text\n  language_id: 424510560\nSTL:\n  type: data\n  color: \"#373b5e\"\n  aliases:\n  - ascii stl\n  - stla\n  extensions:\n  - \".stl\"\n  tm_scope: source.stl\n  ace_mode: text\n  language_id: 455361735\nSTON:\n  type: data\n  group: Smalltalk\n  extensions:\n  - \".ston\"\n  tm_scope: source.smalltalk\n  ace_mode: text\n  language_id: 336\nSVG:\n  type: data\n  color: \"#ff9900\"\n  extensions:\n  - \".svg\"\n  tm_scope: text.xml.svg\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  language_id: 337\nSWIG:\n  type: programming\n  extensions:\n  - \".i\"\n  tm_scope: source.c++\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-c++src\n  language_id: 1066250075\nSage:\n  type: programming\n  extensions:\n  - \".sage\"\n  - \".sagews\"\n  tm_scope: source.python\n  ace_mode: python\n  codemirror_mode: python\n  codemirror_mime_type: text/x-python\n  language_id: 338\nSaltStack:\n  type: programming\n  color: \"#646464\"\n  aliases:\n  - saltstate\n  - salt\n  extensions:\n  - \".sls\"\n  tm_scope: source.yaml.salt\n  ace_mode: yaml\n  codemirror_mode: yaml\n  codemirror_mime_type: text/x-yaml\n  language_id: 339\nSass:\n  type: markup\n  color: \"#a53b70\"\n  tm_scope: source.sass\n  extensions:\n  - \".sass\"\n  ace_mode: sass\n  codemirror_mode: sass\n  codemirror_mime_type: text/x-sass\n  language_id: 340\nScala:\n  type: programming\n  tm_scope: source.scala\n  ace_mode: scala\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-scala\n  color: \"#c22d40\"\n  extensions:\n  - \".scala\"\n  - \".kojo\"\n  - \".sbt\"\n  - \".sc\"\n  interpreters:\n  - scala\n  language_id: 341\nScaml:\n  type: markup\n  color: \"#bd181a\"\n  extensions:\n  - \".scaml\"\n  tm_scope: source.scaml\n  ace_mode: text\n  language_id: 342\nScenic:\n  type: programming\n  color: \"#fdc700\"\n  extensions:\n  - \".scenic\"\n  tm_scope: source.scenic\n  ace_mode: text\n  interpreters:\n  - scenic\n  language_id: 619814037\nScheme:\n  type: programming\n  color: \"#1e4aec\"\n  extensions:\n  - \".scm\"\n  - \".sch\"\n  - \".sld\"\n  - \".sls\"\n  - \".sps\"\n  - \".ss\"\n  interpreters:\n  - scheme\n  - guile\n  - bigloo\n  - chicken\n  - csi\n  - gosh\n  - r6rs\n  tm_scope: source.scheme\n  ace_mode: scheme\n  codemirror_mode: scheme\n  codemirror_mime_type: text/x-scheme\n  language_id: 343\nScilab:\n  type: programming\n  color: \"#ca0f21\"\n  extensions:\n  - \".sci\"\n  - \".sce\"\n  - \".tst\"\n  tm_scope: source.scilab\n  ace_mode: text\n  language_id: 344\nSelf:\n  type: programming\n  color: \"#0579aa\"\n  extensions:\n  - \".self\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 345\nShaderLab:\n  type: programming\n  color: \"#222c37\"\n  extensions:\n  - \".shader\"\n  ace_mode: text\n  tm_scope: source.shaderlab\n  language_id: 664257356\nShell:\n  type: programming\n  color: \"#89e051\"\n  aliases:\n  - sh\n  - shell-script\n  - bash\n  - zsh\n  - envrc\n  extensions:\n  - \".sh\"\n  - \".bash\"\n  - \".bats\"\n  - \".cgi\"\n  - \".command\"\n  - \".fcgi\"\n  - \".ksh\"\n  - \".sh.in\"\n  - \".tmux\"\n  - \".tool\"\n  - \".trigger\"\n  - \".zsh\"\n  - \".zsh-theme\"\n  filenames:\n  - \".bash_aliases\"\n  - \".bash_functions\"\n  - \".bash_history\"\n  - \".bash_logout\"\n  - \".bash_profile\"\n  - \".bashrc\"\n  - \".cshrc\"\n  - \".envrc\"\n  - \".flaskenv\"\n  - \".kshrc\"\n  - \".login\"\n  - \".profile\"\n  - \".tmux.conf\"\n  - \".zlogin\"\n  - \".zlogout\"\n  - \".zprofile\"\n  - \".zshenv\"\n  - \".zshrc\"\n  - 9fs\n  - PKGBUILD\n  - bash_aliases\n  - bash_logout\n  - bash_profile\n  - bashrc\n  - cshrc\n  - gradlew\n  - kshrc\n  - login\n  - man\n  - profile\n  - tmux.conf\n  - zlogin\n  - zlogout\n  - zprofile\n  - zshenv\n  - zshrc\n  interpreters:\n  - ash\n  - bash\n  - dash\n  - ksh\n  - mksh\n  - pdksh\n  - rc\n  - sh\n  - zsh\n  tm_scope: source.shell\n  ace_mode: sh\n  codemirror_mode: shell\n  codemirror_mime_type: text/x-sh\n  language_id: 346\nShellCheck Config:\n  type: data\n  color: \"#cecfcb\"\n  filenames:\n  - \".shellcheckrc\"\n  aliases:\n  - shellcheckrc\n  tm_scope: source.shellcheckrc\n  ace_mode: ini\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  language_id: 687511714\nShellSession:\n  type: programming\n  extensions:\n  - \".sh-session\"\n  aliases:\n  - bash session\n  - console\n  tm_scope: text.shell-session\n  ace_mode: sh\n  codemirror_mode: shell\n  codemirror_mime_type: text/x-sh\n  language_id: 347\nShen:\n  type: programming\n  color: \"#120F14\"\n  extensions:\n  - \".shen\"\n  tm_scope: source.shen\n  ace_mode: text\n  language_id: 348\nSieve:\n  type: programming\n  tm_scope: source.sieve\n  ace_mode: text\n  extensions:\n  - \".sieve\"\n  codemirror_mode: sieve\n  codemirror_mime_type: application/sieve\n  language_id: 208976687\nSimple File Verification:\n  type: data\n  group: Checksums\n  color: \"#C9BFED\"\n  extensions:\n  - \".sfv\"\n  aliases:\n  - sfv\n  tm_scope: source.sfv\n  ace_mode: ini\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  language_id: 735623761\nSingularity:\n  type: programming\n  color: \"#64E6AD\"\n  tm_scope: source.singularity\n  filenames:\n  - Singularity\n  ace_mode: text\n  language_id: 987024632\nSlash:\n  type: programming\n  color: \"#007eff\"\n  extensions:\n  - \".sl\"\n  tm_scope: text.html.slash\n  ace_mode: text\n  language_id: 349\nSlice:\n  type: programming\n  color: \"#003fa2\"\n  tm_scope: source.ice\n  ace_mode: text\n  extensions:\n  - \".ice\"\n  language_id: 894641667\nSlim:\n  type: markup\n  color: \"#2b2b2b\"\n  extensions:\n  - \".slim\"\n  tm_scope: text.slim\n  ace_mode: text\n  codemirror_mode: slim\n  codemirror_mime_type: text/x-slim\n  language_id: 350\nSlint:\n  type: markup\n  color: \"#2379F4\"\n  extensions:\n  - \".slint\"\n  tm_scope: source.slint\n  ace_mode: text\n  language_id: 119900149\nSmPL:\n  type: programming\n  extensions:\n  - \".cocci\"\n  aliases:\n  - coccinelle\n  ace_mode: text\n  tm_scope: source.smpl\n  color: \"#c94949\"\n  language_id: 164123055\nSmali:\n  type: programming\n  extensions:\n  - \".smali\"\n  ace_mode: text\n  tm_scope: source.smali\n  language_id: 351\nSmalltalk:\n  type: programming\n  color: \"#596706\"\n  extensions:\n  - \".st\"\n  - \".cs\"\n  aliases:\n  - squeak\n  tm_scope: source.smalltalk\n  ace_mode: text\n  codemirror_mode: smalltalk\n  codemirror_mime_type: text/x-stsrc\n  language_id: 352\nSmarty:\n  type: programming\n  color: \"#f0c040\"\n  extensions:\n  - \".tpl\"\n  ace_mode: smarty\n  codemirror_mode: smarty\n  codemirror_mime_type: text/x-smarty\n  tm_scope: text.html.smarty\n  language_id: 353\nSmithy:\n  type: programming\n  ace_mode: text\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  tm_scope: source.smithy\n  color: \"#c44536\"\n  extensions:\n  - \".smithy\"\n  language_id: 1027892786\nSnakemake:\n  type: programming\n  group: Python\n  tm_scope: source.python\n  ace_mode: python\n  codemirror_mode: python\n  codemirror_mime_type: text/x-python\n  color: \"#419179\"\n  extensions:\n  - \".smk\"\n  - \".snakefile\"\n  filenames:\n  - Snakefile\n  aliases:\n  - snakefile\n  language_id: 151241392\nSolidity:\n  type: programming\n  color: \"#AA6746\"\n  ace_mode: text\n  tm_scope: source.solidity\n  extensions:\n  - \".sol\"\n  language_id: 237469032\nSoong:\n  type: data\n  tm_scope: source.bp\n  ace_mode: text\n  filenames:\n  - Android.bp\n  language_id: 222900098\nSourcePawn:\n  type: programming\n  color: \"#f69e1d\"\n  aliases:\n  - sourcemod\n  extensions:\n  - \".sp\"\n  - \".inc\"\n  tm_scope: source.sourcepawn\n  ace_mode: text\n  language_id: 354\nSpline Font Database:\n  type: data\n  extensions:\n  - \".sfd\"\n  tm_scope: text.sfd\n  ace_mode: yaml\n  language_id: 767169629\nSquirrel:\n  type: programming\n  color: \"#800000\"\n  extensions:\n  - \".nut\"\n  tm_scope: source.nut\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-c++src\n  language_id: 355\nStan:\n  type: programming\n  color: \"#b2011d\"\n  extensions:\n  - \".stan\"\n  ace_mode: text\n  tm_scope: source.stan\n  language_id: 356\nStandard ML:\n  type: programming\n  color: \"#dc566d\"\n  aliases:\n  - sml\n  extensions:\n  - \".ml\"\n  - \".fun\"\n  - \".sig\"\n  - \".sml\"\n  tm_scope: source.ml\n  ace_mode: text\n  codemirror_mode: mllike\n  codemirror_mime_type: text/x-ocaml\n  language_id: 357\nStarlark:\n  type: programming\n  tm_scope: source.python\n  ace_mode: python\n  codemirror_mode: python\n  codemirror_mime_type: text/x-python\n  color: \"#76d275\"\n  extensions:\n  - \".bzl\"\n  - \".star\"\n  filenames:\n  - BUCK\n  - BUILD\n  - BUILD.bazel\n  - MODULE.bazel\n  - Tiltfile\n  - WORKSPACE\n  - WORKSPACE.bazel\n  aliases:\n  - bazel\n  - bzl\n  language_id: 960266174\nStata:\n  type: programming\n  color: \"#1a5f91\"\n  extensions:\n  - \".do\"\n  - \".ado\"\n  - \".doh\"\n  - \".ihlp\"\n  - \".mata\"\n  - \".matah\"\n  - \".sthlp\"\n  tm_scope: source.stata\n  ace_mode: text\n  language_id: 358\nStringTemplate:\n  type: markup\n  color: \"#3fb34f\"\n  extensions:\n  - \".st\"\n  tm_scope: source.string-template\n  ace_mode: html\n  codemirror_mode: htmlmixed\n  codemirror_mime_type: text/html\n  language_id: 89855901\nStylus:\n  type: markup\n  color: \"#ff6347\"\n  extensions:\n  - \".styl\"\n  tm_scope: source.stylus\n  ace_mode: stylus\n  language_id: 359\nSubRip Text:\n  type: data\n  color: \"#9e0101\"\n  extensions:\n  - \".srt\"\n  ace_mode: text\n  tm_scope: text.srt\n  language_id: 360\nSugarSS:\n  type: markup\n  color: \"#2fcc9f\"\n  tm_scope: source.css.postcss.sugarss\n  extensions:\n  - \".sss\"\n  ace_mode: text\n  language_id: 826404698\nSuperCollider:\n  type: programming\n  color: \"#46390b\"\n  extensions:\n  - \".sc\"\n  - \".scd\"\n  interpreters:\n  - sclang\n  - scsynth\n  tm_scope: source.supercollider\n  ace_mode: text\n  language_id: 361\nSvelte:\n  type: markup\n  color: \"#ff3e00\"\n  tm_scope: source.svelte\n  ace_mode: html\n  codemirror_mode: htmlmixed\n  codemirror_mime_type: text/html\n  extensions:\n  - \".svelte\"\n  language_id: 928734530\nSway:\n  type: programming\n  color: \"#00F58C\"\n  extensions:\n  - \".sw\"\n  tm_scope: source.sway\n  ace_mode: rust\n  codemirror_mode: rust\n  codemirror_mime_type: text/x-rustsrc\n  language_id: 271471144\nSweave:\n  type: prose\n  color: \"#198ce7\"\n  extensions:\n  - \".rnw\"\n  tm_scope: text.tex.latex.sweave\n  ace_mode: tex\n  language_id: 558779190\nSwift:\n  type: programming\n  color: \"#F05138\"\n  extensions:\n  - \".swift\"\n  tm_scope: source.swift\n  ace_mode: text\n  codemirror_mode: swift\n  codemirror_mime_type: text/x-swift\n  language_id: 362\nSystemVerilog:\n  type: programming\n  color: \"#DAE1C2\"\n  extensions:\n  - \".sv\"\n  - \".svh\"\n  - \".vh\"\n  tm_scope: source.systemverilog\n  ace_mode: verilog\n  codemirror_mode: verilog\n  codemirror_mime_type: text/x-systemverilog\n  language_id: 363\nTI Program:\n  type: programming\n  ace_mode: text\n  color: \"#A0AA87\"\n  extensions:\n  - \".8xp\"\n  - \".8xp.txt\"\n  language_id: 422\n  tm_scope: source.8xp\nTL-Verilog:\n  type: programming\n  extensions:\n  - \".tlv\"\n  tm_scope: source.tlverilog\n  ace_mode: verilog\n  color: \"#C40023\"\n  language_id: 118656070\nTLA:\n  type: programming\n  color: \"#4b0079\"\n  extensions:\n  - \".tla\"\n  tm_scope: source.tla\n  ace_mode: text\n  language_id: 364\nTOML:\n  type: data\n  color: \"#9c4221\"\n  extensions:\n  - \".toml\"\n  filenames:\n  - Cargo.lock\n  - Cargo.toml.orig\n  - Gopkg.lock\n  - Pipfile\n  - pdm.lock\n  - poetry.lock\n  - uv.lock\n  tm_scope: source.toml\n  ace_mode: toml\n  codemirror_mode: toml\n  codemirror_mime_type: text/x-toml\n  language_id: 365\nTSQL:\n  type: programming\n  color: \"#e38c00\"\n  extensions:\n  - \".sql\"\n  ace_mode: sql\n  tm_scope: source.tsql\n  language_id: 918334941\nTSV:\n  type: data\n  color: \"#237346\"\n  ace_mode: text\n  tm_scope: source.generic-db\n  extensions:\n  - \".tsv\"\n  - \".vcf\"\n  aliases:\n  - tab-seperated values\n  language_id: 1035892117\nTSX:\n  type: programming\n  color: \"#3178c6\"\n  group: TypeScript\n  extensions:\n  - \".tsx\"\n  tm_scope: source.tsx\n  ace_mode: javascript\n  codemirror_mode: jsx\n  codemirror_mime_type: text/jsx\n  language_id: 94901924\nTXL:\n  type: programming\n  color: \"#0178b8\"\n  extensions:\n  - \".txl\"\n  tm_scope: source.txl\n  ace_mode: text\n  language_id: 366\nTalon:\n  type: programming\n  ace_mode: text\n  color: \"#333333\"\n  extensions:\n  - \".talon\"\n  tm_scope: source.talon\n  language_id: 959889508\nTcl:\n  type: programming\n  color: \"#e4cc98\"\n  extensions:\n  - \".tcl\"\n  - \".adp\"\n  - \".sdc\"\n  - \".tcl.in\"\n  - \".tm\"\n  - \".xdc\"\n  aliases:\n  - sdc\n  - xdc\n  filenames:\n  - owh\n  - starfield\n  interpreters:\n  - tclsh\n  - wish\n  tm_scope: source.tcl\n  ace_mode: tcl\n  codemirror_mode: tcl\n  codemirror_mime_type: text/x-tcl\n  language_id: 367\nTcsh:\n  type: programming\n  group: Shell\n  extensions:\n  - \".tcsh\"\n  - \".csh\"\n  interpreters:\n  - tcsh\n  - csh\n  tm_scope: source.shell\n  ace_mode: sh\n  codemirror_mode: shell\n  codemirror_mime_type: text/x-sh\n  language_id: 368\nTeX:\n  type: markup\n  color: \"#3D6117\"\n  ace_mode: tex\n  codemirror_mode: stex\n  codemirror_mime_type: text/x-stex\n  tm_scope: text.tex.latex\n  wrap: true\n  aliases:\n  - latex\n  extensions:\n  - \".tex\"\n  - \".aux\"\n  - \".bbx\"\n  - \".cbx\"\n  - \".cls\"\n  - \".dtx\"\n  - \".ins\"\n  - \".lbx\"\n  - \".ltx\"\n  - \".mkii\"\n  - \".mkiv\"\n  - \".mkvi\"\n  - \".sty\"\n  - \".toc\"\n  language_id: 369\nTea:\n  type: markup\n  extensions:\n  - \".tea\"\n  tm_scope: source.tea\n  ace_mode: text\n  language_id: 370\nTerra:\n  type: programming\n  extensions:\n  - \".t\"\n  color: \"#00004c\"\n  tm_scope: source.terra\n  ace_mode: lua\n  codemirror_mode: lua\n  codemirror_mime_type: text/x-lua\n  interpreters:\n  - lua\n  language_id: 371\nTerraform Template:\n  type: markup\n  extensions:\n  - \".tftpl\"\n  color: \"#7b42bb\"\n  tm_scope: source.hcl.terraform\n  ace_mode: ruby\n  codemirror_mode: ruby\n  codemirror_mime_type: text/x-ruby\n  group: HCL\n  language_id: 856832701\nTexinfo:\n  type: prose\n  wrap: true\n  extensions:\n  - \".texinfo\"\n  - \".texi\"\n  - \".txi\"\n  ace_mode: text\n  tm_scope: text.texinfo\n  interpreters:\n  - makeinfo\n  language_id: 988020015\nText:\n  type: prose\n  wrap: true\n  aliases:\n  - fundamental\n  - plain text\n  extensions:\n  - \".txt\"\n  - \".fr\"\n  - \".nb\"\n  - \".ncl\"\n  - \".no\"\n  filenames:\n  - CITATION\n  - CITATIONS\n  - COPYING\n  - COPYING.regex\n  - COPYRIGHT.regex\n  - FONTLOG\n  - INSTALL\n  - INSTALL.mysql\n  - LICENSE\n  - LICENSE.mysql\n  - NEWS\n  - README.me\n  - README.mysql\n  - README.nss\n  - click.me\n  - delete.me\n  - keep.me\n  - package.mask\n  - package.use.mask\n  - package.use.stable.mask\n  - read.me\n  - readme.1st\n  - test.me\n  - use.mask\n  - use.stable.mask\n  tm_scope: none\n  ace_mode: text\n  language_id: 372\nTextGrid:\n  type: data\n  color: \"#c8506d\"\n  tm_scope: source.textgrid\n  ace_mode: text\n  extensions:\n  - \".TextGrid\"\n  language_id: 965696054\nTextMate Properties:\n  type: data\n  color: \"#df66e4\"\n  aliases:\n  - tm-properties\n  filenames:\n  - \".tm_properties\"\n  ace_mode: properties\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  tm_scope: source.tm-properties\n  language_id: 981795023\nTextile:\n  type: prose\n  color: \"#ffe7ac\"\n  ace_mode: textile\n  codemirror_mode: textile\n  codemirror_mime_type: text/x-textile\n  wrap: true\n  extensions:\n  - \".textile\"\n  tm_scope: none\n  language_id: 373\nThrift:\n  type: programming\n  color: \"#D12127\"\n  tm_scope: source.thrift\n  extensions:\n  - \".thrift\"\n  ace_mode: text\n  language_id: 374\nToit:\n  type: programming\n  color: \"#c2c9fb\"\n  extensions:\n  - \".toit\"\n  tm_scope: source.toit\n  ace_mode: text\n  language_id: 356554395\nTuring:\n  type: programming\n  color: \"#cf142b\"\n  extensions:\n  - \".t\"\n  - \".tu\"\n  tm_scope: source.turing\n  ace_mode: text\n  language_id: 375\nTurtle:\n  type: data\n  extensions:\n  - \".ttl\"\n  tm_scope: source.turtle\n  ace_mode: text\n  codemirror_mode: turtle\n  codemirror_mime_type: text/turtle\n  language_id: 376\nTwig:\n  type: markup\n  color: \"#c1d026\"\n  extensions:\n  - \".twig\"\n  tm_scope: text.html.twig\n  ace_mode: twig\n  codemirror_mode: twig\n  codemirror_mime_type: text/x-twig\n  language_id: 377\nType Language:\n  type: data\n  aliases:\n  - tl\n  extensions:\n  - \".tl\"\n  tm_scope: source.tl\n  ace_mode: text\n  language_id: 632765617\nTypeScript:\n  type: programming\n  color: \"#3178c6\"\n  aliases:\n  - ts\n  interpreters:\n  - deno\n  - ts-node\n  - tsx\n  extensions:\n  - \".ts\"\n  - \".cts\"\n  - \".mts\"\n  tm_scope: source.ts\n  ace_mode: typescript\n  codemirror_mode: javascript\n  codemirror_mime_type: application/typescript\n  language_id: 378\nTypst:\n  type: programming\n  color: \"#239dad\"\n  aliases:\n  - typ\n  extensions:\n  - \".typ\"\n  tm_scope: source.typst\n  ace_mode: text\n  language_id: 704730682\nUnified Parallel C:\n  type: programming\n  color: \"#4e3617\"\n  group: C\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  extensions:\n  - \".upc\"\n  tm_scope: source.c\n  language_id: 379\nUnity3D Asset:\n  type: data\n  color: \"#222c37\"\n  ace_mode: yaml\n  codemirror_mode: yaml\n  codemirror_mime_type: text/x-yaml\n  extensions:\n  - \".anim\"\n  - \".asset\"\n  - \".mask\"\n  - \".mat\"\n  - \".meta\"\n  - \".prefab\"\n  - \".unity\"\n  tm_scope: source.yaml\n  language_id: 380\nUnix Assembly:\n  type: programming\n  group: Assembly\n  extensions:\n  - \".s\"\n  - \".ms\"\n  aliases:\n  - gas\n  - gnu asm\n  - unix asm\n  tm_scope: source.x86\n  ace_mode: assembly_x86\n  language_id: 120\nUno:\n  type: programming\n  color: \"#9933cc\"\n  extensions:\n  - \".uno\"\n  ace_mode: csharp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csharp\n  tm_scope: source.cs\n  language_id: 381\nUnrealScript:\n  type: programming\n  color: \"#a54c4d\"\n  extensions:\n  - \".uc\"\n  tm_scope: source.java\n  ace_mode: java\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-java\n  language_id: 382\nUrWeb:\n  type: programming\n  color: \"#ccccee\"\n  aliases:\n  - Ur/Web\n  - Ur\n  extensions:\n  - \".ur\"\n  - \".urs\"\n  tm_scope: source.ur\n  ace_mode: text\n  language_id: 383\nV:\n  type: programming\n  color: \"#4f87c4\"\n  aliases:\n  - vlang\n  extensions:\n  - \".v\"\n  tm_scope: source.v\n  ace_mode: golang\n  codemirror_mode: go\n  codemirror_mime_type: text/x-go\n  language_id: 603371597\nVBA:\n  type: programming\n  color: \"#867db1\"\n  extensions:\n  - \".bas\"\n  - \".cls\"\n  - \".frm\"\n  - \".vba\"\n  tm_scope: source.vba\n  aliases:\n  - visual basic for applications\n  ace_mode: text\n  codemirror_mode: vb\n  codemirror_mime_type: text/x-vb\n  language_id: 399230729\nVBScript:\n  type: programming\n  color: \"#15dcdc\"\n  extensions:\n  - \".vbs\"\n  tm_scope: source.vbnet\n  ace_mode: text\n  codemirror_mode: vbscript\n  codemirror_mime_type: text/vbscript\n  language_id: 408016005\nVCL:\n  type: programming\n  color: \"#148AA8\"\n  extensions:\n  - \".vcl\"\n  tm_scope: source.varnish.vcl\n  ace_mode: text\n  language_id: 384\nVHDL:\n  type: programming\n  color: \"#adb2cb\"\n  extensions:\n  - \".vhdl\"\n  - \".vhd\"\n  - \".vhf\"\n  - \".vhi\"\n  - \".vho\"\n  - \".vhs\"\n  - \".vht\"\n  - \".vhw\"\n  tm_scope: source.vhdl\n  ace_mode: vhdl\n  codemirror_mode: vhdl\n  codemirror_mime_type: text/x-vhdl\n  language_id: 385\nVala:\n  type: programming\n  color: \"#a56de2\"\n  extensions:\n  - \".vala\"\n  - \".vapi\"\n  tm_scope: source.vala\n  ace_mode: vala\n  language_id: 386\nValve Data Format:\n  type: data\n  color: \"#f26025\"\n  aliases:\n  - keyvalues\n  - vdf\n  extensions:\n  - \".vdf\"\n  ace_mode: text\n  tm_scope: source.keyvalues\n  language_id: 544060961\nVelocity Template Language:\n  type: markup\n  color: \"#507cff\"\n  aliases:\n  - vtl\n  - velocity\n  extensions:\n  - \".vtl\"\n  ace_mode: velocity\n  tm_scope: source.velocity\n  codemirror_mode: velocity\n  codemirror_mime_type: text/velocity\n  language_id: 292377326\nVerilog:\n  type: programming\n  color: \"#b2b7f8\"\n  extensions:\n  - \".v\"\n  - \".veo\"\n  tm_scope: source.verilog\n  ace_mode: verilog\n  codemirror_mode: verilog\n  codemirror_mime_type: text/x-verilog\n  language_id: 387\nVim Help File:\n  type: prose\n  color: \"#199f4b\"\n  aliases:\n  - help\n  - vimhelp\n  extensions:\n  - \".txt\"\n  tm_scope: text.vim-help\n  ace_mode: text\n  language_id: 508563686\nVim Script:\n  type: programming\n  color: \"#199f4b\"\n  tm_scope: source.viml\n  aliases:\n  - vim\n  - viml\n  - nvim\n  - vimscript\n  extensions:\n  - \".vim\"\n  - \".vba\"\n  - \".vimrc\"\n  - \".vmb\"\n  filenames:\n  - \".exrc\"\n  - \".gvimrc\"\n  - \".nvimrc\"\n  - \".vimrc\"\n  - _vimrc\n  - gvimrc\n  - nvimrc\n  - vimrc\n  ace_mode: text\n  language_id: 388\nVim Snippet:\n  type: markup\n  color: \"#199f4b\"\n  aliases:\n  - SnipMate\n  - UltiSnip\n  - UltiSnips\n  - NeoSnippet\n  extensions:\n  - \".snip\"\n  - \".snippet\"\n  - \".snippets\"\n  tm_scope: source.vim-snippet\n  ace_mode: text\n  language_id: 81265970\nVisual Basic .NET:\n  type: programming\n  color: \"#945db7\"\n  extensions:\n  - \".vb\"\n  - \".vbhtml\"\n  aliases:\n  - visual basic\n  - vbnet\n  - vb .net\n  - vb.net\n  tm_scope: source.vbnet\n  ace_mode: text\n  codemirror_mode: vb\n  codemirror_mime_type: text/x-vb\n  language_id: 389\nVisual Basic 6.0:\n  type: programming\n  color: \"#2c6353\"\n  extensions:\n  - \".bas\"\n  - \".cls\"\n  - \".ctl\"\n  - \".Dsr\"\n  - \".frm\"\n  tm_scope: source.vba\n  aliases:\n  - vb6\n  - vb 6\n  - visual basic 6\n  - visual basic classic\n  - classic visual basic\n  ace_mode: text\n  codemirror_mode: vb\n  codemirror_mime_type: text/x-vb\n  language_id: 679594952\nVolt:\n  type: programming\n  color: \"#1F1F1F\"\n  extensions:\n  - \".volt\"\n  tm_scope: source.d\n  ace_mode: d\n  codemirror_mode: d\n  codemirror_mime_type: text/x-d\n  language_id: 390\nVue:\n  type: markup\n  color: \"#41b883\"\n  extensions:\n  - \".vue\"\n  tm_scope: text.html.vue\n  ace_mode: html\n  language_id: 391\nVyper:\n  type: programming\n  extensions:\n  - \".vy\"\n  color: \"#2980b9\"\n  ace_mode: text\n  tm_scope: source.vyper\n  language_id: 1055641948\nWDL:\n  aliases:\n  - Workflow Description Language\n  type: programming\n  color: \"#42f1f4\"\n  extensions:\n  - \".wdl\"\n  tm_scope: source.wdl\n  ace_mode: text\n  language_id: 374521672\nWGSL:\n  type: programming\n  color: \"#1a5e9a\"\n  extensions:\n  - \".wgsl\"\n  tm_scope: source.wgsl\n  ace_mode: text\n  language_id: 836605993\nWavefront Material:\n  type: data\n  extensions:\n  - \".mtl\"\n  tm_scope: source.wavefront.mtl\n  ace_mode: text\n  language_id: 392\nWavefront Object:\n  type: data\n  extensions:\n  - \".obj\"\n  tm_scope: source.wavefront.obj\n  ace_mode: text\n  language_id: 393\nWeb Ontology Language:\n  type: data\n  color: \"#5b70bd\"\n  extensions:\n  - \".owl\"\n  tm_scope: text.xml\n  ace_mode: xml\n  language_id: 394\nWebAssembly:\n  type: programming\n  color: \"#04133b\"\n  extensions:\n  - \".wast\"\n  - \".wat\"\n  aliases:\n  - wast\n  - wasm\n  tm_scope: source.webassembly\n  ace_mode: lisp\n  codemirror_mode: commonlisp\n  codemirror_mime_type: text/x-common-lisp\n  language_id: 956556503\nWebAssembly Interface Type:\n  type: data\n  color: \"#6250e7\"\n  extensions:\n  - \".wit\"\n  aliases:\n  - wit\n  ace_mode: text\n  tm_scope: source.wit\n  codemirror_mode: webidl\n  codemirror_mime_type: text/x-webidl\n  language_id: 134534086\nWebIDL:\n  type: programming\n  extensions:\n  - \".webidl\"\n  tm_scope: source.webidl\n  ace_mode: text\n  codemirror_mode: webidl\n  codemirror_mime_type: text/x-webidl\n  language_id: 395\nWebVTT:\n  type: data\n  wrap: true\n  aliases:\n  - vtt\n  extensions:\n  - \".vtt\"\n  tm_scope: text.vtt\n  ace_mode: text\n  language_id: 658679714\nWget Config:\n  type: data\n  group: INI\n  aliases:\n  - wgetrc\n  filenames:\n  - \".wgetrc\"\n  tm_scope: source.wgetrc\n  ace_mode: text\n  language_id: 668457123\nWhiley:\n  type: programming\n  color: \"#d5c397\"\n  extensions:\n  - \".whiley\"\n  tm_scope: source.whiley\n  ace_mode: text\n  language_id: 888779559\nWikitext:\n  type: prose\n  color: \"#fc5757\"\n  wrap: true\n  aliases:\n  - mediawiki\n  - wiki\n  extensions:\n  - \".mediawiki\"\n  - \".wiki\"\n  - \".wikitext\"\n  tm_scope: text.html.mediawiki\n  ace_mode: text\n  language_id: 228\nWin32 Message File:\n  type: data\n  extensions:\n  - \".mc\"\n  tm_scope: source.win32-messages\n  ace_mode: ini\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  language_id: 950967261\nWindows Registry Entries:\n  type: data\n  color: \"#52d5ff\"\n  extensions:\n  - \".reg\"\n  tm_scope: source.reg\n  ace_mode: ini\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  language_id: 969674868\nWitcher Script:\n  type: programming\n  color: \"#ff0000\"\n  extensions:\n  - \".ws\"\n  ace_mode: text\n  tm_scope: source.witcherscript\n  language_id: 686821385\nWollok:\n  type: programming\n  color: \"#a23738\"\n  extensions:\n  - \".wlk\"\n  ace_mode: text\n  tm_scope: source.wollok\n  language_id: 632745969\nWorld of Warcraft Addon Data:\n  type: data\n  color: \"#f7e43f\"\n  extensions:\n  - \".toc\"\n  tm_scope: source.toc\n  ace_mode: text\n  language_id: 396\nWren:\n  type: programming\n  color: \"#383838\"\n  aliases:\n  - wrenlang\n  extensions:\n  - \".wren\"\n  tm_scope: source.wren\n  ace_mode: text\n  language_id: 713580619\nX BitMap:\n  type: data\n  group: C\n  aliases:\n  - xbm\n  extensions:\n  - \".xbm\"\n  ace_mode: c_cpp\n  tm_scope: source.c\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  language_id: 782911107\nX Font Directory Index:\n  type: data\n  filenames:\n  - encodings.dir\n  - fonts.alias\n  - fonts.dir\n  - fonts.scale\n  tm_scope: source.fontdir\n  ace_mode: text\n  language_id: 208700028\nX PixMap:\n  type: data\n  group: C\n  aliases:\n  - xpm\n  extensions:\n  - \".xpm\"\n  - \".pm\"\n  ace_mode: c_cpp\n  tm_scope: source.c\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  language_id: 781846279\nX10:\n  type: programming\n  aliases:\n  - xten\n  ace_mode: text\n  extensions:\n  - \".x10\"\n  color: \"#4B6BEF\"\n  tm_scope: source.x10\n  language_id: 397\nXC:\n  type: programming\n  color: \"#99DA07\"\n  extensions:\n  - \".xc\"\n  tm_scope: source.xc\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  language_id: 398\nXCompose:\n  type: data\n  filenames:\n  - \".XCompose\"\n  - XCompose\n  - xcompose\n  tm_scope: config.xcompose\n  ace_mode: text\n  language_id: 225167241\nXML:\n  type: data\n  color: \"#0060ac\"\n  tm_scope: text.xml\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  aliases:\n  - rss\n  - xsd\n  - wsdl\n  extensions:\n  - \".xml\"\n  - \".adml\"\n  - \".admx\"\n  - \".ant\"\n  - \".axaml\"\n  - \".axml\"\n  - \".builds\"\n  - \".ccproj\"\n  - \".ccxml\"\n  - \".clixml\"\n  - \".cproject\"\n  - \".cscfg\"\n  - \".csdef\"\n  - \".csl\"\n  - \".csproj\"\n  - \".ct\"\n  - \".depproj\"\n  - \".dita\"\n  - \".ditamap\"\n  - \".ditaval\"\n  - \".dll.config\"\n  - \".dotsettings\"\n  - \".filters\"\n  - \".fsproj\"\n  - \".fxml\"\n  - \".glade\"\n  - \".gml\"\n  - \".gmx\"\n  - \".grxml\"\n  - \".gst\"\n  - \".hzp\"\n  - \".iml\"\n  - \".ivy\"\n  - \".jelly\"\n  - \".jsproj\"\n  - \".kml\"\n  - \".launch\"\n  - \".mdpolicy\"\n  - \".mjml\"\n  - \".mm\"\n  - \".mod\"\n  - \".mojo\"\n  - \".mxml\"\n  - \".natvis\"\n  - \".ncl\"\n  - \".ndproj\"\n  - \".nproj\"\n  - \".nuspec\"\n  - \".odd\"\n  - \".osm\"\n  - \".pkgproj\"\n  - \".pluginspec\"\n  - \".proj\"\n  - \".props\"\n  - \".ps1xml\"\n  - \".psc1\"\n  - \".pt\"\n  - \".qhelp\"\n  - \".rdf\"\n  - \".res\"\n  - \".resx\"\n  - \".rs\"\n  - \".rss\"\n  - \".sch\"\n  - \".scxml\"\n  - \".sfproj\"\n  - \".shproj\"\n  - \".srdf\"\n  - \".storyboard\"\n  - \".sublime-snippet\"\n  - \".sw\"\n  - \".targets\"\n  - \".tml\"\n  - \".ts\"\n  - \".tsx\"\n  - \".typ\"\n  - \".ui\"\n  - \".urdf\"\n  - \".ux\"\n  - \".vbproj\"\n  - \".vcxproj\"\n  - \".vsixmanifest\"\n  - \".vssettings\"\n  - \".vstemplate\"\n  - \".vxml\"\n  - \".wixproj\"\n  - \".workflow\"\n  - \".wsdl\"\n  - \".wsf\"\n  - \".wxi\"\n  - \".wxl\"\n  - \".wxs\"\n  - \".x3d\"\n  - \".xacro\"\n  - \".xaml\"\n  - \".xib\"\n  - \".xlf\"\n  - \".xliff\"\n  - \".xmi\"\n  - \".xml.dist\"\n  - \".xmp\"\n  - \".xproj\"\n  - \".xsd\"\n  - \".xspec\"\n  - \".xul\"\n  - \".zcml\"\n  filenames:\n  - \".classpath\"\n  - \".cproject\"\n  - \".project\"\n  - App.config\n  - NuGet.config\n  - Settings.StyleCop\n  - Web.Debug.config\n  - Web.Release.config\n  - Web.config\n  - packages.config\n  language_id: 399\nXML Property List:\n  type: data\n  color: \"#0060ac\"\n  group: XML\n  extensions:\n  - \".plist\"\n  - \".stTheme\"\n  - \".tmCommand\"\n  - \".tmLanguage\"\n  - \".tmPreferences\"\n  - \".tmSnippet\"\n  - \".tmTheme\"\n  tm_scope: text.xml.plist\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  language_id: 75622871\nXPages:\n  type: data\n  extensions:\n  - \".xsp-config\"\n  - \".xsp.metadata\"\n  tm_scope: text.xml\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  language_id: 400\nXProc:\n  type: programming\n  extensions:\n  - \".xpl\"\n  - \".xproc\"\n  tm_scope: text.xml\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  language_id: 401\nXQuery:\n  type: programming\n  color: \"#5232e7\"\n  extensions:\n  - \".xquery\"\n  - \".xq\"\n  - \".xql\"\n  - \".xqm\"\n  - \".xqy\"\n  ace_mode: xquery\n  codemirror_mode: xquery\n  codemirror_mime_type: application/xquery\n  tm_scope: source.xq\n  language_id: 402\nXS:\n  type: programming\n  extensions:\n  - \".xs\"\n  tm_scope: source.c\n  ace_mode: c_cpp\n  codemirror_mode: clike\n  codemirror_mime_type: text/x-csrc\n  language_id: 403\nXSLT:\n  type: programming\n  aliases:\n  - xsl\n  extensions:\n  - \".xslt\"\n  - \".xsl\"\n  tm_scope: text.xml.xsl\n  ace_mode: xml\n  codemirror_mode: xml\n  codemirror_mime_type: text/xml\n  color: \"#EB8CEB\"\n  language_id: 404\nXojo:\n  type: programming\n  color: \"#81bd41\"\n  extensions:\n  - \".xojo_code\"\n  - \".xojo_menu\"\n  - \".xojo_report\"\n  - \".xojo_script\"\n  - \".xojo_toolbar\"\n  - \".xojo_window\"\n  tm_scope: source.xojo\n  ace_mode: text\n  language_id: 405\nXonsh:\n  type: programming\n  color: \"#285EEF\"\n  extensions:\n  - \".xsh\"\n  tm_scope: source.python\n  ace_mode: text\n  codemirror_mode: python\n  codemirror_mime_type: text/x-python\n  language_id: 614078284\nXtend:\n  type: programming\n  color: \"#24255d\"\n  extensions:\n  - \".xtend\"\n  tm_scope: source.xtend\n  ace_mode: text\n  language_id: 406\nYAML:\n  type: data\n  color: \"#cb171e\"\n  tm_scope: source.yaml\n  aliases:\n  - yml\n  extensions:\n  - \".yml\"\n  - \".mir\"\n  - \".reek\"\n  - \".rviz\"\n  - \".sublime-syntax\"\n  - \".syntax\"\n  - \".yaml\"\n  - \".yaml-tmlanguage\"\n  - \".yaml.sed\"\n  - \".yml.mysql\"\n  filenames:\n  - \".clang-format\"\n  - \".clang-tidy\"\n  - \".gemrc\"\n  - CITATION.cff\n  - glide.lock\n  - yarn.lock\n  ace_mode: yaml\n  codemirror_mode: yaml\n  codemirror_mime_type: text/x-yaml\n  language_id: 407\nYANG:\n  type: data\n  extensions:\n  - \".yang\"\n  tm_scope: source.yang\n  ace_mode: text\n  language_id: 408\nYARA:\n  type: programming\n  color: \"#220000\"\n  ace_mode: text\n  extensions:\n  - \".yar\"\n  - \".yara\"\n  tm_scope: source.yara\n  language_id: 805122868\nYASnippet:\n  type: markup\n  aliases:\n  - snippet\n  - yas\n  color: \"#32AB90\"\n  extensions:\n  - \".yasnippet\"\n  tm_scope: source.yasnippet\n  ace_mode: text\n  language_id: 378760102\nYacc:\n  type: programming\n  extensions:\n  - \".y\"\n  - \".yacc\"\n  - \".yy\"\n  tm_scope: source.yacc\n  ace_mode: text\n  color: \"#4B6C4B\"\n  language_id: 409\nYul:\n  type: programming\n  color: \"#794932\"\n  ace_mode: text\n  tm_scope: source.yul\n  extensions:\n  - \".yul\"\n  language_id: 237469033\nZAP:\n  type: programming\n  color: \"#0d665e\"\n  extensions:\n  - \".zap\"\n  - \".xzap\"\n  tm_scope: source.zap\n  ace_mode: text\n  language_id: 952972794\nZIL:\n  type: programming\n  color: \"#dc75e5\"\n  extensions:\n  - \".zil\"\n  - \".mud\"\n  tm_scope: source.zil\n  ace_mode: text\n  language_id: 973483626\nZeek:\n  type: programming\n  aliases:\n  - bro\n  extensions:\n  - \".zeek\"\n  - \".bro\"\n  tm_scope: source.zeek\n  ace_mode: text\n  language_id: 40\nZenScript:\n  type: programming\n  color: \"#00BCD1\"\n  extensions:\n  - \".zs\"\n  tm_scope: source.zenscript\n  ace_mode: text\n  language_id: 494938890\nZephir:\n  type: programming\n  color: \"#118f9e\"\n  extensions:\n  - \".zep\"\n  tm_scope: source.php.zephir\n  ace_mode: php\n  language_id: 410\nZig:\n  type: programming\n  color: \"#ec915c\"\n  extensions:\n  - \".zig\"\n  - \".zig.zon\"\n  tm_scope: source.zig\n  ace_mode: text\n  language_id: 646424281\nZimpl:\n  type: programming\n  color: \"#d67711\"\n  extensions:\n  - \".zimpl\"\n  - \".zmpl\"\n  - \".zpl\"\n  tm_scope: none\n  ace_mode: text\n  language_id: 411\ncURL Config:\n  type: data\n  group: INI\n  aliases:\n  - curlrc\n  filenames:\n  - \".curlrc\"\n  - _curlrc\n  tm_scope: source.curlrc\n  ace_mode: text\n  language_id: 992375436\ncrontab:\n  type: data\n  color: \"#ead7ac\"\n  aliases:\n  - cron\n  - cron table\n  filenames:\n  - crontab\n  tm_scope: text.crontab\n  ace_mode: tcl\n  language_id: 705203557\ndesktop:\n  type: data\n  extensions:\n  - \".desktop\"\n  - \".desktop.in\"\n  - \".service\"\n  tm_scope: source.desktop\n  ace_mode: text\n  language_id: 412\ndircolors:\n  type: data\n  extensions:\n  - \".dircolors\"\n  filenames:\n  - \".dir_colors\"\n  - \".dircolors\"\n  - DIR_COLORS\n  - _dir_colors\n  - _dircolors\n  - dir_colors\n  tm_scope: source.dircolors\n  ace_mode: text\n  language_id: 691605112\neC:\n  type: programming\n  color: \"#913960\"\n  extensions:\n  - \".ec\"\n  - \".eh\"\n  tm_scope: source.c.ec\n  ace_mode: text\n  language_id: 413\nedn:\n  type: data\n  ace_mode: clojure\n  codemirror_mode: clojure\n  codemirror_mime_type: text/x-clojure\n  extensions:\n  - \".edn\"\n  tm_scope: source.clojure\n  language_id: 414\nfish:\n  type: programming\n  color: \"#4aae47\"\n  group: Shell\n  interpreters:\n  - fish\n  extensions:\n  - \".fish\"\n  tm_scope: source.fish\n  ace_mode: text\n  language_id: 415\nhoon:\n  type: programming\n  color: \"#00b171\"\n  tm_scope: source.hoon\n  ace_mode: text\n  extensions:\n  - \".hoon\"\n  language_id: 560883276\niCalendar:\n  type: data\n  color: \"#ec564c\"\n  extensions:\n  - \".ics\"\n  - \".ical\"\n  tm_scope: source.iCalendar\n  aliases:\n  - iCal\n  ace_mode: properties\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  language_id: 98384424\njq:\n  color: \"#c7254e\"\n  ace_mode: text\n  type: programming\n  extensions:\n  - \".jq\"\n  interpreters:\n  - gojq\n  - jaq\n  - jq\n  - jqjq\n  - jqq\n  - query-json\n  tm_scope: source.jq\n  language_id: 905371884\nkvlang:\n  type: markup\n  ace_mode: text\n  extensions:\n  - \".kv\"\n  color: \"#1da6e0\"\n  tm_scope: source.python.kivy\n  language_id: 970675279\nmIRC Script:\n  type: programming\n  color: \"#3d57c3\"\n  extensions:\n  - \".mrc\"\n  tm_scope: source.msl\n  ace_mode: text\n  language_id: 517654727\nmcfunction:\n  type: programming\n  color: \"#E22837\"\n  extensions:\n  - \".mcfunction\"\n  tm_scope: source.mcfunction\n  ace_mode: text\n  language_id: 462488745\nmupad:\n  type: programming\n  color: \"#244963\"\n  extensions:\n  - \".mu\"\n  tm_scope: source.mupad\n  ace_mode: text\n  language_id: 416\nnanorc:\n  type: data\n  color: \"#2d004d\"\n  group: INI\n  extensions:\n  - \".nanorc\"\n  filenames:\n  - \".nanorc\"\n  - nanorc\n  tm_scope: source.nanorc\n  ace_mode: text\n  language_id: 775996197\nnesC:\n  type: programming\n  color: \"#94B0C7\"\n  extensions:\n  - \".nc\"\n  ace_mode: text\n  tm_scope: source.nesc\n  language_id: 417\nooc:\n  type: programming\n  color: \"#b0b77e\"\n  extensions:\n  - \".ooc\"\n  tm_scope: source.ooc\n  ace_mode: text\n  language_id: 418\nq:\n  type: programming\n  extensions:\n  - \".q\"\n  tm_scope: source.q\n  ace_mode: text\n  color: \"#0040cd\"\n  language_id: 970539067\nreStructuredText:\n  type: prose\n  color: \"#141414\"\n  wrap: true\n  aliases:\n  - rst\n  extensions:\n  - \".rst\"\n  - \".rest\"\n  - \".rest.txt\"\n  - \".rst.txt\"\n  tm_scope: text.restructuredtext\n  ace_mode: text\n  codemirror_mode: rst\n  codemirror_mime_type: text/x-rst\n  language_id: 419\nrobots.txt:\n  type: data\n  aliases:\n  - robots\n  - robots txt\n  filenames:\n  - robots.txt\n  ace_mode: text\n  tm_scope: text.robots-txt\n  language_id: 674736065\nsed:\n  type: programming\n  color: \"#64b970\"\n  extensions:\n  - \".sed\"\n  interpreters:\n  - gsed\n  - minised\n  - sed\n  - ssed\n  ace_mode: text\n  tm_scope: source.sed\n  language_id: 847830017\ntempl:\n  type: markup\n  color: \"#66D0DD\"\n  extensions:\n  - \".templ\"\n  ace_mode: text\n  tm_scope: source.templ\n  language_id: 795579337\nvCard:\n  type: data\n  color: \"#ee2647\"\n  extensions:\n  - \".vcf\"\n  tm_scope: source.vcard\n  aliases:\n  - virtual contact file\n  - electronic business card\n  ace_mode: properties\n  codemirror_mode: properties\n  codemirror_mime_type: text/x-properties\n  language_id: 851476558\nwisp:\n  type: programming\n  ace_mode: clojure\n  codemirror_mode: clojure\n  codemirror_mime_type: text/x-clojure\n  color: \"#7582D1\"\n  extensions:\n  - \".wisp\"\n  tm_scope: source.clojure\n  language_id: 420\nxBase:\n  type: programming\n  color: \"#403a40\"\n  aliases:\n  - advpl\n  - clipper\n  - foxpro\n  extensions:\n  - \".prg\"\n  - \".ch\"\n  - \".prw\"\n  tm_scope: source.harbour\n  ace_mode: text\n  language_id: 421"
            }
        },
        {
            "file": {
                "File": "SentenceFromParagraphPipe.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_pipe/SentenceFromParagraphPipe.py",
                "Relative Path": "com_worktwins_pipe/SentenceFromParagraphPipe.py",
                "Size": 0,
                "Last Modified": "2024-12-04 16:49:04",
                "Lines": 0,
                "Source_Code": ""
            }
        },
        {
            "file": {
                "File": "SourceCodeExtractorPipe.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_pipe/SourceCodeExtractorPipe.py",
                "Relative Path": "com_worktwins_pipe/SourceCodeExtractorPipe.py",
                "Size": 3211,
                "Last Modified": "2024-12-05 15:04:45",
                "Lines": 86,
                "Source_Code": "import re\nimport hashlib\nfrom collections import defaultdict\nfrom pygments.lexers import guess_lexer, ClassNotFound\nfrom com_worktwins_languages.Language import Language\nfrom com_worktwins_pipe.Pipe import Pipe  # Import the base Pipe class\n\nclass SourceCodeExtractorPipe(Pipe):\n    \"\"\"\n    A Pipe subclass to extract source code snippets from text and determine their programming languages.\n    \"\"\"\n    def run(self, input_data):\n        \"\"\"\n        Extracts source code snippets from raw text.\n\n        Args:\n            input_data (dict): Input JSON containing \"raw_text\".\n\n        Returns:\n            dict: JSON containing a list of extracted code snippets with metadata.\n        \"\"\"\n\n        code_snippets = self.extract_code_snippets_v2(input_data)\n        return {\"code_snippets\": code_snippets}\n\n    @staticmethod\n    def extract_code_snippets_v2(text):\n        \"\"\"\n        Enhanced extraction of code snippets with dynamic fallback based on book context.\n\n        Args:\n            text (str): The raw text extracted from a document.\n\n        Returns:\n            list: A list of dictionaries, each representing a code snippet with metadata.\n        \"\"\"\n        # Load the list of programming languages\n        language_list = Language.load_languages()\n        valid_languages = set(language_list.keys())  # Get all language names\n\n        # Count standalone occurrences of programming languages in the text\n        def count_standalone_occurrences(word, text):\n            pattern = rf'\\b{re.escape(word)}\\b'\n            return len(re.findall(pattern, text, re.IGNORECASE))\n\n        language_occurrences = defaultdict(int)\n        for language in valid_languages:\n            count = count_standalone_occurrences(language, text)\n            if count > 0:\n                language_occurrences[language] += count\n\n        # Determine the most frequent language in the book\n        most_frequent_language = max(language_occurrences, key=language_occurrences.get, default=\"unknown\")\n\n        # Regex to detect multi-line code blocks (at least 2 lines of indented code)\n        code_block_pattern = re.compile(r'((?:^(?: {4}|\\t).+\\n)+)', re.MULTILINE)\n        snippet_list = []\n        language_frequencies = defaultdict(int)\n\n        # Process snippets and detect languages\n        for match in code_block_pattern.finditer(text):\n            code = match.group(0).strip()\n\n            # Attempt to guess the language\n            try:\n                lexer = guess_lexer(code)\n                lang = lexer.name if lexer.name in valid_languages else \"unknown\"\n            except ClassNotFound:\n                lang = \"unknown\"\n\n            # Update language frequencies\n            if lang != \"unknown\":\n                language_frequencies[lang] += 1\n            else:\n                lang = most_frequent_language  # Default to the most frequent language in the book\n\n            # Generate hash and add snippet\n            snippet_list.append({\n                \"id\": hashlib.md5(code.encode(\"utf-8\")).hexdigest(),\n                \"type\": \"source_code\",\n                \"text\": code,\n                \"programming_language\": lang,\n                \"weight\": 0.0\n            })\n\n        return snippet_list\n"
            }
        },
        {
            "file": {
                "File": "WordFrequenciesPipe.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_pipe/WordFrequenciesPipe.py",
                "Relative Path": "com_worktwins_pipe/WordFrequenciesPipe.py",
                "Size": 3559,
                "Last Modified": "2024-12-05 12:50:25",
                "Lines": 93,
                "Source_Code": "import os\nimport pandas as pd\nfrom collections import defaultdict\nfrom wordfreq import word_frequency\nfrom alive_progress import alive_bar\nfrom com_worktwins_pipe.Pipe import Pipe  # Import the base Pipe class\n\nclass WordFrequenciesPipe(Pipe):\n    \"\"\"\n    A Pipe subclass to generate word frequencies and related data from paragraphs.\n    \"\"\"\n    ENGLISH_TOP_PERCENTILE = 0.9  # Top 10% of English frequency\n    BOOK_TOP_PERCENTILE = 0.9  # Top 10% of book frequency\n\n    def run(self, input_data):\n        \"\"\"\n        Generate word frequencies and filter out connector words.\n\n        Args:\n            input_data (dict): Input JSON containing \"paragraphs\".\n\n        Returns:\n            list: JSON-compatible list of words with frequencies.\n        \"\"\"\n        word_frequencies = WordFrequenciesPipe.generate_frequencies(raw_text=input_data)\n\n        return word_frequencies\n\n    def generate_frequencies(raw_text):\n        \"\"\"\n        Generate word frequencies and related data directly from raw text.\n\n        Args:\n            raw_text (str): Raw text extracted from a document.\n\n        Returns:\n            list: Combined frequencies sorted by book_frequency descending and english_frequency ascending.\n        \"\"\"\n        from collections import defaultdict\n        import pandas as pd\n        from wordfreq import word_frequency\n        from alive_progress import alive_bar\n\n        ENGLISH_TOP_PERCENTILE = 0.9  # Top 10% of English frequency\n        BOOK_TOP_PERCENTILE = 0.9  # Top 10% of book frequency\n\n        word_counts = defaultdict(int)\n        word_paragraph_map = defaultdict(set)\n\n        # Split text into paragraphs (based on double newlines)\n        paragraphs = raw_text.split(\"\\n\\n\")\n\n        # Count word occurrences and map them to paragraphs\n        with alive_bar(len(paragraphs), title=\"Processing paragraphs\") as bar:\n            for idx, para in enumerate(paragraphs):\n                para = para.strip()\n                if not para:\n                    continue\n\n                words = [word.lower() for word in para.split() if word.isalnum()]\n                for word in words:\n                    word_counts[word] += 1\n                    word_paragraph_map[word].add(idx)\n                bar()\n\n        # Create a DataFrame for book word frequencies\n        book_freq_df = pd.DataFrame(\n            [(word, count, list(word_paragraph_map[word])) for word, count in word_counts.items()],\n            columns=[\"word\", \"book_frequency\", \"paragraphs\"],\n        )\n\n        # Add English language frequencies\n        book_freq_df[\"english_frequency\"] = book_freq_df[\"word\"].apply(lambda word: word_frequency(word, \"en\"))\n\n        # Exclude connector words based on thresholds\n        english_top_threshold = book_freq_df[\"english_frequency\"].quantile(ENGLISH_TOP_PERCENTILE)\n        book_top_threshold = book_freq_df[\"book_frequency\"].quantile(BOOK_TOP_PERCENTILE)\n\n        excluded_words = book_freq_df[\n            (book_freq_df[\"english_frequency\"] >= english_top_threshold) &\n            (book_freq_df[\"book_frequency\"] >= book_top_threshold)\n        ]\n\n        # Filter out excluded words\n        book_freq_df = book_freq_df[~book_freq_df[\"word\"].isin(excluded_words[\"word\"])]\n\n        # Sorting\n        combined_freq_df = book_freq_df.sort_values(by=[\"book_frequency\", \"english_frequency\"], ascending=[False, True])\n\n        # Convert to JSON-compatible list\n        combined_frequencies = combined_freq_df[[\"word\", \"book_frequency\", \"english_frequency\"]].to_dict(orient=\"records\")\n\n        return combined_frequencies\n"
            }
        },
        {
            "file": {
                "File": "SemanticTreePipe.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_pipe/SemanticTreePipe.py",
                "Relative Path": "com_worktwins_pipe/SemanticTreePipe.py",
                "Size": 4300,
                "Last Modified": "2024-12-04 22:56:10",
                "Lines": 102,
                "Source_Code": "import os\nfrom hashlib import sha256\nfrom alive_progress import alive_bar\nfrom com_worktwins_pipe.Pipe import Pipe  # Import the base Pipe class\n\nclass SemanticTreePipe(Pipe):\n    \"\"\"\n    A Pipe subclass to generate a semantic tree from normalized paragraphs.\n    \"\"\"\n    def run(self, input_data):\n        \"\"\"\n        Generates a semantic tree from normalized paragraphs based on keywords.\n\n        Args:\n            input_data (dict): Input JSON containing \"normalized_paragraphs\", \"book_frequencies\", and \"english_frequencies\".\n\n        Returns:\n            dict: JSON representing the semantic tree.\n        \"\"\"\n        normalized_paragraphs = input_data.get(\"normalized_paragraphs\", [])\n        book_freq = input_data.get(\"book_frequencies\", [])\n        english_freq = input_data.get(\"english_frequencies\", [])\n\n        # Convert frequencies to dictionaries for quick lookups\n        book_freq_dict = {item[\"word\"]: item[\"book_frequency\"] for item in book_freq}\n        english_freq_dict = {item[\"word\"]: item[\"english_frequency\"] for item in english_freq}\n\n        # Generate the semantic tree\n        semantic_tree = self.generate_semantic_tree(normalized_paragraphs, book_freq_dict, english_freq_dict)\n        return {\"semantic_tree\": semantic_tree}\n\n    def generate_semantic_tree(self, normalized_paragraphs, book_freq_dict, english_freq_dict):\n        \"\"\"\n        Generate a semantic tree from normalized paragraphs based on keywords.\n\n        Args:\n            normalized_paragraphs (list): List of dictionaries with normalized paragraphs.\n            book_freq_dict (dict): Dictionary of book word frequencies.\n            english_freq_dict (dict): Dictionary of English word frequencies.\n\n        Returns:\n            dict: A semantic tree structure with hierarchical relationships between keywords.\n        \"\"\"\n        def generate_hash_from_keywords_with_frequency(keywords):\n            \"\"\"\n            Generate a unique ID for a semantic unit based on keyword frequencies.\n            \"\"\"\n            enriched_keywords = [\n                {\n                    \"word\": keyword,\n                    \"book_freq\": book_freq_dict.get(keyword, 0),\n                    \"english_freq\": english_freq_dict.get(keyword, float('inf')),\n                }\n                for keyword in keywords\n            ]\n\n            # Sort by book frequency (desc), then by English frequency (asc)\n            enriched_keywords.sort(key=lambda x: (-x[\"book_freq\"], x[\"english_freq\"]))\n\n            # Weighted sum to ensure order independence\n            sum_value = sum(\n                (index + 1) * (data[\"book_freq\"] - data[\"english_freq\"])\n                for index, data in enumerate(enriched_keywords)\n            )\n            return sha256(str(sum_value).encode(\"utf-8\")).hexdigest()[:8]\n\n        semantic_tree = {}\n        with alive_bar(len(normalized_paragraphs), title=\"Generating Semantic Tree\") as bar:\n            for para in normalized_paragraphs:\n                keywords = para.get(\"keywords\", [])\n                if not keywords:\n                    bar()\n                    continue\n\n                # Generate a semantic unit ID\n                unit_id = generate_hash_from_keywords_with_frequency(keywords)\n                parent_id = None\n\n                # Add unit to the tree\n                current_node = semantic_tree\n                for word in sorted(keywords):  # Hierarchy by sorted keywords\n                    word_hash = sha256(word.encode(\"utf-8\")).hexdigest()[:8]\n                    if word_hash not in current_node:\n                        current_node[word_hash] = {\n                            \"id\": word_hash,\n                            \"word\": word,\n                            \"children\": {},\n                        }\n                    current_node = current_node[word_hash][\"children\"]\n                    parent_id = word_hash  # Track the last parent node ID\n\n                # Assign paragraph data to the final node\n                current_node[\"unit\"] = {\n                    \"id\": unit_id,\n                    \"parent_id\": parent_id,\n                    \"semantics\": para.get(\"semantics\"),\n                    \"keywords\": keywords,\n                    \"text\": para.get(\"text\"),\n                }\n                bar()\n\n        return semantic_tree\n"
            }
        },
        {
            "file": {
                "File": "SemanticNormalizationPipe.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_pipe/SemanticNormalizationPipe.py",
                "Relative Path": "com_worktwins_pipe/SemanticNormalizationPipe.py",
                "Size": 3988,
                "Last Modified": "2024-12-04 23:03:38",
                "Lines": 97,
                "Source_Code": "import hashlib\nimport json\nimport os\nimport torch\nfrom transformers import pipeline\nfrom alive_progress import alive_bar\nfrom com_worktwins_pipe.Pipe import Pipe  # Import the base Pipe class\n\nclass SemanticNormalizationPipe(Pipe):\n    \"\"\"\n    A Pipe subclass to normalize the semantics of enriched paragraphs using BART.\n    \"\"\"\n    def run(self, input_data):\n        \"\"\"\n        Normalizes the semantics of enriched paragraphs.\n\n        Args:\n            input_data (dict): Input JSON containing \"enriched_paragraphs\".\n\n        Returns:\n            dict: JSON containing normalized paragraphs with a \"semantics\" field.\n        \"\"\"\n        enriched_paragraphs = input_data.get(\"enriched_paragraphs\", [])\n\n        if not enriched_paragraphs:\n            raise ValueError(\"Input data must contain 'enriched_paragraphs'.\")\n\n        # Perform semantic normalization\n        normalized_paragraphs = self.extract_semantics(enriched_paragraphs)\n        return {\"normalized_paragraphs\": normalized_paragraphs}\n\n    def extract_semantics(self, enriched_paragraphs):\n        \"\"\"\n        Normalize the knowledge of the book semantically using BART, outputting to a 'semantics' field.\n\n        Args:\n            enriched_paragraphs (list): List of enriched paragraphs to normalize.\n\n        Returns:\n            list: Normalized paragraphs with a 'semantics' field added.\n        \"\"\"\n        # Use GPU if available\n        device = 0 if torch.cuda.is_available() else -1\n        bart_model = pipeline(\"summarization\", model=\"facebook/bart-large-cnn\", device=device)\n\n        normalized_paragraphs = []\n        with alive_bar(len(enriched_paragraphs), title=\"Normalizing Semantics\") as bar:\n            for para in enriched_paragraphs:\n                try:\n                    # Normalize text using BART\n                    semantics = bart_model(para[\"text\"], max_length=130, min_length=30, do_sample=False)[0][\"summary_text\"]\n\n                    # Include semantics field in the paragraph data\n                    normalized_paragraphs.append({\n                        \"id\": para[\"id\"],\n                        \"type\": para[\"type\"],\n                        \"text\": para[\"text\"],  # Original text\n                        \"semantics\": semantics,  # Added field\n                        \"keywords\": para[\"keywords\"],\n                        \"weight\": para[\"weight\"],\n                        \"sentences\": para[\"sentences\"],\n                    })\n                except Exception as e:\n                    print(f\"Error normalizing paragraph {para['id']}: {e}\")\n                finally:\n                    bar()\n\n        return normalized_paragraphs\n\n\n    \n    def generate_semantic_unit_id(self, keywords):\n        \"\"\"\n        Generate a semantic unit ID based on keywords.\n        Keywords are sorted by book frequency (descending) and English frequency (ascending).\n        \"\"\"\n        # Retrieve book and English frequencies\n        book_freq_path = os.path.join(self.output_dir, f\"{self.name}_book_frequencies.json\")\n        with open(book_freq_path, \"r\", encoding=\"utf-8\") as f:\n            book_frequencies = {item[\"word\"]: item[\"book_frequency\"] for item in json.load(f)}\n\n        english_freq_path = os.path.join(self.output_dir, f\"{self.name}_english_frequencies.json\")\n        with open(english_freq_path, \"r\", encoding=\"utf-8\") as f:\n            english_frequencies = {item[\"word\"]: item[\"english_frequency\"] for item in json.load(f)}\n\n        # Sort keywords by book frequency (desc) and English frequency (asc)\n        sorted_keywords = sorted(\n            keywords,\n            key=lambda x: (\n                -book_frequencies.get(x, 0),  # Descending book frequency\n                english_frequencies.get(x, float(\"inf\"))  # Ascending English frequency\n            ),\n        )\n\n        # Generate a hash of the sorted keywords\n        keyword_string = \"|\".join(sorted_keywords)\n        return hashlib.sha256(keyword_string.encode()).hexdigest()[:16]  # Shorten hash for readability"
            }
        },
        {
            "file": {
                "File": "Pipe.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_pipe/Pipe.py",
                "Relative Path": "com_worktwins_pipe/Pipe.py",
                "Size": 1856,
                "Last Modified": "2024-12-05 14:56:10",
                "Lines": 56,
                "Source_Code": "import os\nimport json\n\nclass Pipe:\n    \"\"\"\n    Base class for processing steps (pipes) in the pipeline.\n    \"\"\"\n    def __init__(self, name, output_dir, dependencies=None):\n        self.name = name\n        self.output_dir = output_dir\n        self.dependencies = dependencies or []  # List of dependent pipes\n        self.output_file = os.path.join(output_dir, self.name + '-' + type(self).__name__ + '.json')\n\n    def execute(self, input_data=None):\n        \"\"\"\n        Executes the pipe, ensuring dependencies are resolved first.\n        \"\"\"\n        # Execute dependencies first\n        for dependency in self.dependencies:\n            dependency.execute(input_data)\n\n        # Run the current pipe\n        if not os.path.exists(self.output_file):  # Skip if already executed\n            print(f\"Executing pipe: {self.name}\")\n            output_data = self.run(input_data)\n            self.save_output(output_data)\n        else:\n            print(f\"Skipping pipe {self.name}; output already exists.\")\n        \n        # Load and return the output data\n        return self.load_output()\n\n    def run(self, input_data):\n        \"\"\"\n        Logic for the pipe. Must be implemented by child classes.\n        \"\"\"\n        raise NotImplementedError(\"The run method must be implemented by child classes.\")\n\n    def save_output(self, data):\n        \"\"\"\n        Saves the output data to a JSON file.\n        \"\"\"\n        os.makedirs(self.output_dir, exist_ok=True)\n        with open(self.output_file, \"w\") as f:\n            json.dump(data, f, indent=4)\n\n    def load_output(self):\n        \"\"\"\n        Loads the output data from the JSON file.\n        \"\"\"\n        with open(self.output_file, \"r\") as f:\n            return json.load(f)\n\n    def save_to_txt(self,data, output_path):\n        with open(output_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(data)"
            }
        },
        {
            "file": {
                "File": "ParagraphsPipe.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_pipe/ParagraphsPipe.py",
                "Relative Path": "com_worktwins_pipe/ParagraphsPipe.py",
                "Size": 4573,
                "Last Modified": "2024-12-05 16:59:30",
                "Lines": 117,
                "Source_Code": "import os\nimport re\nfrom hashlib import sha256\nfrom alive_progress import alive_bar\nfrom com_worktwins_pipe.Pipe import Pipe  # Import the base Pipe class\nimport spacy  # For NLP sentence tokenization\nfrom com_worktwins_pipe.WordFrequenciesPipe import WordFrequenciesPipe\n\n# Load spaCy model\nnlp = spacy.load(\"en_core_web_sm\")\n\nclass ParagraphsPipe(Pipe):\n    \"\"\"\n    A Pipe subclass to split raw text into paragraphs, filter out source code blocks,\n    and enrich paragraphs with sentences, keywords, and metadata.\n    \"\"\"\n    def run(self, input_data):\n        \"\"\"\n        Splits raw text into paragraphs, excludes paragraphs containing source code,\n        and enriches them with metadata.\n\n        Args:\n            input_data (dict): Input JSON containing \"raw_text\" and \"book_frequencies\".\n\n        Returns:\n            dict: JSON with a list of enriched paragraphs.\n        \"\"\"\n        raw_text = input_data\n\n        # Split raw text into paragraphs\n        paragraphs = self.split_into_paragraphs(raw_text)\n        wordfreq = WordFrequenciesPipe(name=self.name,output_dir=self.output_dir).execute(input_data=raw_text)\n\n        # Enrich paragraphs with keywords, sentences, and metadata\n        enriched_paragraphs = self.process_paragraphs(paragraphs, wordfreq)\n\n        return {\"enriched_paragraphs\": enriched_paragraphs}\n\n    @staticmethod\n    def split_into_paragraphs(raw_text):\n        \"\"\"\n        Split raw text into paragraphs based on double newline separation and exclude paragraphs containing source code.\n\n        Args:\n            raw_text (str): The raw text extracted from a document.\n\n        Returns:\n            list: A list of dictionaries, each representing a paragraph with an ID and text.\n        \"\"\"\n        paragraphs = []\n        code_block_pattern = re.compile(r'((?:^(?: {4}|\\t).+\\n)+)', re.MULTILINE)  # Detect multi-line code blocks\n\n        for para in raw_text.split(\"\\n\\n\"):\n            para = para.strip()\n            if para:\n                # Check if the paragraph contains code using the regex\n                if code_block_pattern.search(para):\n                    continue  # Skip paragraphs containing source code\n\n                # Add the paragraph if it's not code\n                paragraph_id = sha256(para.encode()).hexdigest()[:8]\n                paragraphs.append({\"id\": paragraph_id, \"text\": para})\n\n        return paragraphs\n\n    @staticmethod\n    def process_paragraphs(paragraphs, wordfreq):\n        \"\"\"\n        Process paragraphs into sentences and generate enriched data.\n\n        Args:\n            paragraphs (list): List of dictionaries containing paragraph IDs and text.\n            wordfreq (list): List of dictionaries with word frequencies, each containing \"word\", \"book_frequency\", and \"english_frequency\".\n\n        Returns:\n            list: Enriched paragraphs with sentences, keywords, and metadata.\n        \"\"\"\n        # Convert wordfreq JSON array into a dictionary for fast lookups\n        word_freq_dict = {item[\"word\"]: item[\"book_frequency\"] for item in wordfreq}\n\n        enriched_paragraphs = []\n        with alive_bar(len(paragraphs), title=\"Processing paragraphs\") as bar:\n            for para in paragraphs:\n                paragraph_id = para[\"id\"]\n                paragraph_text = para[\"text\"]\n\n                # Tokenize paragraph into sentences\n                doc = nlp(paragraph_text)\n                sentences = []\n                paragraph_keywords = set()\n\n                for sent in doc.sents:\n                    sentence_text = sent.text.strip()\n                    words = [token.text.lower() for token in nlp(sentence_text) if token.is_alpha and not token.is_stop]\n                    keywords = [word for word in words if word in word_freq_dict]\n\n                    sentence_hash = f\"{paragraph_id}_{sha256(sentence_text.encode()).hexdigest()[:8]}\"\n                    sentences.append({\n                        \"id\": sentence_hash,\n                        \"type\": \"sentence\",\n                        \"text\": sentence_text,\n                        \"keywords\": keywords,\n                        \"weight\": 0.0,\n                    })\n                    paragraph_keywords.update(keywords)\n\n                enriched_paragraphs.append({\n                    \"id\": paragraph_id,\n                    \"type\": \"paragraph\",\n                    \"text\": paragraph_text,\n                    \"keywords\": sorted(paragraph_keywords),\n                    \"weight\": 0.0,\n                    \"sentences\": sentences,\n                })\n                bar()\n\n        return enriched_paragraphs\n"
            }
        }
    ],
    "external_libraries": [
        {
            "import_name": "fitz",
            "count": 3
        },
        {
            "import_name": "transformers",
            "count": 6
        },
        {
            "import_name": "json",
            "count": 12
        },
        {
            "import_name": "os",
            "count": 15
        },
        {
            "import_name": "com_worktwins_languages.Language",
            "count": 4
        },
        {
            "import_name": "pandas",
            "count": 6
        },
        {
            "import_name": "collections",
            "count": 7
        },
        {
            "import_name": "hashlib",
            "count": 8
        },
        {
            "import_name": "wordfreq",
            "count": 5
        },
        {
            "import_name": "alive_progress",
            "count": 8
        },
        {
            "import_name": "com_worktwins_data_source.PDFBook",
            "count": 5
        },
        {
            "import_name": "spacy",
            "count": 4
        },
        {
            "import_name": "unicodedata",
            "count": 2
        },
        {
            "import_name": "torch",
            "count": 3
        },
        {
            "import_name": "re",
            "count": 6
        },
        {
            "import_name": "datetime",
            "count": 1
        },
        {
            "import_name": "argparse",
            "count": 1
        },
        {
            "import_name": "shutil",
            "count": 1
        },
        {
            "import_name": "subprocess",
            "count": 2
        },
        {
            "import_name": "requests",
            "count": 2
        },
        {
            "import_name": "bs4",
            "count": 2
        },
        {
            "import_name": "urllib.parse",
            "count": 4
        },
        {
            "import_name": "time",
            "count": 1
        },
        {
            "import_name": "pytest",
            "count": 3
        },
        {
            "import_name": "ast",
            "count": 1
        },
        {
            "import_name": "pygments.lexers",
            "count": 3
        },
        {
            "import_name": "pygments.util",
            "count": 1
        },
        {
            "import_name": "com_worktwins_pipe.SemanticTreePipe",
            "count": 1
        },
        {
            "import_name": "com_worktwins_pipe.SemanticNormalizationPipe",
            "count": 1
        },
        {
            "import_name": "com_worktwins_pipe.SourceCodeExtractorPipe",
            "count": 1
        },
        {
            "import_name": "com_worktwins_pipe.WordFrequenciesPipe",
            "count": 2
        },
        {
            "import_name": "com_worktwins_pipe.ParagraphsPipe",
            "count": 1
        },
        {
            "import_name": "yaml",
            "count": 1
        },
        {
            "import_name": "com_worktwins_pipe.Pipe",
            "count": 5
        }
    ],
    "observations": []
}