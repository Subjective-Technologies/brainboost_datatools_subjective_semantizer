10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eadae6ebca9dc32dc8b5f937eaca44fc\",\n        \"type\": \"source_code\",\n        \"text\": \"dRef = d; \\n    dRef.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ba4a6eb73d9b10f9e4497822a17ef43\",\n        \"type\": \"source_code\",\n        \"text\": \"void f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ba4a6eb73d9b10f9e4497822a17ef43\",\n        \"type\": \"source_code\",\n        \"text\": \"void f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bfdae12f430695ecedc17e2c3a1c45aa\",\n        \"type\": \"source_code\",\n        \"text\": \"public void g() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d0dafeba3a10afbb3401cf1cc261bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public void f() {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f667e1b64b1e090669b3bf65bce4a6dc\",\n        \"type\": \"source_code\",\n        \"text\": \"public void g() {} \\n    class EG implements E.G { \\n      public void f() {} \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9425ddf5b933da18594a6e1d289f599b\",\n        \"type\": \"source_code\",\n        \"text\": \"A a = new A(); \\n    // Can\\u2019t access A.D: \\n    //! A.D ad = a.getD(); \\n    // Doesn\\u2019t return anything but A.D: \\n    //! A.DImp2 di2 = a.getD(); \\n    // Cannot access a member of the interface: \\n    //! a.getD().f(); \\n    // Only another A can do anything with getD(): \\n    A a2 = new A(); \\n    a2.receiveD(a.getD());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee381f0bc0574aca67a160af75aacf75\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Implementation1();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"910d8681c358ef074513b933d75ab5e6\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Implementation2();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32714140e39b7d02d202095e6b588797\",\n        \"type\": \"source_code\",\n        \"text\": \"Service s = fact.getService(); \\n    s.method1(); \\n    s.method2();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f252d45cb7d54aaedeefd3a478d246d1\",\n        \"type\": \"source_code\",\n        \"text\": \"serviceConsumer(new Implementation1Factory()); \\n    // Implementations are completely interchangeable: \\n    serviceConsumer(new Implementation2Factory());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4099770971a6f3fb0c79f8f4e62a8cc2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Checkers move \\\" + moves); \\n    return ++moves != MOVES;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa5d2e3e4610008ee9ab654eae7af3b6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Chess move \\\" + moves); \\n    return ++moves != MOVES;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87f4479ea9a638e71615e5cfad9782a3\",\n        \"type\": \"source_code\",\n        \"text\": \"Game s = factory.getGame(); \\n    while(s.move()) \\n      ;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ac8ee0e092721443b416ed224b5aaaac\",\n        \"type\": \"source_code\",\n        \"text\": \"playGame(new CheckersFactory()); \\n    playGame(new ChessFactory());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"716f98796c1cc049f9f3c8d3a86be534\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n    Destination(String whereTo) { \\n      label = whereTo; \\n    } \\n    String readLabel() { return label; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b117a09f573bb961b8dbd88b71bb077\",\n        \"type\": \"source_code\",\n        \"text\": \"Contents c = new Contents(); \\n    Destination d = new Destination(dest); \\n    System.out.println(d.readLabel());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1217451bfab658905072ace12bd509dd\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel1 p = new Parcel1(); \\n    p.ship(\\\"Tasmania\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"716f98796c1cc049f9f3c8d3a86be534\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n    Destination(String whereTo) { \\n      label = whereTo; \\n    } \\n    String readLabel() { return label; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f3cd8371c8fee0f6e625bb4d232e83d6\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Destination(s);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c581dbf528850fd17d0e6b040c6513d1\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Contents();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"153deadea48281550d8742497591df02\",\n        \"type\": \"source_code\",\n        \"text\": \"Contents c = contents(); \\n    Destination d = to(dest); \\n    System.out.println(d.readLabel());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aec3f318627d85d8cc5961ed26e9d141\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel2 p = new Parcel2(); \\n    p.ship(\\\"Tasmania\\\"); \\n    Parcel2 q = new Parcel2(); \\n    // Defining references to inner classes: \\n    Parcel2.Contents c = q.contents(); \\n    Parcel2.Destination d = q.to(\\\"Borneo\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1488e1e89d36aa2a7430ff731a47d63\",\n        \"type\": \"source_code\",\n        \"text\": \"if(next < items.length) \\n      items[next++] = x;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52f2aac0b6e20608f9b542b466e98761\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 0; \\n    public boolean end() { return i == items.length; } \\n    public Object current() { return items[i]; } \\n    public void next() { if(i < items.length) i++; }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e092d002c9d511c4037699f7af1e1c6\",\n        \"type\": \"source_code\",\n        \"text\": \"return new SequenceSelector();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3c832e4d0d7d4803b80839be09f867a8\",\n        \"type\": \"source_code\",\n        \"text\": \"Sequence sequence = new Sequence(10); \\n    for(int i = 0; i < 10; i++) \\n      sequence.add(Integer.toString(i)); \\n    Selector selector = sequence.selector(); \\n    while(!selector.end()) { \\n      System.out.print(selector.current() + \\\" \\\"); \\n      selector.next(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d0756ec9d772090d6737fc4b4746e24\",\n        \"type\": \"source_code\",\n        \"text\": \"public DotThis outer() { \\n      return DotThis.this; \\n      // A plain \\\"this\\\" would be Inner\\u2019s \\\"this\\\" \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e89ba7da22d8f1b9eba7f2bead2766e6\",\n        \"type\": \"source_code\",\n        \"text\": \"DotThis dt = new DotThis(); \\n    DotThis.Inner dti = dt.inner(); \\n    dti.outer().f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"199ead1ec074acb8d589c0e8f188e56d\",\n        \"type\": \"source_code\",\n        \"text\": \"DotNew dn = new DotNew(); \\n    DotNew.Inner dni = dn.new Inner();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"915320afe6b9f2fe7c5ae63b9f2aecb8\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n    Destination(String whereTo) { label = whereTo; } \\n    String readLabel() { return label; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f03275289850a6b73f69f31d27f11fef\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel3 p = new Parcel3(); \\n    // Must use instance of outer class \\n    // to create an instance of the inner class: \\n    Parcel3.Contents c = p.new Contents(); \\n    Parcel3.Destination d = p.new Destination(\\\"Tasmania\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebc37539ffd9d2546d7482590d124f3d\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n    private PDestination(String whereTo) { \\n      label = whereTo; \\n    } \\n    public String readLabel() { return label; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"14cd9a92297232a878979a0edd26e3e0\",\n        \"type\": \"source_code\",\n        \"text\": \"return new PDestination(s);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bb474237d95290bda7c56d60e2ad05ab\",\n        \"type\": \"source_code\",\n        \"text\": \"return new PContents();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2bfe8ca3aa9c43ef765145ee432d29a3\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel4 p = new Parcel4(); \\n    Contents c = p.contents(); \\n    Destination d = p.destination(\\\"Tasmania\\\"); \\n    // Illegal -- can\\u2019t access private class: \\n    //! Parcel4.PContents pc = p.new PContents();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"56b5b105d6f45462b2ea40fd78f5962d\",\n        \"type\": \"source_code\",\n        \"text\": \"in methods and scopes\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"02a625cf1bbfb14156261b464cf71780\",\n        \"type\": \"source_code\",\n        \"text\": \"class PDestination implements Destination {\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"edfc3e48ad664e6b87605232c75ae89a\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n      private PDestination(String whereTo) { \\n        label = whereTo; \\n      } \\n      public String readLabel() { return label; } \\n    } \\n    return new PDestination(s);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"79c752b4c9a930ba2ca7135c397a5561\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel5 p = new Parcel5(); \\n    Destination d = p.destination(\\\"Tasmania\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f1f5fa2ce9b01b53291d85ab7a9c1068\",\n        \"type\": \"source_code\",\n        \"text\": \"if(b) { \\n      class TrackingSlip { \\n        private String id; \\n        TrackingSlip(String s) { \\n          id = s; \\n        } \\n        String getSlip() { return id; } \\n      } \\n      TrackingSlip ts = new TrackingSlip(\\\"slip\\\"); \\n      String s = ts.getSlip(); \\n    } \\n    // Can\\u2019t use it here! Out of scope: \\n    //! TrackingSlip ts = new TrackingSlip(\\\"x\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0c771bc2dd0acf9b6842f2905211ff07\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel6 p = new Parcel6(); \\n    p.track();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"49250cda8c44fea62062e7cca3cd038e\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Contents() { // Insert a class definition \\n      private int i = 11; \\n      public int value() { return i; } \\n    }; // Semicolon required in this case\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd41254c807effa87448665762e707a5\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel7 p = new Parcel7(); \\n    Contents c = p.contents();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3475653cf8fb127bebd02df5700d2b03\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel7b p = new Parcel7b(); \\n    Contents c = p.contents();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c8811d6dfff1b012cf2953654090944\",\n        \"type\": \"source_code\",\n        \"text\": \"// Base constructor call: \\n    return new Wrapping(x) { // Pass constructor argument. \\n      public int value() { \\n        return super.value() * 47; \\n      } \\n    }; // Semicolon required\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a94275850b3c166eb3bfae5e4e88d09b\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel8 p = new Parcel8(); \\n    Wrapping w = p.wrapping(10);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"92802805df7f7012cb5b2abd920cc279\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Destination() { \\n      private String label = dest; \\n      public String readLabel() { return label; } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a03a5d45278315800a2247b769cf823c\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel9 p = new Parcel9(); \\n    Destination d = p.destination(\\\"Tasmania\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c86c6bba9722a8cabea231c592b417ce\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Base constructor, i = \\\" + i);\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9d79c3852213cf59220cb59204e228f8\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Base(i) { \\n      { print(\\\"Inside instance initializer\\\"); } \\n      public void f() { \\n        print(\\\"In anonymous f()\\\"); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bd1d020e55d11a999a5d8fb6698342ce\",\n        \"type\": \"source_code\",\n        \"text\": \"Base base = getBase(47); \\n    base.f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b529962a3faa26bcfe1f6e3dbf93d2ea\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Destination() { \\n      private int cost; \\n      // Instance initialization for each object: \\n      { \\n        cost = Math.round(price); \\n        if(cost > 100) \\n          System.out.println(\\\"Over budget!\\\"); \\n      } \\n      private String label = dest; \\n      public String readLabel() { return label; } \\n    };\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fccb341c28eb61e9674ec34981d415ff\",\n        \"type\": \"source_code\",\n        \"text\": \"Parcel10 p = new Parcel10();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7501ce83eb5ccae7d44ba3797d5370f8\",\n        \"type\": \"source_code\",\n        \"text\": \"Destination d = p.destination(\\\"Tasmania\\\", 101.395F);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f4a3e1d4ced25c2c2c423be7670a5bde\",\n        \"type\": \"source_code\",\n        \"text\": \"new ServiceFactory() { \\n      public Service getService() { \\n        return new Implementation1(); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b26825e433c59f100fac207e841e423\",\n        \"type\": \"source_code\",\n        \"text\": \"new ServiceFactory() { \\n      public Service getService() { \\n        return new Implementation2(); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32714140e39b7d02d202095e6b588797\",\n        \"type\": \"source_code\",\n        \"text\": \"Service s = fact.getService(); \\n    s.method1(); \\n    s.method2();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35bfc86d400bbe3ef4a67c8557501dce\",\n        \"type\": \"source_code\",\n        \"text\": \"serviceConsumer(Implementation1.factory); \\n    // Implementations are completely interchangeable: \\n    serviceConsumer(Implementation2.factory);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4099770971a6f3fb0c79f8f4e62a8cc2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Checkers move \\\" + moves); \\n    return ++moves != MOVES;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7592dfac9f42d352fdc50127cdc4ba7c\",\n        \"type\": \"source_code\",\n        \"text\": \"public Game getGame() { return new Checkers(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa5d2e3e4610008ee9ab654eae7af3b6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Chess move \\\" + moves); \\n    return ++moves != MOVES;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"13dad5315ff5d96e14ccb0727ecaf024\",\n        \"type\": \"source_code\",\n        \"text\": \"public Game getGame() { return new Chess(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87f4479ea9a638e71615e5cfad9782a3\",\n        \"type\": \"source_code\",\n        \"text\": \"Game s = factory.getGame(); \\n    while(s.move()) \\n      ;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7b1ecba7eb28e0ad5010ec760eebf7f\",\n        \"type\": \"source_code\",\n        \"text\": \"playGame(Checkers.factory); \\n    playGame(Chess.factory);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd804b0605a3faf18660515a2bf9e234\",\n        \"type\": \"source_code\",\n        \"text\": \"private int i = 11; \\n    public int value() { return i; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6bad51197357739d279e8f8bf99f76ce\",\n        \"type\": \"source_code\",\n        \"text\": \"private String label; \\n    private ParcelDestination(String whereTo) { \\n      label = whereTo; \\n    } \\n    public String readLabel() { return label; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95e59031a78450d1b3e88c3f3d9abef6\",\n        \"type\": \"source_code\",\n        \"text\": \"// Nested classes can contain other static elements: \\n    public static void f() {} \\n    static int x = 10; \\n    static class AnotherLevel { \\n      public static void f() {} \\n      static int x = 10; \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e590fc245c91ef75a622a800c4feba2\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ParcelDestination(s);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1d82c7c194049846a44b05246136fa0a\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ParcelContents();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ed09a00ce0cc8874c824ae98ea8bfaa\",\n        \"type\": \"source_code\",\n        \"text\": \"Contents c = contents(); \\n    Destination d = destination(\\\"Tasmania\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"59e0664ebf22f1772d44780462168bbc\",\n        \"type\": \"source_code\",\n        \"text\": \"public void howdy() { \\n      System.out.println(\\\"Howdy!\\\"); \\n    } \\n    public static void main(String[] args) { \\n      new Test().howdy(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"992058dea6a768ffd6da72ee084631f6\",\n        \"type\": \"source_code\",\n        \"text\": \"public static void main(String[] args) { \\n      TestBed t = new TestBed(); \\n      t.f(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d109b7dfd34e0ecaa184641bbefec92\",\n        \"type\": \"source_code\",\n        \"text\": \"private void g() {} \\n    public class B { \\n      void h() { \\n        g(); \\n        f(); \\n      } \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3bdacd5113fcbd0372447d0f551750e5\",\n        \"type\": \"source_code\",\n        \"text\": \"MNA mna = new MNA(); \\n    MNA.A mnaa = mna.new A(); \\n    MNA.A.B mnaab = mnaa.new B(); \\n    mnaab.h();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"207691350524eb6ec24e92e1bf79eac7\",\n        \"type\": \"source_code\",\n        \"text\": \"// Anonymous inner class: \\n    return new B() {};\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f2cce064d38b963a47dad31987f92f67\",\n        \"type\": \"source_code\",\n        \"text\": \"X x = new X(); \\n    Y y = new Y(); \\n    takesA(x); \\n    takesA(y); \\n    takesB(x); \\n    takesB(y.makeB());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"68f9c1ea81605b7324e27f0096ca0099\",\n        \"type\": \"source_code\",\n        \"text\": \"Z z = new Z(); \\n    takesD(z); \\n    takesE(z.makeE());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a99d8684e0e261472e64706911e0ad8b\",\n        \"type\": \"source_code\",\n        \"text\": \"i++; \\n    print(i);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39776613aa215db018fbfe69bece53a1\",\n        \"type\": \"source_code\",\n        \"text\": \"super.increment(); \\n    i++; \\n    print(i);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b475ad48f0a10795680da4ed3ffb6ac\",\n        \"type\": \"source_code\",\n        \"text\": \"public void increment() { \\n      // Specify outer-class method, otherwise \\n      // you\\u2019d get an infinite recursion: \\n      Callee2.this.increment(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4cd962d879374c490e0f4972506ddbc3\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Closure();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b657d2996f9edc0a8892b59e2c2abce\",\n        \"type\": \"source_code\",\n        \"text\": \"Callee1 c1 = new Callee1(); \\n    Callee2 c2 = new Callee2(); \\n    MyIncrement.f(c2); \\n    Caller caller1 = new Caller(c1); \\n    Caller caller2 = new Caller(c2.getCallbackReference()); \\n    caller1.go(); \\n    caller1.go(); \\n    caller2.go(); \\n    caller2.go();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e64a86bbc4559d9e8d9526e6d9638eec\",\n        \"type\": \"source_code\",\n        \"text\": \"this.delayTime = delayTime; \\n    start();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a3b717c6f7b8124bcd6385aef4557fd\",\n        \"type\": \"source_code\",\n        \"text\": \"eventTime = System.nanoTime() + delayTime;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8166d6c96dfcd045cb81070800f6f75b\",\n        \"type\": \"source_code\",\n        \"text\": \"return System.nanoTime() >= eventTime;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"efd10428353757c724cdb5f840a44608\",\n        \"type\": \"source_code\",\n        \"text\": \"while(eventList.size() > 0) \\n      // Make a copy so you\\u2019re not modifying the list \\n      // while you\\u2019re selecting the elements in it: \\n      for(Event e : new ArrayList<Event>(eventList)) \\n        if(e.ready()) { \\n          System.out.println(e); \\n          e.action(); \\n          eventList.remove(e); \\n        }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbee11add0e1a0ae17cb4c33d0e5c75e\",\n        \"type\": \"source_code\",\n        \"text\": \"public LightOn(long delayTime) { super(delayTime); } \\n    public void action() { \\n      // Put hardware control code here to \\n      // physically turn on the light. \\n      light = true; \\n    } \\n    public String toString() { return \\\"Light is on\\\"; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"affb438e42c1d6e5aa5877aab51c133e\",\n        \"type\": \"source_code\",\n        \"text\": \"public LightOff(long delayTime) { super(delayTime); } \\n    public void action() { \\n      // Put hardware control code here to \\n      // physically turn off the light. \\n      light = false; \\n    } \\n    public String toString() { return \\\"Light is off\\\"; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbcc8777799ff3191345a143c627ee26\",\n        \"type\": \"source_code\",\n        \"text\": \"public WaterOn(long delayTime) { super(delayTime); } \\n    public void action() { \\n      // Put hardware control code here. \\n      water = true; \\n    } \\n    public String toString() { \\n      return \\\"Greenhouse water is on\\\"; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da2f07fcdc79365a7028ecb74229195b\",\n        \"type\": \"source_code\",\n        \"text\": \"public WaterOff(long delayTime) { super(delayTime); } \\n    public void action() { \\n      // Put hardware control code here. \\n      water = false; \\n    } \\n    public String toString() { \\n      return \\\"Greenhouse water is off\\\"; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f0ebcc769fec1501f0a3057a286663c\",\n        \"type\": \"source_code\",\n        \"text\": \"public ThermostatNight(long delayTime) { \\n      super(delayTime); \\n    } \\n    public void action() { \\n      // Put hardware control code here. \\n      thermostat = \\\"Night\\\"; \\n    } \\n    public String toString() { \\n      return \\\"Thermostat on night setting\\\"; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1a2e1101c2938dab23e2a44dddcb26bf\",\n        \"type\": \"source_code\",\n        \"text\": \"public ThermostatDay(long delayTime) {\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a298481008f13bcc506183c1445a6ffb\",\n        \"type\": \"source_code\",\n        \"text\": \"super(delayTime); \\n    } \\n    public void action() { \\n      // Put hardware control code here. \\n      thermostat = \\\"Day\\\"; \\n    } \\n    public String toString() { \\n      return \\\"Thermostat on day setting\\\"; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f2a8a6b720ab16fe9063fe3fa616124\",\n        \"type\": \"source_code\",\n        \"text\": \"public Bell(long delayTime) { super(delayTime); } \\n    public void action() { \\n      addEvent(new Bell(delayTime)); \\n    } \\n    public String toString() { return \\\"Bing!\\\"; }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f52b5028a0d879036368bbf0fc32883d\",\n        \"type\": \"source_code\",\n        \"text\": \"private Event[] eventList; \\n    public Restart(long delayTime, Event[] eventList) { \\n      super(delayTime); \\n      this.eventList = eventList; \\n      for(Event e : eventList) \\n        addEvent(e); \\n    } \\n    public void action() { \\n      for(Event e : eventList) { \\n        e.start(); // Rerun each event \\n        addEvent(e); \\n      } \\n      start(); // Rerun this Event \\n      addEvent(this); \\n    } \\n    public String toString() { \\n      return \\\"Restarting system\\\"; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c9e9e5aa92d6a76622f34f644b64833\",\n        \"type\": \"source_code\",\n        \"text\": \"public Terminate(long delayTime) { super(delayTime); } \\n    public void action() { System.exit(0); } \\n    public String toString() { return \\\"Terminating\\\";  }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64b01bee9a2cd78052aaa361bc17c3fd\",\n        \"type\": \"source_code\",\n        \"text\": \"GreenhouseControls gc = new GreenhouseControls(); \\n    // Instead of hard-wiring, you could parse \\n    // configuration information from a text file here: \\n    gc.addEvent(gc.new Bell(900)); \\n    Event[] eventList = { \\n      gc.new ThermostatNight(0), \\n      gc.new LightOn(200), \\n      gc.new LightOff(400), \\n      gc.new WaterOn(600), \\n      gc.new WaterOff(800), \\n      gc.new ThermostatDay(1400) \\n    };\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6d609548669b602cb5b3ebfa922db80d\",\n        \"type\": \"source_code\",\n        \"text\": \"gc.addEvent(gc.new Restart(2000, eventList)); \\n    if(args.length == 1) \\n      gc.addEvent( \\n        new GreenhouseControls.Terminate( \\n          new Integer(args[0]))); \\n    gc.run();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"23ad0fde057feb175776b4a989f886dd\",\n        \"type\": \"source_code\",\n        \"text\": \"wi.super();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7ad70398251c2d05fc8385e448d52f1\",\n        \"type\": \"source_code\",\n        \"text\": \"WithInner wi = new WithInner(); \\n    InheritInner ii = new InheritInner(wi);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f401c6daf8a1dce462c30babb1da9d88\",\n        \"type\": \"source_code\",\n        \"text\": \"public Yolk() { print(\\\"Egg.Yolk()\\\"); }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c05d4a9f0629c026fe8a04d5b855b5e2\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"New Egg()\\\"); \\n    y = new Yolk();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1287417f9ad8894112da427301609a16\",\n        \"type\": \"source_code\",\n        \"text\": \"public Yolk() { print(\\\"BigEgg.Yolk()\\\"); }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9863e2a965024703360dedb74cc3f30d\",\n        \"type\": \"source_code\",\n        \"text\": \"new BigEgg();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a36b26d15e23811f15e942dfe57176cb\",\n        \"type\": \"source_code\",\n        \"text\": \"public Yolk() { print(\\\"Egg2.Yolk()\\\"); } \\n    public void f() { print(\\\"Egg2.Yolk.f()\\\");}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2b573a7b78a43ea596eba32378f98382\",\n        \"type\": \"source_code\",\n        \"text\": \"public Yolk() { print(\\\"BigEgg2.Yolk()\\\"); } \\n    public void f() { print(\\\"BigEgg2.Yolk.f()\\\"); }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"150fcea330f07b5c623eb40f7232d215\",\n        \"type\": \"source_code\",\n        \"text\": \"Egg2 e2 = new BigEgg2(); \\n    e2.g();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"985cc8eaaeda65dab6103e2393b953cb\",\n        \"type\": \"source_code\",\n        \"text\": \"// A local inner class: \\n    class LocalCounter implements Counter { \\n      public LocalCounter() { \\n        // Local inner class can have a constructor \\n        print(\\\"LocalCounter()\\\"); \\n      } \\n      public int next() { \\n        printnb(name); // Access local final \\n        return count++; \\n      } \\n    } \\n    return new LocalCounter();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6ba5af9d68fa65c340fa0005b5129031\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Counter() { \\n      // Anonymous inner class cannot have a named \\n      // constructor, only an instance initializer: \\n      { \\n        print(\\\"Counter()\\\"); \\n      } \\n      public int next() { \\n        printnb(name); // Access local final \\n        return count++; \\n      } \\n    };\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1f9f66addeb3dac81961790432156633\",\n        \"type\": \"source_code\",\n        \"text\": \"LocalInnerClass lic = new LocalInnerClass(); \\n    Counter \\n      c1 = lic.getCounter(\\\"Local inner \\\"), \\n      c2 = lic.getCounter2(\\\"Anonymous inner \\\"); \\n    for(int i = 0; i < 5; i++) \\n      print(c1.next()); \\n    for(int i = 0; i < 5; i++)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbecc3bb869b6513c2aa481ff43945a5\",\n        \"type\": \"source_code\",\n        \"text\": \"print(c2.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8308b1eba7ba926a61b8fd802194386\",\n        \"type\": \"source_code\",\n        \"text\": \"Objects\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6cc4f10fae054aac43916ee8f1298a61\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList apples = new ArrayList(); \\n    for(int i = 0; i < 3; i++) \\n      apples.add(new Apple()); \\n    // Not prevented from adding an Orange to apples: \\n    apples.add(new Orange()); \\n    for(int i = 0; i < apples.size(); i++) \\n      ((Apple)apples.get(i)).id(); \\n      // Orange is detected only at run time\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b2dce025c987104f755677cddc57929d\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList<Apple> apples = new ArrayList<Apple>(); \\n    for(int i = 0; i < 3; i++) \\n      apples.add(new Apple()); \\n    // Compile-time error: \\n    // apples.add(new Orange()); \\n    for(int i = 0; i < apples.size(); i++) \\n      System.out.println(apples.get(i).id()); \\n    // Using foreach: \\n    for(Apple c : apples) \\n      System.out.println(c.id());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ad94a4b84880ab55eb56a27cd4afe45\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList<Apple> apples = new ArrayList<Apple>(); \\n    apples.add(new GrannySmith());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbcd8c7945782b691e810aa72385a1d7\",\n        \"type\": \"source_code\",\n        \"text\": \"apples.add(new Gala()); \\n    apples.add(new Fuji()); \\n    apples.add(new Braeburn()); \\n    for(Apple c : apples) \\n      System.out.println(c);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"455f9eea5cbc96b21c24db27bfa66be4\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<Integer> c = new ArrayList<Integer>(); \\n    for(int i = 0; i < 10; i++) \\n      c.add(i); // Autoboxing \\n    for(Integer i : c) \\n      System.out.print(i + \\\", \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74ded722fcbdc5520b339a94cb062bab\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<Integer> collection =\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b3f6489c2922969ffaac2ead251017c2\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5)); \\n    Integer[] moreInts = { 6, 7, 8, 9, 10 }; \\n    collection.addAll(Arrays.asList(moreInts)); \\n    // Runs significantly faster, but you can\\u2019t \\n    // construct a Collection this way: \\n    Collections.addAll(collection, 11, 12, 13, 14, 15); \\n    Collections.addAll(collection, moreInts); \\n    // Produces a list \\\"backed by\\\" an array: \\n    List<Integer> list = Arrays.asList(16, 17, 18, 19, 20); \\n    list.set(1, 99); // OK -- modify an element \\n    // list.add(21); // Runtime error because the \\n                     // underlying array cannot be resized.\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"28282c8b934ad80201e913883007abd2\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Snow> snow1 = Arrays.asList( \\n      new Crusty(), new Slush(), new Powder());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"766adff583a75635f9fd7461d45522ed\",\n        \"type\": \"source_code\",\n        \"text\": \"// Won\\u2019t compile: \\n    // List<Snow> snow2 = Arrays.asList( \\n    //   new Light(), new Heavy()); \\n    // Compiler says: \\n    // found   : java.util.List<Powder> \\n    // required: java.util.List<Snow>\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b1a5a54f3b3cbdd9c78fb09aa9ca6906\",\n        \"type\": \"source_code\",\n        \"text\": \"// Collections.addAll() doesn\\u2019t get confused: \\n    List<Snow> snow3 = new ArrayList<Snow>(); \\n    Collections.addAll(snow3, new Light(), new Heavy());\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f8fc59520130984c200a330898a1ffb1\",\n        \"type\": \"source_code\",\n        \"text\": \"// Give a hint using an \\n    // explicit type argument specification: \\n    List<Snow> snow4 = Arrays.<Snow>asList( \\n       new Light(), new Heavy());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8e68cf1fe40ddf7d82b6a801bea78fc3\",\n        \"type\": \"source_code\",\n        \"text\": \"collection.add(\\\"rat\\\"); \\n    collection.add(\\\"cat\\\"); \\n    collection.add(\\\"dog\\\"); \\n    collection.add(\\\"dog\\\"); \\n    return collection;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5edd6ea695f727ed2436ed9ea3e6bf0a\",\n        \"type\": \"source_code\",\n        \"text\": \"map.put(\\\"rat\\\", \\\"Fuzzy\\\"); \\n    map.put(\\\"cat\\\", \\\"Rags\\\"); \\n    map.put(\\\"dog\\\", \\\"Bosco\\\"); \\n    map.put(\\\"dog\\\", \\\"Spot\\\"); \\n    return map;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12317cee32a717533a148abad08b3c7a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(fill(new ArrayList<String>())); \\n    print(fill(new LinkedList<String>())); \\n    print(fill(new HashSet<String>())); \\n    print(fill(new TreeSet<String>())); \\n    print(fill(new LinkedHashSet<String>())); \\n    print(fill(new HashMap<String,String>())); \\n    print(fill(new TreeMap<String,String>())); \\n    print(fill(new LinkedHashMap<String,String>()));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad6b6a4bd38e336c683ad9ad96093c84\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    List<Pet> pets = Pets.arrayList(7); \\n    print(\\\"1: \\\" + pets); \\n    Hamster h = new Hamster(); \\n    pets.add(h); // Automatically resizes \\n    print(\\\"2: \\\" + pets); \\n    print(\\\"3: \\\" + pets.contains(h)); \\n    pets.remove(h); // Remove by object \\n    Pet p = pets.get(2); \\n    print(\\\"4: \\\" +  p + \\\" \\\" + pets.indexOf(p)); \\n    Pet cymric = new Cymric(); \\n    print(\\\"5: \\\" + pets.indexOf(cymric)); \\n    print(\\\"6: \\\" + pets.remove(cymric)); \\n    // Must be the exact object: \\n    print(\\\"7: \\\" + pets.remove(p)); \\n    print(\\\"8: \\\" + pets); \\n    pets.add(3, new Mouse()); // Insert at an index\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1dba1126456f6d1281076f2f421b7611\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"9: \\\" + pets); \\n    List<Pet> sub = pets.subList(1, 4); \\n    print(\\\"subList: \\\" + sub); \\n    print(\\\"10: \\\" + pets.containsAll(sub)); \\n    Collections.sort(sub); // In-place sort \\n    print(\\\"sorted subList: \\\" + sub); \\n    // Order is not important in containsAll(): \\n    print(\\\"11: \\\" + pets.containsAll(sub)); \\n    Collections.shuffle(sub, rand); // Mix it up \\n    print(\\\"shuffled subList: \\\" + sub); \\n    print(\\\"12: \\\" + pets.containsAll(sub)); \\n    List<Pet> copy = new ArrayList<Pet>(pets); \\n    sub = Arrays.asList(pets.get(1), pets.get(4)); \\n    print(\\\"sub: \\\" + sub); \\n    copy.retainAll(sub); \\n    print(\\\"13: \\\" + copy); \\n    copy = new ArrayList<Pet>(pets); // Get a fresh copy \\n    copy.remove(2); // Remove by index \\n    print(\\\"14: \\\" + copy); \\n    copy.removeAll(sub); // Only removes exact objects \\n    print(\\\"15: \\\" + copy); \\n    copy.set(1, new Mouse()); // Replace an element \\n    print(\\\"16: \\\" + copy); \\n    copy.addAll(2, sub); // Insert a list in the middle \\n    print(\\\"17: \\\" + copy); \\n    print(\\\"18: \\\" + pets.isEmpty()); \\n    pets.clear(); // Remove all elements \\n    print(\\\"19: \\\" + pets); \\n    print(\\\"20: \\\" + pets.isEmpty()); \\n    pets.addAll(Pets.arrayList(4)); \\n    print(\\\"21: \\\" + pets); \\n    Object[] o = pets.toArray(); \\n    print(\\\"22: \\\" + o[3]); \\n    Pet[] pa = pets.toArray(new Pet[0]); \\n    print(\\\"23: \\\" + pa[3].id());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65b263832234bbaa7448ccc8d019c568\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Pet> pets = Pets.arrayList(12); \\n    Iterator<Pet> it = pets.iterator(); \\n    while(it.hasNext()) { \\n      Pet p = it.next(); \\n      System.out.print(p.id() + \\\":\\\" + p + \\\" \\\"); \\n    } \\n    System.out.println(); \\n    // A simpler approach, when possible: \\n    for(Pet p : pets) \\n      System.out.print(p.id() + \\\":\\\" + p + \\\" \\\"); \\n    System.out.println();  \\n    // An Iterator can also remove elements: \\n    it = pets.iterator(); \\n    for(int i = 0; i < 6; i++) { \\n      it.next(); \\n      it.remove(); \\n    } \\n    System.out.println(pets);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a7cb9afb0417262e8254b05c1f33c42\",\n        \"type\": \"source_code\",\n        \"text\": \"while(it.hasNext()) { \\n      Pet p = it.next(); \\n      System.out.print(p.id() + \\\":\\\" + p + \\\" \\\"); \\n    } \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2368d1a2766bb119a05b20e0c9fcf0ed\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList<Pet> pets = Pets.arrayList(8); \\n    LinkedList<Pet> petsLL = new LinkedList<Pet>(pets); \\n    HashSet<Pet> petsHS = new HashSet<Pet>(pets); \\n    TreeSet<Pet> petsTS = new TreeSet<Pet>(pets); \\n    display(pets.iterator()); \\n    display(petsLL.iterator()); \\n    display(petsHS.iterator()); \\n    display(petsTS.iterator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"347a83f40575737e3acf80a778fb2bfa\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Pet> pets = Pets.arrayList(8); \\n    ListIterator<Pet> it = pets.listIterator(); \\n    while(it.hasNext()) \\n      System.out.print(it.next() + \\\", \\\" + it.nextIndex() + \\n        \\\", \\\" + it.previousIndex() + \\\"; \\\"); \\n    System.out.println(); \\n    // Backwards: \\n    while(it.hasPrevious()) \\n      System.out.print(it.previous().id() + \\\" \\\"); \\n    System.out.println(); \\n    System.out.println(pets);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21e0711023a8dd2dd7845ec019be8a44\",\n        \"type\": \"source_code\",\n        \"text\": \"it = pets.listIterator(3); \\n    while(it.hasNext()) { \\n      it.next(); \\n      it.set(Pets.randomPet()); \\n    } \\n    System.out.println(pets);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"82c3b29423fbd48b256ec36dd1bf8b16\",\n        \"type\": \"source_code\",\n        \"text\": \"LinkedList<Pet> pets = \\n      new LinkedList<Pet>(Pets.arrayList(5)); \\n    print(pets); \\n    // Identical: \\n    print(\\\"pets.getFirst(): \\\" + pets.getFirst()); \\n    print(\\\"pets.element(): \\\" + pets.element()); \\n    // Only differs in empty-list behavior: \\n    print(\\\"pets.peek(): \\\" + pets.peek()); \\n    // Identical; remove and return the first element: \\n    print(\\\"pets.remove(): \\\" + pets.remove()); \\n    print(\\\"pets.removeFirst(): \\\" + pets.removeFirst()); \\n    // Only differs in empty-list behavior: \\n    print(\\\"pets.poll(): \\\" + pets.poll()); \\n    print(pets); \\n    pets.addFirst(new Rat()); \\n    print(\\\"After addFirst(): \\\" + pets); \\n    pets.offer(Pets.randomPet()); \\n    print(\\\"After offer(): \\\" + pets); \\n    pets.add(Pets.randomPet()); \\n    print(\\\"After add(): \\\" + pets); \\n    pets.addLast(new Hamster()); \\n    print(\\\"After addLast(): \\\" + pets); \\n    print(\\\"pets.removeLast(): \\\" + pets.removeLast());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0a31873cbf8ac5117ba17f5a12dc78e8\",\n        \"type\": \"source_code\",\n        \"text\": \"Stack<String> stack = new Stack<String>(); \\n    for(String s : \\\"My dog has fleas\\\".split(\\\" \\\")) \\n      stack.push(s); \\n    while(!stack.empty()) \\n      System.out.print(stack.pop() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2dfd6a6dde1bff2fa20aa845da79d1c7\",\n        \"type\": \"source_code\",\n        \"text\": \"net.mindview.util.Stack<String> stack = \\n      new net.mindview.util.Stack<String>(); \\n    for(String s : \\\"My dog has fleas\\\".split(\\\" \\\")) \\n      stack.push(s); \\n    while(!stack.empty()) \\n      System.out.print(stack.pop() + \\\" \\\"); \\n    System.out.println(); \\n    java.util.Stack<String> stack2 = \\n      new java.util.Stack<String>(); \\n    for(String s : \\\"My dog has fleas\\\".split(\\\" \\\")) \\n      stack2.push(s); \\n    while(!stack2.empty()) \\n      System.out.print(stack2.pop() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f379265f302dd03c701721d6ffc06f36\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    Set<Integer> intset = new HashSet<Integer>(); \\n    for(int i = 0; i < 10000; i++) \\n      intset.add(rand.nextInt(30)); \\n    System.out.println(intset);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c33b9c0961fe4efc1a27f86b98f8b8b2\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    SortedSet<Integer> intset = new TreeSet<Integer>(); \\n    for(int i = 0; i < 10000; i++) \\n      intset.add(rand.nextInt(30)); \\n    System.out.println(intset);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b41a6cf3c0fac9d9dc8769413a13df0\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> set1 = new HashSet<String>(); \\n    Collections.addAll(set1, \\n      \\\"A B C D E F G H I J K L\\\".split(\\\" \\\")); \\n    set1.add(\\\"M\\\"); \\n    print(\\\"H: \\\" + set1.contains(\\\"H\\\")); \\n    print(\\\"N: \\\" + set1.contains(\\\"N\\\")); \\n    Set<String> set2 = new HashSet<String>(); \\n    Collections.addAll(set2, \\\"H I J K L\\\".split(\\\" \\\")); \\n    print(\\\"set2 in set1: \\\" + set1.containsAll(set2)); \\n    set1.remove(\\\"H\\\"); \\n    print(\\\"set1: \\\" + set1); \\n    print(\\\"set2 in set1: \\\" + set1.containsAll(set2)); \\n    set1.removeAll(set2); \\n    print(\\\"set2 removed from set1: \\\" + set1); \\n    Collections.addAll(set1, \\\"X Y Z\\\".split(\\\" \\\")); \\n    print(\\\"\\u2018X Y Z\\u2019 added to set1: \\\" + set1);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8eac081d83af5e05e1c021d66eae376b\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> words = new TreeSet<String>( \\n      new TextFile(\\\"SetOperations.java\\\", \\\"\\\\\\\\W+\\\")); \\n    System.out.println(words);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa7c824ce54e87b7c46eb041bd12258c\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<String> words = \\n      new TreeSet<String>(String.CASE_INSENSITIVE_ORDER); \\n    words.addAll( \\n      new TextFile(\\\"SetOperations.java\\\", \\\"\\\\\\\\W+\\\")); \\n    System.out.println(words);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8697f5b39fe8e67410d43532402d8f38\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    Map<Integer,Integer> m = \\n      new HashMap<Integer,Integer>(); \\n    for(int i = 0; i < 10000; i++) { \\n      // Produce a number between 0 and 20: \\n      int r = rand.nextInt(20); \\n      Integer freq = m.get(r); \\n      m.put(r, freq == null ? 1 : freq + 1); \\n    } \\n    System.out.println(m);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93565da45b3c186873294d90c6a4b7da\",\n        \"type\": \"source_code\",\n        \"text\": \"Map<String,Pet> petMap = new HashMap<String,Pet>(); \\n    petMap.put(\\\"My Cat\\\", new Cat(\\\"Molly\\\")); \\n    petMap.put(\\\"My Dog\\\", new Dog(\\\"Ginger\\\")); \\n    petMap.put(\\\"My Hamster\\\", new Hamster(\\\"Bosco\\\")); \\n    print(petMap); \\n    Pet dog = petMap.get(\\\"My Dog\\\"); \\n    print(dog); \\n    print(petMap.containsKey(\\\"My Dog\\\")); \\n    print(petMap.containsValue(dog));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7c9d8983454f23b23a6bfa03323c4c70\",\n        \"type\": \"source_code\",\n        \"text\": \"petPeople = new HashMap<Person, List<? extends Pet>>();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5b5f6516229a5a3f4c56d9d283c80cc\",\n        \"type\": \"source_code\",\n        \"text\": \"petPeople.put(new Person(\\\"Dawn\\\"), \\n      Arrays.asList(new Cymric(\\\"Molly\\\"),new Mutt(\\\"Spot\\\"))); \\n    petPeople.put(new Person(\\\"Kate\\\"), \\n      Arrays.asList(new Cat(\\\"Shackleton\\\"), \\n        new Cat(\\\"Elsie May\\\"), new Dog(\\\"Margrett\\\")));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42cfc15b61b9745406354bb2a6b35356\",\n        \"type\": \"source_code\",\n        \"text\": \"petPeople.put(new Person(\\\"Marilyn\\\"), \\n      Arrays.asList( \\n       new Pug(\\\"Louie aka Louis Snorkelstein Dupree\\\"), \\n       new Cat(\\\"Stanford aka Stinky el Negro\\\"), \\n       new Cat(\\\"Pinkola\\\")));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb8c1ec70307d4db18799b401cce27ab\",\n        \"type\": \"source_code\",\n        \"text\": \"petPeople.put(new Person(\\\"Luke\\\"), \\n      Arrays.asList(new Rat(\\\"Fuzzy\\\"), new Rat(\\\"Fizzy\\\"))); \\n    petPeople.put(new Person(\\\"Isaac\\\"), \\n      Arrays.asList(new Rat(\\\"Freckly\\\")));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b6f5b3b7e17d375232d1c5df63188e9\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"People: \\\" + petPeople.keySet()); \\n    print(\\\"Pets: \\\" + petPeople.values()); \\n    for(Person person : petPeople.keySet()) { \\n      print(person + \\\" has:\\\"); \\n      for(Pet pet : petPeople.get(person)) \\n        print(\\\"    \\\" + pet); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a16310ab663dcf114929b021c604824\",\n        \"type\": \"source_code\",\n        \"text\": \"Rat Fuzzy \\n    Rat Fizzy\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ca0f44a4c1a33dc58d9363d54f49f95b\",\n        \"type\": \"source_code\",\n        \"text\": \"Pug Louie aka Louis Snorkelstein Dupree \\n    Cat Stanford aka Stinky el Negro \\n    Cat Pinkola\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f00952b05d1c26ad8c8b0c6fbe58d752\",\n        \"type\": \"source_code\",\n        \"text\": \"Rat Freckly\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c791cef6fa56447788428730181689b9\",\n        \"type\": \"source_code\",\n        \"text\": \"Cymric Molly \\n    Mutt Spot\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"670fce2b2df3fd3bad8563fe01e324d0\",\n        \"type\": \"source_code\",\n        \"text\": \"Cat Shackleton \\n    Cat Elsie May \\n    Dog Margrett\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b303f488ee63459e2020dd33ddc4c469\",\n        \"type\": \"source_code\",\n        \"text\": \"while(queue.peek() != null) \\n      System.out.print(queue.remove() + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc650296f2fb034f34f0f12ed053f4ac\",\n        \"type\": \"source_code\",\n        \"text\": \"Queue<Integer> queue = new LinkedList<Integer>(); \\n    Random rand = new Random(47); \\n    for(int i = 0; i < 10; i++)\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a0ef77b2c0bcb5ae871067ffe13f9a4\",\n        \"type\": \"source_code\",\n        \"text\": \"queue.offer(rand.nextInt(i + 10)); \\n    printQ(queue); \\n    Queue<Character> qc = new LinkedList<Character>(); \\n    for(char c : \\\"Brontosaurus\\\".toCharArray()) \\n      qc.offer(c); \\n    printQ(qc);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d2b85b17335c9c7c42214d7367b915a6\",\n        \"type\": \"source_code\",\n        \"text\": \"PriorityQueue<Integer> priorityQueue = \\n      new PriorityQueue<Integer>(); \\n    Random rand = new Random(47); \\n    for(int i = 0; i < 10; i++) \\n      priorityQueue.offer(rand.nextInt(i + 10)); \\n    QueueDemo.printQ(priorityQueue);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d8c6fe860959b091dbeac9ea8b992929\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Integer> ints = Arrays.asList(25, 22, 20, \\n      18, 14, 9, 3, 1, 1, 2, 3, 9, 14, 18, 21, 23, 25); \\n    priorityQueue = new PriorityQueue<Integer>(ints); \\n    QueueDemo.printQ(priorityQueue); \\n    priorityQueue = new PriorityQueue<Integer>( \\n        ints.size(), Collections.reverseOrder()); \\n    priorityQueue.addAll(ints); \\n    QueueDemo.printQ(priorityQueue);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1815969e72caad581c9fc13a84c08ab\",\n        \"type\": \"source_code\",\n        \"text\": \"String fact = \\\"EDUCATION SHOULD ESCHEW OBFUSCATION\\\"; \\n    List<String> strings = Arrays.asList(fact.split(\\\"\\\")); \\n    PriorityQueue<String> stringPQ = \\n      new PriorityQueue<String>(strings); \\n    QueueDemo.printQ(stringPQ); \\n    stringPQ = new PriorityQueue<String>( \\n      strings.size(), Collections.reverseOrder()); \\n    stringPQ.addAll(strings); \\n    QueueDemo.printQ(stringPQ);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9f1fc09fa6520672c97888487205001a\",\n        \"type\": \"source_code\",\n        \"text\": \"Set<Character> charSet = new HashSet<Character>(); \\n    for(char c : fact.toCharArray()) \\n      charSet.add(c); // Autoboxing \\n    PriorityQueue<Character> characterPQ = \\n      new PriorityQueue<Character>(charSet); \\n    QueueDemo.printQ(characterPQ);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f0d5f803d8947af8e9f36c512881086\",\n        \"type\": \"source_code\",\n        \"text\": \"A A B C C C D D E E E F H H I I L N N O O O O S S S T T U U U W\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a7cb9afb0417262e8254b05c1f33c42\",\n        \"type\": \"source_code\",\n        \"text\": \"while(it.hasNext()) { \\n      Pet p = it.next(); \\n      System.out.print(p.id() + \\\":\\\" + p + \\\" \\\"); \\n    } \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83c32d5c79cfe8f1a20adc093fe06fb2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Pet p : pets) \\n      System.out.print(p.id() + \\\":\\\" + p + \\\" \\\"); \\n    System.out.println();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8441d1903417ce03839aa87698f7dbbf\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Pet> petList = Pets.arrayList(8); \\n    Set<Pet> petSet = new HashSet<Pet>(petList); \\n    Map<String,Pet> petMap = \\n      new LinkedHashMap<String,Pet>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c355f95752c0ebbe3867cfc5ac6bfa6d\",\n        \"type\": \"source_code\",\n        \"text\": \"String[] names = (\\\"Ralph, Eric, Robin, Lacey, \\\" + \\n      \\\"Britney, Sam, Spot, Fluffy\\\").split(\\\", \\\"); \\n    for(int i = 0; i < names.length; i++) \\n      petMap.put(names[i], petList.get(i)); \\n    display(petList); \\n    display(petSet); \\n    display(petList.iterator()); \\n    display(petSet.iterator()); \\n    System.out.println(petMap); \\n    System.out.println(petMap.keySet()); \\n    display(petMap.values()); \\n    display(petMap.values().iterator());\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab2e629489e9a91545948a09fa154539\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterator<Pet>() { \\n      private int index = 0; \\n      public boolean hasNext() { \\n        return index < pets.length; \\n      } \\n      public Pet next() { return pets[index++]; } \\n      public void remove() { // Not implemented \\n        throw new UnsupportedOperationException(); \\n      }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2145c1b6992c0d519ad223f91671329b\",\n        \"type\": \"source_code\",\n        \"text\": \"};\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b5c048fa968b9dc24274015f659d88b\",\n        \"type\": \"source_code\",\n        \"text\": \"CollectionSequence c = new CollectionSequence(); \\n    InterfaceVsIterator.display(c); \\n    InterfaceVsIterator.display(c.iterator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"23bbf440dde148ef2049e6b4ca28fb99\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterator<Pet>() { \\n      private int index = 0; \\n      public boolean hasNext() { \\n        return index < pets.length; \\n      } \\n      public Pet next() { return pets[index++]; } \\n      public void remove() { // Not implemented \\n        throw new UnsupportedOperationException(); \\n      } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"201b2a60fb5be8733668f8de10b47d2b\",\n        \"type\": \"source_code\",\n        \"text\": \"NonCollectionSequence nc = new NonCollectionSequence(); \\n    InterfaceVsIterator.display(nc.iterator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e27ebd6b205363ad217bc79f1d70743b\",\n        \"type\": \"source_code\",\n        \"text\": \"Collection<String> cs = new LinkedList<String>(); \\n    Collections.addAll(cs, \\n      \\\"Take the long way home\\\".split(\\\" \\\")); \\n    for(String s : cs) \\n      System.out.print(\\\"\\u2018\\\" + s + \\\"\\u2018 \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c6d10c0aad5888c30d8c407e140e81ed\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"we know the Earth to be banana-shaped.\\\").split(\\\" \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dceade25b032baf42e3816b030831b11\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterator<String>() { \\n      private int index = 0; \\n      public boolean hasNext() { \\n        return index < words.length; \\n      } \\n      public String next() { return words[index++]; } \\n      public void remove() { // Not implemented \\n        throw new UnsupportedOperationException(); \\n      } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cefd96f4043c7d69fc72dbf3a754bff2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(String s : new IterableClass()) \\n      System.out.print(s + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74f88a859d45cb0c7df725cd102eae60\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Map.Entry entry: System.getenv().entrySet()) { \\n      System.out.println(entry.getKey() + \\\": \\\" + \\n        entry.getValue()); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12e5218f2d71f8ed48404a71ef9f98a2\",\n        \"type\": \"source_code\",\n        \"text\": \"for(T t : ib) \\n      System.out.print(t + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"869be2b5b4ecc0de5d038a29777104dd\",\n        \"type\": \"source_code\",\n        \"text\": \"test(Arrays.asList(1, 2, 3)); \\n    String[] strings = { \\\"A\\\", \\\"B\\\", \\\"C\\\" }; \\n    // An array works in foreach, but it\\u2019s not Iterable: \\n    //! test(strings); \\n    // You must explicitly convert it to an Iterable: \\n    test(Arrays.asList(strings));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7ea8b8662895ae38903af2dd45dc8fa\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterable<T>() { \\n      public Iterator<T> iterator() { \\n        return new Iterator<T>() { \\n          int current = size() - 1; \\n          public boolean hasNext() { return current > -1; } \\n          public T next() { return get(current--); } \\n          public void remove() { // Not implemented \\n            throw new UnsupportedOperationException(); \\n          } \\n        }; \\n      } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"297f31441a1b51a04c74c626bd6d165f\",\n        \"type\": \"source_code\",\n        \"text\": \"ReversibleArrayList<String> ral = \\n      new ReversibleArrayList<String>( \\n        Arrays.asList(\\\"To be or not to be\\\".split(\\\" \\\"))); \\n    // Grabs the ordinary iterator via iterator(): \\n    for(String s : ral) \\n      System.out.print(s + \\\" \\\"); \\n    System.out.println(); \\n    // Hand it the Iterable of your choice \\n    for(String s : ral.reversed()) \\n      System.out.print(s + \\\" \\\");\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66d66472a08b9962f893a815012fe0d9\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterable<String>() { \\n      public Iterator<String> iterator() { \\n        return new Iterator<String>() { \\n          int current = words.length - 1; \\n          public boolean hasNext() { return current > -1; } \\n          public String next() { return words[current--]; } \\n          public void remove() { // Not implemented \\n            throw new UnsupportedOperationException(); \\n          } \\n        }; \\n      } \\n    };\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa87bc5c613ff276d8d650d8df541364\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Iterable<String>() { \\n      public Iterator<String> iterator() { \\n        List<String> shuffled = \\n          new ArrayList<String>(Arrays.asList(words)); \\n        Collections.shuffle(shuffled, new Random(47)); \\n        return shuffled.iterator(); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a0506c4ab647470e0ffa07ae4d53a650\",\n        \"type\": \"source_code\",\n        \"text\": \"MultiIterableClass mic = new MultiIterableClass(); \\n    for(String s : mic.reversed()) \\n      System.out.print(s + \\\" \\\"); \\n    System.out.println(); \\n    for(String s : mic.randomized()) \\n      System.out.print(s + \\\" \\\"); \\n    System.out.println(); \\n    for(String s : mic) \\n      System.out.print(s + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"329970ab015545f42414e00774cbd292\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    Integer[] ia = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; \\n    List<Integer> list1 = \\n      new ArrayList<Integer>(Arrays.asList(ia)); \\n    System.out.println(\\\"Before shuffling: \\\" + list1); \\n    Collections.shuffle(list1, rand); \\n    System.out.println(\\\"After shuffling: \\\" + list1); \\n    System.out.println(\\\"array: \\\" + Arrays.toString(ia));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"946597443c59d864b97e93ac9f86505d\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Integer> list2 = Arrays.asList(ia); \\n    System.out.println(\\\"Before shuffling: \\\" + list2); \\n    Collections.shuffle(list2, rand); \\n    System.out.println(\\\"After shuffling: \\\" + list2); \\n    System.out.println(\\\"array: \\\" + Arrays.toString(ia));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b2d9e7fa6ca4d2b99f8eb84f8001edd8\",\n        \"type\": \"source_code\",\n        \"text\": \"ContainerMethodDifferences.main(args);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4800755a86eeca07583b9d725789f75d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Throw SimpleException from f()\\\"); \\n    throw new SimpleException();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4c24bf932610d1229c15e3d28d1a4c0b\",\n        \"type\": \"source_code\",\n        \"text\": \"InheritingExceptions sed = new InheritingExceptions(); \\n    try { \\n      sed.f(); \\n    } catch(SimpleException e) { \\n      System.out.println(\\\"Caught it!\\\"); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39f289a1b72ea14c2ebb06f726b3862d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Throwing MyException from f()\\\"); \\n    throw new MyException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7b4a2649e4bf1d3866d798a4caa9371\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Throwing MyException from g()\\\"); \\n    throw new MyException(\\\"Originated in g()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ac5205c09cfbb830e476e15fa74fa75\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      f(); \\n    } catch(MyException e) { \\n      e.printStackTrace(System.out); \\n    } \\n    try { \\n      g(); \\n    } catch(MyException e) { \\n      e.printStackTrace(System.out); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a9ddaf9a07147dec11168619b98d16ce\",\n        \"type\": \"source_code\",\n        \"text\": \"at FullConstructors.f(FullConstructors.java:11) \\n        at FullConstructors.main(FullConstructors.java:19)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a8b0f435a9dd1306fbf8acc69afcec47\",\n        \"type\": \"source_code\",\n        \"text\": \"at FullConstructors.g(FullConstructors.java:15) \\n        at FullConstructors.main(FullConstructors.java:24)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1f6655c0be2381dc9154e8665fd0a800\",\n        \"type\": \"source_code\",\n        \"text\": \"Logger.getLogger(\\\"LoggingException\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b144ea18fd4b9254e8ea9dca2bc12d61\",\n        \"type\": \"source_code\",\n        \"text\": \"StringWriter trace = new StringWriter(); \\n    printStackTrace(new PrintWriter(trace)); \\n    logger.severe(trace.toString());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b06acd19bd29c3eb3906dcad05282e2b\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      throw new LoggingException(); \\n    } catch(LoggingException e) { \\n      System.err.println(\\\"Caught \\\" + e); \\n    } \\n    try { \\n      throw new LoggingException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"99a7176b213218c557c9e8c168d582c8\",\n        \"type\": \"source_code\",\n        \"text\": \"} catch(LoggingException e) { \\n      System.err.println(\\\"Caught \\\" + e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"55dd994cc4825d9b500786d58477e4ea\",\n        \"type\": \"source_code\",\n        \"text\": \"at LoggingExceptions.main(LoggingExceptions.java:19)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2d2e72f0803e45145a950d1fd97f51a2\",\n        \"type\": \"source_code\",\n        \"text\": \"at LoggingExceptions.main(LoggingExceptions.java:24)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f2d86e8c0bab8550642afc224a0c6b8f\",\n        \"type\": \"source_code\",\n        \"text\": \"Logger.getLogger(\\\"LoggingExceptions2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"915c7a7c175a65d94719d33903352957\",\n        \"type\": \"source_code\",\n        \"text\": \"StringWriter trace = new StringWriter(); \\n    e.printStackTrace(new PrintWriter(trace)); \\n    logger.severe(trace.toString());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f588586f41daba6e2d841c067a41c96\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      throw new NullPointerException(); \\n    } catch(NullPointerException e) { \\n      logException(e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c6d7154294d7df9e960d2544dc0c16e4\",\n        \"type\": \"source_code\",\n        \"text\": \"at LoggingExceptions2.main(LoggingExceptions2.java:16)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"67941738bac78818560b9ddf3ad4a502\",\n        \"type\": \"source_code\",\n        \"text\": \"super(msg); \\n    this.x = x;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fbd78769cdb9d1cb3d59e478d52e01cc\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Detail Message: \\\"+ x + \\\" \\\"+ super.getMessage();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ccc0bf73d76beea929ed0ece97401a5\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Throwing MyException2 from f()\\\"); \\n    throw new MyException2();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e659acc2a04069977ca894db40ca6d6\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Throwing MyException2 from g()\\\"); \\n    throw new MyException2(\\\"Originated in g()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c57c13ce8ac75a2ac85a96212615391d\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Throwing MyException2 from h()\\\"); \\n    throw new MyException2(\\\"Originated in h()\\\", 47);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"95694bb3fb35ad33fc994a630b202278\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      f(); \\n    } catch(MyException2 e) { \\n      e.printStackTrace(System.out); \\n    } \\n    try { \\n      g(); \\n    } catch(MyException2 e) { \\n      e.printStackTrace(System.out); \\n    } \\n    try { \\n      h(); \\n    } catch(MyException2 e) { \\n      e.printStackTrace(System.out); \\n      System.out.println(\\\"e.val() = \\\" + e.val()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b427d748a68a6d9c8bf16af1dcc174d\",\n        \"type\": \"source_code\",\n        \"text\": \"at ExtraFeatures.f(ExtraFeatures.java:22) \\n        at ExtraFeatures.main(ExtraFeatures.java:34)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03a4d088ede55fd7d4650e3f09f4122c\",\n        \"type\": \"source_code\",\n        \"text\": \"at ExtraFeatures.g(ExtraFeatures.java:26) \\n        at ExtraFeatures.main(ExtraFeatures.java:39)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b45b987d9f5443ff16be3be5029b0cfc\",\n        \"type\": \"source_code\",\n        \"text\": \"at ExtraFeatures.h(ExtraFeatures.java:30) \\n        at ExtraFeatures.main(ExtraFeatures.java:44)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37e3a92d8ae4e6086383355c2abdc420\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      throw new Exception(\\\"My Exception\\\"); \\n    } catch(Exception e) { \\n      print(\\\"Caught Exception\\\"); \\n      print(\\\"getMessage():\\\" + e.getMessage()); \\n      print(\\\"getLocalizedMessage():\\\" + \\n        e.getLocalizedMessage()); \\n      print(\\\"toString():\\\" + e); \\n      print(\\\"printStackTrace():\\\"); \\n      e.printStackTrace(System.out); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35495cdfb509ce8a9dda8a222817bf33\",\n        \"type\": \"source_code\",\n        \"text\": \"at ExceptionMethods.main(ExceptionMethods.java:8)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37a4ebb103188cd1d147ed3cbf77979a\",\n        \"type\": \"source_code\",\n        \"text\": \"// Generate an exception to fill in the stack trace \\n    try { \\n      throw new Exception(); \\n    } catch (Exception e) { \\n      for(StackTraceElement ste : e.getStackTrace()) \\n        System.out.println(ste.getMethodName()); \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9d3acd76c6f7c8e674f3e41f803892a3\",\n        \"type\": \"source_code\",\n        \"text\": \"f(); \\n    System.out.println(\\\"--------------------------------\\\"); \\n    g(); \\n    System.out.println(\\\"--------------------------------\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0dde31554c2b7721b1cdad28f23f7ae1\",\n        \"type\": \"source_code\",\n        \"text\": \"h();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9be9512250beb22b707a8c3395f4c88\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"originating the exception in f()\\\"); \\n    throw new Exception(\\\"thrown from f()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b5b90c6b3a41fca23d0778708c5c9e33\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      f(); \\n    } catch(Exception e) { \\n      System.out.println(\\\"Inside g(),e.printStackTrace()\\\"); \\n      e.printStackTrace(System.out); \\n      throw e; \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f374f16f1514eed6f3b494d57cc0e1f1\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      f(); \\n    } catch(Exception e) { \\n      System.out.println(\\\"Inside h(),e.printStackTrace()\\\"); \\n      e.printStackTrace(System.out); \\n      throw (Exception)e.fillInStackTrace(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eaf6537fd5574ab100f34c4041317856\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      g(); \\n    } catch(Exception e) { \\n      System.out.println(\\\"main: printStackTrace()\\\"); \\n      e.printStackTrace(System.out); \\n    } \\n    try { \\n      h(); \\n    } catch(Exception e) { \\n      System.out.println(\\\"main: printStackTrace()\\\"); \\n      e.printStackTrace(System.out); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ac615cd752064d5da935a16010ca8fb8\",\n        \"type\": \"source_code\",\n        \"text\": \"at Rethrowing.f(Rethrowing.java:7) \\n        at Rethrowing.g(Rethrowing.java:11) \\n        at Rethrowing.main(Rethrowing.java:29)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ac615cd752064d5da935a16010ca8fb8\",\n        \"type\": \"source_code\",\n        \"text\": \"at Rethrowing.f(Rethrowing.java:7) \\n        at Rethrowing.g(Rethrowing.java:11) \\n        at Rethrowing.main(Rethrowing.java:29)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a501fca8338209b40604ca8bdb85898d\",\n        \"type\": \"source_code\",\n        \"text\": \"at Rethrowing.f(Rethrowing.java:7) \\n        at Rethrowing.h(Rethrowing.java:20) \\n        at Rethrowing.main(Rethrowing.java:35)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"69cf48ff45967a13a685fd57078dd1dd\",\n        \"type\": \"source_code\",\n        \"text\": \"at Rethrowing.h(Rethrowing.java:24) \\n        at Rethrowing.main(Rethrowing.java:35)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf37d6c69069c4e4243888cd178dfc64\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"originating the exception in f()\\\"); \\n    throw new OneException(\\\"thrown from f()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"50fabddd1d23a139a032571ff5f872ab\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      try { \\n        f(); \\n      } catch(OneException e) { \\n        System.out.println( \\n          \\\"Caught in inner try, e.printStackTrace()\\\"); \\n        e.printStackTrace(System.out); \\n        throw new TwoException(\\\"from inner try\\\"); \\n      } \\n    } catch(TwoException e) { \\n      System.out.println( \\n        \\\"Caught in outer try, e.printStackTrace()\\\"); \\n      e.printStackTrace(System.out); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"77bf30f306747d9d6d36209af8d99f07\",\n        \"type\": \"source_code\",\n        \"text\": \"at RethrowNew.f(RethrowNew.java:15) \\n        at RethrowNew.main(RethrowNew.java:20)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48d11742a77d4c58c24aa998258c0e89\",\n        \"type\": \"source_code\",\n        \"text\": \"at RethrowNew.main(RethrowNew.java:25)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"77a9ba56b3fd3c198bf702991c735a67\",\n        \"type\": \"source_code\",\n        \"text\": \"fields = new Object[initialSize][2]; \\n    for(int i = 0; i < initialSize; i++) \\n      fields[i] = new Object[] { null, null };\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a1e1d3cf0bda3e8d5b07da9f14b63d58\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(); \\n    for(Object[] obj : fields) { \\n      result.append(obj[0]); \\n      result.append(\\\": \\\"); \\n      result.append(obj[1]); \\n      result.append(\\\"\\\\n\\\"); \\n    } \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"efb06dc66b3368d00f7061b2aab8ad7d\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < fields.length; i++) \\n      if(id.equals(fields[i][0])) \\n        return i; \\n    return -1;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f56d2463992ef9f57872ca68027f3f17\",\n        \"type\": \"source_code\",\n        \"text\": \"int fieldNum = hasField(id); \\n    if(fieldNum == -1) \\n      throw new NoSuchFieldException(); \\n    return fieldNum;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad0baabdc6973c407853515a01c76861\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < fields.length; i++) \\n      if(fields[i][0] == null) { \\n        fields[i][0] = id; \\n        return i; \\n      } \\n    // No empty fields. Add one: \\n    Object[][] tmp = new Object[fields.length + 1][2]; \\n    for(int i = 0; i < fields.length; i++) \\n      tmp[i] = fields[i]; \\n    for(int i = fields.length; i < tmp.length; i++) \\n      tmp[i] = new Object[] { null, null }; \\n    fields = tmp; \\n    // Recursive call with expanded fields: \\n    return makeField(id);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3bc130560c162c7e1c44fb35cd318784\",\n        \"type\": \"source_code\",\n        \"text\": \"return fields[getFieldNumber(id)][1];\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3606dcce7cead9c7f504222af44bb33a\",\n        \"type\": \"source_code\",\n        \"text\": \"if(value == null) { \\n      // Most exceptions don\\u2019t have a \\\"cause\\\" constructor. \\n      // In these cases you must use initCause(), \\n      // available in all Throwable subclasses. \\n      DynamicFieldsException dfe =\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3927086ff38ed1ae839bc984b0582086\",\n        \"type\": \"source_code\",\n        \"text\": \"new DynamicFieldsException(); \\n      dfe.initCause(new NullPointerException()); \\n      throw dfe; \\n    } \\n    int fieldNumber = hasField(id); \\n    if(fieldNumber == -1) \\n      fieldNumber = makeField(id); \\n    Object result = null; \\n    try { \\n      result = getField(id); // Get old value \\n    } catch(NoSuchFieldException e) { \\n      // Use constructor that takes \\\"cause\\\": \\n      throw new RuntimeException(e); \\n    } \\n    fields[fieldNumber][1] = value; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fa900a707567376bfa917eba34d2db60\",\n        \"type\": \"source_code\",\n        \"text\": \"DynamicFields df = new DynamicFields(3); \\n    print(df); \\n    try { \\n      df.setField(\\\"d\\\", \\\"A value for d\\\"); \\n      df.setField(\\\"number\\\", 47); \\n      df.setField(\\\"number2\\\", 48); \\n      print(df); \\n      df.setField(\\\"d\\\", \\\"A new value for d\\\"); \\n      df.setField(\\\"number3\\\", 11); \\n      print(\\\"df: \\\" + df); \\n      print(\\\"df.getField(\\\\\\\"d\\\\\\\") : \\\" + df.getField(\\\"d\\\")); \\n      Object field = df.setField(\\\"d\\\", null); // Exception \\n    } catch(NoSuchFieldException e) { \\n      e.printStackTrace(System.out); \\n    } catch(DynamicFieldsException e) { \\n      e.printStackTrace(System.out); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f8d5feb086978a673622d616a08ea4b\",\n        \"type\": \"source_code\",\n        \"text\": \"at DynamicFields.setField(DynamicFields.java:64) \\n        at DynamicFields.main(DynamicFields.java:94)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3408e629145484f9e4bb9c7bc9c9c1a1\",\n        \"type\": \"source_code\",\n        \"text\": \"at DynamicFields.setField(DynamicFields.java:66) \\n        ... 1 more\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b84bc4e14ad12236f14eb0d36b4d0060\",\n        \"type\": \"source_code\",\n        \"text\": \"throw new RuntimeException(\\\"From f()\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"252e2998ecb98daa520420e02f91e390\",\n        \"type\": \"source_code\",\n        \"text\": \"f();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eb739902110d7b3111cf7e94821f08ad\",\n        \"type\": \"source_code\",\n        \"text\": \"g();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4e5c6fa8da540d1e29c01760d98abe8\",\n        \"type\": \"source_code\",\n        \"text\": \"at NeverCaught.f(NeverCaught.Java:7) \\n        at NeverCaught.g(NeverCaught.Java:10) \\n        at NeverCaught.main(NeverCaught.Java:13)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"63f7fba07a472392889362125262756a\",\n        \"type\": \"source_code\",\n        \"text\": \"with finally\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"732cf1f5b7332429581715d1ae4d4964\",\n        \"type\": \"source_code\",\n        \"text\": \"while(true) { \\n      try {\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab4829230ac24760243f911afde347a4\",\n        \"type\": \"source_code\",\n        \"text\": \"// Post-increment is zero first time: \\n        if(count++ == 0) \\n          throw new ThreeException(); \\n        System.out.println(\\\"No exception\\\"); \\n      } catch(ThreeException e) { \\n        System.out.println(\\\"ThreeException\\\"); \\n      } finally { \\n        System.out.println(\\\"In finally clause\\\"); \\n        if(count == 2) break; // out of \\\"while\\\" \\n      } \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ee0a4ac8714c164d49ce5864c1917c56\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      sw.on(); \\n      // Code that can throw exceptions... \\n      f(); \\n      sw.off(); \\n    } catch(OnOffException1 e) { \\n      System.out.println(\\\"OnOffException1\\\"); \\n      sw.off(); \\n    } catch(OnOffException2 e) { \\n      System.out.println(\\\"OnOffException2\\\"); \\n      sw.off(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b172b829ecb9fa6ec6ab37fc99eca7ae\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      sw.on(); \\n      // Code that can throw exceptions... \\n      OnOffSwitch.f(); \\n    } catch(OnOffException1 e) { \\n      System.out.println(\\\"OnOffException1\\\"); \\n    } catch(OnOffException2 e) { \\n      System.out.println(\\\"OnOffException2\\\"); \\n    } finally { \\n      sw.off(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d28d87ec4462e3fe7e99ea2a1a844e61\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Entering first try block\\\"); \\n    try { \\n      print(\\\"Entering second try block\\\"); \\n      try { \\n        throw new FourException(); \\n      } finally { \\n        print(\\\"finally in 2nd try block\\\"); \\n      } \\n    } catch(FourException e) { \\n      System.out.println( \\n        \\\"Caught FourException in 1st try block\\\"); \\n    } finally { \\n      System.out.println(\\\"finally in 1st try block\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"794d23f451b670804df9d8ab706dee48\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Initialization that requires cleanup\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5792742f6bc90c48a845f805c077587c\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      print(\\\"Point 1\\\"); \\n      if(i == 1) return; \\n      print(\\\"Point 2\\\"); \\n      if(i == 2) return; \\n      print(\\\"Point 3\\\"); \\n      if(i == 3) return; \\n      print(\\\"End\\\"); \\n      return; \\n    } finally { \\n      print(\\\"Performing cleanup\\\"); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0b208c1ebb78e5bead79dbd9b5d33c12\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 1; i <= 4; i++) \\n      f(i);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1b8f20538aa392f57a7a5c3e601274f4\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"A very important exception!\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74a9456d79e0a7ab45dae1916b235e69\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"A trivial exception\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c48f3d40f9d638977ad01ab99998457\",\n        \"type\": \"source_code\",\n        \"text\": \"throw new VeryImportantException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7de4e0be55e790a8ba5caf85defeeae6\",\n        \"type\": \"source_code\",\n        \"text\": \"throw new HoHumException();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5948b526139504aa13ee652d83733b14\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      LostMessage lm = new LostMessage(); \\n      try { \\n        lm.f(); \\n      } finally { \\n        lm.dispose(); \\n      } \\n    } catch(Exception e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c948099599575ee4ad6bc1f60b83136b\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      throw new RuntimeException(); \\n    } finally { \\n      // Using \\u2018return\\u2019 inside the finally block \\n      // will silence any thrown exception. \\n      return; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c840db80e2ed743d8c5f457887270dc9\",\n        \"type\": \"source_code\",\n        \"text\": \"// Doesn\\u2019t actually have to throw anything\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f3793ae1114b7d616e2d822782d255b\",\n        \"type\": \"source_code\",\n        \"text\": \"throws RainedOut, BaseballException {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e6928e61bfa59f44ab1dfa53ca329513\",\n        \"type\": \"source_code\",\n        \"text\": \"throws Foul, BaseballException {}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b5fd46aa8fa94cc782de0bc03c2f156\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      StormyInning si = new StormyInning(); \\n      si.atBat(); \\n    } catch(PopFoul e) { \\n      System.out.println(\\\"Pop foul\\\"); \\n    } catch(RainedOut e) { \\n      System.out.println(\\\"Rained out\\\"); \\n    } catch(BaseballException e) { \\n      System.out.println(\\\"Generic baseball exception\\\"); \\n    } \\n    // Strike not thrown in derived version. \\n    try { \\n      // What happens if you upcast? \\n      Inning i = new StormyInning(); \\n      i.atBat(); \\n      // You must catch the exceptions from the \\n      // base-class version of the method: \\n    } catch(Strike e) { \\n      System.out.println(\\\"Strike\\\"); \\n    } catch(Foul e) { \\n      System.out.println(\\\"Foul\\\"); \\n    } catch(RainedOut e) { \\n      System.out.println(\\\"Rained out\\\"); \\n    } catch(BaseballException e) { \\n      System.out.println(\\\"Generic baseball exception\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1fb7c4347610c388f2f6240e08c69f94\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      in = new BufferedReader(new FileReader(fname)); \\n      // Other code that might throw exceptions \\n    } catch(FileNotFoundException e) { \\n      System.out.println(\\\"Could not open \\\" + fname); \\n      // Wasn\\u2019t open, so don\\u2019t close it \\n      throw e; \\n    } catch(Exception e) { \\n      // All other exceptions must close it \\n      try { \\n        in.close(); \\n      } catch(IOException e2) { \\n        System.out.println(\\\"in.close() unsuccessful\\\"); \\n      } \\n      throw e; // Rethrow \\n    } finally { \\n      // Don\\u2019t close it here!!! \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90c8e1e2b3d3206b4189b7d1ddf9f315\",\n        \"type\": \"source_code\",\n        \"text\": \"String s; \\n    try { \\n      s = in.readLine(); \\n    } catch(IOException e) { \\n      throw new RuntimeException(\\\"readLine() failed\\\"); \\n    } \\n    return s;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"29e35a80cc3819c0f0bb143476b6f2dc\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      in.close(); \\n      System.out.println(\\\"dispose() successful\\\"); \\n    } catch(IOException e2) { \\n      throw new RuntimeException(\\\"in.close() failed\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a9674fcf21da4f9f6d844b9710834f1\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      InputFile in = new InputFile(\\\"Cleanup.java\\\"); \\n      try { \\n        String s; \\n        int i = 1; \\n        while((s = in.getLine()) != null) \\n          ; // Perform line-by-line processing here... \\n      } catch(Exception e) { \\n        System.out.println(\\\"Caught Exception in main\\\"); \\n        e.printStackTrace(System.out); \\n      } finally { \\n        in.dispose(); \\n      } \\n    } catch(Exception e) { \\n      System.out.println(\\\"InputFile construction failed\\\"); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3fc0dadb29c904fc06ee6032f47afc38\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"NeedsCleanup \\\" + id + \\\" disposed\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e82632f00f3c0d7d148cd0b7184df92\",\n        \"type\": \"source_code\",\n        \"text\": \"// Section 1: \\n    NeedsCleanup nc1 = new NeedsCleanup(); \\n    try { \\n      // ... \\n    } finally { \\n      nc1.dispose(); \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb773fbc56acd4667a756033f7933f22\",\n        \"type\": \"source_code\",\n        \"text\": \"// Section 2: \\n    // If construction cannot fail you can group objects: \\n    NeedsCleanup nc2 = new NeedsCleanup(); \\n    NeedsCleanup nc3 = new NeedsCleanup(); \\n    try { \\n      // ... \\n    } finally { \\n      nc3.dispose(); // Reverse order of construction \\n      nc2.dispose(); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f48d83bc37121891c2bf4ed63c7aa65e\",\n        \"type\": \"source_code\",\n        \"text\": \"// Section 3: \\n    // If construction can fail you must guard each one: \\n    try { \\n      NeedsCleanup2 nc4 = new NeedsCleanup2(); \\n      try { \\n        NeedsCleanup2 nc5 = new NeedsCleanup2(); \\n        try { \\n          // ... \\n        } finally { \\n          nc5.dispose(); \\n        } \\n      } catch(ConstructionException e) { // nc5 constructor \\n        System.out.println(e); \\n      } finally { \\n        nc4.dispose(); \\n      } \\n    } catch(ConstructionException e) { // nc4 constructor \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1dd273f886b2bfe06abb024a5d4e492f\",\n        \"type\": \"source_code\",\n        \"text\": \"// Catch the exact type: \\n    try { \\n      throw new Sneeze(); \\n    } catch(Sneeze s) { \\n      System.out.println(\\\"Caught Sneeze\\\"); \\n    } catch(Annoyance a) { \\n      System.out.println(\\\"Caught Annoyance\\\");\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"434e81787e4d52e0acb3c5d3d907bc1c\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    // Catch the base type: \\n    try { \\n      throw new Sneeze(); \\n    } catch(Annoyance a) { \\n      System.out.println(\\\"Caught Annoyance\\\"); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3094c611e21b3ad549af733e402528a\",\n        \"type\": \"source_code\",\n        \"text\": \"// Open the file: \\n    FileInputStream file = \\n      new FileInputStream(\\\"MainException.java\\\"); \\n    // Use the file ... \\n    // Close the file: \\n    file.close();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"362a0a2354f249fbb9a7819782543009\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      switch(type) { \\n        case 0: throw new FileNotFoundException(); \\n        case 1: throw new IOException(); \\n        case 2: throw new RuntimeException(\\\"Where am I?\\\"); \\n        default: return; \\n      } \\n    } catch(Exception e) { // Adapt to unchecked: \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9488e8acb0a883819b4e878ea4b33b81\",\n        \"type\": \"source_code\",\n        \"text\": \"WrapCheckedException wce = new WrapCheckedException(); \\n    // You can call throwRuntimeException() without a try\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4d539dcbd3f8389c174a39bbd31af1d5\",\n        \"type\": \"source_code\",\n        \"text\": \"// block, and let RuntimeExceptions leave the method: \\n    wce.throwRuntimeException(3); \\n    // Or you can choose to catch exceptions: \\n    for(int i = 0; i < 4; i++) \\n      try { \\n        if(i < 3) \\n          wce.throwRuntimeException(i); \\n        else \\n          throw new SomeOtherException(); \\n      } catch(SomeOtherException e) { \\n          print(\\\"SomeOtherException: \\\" + e); \\n      } catch(RuntimeException re) { \\n        try { \\n          throw re.getCause(); \\n        } catch(FileNotFoundException e) { \\n          print(\\\"FileNotFoundException: \\\" + e); \\n        } catch(IOException e) { \\n          print(\\\"IOException: \\\" + e); \\n        } catch(Throwable e) { \\n          print(\\\"Throwable: \\\" + e); \\n        } \\n      }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7b4f9f92a5fe24183354f02ffa16d20b\",\n        \"type\": \"source_code\",\n        \"text\": \"return s.toUpperCase();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d38a56673e94cdf8e3d012a80146327f\",\n        \"type\": \"source_code\",\n        \"text\": \"String q = \\\"howdy\\\"; \\n    print(q); // howdy \\n    String qq = upcase(q); \\n    print(qq); // HOWDY \\n    print(q); // howdy\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3394d020ae36766dd427b49d9e27bb81\",\n        \"type\": \"source_code\",\n        \"text\": \"String mango = \\\"mango\\\"; \\n    String s = \\\"abc\\\" + mango + \\\"def\\\" + 47; \\n    System.out.println(s);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e8d484c470d3c59b1f502830f03d654f\",\n        \"type\": \"source_code\",\n        \"text\": \"ldc #2; //String mango\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72d9699461a167f8a85603678be98362\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_1\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03f8d609c1edfc59ed939a9283e29efb\",\n        \"type\": \"source_code\",\n        \"text\": \"new #3; //class StringBuilder\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c2486fe65e8aa819e94e9cd73957e85\",\n        \"type\": \"source_code\",\n        \"text\": \"invokespecial #4; //StringBuilder.\\\"<init>\\\":()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4bb3dd7e7bebaa337dafa4daad5ced14\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #6; //StringBuilder.append:(String)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4bb3dd7e7bebaa337dafa4daad5ced14\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #6; //StringBuilder.append:(String)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e5c71383cadbcec1502a916b0d2516d\",\n        \"type\": \"source_code\",\n        \"text\": \"ldc #7; //String def\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4bb3dd7e7bebaa337dafa4daad5ced14\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #6; //StringBuilder.append:(String)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a7e46c5548d7f4e09441a0be10e50ffc\",\n        \"type\": \"source_code\",\n        \"text\": \"bipush 47\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"891b52f4fad0e32bd8d1b6c4f1894f22\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #8; //StringBuilder.append:(I)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"584697bf2493a10dd2ecfa88cf38d62a\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #9; //StringBuilder.toString:()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4df193747ed622ba2d26187365ac4a8\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_2\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d8b2318557e66993aa72b90489b1f79\",\n        \"type\": \"source_code\",\n        \"text\": \"getstatic #10; //Field System.out:PrintStream;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"923367067e36e5f6777150ac212e93f6\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_2\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1025313fd5d076bf72d218de95812cd\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #11; // PrintStream.println:(String)\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e70c4df10ef0983b9c8c31bd06b2a2c3\",\n        \"type\": \"source_code\",\n        \"text\": \"return\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65a6dabb77065ba18ff8b8893e6ca519\",\n        \"type\": \"source_code\",\n        \"text\": \"String result = \\\"\\\"; \\n    for(int i = 0; i < fields.length; i++) \\n      result += fields[i]; \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb21da19c9eba07f832660648a2314b9\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(); \\n    for(int i = 0; i < fields.length; i++) \\n      result.append(fields[i]); \\n    return result.toString();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"16ac8acd6045bbc3a39c12798562aa09\",\n        \"type\": \"source_code\",\n        \"text\": \"ldc #2; //String\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4df193747ed622ba2d26187365ac4a8\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_2\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e80540abed255959197e6619dc02ad66\",\n        \"type\": \"source_code\",\n        \"text\": \"iconst_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b0c581a17bf2fed59214d2c75c5f8394\",\n        \"type\": \"source_code\",\n        \"text\": \"istore_3\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe579ed248bebdcb53bf9e17529a9454\",\n        \"type\": \"source_code\",\n        \"text\": \"iload_3\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40d9cf4679165e3fdb5cfea93b27762b\",\n        \"type\": \"source_code\",\n        \"text\": \"aload_1\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b657e55f4de16a07d1065e7fe9ee83b\",\n        \"type\": \"source_code\",\n        \"text\": \"arraylength\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0cd608d7ee59eaa4860ba95309719104\",\n        \"type\": \"source_code\",\n        \"text\": \"if_icmpge 38\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe579ed248bebdcb53bf9e17529a9454\",\n        \"type\": \"source_code\",\n        \"text\": \"iload_3\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bf6ef7b13ea5e4cf8bc0e39dc62c53fe\",\n        \"type\": \"source_code\",\n        \"text\": \"aaload\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be161ba84c6568df15e9c35dbcb7c35a\",\n        \"type\": \"source_code\",\n        \"text\": \"areturn\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03f8d609c1edfc59ed939a9283e29efb\",\n        \"type\": \"source_code\",\n        \"text\": \"new #3; //class StringBuilder\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9f1e8e40bb79e800b0cc9433830cf4\",\n        \"type\": \"source_code\",\n        \"text\": \"dup\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"36ad55ef011d5ac0b1d0e39cd14858e9\",\n        \"type\": \"source_code\",\n        \"text\": \"invokespecial #4; // StringBuilder.\\u201d<init>\\u201d:()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4df193747ed622ba2d26187365ac4a8\",\n        \"type\": \"source_code\",\n        \"text\": \"astore_2\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e80540abed255959197e6619dc02ad66\",\n        \"type\": \"source_code\",\n        \"text\": \"iconst_0\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b0c581a17bf2fed59214d2c75c5f8394\",\n        \"type\": \"source_code\",\n        \"text\": \"istore_3\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5200511e8d33975c99a8695f94f89bc\",\n        \"type\": \"source_code\",\n        \"text\": \"invokevirtual #5; // StringBuilder.append:()\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b21afc54fb48d153c19101658f4a2a48\",\n        \"type\": \"source_code\",\n        \"text\": \"pop\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b025b6db3d0c0d6eaeeeee4cf91d9b8b\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(\\\"[\\\"); \\n    for(int i = 0; i < 25; i++) { \\n      result.append(rand.nextInt(100)); \\n      result.append(\\\", \\\"); \\n    } \\n    result.delete(result.length()-2, result.length()); \\n    result.append(\\\"]\\\"); \\n    return result.toString();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5abed667cfd18c8bcaa5f1ba3abe354\",\n        \"type\": \"source_code\",\n        \"text\": \"UsingStringBuilder usb = new UsingStringBuilder(); \\n    System.out.println(usb);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21d5922f837f03a265607cc3919f6ae2\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList<Coffee> coffees = new ArrayList<Coffee>(); \\n    for(Coffee c : new CoffeeGenerator(10)) \\n      coffees.add(c); \\n    System.out.println(coffees);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"136f5d0b442eee68748fe8d5d14ef61d\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\" InfiniteRecursion address: \\\" + this + \\\"\\\\n\\\";\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cce97ce32f0a822713b1488b1e24017b\",\n        \"type\": \"source_code\",\n        \"text\": \"List<InfiniteRecursion> v = \\n      new ArrayList<InfiniteRecursion>(); \\n    for(int i = 0; i < 10; i++) \\n      v.add(new InfiniteRecursion()); \\n    System.out.println(v);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"478730a1cf857c2cbe256429135d9a4f\",\n        \"type\": \"source_code\",\n        \"text\": \"int x = 5; \\n    double y = 5.332542; \\n    // The old way: \\n    System.out.println(\\\"Row 1: [\\\" + x + \\\" \\\" + y + \\\"]\\\"); \\n    // The new way: \\n    System.out.format(\\\"Row 1: [%d %f]\\\\n\\\", x, y); \\n    // or \\n    System.out.printf(\\\"Row 1: [%d %f]\\\\n\\\", x, y);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"140fa851e86bc94d267eced1591b005a\",\n        \"type\": \"source_code\",\n        \"text\": \"this.name = name; \\n    this.f = f;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"76ab640193d5e3becd36fa20bef82ab5\",\n        \"type\": \"source_code\",\n        \"text\": \"f.format(\\\"%s The Turtle is at (%d,%d)\\\\n\\\", name, x, y);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aca724d85ead565627f7b4e58f21f556\",\n        \"type\": \"source_code\",\n        \"text\": \"PrintStream outAlias = System.out; \\n    Turtle tommy = new Turtle(\\\"Tommy\\\", \\n      new Formatter(System.out)); \\n    Turtle terry = new Turtle(\\\"Terry\\\", \\n      new Formatter(outAlias)); \\n    tommy.move(0,0); \\n    terry.move(4,8); \\n    tommy.move(3,4); \\n    terry.move(2,5); \\n    tommy.move(3,3); \\n    terry.move(3,3);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5d5f12b3b8ed0f4b0a650598d9bc0160\",\n        \"type\": \"source_code\",\n        \"text\": \"f.format(\\\"%-15s %5s %10s\\\\n\\\", \\\"Item\\\", \\\"Qty\\\", \\\"Price\\\"); \\n    f.format(\\\"%-15s %5s %10s\\\\n\\\", \\\"----\\\", \\\"---\\\", \\\"-----\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"701149d4432e4e2246deb57f5506e26b\",\n        \"type\": \"source_code\",\n        \"text\": \"f.format(\\\"%-15.15s %5d %10.2f\\\\n\\\", name, qty, price); \\n    total += price;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"108e249b7419331dad5d33351865e5d1\",\n        \"type\": \"source_code\",\n        \"text\": \"f.format(\\\"%-15s %5s %10.2f\\\\n\\\", \\\"Tax\\\", \\\"\\\", total*0.06); \\n    f.format(\\\"%-15s %5s %10s\\\\n\\\", \\\"\\\", \\\"\\\", \\\"-----\\\"); \\n    f.format(\\\"%-15s %5s %10.2f\\\\n\\\", \\\"Total\\\", \\\"\\\", \\n      total * 1.06);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a79334d520980f1a5479976c8a74d824\",\n        \"type\": \"source_code\",\n        \"text\": \"Receipt receipt = new Receipt(); \\n    receipt.printTitle(); \\n    receipt.print(\\\"Jack\\u2019s Magic Beans\\\", 4, 4.25); \\n    receipt.print(\\\"Princess Peas\\\", 3, 5.1); \\n    receipt.print(\\\"Three Bears Porridge\\\", 1, 14.29); \\n    receipt.printTotal();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"69f9cecbc64811bbe416771f35a0f0d6\",\n        \"type\": \"source_code\",\n        \"text\": \"Qty      Price\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa1d7bbe6856c412f6455ce7ff3a5d70\",\n        \"type\": \"source_code\",\n        \"text\": \"---      -----\",\n        \"programming_language\": \"Diff\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"991da43e211d57e25718f6605f9d42e3\",\n        \"type\": \"source_code\",\n        \"text\": \"4       4.25\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53f1190c5125e8f4d8c077af23fc1c23\",\n        \"type\": \"source_code\",\n        \"text\": \"3       5.10\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c05f4e6e9847272c489bb7697d32ed10\",\n        \"type\": \"source_code\",\n        \"text\": \"1      14.29\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f454c582e9e01aeef1ee40e1994c4b9\",\n        \"type\": \"source_code\",\n        \"text\": \"1.42 \\n                           -----\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e26bc895e5bb00237e35bd08e101a228\",\n        \"type\": \"source_code\",\n        \"text\": \"25.06\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4a2961c5c0204f0bd186ddc56738f14b\",\n        \"type\": \"source_code\",\n        \"text\": \"Conversion Characters\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7a9f2e5ba56c5c3ed3881d4f20faabd\",\n        \"type\": \"source_code\",\n        \"text\": \"d \\n    Integral (as decimal) \\n      c \\n    Unicode character \\n      b \\n    Boolean value \\n      s \\n    String \\n      f \\n    Floating point (as decimal) \\n      e \\n    Floating point (in scientific notation) \\n      x \\n    Integral (as hex) \\n      h \\n    Hash code (as hex) \\n    % \\n    Literal \\\"%\\\"\",\n        \"programming_language\": \"Matlab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b16a312c8512933eb5b18be9aa5e1c3c\",\n        \"type\": \"source_code\",\n        \"text\": \"Formatter f = new Formatter(System.out);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"942cd9d5c2dcaeceab84fbbfad020c3f\",\n        \"type\": \"source_code\",\n        \"text\": \"char u = \\u2018a\\u2019; \\n    System.out.println(\\\"u = \\u2018a\\u2019\\\"); \\n    f.format(\\\"s: %s\\\\n\\\", u); \\n    // f.format(\\\"d: %d\\\\n\\\", u); \\n    f.format(\\\"c: %c\\\\n\\\", u); \\n    f.format(\\\"b: %b\\\\n\\\", u); \\n    // f.format(\\\"f: %f\\\\n\\\", u); \\n    // f.format(\\\"e: %e\\\\n\\\", u); \\n    // f.format(\\\"x: %x\\\\n\\\", u); \\n    f.format(\\\"h: %h\\\\n\\\", u);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5122c0639ec868dd19ca2fb41c632128\",\n        \"type\": \"source_code\",\n        \"text\": \"int v = 121; \\n    System.out.println(\\\"v = 121\\\"); \\n    f.format(\\\"d: %d\\\\n\\\", v); \\n    f.format(\\\"c: %c\\\\n\\\", v); \\n    f.format(\\\"b: %b\\\\n\\\", v); \\n    f.format(\\\"s: %s\\\\n\\\", v); \\n    // f.format(\\\"f: %f\\\\n\\\", v); \\n    // f.format(\\\"e: %e\\\\n\\\", v); \\n    f.format(\\\"x: %x\\\\n\\\", v); \\n    f.format(\\\"h: %h\\\\n\\\", v);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"20d3bcfb52b88626ce363fb5dc782cb3\",\n        \"type\": \"source_code\",\n        \"text\": \"BigInteger w = new BigInteger(\\\"50000000000000\\\"); \\n    System.out.println( \\n      \\\"w = new BigInteger(\\\\\\\"50000000000000\\\\\\\")\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d0fed6644d03c9c466f086a4d59b3dd3\",\n        \"type\": \"source_code\",\n        \"text\": \"f.format(\\\"d: %d\\\\n\\\", w); \\n    // f.format(\\\"c: %c\\\\n\\\", w); \\n    f.format(\\\"b: %b\\\\n\\\", w); \\n    f.format(\\\"s: %s\\\\n\\\", w); \\n    // f.format(\\\"f: %f\\\\n\\\", w); \\n    // f.format(\\\"e: %e\\\\n\\\", w); \\n    f.format(\\\"x: %x\\\\n\\\", w); \\n    f.format(\\\"h: %h\\\\n\\\", w);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f805226ee3303c2e409842590a106345\",\n        \"type\": \"source_code\",\n        \"text\": \"double x = 179.543; \\n    System.out.println(\\\"x = 179.543\\\"); \\n    // f.format(\\\"d: %d\\\\n\\\", x); \\n    // f.format(\\\"c: %c\\\\n\\\", x); \\n    f.format(\\\"b: %b\\\\n\\\", x); \\n    f.format(\\\"s: %s\\\\n\\\", x); \\n    f.format(\\\"f: %f\\\\n\\\", x); \\n    f.format(\\\"e: %e\\\\n\\\", x); \\n    // f.format(\\\"x: %x\\\\n\\\", x); \\n    f.format(\\\"h: %h\\\\n\\\", x);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"89d1410bcbab7eca2b861b99f39af929\",\n        \"type\": \"source_code\",\n        \"text\": \"Conversion y = new Conversion(); \\n    System.out.println(\\\"y = new Conversion()\\\"); \\n    // f.format(\\\"d: %d\\\\n\\\", y); \\n    // f.format(\\\"c: %c\\\\n\\\", y); \\n    f.format(\\\"b: %b\\\\n\\\", y); \\n    f.format(\\\"s: %s\\\\n\\\", y); \\n    // f.format(\\\"f: %f\\\\n\\\", y); \\n    // f.format(\\\"e: %e\\\\n\\\", y); \\n    // f.format(\\\"x: %x\\\\n\\\", y); \\n    f.format(\\\"h: %h\\\\n\\\", y);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe175011ace272b38c2a66588d24a7d2\",\n        \"type\": \"source_code\",\n        \"text\": \"boolean z = false; \\n    System.out.println(\\\"z = false\\\"); \\n    // f.format(\\\"d: %d\\\\n\\\", z); \\n    // f.format(\\\"c: %c\\\\n\\\", z); \\n    f.format(\\\"b: %b\\\\n\\\", z); \\n    f.format(\\\"s: %s\\\\n\\\", z); \\n    // f.format(\\\"f: %f\\\\n\\\", z); \\n    // f.format(\\\"e: %e\\\\n\\\", z); \\n    // f.format(\\\"x: %x\\\\n\\\", z); \\n    f.format(\\\"h: %h\\\\n\\\", z);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f8917c06e3ffd16823f2063490fcec9\",\n        \"type\": \"source_code\",\n        \"text\": \"String message) { \\n    super(String.format(\\\"(t%d, q%d) %s\\\", transactionID, \\n        queryID, message));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"954cf19ed64503c476ea738bc7e2b558\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      throw new DatabaseException(3, 7, \\\"Write failed\\\"); \\n    } catch(Exception e) { \\n      System.out.println(e); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3c0f0aeabe8cea63d77d4ef6c7ee976c\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(); \\n    int n = 0; \\n    for(byte b : data) { \\n      if(n % 16 == 0) \\n        result.append(String.format(\\\"%05X: \\\", n)); \\n      result.append(String.format(\\\"%02X \\\", b)); \\n      n++; \\n      if(n % 16 == 0) result.append(\\\"\\\\n\\\"); \\n    } \\n    result.append(\\\"\\\\n\\\"); \\n    return result.toString();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0331239ee3b2aaa57a02efa528630e4a\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length == 0) \\n      // Test by displaying this class file: \\n      System.out.println( \\n        format(BinaryFile.read(\\\"Hex.class\\\"))); \\n    else \\n      System.out.println( \\n        format(BinaryFile.read(new File(args[0]))));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ca8566c6016e33055e1296d7573bfc57\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"-1234\\\".matches(\\\"-?\\\\\\\\d+\\\")); \\n    System.out.println(\\\"5678\\\".matches(\\\"-?\\\\\\\\d+\\\")); \\n    System.out.println(\\\"+911\\\".matches(\\\"-?\\\\\\\\d+\\\")); \\n    System.out.println(\\\"+911\\\".matches(\\\"(-|\\\\\\\\+)?\\\\\\\\d+\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38608c7b66d6fb3cde90ae879737c070\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Then, when you have found the shrubbery, you must \\\" + \\n    \\\"cut down the mightiest tree in the forest... \\\" + \\n    \\\"with... a herring!\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"49eea2c31fc9fae3f313d020044a5ac7\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n      Arrays.toString(knights.split(regex)));\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2334a1f612d1e4608192e19308c18265\",\n        \"type\": \"source_code\",\n        \"text\": \"split(\\\" \\\"); // Doesn\\u2019t have to contain regex chars \\n    split(\\\"\\\\\\\\W+\\\"); // Non-word characters \\n    split(\\\"n\\\\\\\\W+\\\"); // \\u2018n\\u2019 followed by non-word characters\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"92a10384d8d99f0e0130fd535424f668\",\n        \"type\": \"source_code\",\n        \"text\": \"print(s.replaceFirst(\\\"f\\\\\\\\w+\\\", \\\"located\\\")); \\n    print(s.replaceAll(\\\"shrubbery|tree|herring\\\",\\\"banana\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8b88657416f0de579656a14a2420a2c8\",\n        \"type\": \"source_code\",\n        \"text\": \"for(String pattern : new String[]{ \\\"Rudolph\\\", \\n      \\\"[rR]udolph\\\", \\\"[rR][aeiou][a-z]ol.*\\\", \\\"R.*\\\" }) \\n      System.out.println(\\\"Rudolph\\\".matches(pattern));\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"df266bf90d49b6d93f303ce874b341cf\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length < 2) { \\n      print(\\\"Usage:\\\\njava TestRegularExpression \\\" + \\n        \\\"characterSequence regularExpression+\\\"); \\n      System.exit(0); \\n    } \\n    print(\\\"Input: \\\\\\\"\\\" + args[0] + \\\"\\\\\\\"\\\"); \\n    for(String arg : args) { \\n      print(\\\"Regular expression: \\\\\\\"\\\" + arg + \\\"\\\\\\\"\\\"); \\n      Pattern p = Pattern.compile(arg); \\n      Matcher m = p.matcher(args[0]); \\n      while(m.find()) {\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f02f34b7ddc576fb41ce02470d601c74\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Match \\\\\\\"\\\" + m.group() + \\\"\\\\\\\" at positions \\\" + \\n          m.start() + \\\"-\\\" + (m.end() - 1)); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1491daa65369b3c0e0b8d26924e8438\",\n        \"type\": \"source_code\",\n        \"text\": \"Matcher m = Pattern.compile(\\\"\\\\\\\\w+\\\") \\n      .matcher(\\\"Evening is full of the linnet\\u2019s wings\\\"); \\n    while(m.find()) \\n      printnb(m.group() + \\\" \\\"); \\n    print(); \\n    int i = 0; \\n    while(m.find(i)) { \\n      printnb(m.group() + \\\" \\\"); \\n      i++; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"675ee5c44691c2c3136454361ad7cc8a\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Twas brillig, and the slithy toves\\\\n\\\" + \\n    \\\"Did gyre and gimble in the wabe.\\\\n\\\" + \\n    \\\"All mimsy were the borogoves,\\\\n\\\" + \\n    \\\"And the mome raths outgrabe.\\\\n\\\\n\\\" + \\n    \\\"Beware the Jabberwock, my son,\\\\n\\\" + \\n    \\\"The jaws that bite, the claws that catch.\\\\n\\\" + \\n    \\\"Beware the Jubjub bird, and shun\\\\n\\\" + \\n    \\\"The frumious Bandersnatch.\\\";\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60f945a961254f712882634907f26a43\",\n        \"type\": \"source_code\",\n        \"text\": \"Matcher m = \\n      Pattern.compile(\\\"(?m)(\\\\\\\\S+)\\\\\\\\s+((\\\\\\\\S+)\\\\\\\\s+(\\\\\\\\S+))$\\\") \\n        .matcher(POEM); \\n    while(m.find()) { \\n      for(int j = 0; j <= m.groupCount(); j++) \\n        printnb(\\\"[\\\" + m.group(j) + \\\"]\\\"); \\n      print(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c846e33991a754336aa879eddb81fe68\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"As long as there is injustice, whenever a\\\\n\\\" + \\n    \\\"Targathian baby cries out, wherever a distress\\\\n\\\" + \\n    \\\"signal sounds among the stars ... We\\u2019ll be there.\\\\n\\\" + \\n    \\\"This fine ship, and this fine crew ...\\\\n\\\" + \\n    \\\"Never give up! Never surrender!\\\";\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb579b71cf9071218ba06c8ca7aae70d\",\n        \"type\": \"source_code\",\n        \"text\": \"private boolean regexPrinted = false; \\n    private String regex; \\n    Display(String regex) { this.regex = regex; } \\n    void display(String message) { \\n      if(!regexPrinted) { \\n        print(regex); \\n        regexPrinted = true; \\n      } \\n      print(message); \\n    }\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60ba91ee3db5a8e61afdc81fac911b91\",\n        \"type\": \"source_code\",\n        \"text\": \"Display d = new Display(regex); \\n    Pattern p = Pattern.compile(regex); \\n    Matcher m = p.matcher(s); \\n    while(m.find()) \\n      d.display(\\\"find() \\u2018\\\" + m.group() + \\n        \\\"\\u2018 start = \\\"+ m.start() + \\\" end = \\\" + m.end()); \\n    if(m.lookingAt()) // No reset() necessary \\n      d.display(\\\"lookingAt() start = \\\" \\n        + m.start() + \\\" end = \\\" + m.end()); \\n    if(m.matches()) // No reset() necessary \\n      d.display(\\\"matches() start = \\\" \\n        + m.start() + \\\" end = \\\" + m.end());\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b75d3002a2b813f698395cc1df899fe9\",\n        \"type\": \"source_code\",\n        \"text\": \"for(String in : input.split(\\\"\\\\n\\\")) { \\n      print(\\\"input : \\\" + in); \\n      for(String regex : new String[]{\\\"\\\\\\\\w*ere\\\\\\\\w*\\\", \\n        \\\"\\\\\\\\w*ever\\\", \\\"T\\\\\\\\w+\\\", \\\"Never.*?!\\\"}) \\n        examine(in, regex); \\n    }\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc36381a4858c429cff14f10ddd3e7b2\",\n        \"type\": \"source_code\",\n        \"text\": \"Pattern p =  Pattern.compile(\\\"^java\\\", \\n      Pattern.CASE_INSENSITIVE | Pattern.MULTILINE); \\n    Matcher m = p.matcher( \\n      \\\"java has regex\\\\nJava has regex\\\\n\\\" + \\n      \\\"JAVA has pretty good regular expressions\\\\n\\\" + \\n      \\\"Regular expressions are in Java\\\"); \\n    while(m.find()) \\n      System.out.println(m.group());\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"585458220a42098c2e282f1adea75762\",\n        \"type\": \"source_code\",\n        \"text\": \"String input = \\n      \\\"This!!unusual use!!of exclamation!!points\\\"; \\n    print(Arrays.toString( \\n      Pattern.compile(\\\"!!\\\").split(input))); \\n    // Only do the first three: \\n    print(Arrays.toString( \\n      Pattern.compile(\\\"!!\\\").split(input, 3)));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8093fdc00deeefc7150d3e7ce3fc83ef\",\n        \"type\": \"source_code\",\n        \"text\": \"the regular expression matcher. Note that we\\u2019ll \\n    first extract the block of text by looking for \\n    the special delimiters, then process the \\n    extracted block. !*/\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"65a09cb727bf4cd3e725e15ffcc1e3ae\",\n        \"type\": \"source_code\",\n        \"text\": \"String s = TextFile.read(\\\"TheReplacements.java\\\"); \\n    // Match the specially commented block of text above: \\n    Matcher mInput = \\n      Pattern.compile(\\\"/\\\\\\\\*!(.*)!\\\\\\\\*/\\\", Pattern.DOTALL) \\n        .matcher(s); \\n    if(mInput.find()) \\n      s = mInput.group(1); // Captured by parentheses \\n    // Replace two or more spaces with a single space: \\n    s = s.replaceAll(\\\" {2,}\\\", \\\" \\\"); \\n    // Replace one or more spaces at the beginning of each \\n    // line with no spaces. Must enable MULTILINE mode: \\n    s = s.replaceAll(\\\"(?m)^ +\\\", \\\"\\\"); \\n    print(s); \\n    s = s.replaceFirst(\\\"[aeiou]\\\", \\\"(VOWEL1)\\\"); \\n    StringBuffer sbuf = new StringBuffer(); \\n    Pattern p = Pattern.compile(\\\"[aeiou]\\\"); \\n    Matcher m = p.matcher(s); \\n    // Process the find information as you\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0c98a3bfae6c2e1328d2b09fd2174b3\",\n        \"type\": \"source_code\",\n        \"text\": \"// perform the replacements: \\n    while(m.find()) \\n      m.appendReplacement(sbuf, m.group().toUpperCase()); \\n    // Put in the remainder of the text: \\n    m.appendTail(sbuf); \\n    print(sbuf);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6f366b00a1ca80eed780b164a82e4302\",\n        \"type\": \"source_code\",\n        \"text\": \"Matcher m = Pattern.compile(\\\"[frb][aiu][gx]\\\") \\n      .matcher(\\\"fix the rug with bags\\\"); \\n    while(m.find())\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37d4da6b5bf792d207036446bc6796e0\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.print(m.group() + \\\" \\\"); \\n    System.out.println(); \\n    m.reset(\\\"fix the rig with rags\\\"); \\n    while(m.find()) \\n      System.out.print(m.group() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9dea797a675cfef5e671564b8badbff8\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length < 2) { \\n      System.out.println(\\\"Usage: java JGrep file regex\\\"); \\n      System.exit(0); \\n    } \\n    Pattern p = Pattern.compile(args[1]); \\n    // Iterate through the lines of the input file: \\n    int index = 0; \\n    Matcher m = p.matcher(\\\"\\\"); \\n    for(String line : new TextFile(args[0])) { \\n      m.reset(line); \\n      while(m.find()) \\n        System.out.println(index++ + \\\": \\\" + \\n          m.group() + \\\": \\\" + m.start()); \\n    }\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9e485682cdb450b3c2ab8c111622224a\",\n        \"type\": \"source_code\",\n        \"text\": \"new StringReader(\\\"Sir Robin of Camelot\\\\n22 1.61803\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0369fc0bc96b7655b0fb6a2c171cb860\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      System.out.println(\\\"What is your name?\\\"); \\n      String name = input.readLine(); \\n      System.out.println(name); \\n      System.out.println( \\n        \\\"How old are you? What is your favorite double?\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b7282a7896f68caf2a51edc433bee5a\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"(input: <age> <double>)\\\"); \\n      String numbers = input.readLine(); \\n      System.out.println(numbers); \\n      String[] numArray = numbers.split(\\\" \\\"); \\n      int age = Integer.parseInt(numArray[0]); \\n      double favorite = Double.parseDouble(numArray[1]); \\n      System.out.format(\\\"Hi %s.\\\\n\\\", name); \\n      System.out.format(\\\"In 5 years you will be %d.\\\\n\\\", \\n        age + 5); \\n      System.out.format(\\\"My favorite double is %f.\\\", \\n        favorite / 2); \\n    } catch(IOException e) { \\n      System.err.println(\\\"I/O exception\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0971b8c03b842f1e647ada051754c494\",\n        \"type\": \"source_code\",\n        \"text\": \"Scanner stdin = new Scanner(SimpleRead.input); \\n    System.out.println(\\\"What is your name?\\\"); \\n    String name = stdin.nextLine(); \\n    System.out.println(name); \\n    System.out.println( \\n      \\\"How old are you? What is your favorite double?\\\"); \\n    System.out.println(\\\"(input: <age> <double>)\\\"); \\n    int age = stdin.nextInt(); \\n    double favorite = stdin.nextDouble(); \\n    System.out.println(age); \\n    System.out.println(favorite); \\n    System.out.format(\\\"Hi %s.\\\\n\\\", name); \\n    System.out.format(\\\"In 5 years you will be %d.\\\\n\\\", \\n      age + 5); \\n    System.out.format(\\\"My favorite double is %f.\\\", \\n      favorite / 2);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f727af9fdeaa8d2559a548765630719\",\n        \"type\": \"source_code\",\n        \"text\": \"Scanner scanner = new Scanner(\\\"12, 42, 78, 99, 42\\\"); \\n    scanner.useDelimiter(\\\"\\\\\\\\s*,\\\\\\\\s*\\\"); \\n    while(scanner.hasNextInt()) \\n      System.out.println(scanner.nextInt());\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6805b7f7f6c9c4132ce13559155292db\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"58.27.82.161@02/10/2005\\\\n\\\" + \\n    \\\"204.45.234.40@02/11/2005\\\\n\\\" + \\n    \\\"58.27.82.161@02/11/2005\\\\n\\\" + \\n    \\\"58.27.82.161@02/12/2005\\\\n\\\" + \\n    \\\"58.27.82.161@02/12/2005\\\\n\\\" + \\n    \\\"[Next log section with different data format]\\\";\",\n        \"programming_language\": \"Objective-C\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c49a575d1e6b4a1fd766ab90362fb99\",\n        \"type\": \"source_code\",\n        \"text\": \"Scanner scanner = new Scanner(threatData); \\n    String pattern = \\\"(\\\\\\\\d+[.]\\\\\\\\d+[.]\\\\\\\\d+[.]\\\\\\\\d+)@\\\" + \\n      \\\"(\\\\\\\\d{2}/\\\\\\\\d{2}/\\\\\\\\d{4})\\\"; \\n    while(scanner.hasNext(pattern)) { \\n      scanner.next(pattern); \\n      MatchResult match = scanner.match(); \\n      String ip = match.group(1); \\n      String date = match.group(2); \\n      System.out.format(\\\"Threat on %s from %s\\\\n\\\", date,ip); \\n    }\",\n        \"programming_language\": \"Objective-C\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"74160e17b9887979d302c425898a94a2\",\n        \"type\": \"source_code\",\n        \"text\": \"String input = \\\"But I\\u2019m not dead yet! I feel happy!\\\"; \\n    StringTokenizer stoke = new StringTokenizer(input); \\n    while(stoke.hasMoreElements()) \\n      System.out.print(stoke.nextToken() + \\\" \\\"); \\n    System.out.println(); \\n    System.out.println(Arrays.toString(input.split(\\\" \\\"))); \\n    Scanner scanner = new Scanner(input); \\n    while(scanner.hasNext()) \\n      System.out.print(scanner.next() + \\\" \\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d090af746b7f9c31c591f889bb8367eb\",\n        \"type\": \"source_code\",\n        \"text\": \"List<Shape> shapeList = Arrays.asList( \\n      new Circle(), new Square(), new Triangle() \\n    ); \\n    for(Shape shape : shapeList) \\n      shape.draw();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e056556251158c061daf628ca5d718d5\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"inside main\\\"); \\n    new Candy(); \\n    print(\\\"After creating Candy\\\"); \\n    try { \\n      Class.forName(\\\"Gum\\\"); \\n    } catch(ClassNotFoundException e) { \\n      print(\\\"Couldn\\u2019t find Gum\\\"); \\n    } \\n    print(\\\"After Class.forName(\\\\\\\"Gum\\\\\\\")\\\"); \\n    new Cookie(); \\n    print(\\\"After creating Cookie\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38889b7d975627e8be6b626b760232c3\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Class name: \\\" + cc.getName() + \\n      \\\" is interface? [\\\" + cc.isInterface() + \\\"]\\\"); \\n    print(\\\"Simple name: \\\" + cc.getSimpleName()); \\n    print(\\\"Canonical name : \\\" + cc.getCanonicalName());\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15f71e54402df66a109ebe3a5045043d\",\n        \"type\": \"source_code\",\n        \"text\": \"Class c = null; \\n    try { \\n      c = Class.forName(\\\"typeinfo.toys.FancyToy\\\"); \\n    } catch(ClassNotFoundException e) { \\n      print(\\\"Can\\u2019t find FancyToy\\\"); \\n      System.exit(1); \\n    } \\n    printInfo(c);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e54e1adc655d49758d7123b372f7986a\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Class face : c.getInterfaces()) \\n      printInfo(face); \\n    Class up = c.getSuperclass(); \\n    Object obj = null; \\n    try { \\n      // Requires default constructor: \\n      obj = up.newInstance(); \\n    } catch(InstantiationException e) { \\n      print(\\\"Cannot instantiate\\\"); \\n      System.exit(1); \\n    } catch(IllegalAccessException e) { \\n      print(\\\"Cannot access\\\"); \\n      System.exit(1); \\n    } \\n    printInfo(obj.getClass());\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a38d17cbeec817dddf8cb8eba0e5ae2c\",\n        \"type\": \"source_code\",\n        \"text\": \"ClassInitialization.rand.nextInt(1000);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6eefd9f14de3c505108090bf865871c9\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Initializing Initable\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b58977f9a56bb5c57caab7a5885d3c9d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Initializing Initable2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"189fd98c7e3ece8da69d96c179d134b3\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Initializing Initable3\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"19541e4c6e61f4e0039fa8f56aa4404a\",\n        \"type\": \"source_code\",\n        \"text\": \"Class initable = Initable.class; \\n    System.out.println(\\\"After creating Initable ref\\\"); \\n    // Does not trigger initialization: \\n    System.out.println(Initable.staticFinal); \\n    // Does trigger initialization: \\n    System.out.println(Initable.staticFinal2); \\n    // Does trigger initialization: \\n    System.out.println(Initable2.staticNonFinal); \\n    Class initable3 = Class.forName(\\\"Initable3\\\"); \\n    System.out.println(\\\"After creating Initable3 ref\\\"); \\n    System.out.println(Initable3.staticNonFinal);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"13d943f1b812abd3ffe5e431b2a481f9\",\n        \"type\": \"source_code\",\n        \"text\": \"Class intClass = int.class; \\n    Class<Integer> genericIntClass = int.class; \\n    genericIntClass = Integer.class; // Same thing \\n    intClass = double.class; \\n    // genericIntClass = double.class; // Illegal\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64ddee3c1d8e9d50658d82cc288a1750\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<?> intClass = int.class; \\n    intClass = double.class;\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4b17039810d702f8912941cf33c83eff\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<? extends Number> bounded = int.class; \\n    bounded = double.class; \\n    bounded = Number.class; \\n    // Or anything else derived from Number.\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"291165859396dee79acd030bc9dfdf91\",\n        \"type\": \"source_code\",\n        \"text\": \"List<T> result = new ArrayList<T>(); \\n    try {\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"58fb2220a4f46b50119892455e869f13\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nElements; i++) \\n        result.add(type.newInstance()); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    } \\n    return result;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"929fdb01a8fe9b7f722d01bcbcd21fcb\",\n        \"type\": \"source_code\",\n        \"text\": \"FilledList<CountedInteger> fl = \\n      new FilledList<CountedInteger>(CountedInteger.class); \\n    System.out.println(fl.create(15));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40776bd257aa69a334afb96348f1daae\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<FancyToy> ftClass = FancyToy.class; \\n    // Produces exact type: \\n    FancyToy fancyToy = ftClass.newInstance(); \\n    Class<? super FancyToy> up = ftClass.getSuperclass(); \\n    // This won\\u2019t compile: \\n    // Class<Toy> up2 = ftClass.getSuperclass(); \\n    // Only produces Object: \\n    Object obj = up.newInstance();\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c339359f274b55c38ab072bce04811a\",\n        \"type\": \"source_code\",\n        \"text\": \"Building b = new House(); \\n    Class<House> houseType = House.class; \\n    House h = houseType.cast(b); \\n    h = (House)b; // ... or just do this.\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70d7b14f26e586f0153e45d3d13f3a74\",\n        \"type\": \"source_code\",\n        \"text\": \"int n = rand.nextInt(types().size()); \\n    try { \\n      return types().get(n).newInstance(); \\n    } catch(InstantiationException e) { \\n      throw new RuntimeException(e); \\n    } catch(IllegalAccessException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aed0a0221836b2f8b0cd950c178a7b04\",\n        \"type\": \"source_code\",\n        \"text\": \"Pet[] result = new Pet[size]; \\n    for(int i = 0; i < size; i++) \\n      result[i] = randomPet(); \\n    return result;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"886c1f45d9a7b3b02ef5c635378a8f1a\",\n        \"type\": \"source_code\",\n        \"text\": \"ArrayList<Pet> result = new ArrayList<Pet>(); \\n    Collections.addAll(result, createArray(size)); \\n    return result;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cb494b234544d19d52f69e8fe6bf4092\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Class<? extends Pet>>();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6f6a203b3a063e6c48eaf4d7e3f2c77e\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"typeinfo.pets.Mutt\\\", \\n    \\\"typeinfo.pets.Pug\\\", \\n    \\\"typeinfo.pets.EgyptianMau\\\", \\n    \\\"typeinfo.pets.Manx\\\", \\n    \\\"typeinfo.pets.Cymric\\\",\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32efdf1ef6fc1c1fe6ffcee622a69156\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"typeinfo.pets.Rat\\\", \\n    \\\"typeinfo.pets.Mouse\\\", \\n    \\\"typeinfo.pets.Hamster\\\"\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"14713074ea020e42a04434ae5a3eda4a\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      for(String name : typeNames) \\n        types.add( \\n          (Class<? extends Pet>)Class.forName(name)); \\n    } catch(ClassNotFoundException e) { \\n      throw new RuntimeException(e); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5607419d97de8f261961424b91169be4\",\n        \"type\": \"source_code\",\n        \"text\": \"public void count(String type) { \\n      Integer quantity = get(type); \\n      if(quantity == null) \\n        put(type, 1); \\n      else \\n        put(type, quantity + 1); \\n    }\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"026385b464953c0bba93a718a54ce5cb\",\n        \"type\": \"source_code\",\n        \"text\": \"PetCounter counter= new PetCounter(); \\n    for(Pet pet : creator.createArray(20)) { \\n      // List each individual pet: \\n      printnb(pet.getClass().getSimpleName() + \\\" \\\"); \\n      if(pet instanceof Pet) \\n        counter.count(\\\"Pet\\\"); \\n      if(pet instanceof Dog) \\n        counter.count(\\\"Dog\\\"); \\n      if(pet instanceof Mutt) \\n        counter.count(\\\"Mutt\\\"); \\n      if(pet instanceof Pug) \\n        counter.count(\\\"Pug\\\"); \\n      if(pet instanceof Cat)\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7fefaea7cb159975b3b497feedfd7efc\",\n        \"type\": \"source_code\",\n        \"text\": \"counter.count(\\\"Cat\\\"); \\n      if(pet instanceof Manx) \\n        counter.count(\\\"EgyptianMau\\\"); \\n      if(pet instanceof Manx) \\n        counter.count(\\\"Manx\\\"); \\n      if(pet instanceof Manx) \\n        counter.count(\\\"Cymric\\\"); \\n      if(pet instanceof Rodent) \\n        counter.count(\\\"Rodent\\\"); \\n      if(pet instanceof Rat) \\n        counter.count(\\\"Rat\\\"); \\n      if(pet instanceof Mouse) \\n        counter.count(\\\"Mouse\\\"); \\n      if(pet instanceof Hamster) \\n        counter.count(\\\"Hamster\\\"); \\n    } \\n    // Show the counts: \\n    print(); \\n    print(counter);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dde91f644eea90056b13e0422a516197\",\n        \"type\": \"source_code\",\n        \"text\": \"countPets(new ForNameCreator());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d80a118f097ba94869cddabf64e056b\",\n        \"type\": \"source_code\",\n        \"text\": \"Collections.unmodifiableList(Arrays.asList( \\n      Pet.class, Dog.class, Cat.class,  Rodent.class, \\n      Mutt.class, Pug.class, EgyptianMau.class, Manx.class, \\n      Cymric.class, Rat.class, Mouse.class,Hamster.class));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3a2bafaed4ba25cbfa26ebffdf2f6b55\",\n        \"type\": \"source_code\",\n        \"text\": \"allTypes.subList(allTypes.indexOf(Mutt.class),\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6220786998c154787f525f4ad54b4f90\",\n        \"type\": \"source_code\",\n        \"text\": \"allTypes.size());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2157f59f0d0a165c62fa19197e74c583\",\n        \"type\": \"source_code\",\n        \"text\": \"return types;\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6073985075c010df4849d4362cf7ff54\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(types);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e74459999eba9f0283374e17085510a1\",\n        \"type\": \"source_code\",\n        \"text\": \"new LiteralPetCreator();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5b08892997a7eae04aabf74235638fc4\",\n        \"type\": \"source_code\",\n        \"text\": \"return creator.randomPet();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64b5c96a82a5821adec85c1e4ca0092c\",\n        \"type\": \"source_code\",\n        \"text\": \"return creator.createArray(size);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"080106e222e417c584abe444d3805ff7\",\n        \"type\": \"source_code\",\n        \"text\": \"return creator.arrayList(size);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"35e0e16942dd265c58b18f2f83f9ded4\",\n        \"type\": \"source_code\",\n        \"text\": \"PetCount.countPets(Pets.creator);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"771033f4b5648ee31ec9bf7901034fd6\",\n        \"type\": \"source_code\",\n        \"text\": \"public PetCounter() { \\n      super(MapData.map(LiteralPetCreator.allTypes, 0)); \\n    } \\n    public void count(Pet pet) { \\n      // Class.isInstance() eliminates instanceofs: \\n      for(Map.Entry<Class<? extends Pet>,Integer> pair \\n          : entrySet()) \\n        if(pair.getKey().isInstance(pet)) \\n          put(pair.getKey(), pair.getValue() + 1); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c57ff60b26779dbd48964d6c4b86ea2a\",\n        \"type\": \"source_code\",\n        \"text\": \"public String toString() { \\n      StringBuilder result = new StringBuilder(\\\"{\\\"); \\n      for(Map.Entry<Class<? extends Pet>,Integer> pair \\n          : entrySet()) { \\n        result.append(pair.getKey().getSimpleName()); \\n        result.append(\\\"=\\\"); \\n        result.append(pair.getValue()); \\n        result.append(\\\", \\\"); \\n      } \\n      result.delete(result.length()-2, result.length()); \\n      result.append(\\\"}\\\"); \\n      return result.toString(); \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f88d300b216a19993b06111e81afbb1\",\n        \"type\": \"source_code\",\n        \"text\": \"PetCounter petCount = new PetCounter(); \\n    for(Pet pet : Pets.createArray(20)) { \\n      printnb(pet.getClass().getSimpleName() + \\\" \\\"); \\n      petCount.count(pet); \\n    } \\n    print(); \\n    print(petCount);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7583fb55f22f1698375b7997e4a53093\",\n        \"type\": \"source_code\",\n        \"text\": \"this.baseType = baseType;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d54d1fa2d05870d51edc080404f1047\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<?> type = obj.getClass(); \\n    if(!baseType.isAssignableFrom(type)) \\n      throw new RuntimeException(obj + \\\" incorrect type: \\\" \\n        + type + \\\", should be type or subtype of \\\" \\n        + baseType); \\n    countClass(type);\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"edb9b4ea8c1afe1b984d49208265f4a0\",\n        \"type\": \"source_code\",\n        \"text\": \"Integer quantity = get(type); \\n    put(type, quantity == null ? 1 : quantity + 1); \\n    Class<?> superClass = type.getSuperclass(); \\n    if(superClass != null && \\n       baseType.isAssignableFrom(superClass)) \\n      countClass(superClass);\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"08ddf61b3a8fcfd4be38aecb5cca630c\",\n        \"type\": \"source_code\",\n        \"text\": \"StringBuilder result = new StringBuilder(\\\"{\\\"); \\n    for(Map.Entry<Class<?>,Integer> pair : entrySet()) { \\n      result.append(pair.getKey().getSimpleName()); \\n      result.append(\\\"=\\\"); \\n      result.append(pair.getValue()); \\n      result.append(\\\", \\\"); \\n    } \\n    result.delete(result.length()-2, result.length()); \\n    result.append(\\\"}\\\"); \\n    return result.toString();\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"afc296409795b48d585f3c432e904bd6\",\n        \"type\": \"source_code\",\n        \"text\": \"TypeCounter counter = new TypeCounter(Pet.class); \\n    for(Pet pet : Pets.createArray(20)) { \\n      printnb(pet.getClass().getSimpleName() + \\\" \\\"); \\n      counter.count(pet); \\n    } \\n    print(); \\n    print(counter);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f7a42b7b8d3e8f08adc688a8af9d40a1\",\n        \"type\": \"source_code\",\n        \"text\": \"return getClass().getSimpleName();\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a661a98d55a8866d3a6cd7936ee487ea\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<Factory<? extends Part>>();\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8c67db8278fa7d7af6739d075818daf4\",\n        \"type\": \"source_code\",\n        \"text\": \"// Collections.addAll() gives an \\\"unchecked generic \\n    // array creation ... for varargs parameter\\\" warning. \\n    partFactories.add(new FuelFilter.Factory()); \\n    partFactories.add(new AirFilter.Factory()); \\n    partFactories.add(new CabinAirFilter.Factory()); \\n    partFactories.add(new OilFilter.Factory()); \\n    partFactories.add(new FanBelt.Factory()); \\n    partFactories.add(new PowerSteeringBelt.Factory()); \\n    partFactories.add(new GeneratorBelt.Factory());\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90074c4ed2fcb13fb904ce85fc15e306\",\n        \"type\": \"source_code\",\n        \"text\": \"int n = rand.nextInt(partFactories.size()); \\n    return partFactories.get(n).create();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7ddb192605c7f7fc9abf58caad43978e\",\n        \"type\": \"source_code\",\n        \"text\": \"public FuelFilter create() { return new FuelFilter(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9d7cbcd23f12da299f56a76edda3ba2c\",\n        \"type\": \"source_code\",\n        \"text\": \"public AirFilter create() { return new AirFilter(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"36c0e396e7af6db0f1219d92401d9409\",\n        \"type\": \"source_code\",\n        \"text\": \"public CabinAirFilter create() { \\n      return new CabinAirFilter(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d458b10b59d429f8381ceb533dd4cdca\",\n        \"type\": \"source_code\",\n        \"text\": \"public OilFilter create() { return new OilFilter(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b50e396761a6fc14aefe0d7c82b46781\",\n        \"type\": \"source_code\",\n        \"text\": \"public FanBelt create() { return new FanBelt(); }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a91a4a180b676358ee611d33e6d18cf0\",\n        \"type\": \"source_code\",\n        \"text\": \"public GeneratorBelt create() { \\n      return new GeneratorBelt(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ecc5ce3a65e3dc2765a317e9e95d239\",\n        \"type\": \"source_code\",\n        \"text\": \"public PowerSteeringBelt create() { \\n      return new PowerSteeringBelt(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"785105bc4a6bfcd56ee38e620e0049a0\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 10; i++) \\n      System.out.println(Part.createRandom());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5ccf6d1d680f6959e559d1da53546e38\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"Testing x of type \\\" + x.getClass()); \\n    print(\\\"x instanceof Base \\\" + (x instanceof Base)); \\n    print(\\\"x instanceof Derived \\\"+ (x instanceof Derived)); \\n    print(\\\"Base.isInstance(x) \\\"+ Base.class.isInstance(x)); \\n    print(\\\"Derived.isInstance(x) \\\" + \\n      Derived.class.isInstance(x)); \\n    print(\\\"x.getClass() == Base.class \\\" + \\n      (x.getClass() == Base.class)); \\n    print(\\\"x.getClass() == Derived.class \\\" + \\n      (x.getClass() == Derived.class)); \\n    print(\\\"x.getClass().equals(Base.class)) \\\"+ \\n      (x.getClass().equals(Base.class))); \\n    print(\\\"x.getClass().equals(Derived.class)) \\\" + \\n      (x.getClass().equals(Derived.class)));\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ffc0d9fdf22afc2a93aaf8b21b787e85\",\n        \"type\": \"source_code\",\n        \"text\": \"test(new Base()); \\n    test(new Derived());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e3a8285ea637efe94980c74740cb9a34\",\n        \"type\": \"source_code\",\n        \"text\": \"class information\",\n        \"programming_language\": \"Perl6\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8f53b618942054476ac20ac225f6a7af\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"usage:\\\\n\\\" + \\n    \\\"ShowMethods qualified.class.name\\\\n\\\" + \\n    \\\"To show all methods in class or:\\\\n\\\" + \\n    \\\"ShowMethods qualified.class.name word\\\\n\\\" + \\n    \\\"To search for methods involving \\u2018word\\u2019\\\";\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0e96e1ef49e0a3dd3367f76e1a03298\",\n        \"type\": \"source_code\",\n        \"tex