; \\n      g.dispose();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"545049d188235ce6b8b70e54746802bf\",\n        \"type\": \"source_code\",\n        \"text\": \"notifyListeners(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32bc850da06395f129d188c1e555eaf2\",\n        \"type\": \"source_code\",\n        \"text\": \"public void mouseMoved(MouseEvent e) { \\n      xm = e.getX(); \\n      ym = e.getY(); \\n      repaint(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"564b6a16e55963d7127300f07e1a4874\",\n        \"type\": \"source_code\",\n        \"text\": \"BangBean2 bb2 = new BangBean2(); \\n    bb2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        System.out.println(\\\"ActionEvent\\\" + e); \\n      } \\n    }); \\n    bb2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        System.out.println(\\\"BangBean2 action\\\"); \\n      } \\n    }); \\n    bb2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        System.out.println(\\\"More action\\\"); \\n      } \\n    }); \\n    JFrame frame = new JFrame(); \\n    frame.add(bb2); \\n    run(frame, 300, 300);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09d2bd168181f1e64c2b1651a80a8aa8\",\n        \"type\": \"source_code\",\n        \"text\": \"Flex\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdfa731a0f1ffebdb1b2f10a68f9883f\",\n        \"type\": \"source_code\",\n        \"text\": \"<![CDATA[ \\n    function updateOutput() { \\n      output.text = \\\"Hello! \\\" + input.text; \\n    } \\n    ]]>\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"548b967f878ef06a5a1722e5e3f5305b\",\n        \"type\": \"source_code\",\n        \"text\": \"change=\\\"updateOutput()\\\" />\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b279a44439c70c144133e66f4b442f88\",\n        \"type\": \"source_code\",\n        \"text\": \"titleStyleDeclaration=\\\"headerText\\\" \\n    title=\\\"Flex MP3 Library\\\"> \\n    <mx:HBox verticalAlign=\\\"bottom\\\"> \\n      <mx:DataGrid id=\\\"songGrid\\\" \\n        cellPress=\\\"selectSong(event)\\\" rowCount=\\\"8\\\"> \\n        <mx:columns> \\n          <mx:Array> \\n            <mx:DataGridColumn columnName=\\\"name\\\" \\n              headerText=\\\"Song Name\\\" width=\\\"120\\\" /> \\n            <mx:DataGridColumn columnName=\\\"artist\\\" \\n              headerText=\\\"Artist\\\" width=\\\"180\\\" /> \\n            <mx:DataGridColumn columnName=\\\"album\\\" \\n              headerText=\\\"Album\\\" width=\\\"160\\\" /> \\n          </mx:Array> \\n        </mx:columns> \\n      </mx:DataGrid> \\n      <mx:VBox> \\n        <mx:HBox height=\\\"100\\\" > \\n          <mx:Image id=\\\"albumImage\\\" source=\\\"\\\" \\n            height=\\\"80\\\" width=\\\"100\\\" \\n            mouseOverEffect=\\\"resizeBig\\\" \\n            mouseOutEffect=\\\"resizeSmall\\\" /> \\n          <mx:TextArea id=\\\"songInfo\\\" \\n            styleName=\\\"boldText\\\" height=\\\"100%\\\" width=\\\"120\\\" \\n            vScrollPolicy=\\\"off\\\" borderStyle=\\\"none\\\" /> \\n        </mx:HBox> \\n        <mx:MediaPlayback id=\\\"songPlayer\\\" \\n          contentPath=\\\"\\\" \\n          mediaType=\\\"MP3\\\" \\n          height=\\\"70\\\" \\n          width=\\\"230\\\" \\n          controllerPolicy=\\\"on\\\" \\n          autoPlay=\\\"false\\\" \\n          visible=\\\"false\\\" /> \\n      </mx:VBox> \\n    </mx:HBox> \\n    <mx:ControlBar horizontalAlign=\\\"right\\\"> \\n      <mx:Button id=\\\"refreshSongsButton\\\" \\n        label=\\\"Refresh Songs\\\" width=\\\"100\\\" \\n        toolTip=\\\"Refresh Song List\\\" \\n        click=\\\"songService.getSongs()\\\" /> \\n    </mx:ControlBar>\",\n        \"programming_language\": \"XML\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c627f60c28a37600fb835fec8aea65da\",\n        \"type\": \"source_code\",\n        \"text\": \"<mx:Resize name=\\\"resizeBig\\\" heightTo=\\\"100\\\" \\n      duration=\\\"500\\\"/> \\n    <mx:Resize name=\\\"resizeSmall\\\" heightTo=\\\"80\\\" \\n      duration=\\\"500\\\"/>\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9e8b4bb2ea615c45e2b91684fcfd6dfe\",\n        \"type\": \"source_code\",\n        \"text\": \"source=\\\"gui.flex.SongService\\\" \\n    result=\\\"onSongs(event.result)\\\" \\n    fault=\\\"alert(event.fault.faultstring, \\u2018Error\\u2019)\\\"> \\n    <mx:method name=\\\"getSongs\\\"/>\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9ba325307aa3922c70bc0be51baf62f\",\n        \"type\": \"source_code\",\n        \"text\": \"addSong(new Song(\\\"Chocolate\\\", \\\"Snow Patrol\\\", \\n      \\\"Final Straw\\\", \\\"sp-final-straw.jpg\\\", \\n      \\\"chocolate.mp3\\\")); \\n    addSong(new Song(\\\"Concerto No. 2 in E\\\", \\\"Hilary Hahn\\\", \\n      \\\"Bach: Violin Concertos\\\", \\\"hahn.jpg\\\", \\n      \\\"bachviolin2.mp3\\\")); \\n    addSong(new Song(\\\"\\u2018Round Midnight\\\", \\\"Wes Montgomery\\\", \\n      \\\"The Artistry of Wes Montgomery\\\", \\n      \\\"wesmontgomery.jpg\\\", \\\"roundmidnight.mp3\\\"));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ffb128b831d91cf0a95212eaf7d0c2a\",\n        \"type\": \"source_code\",\n        \"text\": \"this.name = name; \\n    this.artist = artist; \\n    this.album = album; \\n    this.albumImageUrl = albumImageUrl; \\n    this.songMediaUrl = songMediaUrl;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a3dd2796a9f269e607f0f4155141bdc3\",\n        \"type\": \"source_code\",\n        \"text\": \"this.albumImageUrl = albumImageUrl;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a05a235740ef66b99cb6c0cce390e084\",\n        \"type\": \"source_code\",\n        \"text\": \"this.artist = artist;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b906cfcd282b91e04efc126420d4746\",\n        \"type\": \"source_code\",\n        \"text\": \"this.songMediaUrl = songMediaUrl;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1293491b922b282b98deccc8baceca49\",\n        \"type\": \"source_code\",\n        \"text\": \"Display display = new Display(); \\n    Shell shell = new Shell(display); \\n    shell.setText(\\\"Hi there, SWT!\\\"); // Title bar \\n    shell.open(); \\n    while(!shell.isDisposed()) \\n      if(!display.readAndDispatch()) \\n        display.sleep(); \\n    display.dispose();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32094b590d1c45f943895a88e568a3ce\",\n        \"type\": \"source_code\",\n        \"text\": \"Display display = new Display(); \\n    for(int i = 0; i < shells.length; i++) { \\n      shells[i] = new Shell(display); \\n      shells[i].setText(\\\"Shell #\\\" + i); \\n      shells[i].open(); \\n    } \\n    while(!shellsDisposed()) \\n      if(!display.readAndDispatch()) \\n        display.sleep(); \\n    display.dispose();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d8148be3bad4c49c8c41583608e523f5\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < shells.length; i++) \\n      if(shells[i].isDisposed()) \\n        return true; \\n    return false;\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"422af3526ee79249b1d82ab39ec59b50\",\n        \"type\": \"source_code\",\n        \"text\": \"Display display = new Display(); \\n    Shell shell = new Shell(display); \\n    shell.setText(\\\"Display Properties\\\"); \\n    shell.setLayout(new FillLayout()); \\n    Text text = new Text(shell, SWT.WRAP | SWT.V_SCROLL); \\n    StringWriter props = new StringWriter(); \\n    System.getProperties().list(new PrintWriter(props));\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d17e8ecd836909289897fae3da77516\",\n        \"type\": \"source_code\",\n        \"text\": \"text.setText(props.toString()); \\n    shell.open(); \\n    while(!shell.isDisposed()) \\n      if(!display.readAndDispatch()) \\n        display.sleep(); \\n    display.dispose();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09f297bc405b0f1d7301c29a314c45e1\",\n        \"type\": \"source_code\",\n        \"text\": \"Display display = new Display(); \\n    Shell shell = new Shell(display); \\n    shell.setText(swtApp.getClass().getSimpleName()); \\n    swtApp.createContents(shell);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"21373efbad32f3e8ef5c0106d5f35bac\",\n        \"type\": \"source_code\",\n        \"text\": \"shell.setSize(width, height); \\n    shell.open(); \\n    while(!shell.isDisposed()) { \\n      if(!display.readAndDispatch()) \\n        display.sleep(); \\n    } \\n    display.dispose();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"403a6582b806ac457cc8e06c43cef407\",\n        \"type\": \"source_code\",\n        \"text\": \"parent.setLayout(new FillLayout()); \\n    Text text = new Text(parent, SWT.WRAP | SWT.V_SCROLL); \\n    for(Map.Entry entry: System.getenv().entrySet()) { \\n      text.append(entry.getKey() + \\\": \\\" + \\n        entry.getValue() + \\\"\\\\n\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3a94f03c8ade7639de0e2c6d4fab2bc0\",\n        \"type\": \"source_code\",\n        \"text\": \"SWTConsole.run(new DisplayEnvironment(), 800, 600);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"00b6642e13242eede096986e047aab7b\",\n        \"type\": \"source_code\",\n        \"text\": \"shell = parent.getShell(); \\n    Menu bar = new Menu(shell, SWT.BAR); \\n    shell.setMenuBar(bar); \\n    Set<String> words = new TreeSet<String>( \\n      new TextFile(\\\"Menus.java\\\", \\\"\\\\\\\\W+\\\")); \\n    Iterator<String> it = words.iterator(); \\n    while(it.next().matches(\\\"[0-9]+\\\")) \\n      ; // Move past the numbers. \\n    MenuItem[] mItem = new MenuItem[7]; \\n    for(int i = 0; i < mItem.length; i++) { \\n      mItem[i] = new MenuItem(bar, SWT.CASCADE); \\n      mItem[i].setText(it.next()); \\n      Menu submenu = new Menu(shell, SWT.DROP_DOWN); \\n      mItem[i].setMenu(submenu); \\n    } \\n    int i = 0; \\n    while(it.hasNext()) { \\n      addItem(bar, it, mItem[i]); \\n      i = (i + 1) % mItem.length; \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f687ec10603d19b03d4c73239e9c9e7f\",\n        \"type\": \"source_code\",\n        \"text\": \"public void handleEvent(Event e) { \\n      System.out.println(e.toString()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"388e4fa8fda10ddaebd9d141022b0505\",\n        \"type\": \"source_code\",\n        \"text\": \"MenuItem item = new MenuItem(mItem.getMenu(),SWT.PUSH); \\n    item.addListener(SWT.Selection, listener); \\n    item.setText(it.next());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a1e3a8ad44b615eb0e26d77922bf120\",\n        \"type\": \"source_code\",\n        \"text\": \"SWTConsole.run(new Menus(), 600, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"25e1cda0b1769a2bc80a650e03a80d7e\",\n        \"type\": \"source_code\",\n        \"text\": \"shell = parent.getShell(); \\n    parent.setLayout(new FillLayout()); \\n    folder = new TabFolder(shell, SWT.BORDER); \\n    labelTab(); \\n    directoryDialogTab(); \\n    buttonTab(); \\n    sliderTab(); \\n    scribbleTab(); \\n    browserTab();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"12b49afaa56195975936ad5e3b77c649\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"A Label\\\"); // Text on the tab \\n    tab.setToolTipText(\\\"A simple label\\\"); \\n    Label label = new Label(folder, SWT.CENTER); \\n    label.setText(\\\"Label text\\\"); \\n    tab.setControl(label);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"104d91e981106111f3719f83daf58e6f\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"Directory Dialog\\\"); \\n    tab.setToolTipText(\\\"Select a directory\\\"); \\n    final Button b = new Button(folder, SWT.PUSH); \\n    b.setText(\\\"Select a Directory\\\"); \\n    b.addListener(SWT.MouseDown, new Listener() { \\n        public void handleEvent(Event e) { \\n          DirectoryDialog dd = new DirectoryDialog(shell); \\n          String path = dd.open(); \\n          if(path != null) \\n            b.setText(path); \\n        } \\n      }); \\n    tab.setControl(b);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0fcdb21db35d41935f4f852c8543b51e\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"Buttons\\\"); \\n    tab.setToolTipText(\\\"Different kinds of Buttons\\\"); \\n    Composite composite = new Composite(folder, SWT.NONE); \\n    composite.setLayout(new GridLayout(4, true)); \\n    for(int dir : new int[]{ \\n        SWT.UP, SWT.RIGHT, SWT.LEFT, SWT.DOWN \\n      }) { \\n      Button b = new Button(composite, SWT.ARROW | dir); \\n      b.addListener(SWT.MouseDown, listener);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"88f1c488e11ce574f9fd7ed5b034f4f4\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    newButton(composite, SWT.CHECK, \\\"Check button\\\"); \\n    newButton(composite, SWT.PUSH, \\\"Push button\\\"); \\n    newButton(composite, SWT.RADIO, \\\"Radio button\\\"); \\n    newButton(composite, SWT.TOGGLE, \\\"Toggle button\\\"); \\n    newButton(composite, SWT.FLAT, \\\"Flat button\\\"); \\n    tab.setControl(composite);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"37d93288b362c57f5e37bb78f3b7f1d7\",\n        \"type\": \"source_code\",\n        \"text\": \"public void handleEvent(Event e) { \\n        MessageBox m = new MessageBox(shell, SWT.OK); \\n        m.setMessage(e.toString()); \\n        m.open(); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"76fd278ccf62cd493d4ff4b9e80ddb10\",\n        \"type\": \"source_code\",\n        \"text\": \"int type, String label) { \\n    Button b = new Button(composite, type); \\n    b.setText(label); \\n    b.addListener(SWT.MouseDown, listener);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64017dfae10df1a2f7d209efdd083dfa\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"Sliders and Progress bars\\\"); \\n    tab.setToolTipText(\\\"Tied Slider to ProgressBar\\\"); \\n    Composite composite = new Composite(folder, SWT.NONE); \\n    composite.setLayout(new GridLayout(2, true)); \\n    final Slider slider = \\n      new Slider(composite, SWT.HORIZONTAL); \\n    final ProgressBar progress = \\n      new ProgressBar(composite, SWT.HORIZONTAL); \\n    slider.addSelectionListener(new SelectionAdapter() { \\n        public void widgetSelected(SelectionEvent event) { \\n          progress.setSelection(slider.getSelection()); \\n        } \\n      }); \\n    tab.setControl(composite);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef7b9c561093c3a60d4e6217620841a4\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"Scribble\\\"); \\n    tab.setToolTipText(\\\"Simple graphics: drawing\\\"); \\n    final Canvas canvas = new Canvas(folder, SWT.NONE); \\n    ScribbleMouseListener sml= new ScribbleMouseListener(); \\n    canvas.addMouseListener(sml); \\n    canvas.addMouseMoveListener(sml); \\n    tab.setControl(canvas);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e4000034bef741ecc4f8862ea1fc270\",\n        \"type\": \"source_code\",\n        \"text\": \"extends MouseAdapter implements MouseMoveListener { \\n    private Point p = new Point(0, 0); \\n    public void mouseMove(MouseEvent e) { \\n      if((e.stateMask & SWT.BUTTON1) == 0) \\n        return; \\n      GC gc = new GC((Canvas)e.widget); \\n      gc.drawLine(p.x, p.y, e.x, e.y); \\n      gc.dispose(); \\n      updatePoint(e); \\n    } \\n    public void mouseDown(MouseEvent e) { updatePoint(e); } \\n    private void updatePoint(MouseEvent e) { \\n      p.x = e.x; \\n      p.y = e.y;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7a1794b61984e0e0ff142e9ec7b0c7b9\",\n        \"type\": \"source_code\",\n        \"text\": \"TabItem tab = new TabItem(folder, SWT.CLOSE); \\n    tab.setText(\\\"A Browser\\\"); \\n    tab.setToolTipText(\\\"A Web browser\\\"); \\n    Browser browser = null; \\n    try { \\n      browser = new Browser(folder, SWT.NONE); \\n    } catch(SWTError e) { \\n      Label label = new Label(folder, SWT.BORDER); \\n      label.setText(\\\"Could not initialize browser\\\"); \\n      tab.setControl(label); \\n    } \\n    if(browser != null) { \\n      browser.setUrl(\\\"http://www.mindview.net\\\"); \\n      tab.setControl(browser); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"98cd42d7f72ab02076d4b2724f6938e1\",\n        \"type\": \"source_code\",\n        \"text\": \"SWTConsole.run(new TabbedPane(), 800, 600);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"54cd9c7bf0f0f46c99ddde08fafad5aa\",\n        \"type\": \"source_code\",\n        \"text\": \"super(parent, style); \\n    addPaintListener(new PaintListener() { \\n      public void paintControl(PaintEvent e) { \\n        int maxWidth = getSize().x; \\n        double hstep = (double)maxWidth / (double)points; \\n        int maxHeight = getSize().y; \\n        pts = new int[points]; \\n        for(int i = 0; i < points; i++) \\n          pts[i] = (int)((sines[i] * maxHeight / 2 * .95) \\n            + (maxHeight / 2)); \\n        e.gc.setForeground( \\n          e.display.getSystemColor(SWT.COLOR_RED)); \\n        for(int i = 1; i < points; i++) { \\n          int x1 = (int)((i - 1) * hstep); \\n          int x2 = (int)(i * hstep); \\n          int y1 = pts[i - 1]; \\n          int y2 = pts[i]; \\n          e.gc.drawLine(x1, y1, x2, y2); \\n        } \\n      } \\n    }); \\n    setCycles(5);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a6e79f110f0ef7541fe0a1fab778221f\",\n        \"type\": \"source_code\",\n        \"text\": \"cycles = newCycles; \\n    points = SCALEFACTOR * cycles * 2; \\n    sines = new double[points]; \\n    for(int i = 0; i < points; i++) { \\n      double radians = (Math.PI / SCALEFACTOR) * i; \\n      sines[i] = Math.sin(radians); \\n    } \\n    redraw();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a8a778867253d2a00c4d5e3f426ac88e\",\n        \"type\": \"source_code\",\n        \"text\": \"parent.setLayout(new GridLayout(1, true)); \\n    sines = new SineDraw(parent, SWT.NONE); \\n    sines.setLayoutData( \\n      new GridData(SWT.FILL, SWT.FILL, true, true)); \\n    sines.setFocus(); \\n    slider = new Slider(parent, SWT.HORIZONTAL); \\n    slider.setValues(5, 1, 30, 1, 1, 1); \\n    slider.setLayoutData( \\n      new GridData(SWT.FILL, SWT.DEFAULT, true, false)); \\n    slider.addSelectionListener(new SelectionAdapter() { \\n      public void widgetSelected(SelectionEvent event) { \\n        sines.setCycles(slider.getSelection()); \\n      } \\n    });\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87cb624c4996c2ec7e09d1f23c257b7b\",\n        \"type\": \"source_code\",\n        \"text\": \"SWTConsole.run(new SineWave(), 700, 400);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5c98009f128544675cc942a3fad72a16\",\n        \"type\": \"source_code\",\n        \"text\": \"public void paintControl(PaintEvent e) { \\n      Color color = new Color(e.display, cColor); \\n      e.gc.setBackground(color); \\n      Point size = getSize(); \\n      e.gc.fillRectangle(0, 0, size.x, size.y); \\n      color.dispose(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"89325c0d21691686bad245ba08c028ed\",\n        \"type\": \"source_code\",\n        \"text\": \"return new RGB(rand.nextInt(255), \\n      rand.nextInt(255), rand.nextInt(255));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0162a305ead26703fb472d10670c6daa\",\n        \"type\": \"source_code\",\n        \"text\": \"super(parent, SWT.NONE); \\n    this.pause = pause; \\n    addPaintListener(new CBoxPaintListener());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c11eb8879cce13555cda384a17073fc\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        cColor = newColor();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d59062dd7c6a33a62b293a3c264b33bb\",\n        \"type\": \"source_code\",\n        \"text\": \"getDisplay().asyncExec(new Runnable() { \\n          public void run() { \\n            try { redraw(); } catch(SWTException e) {} \\n            // SWTException is OK when the parent \\n            // is terminated from under us. \\n          } \\n        }); \\n        TimeUnit.MILLISECONDS.sleep(pause); \\n      } \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    } catch(SWTException e) { \\n      // Acceptable way to exit: our parent \\n      // was terminated from under us. \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94c53dc171071800472c3d9f209d963f\",\n        \"type\": \"source_code\",\n        \"text\": \"GridLayout gridLayout = new GridLayout(grid, true); \\n    gridLayout.horizontalSpacing = 0; \\n    gridLayout.verticalSpacing = 0; \\n    parent.setLayout(gridLayout); \\n    ExecutorService exec = new DaemonThreadPoolExecutor(); \\n    for(int i = 0; i < (grid * grid); i++) { \\n      final CBox cb = new CBox(parent, pause); \\n      cb.setLayoutData(new GridData(GridData.FILL_BOTH)); \\n      exec.execute(cb); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1947a9b51ba46fc43798a05026e608f1\",\n        \"type\": \"source_code\",\n        \"text\": \"ColorBoxes boxes = new ColorBoxes(); \\n    if(args.length > 0) \\n      boxes.grid = new Integer(args[0]); \\n    if(args.length > 1) \\n      boxes.pause = new Integer(args[1]); \\n    SWTConsole.run(boxes, 500, 400);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    }\n]"
            }
        },
        {
            "file": {
                "File": "pdf_to_knowledgehooks.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/pdf_to_knowledgehooks.py",
                "Relative Path": "pdf_to_knowledgehooks.py",
                "Size": 2066,
                "Last Modified": "2024-12-03 15:12:00",
                "Lines": 56,
                "Source_Code": "\"\"\" import os\nfrom com_worktwins_data_source.PDFBook import PDFBook\n\nPDF_DIR = \"com_worktwins_data/books_pdf\"\n\ndef main():\n #   for file_name in [os.listdir(PDF_DIR)[0]]:\n    for file_name in [\"/brainboost/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_data/books_pdf/Bruce Eckel - Thinking in Java 4th Edition.pdf\"]:\n        if file_name.endswith(\".pdf\"):\n            pdf_path = os.path.join(PDF_DIR, file_name)\n            print(f\"Processing {file_name}...\")\n            book = PDFBook(pdf_path)\n            book.to_knowledge_hooks()\n    print(\"Processing complete.\")\n\nif __name__ == \"__main__\":\n    main()\n \"\"\"\n\nimport os\nfrom com_worktwins_data_source.PDFBook import PDFBook\n\nPDF_DIR = \"com_worktwins_data/books_pdf\"\n\ndef main():\n    for file_name in [\"/brainboost/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_data/books_pdf/Bruce Eckel - Thinking in Java 4th Edition.pdf\"]:\n        if file_name.endswith(\".pdf\"):\n            pdf_path = os.path.join(PDF_DIR, file_name)\n            print(f\"Processing {file_name}...\")\n            book = PDFBook(pdf_path)\n            \n            # Generate knowledge hooks\n            book.to_knowledge_hooks()\n\n            # Evaluate with keywords\n            keywords = [\"binary\", \"shift\", \"operation\"]  # Example keywords\n            print(f\"Evaluating book for keywords: {keywords}\")\n            topics = book.evaluate(keywords)\n\n            print(\"Evaluation Results:\")\n            if not topics:\n                print(\"No topics matched the given keywords.\")\n            else:\n                for topic in topics:\n                    print(f\"ID: {topic['id']}\")\n                    print(f\"Path: {topic['path']}\")\n                    print(f\"Semantics: {topic['semantics']}\")\n                    print(f\"Matched Keywords: {topic['matched_keywords']}\")\n                    print(f\"Relevance Score: {topic['relevance_score']:.2f}\")\n                    print(\"-----------\")\n\n    print(\"Processing complete.\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
            }
        },
        {
            "file": {
                "File": "README.md",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/README.md",
                "Relative Path": "README.md",
                "Size": 142,
                "Last Modified": "2024-11-25 23:05:17",
                "Lines": 4,
                "Source_Code": "Once code is pulled initializethe environment to recreate symlinks \n\n./initialize_environment.sh\n# brainboost_datatools_subjective_semantizer\n"
            }
        },
        {
            "file": {
                "File": "pdf_to_dependency_graph.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/pdf_to_dependency_graph.py",
                "Relative Path": "pdf_to_dependency_graph.py",
                "Size": 11171,
                "Last Modified": "2024-11-25 16:29:26",
                "Lines": 295,
                "Source_Code": "import os\nimport pandas as pd\nfrom collections import defaultdict\nfrom hashlib import sha256\nfrom wordfreq import word_frequency\nfrom alive_progress import alive_bar\nfrom com_worktwins_data_source.PDFBook import PDFBook\nimport spacy\nimport unicodedata\nimport json\n\n# File paths\nPDF_PATH = \"com_worktwins_data/books_pdf/Bruce Eckel - Thinking in Java 4th Edition.pdf\"\nENGLISH_FREQUENCIES_PATH = \"report_english_frequencies.json\"\nBOOK_FREQUENCIES_PATH = \"report_book_frequencies.json\"\nBOOK_PARAGRAPHS_PATH = \"report_book_paragraphs.json\"\nEXCLUDED_WORDS_PATH = \"report_excluded_words.json\"\n\n# Constants\nMIN_BOOK_FREQUENCY = 10  # Minimum frequency in the book for inclusion\nENGLISH_TOP_PERCENTILE = 0.9  # Top 10% of English frequency\nBOOK_TOP_PERCENTILE = 0.9  # Top 10% of book frequency\n\n# Load spaCy model\nnlp = spacy.load(\"en_core_web_sm\")\n\n\ndef save_to_txt(data, output_path):\n    \"\"\"\n    Save raw text data to a .txt file.\n    \"\"\"\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(data)\n    print(f\"Saved TXT to {output_path}\")\n\n\ndef save_to_json(data, output_path):\n    \"\"\"\n    Save data to a JSON file.\n    \"\"\"\n    with open(output_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f, indent=4)\n    print(f\"Saved JSON to {output_path}\")\n\n\ndef create_output_folder(pdf_path):\n    \"\"\"\n    Create an output folder with the same name as the PDF file.\n    \"\"\"\n    folder_name = os.path.splitext(os.path.basename(pdf_path))[0]\n    output_dir = os.path.join(os.path.dirname(pdf_path), folder_name)\n    os.makedirs(output_dir, exist_ok=True)\n    return output_dir\n\ndef prepend_pdf_name(output_dir, pdf_path, suffix):\n    \"\"\"\n    Generate file path with the PDF file name prepended in the output directory.\n    \"\"\"\n    base_name = os.path.splitext(os.path.basename(pdf_path))[0]\n    return os.path.join(output_dir, f\"{base_name}_{suffix}\")\n\n\n\n\ndef generate_content_hash(sentence, book_freq_df, english_freq_df):\n    \"\"\"\n    Generate a hash based on sorted words by their frequency in the book and English language.\n    \"\"\"\n    # Tokenize and normalize\n    words = [word.lower() for word in sentence.split() if word.isalnum()]\n\n    # Merge frequency data\n    frequencies = []\n    for word in words:\n        book_freq = book_freq_df.get(word, float('inf'))  # Higher means less frequent\n        english_freq = english_freq_df.get(word, float('inf'))\n        frequencies.append((word, book_freq, english_freq))\n\n    # Sort by book frequency (primary) and English frequency (secondary)\n    sorted_words = sorted(frequencies, key=lambda x: (x[1], x[2]))\n\n    # Extract only the words for hashing\n    sorted_word_list = [word for word, _, _ in sorted_words]\n    joined_words = \" \".join(sorted_word_list)\n\n    # Generate hash\n    return sha256(joined_words.encode()).hexdigest()[:8]\n\n\ndef clean_text(text):\n    \"\"\"\n    Clean the text by normalizing Unicode characters and removing unwanted symbols.\n    \"\"\"\n    # Normalize Unicode (e.g., fix 'modi\\ufb01ed' -> 'modified')\n    text = unicodedata.normalize(\"NFKC\", text)\n\n    # Remove numbers and punctuation\n    words = text.split()\n    words = [word for word in words if word.isalnum() and not word.isdigit()]  # Remove numbers\n    return \" \".join(words)\n\n\ndef extract_keywords(sentence, book_freq_df, english_freq_df):\n    \"\"\"\n    Extract the most meaningful keywords for a sentence.\n    \"\"\"\n    # Tokenize and normalize\n    words = [word.lower() for word in sentence.split() if word.isalnum() and len(word) >= 3]\n\n    # Get frequencies\n    word_data = [\n        {\n            \"word\": word,\n            \"book_frequency\": book_freq_df.get(word, 0),\n            \"english_frequency\": english_freq_df.get(word, float(\"inf\")),\n        }\n        for word in words\n    ]\n\n    # Sort by book frequency (desc) and English frequency (asc)\n    sorted_words = sorted(\n        word_data, key=lambda x: (-x[\"book_frequency\"], x[\"english_frequency\"])\n    )\n\n    # Deduplicate and select up to 10 keywords\n    seen_words = set()\n    top_keywords = []\n    for item in sorted_words:\n        if item[\"word\"] not in seen_words:\n            top_keywords.append(item[\"word\"])\n            seen_words.add(item[\"word\"])\n        if len(top_keywords) == 10:\n            break\n\n    return top_keywords\n\n\ndef generate_frequencies(book_text):\n    \"\"\"\n    Generate word frequencies and related data from the book text.\n    \"\"\"\n    # Split text into paragraphs and generate paragraph IDs\n    paragraphs = [para.strip() for para in book_text.split(\"\\n\\n\") if para.strip()]\n    paragraph_ids = [sha256(para.encode()).hexdigest()[:8] for para in paragraphs]\n\n    # Create a DataFrame for paragraphs\n    paragraphs_df = pd.DataFrame({\"id\": paragraph_ids, \"text\": paragraphs})\n\n    # Count word frequencies in the book\n    word_counts = defaultdict(int)\n    word_paragraph_map = defaultdict(set)\n\n    with alive_bar(len(paragraphs), title=\"Processing paragraphs\") as bar:\n        for pid, para in zip(paragraph_ids, paragraphs):\n            words = [word.lower() for word in para.split() if word.isalnum()]\n            for word in words:\n                word_counts[word] += 1\n                word_paragraph_map[word].add(pid)\n            bar()\n\n    # Create a DataFrame for book word frequencies\n    book_freq_df = pd.DataFrame(\n        [(word, count, list(word_paragraph_map[word])) for word, count in word_counts.items()],\n        columns=[\"word\", \"book_frequency\", \"paragraphs\"],\n    )\n\n    # Add English language frequencies\n    book_freq_df[\"english_frequency\"] = book_freq_df[\"word\"].apply(lambda word: word_frequency(word, \"en\"))\n\n    # Identify high-frequency English and book words\n    english_top_threshold = book_freq_df[\"english_frequency\"].quantile(ENGLISH_TOP_PERCENTILE)\n    book_top_threshold = book_freq_df[\"book_frequency\"].quantile(BOOK_TOP_PERCENTILE)\n\n    # Exclude connector words (high-frequency in both English and book)\n    excluded_connectors = book_freq_df[\n        (book_freq_df[\"english_frequency\"] >= english_top_threshold) &\n        (book_freq_df[\"book_frequency\"] >= book_top_threshold)\n    ]\n\n    # Exclude low-frequency non-English words\n    excluded_non_english = book_freq_df[\n        (book_freq_df[\"english_frequency\"] == 0) &  # Not in English language\n        (book_freq_df[\"book_frequency\"] < MIN_BOOK_FREQUENCY)  # Low frequency in book\n    ]\n\n    # Combine excluded words\n    excluded_words_df = pd.concat([excluded_connectors, excluded_non_english]).drop_duplicates(subset=[\"word\"])\n\n    # Filter out excluded words from the main book frequencies\n    book_freq_df = book_freq_df[~book_freq_df[\"word\"].isin(excluded_words_df[\"word\"])]\n\n    # Sort book and English frequency data\n    book_freq_df = book_freq_df.sort_values(by=\"book_frequency\", ascending=False)\n    english_freq_df = book_freq_df[[\"word\", \"english_frequency\"]].sort_values(by=\"english_frequency\", ascending=False)\n\n    return paragraphs_df, book_freq_df, excluded_words_df, english_freq_df\n\n\ndef process_paragraphs(paragraphs_df, book_freq_df, english_freq_df):\n    \"\"\"\n    Process paragraphs and split them into sentences, generating content-based hashes and paragraph-level keywords.\n    \"\"\"\n    book_freq_dict = book_freq_df.set_index(\"word\")[\"book_frequency\"].to_dict()\n    english_freq_dict = english_freq_df.set_index(\"word\")[\"english_frequency\"].to_dict()\n\n    enriched_paragraphs = []\n    with alive_bar(len(paragraphs_df), title=\"Processing sentences\") as bar:\n        for _, paragraph in paragraphs_df.iterrows():\n            paragraph_id = paragraph[\"id\"]\n            paragraph_text = clean_text(paragraph[\"text\"])\n\n            # Use spaCy to tokenize into sentences\n            doc = nlp(paragraph_text)\n            sentences = []\n            paragraph_keywords = set()\n            \n            for sent in doc.sents:\n                sentence_text = clean_text(sent.text)\n                keywords = extract_keywords(sentence_text, book_freq_dict, english_freq_dict)\n                sentence_hash = f\"{paragraph_id}_{generate_content_hash(sentence_text, book_freq_dict, english_freq_dict)}\"\n\n                sentences.append({\n                    \"id\": sentence_hash,\n                    \"type\": \"sentence\",\n                    \"text\": sentence_text,\n                    \"keywords\": keywords,\n                    \"weight\": 0.0\n                })\n                # Accumulate keywords from each sentence\n                paragraph_keywords.update(keywords)\n\n            # Sort the paragraph-level keywords\n            sorted_paragraph_keywords = sorted(\n                paragraph_keywords,\n                key=lambda word: (-book_freq_dict.get(word, 0), english_freq_dict.get(word, float('inf')))\n            )\n\n            enriched_paragraphs.append({\n                \"id\": paragraph_id,\n                \"type\": \"paragraph\",\n                \"text\": paragraph_text,\n                \"keywords\": sorted_paragraph_keywords,\n                \"weight\": 0.0,\n                \"sentences\": sentences\n            })\n            bar()\n\n    return enriched_paragraphs\n\n\ndef main():\n    # Step 1: Create output folder\n    output_dir = create_output_folder(PDF_PATH)\n\n    # Step 2: Extract text from the book\n    book = PDFBook(PDF_PATH)\n\n    # Step 3: Save raw text\n    raw_text = book.extract_raw()\n    raw_text_path = prepend_pdf_name(output_dir, PDF_PATH, \"raw_text.txt\")\n    save_to_txt(raw_text, raw_text_path)\n\n    # Step 4: Extract and save code blocks\n    print(\"Extracting code blocks...\")\n    code_blocks = book.extract_code_blocks()\n    code_blocks_json_path = prepend_pdf_name(output_dir, PDF_PATH, \"code_blocks.json\")\n    save_to_json(code_blocks, code_blocks_json_path)\n\n    code_blocks_script_path = prepend_pdf_name(output_dir, PDF_PATH, \"code_blocks.py\")\n    book.save_code_blocks_as_python_script(code_blocks, code_blocks_script_path)\n\n    # Step 5: Normalize text and generate frequencies\n    normalized_text = book.extract_normalized()\n    print(\"Generating frequencies and paragraphs...\")\n    paragraphs_df, book_freq_df, excluded_words_df, english_freq_df = generate_frequencies(normalized_text)\n\n    # Step 6: Save initial results to JSON files\n    save_to_json(paragraphs_df.to_dict(orient=\"records\"), prepend_pdf_name(output_dir, PDF_PATH, \"paragraphs.json\"))\n    save_to_json(book_freq_df[[\"word\", \"book_frequency\", \"paragraphs\"]].to_dict(orient=\"records\"),\n                 prepend_pdf_name(output_dir, PDF_PATH, \"book_frequencies.json\"))\n    save_to_json(english_freq_df.to_dict(orient=\"records\"),\n                 prepend_pdf_name(output_dir, PDF_PATH, \"english_frequencies.json\"))\n    save_to_json(excluded_words_df[[\"word\", \"paragraphs\"]].to_dict(orient=\"records\"),\n                 prepend_pdf_name(output_dir, PDF_PATH, \"excluded_words.json\"))\n\n    # Step 7: Process paragraphs into sentences\n    print(\"Processing sentences...\")\n    enriched_paragraphs = process_paragraphs(paragraphs_df, book_freq_df, english_freq_df)\n\n    # Step 8: Save enriched paragraph data with sentences\n    enriched_paragraphs_path = prepend_pdf_name(output_dir, PDF_PATH, \"paragraphs_with_sentences.json\")\n    save_to_json(enriched_paragraphs, enriched_paragraphs_path)\n\n    print(f\"All outputs saved in {output_dir}\")\n\n"
            }
        },
        {
            "file": {
                "File": "convert_llama_weights.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/convert_llama_weights.py",
                "Relative Path": "convert_llama_weights.py",
                "Size": 2153,
                "Last Modified": "2024-11-18 23:31:20",
                "Lines": 56,
                "Source_Code": "import torch\nimport os\nimport json\nfrom transformers import LlamaConfig, LlamaForCausalLM\n\ndef convert_to_hf_format(input_dir, output_dir):\n    # Load model parameters\n    with open(os.path.join(input_dir, \"params.json\"), \"r\") as config_file:\n        config_data = json.load(config_file)\n\n    # Set up configuration\n    config = LlamaConfig(\n        vocab_size=config_data[\"vocab_size\"],\n        hidden_size=config_data[\"dim\"],\n        num_hidden_layers=config_data[\"n_layers\"],\n        num_attention_heads=config_data[\"n_heads\"],\n        intermediate_size=4 * config_data[\"dim\"],\n        max_position_embeddings=config_data.get(\"max_seq_len\", 2048),  # Default to 2048 if not present\n    )\n\n    # Load weights\n    weights_path = os.path.join(input_dir, \"consolidated.00.pth\")\n    device_gpu = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    device_cpu = torch.device(\"cpu\")\n\n    print(f\"Loading weights. GPU: {device_gpu}, CPU: {device_cpu}...\")\n    state_dict = torch.load(weights_path, map_location=device_cpu)\n\n    # Load the model structure\n    model = LlamaForCausalLM(config)\n    \n    # Move parts to GPU as needed\n    print(\"Loading model weights and transferring parts to GPU...\")\n    for name, param in state_dict.items():\n        if param.numel() > 1e6:  # Large tensors to GPU\n            state_dict[name] = param.to(device_gpu)\n        else:  # Smaller tensors to CPU\n            state_dict[name] = param.to(device_cpu)\n\n    model.load_state_dict(state_dict, strict=False)\n\n    # Save in Hugging Face format\n    print(f\"Saving converted model to {output_dir}...\")\n    os.makedirs(output_dir, exist_ok=True)\n    model.save_pretrained(output_dir)\n\n    # Save tokenizer\n    tokenizer_path = os.path.join(input_dir, \"tokenizer.model\")\n    os.symlink(tokenizer_path, os.path.join(output_dir, \"tokenizer.model\"))\n\n    print(f\"Model successfully converted and saved to {output_dir}\")\n\nif __name__ == \"__main__\":\n    input_directory = \"/home/golden/.llama/checkpoints/Llama3.2-3B-Instruct\"\n    output_directory = \"/home/golden/.llama/checkpoints/Llama3.2-3B-Instruct-HF\"\n    convert_to_hf_format(input_directory, output_directory)\n"
            }
        },
        {
            "file": {
                "File": "tools_context.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/tools_context.py",
                "Relative Path": "tools_context.py",
                "Size": 15579,
                "Last Modified": "2024-11-04 15:32:58",
                "Lines": 363,
                "Source_Code": "import os\nimport re\nfrom datetime import datetime\nimport json\nfrom collections import defaultdict\nimport argparse\nimport shutil\n\n\nclass SnapshotGenerator:\n    def __init__(self, config):\n        self.root_dir = config['root_dir']\n        self.avoid_folders = config['avoid_folders']\n        self.avoid_files = set(config.get('avoid_files', []))\n        self.include_extensions = set(config['include_extensions'])\n        self.key_files = config['key_files']\n        self.output_file = config['output_file']\n        self.compress = config['compress']\n        self.amount_of_chunks = config['amount_of_chunks']\n        self.size_of_chunk = config['size_of_chunk']\n        self.imports = defaultdict(int)\n        self.project_name = os.path.basename(self.root_dir)\n        self.language_extensions = {\n            'python': ['.py'],\n            'javascript': ['.js', '.mjs', '.jsx'],\n            'typescript': ['.ts', '.tsx'],\n            'java': ['.java'],\n            'csharp': ['.cs', '.csproj'],\n            'cpp': ['.cpp', '.hpp', '.h', '.cc'],\n            'c': ['.c', '.h'],\n            'ruby': ['.rb', '.erb', '.rake'],\n            'php': ['.php', '.phtml', '.php3', '.php4', '.php5', '.phps'],\n            'swift': ['.swift'],\n            'kotlin': ['.kt', '.kts'],\n            'go': ['.go'],\n            'r': ['.R', '.r'],\n            'perl': ['.pl', '.pm', '.t'],\n            'bash': ['.sh', '.bash'],\n            'html': ['.html', '.htm'],\n            'css': ['.css', '.scss', '.sass', '.less'],\n            'sql': ['.sql'],\n            'scala': ['.scala', '.sc'],\n            'haskell': ['.hs', '.lhs'],\n            'lua': ['.lua'],\n            'rust': ['.rs'],\n            'dart': ['.dart'],\n            'matlab': ['.m'],\n            'julia': ['.jl'],\n            'vb': ['.vb', '.vbs'],\n            'asm': ['.asm', '.s'],\n            'fsharp': ['.fs', '.fsi', '.fsx'],\n            'groovy': ['.groovy', '.gvy', '.gy', '.gsh'],\n            'erlang': ['.erl', '.hrl'],\n            'elixir': ['.ex', '.exs'],\n            'cobol': ['.cob', '.cbl'],\n            'fortran': ['.f', '.for', '.f90', '.f95'],\n            'ada': ['.adb', '.ads'],\n            'prolog': ['.pl', '.pro', '.P'],\n            'lisp': ['.lisp', '.lsp'],\n            'scheme': ['.scm', '.ss'],\n            'racket': ['.rkt'],\n            'verilog': ['.v', '.vh'],\n            'vhdl': ['.vhdl', '.vhd'],\n            'markdown': ['.md', '.markdown'],\n            'vue': ['.vue'],\n            'svelte': ['.svelte'],\n            'json': ['.json'],\n            'yaml': ['.yaml', '.yml'],\n            'xml': ['.xml'],\n            'git': ['.gitignore', '.gitattributes'],\n            'cicd': ['.travis.yml', 'Jenkinsfile', '.circleci/config.yml', '.gitlab-ci.yml', 'azure-pipelines.yml']\n        }\n        self.detected_language = None\n\n    def exclude_directories(self, dirs):\n        exclude_set = set(self.avoid_folders)\n        return [d for d in dirs if d not in exclude_set]\n\n    def detect_programming_language(self, file):\n        for language, extensions in self.language_extensions.items():\n            if file.endswith(tuple(extensions)):\n                return language\n        return None\n\n    def build_tree_structure(self, root_dir):\n        tree = {\"directory_name\": os.path.basename(root_dir), \"children\": []}\n        for root, dirs, files in os.walk(root_dir):\n            dirs[:] = self.exclude_directories(dirs)\n            path = os.path.relpath(root, root_dir).split(os.sep)\n            subdir = tree\n            for part in path:\n                if part == '.':\n                    continue\n                for child in subdir[\"children\"]:\n                    if child.get(\"directory_name\") == part:\n                        subdir = child\n                        break\n                else:\n                    new_dir = {\"directory_name\": part, \"children\": []}\n                    subdir[\"children\"].append(new_dir)\n                    subdir = new_dir\n            for file in files:\n                if file.endswith(tuple(self.include_extensions)) or file in self.key_files:\n                    subdir[\"children\"].append({\"file_name\": file})\n        return tree\n\n    def extract_imports(self, content, extension):\n        patterns = {\n            \".py\": r\"^\\s*(?:import|from)\\s+([\\w\\.]+)\",\n            \".js\": r\"^\\s*import\\s+.*?\\s+from\\s+['\\\"]([\\w\\-\\/]+)['\\\"]\",\n            \".java\": r\"^\\s*import\\s+([\\w\\.]+)\",\n            \".cpp\": r\"^\\s*#\\s*include\\s*<([\\w\\.\\/]+)>\",\n            \".c\": r\"^\\s*#\\s*include\\s*<([\\w\\.\\/]+)>\",\n            \".cs\": r\"^\\s*using\\s+([\\w\\.]+)\",\n            \".rb\": r\"^\\s*require\\s+['\\\"]([\\w\\/]+)['\\\"]\",\n            \".php\": r\"^\\s*use\\s+([\\w\\\\]+)\",\n            \".go\": r\"^\\s*import\\s+['\\\"]([\\w\\/]+)['\\\"]\",\n            \".rs\": r\"^\\s*extern\\s+crate\\s+([\\w_]+)\",\n            \".dart\": r\"^\\s*import\\s+['\\\"]([\\w\\/]+)['\\\"]\",\n            \".ts\": r\"^\\s*import\\s+.*?\\s+from\\s+['\\\"]([\\w\\-\\/]+)['\\\"]\",\n            \".swift\": r\"^\\s*import\\s+([\\w]+)\",\n            \".kt\": r\"^\\s*import\\s+([\\w\\.]+)\"\n        }\n\n        pattern = patterns.get(extension)\n        if not pattern:\n            return []\n\n        regex = re.compile(pattern, re.MULTILINE)\n        matches = regex.findall(content)\n        for match in matches:\n            self.imports[match] += 1\n        return matches\n\n    def generate_context_file(self):\n        print(f\"Generating context file: {self.output_file}\")\n        project_data = {\n            'project_name': self.project_name,\n            'programming_language': '',  # Will be detected later\n            'project_tree_structure': self.build_tree_structure(self.root_dir),\n            'project_sources': [],\n            'external_libraries': [],\n            'observations': []\n        }\n\n        for root, dirs, files in os.walk(self.root_dir, topdown=True):\n            dirs[:] = self.exclude_directories(dirs)\n            if files:\n                for file in files:\n                    file_path = os.path.join(root, file)\n                    relative_file_path = os.path.relpath(file_path, self.root_dir)\n                    if (\n                        (file.endswith(tuple(self.include_extensions)) or file in self.key_files) and\n                        file not in self.avoid_files and\n                        relative_file_path not in self.avoid_files\n                    ):\n                        try:\n                            with open(file_path, 'r', encoding='utf-8') as f_in:\n                                content = f_in.read()\n                                file_info = os.stat(file_path)\n                                source_data = {\n                                    'file': {\n                                        'File': file,\n                                        'Full Path': file_path,\n                                        'Relative Path': relative_file_path,\n                                        'Size': file_info.st_size,\n                                        'Last Modified': datetime.fromtimestamp(file_info.st_mtime).strftime('%Y-%m-%d %H:%M:%S'),\n                                        'Lines': len(content.splitlines()),\n                                        'Source_Code': content\n                                    }\n                                }\n                                project_data['project_sources'].append(source_data)\n\n                                extension = os.path.splitext(file)[1]\n                                self.extract_imports(content, extension)\n\n                                # Detect programming language\n                                if not self.detected_language:\n                                    self.detected_language = self.detect_programming_language(file)\n\n                        except UnicodeDecodeError as e:\n                            print(f\"Skipping file {file_path} due to decoding error: {e}\")\n                        except Exception as e:\n                            print(f\"Skipping file {file_path} due to an unexpected error: {e}\")\n\n        project_data['programming_language'] = self.detected_language or 'unknown'\n        project_data['external_libraries'] = [{\"import_name\": imp, \"count\": count} for imp, count in self.imports.items()]\n\n        if not self.imports:\n            project_data['observations'].append(\"No external libraries or imports were detected in the source code.\")\n\n        # Ensure the output directory exists\n        output_dir = os.path.dirname(self.output_file)\n        os.makedirs(output_dir, exist_ok=True)\n\n        with open(self.output_file, 'w', encoding='utf-8') as f_out:\n            json.dump(project_data, f_out, indent=4)\n\n        os.chmod(self.output_file, 0o666)\n        print(f\"Context file generated at: {self.output_file}\")\n\n    def split_file(self, file_path, num_chunks=None, chunk_size=None):\n        output_dir = f\"{os.path.splitext(file_path)[0]}_parts\"\n        os.makedirs(output_dir, exist_ok=True)\n        print(f\"Splitting file {file_path} into parts in directory {output_dir}\")\n\n        with open(file_path, 'r', encoding='utf-8') as f:\n            content = f.read()\n\n        if num_chunks:\n            chunk_size = len(content) // num_chunks + (len(content) % num_chunks > 0)\n\n        chunk_size = chunk_size or len(content)\n        part_num = 0\n\n        for i in range(0, len(content), chunk_size):\n            part_filename = os.path.join(output_dir, f\"{os.path.basename(file_path)}.part{part_num}\")\n            with open(part_filename, 'w', encoding='utf-8') as part_file:\n                part_file.write(content[i:i + chunk_size])\n            os.chmod(part_filename, 0o666)\n            print(f\"Created part file: {part_filename}\")\n            part_num += 1\n\n        new_output_file_path = os.path.join(output_dir, os.path.basename(file_path))\n        os.rename(file_path, new_output_file_path)\n        os.chmod(new_output_file_path, 0o666)\n        print(f\"Moved original context file to: {new_output_file_path}\")\n\n        return output_dir\n\n\n# Common folders to avoid\nCOMMON_AVOID_FOLDERS = [\n    \"node_modules\", \"venv\", \"env\", \"__pycache__\", \"site-packages\", \"myenv\",\n    \"target\", \"bin\", \"build\", \"obj\", \"vendor\", \".next\",\"worktwins_env\", \"font\", \"animations\", \"package-lock\",\"worktwins\",\"com_worktwins_data_github\",\"com_worktwins_data_gitlab\",\"com_worktwins_data_tmp\",\n]\n\n# Common files to avoid\nCOMMON_AVOID_FILES = [\n    \"package-lock.json\",\n    \"yarn.lock\",\n    \"pnpm-lock.yaml\",\n    \"Cargo.lock\",\n    \"Pipfile.lock\",\n    \"composer.lock\",\n    \".DS_Store\",\n    \"thumbs.db\",\n    \"Thumbs.db\",\n    \"npm-debug.log\",\n    \"yarn-error.log\",\n    \"Dockerfile\",\n    \"docker-compose.yml\",\n    \".env\",\n    \".gitignore\",\n    \".gitattributes\",\n    \"Makefile\"\n]\n\ndef main(\n    root_dir='.',\n    additional_avoid_folders=[],\n    additional_avoid_files=[],\n    output_file='snapshot.context',\n    output_folder='./context',\n    compress=0,\n    amount_of_chunks=10,\n    size_of_chunk=None\n):\n    # Combine common avoid folders with additional avoid folders\n    avoid_folders = COMMON_AVOID_FOLDERS + additional_avoid_folders\n\n    # Combine common avoid files with additional avoid files\n    avoid_files = COMMON_AVOID_FILES + additional_avoid_files\n    avoid_files_set = set(avoid_files)\n\n    # Create a temporary instance of SnapshotGenerator to access the language_extensions\n    temp_config = {\n        \"root_dir\": root_dir,\n        \"avoid_folders\": avoid_folders,\n        \"avoid_files\": avoid_files_set,\n        \"include_extensions\": [],\n        \"key_files\": [],\n        \"output_file\": \"\",\n        \"compress\": 0,\n        \"amount_of_chunks\": 0,\n        \"size_of_chunk\": 0,\n    }\n    temp_generator = SnapshotGenerator(temp_config)\n    language_extensions = set()\n    for extensions in temp_generator.language_extensions.values():\n        language_extensions.update(extensions)\n\n    # Get current timestamp in the format '-YYYYMMDDHHMMSS'\n    timestamp = datetime.now().strftime(\"-%Y%m%d%H%M%S\")\n\n    # Append the timestamp to the output file name\n    output_file_with_timestamp = f\"{os.path.splitext(output_file)[0]}{timestamp}{os.path.splitext(output_file)[1]}\"\n\n    # Ensure the output folder exists\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder, exist_ok=True)\n\n    # Adjust the output file path to be within the output folder\n    output_file_with_timestamp = os.path.join(output_folder, os.path.basename(output_file_with_timestamp))\n\n    config = {\n        \"root_dir\": root_dir,\n        \"avoid_folders\": avoid_folders,\n        \"avoid_files\": avoid_files_set,\n        \"include_extensions\": list(language_extensions),\n        \"key_files\": temp_generator.key_files,  # Using existing key files from the class\n        \"output_file\": output_file_with_timestamp,\n        \"compress\": compress,\n        \"amount_of_chunks\": amount_of_chunks,\n        \"size_of_chunk\": size_of_chunk,\n    }\n\n    generator = SnapshotGenerator(config)\n    generator.generate_context_file()\n\n    if compress:\n        if amount_of_chunks:\n            parts_dir = generator.split_file(output_file_with_timestamp, num_chunks=amount_of_chunks)\n        elif size_of_chunk:\n            parts_dir = generator.split_file(output_file_with_timestamp, chunk_size=size_of_chunk)\n\n        # Move the parts directory to the output folder if necessary\n        new_parts_dir = os.path.join(output_folder, os.path.basename(parts_dir))\n        parts_dir_abs = os.path.abspath(parts_dir)\n        new_parts_dir_abs = os.path.abspath(new_parts_dir)\n\n        if parts_dir_abs != new_parts_dir_abs:\n            if os.path.exists(new_parts_dir):\n                # Remove the existing directory before moving\n                shutil.rmtree(new_parts_dir)\n            os.rename(parts_dir, new_parts_dir)\n            print(f\"Parts directory moved to: {new_parts_dir}\")\n        else:\n            print(f\"Parts directory is already in the output folder: {new_parts_dir}\")\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Generate a single context for a project.\")\n    parser.add_argument(\"--root_dir\", required=False, default=os.getcwd(), help=\"Root directory of the project to scan (default: current working directory)\")\n    parser.add_argument(\"--output_file\", required=False, default=\"snapshot.context\", help=\"Output file for the snapshot (default: snapshot.context in the current working directory)\")\n    parser.add_argument(\"--output_folder\", required=False, default=\"./context\", help=\"Output folder for the parts directory (default: ./context)\")\n    parser.add_argument(\"--additional-avoid-folders\", required=False, default=\"\", help=\"Comma-separated list of additional folders to avoid\")\n    parser.add_argument(\"--additional-avoid-files\", required=False, default=\"\", help=\"Comma-separated list of additional files to avoid\")\n    parser.add_argument(\"--compress\", type=int, choices=[0, 1], default=1, help=\"Whether to compress the output (0 or 1, default: 1)\")\n    parser.add_argument(\"--amount-of-chunks\", type=int, default=10, help=\"Number of chunks to split the file into (default: 10)\")\n    parser.add_argument(\"--size-of-chunk\", type=int, help=\"Size of each chunk in bytes\")\n\n    args = parser.parse_args()\n\n    main(\n        root_dir=args.root_dir,\n        additional_avoid_folders=args.additional_avoid_folders.split(',') if args.additional_avoid_folders else [],\n        additional_avoid_files=args.additional_avoid_files.split(',') if args.additional_avoid_files else [],\n        output_file=args.output_file,\n        output_folder=args.output_folder,\n        compress=args.compress,\n        amount_of_chunks=args.amount_of_chunks,\n        size_of_chunk=args.size_of_chunk\n    )\n"
            }
        },
        {
            "file": {
                "File": "tools_gpu.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/tools_gpu.py",
                "Relative Path": "tools_gpu.py",
                "Size": 131,
                "Last Modified": "2024-11-18 23:16:37",
                "Lines": 3,
                "Source_Code": "import torch\nprint(torch.cuda.is_available())  # Should return True\nprint(torch.cuda.get_device_name(0))  # Displays your GPU name\n"
            }
        },
        {
            "file": {
                "File": "download_tutorial_html.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/download_tutorial_html.py",
                "Relative Path": "download_tutorial_html.py",
                "Size": 5397,
                "Last Modified": "2024-11-23 12:26:10",
                "Lines": 145,
                "Source_Code": "import fitz  # PyMuPDF\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\nimport json\nimport os\n\n# Paths\nPDF_PATH = \"com_worktwins_data/books_pdf/Scott Chacon - Pro Git.pdf\"\nEXTRACTED_TEXT_PATH = \"git1.txt\"\nKNOWLEDGE_HOOKS_OUTPUT_PATH = \"knowledgehooks.json\"\nRAW_OUTPUT_PATH = \"raw_outputs.json\"\nLLAMA_MODEL_PATH = \"/home/golden/.llama/checkpoints/Llama3.2-3B-Instruct-HF\"\nTEMP_PROGRESS_FILE = \"progress.json\"  # Temporary file to save progress\nCHUNK_SIZE = 1000  # Characters per chunk to feed into the model\n\n\ndef extract_text_from_pdf(pdf_path, output_path):\n    \"\"\"\n    Extracts text from a PDF and saves it to a text file.\n    \"\"\"\n    with fitz.open(pdf_path) as pdf:\n        text_content = []\n        for page_num in range(pdf.page_count):\n            page = pdf[page_num]\n            text = page.get_text(\"text\")\n            text_content.append(text)\n            print(f\"Extracted text from page {page_num + 1}/{pdf.page_count}\")\n\n    with open(output_path, \"w\", encoding=\"utf-8\") as output_file:\n        output_file.write(\"\\n\\n\".join(text_content))\n\n    print(f\"Text extracted and saved to {output_path}\")\n    return \"\\n\\n\".join(text_content)\n\n\ndef generate_knowledge_hooks(\n    text, model_path, output_path, raw_output_path, temp_progress_file\n):\n    \"\"\"\n    Generate knowledge hooks from the provided text using a language model.\n    \"\"\"\n    # Load tokenizer and model\n    tokenizer = AutoTokenizer.from_pretrained(model_path)\n    model = AutoModelForCausalLM.from_pretrained(model_path)\n\n    # Split the text into manageable chunks\n    def split_text_into_chunks(text, max_chunk_size=512):\n        \"\"\"\n        Split text into chunks of manageable size for the model.\n        \"\"\"\n        words = text.split()\n        chunks = []\n        current_chunk = []\n        current_length = 0\n\n        for word in words:\n            word_length = len(word) + 1  # Account for space\n            if current_length + word_length <= max_chunk_size:\n                current_chunk.append(word)\n                current_length += word_length\n            else:\n                chunks.append(\" \".join(current_chunk))\n                current_chunk = [word]\n                current_length = word_length\n\n        if current_chunk:\n            chunks.append(\" \".join(current_chunk))\n        return chunks\n\n    chunks = split_text_into_chunks(text)\n    knowledge_hooks = []\n    raw_outputs = []\n\n    # Resume progress if a temporary file exists\n    if os.path.exists(temp_progress_file):\n        with open(temp_progress_file, \"r\") as f:\n            progress_data = json.load(f)\n            start_chunk = progress_data.get(\"last_processed_chunk\", 0)\n            print(f\"Resuming from chunk {start_chunk + 1}/{len(chunks)}...\")\n    else:\n        start_chunk = 0\n        print(\"No previous progress found. Starting fresh.\")\n\n    # Process each chunk\n    for i, chunk in enumerate(chunks[start_chunk:], start=start_chunk):\n        print(f\"Processing chunk {i + 1}/{len(chunks)}...\")\n        prompt = (\n            \"Generate a JSON array of knowledge hooks from the following text. Each knowledge hook should include:\\n\"\n            \"1. 'description': A concise summary of the main idea.\\n\"\n            \"2. 'keywords': Relevant keywords.\\n\"\n            \"Format the output as a JSON array.\\n\\n\"\n            f\"Text:\\n{chunk}\"\n        )\n\n        inputs = tokenizer(prompt, return_tensors=\"pt\", truncation=True)\n        outputs = model.generate(**inputs, max_length=512, temperature=0.7, do_sample=True)\n\n        generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)\n        raw_outputs.append(generated_text)\n\n        try:\n            hooks = json.loads(generated_text)\n            if isinstance(hooks, list):\n                knowledge_hooks.extend(hooks)\n            else:\n                print(f\"Chunk {i + 1} did not generate a valid JSON array. Skipping...\")\n        except json.JSONDecodeError:\n            print(f\"Chunk {i + 1} generated invalid JSON. Skipping...\")\n\n        # Save progress to the temporary file\n        with open(temp_progress_file, \"w\") as f:\n            json.dump({\"last_processed_chunk\": i}, f)\n\n    # Save final outputs and remove the temporary progress file\n    with open(output_path, \"w\") as f:\n        json.dump(knowledge_hooks, f, indent=4)\n\n    with open(raw_output_path, \"w\") as f:\n        json.dump(raw_outputs, f, indent=4)\n\n    print(f\"Knowledge hooks saved to {output_path}\")\n    print(f\"Raw model outputs saved to {raw_output_path}\")\n\n    if os.path.exists(temp_progress_file):\n        os.remove(temp_progress_file)  # Clean up after completion\n        print(f\"Temporary progress file {temp_progress_file} removed.\")\n\n\nif __name__ == \"__main__\":\n    # Step 1: Extract text or load existing text file\n    if not os.path.exists(EXTRACTED_TEXT_PATH):\n        print(f\"File {EXTRACTED_TEXT_PATH} not found. Extracting text from the PDF...\")\n        extracted_text = extract_text_from_pdf(PDF_PATH, EXTRACTED_TEXT_PATH)\n    else:\n        print(f\"Found existing {EXTRACTED_TEXT_PATH}. Skipping text extraction.\")\n        with open(EXTRACTED_TEXT_PATH, \"r\", encoding=\"utf-8\") as f:\n            extracted_text = f.read()\n\n    # Step 2: Generate knowledge hooks from the extracted text\n    generate_knowledge_hooks(\n        extracted_text,\n        LLAMA_MODEL_PATH,\n        KNOWLEDGE_HOOKS_OUTPUT_PATH,\n        RAW_OUTPUT_PATH,\n        TEMP_PROGRESS_FILE,\n    )\n"
            }
        },
        {
            "file": {
                "File": "html_to_text.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/html_to_text.py",
                "Relative Path": "html_to_text.py",
                "Size": 3442,
                "Last Modified": "2024-11-04 12:53:31",
                "Lines": 98,
                "Source_Code": "import os\nimport subprocess\nimport requests\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin, urlparse\nimport re\n\ndef is_valid_url(url):\n    parsed = urlparse(url)\n    return bool(parsed.netloc) and bool(parsed.scheme)\n\ndef is_web_page(url):\n    # Only allow specific web extensions\n    web_extensions = ('.html', '.htm', '.php', '/')\n    return url.endswith(web_extensions) or '?' in url\n\ndef fetch_links(url, base_domain):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        links = set()\n        for a_tag in soup.find_all('a', href=True):\n            href = a_tag['href']\n            full_url = urljoin(url, href)\n            # Ensure the URL is valid, is a web page, and stays within the same domain\n            if is_valid_url(full_url) and is_web_page(full_url) and urlparse(full_url).netloc == base_domain:\n                links.add(full_url)\n        return links\n    except requests.RequestException as e:\n        print(f\"Error fetching {url}: {e}\")\n        return set()\n\ndef fetch_text_with_lynx(url):\n    # Check content type before fetching with lynx\n    try:\n        head_response = requests.head(url, allow_redirects=True)\n        if head_response.headers.get('Content-Type', '').startswith('text/html'):\n            result = subprocess.run(['lynx', '-dump', url], capture_output=True, text=True, check=True)\n            return result.stdout\n        else:\n            print(f\"Skipping non-HTML content: {url}\")\n            return \"\"\n    except (requests.RequestException, subprocess.CalledProcessError) as e:\n        print(f\"Error fetching text from {url}: {e}\")\n        return \"\"\n\ndef sanitize_filename(filename):\n    # Remove invalid characters for filenames\n    return re.sub(r'[\\\\/*?:\"<>|]', \"_\", filename)\n\ndef save_intermediate_text(url, text, output_dir):\n    parsed_url = urlparse(url)\n    # Create a filename based on the URL path\n    filename = f\"{parsed_url.netloc}{parsed_url.path}\".replace('/', '_').strip('_') + \".txt\"\n    filename = sanitize_filename(filename)\n    filepath = os.path.join(output_dir, filename)\n    with open(filepath, 'w', encoding='utf-8') as f:\n        f.write(text)\n    return filepath\n\ndef main():\n    initial_url = \"https://docs.python.org/3/tutorial/index.html\"\n    base_domain = urlparse(initial_url).netloc  # Extract the base domain of the initial URL\n\n    if not is_valid_url(initial_url):\n        print(\"Invalid URL. Please enter a valid URL.\")\n        return\n\n    output_dir = \"python\"\n    os.makedirs(output_dir, exist_ok=True)\n\n    visited = set()\n    to_visit = {initial_url}\n    all_text = \"\"\n\n    while to_visit:\n        current_url = to_visit.pop()\n        if current_url in visited:\n            continue\n        visited.add(current_url)\n        print(f\"Processing: {current_url}\")\n        page_text = fetch_text_with_lynx(current_url)\n        if page_text:\n            all_text += page_text + \"\\n\\n\"\n            intermediate_file = save_intermediate_text(current_url, page_text, output_dir)\n            print(f\"Saved intermediate text to {intermediate_file}\")\n        links = fetch_links(current_url, base_domain)\n        to_visit.update(links - visited)\n\n    combined_file = \"python.txt\"\n    with open(combined_file, 'w', encoding='utf-8') as f:\n        f.write(all_text)\n\n    print(f\"Combined text saved to {combined_file}\")\n\nif __name__ == \"__main__\":\n    main()\n"
            }
        },
        {
            "file": {
                "File": "initialize_environment.sh",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/initialize_environment.sh",
                "Relative Path": "initialize_environment.sh",
                "Size": 137,
                "Last Modified": "2024-11-04 15:43:54",
                "Lines": 1,
                "Source_Code": "ln -s /brainboost/brainboost_data/data_storage/storage_local/brainboost_data_storage_local_programming_books com_worktwins_data/books_pdf"
            }
        },
        {
            "file": {
                "File": "test_languages.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_test/test_languages.py",
                "Relative Path": "com_worktwins_test/test_languages.py",
                "Size": 1689,
                "Last Modified": "2024-11-04 15:27:58",
                "Lines": 42,
                "Source_Code": "import time\nimport pytest\nfrom com_worktwins_languages.Language import Language  # Replace 'your_module' with the actual module name\n\n@pytest.fixture(scope=\"module\")\ndef language_instance():\n    # Initialize the Language class with the path to your YAML file\n    yaml_file = 'com_worktwins_data/languages.yml'  # Update with the correct path\n    return Language(yaml_file)\n\ndef test_get_language_attributes(language_instance):\n    language_name = 'Python'\n    start_time = time.time()\n    attributes = language_instance.get_language_attributes(language_name)\n    end_time = time.time()\n    print(f\"Execution time for get_language_attributes: {end_time - start_time:.6f} seconds\")\n    assert attributes is not None\n    assert attributes['name'] == language_name\n\ndef test_find_by_extension(language_instance):\n    extension = '.py'\n    start_time = time.time()\n    languages = language_instance.find_by_extension(extension)\n    end_time = time.time()\n    print(f\"Execution time for find_by_extension: {end_time - start_time:.6f} seconds\")\n    assert 'Python' in languages\n\ndef test_find_by_alias(language_instance):\n    alias = 'python3'\n    start_time = time.time()\n    languages = language_instance.find_by_alias(alias)\n    end_time = time.time()\n    print(f\"Execution time for find_by_alias: {end_time - start_time:.6f} seconds\")\n    assert 'Python' in languages\n\ndef test_find_by_interpreter(language_instance):\n    interpreter = 'python3'\n    start_time = time.time()\n    languages = language_instance.find_by_interpreter(interpreter)\n    end_time = time.time()\n    print(f\"Execution time for find_by_interpreter: {end_time - start_time:.6f} seconds\")\n    assert 'Python' in languages\n"
            }
        },
        {
            "file": {
                "File": "test_model_use.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_test/test_model_use.py",
                "Relative Path": "com_worktwins_test/test_model_use.py",
                "Size": 1568,
                "Last Modified": "2024-11-18 23:46:43",
                "Lines": 43,
                "Source_Code": "import pytest\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\n@pytest.fixture\ndef model_path():\n    \"\"\"Path to the converted Hugging Face model.\"\"\"\n    return \"/home/golden/.llama/checkpoints/Llama3.2-3B-Instruct-HF\"\n\ndef test_model_load(model_path):\n    \"\"\"\n    Test if the LLaMA model and tokenizer load correctly.\n    \"\"\"\n    try:\n        model = AutoModelForCausalLM.from_pretrained(model_path)\n        tokenizer = AutoTokenizer.from_pretrained(model_path)\n        assert model is not None, \"Model failed to load\"\n        assert tokenizer is not None, \"Tokenizer failed to load\"\n        print(\"Model and tokenizer loaded successfully!\")\n    except Exception as e:\n        pytest.fail(f\"Failed to load model or tokenizer: {e}\")\n\ndef test_inference(model_path):\n    \"\"\"\n    Test if the LLaMA model can generate text given a simple prompt.\n    \"\"\"\n    try:\n        model = AutoModelForCausalLM.from_pretrained(model_path)\n        tokenizer = AutoTokenizer.from_pretrained(model_path)\n\n        # Sample input prompt\n        prompt = \"Explain the importance of version control in software development.\"\n\n        # Tokenize input\n        inputs = tokenizer(prompt, return_tensors=\"pt\")\n\n        # Generate output\n        outputs = model.generate(**inputs, max_length=50)\n        generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)\n\n        assert len(generated_text) > 0, \"Model failed to generate output\"\n        print(f\"Generated Text: {generated_text}\")\n    except Exception as e:\n        pytest.fail(f\"Model inference failed: {e}\")\n"
            }
        },
        {
            "file": {
                "File": "test_pdf_to_text.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_test/test_pdf_to_text.py",
                "Relative Path": "com_worktwins_test/test_pdf_to_text.py",
                "Size": 784,
                "Last Modified": "2024-11-25 16:29:26",
                "Lines": 32,
                "Source_Code": "import pytest\nfrom com_worktwins_data_source.PDFBook import PDFBook\n\nPDF_PATH = \"com_worktwins_data/books_pdf/Scott Chacon - Pro Git.pdf\"\n\n\n@pytest.fixture\ndef sample_pdf():\n    \"\"\"\n    Use the provided PDF for testing.\n    \"\"\"\n    return PDF_PATH\n\n\ndef test_pdfbook_initialization(sample_pdf):\n    \"\"\"\n    Test that PDFBook initializes correctly with a valid PDF file.\n    \"\"\"\n    book = PDFBook(sample_pdf)\n    assert book.text is not None\n    assert \"Git\" in book.text  # Expecting 'Git' to be present in the extracted text\n\n\n\n\ndef test_pdfbook_invalid_path():\n    \"\"\"\n    Test that PDFBook raises a FileNotFoundError when initialized with an invalid path.\n    \"\"\"\n    invalid_path = \"non_existent_file.pdf\"\n    with pytest.raises(FileNotFoundError):\n        PDFBook(invalid_path)\n"
            }
        },
        {
            "file": {
                "File": "README.md",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_test/.pytest_cache/README.md",
                "Relative Path": "com_worktwins_test/.pytest_cache/README.md",
                "Size": 302,
                "Last Modified": "2024-11-04 15:22:21",
                "Lines": 8,
                "Source_Code": "# pytest cache directory #\n\nThis directory contains data from the pytest's cache plugin,\nwhich provides the `--lf` and `--ff` options, as well as the `cache` fixture.\n\n**Do not** commit this to version control.\n\nSee [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.\n"
            }
        },
        {
            "file": {
                "File": "Language.py",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_languages/Language.py",
                "Relative Path": "com_worktwins_languages/Language.py",
                "Size": 3634,
                "Last Modified": "2024-11-28 17:15:44",
                "Lines": 106,
                "Source_Code": "import ast\nimport json\nimport pandas as pd\nimport re\nfrom pygments.lexers import guess_lexer, ClassNotFound\n\n\nclass Language:\n    @staticmethod\n    def load_json_to_dataframe(json_file):\n        \"\"\"\n        Load the JSON file into a Pandas DataFrame.\n        \"\"\"\n        with open(json_file, 'r', encoding='utf-8') as file:\n            try:\n                data = json.load(file)\n                # Convert nested dictionaries to DataFrame\n                df = pd.DataFrame.from_dict(data, orient='index')\n                # Reset index to have 'name' as a column\n                df.reset_index(inplace=True)\n                df.rename(columns={'index': 'name'}, inplace=True)\n                return df\n            except json.JSONDecodeError as e:\n                print(f\"Error loading JSON file: {e}\")\n                return pd.DataFrame()\n\n    @staticmethod\n    def get_language_attributes(df, language_name):\n        \"\"\"\n        Get attributes of a language by its name.\n        \"\"\"\n        result = df[df['name'].str.lower() == language_name.lower()]\n        if not result.empty:\n            return result.to_dict(orient='records')[0]\n        else:\n            print(f\"Language '{language_name}' not found.\")\n            return None\n\n    @staticmethod\n    def find_by_extension(df, extension):\n        \"\"\"\n        Find languages by file extension.\n        \"\"\"\n        if not extension.startswith('.'):\n            extension = f'.{extension}'\n        result = df[df['extensions'].apply(lambda x: extension in x if isinstance(x, list) else False)]\n        return result['name'].tolist()\n\n    @staticmethod\n    def find_by_alias(df, alias):\n        \"\"\"\n        Find languages by their aliases.\n        \"\"\"\n        result = df[df['aliases'].apply(lambda x: alias.lower() in [a.lower() for a in x] if isinstance(x, list) else False)]\n        return result['name'].tolist()\n\n    @staticmethod\n    def find_by_interpreter(df, interpreter):\n        \"\"\"\n        Find languages by their interpreters.\n        \"\"\"\n        result = df[df['interpreters'].apply(lambda x: interpreter.lower() in [i.lower() for i in x] if isinstance(x, list) else False)]\n        return result['name'].tolist()\n\n    @staticmethod\n    def detect_programming_language(code_block):\n        \"\"\"\n        Guess the programming language from a code block using Pygments.\n        \"\"\"\n        try:\n            lexer = guess_lexer(code_block)\n            return lexer.name.lower()  # Return the detected language name in lowercase\n        except ClassNotFound:\n            return \"unknown\"  # If Pygments cannot determine the language, return \"unknown\"\n\n    @staticmethod\n    def code_to_ast_json(code):\n        \"\"\"\n        Convert Python code to its AST and return as a JSON-compatible dictionary.\n        \"\"\"\n        try:\n            tree = ast.parse(code)\n            return Language.ast_to_dict(tree)\n        except SyntaxError as e:\n            print(f\"Syntax error in code block: {e}\")\n            return {}\n\n    @staticmethod\n    def ast_to_dict(node):\n        \"\"\"\n        Convert an AST node to a dictionary recursively.\n        \"\"\"\n        if isinstance(node, ast.AST):\n            return {key: Language.ast_to_dict(value) for key, value in ast.iter_fields(node)}\n        elif isinstance(node, list):\n            return [Language.ast_to_dict(item) for item in node]\n        else:\n            return node\n\n    @staticmethod\n    def load_languages(file_path='com_worktwins_data/languages.json'):\n        \"\"\"\n        Load programming languages data from a JSON file.\n        \"\"\"\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            return json.load(f)"
            }
        },
        {
            "file": {
                "File": "languages_improved.json",
                "Full Path": "/home/golden/Desktop/brainboost_data/data_tools/brainboost_datatools_subjective_semantizer/com_worktwins_languages/languages_improved.json",
                "Relative Path": "com_worktwins_languages/languages_improved.json",
                "Size": 110866,
                "Last Modified": "2024-11-28 14:54:54",
                "Lines": 3933,
                "Source_Code": "[\n    {\n        \"1C Enterprise\": {\n            \"type\": \"programming\",\n            \"color\": \"#814CCC\",\n            \"extensions\": [\n                \".bsl\",\n                \".os\"\n            ],\n            \"tm_scope\": \"source.bsl\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 0,\n            \"function_def\": \"procedure myProcedure;\",\n            \"import_statement\": \"use MyClass;\",\n            \"print_statement\": \"Message(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"2-Dimensional Array\": {\n            \"type\": \"data\",\n            \"color\": \"#38761D\",\n            \"extensions\": [\n                \".2da\"\n            ],\n            \"tm_scope\": \"source.2da\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 387204628\n        }\n    },\n    {\n        \"4D\": {\n            \"type\": \"programming\",\n            \"color\": \"#004289\",\n            \"extensions\": [\n                \".4dm\"\n            ],\n            \"tm_scope\": \"source.4dm\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 577529595,\n            \"function_def\": \"var myMethod;\",\n            \"import_statement\": \"import MyLibrary;\",\n            \"print_statement\": \"ALERT(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ABAP\": {\n            \"type\": \"programming\",\n            \"color\": \"#E8274B\",\n            \"extensions\": [\n                \".abap\"\n            ],\n            \"tm_scope\": \"source.abap\",\n            \"ace_mode\": \"abap\",\n            \"language_id\": 1,\n            \"function_def\": \"FORM my_form.\",\n            \"import_statement\": \"INCLUDE my_program.\",\n            \"print_statement\": \"WRITE: 'my_text'.\"\n        }\n    },\n    {\n        \"ABAP CDS\": {\n            \"type\": \"programming\",\n            \"color\": \"#555e25\",\n            \"extensions\": [\n                \".asddls\"\n            ],\n            \"tm_scope\": \"source.abapcds\",\n            \"language_id\": 452681853,\n            \"ace_mode\": \"text\",\n            \"function_def\": \"entity my_entity as select from my_table;\",\n            \"import_statement\": \"using namespace my_namespace;\",\n            \"print_statement\": \"SELECT * INTO my_table WHERE value = 'my_text'.\"\n        }\n    },\n    {\n        \"ABNF\": {\n            \"type\": \"data\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".abnf\"\n            ],\n            \"tm_scope\": \"source.abnf\",\n            \"language_id\": 429\n        }\n    },\n    {\n        \"AGS Script\": {\n            \"type\": \"programming\",\n            \"color\": \"#B9D9FF\",\n            \"aliases\": [\n                \"ags\"\n            ],\n            \"extensions\": [\n                \".asc\",\n                \".ash\"\n            ],\n            \"tm_scope\": \"source.c++\",\n            \"ace_mode\": \"c_cpp\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 2,\n            \"function_def\": \"function my_function() { }\",\n            \"import_statement\": \"import MyLibrary;\",\n            \"print_statement\": \"Display(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"AIDL\": {\n            \"type\": \"programming\",\n            \"color\": \"#34EB6B\",\n            \"tm_scope\": \"source.aidl\",\n            \"extensions\": [\n                \".aidl\"\n            ],\n            \"ace_mode\": \"text\",\n            \"interpreters\": [\n                \"aidl\"\n            ],\n            \"language_id\": 451700185,\n            \"function_def\": \"interface MyService { void my_function(); }\",\n            \"import_statement\": \"import my.library;\",\n            \"print_statement\": \"System.out.println(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"AL\": {\n            \"type\": \"programming\",\n            \"color\": \"#3AA2B5\",\n            \"extensions\": [\n                \".al\"\n            ],\n            \"tm_scope\": \"source.al\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 658971832,\n            \"function_def\": \"procedure MyProcedure;\",\n            \"import_statement\": \"codeunit MyCodeunit;\",\n            \"print_statement\": \"Message('my_text');\"\n        }\n    },\n    {\n        \"AMPL\": {\n            \"type\": \"programming\",\n            \"color\": \"#E6EFBB\",\n            \"extensions\": [\n                \".ampl\",\n                \".mod\"\n            ],\n            \"tm_scope\": \"source.ampl\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 3,\n            \"function_def\": \"function my_function; solve;\",\n            \"import_statement\": \"include my_library.mod;\",\n            \"print_statement\": \"display 'my_text';\"\n        }\n    },\n    {\n        \"ANTLR\": {\n            \"type\": \"programming\",\n            \"color\": \"#9DC3FF\",\n            \"extensions\": [\n                \".g4\"\n            ],\n            \"tm_scope\": \"source.antlr\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 4,\n            \"function_def\": \"grammar MyGrammar;\",\n            \"import_statement\": \"import MyLexer;\",\n            \"print_statement\": \"// Printing is not typically used in grammars\"\n        }\n    },\n    {\n        \"API Blueprint\": {\n            \"type\": \"markup\",\n            \"color\": \"#2ACCA8\",\n            \"ace_mode\": \"markdown\",\n            \"extensions\": [\n                \".apib\"\n            ],\n            \"tm_scope\": \"text.html.markdown.source.gfm.apib\",\n            \"language_id\": 5,\n            \"function_def\": \"# My API Function\",\n            \"import_statement\": \"FORMAT: 1A\",\n            \"print_statement\": \"// API documentation does not execute prints\"\n        }\n    },\n    {\n        \"API Blueprint\": {\n            \"type\": \"markup\",\n            \"color\": \"#2ACCA8\",\n            \"ace_mode\": \"markdown\",\n            \"extensions\": [\n                \".apib\"\n            ],\n            \"tm_scope\": \"text.html.markdown.source.gfm.apib\",\n            \"language_id\": 5,\n            \"function_def\": \"# My API Function\",\n            \"import_statement\": \"FORMAT: 1A\",\n            \"print_statement\": \"// API documentation does not execute prints\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    },\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    },\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    }\n    ,\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    },\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    }\n    ,\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    },\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    }\n    ,\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    }\n    ,\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    }\n    ,\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    },\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    }\n    ,\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Adblock Filter List\": {\n            \"type\": \"data\",\n            \"color\": \"#800000\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".txt\"\n            ],\n            \"aliases\": [\n                \"ad block filters\",\n                \"ad block\",\n                \"adb\",\n                \"adblock\"\n            ],\n            \"tm_scope\": \"text.adblock\",\n            \"language_id\": 884614762\n        }\n    },\n    {\n        \"Adobe Font Metrics\": {\n            \"type\": \"data\",\n            \"color\": \"#fa0f00\",\n            \"tm_scope\": \"source.afm\",\n            \"extensions\": [\n                \".afm\"\n            ],\n            \"aliases\": [\n                \"acfm\",\n                \"adobe composite font metrics\",\n                \"adobe multiple font metrics\",\n                \"amfm\"\n            ],\n            \"ace_mode\": \"text\",\n            \"language_id\": 147198098\n        }\n    },\n    {\n        \"Agda\": {\n            \"type\": \"programming\",\n            \"color\": \"#315665\",\n            \"extensions\": [\n                \".agda\"\n            ],\n            \"tm_scope\": \"source.agda\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 12,\n            \"function_def\": \"myFunction : A -> B -> C\",\n            \"import_statement\": \"open import MyModule\",\n            \"print_statement\": \"putStrLn \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Alloy\": {\n            \"type\": \"programming\",\n            \"color\": \"#64C800\",\n            \"extensions\": [\n                \".als\"\n            ],\n            \"tm_scope\": \"source.alloy\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 13,\n            \"function_def\": \"sig MySig { myFunction: set MyType }\",\n            \"import_statement\": \"// Alloy does not use imports\",\n            \"print_statement\": \"// Alloy is declarative and does not print\"\n        }\n    },\n    {\n        \"Alpine Abuild\": {\n            \"type\": \"programming\",\n            \"color\": \"#0D597F\",\n            \"group\": \"Shell\",\n            \"aliases\": [\n                \"abuild\",\n                \"apkbuild\"\n            ],\n            \"filenames\": [\n                \"APKBUILD\"\n            ],\n            \"tm_scope\": \"source.shell\",\n            \"ace_mode\": \"sh\",\n            \"codemirror_mode\": \"shell\",\n            \"codemirror_mime_type\": \"text/x-sh\",\n            \"language_id\": 14,\n            \"function_def\": \"my_function() { ... }\",\n            \"import_statement\": \". my_library.sh\",\n            \"print_statement\": \"echo \\\"my_text\\\"\"\n        }\n    },\n    {\n        \"Altium Designer\": {\n            \"type\": \"data\",\n            \"color\": \"#A89663\",\n            \"aliases\": [\n                \"altium\"\n            ],\n            \"extensions\": [\n                \".OutJob\",\n                \".PcbDoc\",\n                \".PrjPCB\",\n                \".SchDoc\"\n            ],\n            \"tm_scope\": \"source.ini\",\n            \"ace_mode\": \"ini\",\n            \"language_id\": 187772328\n        }\n    },\n    {\n        \"AngelScript\": {\n            \"type\": \"programming\",\n            \"color\": \"#C7D7DC\",\n            \"extensions\": [\n                \".as\",\n                \".angelscript\"\n            ],\n            \"tm_scope\": \"source.angelscript\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-c++src\",\n            \"language_id\": 389477596,\n            \"function_def\": \"void myFunction() { }\",\n            \"import_statement\": \"import void myFunction() from \\\"myLibrary\\\";\",\n            \"print_statement\": \"Print(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ant Build System\": {\n            \"type\": \"data\",\n            \"color\": \"#A9157E\",\n            \"tm_scope\": \"text.xml.ant\",\n            \"filenames\": [\n                \"ant.xml\",\n                \"build.xml\"\n            ],\n            \"ace_mode\": \"xml\",\n            \"codemirror_mode\": \"xml\",\n            \"codemirror_mime_type\": \"application/xml\",\n            \"language_id\": 15\n        }\n    }\n\n    ,\n    {\n        \"Antlers\": {\n            \"type\": \"markup\",\n            \"color\": \"#ff269e\",\n            \"extensions\": [\n                \".antlers.html\",\n                \".antlers.php\",\n                \".antlers.xml\"\n            ],\n            \"tm_scope\": \"text.html.statamic\",\n            \"ace_mode\": \"text\",\n            \"language_id\": 1067292663,\n            \"function_def\": \"{{ my_function() }}\",\n            \"import_statement\": \"// Antlers does not use imports\",\n            \"print_statement\": \"{{ 'my_text' }}\"\n        }\n    },\n    {\n        \"ApacheConf\": {\n            \"type\": \"data\",\n            \"color\": \"#d12127\",\n            \"aliases\": [\n                \"aconf\",\n                \"apache\"\n            ],\n            \"extensions\": [\n                \".apacheconf\",\n                \".vhost\"\n            ],\n            \"filenames\": [\n                \".htaccess\",\n                \"apache2.conf\",\n                \"httpd.conf\"\n            ],\n            \"tm_scope\": \"source.apache-config\",\n            \"ace_mode\": \"apache_conf\",\n            \"language_id\": 16,\n            \"function_def\": \"# Functions not applicable in config files\",\n            \"import_statement\": \"Include my_config.conf\",\n            \"print_statement\": \"# Directives output information\"\n        }\n    },\n    {\n        \"Apex\": {\n            \"type\": \"programming\",\n            \"color\": \"#1797c0\",\n            \"extensions\": [\n                \".cls\",\n                \".trigger\"\n            ],\n            \"tm_scope\": \"source.apex\",\n            \"ace_mode\": \"java\",\n            \"codemirror_mode\": \"clike\",\n            \"codemirror_mime_type\": \"text/x-java\",\n            \"language_id\": 17,\n            \"function_def\": \"public void myFunction() { }\",\n            \"import_statement\": \"import MyNamespace.MyClass;\",\n            \"print_statement\": \"System.debug('my_text');\"\n        }\n    },\n    {\n        \"APL\": {\n            \"type\": \"programming\",\n            \"color\": \"#5A8164\",\n            \"extensions\": [\n                \".apl\",\n                \".dyalog\"\n            ],\n            \"interpreters\": [\n                \"apl\",\n                \"aplx\",\n                \"dyalog\"\n            ],\n            \"tm_scope\": \"source.apl\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"apl\",\n            \"codemirror_mime_type\": \"text/apl\",\n            \"language_id\": 6,\n            \"function_def\": \"{ \u2375 \u2190 \u2375 \u00d7 2 }\",\n            \"import_statement\": \"\u2395FIO[1]\u2190'my_library'\",\n            \"print_statement\": \"'my_text'\"\n        }\n    },\n    {\n        \"ASL\": {\n            \"type\": \"programming\",\n            \"ace_mode\": \"text\",\n            \"extensions\": [\n                \".asl\",\n                \".dsl\"\n            ],\n            \"tm_scope\": \"source.asl\",\n            \"language_id\": 124996147,\n            \"function_def\": \"Method myMethod;\",\n            \"import_statement\": \"Include myScript;\",\n            \"print_statement\": \"Output('my_text');\"\n        }\n    },\n    {\n        \"ASN.1\": {\n            \"type\": \"data\",\n            \"extensions\": [\n                \".asn\",\n                \".asn1\"\n            ],\n            \"tm_scope\": \"source.asn\",\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"asn.1\",\n            \"codemirror_mime_type\": \"text/x-ttcn-asn\",\n            \"language_id\": 7,\n            \"function_def\": \"Module MyModule DEFINITIONS ::= BEGIN ... END\",\n            \"import_statement\": \"IMPORTS MyType FROM MyLibrary;\",\n            \"print_statement\": \"// ASN.1 is used for schema definitions, not printing\"\n        }\n    },\n    {\n        \"ASP.NET\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"text.html.asp\",\n            \"color\": \"#9400ff\",\n            \"aliases\": [\n                \"aspx\",\n                \"aspx-vb\"\n            ],\n            \"extensions\": [\n                \".asax\",\n                \".ascx\",\n                \".ashx\",\n                \".asmx\",\n                \".aspx\",\n                \".axd\"\n            ],\n            \"ace_mode\": \"text\",\n            \"codemirror_mode\": \"htmlembedded\",\n            \"codemirror_mime_type\": \"application/x-aspx\",\n            \"language_id\": 564186416,\n            \"function_def\": \"<script runat=\\\"server\\\"> void myFunction() { }</script>\",\n            \"import_statement\": \"using MyNamespace;\",\n            \"print_statement\": \"Response.Write(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"ATS\": {\n            \"type\": \"programming\",\n            \"color\": \"#1ac620\",\n            \"aliases\": [\n                \"ats2\"\n            ],\n            \"extensions\": [\n                \".dats\",\n                \".hats\",\n                \".sats\"\n            ],\n            \"tm_scope\": \"source.ats\",\n            \"ace_mode\": \"ocaml\",\n            \"language_id\": 9,\n            \"function_def\": \"fun myFunction(): void = { ... }\",\n            \"import_statement\": \"staload \\\"my_library.sats\\\"\",\n            \"print_statement\": \"print(\\\"my_text\\\")\"\n        }\n    },\n    {\n        \"ActionScript\": {\n            \"type\": \"programming\",\n            \"tm_scope\": \"source.actionscript.3\",\n            \"color\": \"#882B0F\",\n            \"aliases\": [\n                \"actionscript 3\",\n                \"actionscript3\",\n                \"as3\"\n            ],\n            \"extensions\": [\n                \".as\"\n            ],\n            \"ace_mode\": \"actionscript\",\n            \"language_id\": 10,\n            \"function_def\": \"function myFunction(): void { }\",\n            \"import_statement\": \"import MyPackage.*;\",\n            \"print_statement\": \"trace(\\\"my_text\\\");\"\n        }\n    },\n    {\n        \"Ada\": {\n            \"type\": \"programming\",\n            \"color\": \"#02f88c\",\n            \"extensions\": [\n                \".adb\",\n                \".ada\",\n                \".ads\"\n            ],\n            \"aliases\": [\n                \"ada95\",\n                \"ada2005\"\n            ],\n            \"tm_scope\": \"source.ada\",\n            \"ace_mode\": \"ada\",\n            \"language_id\": 11,\n            \"function_def\": \"procedure My_Procedure is begin null; end My_Procedure;\",\n            \"import_statement\": \"with My_Package;\",\n            \"print_statement\": \"Put_Line(\\\"my_text\\\");\"\n        }\n    }\n    ,\n{\n    \"Adblock Filter List\": {\n        \"type\": \"data\",\n        \"color\": \"#800000\",\n        \"ace_mode\": \"text\",\n        \"extensions\": [\n            \".txt\"\n        ],\n        \"aliases\": [\n            \"ad block filters\",\n            \"ad block\",\n            \"adb\",\n            \"adblock\"\n        ],\n        \"tm_scope\": \"text.adblock\",\n        \"language_id\": 884614762\n    }\n},\n{\n    \"Adobe Font Metrics\": {\n        \"type\": \"data\",\n        \"color\": \"#fa0f00\",\n        \"tm_scope\": \"source.afm\",\n        \"extensions\": [\n            \".afm\"\n        ],\n        \"aliases\": [\n            \"acfm\",\n           