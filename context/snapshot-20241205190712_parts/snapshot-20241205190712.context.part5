ty + \\n          humidityDirection * rand.nextFloat();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"622bbc158020099dc0d826d7f423bce4\",\n        \"type\": \"source_code\",\n        \"text\": \"// Calendar must be cloned, otherwise all \\n        // DataPoints hold references to the same lastTime. \\n        // For a basic object like Calendar, clone() is OK. \\n        data.add(new DataPoint((Calendar)lastTime.clone(), \\n          lastTemp, lastHumidity)); \\n      } \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a22d0eec8d1671650e05dbe9b2229119\",\n        \"type\": \"source_code\",\n        \"text\": \"GreenhouseScheduler gh = new GreenhouseScheduler(); \\n    gh.schedule(gh.new Terminate(), 5000); \\n    // Former \\\"Restart\\\" class not necessary: \\n    gh.repeat(gh.new Bell(), 0, 1000); \\n    gh.repeat(gh.new ThermostatNight(), 0, 2000); \\n    gh.repeat(gh.new LightOn(), 0, 200); \\n    gh.repeat(gh.new LightOff(), 0, 400); \\n    gh.repeat(gh.new WaterOn(), 0, 600); \\n    gh.repeat(gh.new WaterOff(), 0, 800); \\n    gh.repeat(gh.new ThermostatDay(), 0, 1400); \\n    gh.repeat(gh.new CollectData(), 500, 500);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9045ffe84c064f830f8213a94c5b438c\",\n        \"type\": \"source_code\",\n        \"text\": \"this.size = size; \\n    checkedOut = new boolean[size]; \\n    available = new Semaphore(size, true); \\n    // Load pool with objects that can be checked out: \\n    for(int i = 0; i < size; ++i) \\n      try { \\n        // Assumes a default constructor: \\n        items.add(classObject.newInstance()); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"050465bb9f61f2ddc6874732ebe2c017\",\n        \"type\": \"source_code\",\n        \"text\": \"available.acquire(); \\n    return getItem();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5d5b322fbc9dddfc8b17a58f312ac48\",\n        \"type\": \"source_code\",\n        \"text\": \"if(releaseItem(x)) \\n      available.release();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c53bb68a50387472b039f5edf49a49c6\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < size; ++i) \\n      if(!checkedOut[i]) { \\n        checkedOut[i] = true; \\n        return items.get(i); \\n      } \\n    return null; // Semaphore prevents reaching here\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9740b0f65a325065c2152830dd573fd0\",\n        \"type\": \"source_code\",\n        \"text\": \"int index = items.indexOf(item); \\n    if(index == -1) return false; // Not in the list \\n    if(checkedOut[index]) { \\n      checkedOut[index] = false; \\n      return true; \\n    } \\n    return false; // Wasn\\u2019t checked out\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e3f50b316c1c3b1630595d228177cc6\",\n        \"type\": \"source_code\",\n        \"text\": \"// Expensive, interruptible operation: \\n    for(int i = 1; i < 10000; i++) { \\n      d += (Math.PI + Math.E) / (double)i; \\n    }\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"01d54da70bb133b26b44491a43cbeae7\",\n        \"type\": \"source_code\",\n        \"text\": \"this.pool = pool;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"85bb85c1b1bc7096672250cbba204292\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      T item = pool.checkOut(); \\n      print(this + \\\"checked out \\\" + item); \\n      TimeUnit.SECONDS.sleep(1); \\n      print(this +\\\"checking in \\\" + item); \\n      pool.checkIn(item); \\n    } catch(InterruptedException e) { \\n      // Acceptable way to terminate \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7039b29bb1f56388fb3ee92caab97872\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"CheckoutTask \\\" + id + \\\" \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"45707effac40329836eee90eae66b459\",\n        \"type\": \"source_code\",\n        \"text\": \"final Pool<Fat> pool = \\n      new Pool<Fat>(Fat.class, SIZE); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < SIZE; i++) \\n      exec.execute(new CheckoutTask<Fat>(pool)); \\n    print(\\\"All CheckoutTasks created\\\"); \\n    List<Fat> list = new ArrayList<Fat>(); \\n    for(int i = 0; i < SIZE; i++) { \\n      Fat f = pool.checkOut(); \\n      printnb(i + \\\": main() thread checked out \\\"); \\n      f.operation(); \\n      list.add(f); \\n    } \\n    Future<?> blocked = exec.submit(new Runnable() { \\n      public void run() { \\n        try {\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"df2495da1922d984db09b8fa08456478\",\n        \"type\": \"source_code\",\n        \"text\": \"// Semaphore prevents additional checkout, \\n          // so call is blocked: \\n          pool.checkOut(); \\n        } catch(InterruptedException e) { \\n          print(\\\"checkOut() Interrupted\\\"); \\n        } \\n      } \\n    }); \\n    TimeUnit.SECONDS.sleep(2); \\n    blocked.cancel(true); // Break out of blocked call \\n    print(\\\"Checking in objects in \\\" + list); \\n    for(Fat f : list) \\n      pool.checkIn(f); \\n    for(Fat f : list) \\n      pool.checkIn(f); // Second checkIn ignored \\n    exec.shutdown();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42022eda712b2a6538f2260539a72a0b\",\n        \"type\": \"source_code\",\n        \"text\": \"exchanger = exchg;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57e8aa45ee8423c9f0a3499408037946\",\n        \"type\": \"source_code\",\n        \"text\": \"generator = gen; \\n    this.holder = holder;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bff42c50924e60989f5e6f8823d2982a\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        for(int i = 0; i < ExchangerDemo.size; i++) \\n          holder.add(generator.next()); \\n        // Exchange full for empty: \\n        holder = exchanger.exchange(holder); \\n      } \\n    } catch(InterruptedException e) { \\n      // OK to terminate this way. \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecf9550fd87af399777c33d5db65fba8\",\n        \"type\": \"source_code\",\n        \"text\": \"exchanger = ex; \\n    this.holder = holder;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f5d2b5046d46660b842ca93b0187922c\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        holder = exchanger.exchange(holder); \\n        for(T x : holder) { \\n          value = x; // Fetch out value \\n          holder.remove(x); // OK for CopyOnWriteArrayList \\n        } \\n      } \\n    } catch(InterruptedException e) { \\n      // OK to terminate this way. \\n    } \\n    System.out.println(\\\"Final value: \\\" + value);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff987a0a56c1ef3cdca2419cb5f09582\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) \\n      size = new Integer(args[0]); \\n    if(args.length > 1) \\n      delay = new Integer(args[1]); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    Exchanger<List<Fat>> xc = new Exchanger<List<Fat>>(); \\n    List<Fat> \\n      producerList = new CopyOnWriteArrayList<Fat>(), \\n      consumerList = new CopyOnWriteArrayList<Fat>(); \\n    exec.execute(new ExchangerProducer<Fat>(xc, \\n      BasicGenerator.create(Fat.class), producerList)); \\n    exec.execute( \\n      new ExchangerConsumer<Fat>(xc,consumerList)); \\n    TimeUnit.SECONDS.sleep(delay); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64f88112347e181a5ddbbc0a32095721\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"[\\\" + serviceTime + \\\"]\\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbb5230d13ebe13717246cee36d19f3b\",\n        \"type\": \"source_code\",\n        \"text\": \"super(maxLineSize);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4e70e0bc05ea6c57d922a0de71de458c\",\n        \"type\": \"source_code\",\n        \"text\": \"if(this.size() == 0) \\n      return \\\"[Empty]\\\"; \\n    StringBuilder result = new StringBuilder(); \\n    for(Customer customer : this) \\n      result.append(customer); \\n    return result.toString();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"371ab31b31d992625a2651d1733184ab\",\n        \"type\": \"source_code\",\n        \"text\": \"customers = cq;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e1c43c214f517a5eccfd3b9f14d9ff13\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        TimeUnit.MILLISECONDS.sleep(rand.nextInt(300)); \\n        customers.put(new Customer(rand.nextInt(1000))); \\n      } \\n    } catch(InterruptedException e) { \\n      System.out.println(\\\"CustomerGenerator interrupted\\\"); \\n    } \\n    System.out.println(\\\"CustomerGenerator terminating\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4e312d4153f8757c542d170862e3b3e8\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        Customer customer = customers.take(); \\n        TimeUnit.MILLISECONDS.sleep( \\n          customer.getServiceTime()); \\n        synchronized(this) { \\n          customersServed++; \\n          while(!servingCustomerLine) \\n            wait(); \\n        } \\n      } \\n    } catch(InterruptedException e) { \\n      System.out.println(this + \\\"interrupted\\\"); \\n    } \\n    System.out.println(this + \\\"terminating\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"041af52ddb8069bb179b63407da333ae\",\n        \"type\": \"source_code\",\n        \"text\": \"customersServed = 0; \\n    servingCustomerLine = false;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"624618b378a8cdd5df71ed29f81ab606\",\n        \"type\": \"source_code\",\n        \"text\": \"assert !servingCustomerLine:\\\"already serving: \\\" + this; \\n    servingCustomerLine = true; \\n    notifyAll();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0add99a07c86929a625d56bae207f8b4\",\n        \"type\": \"source_code\",\n        \"text\": \"return customersServed < other.customersServed ? -1 : \\n      (customersServed == other.customersServed ? 0 : 1);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd3935ad2931472319aede1f3427fb5f\",\n        \"type\": \"source_code\",\n        \"text\": \"new PriorityQueue<Teller>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0780808549326a8733e98ef20039edad\",\n        \"type\": \"source_code\",\n        \"text\": \"new LinkedList<Teller>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64f855b6f7241c15ab592bff4128f818\",\n        \"type\": \"source_code\",\n        \"text\": \"CustomerLine customers, int adjustmentPeriod) { \\n    exec = e; \\n    this.customers = customers; \\n    this.adjustmentPeriod = adjustmentPeriod; \\n    // Start with a single teller: \\n    Teller teller = new Teller(customers); \\n    exec.execute(teller); \\n    workingTellers.add(teller);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb059bb470f11c1618515d677caf6f04\",\n        \"type\": \"source_code\",\n        \"text\": \"// This is actually a control system. By adjusting \\n    // the numbers, you can reveal stability issues in \\n    // the control mechanism. \\n    // If line is too long, add another teller: \\n    if(customers.size() / workingTellers.size() > 2) { \\n        // If tellers are on break or doing \\n        // another job, bring one back: \\n        if(tellersDoingOtherThings.size() > 0) { \\n          Teller teller = tellersDoingOtherThings.remove(); \\n          teller.serveCustomerLine(); \\n          workingTellers.offer(teller); \\n          return; \\n        } \\n      // Else create (hire) a new teller \\n      Teller teller = new Teller(customers); \\n      exec.execute(teller); \\n      workingTellers.add(teller); \\n      return; \\n    } \\n    // If line is short enough, remove a teller: \\n    if(workingTellers.size() > 1 && \\n      customers.size() / workingTellers.size() < 2) \\n        reassignOneTeller(); \\n    // If there is no line, we only need one teller: \\n    if(customers.size() == 0) \\n      while(workingTellers.size() > 1) \\n        reassignOneTeller();\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"73ddc239273d10b3aa277c42d44895f1\",\n        \"type\": \"source_code\",\n        \"text\": \"Teller teller = workingTellers.poll(); \\n    teller.doSomethingElse(); \\n    tellersDoingOtherThings.offer(teller);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"86030c81bc991f57e2c977d0d1c409e9\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        TimeUnit.MILLISECONDS.sleep(adjustmentPeriod); \\n        adjustTellerNumber(); \\n        System.out.print(customers + \\\" { \\\"); \\n        for(Teller teller : workingTellers) \\n          System.out.print(teller.shortString() + \\\" \\\"); \\n        System.out.println(\\\"}\\\"); \\n      } \\n    } catch(InterruptedException e) { \\n      System.out.println(this + \\\"interrupted\\\"); \\n    } \\n    System.out.println(this + \\\"terminating\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"317d041e510912a9b813d42a01656701\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    // If line is too long, customers will leave: \\n    CustomerLine customers = \\n      new CustomerLine(MAX_LINE_SIZE); \\n    exec.execute(new CustomerGenerator(customers)); \\n    // Manager will add and remove tellers as necessary: \\n    exec.execute(new TellerManager( \\n      exec, customers, ADJUSTMENT_PERIOD)); \\n    if(args.length > 0) // Optional argument \\n      TimeUnit.SECONDS.sleep(new Integer(args[0])); \\n    else { \\n      System.out.println(\\\"Press \\u2018Enter\\u2019 to quit\\\"); \\n      System.in.read(); \\n    } \\n    exec.shutdownNow();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"78ea26c79e9364b371a9082c7dc14038\",\n        \"type\": \"source_code\",\n        \"text\": \"customer = cust; \\n    waitPerson = wp; \\n    food = f;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"829cbd91d6b69bda510fd5f1bcee5c26\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Order: \\\" + id + \\\" item: \\\" + food + \\n      \\\" for: \\\" + customer + \\n      \\\" served by: \\\" + waitPerson;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d307eb3dedb89995572fd53a5b23b36c\",\n        \"type\": \"source_code\",\n        \"text\": \"order = ord; \\n    food = f;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f909382599428ddd14b7a1f1943462af\",\n        \"type\": \"source_code\",\n        \"text\": \"new SynchronousQueue<Plate>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5c82bae1e83abb38dd7cd0654c30bae2\",\n        \"type\": \"source_code\",\n        \"text\": \"// Only blocks if customer is still \\n    // eating the previous course: \\n    placeSetting.put(p);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33a10929b959b0e863c55cd331c52842\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Course course : Course.values()) { \\n      Food food = course.randomSelection(); \\n      try { \\n        waitPerson.placeOrder(this, food); \\n        // Blocks until course has been delivered: \\n        print(this + \\\"eating \\\" + placeSetting.take()); \\n      } catch(InterruptedException e) { \\n        print(this + \\\"waiting for \\\" + \\n          course + \\\" interrupted\\\"); \\n        break; \\n      } \\n    } \\n    print(this + \\\"finished meal, leaving\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"22048b57ff08a3648026764fcea1f48a\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Customer \\\" + id + \\\" \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"797cfdafeac6c07c7fe225fe4e4aa2d3\",\n        \"type\": \"source_code\",\n        \"text\": \"new LinkedBlockingQueue<Plate>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"440ec8d196263d8b71853c45497d80ba\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      // Shouldn\\u2019t actually block because this is \\n      // a LinkedBlockingQueue with no size limit: \\n      restaurant.orders.put(new Order(cust, this, food)); \\n    } catch(InterruptedException e) { \\n      print(this + \\\" placeOrder interrupted\\\"); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c97a883b7882ba87b594902b25613994\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until a course is ready \\n        Plate plate = filledOrders.take(); \\n        print(this + \\\"received \\\" + plate + \\n          \\\" delivering to \\\" + \\n          plate.getOrder().getCustomer()); \\n        plate.getOrder().getCustomer().deliver(plate); \\n      } \\n    } catch(InterruptedException e) { \\n      print(this + \\\" interrupted\\\"); \\n    } \\n    print(this + \\\" off duty\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"15153fce6fe3ad34fa69c630efcc05b9\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"WaitPerson \\\" + id + \\\" \\\";\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e0ac9c094b74aac78c37ec2f470cd727\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until an order appears: \\n        Order order = restaurant.orders.take(); \\n        Food requestedItem = order.item(); \\n        // Time to prepare order: \\n        TimeUnit.MILLISECONDS.sleep(rand.nextInt(500)); \\n        Plate plate = new Plate(order, requestedItem); \\n        order.getWaitPerson().filledOrders.put(plate); \\n      } \\n    } catch(InterruptedException e) { \\n      print(this + \\\" interrupted\\\"); \\n    } \\n    print(this + \\\" off duty\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1d0ffe867a6d7d970c79348e036870e2\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<WaitPerson>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eaf96908bf150b9078a2ea67de83b1ee\",\n        \"type\": \"source_code\",\n        \"text\": \"orders = new LinkedBlockingQueue<Order>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7cb76451dfa580f38a430b5dd79ed288\",\n        \"type\": \"source_code\",\n        \"text\": \"int nChefs) { \\n    exec = e; \\n    for(int i = 0; i < nWaitPersons; i++) { \\n      WaitPerson waitPerson = new WaitPerson(this); \\n      waitPersons.add(waitPerson); \\n      exec.execute(waitPerson); \\n    } \\n    for(int i = 0; i < nChefs; i++) { \\n      Chef chef = new Chef(this); \\n      chefs.add(chef);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d3b3eb0b9669d0f2cd6dbdc876b110a\",\n        \"type\": \"source_code\",\n        \"text\": \"exec.execute(chef); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64d7311478e528b5296494191ec8786b\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // A new customer arrives; assign a WaitPerson: \\n        WaitPerson wp = waitPersons.get( \\n          rand.nextInt(waitPersons.size())); \\n        Customer c = new Customer(wp); \\n        exec.execute(c); \\n        TimeUnit.MILLISECONDS.sleep(100); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Restaurant interrupted\\\"); \\n    } \\n    print(\\\"Restaurant closing\\\");\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b9346daa9586ce1c2f3f0ddebc3b135c\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    Restaurant restaurant = new Restaurant(exec, 5, 2); \\n    exec.execute(restaurant); \\n    if(args.length > 0) // Optional argument \\n      TimeUnit.SECONDS.sleep(new Integer(args[0])); \\n    else { \\n      print(\\\"Press \\u2018Enter\\u2019 to quit\\\"); \\n      System.in.read(); \\n    } \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3e58e861fbfe4cf9d0d6123b3c513952\",\n        \"type\": \"source_code\",\n        \"text\": \"engine = false, driveTrain = false, wheels = false;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d0a259c2bc59371ed5f01fbfb8814797\",\n        \"type\": \"source_code\",\n        \"text\": \"driveTrain = true;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bdd87bce761dfa5802b8cd34ff960239\",\n        \"type\": \"source_code\",\n        \"text\": \"return \\\"Car \\\" + id + \\\" [\\\" + \\\" engine: \\\" + engine \\n      + \\\" driveTrain: \\\" + driveTrain \\n      + \\\" wheels: \\\" + wheels + \\\" ]\\\";\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c02ff8bc4179e9e48f2b4c7a33dd2b1\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        TimeUnit.MILLISECONDS.sleep(500); \\n        // Make chassis: \\n        Car c = new Car(counter++); \\n        print(\\\"ChassisBuilder created \\\" + c); \\n        // Insert into queue \\n        carQueue.put(c); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Interrupted: ChassisBuilder\\\"); \\n    } \\n    print(\\\"ChassisBuilder off\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b710dfcda039d7a2f78501c1722e8675\",\n        \"type\": \"source_code\",\n        \"text\": \"chassisQueue = cq; \\n    finishingQueue = fq; \\n    robotPool = rp;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d27ce9e9351a001735ec34610f4f9dd8\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        // Blocks until chassis is available: \\n        car = chassisQueue.take(); \\n        // Hire robots to perform work: \\n        robotPool.hire(EngineRobot.class, this); \\n        robotPool.hire(DriveTrainRobot.class, this); \\n        robotPool.hire(WheelRobot.class, this); \\n        barrier.await(); // Until the robots finish \\n        // Put car into finishingQueue for further work \\n        finishingQueue.put(car); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting Assembler via interrupt\\\"); \\n    } catch(BrokenBarrierException e) { \\n      // This one we want to know about \\n      throw new RuntimeException(e); \\n    } \\n    print(\\\"Assembler off\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1820609a6a1d7c432a7dd48f52c16d4e\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        print(carQueue.take()); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting Reporter via interrupt\\\"); \\n    } \\n    print(\\\"Reporter off\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5f22779b8bbe157c96655a8bbcd410c\",\n        \"type\": \"source_code\",\n        \"text\": \"this.assembler = assembler; \\n    return this;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a44ad6ca642af81fc584c582122a1960\",\n        \"type\": \"source_code\",\n        \"text\": \"engage = true; \\n    notifyAll();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42857719988a08c9d24a9c40c81038c6\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      powerDown(); // Wait until needed\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8a787bccdcf5476444d5506e9bf804d3\",\n        \"type\": \"source_code\",\n        \"text\": \"while(!Thread.interrupted()) { \\n        performService(); \\n        assembler.barrier().await(); // Synchronize \\n        // We\\u2019re done with that job... \\n        powerDown(); \\n      } \\n    } catch(InterruptedException e) { \\n      print(\\\"Exiting \\\" + this + \\\" via interrupt\\\"); \\n    } catch(BrokenBarrierException e) { \\n      // This one we want to know about \\n      throw new RuntimeException(e); \\n    } \\n    print(this + \\\" off\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"190c210a4b987aabc08a3ac98c565634\",\n        \"type\": \"source_code\",\n        \"text\": \"engage = false; \\n    assembler = null; // Disconnect from the Assembler \\n    // Put ourselves back in the available pool: \\n    pool.release(this); \\n    while(engage == false)  // Power down \\n      wait();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af63721faee3c16e540d809d4bcff45b\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\" installing engine\\\"); \\n    assembler.car().addEngine();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e138a94b87082eb6d349eed4a936796\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\" installing DriveTrain\\\"); \\n    assembler.car().addDriveTrain();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d586158f85d4beaef0da46cc0b638f27\",\n        \"type\": \"source_code\",\n        \"text\": \"print(this + \\\" installing Wheels\\\"); \\n    assembler.car().addWheels();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40535d1f65316e194d2ad8bc31bb84d9\",\n        \"type\": \"source_code\",\n        \"text\": \"pool.add(r); \\n    notifyAll();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2177ba80bedbb365be91fbb10edec260\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Robot r : pool) \\n      if(r.getClass().equals(robotType)) { \\n        pool.remove(r);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48ee08bceab687d5dbb1944a82560a74\",\n        \"type\": \"source_code\",\n        \"text\": \"r.assignAssembler(d); \\n        r.engage(); // Power it up to do the task \\n        return; \\n      } \\n    wait(); // None available \\n    hire(robotType, d); // Try again, recursively\",\n        \"programming_language\": \"verilog\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d1cf870736230c2d345bee0470b32160\",\n        \"type\": \"source_code\",\n        \"text\": \"CarQueue chassisQueue = new CarQueue(), \\n             finishingQueue = new CarQueue(); \\n    ExecutorService exec = Executors.newCachedThreadPool(); \\n    RobotPool robotPool = new RobotPool(); \\n    exec.execute(new EngineRobot(robotPool)); \\n    exec.execute(new DriveTrainRobot(robotPool)); \\n    exec.execute(new WheelRobot(robotPool)); \\n    exec.execute(new Assembler( \\n      chassisQueue, finishingQueue, robotPool)); \\n    exec.execute(new Reporter(finishingQueue)); \\n    // Start everything running by producing chassis: \\n    exec.execute(new ChassisBuilder(chassisQueue)); \\n    TimeUnit.SECONDS.sleep(7); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"86c20b1286968fc7a756bfbf5ec3563c\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      ++counter; \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"345fbd74d5bfbb97fa1ec668ddd5c94b\",\n        \"type\": \"source_code\",\n        \"text\": \"long start = System.nanoTime(); \\n    for(long i = 0; i < 10000000L; i++) \\n      incr.increment(); \\n    return System.nanoTime() - start;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"670b55d820b9771a3120c6680375c459\",\n        \"type\": \"source_code\",\n        \"text\": \"long synchTime = test(new SynchronizingTest()); \\n    long lockTime = test(new LockingTest()); \\n    System.out.printf(\\\"synchronized: %1$10d\\\\n\\\", synchTime); \\n    System.out.printf(\\\"Lock:         %1$10d\\\\n\\\", lockTime); \\n    System.out.printf(\\\"Lock/synchronized = %1$.3f\\\", \\n      (double)lockTime/(double)synchTime);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ba9371ef0e003ad81cac7d3f978b59f5\",\n        \"type\": \"source_code\",\n        \"text\": \"939098964\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5f3a67e5b2268867ae6e8bb3fa657876\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newFixedThreadPool(N*2);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38860bbc6713bdf6be68759aee38f11a\",\n        \"type\": \"source_code\",\n        \"text\": \"new CyclicBarrier(N*2 + 1);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d36dd0b78a931aabdc0bd3a97fc0ad96\",\n        \"type\": \"source_code\",\n        \"text\": \"// Load the array of random numbers:\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8213b5eba516ea425bf103df2fd8e453\",\n        \"type\": \"source_code\",\n        \"text\": \"Random rand = new Random(47); \\n    for(int i = 0; i < SIZE; i++) \\n      preLoaded[i] = rand.nextInt();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c9bded6c9ce3e33669fc7de5f603f70c\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      for(long i = 0; i < cycles; i++) \\n        accumulate(); \\n      try { \\n        barrier.await(); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcc93bf64e1dee84bc6de1fb16bed63f\",\n        \"type\": \"source_code\",\n        \"text\": \"private volatile long value; \\n    public void run() { \\n      for(long i = 0; i < cycles; i++) \\n        value = read(); \\n      try { \\n        barrier.await(); \\n      } catch(Exception e) { \\n        throw new RuntimeException(e); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"355be9d760a344468b8da65f5776d235\",\n        \"type\": \"source_code\",\n        \"text\": \"long start = System.nanoTime(); \\n    for(int i = 0; i < N; i++) { \\n      exec.execute(new Modifier()); \\n      exec.execute(new Reader()); \\n    } \\n    try { \\n      barrier.await(); \\n    } catch(Exception e) { \\n      throw new RuntimeException(e); \\n    } \\n    duration = System.nanoTime() - start; \\n    printf(\\\"%-13s: %13d\\\\n\\\", id, duration);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"453aa8ca6f4c9369a22ff41ef5a4f03b\",\n        \"type\": \"source_code\",\n        \"text\": \"printf(\\\"%-22s: %.2f\\\\n\\\", acc1.id + \\\"/\\\" + acc2.id, \\n      (double)acc1.duration/(double)acc2.duration);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"57a99c03954aa09ab5242b5b00776727\",\n        \"type\": \"source_code\",\n        \"text\": \"value += preLoaded[index++]; \\n    if(index >= SIZE) index = 0;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae07cb0df2f07d94203b74a9acad30f0\",\n        \"type\": \"source_code\",\n        \"text\": \"value += preLoaded[index++];\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d8471a7148c4f28908988d170da1e7e1\",\n        \"type\": \"source_code\",\n        \"text\": \"if(index >= SIZE) index = 0;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7a71c53eb1fd797e31c55762a8a7b63\",\n        \"type\": \"source_code\",\n        \"text\": \"return value;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d7eb731f2cc19d99b00f632aef425328\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      value += preLoaded[index++]; \\n      if(index >= SIZE) index = 0; \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9d6dd66aced3cec479f884ce88fcfa9b\",\n        \"type\": \"source_code\",\n        \"text\": \"lock.lock(); \\n    try { \\n      return value; \\n    } finally { \\n      lock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"941579c1f3dab0c7bac11fdd9fdba7fb\",\n        \"type\": \"source_code\",\n        \"text\": \"// Oops! Relying on more than one Atomic at \\n    // a time doesn\\u2019t work. But it still gives us \\n    // a performance indicator: \\n    int i = index.getAndIncrement(); \\n    value.getAndAdd(preLoaded[i]); \\n    if(++i >= SIZE) \\n      index.set(0);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcda5c5bbac0d6b7991a255f1b3c9a7a\",\n        \"type\": \"source_code\",\n        \"text\": \"print(\\\"============================\\\"); \\n    printf(\\\"%-12s : %13d\\\\n\\\", \\\"Cycles\\\", Accumulator.cycles); \\n    baseLine.timedTest(); \\n    synch.timedTest(); \\n    lock.timedTest(); \\n    atomic.timedTest(); \\n    Accumulator.report(synch, baseLine); \\n    Accumulator.report(lock, baseLine); \\n    Accumulator.report(atomic, baseLine); \\n    Accumulator.report(synch, lock); \\n    Accumulator.report(synch, atomic); \\n    Accumulator.report(lock, atomic);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5cfa5cf7dbdfac9087582bdbbf9ed069\",\n        \"type\": \"source_code\",\n        \"text\": \"int iterations = 5; // Default \\n    if(args.length > 0) // Optionally change iterations \\n      iterations = new Integer(args[0]); \\n    // The first time fills the thread pool: \\n    print(\\\"Warmup\\\"); \\n    baseLine.timedTest(); \\n    // Now the initial test doesn\\u2019t include the cost \\n    // of starting the threads for the first time. \\n    // Produce multiple data points: \\n    for(int i = 0; i < iterations; i++) { \\n      test(); \\n      Accumulator.cycles *= 2; \\n    } \\n    Accumulator.exec.shutdown();\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"60f07395211046d8507fd1c903cd17de\",\n        \"type\": \"source_code\",\n        \"text\": \":      34237033\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ac01565ff87f7a077f1cff5a3d5b09d\",\n        \"type\": \"source_code\",\n        \"text\": \":         50000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7f61cfd6ed884e1d016a9e9c4e58b3c0\",\n        \"type\": \"source_code\",\n        \"text\": \":      20966632\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2fe2bdfcb93a18d41e32946665d90e16\",\n        \"type\": \"source_code\",\n        \"text\": \"24326555\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f1c7481999942156c569148cc151ea6e\",\n        \"type\": \"source_code\",\n        \"text\": \":      53669950\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a46e6e2e3dcccefa838b8965218ea924\",\n        \"type\": \"source_code\",\n        \"text\": \":      30552487\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0058c0f35f0520227478d8f0d802a2cf\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.56\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6a8c46e4b107906fbfa62e30825b26b1\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.46\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f888df6e4093ea128f130548cadb2934\",\n        \"type\": \"source_code\",\n        \"text\": \": 0.45\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4476dade336d1f9ad974e7d45fadca55\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.76\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d174402c3ff18cc8e495b5ed5cc1ac76\",\n        \"type\": \"source_code\",\n        \"text\": \":        100000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3987fcf3ef654d5ceb5b4ac0e30c5631\",\n        \"type\": \"source_code\",\n        \"text\": \":      41512818\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"544ad6e7e47dd8800abb24178ca9ebd5\",\n        \"type\": \"source_code\",\n        \"text\": \"43843003\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9e0a3503bd19b3eebd7d02ec0220608a\",\n        \"type\": \"source_code\",\n        \"text\": \":      87430386\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"46147e6b871fcdf8962fd0e3881bc8d8\",\n        \"type\": \"source_code\",\n        \"text\": \":      51892350\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d78821c3daa6ee73d2e2e2280ffc34fe\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.11\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff7d3a2921b0787288bb71436b6e1efd\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.25\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c29550686c79b2d19284ba1e148ab8a\",\n        \"type\": \"source_code\",\n        \"text\": \": 0.50\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"59cb5ff78a8aca5566d00e9ea9d90eeb\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.68\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b8ac9c21c0ffb47a57af1b8c194afb2a\",\n        \"type\": \"source_code\",\n        \"text\": \":        200000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07c9c19292cce47bd3d3edd1f281ebe1\",\n        \"type\": \"source_code\",\n        \"text\": \":      80176670\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"611aeab8fafd637c510a9859b97324e8\",\n        \"type\": \"source_code\",\n        \"text\": \"5455046661\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e94fcf9abbb15b5553401932bc600157\",\n        \"type\": \"source_code\",\n        \"text\": \":     177686829\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"52a841e4d4e57498879363eac0cbe5a2\",\n        \"type\": \"source_code\",\n        \"text\": \":     101789194\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"19fbeb166a60162a89df37a5c1ae7ef6\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.22\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a002b194fce2eedb5e4f04270d13169\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.27\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"eb05ab2714c48312de6c34b20826f8b4\",\n        \"type\": \"source_code\",\n        \"text\": \": 30.70\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c006fd9ef42d75116da1070321c21c0\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.75\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6303f16a49a07a9c534e9b508f844837\",\n        \"type\": \"source_code\",\n        \"text\": \":        400000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5cc765ddfdae97293fc78971b07cdb1\",\n        \"type\": \"source_code\",\n        \"text\": \":     160383513\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"27b80f9092b3874262d4b09c3f0101bd\",\n        \"type\": \"source_code\",\n        \"text\": \"780052493\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5e93455fa28165e5ea0a1855f91052d4\",\n        \"type\": \"source_code\",\n        \"text\": \":     362187652\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dfe15e65227e3884c87f77c70f4e68f6\",\n        \"type\": \"source_code\",\n        \"text\": \":     202030984\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea333e01cdc832c9e3499f0a751e9b31\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.26\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c7ab3f6d551ceea21f05df4f2d5be831\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.26\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"72147155bdc3067e815d8cb2d24f0555\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.15\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83b072c8b1117c0896805c7a0b6a0010\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.79\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"033653ad5f5faee111e58263f0902381\",\n        \"type\": \"source_code\",\n        \"text\": \":        800000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e9bf73ada624168328d46e8bc3f8286\",\n        \"type\": \"source_code\",\n        \"text\": \":     322064955\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1ed411367b88d2955a0a6d196fa8b01\",\n        \"type\": \"source_code\",\n        \"text\": \"336155014\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc5ef88c6b96c0ece204873bfb920413\",\n        \"type\": \"source_code\",\n        \"text\": \":     704615531\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87e8fe0e091b9ba74b794ef53132a27f\",\n        \"type\": \"source_code\",\n        \"text\": \":     393231542\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2e9c979dd300d1d138a17712da9eb912\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.19\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"050a61b80bd176c23f68c8c2e62c254b\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.22\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d36546a7daa2462c1d33f365ada1de5f\",\n        \"type\": \"source_code\",\n        \"text\": \": 0.47\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83b072c8b1117c0896805c7a0b6a0010\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.79\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d3ee3c239724f06ef442ca05bd58f4f\",\n        \"type\": \"source_code\",\n        \"text\": \":       1600000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a2c26ba474f05d99a39f380651a3f320\",\n        \"type\": \"source_code\",\n        \"text\": \":     650004120\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"320a638aaf83e3f230969c8dc2e1d9aa\",\n        \"type\": \"source_code\",\n        \"text\": \":    1419602771\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b7f847e581831ddf3d8e709c7fda7d2a\",\n        \"type\": \"source_code\",\n        \"text\": \":     796950171\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"509d711006ba213d349a7ba85b3fc29a\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.18\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae3088a6ed16f051eadc2ecb411de995\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.23\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33f95ea506712f9765907a70888ff8b7\",\n        \"type\": \"source_code\",\n        \"text\": \": 36.80\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fe66bc6a4a7dcde75903cc53429af8c0\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.78\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa3bc363477cd9b6d198d41d2db3eab3\",\n        \"type\": \"source_code\",\n        \"text\": \":       3200000\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"94ac0263e85ba16740cc5dbcab7f2916\",\n        \"type\": \"source_code\",\n        \"text\": \":    1285664519\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4fa6767a4fd7c6e10029bd131f055f4c\",\n        \"type\": \"source_code\",\n        \"text\": \":    2846988654\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0e5017f56d7d778fae4c0fb3603c8e71\",\n        \"type\": \"source_code\",\n        \"text\": \":    1590545726\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"632f87295bf78230be8c7a8a35faf3e8\",\n        \"type\": \"source_code\",\n        \"text\": \": 2.21\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fba770baba9408c7320b76738f16cee6\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.24\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f601f557ffb1649a2bcca4b33653e76f\",\n        \"type\": \"source_code\",\n        \"text\": \": 33.84\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83b072c8b1117c0896805c7a0b6a0010\",\n        \"type\": \"source_code\",\n        \"text\": \": 1.79\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c23539246db1546d265aafaea3f738aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newCachedThreadPool();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c269780a30d06a291a2a71287a8ba83a\",\n        \"type\": \"source_code\",\n        \"text\": \"this.testId = testId + \\\" \\\" + \\n      nReaders + \\\"r \\\" + nWriters + \\\"w\\\"; \\n    this.nReaders = nReaders; \\n    this.nWriters = nWriters; \\n    writeData = Generated.array(Integer.class, \\n      new RandomGenerator.Integer(), containerSize); \\n    for(int i = 0; i < testReps; i++) { \\n      runTest(); \\n      readTime = 0; \\n      writeTime = 0; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c9648b11de077f4e68c69533fa3080a0\",\n        \"type\": \"source_code\",\n        \"text\": \"endLatch = new CountDownLatch(nReaders + nWriters); \\n    testContainer = containerInitializer(); \\n    startReadersAndWriters(); \\n    try { \\n      endLatch.await(); \\n    } catch(InterruptedException ex) { \\n      System.out.println(\\\"endLatch interrupted\\\"); \\n    } \\n    System.out.printf(\\\"%-27s %14d %14d\\\\n\\\", \\n      testId, readTime, writeTime); \\n    if(readTime != 0 && writeTime != 0) \\n      System.out.printf(\\\"%-27s %14d\\\\n\\\", \\n        \\\"readTime + writeTime =\\\", readTime + writeTime);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e72a098348dd4e3e345b745c97f55259\",\n        \"type\": \"source_code\",\n        \"text\": \"abstract void test(); \\n    abstract void putResults(); \\n    long duration; \\n    public void run() { \\n      long startTime = System.nanoTime(); \\n      test(); \\n      duration = System.nanoTime() - startTime; \\n      synchronized(Tester.this) { \\n        putResults(); \\n      } \\n      endLatch.countDown(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"580e6971a51adce605f0bf423a346266\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length > 0) \\n      testReps = new Integer(args[0]); \\n    if(args.length > 1) \\n      testCycles = new Integer(args[1]); \\n    if(args.length > 2) \\n      containerSize = new Integer(args[2]); \\n    System.out.printf(\\\"%-27s %14s %14s\\\\n\\\",\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c98d4271f7b02c8ddc419d02537cc5f\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Type\\\", \\\"Read time\\\", \\\"Write time\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f62d2003dbebee9c77fd35de0d38ea1e\",\n        \"type\": \"source_code\",\n        \"text\": \"super(testId, nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8beaa4033189baf23bd188f5e727c66d\",\n        \"type\": \"source_code\",\n        \"text\": \"long result = 0; \\n    void test() { \\n      for(long i = 0; i < testCycles; i++) \\n        for(int index = 0; index < containerSize; index++) \\n          result += testContainer.get(index); \\n    } \\n    void putResults() { \\n      readResult += result; \\n      readTime += duration; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a74d2e23670b03e486fd780a0a8335f0\",\n        \"type\": \"source_code\",\n        \"text\": \"void test() { \\n      for(long i = 0; i < testCycles; i++) \\n        for(int index = 0; index < containerSize; index++) \\n          testContainer.set(index, writeData[index]); \\n    } \\n    void putResults() { \\n      writeTime += duration; \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c34518c16fc15b7a56010e89fe4a4fe8\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nReaders; i++) \\n      exec.execute(new Reader());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c741e99766f8aea79eb5f2cdb17ec151\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nWriters; i++) \\n      exec.execute(new Writer());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0be46112da611da3c185c258d0cf5fec\",\n        \"type\": \"source_code\",\n        \"text\": \"return Collections.synchronizedList( \\n      new ArrayList<Integer>( \\n        new CountingIntegerList(containerSize)));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"69805076084223ed72513ddfa2d71b78\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"Synched ArrayList\\\", nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a7914a00456eded2a635d291eab9c19\",\n        \"type\": \"source_code\",\n        \"text\": \"return new CopyOnWriteArrayList<Integer>( \\n      new CountingIntegerList(containerSize));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4e700fe6d90c20e73101143ad2bf6290\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"CopyOnWriteArrayList\\\", nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b0927f0aa80d33cb3b884f23c20f598\",\n        \"type\": \"source_code\",\n        \"text\": \"Tester.initMain(args); \\n    new SynchronizedArrayListTest(10, 0); \\n    new SynchronizedArrayListTest(9, 1); \\n    new SynchronizedArrayListTest(5, 5); \\n    new CopyOnWriteArrayListTest(10, 0); \\n    new CopyOnWriteArrayListTest(9, 1); \\n    new CopyOnWriteArrayListTest(5, 5); \\n    Tester.exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5879be05d91b298151146cacf4f9bc8\",\n        \"type\": \"source_code\",\n        \"text\": \"Read time     Write time\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0065b23b9407c7f6f82d387bfdc9a3c\",\n        \"type\": \"source_code\",\n        \"text\": \"232158294700              0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6d85047f6fff5f094d2b1f2225f828e8\",\n        \"type\": \"source_code\",\n        \"text\": \"198947618203    24918613399\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fc637b18ab21aa9f5a19a5174ab47454\",\n        \"type\": \"source_code\",\n        \"text\": \"223866231602\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"242be2c8027b402bf9b000d75b15aa53\",\n        \"type\": \"source_code\",\n        \"text\": \"117367305062   132176613508\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f36585e7505ff12e069e35b1c3c88ad\",\n        \"type\": \"source_code\",\n        \"text\": \"249543918570\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af245fd7635ab16f8682538b8194ee49\",\n        \"type\": \"source_code\",\n        \"text\": \"758386889              0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2a7625c9d52f076966b6cdb64a8b23f0\",\n        \"type\": \"source_code\",\n        \"text\": \"741305671      136145237\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ec109e18f484215cd5a959af422119b2\",\n        \"type\": \"source_code\",\n        \"text\": \"877450908\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"83b5ea0018fc95fe1a00b1856b1fc318\",\n        \"type\": \"source_code\",\n        \"text\": \"212763075    67967464300\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"087444caa7c1f46988328c67ece1a9e0\",\n        \"type\": \"source_code\",\n        \"text\": \"68180227375\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f62d2003dbebee9c77fd35de0d38ea1e\",\n        \"type\": \"source_code\",\n        \"text\": \"super(testId, nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8beaa4033189baf23bd188f5e727c66d\",\n        \"type\": \"source_code\",\n        \"text\": \"long result = 0; \\n    void test() { \\n      for(long i = 0; i < testCycles; i++) \\n        for(int index = 0; index < containerSize; index++) \\n          result += testContainer.get(index); \\n    } \\n    void putResults() { \\n      readResult += result; \\n      readTime += duration; \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b524bd548d4a7e1467798c97530ca96\",\n        \"type\": \"source_code\",\n        \"text\": \"void test() { \\n      for(long i = 0; i < testCycles; i++) \\n        for(int index = 0; index < containerSize; index++) \\n          testContainer.put(index, writeData[index]); \\n    } \\n    void putResults() { \\n      writeTime += duration; \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26914bc0b344725397c56301231b1940\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < nReaders; i++) \\n      exec.execute(new Reader()); \\n    for(int i = 0; i < nWriters; i++) \\n      exec.execute(new Writer());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fb2205d424fb8b8fba58db308022f4af\",\n        \"type\": \"source_code\",\n        \"text\": \"return Collections.synchronizedMap( \\n      new HashMap<Integer,Integer>( \\n        MapData.map( \\n          new CountingGenerator.Integer(), \\n          new CountingGenerator.Integer(), \\n          containerSize)));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d0bcd9561743357391be31bed0d1f4b8\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"Synched HashMap\\\", nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"26d250a21b2cbf06f4c2f5aee405756a\",\n        \"type\": \"source_code\",\n        \"text\": \"return new ConcurrentHashMap<Integer,Integer>( \\n      MapData.map( \\n        new CountingGenerator.Integer(), \\n        new CountingGenerator.Integer(), containerSize));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"867734f075c807b9f7ecc50f02f00016\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"ConcurrentHashMap\\\", nReaders, nWriters);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ae1fea7d9249eb4fe185565b3369acbe\",\n        \"type\": \"source_code\",\n        \"text\": \"Tester.initMain(args); \\n    new SynchronizedHashMapTest(10, 0); \\n    new SynchronizedHashMapTest(9, 1); \\n    new SynchronizedHashMapTest(5, 5); \\n    new ConcurrentHashMapTest(10, 0); \\n    new ConcurrentHashMapTest(9, 1); \\n    new ConcurrentHashMapTest(5, 5); \\n    Tester.exec.shutdown();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5879be05d91b298151146cacf4f9bc8\",\n        \"type\": \"source_code\",\n        \"text\": \"Read time     Write time\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b2964fc8509b035cde268b56f4040ef1\",\n        \"type\": \"source_code\",\n        \"text\": \"306052025049              0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a4b6a6fbc1f034a19b9e9003ad585ed2\",\n        \"type\": \"source_code\",\n        \"text\": \"428319156207    47697347568\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6127f58c873bf74975933b7fff2eb70a\",\n        \"type\": \"source_code\",\n        \"text\": \"476016503775\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9db0b4cce343bb353f71079f6340b4f9\",\n        \"type\": \"source_code\",\n        \"text\": \"243956877760   244012003202\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1afe8826994a592d162e7459118d75b8\",\n        \"type\": \"source_code\",\n        \"text\": \"487968880962\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d09a09f93eb48d6254c1f586f341b9a0\",\n        \"type\": \"source_code\",\n        \"text\": \"23352654318              0\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32e3581f443e962078074770813a6629\",\n        \"type\": \"source_code\",\n        \"text\": \"18833089400     1541853224\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e0babe64bc19cc5cc8609fa60677eeb4\",\n        \"type\": \"source_code\",\n        \"text\": \"20374942624\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c44700123109e30b5b4ed0a89fd7f3bf\",\n        \"type\": \"source_code\",\n        \"text\": \"12037625732    11850489099\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"537280019e81f1a9b5a7592a276b03e8\",\n        \"type\": \"source_code\",\n        \"text\": \"23888114831\",\n        \"programming_language\": \"CBM BASIC V2\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da6dab1e1cdf6104b23edb9246a28b64\",\n        \"type\": \"source_code\",\n        \"text\": \"new AtomicInteger[N_ELEMENTS][N_GENES];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33b8154650fc861a7f01c1e2d293b61b\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      while(!Thread.interrupted()) { \\n        // Randomly select an element to work on: \\n        int element = rand.nextInt(N_ELEMENTS); \\n        for(int i = 0; i < N_GENES; i++) { \\n          int previous = element - 1; \\n          if(previous < 0) previous = N_ELEMENTS - 1; \\n          int next = element + 1; \\n          if(next >= N_ELEMENTS) next = 0; \\n          int oldvalue = GRID[element][i].get();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6ebcbd056fed5ee2e6af572ba9d32528\",\n        \"type\": \"source_code\",\n        \"text\": \"// Perform some kind of modeling calculation: \\n          int newvalue = oldvalue + \\n            GRID[previous][i].get() + GRID[next][i].get(); \\n          newvalue /= 3; // Average the three values \\n          if(!GRID[element][i] \\n            .compareAndSet(oldvalue, newvalue)) { \\n            // Policy here to deal with failure. Here, we \\n            // just report it and ignore it; our model \\n            // will eventually deal with it. \\n            print(\\\"Old value changed from \\\" + oldvalue); \\n          } \\n        } \\n      } \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fdb59fce5108e9d3bea324745697887e\",\n        \"type\": \"source_code\",\n        \"text\": \"ExecutorService exec = Executors.newCachedThreadPool(); \\n    for(int i = 0; i < N_ELEMENTS; i++) \\n      for(int j = 0; j < N_GENES; j++) \\n        GRID[i][j] = new AtomicInteger(rand.nextInt(1000)); \\n    for(int i = 0; i < N_EVOLVERS; i++) \\n      exec.execute(new Evolver()); \\n    TimeUnit.SECONDS.sleep(5); \\n    exec.shutdownNow();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9f1a20e73949cdbb204ad64f731f0e6\",\n        \"type\": \"source_code\",\n        \"text\": \"new ReentrantReadWriteLock(true);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d408110ed0231e163c3d46e276bda84\",\n        \"type\": \"source_code\",\n        \"text\": \"lockedList = new ArrayList<T>( \\n      Collections.nCopies(size, initialValue));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"91ee0114d1b00abbf87f50a2613f071f\",\n        \"type\": \"source_code\",\n        \"text\": \"Lock wlock = lock.writeLock(); \\n    wlock.lock(); \\n    try { \\n      return lockedList.set(index, element); \\n    } finally { \\n      wlock.unlock(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"48d3e2379aef2104cb79e66ed8f740e9\",\n        \"type\": \"source_code\",\n        \"text\": \"Lock rlock = lock.readLock(); \\n    rlock.lock(); \\n    try { \\n      // Show that multiple readers \\n      // may acquire the read lock: \\n      if(lock.getReadLockCount() > 1) \\n        print(lock.getReadLockCount()); \\n      return lockedList.get(index); \\n    } finally { \\n      rlock.unlock(); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1ace27d78b98c55ca93406d1c837648c\",\n        \"type\": \"source_code\",\n        \"text\": \"new ReaderWriterListTest(30, 1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7e5fcdfca994be1ac0d9adae2b17cdc2\",\n        \"type\": \"source_code\",\n        \"text\": \"new ReaderWriterList<Integer>(SIZE, 0);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4dc69060569c2caf8136dda4b628db45\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      try { \\n        for(int i = 0; i < 20; i++) { // 2 second test \\n          list.set(i, rand.nextInt()); \\n          TimeUnit.MILLISECONDS.sleep(100); \\n        } \\n      } catch(InterruptedException e) { \\n        // Acceptable way to exit \\n      } \\n      print(\\\"Writer finished, shutting down\\\"); \\n      exec.shutdownNow(); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9a129c2f9c031018ce4e33a9ea0ea66d\",\n        \"type\": \"source_code\",\n        \"text\": \"public void run() { \\n      try { \\n        while(!Thread.interrupted()) { \\n          for(int i = 0; i < SIZE; i++) { \\n            list.get(i); \\n            TimeUnit.MILLISECONDS.sleep(1); \\n          }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"957574976ef3bd320c531684a438e27d\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n      } catch(InterruptedException e) { \\n        // Acceptable way to exit \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"735eba1af2ab716440bf2bef593c55c3\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < readers; i++) \\n      exec.execute(new Reader()); \\n    for(int i = 0; i < writers; i++) \\n      exec.execute(new Writer());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1023bf6a8e582f63e6e1546bd8b024c\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newSingleThreadExecutor();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"987954e2fe6fda6db94c928cbf87629d\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      TimeUnit.MILLISECONDS.sleep( \\n        100 + rand.nextInt(factor)); \\n    } catch(InterruptedException e) { \\n      print(\\\"sleep() interrupted\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1acce789b7c5ad481eab10031f51579\",\n        \"type\": \"source_code\",\n        \"text\": \"return ex.submit(new Callable<Integer>() { \\n      public Integer call() { \\n        print(\\\"starting \\\" + x + \\\" + \\\" + y); \\n        pause(500); \\n        return x + y; \\n      } \\n    });\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"53df489a956a66c893866a50afa720ac\",\n        \"type\": \"source_code\",\n        \"text\": \"return ex.submit(new Callable<Float>() { \\n      public Float call() { \\n        print(\\\"starting \\\" + x + \\\" + \\\" + y); \\n        pause(2000); \\n        return x + y; \\n      } \\n    });\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dc47b7bd35c8a95e2dcb1f971a03203b\",\n        \"type\": \"source_code\",\n        \"text\": \"ActiveObjectDemo d1 = new ActiveObjectDemo(); \\n    // Prevents ConcurrentModificationException: \\n    List<Future<?>> results = \\n      new CopyOnWriteArrayList<Future<?>>(); \\n    for(float f = 0.0f; f < 1.0f; f += 0.2f) \\n      results.add(d1.calculateFloat(f, f)); \\n    for(int i = 0; i < 5; i++) \\n      results.add(d1.calculateInt(i, i)); \\n    print(\\\"All asynch calls made\\\"); \\n    while(results.size() > 0) {\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3d8a3b3eed5e8dbb51f26a42db7b2dcf\",\n        \"type\": \"source_code\",\n        \"text\": \"for(Future<?> f : results) \\n        if(f.isDone()) { \\n          try { \\n            print(f.get()); \\n          } catch(Exception e) { \\n            throw new RuntimeException(e); \\n          } \\n          results.remove(f); \\n        } \\n    } \\n    d1.shutdown();\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"756640f0aea5f5bea1cbe250a9d08989\",\n        \"type\": \"source_code\",\n        \"text\": \"Interfaces\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"885ffbe314b8be471040b1ae58a8ee8a\",\n        \"type\": \"source_code\",\n        \"text\": \"JFrame frame = new JFrame(\\\"Hello Swing\\\"); \\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \\n    frame.setSize(300, 100); \\n    frame.setVisible(true);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a980bda21ba9b5edc34c5519b8ab104c\",\n        \"type\": \"source_code\",\n        \"text\": \"JFrame frame = new JFrame(\\\"Hello Swing\\\"); \\n    JLabel label = new JLabel(\\\"A Label\\\"); \\n    frame.add(label); \\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \\n    frame.setSize(300, 100); \\n    frame.setVisible(true); \\n    TimeUnit.SECONDS.sleep(1); \\n    label.setText(\\\"Hey! This is Different!\\\");\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc5500e27183e46ebabe2f71a6e72c1f\",\n        \"type\": \"source_code\",\n        \"text\": \"JFrame frame = new JFrame(\\\"Hello Swing\\\"); \\n    final JLabel label = new JLabel(\\\"A Label\\\"); \\n    frame.add(label); \\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \\n    frame.setSize(300, 100); \\n    frame.setVisible(true); \\n    TimeUnit.SECONDS.sleep(1); \\n    SwingUtilities.invokeLater(new Runnable() { \\n      public void run() { \\n        label.setText(\\\"Hey! This is Different!\\\"); \\n      } \\n    });\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"47ade092b2e15390a11c1b71239835a6\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"Hello Swing\\\"); \\n    label = new JLabel(\\\"A Label\\\"); \\n    add(label); \\n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \\n    setSize(300, 100); \\n    setVisible(true);\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1e41befd9d98269c970c1ce40ca4c80\",\n        \"type\": \"source_code\",\n        \"text\": \"SwingUtilities.invokeLater(new Runnable() { \\n      public void run() { ssp = new SubmitSwingProgram(); } \\n    }); \\n    TimeUnit.SECONDS.sleep(1); \\n    SwingUtilities.invokeLater(new Runnable() { \\n      public void run() { \\n        ssp.label.setText(\\\"Hey! This is Different!\\\"); \\n      } \\n    });\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6391bbf2fe5c5b0875e01e9a3cfef075\",\n        \"type\": \"source_code\",\n        \"text\": \"SwingUtilities.invokeLater(new Runnable() { \\n      public void run() { \\n        f.setTitle(f.getClass().getSimpleName()); \\n        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \\n        f.setSize(width, height); \\n        f.setVisible(true); \\n      } \\n    });\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"197ee3a588d76c244978d190cb7201fb\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Button 1\\\"), \\n    b2 = new JButton(\\\"Button 2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2c3e371d59438e6154955c9689ac1055\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d03a46440c85e48332e5a36f7344859\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Button1(), 200, 100);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"197ee3a588d76c244978d190cb7201fb\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Button 1\\\"), \\n    b2 = new JButton(\\\"Button 2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6669bd4244a898d3f4380c866f65a32b\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      String name = ((JButton)e.getSource()).getText(); \\n      txt.setText(name);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"650ebc6b08d1514cc79c1a8a5fd16183\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(bl); \\n    b2.addActionListener(bl); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2); \\n    add(txt);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4e2f278d54f51491c5551e6dcf151570\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Button2(), 200, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"197ee3a588d76c244978d190cb7201fb\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Button 1\\\"), \\n    b2 = new JButton(\\\"Button 2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3ebe3bf28f31906ba61f226f5b24b621\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      String name = ((JButton)e.getSource()).getText(); \\n      txt.setText(name); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"650ebc6b08d1514cc79c1a8a5fd16183\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(bl); \\n    b2.addActionListener(bl); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2); \\n    add(txt);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a98952242f8e39e714655bef7b928bf6\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Button2b(), 200, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0ccb214a7e6d10283628c8eefc2a7232\",\n        \"type\": \"source_code\",\n        \"text\": \"b = new JButton(\\\"Add Data\\\"), \\n    c = new JButton(\\\"Clear Data\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"92b65223ceb9ca351e2b5a497beb363e\",\n        \"type\": \"source_code\",\n        \"text\": \"new HashMap<String,String>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5885d24a0ec6cfcbc884e9c7458471ea\",\n        \"type\": \"source_code\",\n        \"text\": \"// Use up all the data: \\n    m.putAll(Countries.capitals()); \\n    b.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        for(Map.Entry me : m.entrySet()) \\n          t.append(me.getKey() + \\\": \\\"+ me.getValue()+\\\"\\\\n\\\"); \\n      } \\n    }); \\n    c.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        t.setText(\\\"\\\"); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(new JScrollPane(t)); \\n    add(b); \\n    add(c);\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d6251e168d3eed98e62081744fe5e2de\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TextArea(), 475, 425);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b0afac17cfc82195fceccab8a8b43319\",\n        \"type\": \"source_code\",\n        \"text\": \"add(BorderLayout.NORTH, new JButton(\\\"North\\\")); \\n    add(BorderLayout.SOUTH, new JButton(\\\"South\\\")); \\n    add(BorderLayout.EAST, new JButton(\\\"East\\\")); \\n    add(BorderLayout.WEST, new JButton(\\\"West\\\")); \\n    add(BorderLayout.CENTER, new JButton(\\\"Center\\\"));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e68b63cf1e63223dfcefd3cb7c90ff6b\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new BorderLayout1(), 300, 250);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3bc460ab9ddb02bedcc7770f03f8c8d0\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    for(int i = 0; i < 20; i++) \\n      add(new JButton(\\\"Button \\\" + i));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e9c6031ee5c93d404999e29d4b0cfabc\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new FlowLayout1(), 300, 300);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b590d11e921f113a1941f8055147c71f\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new GridLayout(7,3)); \\n    for(int i = 0; i < 20; i++) \\n      add(new JButton(\\\"Button \\\" + i));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ddede31aaec2af3ffb7e73b1a9425abf\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new GridLayout1(), 300, 300);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"20436b342d1a3649e3d0a754ff1a63c6\",\n        \"type\": \"source_code\",\n        \"text\": \"Pattern.compile(\\\"(add\\\\\\\\w+?Listener\\\\\\\\(.*?\\\\\\\\))\\\");\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d7e68a389b748cd05690a098060707b5\",\n        \"type\": \"source_code\",\n        \"text\": \"Pattern.compile(\\\"\\\\\\\\w+\\\\\\\\.\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b75e3b6adadc295cbfd8ad7c27fb46fe\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      String nm = name.getText().trim(); \\n      if(nm.length() == 0) { \\n        results.setText(\\\"No match\\\"); \\n        return; \\n      } \\n      Class<?> kind; \\n      try { \\n        kind = Class.forName(\\\"javax.swing.\\\" + nm); \\n      } catch(ClassNotFoundException ex) { \\n        results.setText(\\\"No match\\\"); \\n        return; \\n      } \\n      Method[] methods = kind.getMethods(); \\n      results.setText(\\\"\\\"); \\n      for(Method m : methods) { \\n        Matcher matcher = \\n          addListener.matcher(m.toString()); \\n        if(matcher.find()) \\n          results.append(qualifier.matcher( \\n            matcher.group(1)).replaceAll(\\\"\\\") + \\\"\\\\n\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"96348983c34545ed4fd59399f82ef3be\",\n        \"type\": \"source_code\",\n        \"text\": \"NameL nameListener = new NameL(); \\n    name.addActionListener(nameListener); \\n    JPanel top = new JPanel(); \\n    top.add(new JLabel(\\\"Swing class name (press Enter):\\\")); \\n    top.add(name); \\n    add(BorderLayout.NORTH, top); \\n    add(new JScrollPane(results)); \\n    // Initial data and test: \\n    name.setText(\\\"JTextArea\\\"); \\n    nameListener.actionPerformed( \\n      new ActionEvent(\\\"\\\", 0 ,\\\"\\\"));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32c8ffa5350c2d8ba4c48a890d8bc45d\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new ShowAddListeners(), 500, 400);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed99379da9fc03b91f03a42b4bdf3341\",\n        \"type\": \"source_code\",\n        \"text\": \"// Respond to mouse click...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ed99379da9fc03b91f03a42b4bdf3341\",\n        \"type\": \"source_code\",\n        \"text\": \"// Respond to mouse click...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fabedd9f1a7fc551eefa04c2f5f9a119\",\n        \"type\": \"source_code\",\n        \"text\": \"new HashMap<String,JTextField>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"db46bd4dc080c3ac4084f615dfa32778\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"focusGained\\\", \\\"focusLost\\\", \\\"keyPressed\\\", \\n    \\\"keyReleased\\\", \\\"keyTyped\\\", \\\"mouseClicked\\\", \\n    \\\"mouseEntered\\\", \\\"mouseExited\\\", \\\"mousePressed\\\", \\n    \\\"mouseReleased\\\", \\\"mouseDragged\\\", \\\"mouseMoved\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c2cfd974d2606a3d919afe68c21bbfa9\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new MyButton(Color.BLUE, \\\"test1\\\"), \\n    b2 = new MyButton(Color.RED, \\\"test2\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"342efe64693ac59fa51c02bac6d79b2b\",\n        \"type\": \"source_code\",\n        \"text\": \"void report(String field, String msg) { \\n      h.get(field).setText(msg); \\n    } \\n    FocusListener fl = new FocusListener() { \\n      public void focusGained(FocusEvent e) { \\n        report(\\\"focusGained\\\", e.paramString()); \\n      } \\n      public void focusLost(FocusEvent e) { \\n        report(\\\"focusLost\\\", e.paramString()); \\n      } \\n    }; \\n    KeyListener kl = new KeyListener() { \\n      public void keyPressed(KeyEvent e) { \\n        report(\\\"keyPressed\\\", e.paramString());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3d2fb067fd91fad1adf8d682d8e7c98\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n      public void keyReleased(KeyEvent e) { \\n        report(\\\"keyReleased\\\", e.paramString()); \\n      } \\n      public void keyTyped(KeyEvent e) { \\n        report(\\\"keyTyped\\\", e.paramString()); \\n      } \\n    }; \\n    MouseListener ml = new MouseListener() { \\n      public void mouseClicked(MouseEvent e) { \\n        report(\\\"mouseClicked\\\", e.paramString()); \\n      } \\n      public void mouseEntered(MouseEvent e) { \\n        report(\\\"mouseEntered\\\", e.paramString()); \\n      } \\n      public void mouseExited(MouseEvent e) { \\n        report(\\\"mouseExited\\\", e.paramString()); \\n      } \\n      public void mousePressed(MouseEvent e) { \\n        report(\\\"mousePressed\\\", e.paramString()); \\n      } \\n      public void mouseReleased(MouseEvent e) { \\n        report(\\\"mouseReleased\\\", e.paramString()); \\n      } \\n    }; \\n    MouseMotionListener mml = new MouseMotionListener() { \\n      public void mouseDragged(MouseEvent e) { \\n        report(\\\"mouseDragged\\\", e.paramString()); \\n      } \\n      public void mouseMoved(MouseEvent e) { \\n        report(\\\"mouseMoved\\\", e.paramString()); \\n      } \\n    }; \\n    public MyButton(Color color, String label) { \\n      super(label); \\n      setBackground(color); \\n      addFocusListener(fl); \\n      addKeyListener(kl); \\n      addMouseListener(ml); \\n      addMouseMotionListener(mml); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ec8b26bfd426ca9f5ae98ae8ceae295\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new GridLayout(event.length + 1, 2)); \\n    for(String evt : event) { \\n      JTextField t = new JTextField(); \\n      t.setEditable(false); \\n      add(new JLabel(evt, JLabel.RIGHT)); \\n      add(t); \\n      h.put(evt, t); \\n    } \\n    add(b1); \\n    add(b2);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"809bf26f47a94adbf06136dfba627a64\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TrackEvent(), 700, 500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1e8cf20b461950dc8f52ea36b203b544\",\n        \"type\": \"source_code\",\n        \"text\": \"up = new BasicArrowButton(BasicArrowButton.NORTH), \\n    down = new BasicArrowButton(BasicArrowButton.SOUTH), \\n    right = new BasicArrowButton(BasicArrowButton.EAST), \\n    left = new BasicArrowButton(BasicArrowButton.WEST);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"31a8a0606e413740a31c425aa125a430\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    add(jb); \\n    add(new JToggleButton(\\\"JToggleButton\\\")); \\n    add(new JCheckBox(\\\"JCheckBox\\\")); \\n    add(new JRadioButton(\\\"JRadioButton\\\")); \\n    JPanel jp = new JPanel(); \\n    jp.setBorder(new TitledBorder(\\\"Directions\\\")); \\n    jp.add(up); \\n    jp.add(down); \\n    jp.add(left); \\n    jp.add(right); \\n    add(jp);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c6120cff48ae5e52eae53d5a09714357\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Buttons(), 350, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6d961ec120ab732a38569f9a8ebe611c\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"June\\\", \\\"Ward\\\", \\\"Beaver\\\", \\\"Wally\\\", \\\"Eddie\\\", \\\"Lumpy\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1c83d47d39366aeb76a1d76f31a41e0b\",\n        \"type\": \"source_code\",\n        \"text\": \"Class<? extends AbstractButton> kind, String[] ids) { \\n    ButtonGroup bg = new ButtonGroup(); \\n    JPanel jp = new JPanel(); \\n    String title = kind.getName(); \\n    title = title.substring(title.lastIndexOf(\\u2018.\\u2019) + 1); \\n    jp.setBorder(new TitledBorder(title)); \\n    for(String id : ids) { \\n      AbstractButton ab = new JButton(\\\"failed\\\"); \\n      try { \\n        // Get the dynamic constructor method \\n        // that takes a String argument: \\n        Constructor ctor = \\n          kind.getConstructor(String.class); \\n        // Create a new object: \\n        ab = (AbstractButton)ctor.newInstance(id); \\n      } catch(Exception ex) { \\n        System.err.println(\\\"can\\u2019t create \\\" + kind); \\n      } \\n      bg.add(ab); \\n      jp.add(ab); \\n    } \\n    return jp;\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4eb651bc1fbcefd162adc743948dcfe9\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    add(makeBPanel(JButton.class, ids)); \\n    add(makeBPanel(JToggleButton.class, ids)); \\n    add(makeBPanel(JCheckBox.class, ids)); \\n    add(makeBPanel(JRadioButton.class, ids));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"03aae7b5b6a3988c728fd02ed5bd93f3\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new ButtonGroups(), 500, 350);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dd184b81cde5fc1109a4a389d6e35914\",\n        \"type\": \"source_code\",\n        \"text\": \"faces = new Icon[]{ \\n      new ImageIcon(getClass().getResource(\\\"Face0.gif\\\")), \\n      new ImageIcon(getClass().getResource(\\\"Face1.gif\\\")), \\n      new ImageIcon(getClass().getResource(\\\"Face2.gif\\\")), \\n      new ImageIcon(getClass().getResource(\\\"Face3.gif\\\")), \\n      new ImageIcon(getClass().getResource(\\\"Face4.gif\\\")), \\n    }; \\n    jb = new JButton(\\\"JButton\\\", faces[3]); \\n    setLayout(new FlowLayout()); \\n    jb.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        if(mad) { \\n          jb.setIcon(faces[3]); \\n          mad = false; \\n        } else { \\n          jb.setIcon(faces[0]); \\n          mad = true; \\n        } \\n        jb.setVerticalAlignment(JButton.TOP); \\n        jb.setHorizontalAlignment(JButton.LEFT); \\n      } \\n    }); \\n    jb.setRolloverEnabled(true); \\n    jb.setRolloverIcon(faces[1]); \\n    jb.setPressedIcon(faces[2]); \\n    jb.setDisabledIcon(faces[4]); \\n    jb.setToolTipText(\\\"Yow!\\\"); \\n    add(jb); \\n    jb2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        if(jb.isEnabled()) { \\n          jb.setEnabled(false); \\n          jb2.setText(\\\"Enable\\\"); \\n        } else { \\n          jb.setEnabled(true); \\n          jb2.setText(\\\"Disable\\\"); \\n        } \\n      } \\n    }); \\n    add(jb2);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90953faef6a7c40a88e7410bf1dcde4b\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Faces(), 250, 125);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"66e90206518dbc3bc7c7b150df5a4507\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Get Text\\\"), \\n    b2 = new JButton(\\\"Set Text\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"70bf7717000f14b9b4b5fc814d91cf25\",\n        \"type\": \"source_code\",\n        \"text\": \"t1 = new JTextField(30), \\n    t2 = new JTextField(30), \\n    t3 = new JTextField(30);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef6a632c0902373b05033a5fe5294bfe\",\n        \"type\": \"source_code\",\n        \"text\": \"t1.setDocument(ucd); \\n    ucd.addDocumentListener(new T1()); \\n    b1.addActionListener(new B1()); \\n    b2.addActionListener(new B2()); \\n    t1.addActionListener(new T1A()); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2); \\n    add(t1); \\n    add(t2); \\n    add(t3);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"69cceddb22a19250e82e23ae1b213f0e\",\n        \"type\": \"source_code\",\n        \"text\": \"public void changedUpdate(DocumentEvent e) {} \\n    public void insertUpdate(DocumentEvent e) { \\n      t2.setText(t1.getText()); \\n      t3.setText(\\\"Text: \\\"+ t1.getText());\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab0fb55041ad30a862c224866a64ab4a\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    public void removeUpdate(DocumentEvent e) { \\n      t2.setText(t1.getText()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c717f46c452d0a505644d76f8369ff46\",\n        \"type\": \"source_code\",\n        \"text\": \"private int count = 0; \\n    public void actionPerformed(ActionEvent e) { \\n      t3.setText(\\\"t1 Action Event \\\" + count++); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3cd942eec059de48c992414c71bdec69\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      if(t1.getSelectedText() == null) \\n        s = t1.getText(); \\n      else \\n        s = t1.getSelectedText(); \\n      t1.setEditable(true); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c22d649bf55793183950b2444e5b5f83\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      ucd.setUpperCase(false); \\n      t1.setText(\\\"Inserted by Button 2: \\\" + s); \\n      ucd.setUpperCase(true); \\n      t1.setEditable(false); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e7dd73d74412a1098edc942e26e041d0\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TextFields(), 375, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"352a91c3414a4838e4e4ef5c3896868b\",\n        \"type\": \"source_code\",\n        \"text\": \"upperCase = flag;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9ffea183953caa27ddd0332dd4956e10\",\n        \"type\": \"source_code\",\n        \"text\": \"if(upperCase) str = str.toUpperCase(); \\n    super.insertString(offset, str, attSet);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc7b28a3611acb148b7a95a27984f04d\",\n        \"type\": \"source_code\",\n        \"text\": \"JPanel jp = new JPanel(); \\n    jp.setLayout(new BorderLayout()); \\n    String nm = b.getClass().toString(); \\n    nm = nm.substring(nm.lastIndexOf(\\u2018.\\u2019) + 1); \\n    jp.add(new JLabel(nm, JLabel.CENTER), \\n      BorderLayout.CENTER); \\n    jp.setBorder(b); \\n    return jp;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ad991f079c3e356752a7125dacab4bfd\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new GridLayout(2,4)); \\n    add(showBorder(new TitledBorder(\\\"Title\\\"))); \\n    add(showBorder(new EtchedBorder())); \\n    add(showBorder(new LineBorder(Color.BLUE))); \\n    add(showBorder( \\n      new MatteBorder(5,5,30,30,Color.GREEN))); \\n    add(showBorder( \\n      new BevelBorder(BevelBorder.RAISED))); \\n    add(showBorder( \\n      new SoftBevelBorder(BevelBorder.LOWERED))); \\n    add(showBorder(new CompoundBorder( \\n      new EtchedBorder(), \\n      new LineBorder(Color.RED))));\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c5e95ea88b56b37b51930f05e253029f\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Borders(), 500, 300);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5965cbd298357ba4dcf0f387ae83db4a\",\n        \"type\": \"source_code\",\n        \"text\": \"new RandomGenerator.String(7);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da84fdeed8589f69d615199f399b7372\",\n        \"type\": \"source_code\",\n        \"text\": \"b.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        for(int i = 1; i < 10; i++) \\n          tp.setText(tp.getText() + sg.next() + \\\"\\\\n\\\"); \\n      } \\n    }); \\n    add(new JScrollPane(tp)); \\n    add(BorderLayout.SOUTH, b);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"33cc7288abdae6e8bd58236f6c8ba918\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TextPane(), 475, 425);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8c79e50fb046fb91ccee72b2bdd19287\",\n        \"type\": \"source_code\",\n        \"text\": \"cb1 = new JCheckBox(\\\"Check Box 1\\\"), \\n    cb2 = new JCheckBox(\\\"Check Box 2\\\"), \\n    cb3 = new JCheckBox(\\\"Check Box 3\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"585e0a720776f7486747b0e4a8d2dbe7\",\n        \"type\": \"source_code\",\n        \"text\": \"cb1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        trace(\\\"1\\\", cb1); \\n      } \\n    }); \\n    cb2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        trace(\\\"2\\\", cb2); \\n      } \\n    }); \\n    cb3.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        trace(\\\"3\\\", cb3); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(new JScrollPane(t)); \\n    add(cb1); \\n    add(cb2); \\n    add(cb3);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e4d16dce6033cf0eeda02f2568bb266c\",\n        \"type\": \"source_code\",\n        \"text\": \"if(cb.isSelected()) \\n      t.append(\\\"Box \\\" + b + \\\" Set\\\\n\\\"); \\n    else \\n      t.append(\\\"Box \\\" + b + \\\" Cleared\\\\n\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ae863d0aafd2cc7b5b7d9819369265e\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new CheckBoxes(), 200, 300);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f6eedad0d5026667e7a2449daa2b461f\",\n        \"type\": \"source_code\",\n        \"text\": \"rb1 = new JRadioButton(\\\"one\\\", false), \\n    rb2 = new JRadioButton(\\\"two\\\", false), \\n    rb3 = new JRadioButton(\\\"three\\\", false);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"228e31f8259f3d3665a304a7729825ce\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      t.setText(\\\"Radio button \\\" + \\n        ((JRadioButton)e.getSource()).getText()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7edad8e0683023ecc9f5050ed80a9e96\",\n        \"type\": \"source_code\",\n        \"text\": \"rb1.addActionListener(al); \\n    rb2.addActionListener(al); \\n    rb3.addActionListener(al); \\n    g.add(rb1); g.add(rb2); g.add(rb3); \\n    t.setEditable(false); \\n    setLayout(new FlowLayout()); \\n    add(t); \\n    add(rb1); \\n    add(rb2); \\n    add(rb3);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5c3db051a9be3a0585cbe373e92ce0da\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new RadioButtons(), 200, 125);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cdc5e30b858d13dd42f3d1e889fd9a9c\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Ebullient\\\", \\\"Obtuse\\\", \\\"Recalcitrant\\\", \\\"Brilliant\\\", \\n    \\\"Somnescent\\\", \\\"Timorous\\\", \\\"Florid\\\", \\\"Putrescent\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2509444524c57ff9766c2de7851be09\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < 4; i++) \\n      c.addItem(description[count++]); \\n    t.setEditable(false); \\n    b.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        if(count < description.length) \\n          c.addItem(description[count++]); \\n      } \\n    }); \\n    c.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        t.setText(\\\"index: \\\"+ c.getSelectedIndex() + \\\"   \\\" + \\n         ((JComboBox)e.getSource()).getSelectedItem()); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(t); \\n    add(c); \\n    add(b);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cd06cf7b7c97df0d242533864756f9b7\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new ComboBoxes(), 200, 175);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e446a83f98947a13bd61ecce0efb7112\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Chocolate\\\", \\\"Strawberry\\\", \\\"Vanilla Fudge Swirl\\\", \\n    \\\"Mint Chip\\\", \\\"Mocha Almond Fudge\\\", \\\"Rum Raisin\\\", \\n    \\\"Praline Cream\\\", \\\"Mud Pie\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44c8381d4903c00cf809663464eaaac2\",\n        \"type\": \"source_code\",\n        \"text\": \"new JTextArea(flavors.length, 20);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"90e4cc2fc73a162b6c405c658c39f4bc\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      if(count < flavors.length) { \\n        lItems.add(0, flavors[count++]); \\n      } else { \\n        // Disable, since there are no more \\n        // flavors left to be added to the List \\n        b.setEnabled(false); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"39cc849f6da5e4ff7dcac954ec6617fe\",\n        \"type\": \"source_code\",\n        \"text\": \"new ListSelectionListener() { \\n      public void valueChanged(ListSelectionEvent e) { \\n        if(e.getValueIsAdjusting()) return; \\n        t.setText(\\\"\\\"); \\n        for(Object item : lst.getSelectedValues()) \\n          t.append(item + \\\"\\\\n\\\"); \\n      } \\n    };\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"478af28d39fac9b66daf5e26cc51435f\",\n        \"type\": \"source_code\",\n        \"text\": \"t.setEditable(false); \\n    setLayout(new FlowLayout()); \\n    // Create Borders for components: \\n    Border brd = BorderFactory.createMatteBorder( \\n      1, 1, 2, 2, Color.BLACK); \\n    lst.setBorder(brd); \\n    t.setBorder(brd); \\n    // Add the first four items to the List \\n    for(int i = 0; i < 4; i++) \\n      lItems.addElement(flavors[count++]); \\n    add(t); \\n    add(lst); \\n    add(b); \\n    // Register event listeners \\n    lst.addListSelectionListener(ll); \\n    b.addActionListener(bl);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d038c326abf499f93c28f34ef3fdc85a\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new List(), 250, 375);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e446a83f98947a13bd61ecce0efb7112\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Chocolate\\\", \\\"Strawberry\\\", \\\"Vanilla Fudge Swirl\\\", \\n    \\\"Mint Chip\\\", \\\"Mocha Almond Fudge\\\", \\\"Rum Raisin\\\", \\n    \\\"Praline Cream\\\", \\\"Mud Pie\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9a662e9803790766ea1d3bcd3c4cd68\",\n        \"type\": \"source_code\",\n        \"text\": \"int i = 0; \\n    for(String flavor : flavors) \\n      tabs.addTab(flavors[i], \\n        new JButton(\\\"Tabbed pane \\\" + i++)); \\n    tabs.addChangeListener(new ChangeListener() { \\n      public void stateChanged(ChangeEvent e) { \\n        txt.setText(\\\"Tab selected: \\\" + \\n          tabs.getSelectedIndex()); \\n      } \\n    }); \\n    add(BorderLayout.SOUTH, txt); \\n    add(tabs);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e80a9596ac8ef7a2b75ee404a009bec7\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TabbedPane1(), 400, 250);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8cfe2b301e97e93bc6ab28f4e08867da\",\n        \"type\": \"source_code\",\n        \"text\": \"new JButton(\\\"Alert\\\"), new JButton(\\\"Yes/No\\\"), \\n    new JButton(\\\"Color\\\"), new JButton(\\\"Input\\\"), \\n    new JButton(\\\"3 Vals\\\")\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"08c73267bb29f6a79a4f0e5d0759d640\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      String id = ((JButton)e.getSource()).getText(); \\n      if(id.equals(\\\"Alert\\\")) \\n        JOptionPane.showMessageDialog(null, \\n          \\\"There\\u2019s a bug on you!\\\", \\\"Hey!\\\", \\n          JOptionPane.ERROR_MESSAGE); \\n      else if(id.equals(\\\"Yes/No\\\")) \\n        JOptionPane.showConfirmDialog(null, \\n          \\\"or no\\\", \\\"choose yes\\\", \\n          JOptionPane.YES_NO_OPTION); \\n      else if(id.equals(\\\"Color\\\")) { \\n        Object[] options = { \\\"Red\\\", \\\"Green\\\" }; \\n        int sel = JOptionPane.showOptionDialog( \\n          null, \\\"Choose a Color!\\\", \\\"Warning\\\", \\n          JOptionPane.DEFAULT_OPTION, \\n          JOptionPane.WARNING_MESSAGE, null, \\n          options, options[0]); \\n        if(sel != JOptionPane.CLOSED_OPTION) \\n          txt.setText(\\\"Color Selected: \\\" + options[sel]); \\n      } else if(id.equals(\\\"Input\\\")) { \\n        String val = JOptionPane.showInputDialog( \\n            \\\"How many fingers do you see?\\\"); \\n        txt.setText(val); \\n      } else if(id.equals(\\\"3 Vals\\\")) { \\n        Object[] selections = {\\\"First\\\", \\\"Second\\\", \\\"Third\\\"}; \\n        Object val = JOptionPane.showInputDialog( \\n          null, \\\"Choose one\\\", \\\"Input\\\", \\n          JOptionPane.INFORMATION_MESSAGE, \\n          null, selections, selections[0]); \\n        if(val != null) \\n          txt.setText(val.toString()); \\n      } \\n    }\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"de9c883645144c3e4c0935ac652e6a5b\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    for(int i = 0; i < b.length; i++) { \\n      b[i].addActionListener(al); \\n      add(b[i]); \\n    } \\n    add(txt);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d3433da08180fc17d1599314d3779891\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new MessageBoxes(), 200, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6922fc514229bc854dc1be87c8004582\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      t.setText(((JMenuItem)e.getSource()).getText()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e0bd154c5561fa9aabbb928c88f2145f\",\n        \"type\": \"source_code\",\n        \"text\": \"new JMenu(\\\"Winken\\\"), new JMenu(\\\"Blinken\\\"), \\n    new JMenu(\\\"Nod\\\")\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8ed6d157593d3e519233d46958744707\",\n        \"type\": \"source_code\",\n        \"text\": \"new JMenuItem(\\\"Fee\\\"), new JMenuItem(\\\"Fi\\\"), \\n    new JMenuItem(\\\"Fo\\\"),  new JMenuItem(\\\"Zip\\\"), \\n    new JMenuItem(\\\"Zap\\\"), new JMenuItem(\\\"Zot\\\"), \\n    new JMenuItem(\\\"Olly\\\"), new JMenuItem(\\\"Oxen\\\"), \\n    new JMenuItem(\\\"Free\\\")\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e543d31833fedbc951d19c11c1f3695e\",\n        \"type\": \"source_code\",\n        \"text\": \"for(int i = 0; i < items.length; i++) { \\n      items[i].addActionListener(al); \\n      menus[i % 3].add(items[i]); \\n    } \\n    JMenuBar mb = new JMenuBar();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2477bdd270f03a472352adb77b4c3607\",\n        \"type\": \"source_code\",\n        \"text\": \"for(JMenu jm : menus) \\n      mb.add(jm); \\n    setJMenuBar(mb); \\n    setLayout(new FlowLayout()); \\n    add(t);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"137b617df3a2a0e81bf262f800bd218b\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new SimpleMenus(), 200, 150);\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e446a83f98947a13bd61ecce0efb7112\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Chocolate\\\", \\\"Strawberry\\\", \\\"Vanilla Fudge Swirl\\\", \\n    \\\"Mint Chip\\\", \\\"Mocha Almond Fudge\\\", \\\"Rum Raisin\\\", \\n    \\\"Praline Cream\\\", \\\"Mud Pie\\\"\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"85fe6cd6edd51e1c456ff14382d1a7c7\",\n        \"type\": \"source_code\",\n        \"text\": \"f = new JMenu(\\\"File\\\"), \\n    m = new JMenu(\\\"Flavors\\\"), \\n    s = new JMenu(\\\"Safety\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c8a34585b016b5ea1b2854d43ea95499\",\n        \"type\": \"source_code\",\n        \"text\": \"new JCheckBoxMenuItem(\\\"Guard\\\"), \\n    new JCheckBoxMenuItem(\\\"Hide\\\")\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8208eddbe45aca6d4c14fd8c4520cc37\",\n        \"type\": \"source_code\",\n        \"text\": \"// Adding a menu shortcut (mnemonic) is very \\n    // simple, but only JMenuItems can have them \\n    // in their constructors: \\n    new JMenuItem(\\\"Foo\\\", KeyEvent.VK_F), \\n    new JMenuItem(\\\"Bar\\\", KeyEvent.VK_A),\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3b7f54e8784e91520c6c7544c37822bc\",\n        \"type\": \"source_code\",\n        \"text\": \"// No shortcut: \\n    new JMenuItem(\\\"Baz\\\"),\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0f09b7cfb035bad8b2d1db0d9d0d7a83\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JMenuBar m = getJMenuBar(); \\n      setJMenuBar(m == mb1 ? mb2 : mb1); \\n      validate(); // Refresh the frame \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"054aa64af52bca0661d3ffecbee50e2a\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JMenuItem target = (JMenuItem)e.getSource(); \\n      String actionCommand = target.getActionCommand(); \\n      if(actionCommand.equals(\\\"Open\\\")) { \\n        String s = t.getText(); \\n        boolean chosen = false; \\n        for(String flavor : flavors) \\n          if(s.equals(flavor)) \\n            chosen = true; \\n        if(!chosen) \\n          t.setText(\\\"Choose a flavor first!\\\"); \\n        else \\n          t.setText(\\\"Opening \\\" + s + \\\". Mmm, mm!\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"32aab663a4efc4615afee2e8d46d2430\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JMenuItem target = (JMenuItem)e.getSource(); \\n      t.setText(target.getText()); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dcd2b2198bc3b75ca3f73678917388d2\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      t.setText(\\\"Foo selected\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b922b06c8a672b24f7a2d26ae559b6fb\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      t.setText(\\\"Bar selected\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09374ed3c6ac9da20c5b18d8a6ac6a5f\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      t.setText(\\\"Baz selected\\\"); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87bf1c6ab6ab2a97db9a3e4c035506ec\",\n        \"type\": \"source_code\",\n        \"text\": \"public void itemStateChanged(ItemEvent e) { \\n      JCheckBoxMenuItem target = \\n        (JCheckBoxMenuItem)e.getSource(); \\n      String actionCommand = target.getActionCommand(); \\n      if(actionCommand.equals(\\\"Guard\\\")) \\n        t.setText(\\\"Guard the Ice Cream! \\\" + \\n          \\\"Guarding is \\\" + target.getState()); \\n      else if(actionCommand.equals(\\\"Hide\\\")) \\n        t.setText(\\\"Hide the Ice Cream! \\\" + \\n          \\\"Is it hidden? \\\" + target.getState());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dfa7c63eae6cc9df3a84d464ef79053f\",\n        \"type\": \"source_code\",\n        \"text\": \"ML ml = new ML(); \\n    CMIL cmil = new CMIL(); \\n    safety[0].setActionCommand(\\\"Guard\\\"); \\n    safety[0].setMnemonic(KeyEvent.VK_G); \\n    safety[0].addItemListener(cmil); \\n    safety[1].setActionCommand(\\\"Hide\\\"); \\n    safety[1].setMnemonic(KeyEvent.VK_H); \\n    safety[1].addItemListener(cmil); \\n    other[0].addActionListener(new FooL()); \\n    other[1].addActionListener(new BarL()); \\n    other[2].addActionListener(new BazL()); \\n    FL fl = new FL(); \\n    int n = 0; \\n    for(String flavor : flavors) { \\n      JMenuItem mi = new JMenuItem(flavor); \\n      mi.addActionListener(fl); \\n      m.add(mi); \\n      // Add separators at intervals: \\n      if((n++ + 1) % 3 == 0) \\n        m.addSeparator(); \\n    } \\n    for(JCheckBoxMenuItem sfty : safety) \\n      s.add(sfty); \\n    s.setMnemonic(KeyEvent.VK_A); \\n    f.add(s); \\n    f.setMnemonic(KeyEvent.VK_F); \\n    for(int i = 0; i < file.length; i++) { \\n      file[i].addActionListener(ml); \\n      f.add(file[i]); \\n    } \\n    mb1.add(f); \\n    mb1.add(m); \\n    setJMenuBar(mb1); \\n    t.setEditable(false); \\n    add(t, BorderLayout.CENTER); \\n    // Set up the system for swapping menus: \\n    b.addActionListener(new BL()); \\n    b.setMnemonic(KeyEvent.VK_S); \\n    add(b, BorderLayout.NORTH); \\n    for(JMenuItem oth : other) \\n      fooBar.add(oth); \\n    fooBar.setMnemonic(KeyEvent.VK_B); \\n    mb2.add(fooBar);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"af32cf0439546a0e18f9f207657a2783\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Menus(), 300, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b33ff0a349e66b78a9b800f6e15e2a0a\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new FlowLayout()); \\n    add(t); \\n    ActionListener al = new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        t.setText(((JMenuItem)e.getSource()).getText()); \\n      } \\n    }; \\n    JMenuItem m = new JMenuItem(\\\"Hither\\\"); \\n    m.addActionListener(al); \\n    popup.add(m); \\n    m = new JMenuItem(\\\"Yon\\\"); \\n    m.addActionListener(al); \\n    popup.add(m); \\n    m = new JMenuItem(\\\"Afar\\\"); \\n    m.addActionListener(al); \\n    popup.add(m); \\n    popup.addSeparator(); \\n    m = new JMenuItem(\\\"Stay Here\\\"); \\n    m.addActionListener(al); \\n    popup.add(m); \\n    PopupListener pl = new PopupListener(); \\n    addMouseListener(pl); \\n    t.addMouseListener(pl);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09a3678566d9573dd011b2b8fb8a9e96\",\n        \"type\": \"source_code\",\n        \"text\": \"public void mousePressed(MouseEvent e) { \\n      maybeShowPopup(e); \\n    } \\n    public void mouseReleased(MouseEvent e) { \\n      maybeShowPopup(e); \\n    } \\n    private void maybeShowPopup(MouseEvent e) { \\n      if(e.isPopupTrigger()) \\n        popup.show(e.getComponent(), e.getX(), e.getY()); \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0d6946a0f92a3b1e1cfb85a7cf7dc7e4\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Popup(), 300, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e5d8b895fcde3b2db899c6784101526a\",\n        \"type\": \"source_code\",\n        \"text\": \"super.paintComponent(g); \\n    int maxWidth = getWidth(); \\n    double hstep = (double)maxWidth / (double)points; \\n    int maxHeight = getHeight(); \\n    pts = new int[points]; \\n    for(int i = 0; i < points; i++) \\n      pts[i] = \\n        (int)(sines[i] * maxHeight/2 * .95 + maxHeight/2); \\n    g.setColor(Color.RED); \\n    for(int i = 1; i < points; i++) { \\n      int x1 = (int)((i - 1) * hstep); \\n      int x2 = (int)(i * hstep); \\n      int y1 = pts[i-1]; \\n      int y2 = pts[i];\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9cc67c4546b862f666a668d552b68ddf\",\n        \"type\": \"source_code\",\n        \"text\": \"g.drawLine(x1, y1, x2, y2); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"571c24c042b7e26c1ee0032674463bbd\",\n        \"type\": \"source_code\",\n        \"text\": \"cycles = newCycles; \\n    points = SCALEFACTOR * cycles * 2; \\n    sines = new double[points]; \\n    for(int i = 0; i < points; i++) { \\n      double radians = (Math.PI / SCALEFACTOR) * i; \\n      sines[i] = Math.sin(radians); \\n    } \\n    repaint();\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1885f801a086ad144de52cd266407363\",\n        \"type\": \"source_code\",\n        \"text\": \"add(sines); \\n    adjustCycles.addChangeListener(new ChangeListener() { \\n      public void stateChanged(ChangeEvent e) { \\n        sines.setCycles( \\n          ((JSlider)e.getSource()).getValue()); \\n      } \\n    }); \\n    add(BorderLayout.SOUTH, adjustCycles);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"40589fc7743d82c2cbced06bca0a6dc5\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new SineWave(), 700, 400);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dbe1d82b00bb551051c22c2cd6f217af\",\n        \"type\": \"source_code\",\n        \"text\": \"super(parent, \\\"My dialog\\\", true); \\n    setLayout(new FlowLayout()); \\n    add(new JLabel(\\\"Here is my dialog\\\")); \\n    JButton ok = new JButton(\\\"OK\\\"); \\n    ok.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        dispose(); // Closes the dialog \\n      } \\n    }); \\n    add(ok); \\n    setSize(150,125);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e36160d0d508c31c4e3a201a3b420a51\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        dlg.setVisible(true); \\n      } \\n    }); \\n    add(b1);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6b1ad931f3fd3e239f88f6ee90766987\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Dialogs(), 125, 75);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a74a21e93235b30fd1b35367c44095fe\",\n        \"type\": \"source_code\",\n        \"text\": \"rows = new JTextField(\\\"3\\\"),\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8c3bfc74d8b5762f26479c88ae3164e5\",\n        \"type\": \"source_code\",\n        \"text\": \"cols = new JTextField(\\\"3\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aafbdcd07616b4133686baa49ce3140c\",\n        \"type\": \"source_code\",\n        \"text\": \"private State turn = State.XX; // Start with x\\u2019s turn \\n    ToeDialog(int cellsWide, int cellsHigh) { \\n      setTitle(\\\"The game itself\\\"); \\n      setLayout(new GridLayout(cellsWide, cellsHigh)); \\n      for(int i = 0; i < cellsWide * cellsHigh; i++) \\n        add(new ToeButton()); \\n      setSize(cellsWide * 50, cellsHigh * 50); \\n      setDefaultCloseOperation(DISPOSE_ON_CLOSE); \\n    } \\n    class ToeButton extends JPanel { \\n      private State state = State.BLANK; \\n      public ToeButton() { addMouseListener(new ML()); } \\n      public void paintComponent(Graphics g) { \\n        super.paintComponent(g); \\n        int \\n          x1 = 0, y1 = 0, \\n          x2 = getSize().width - 1, \\n          y2 = getSize().height - 1; \\n        g.drawRect(x1, y1, x2, y2); \\n        x1 = x2/4; \\n        y1 = y2/4; \\n        int wide = x2/2, high = y2/2; \\n        if(state == State.XX) { \\n          g.drawLine(x1, y1, x1 + wide, y1 + high); \\n          g.drawLine(x1, y1 + high, x1 + wide, y1); \\n        } \\n        if(state == State.OO) \\n          g.drawOval(x1, y1, x1 + wide/2, y1 + high/2); \\n      } \\n      class ML extends MouseAdapter { \\n        public void mousePressed(MouseEvent e) { \\n          if(state == State.BLANK) { \\n            state = turn; \\n            turn = \\n              (turn == State.XX ? State.OO : State.XX); \\n          } \\n          else \\n            state = \\n              (state == State.XX ? State.OO : State.XX); \\n          repaint(); \\n        } \\n      } \\n    }\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"91f3cb2aa9728fcf16a4aadb2aa4432d\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JDialog d = new ToeDialog( \\n        new Integer(rows.getText()), \\n        new Integer(cols.getText())); \\n      d.setVisible(true); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07729b583598d57b2b438604521ef007\",\n        \"type\": \"source_code\",\n        \"text\": \"JPanel p = new JPanel(); \\n    p.setLayout(new GridLayout(2,2)); \\n    p.add(new JLabel(\\\"Rows\\\", JLabel.CENTER)); \\n    p.add(rows); \\n    p.add(new JLabel(\\\"Columns\\\", JLabel.CENTER)); \\n    p.add(cols); \\n    add(p, BorderLayout.NORTH);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9c8cc4095a166a3ff3c3edf90c8d1a22\",\n        \"type\": \"source_code\",\n        \"text\": \"JButton b = new JButton(\\\"go\\\"); \\n    b.addActionListener(new BL()); \\n    add(b, BorderLayout.SOUTH);\",\n        \"programming_language\": \"Transact-SQL\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"889f68ffda7342b5ebfa9eeb41e2f982\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new TicTacToe(), 200, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"216f8592058b79e412680ceb345c643b\",\n        \"type\": \"source_code\",\n        \"text\": \"fileName = new JTextField(), \\n    dir = new JTextField();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"459ff1856ad7be7e50968852e7b180ac\",\n        \"type\": \"source_code\",\n        \"text\": \"open = new JButton(\\\"Open\\\"), \\n    save = new JButton(\\\"Save\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"160bf59e42147b43d0d88f2a02692f4e\",\n        \"type\": \"source_code\",\n        \"text\": \"JPanel p = new JPanel();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"38f49458d83268a3a907abc56d116366\",\n        \"type\": \"source_code\",\n        \"text\": \"open.addActionListener(new OpenL()); \\n    p.add(open); \\n    save.addActionListener(new SaveL()); \\n    p.add(save); \\n    add(p, BorderLayout.SOUTH); \\n    dir.setEditable(false); \\n    fileName.setEditable(false); \\n    p = new JPanel(); \\n    p.setLayout(new GridLayout(2,1)); \\n    p.add(fileName); \\n    p.add(dir); \\n    add(p, BorderLayout.NORTH);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cc6313a96b45182309c9e71eae88d718\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JFileChooser c = new JFileChooser(); \\n      // Demonstrate \\\"Open\\\" dialog: \\n      int rVal = c.showOpenDialog(FileChooserTest.this); \\n      if(rVal == JFileChooser.APPROVE_OPTION) { \\n        fileName.setText(c.getSelectedFile().getName()); \\n        dir.setText(c.getCurrentDirectory().toString()); \\n      } \\n      if(rVal == JFileChooser.CANCEL_OPTION) { \\n        fileName.setText(\\\"You pressed cancel\\\"); \\n        dir.setText(\\\"\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ebe4f8a59c77bf13ef6042c5f6ebc3eb\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      JFileChooser c = new JFileChooser(); \\n      // Demonstrate \\\"Save\\\" dialog: \\n      int rVal = c.showSaveDialog(FileChooserTest.this); \\n      if(rVal == JFileChooser.APPROVE_OPTION) { \\n        fileName.setText(c.getSelectedFile().getName()); \\n        dir.setText(c.getCurrentDirectory().toString()); \\n      } \\n      if(rVal == JFileChooser.CANCEL_OPTION) { \\n        fileName.setText(\\\"You pressed cancel\\\"); \\n        dir.setText(\\\"\\\"); \\n      } \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"d9522e52e280e0a2a16bd2610d68486f\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new FileChooserTest(), 250, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9bb96572924447d347360bd0e5c2bde\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"<html><b><font size=+2>\\\" + \\n    \\\"<center>Hello!<br><i>Press me now!\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"64af36135484723bcfd6ff57e615e3f6\",\n        \"type\": \"source_code\",\n        \"text\": \"b.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        add(new JLabel(\\\"<html>\\\" + \\n          \\\"<i><font size=+4>Kapow!\\\")); \\n        // Force a re-layout to include the new label: \\n        validate(); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(b);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"49c7dadbf818ac08efc483ae0e982d36\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new HTMLButton(), 200, 500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ff182c155ea10ba645a9f1863e7ea4a0\",\n        \"type\": \"source_code\",\n        \"text\": \"this, \\\"Monitoring Progress\\\", \\\"Test\\\", 0, 100);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"fcf0364fefe7387028498c2575cffaab\",\n        \"type\": \"source_code\",\n        \"text\": \"new JSlider(JSlider.HORIZONTAL, 0, 100, 60);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ef4e11cd3fee6419fb064529b86d6655\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new GridLayout(2,1)); \\n    add(pb); \\n    pm.setProgress(0); \\n    pm.setMillisToPopup(1000); \\n    sb.setValue(0); \\n    sb.setPaintTicks(true); \\n    sb.setMajorTickSpacing(20); \\n    sb.setMinorTickSpacing(5); \\n    sb.setBorder(new TitledBorder(\\\"Slide Me\\\")); \\n    pb.setModel(sb.getModel()); // Share model \\n    add(sb); \\n    sb.addChangeListener(new ChangeListener() { \\n      public void stateChanged(ChangeEvent e) { \\n        pm.setProgress(sb.getValue()); \\n      } \\n    });\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0477ab4054a343fd111c2b3387358ef3\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new Progress(), 300, 200);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"584e63b573b60fad8c14e1b755982e54\",\n        \"type\": \"source_code\",\n        \"text\": \"\\\"Eeny Meeny Minnie Mickey Moe Larry Curly\\\".split(\\\" \\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ea340a6383f06f4799a77007e196ea1a\",\n        \"type\": \"source_code\",\n        \"text\": \"new JButton(\\\"JButton\\\"), \\n    new JTextField(\\\"JTextField\\\"), \\n    new JLabel(\\\"JLabel\\\"), \\n    new JCheckBox(\\\"JCheckBox\\\"), \\n    new JRadioButton(\\\"Radio\\\"), \\n    new JComboBox(choices), \\n    new JList(choices),\",\n        \"programming_language\": \"Carbon\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1a65c23bbf27886d0b81d296ae34841e\",\n        \"type\": \"source_code\",\n        \"text\": \"super(\\\"Look And Feel\\\"); \\n    setLayout(new FlowLayout()); \\n    for(Component component : samples) \\n      add(component);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1d2c9dc0c8ab9141bf5470f254eabbc5\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println( \\n      \\\"Usage:LookAndFeel [cross|system|motif]\\\");\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"be9b362ddf64f7529eb9f8f53fbf813d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.exit(1);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"dfce50342b49d5dba87875d967a129ad\",\n        \"type\": \"source_code\",\n        \"text\": \"if(args.length == 0) usageError(); \\n    if(args[0].equals(\\\"cross\\\")) { \\n      try { \\n        UIManager.setLookAndFeel(UIManager. \\n          getCrossPlatformLookAndFeelClassName()); \\n      } catch(Exception e) { \\n        e.printStackTrace(); \\n      } \\n    } else if(args[0].equals(\\\"system\\\")) { \\n      try { \\n        UIManager.setLookAndFeel(UIManager. \\n          getSystemLookAndFeelClassName()); \\n      } catch(Exception e) { \\n        e.printStackTrace(); \\n      } \\n    } else if(args[0].equals(\\\"motif\\\")) { \\n      try { \\n        UIManager.setLookAndFeel(\\\"com.sun.java.\\\"+ \\n          \\\"swing.plaf.motif.MotifLookAndFeel\\\"); \\n      } catch(Exception e) { \\n        e.printStackTrace(); \\n      } \\n    } else usageError(); \\n    // Note the look & feel must be set before \\n    // any components are created. \\n    run(new LookAndFeel(), 300, 300);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"459ff1856ad7be7e50968852e7b180ac\",\n        \"type\": \"source_code\",\n        \"text\": \"open = new JButton(\\\"Open\\\"), \\n    save = new JButton(\\\"Save\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"998288ced6117f2a024ab30bed695c0c\",\n        \"type\": \"source_code\",\n        \"text\": \"JPanel p = new JPanel(); \\n    open.addActionListener(new OpenL()); \\n    p.add(open); \\n    save.addActionListener(new SaveL()); \\n    p.add(save); \\n    jsp.getViewport().add(ep); \\n    add(jsp, BorderLayout.CENTER); \\n    add(p, BorderLayout.SOUTH); \\n    fileName.setEditable(false); \\n    p = new JPanel(); \\n    p.setLayout(new GridLayout(2,1)); \\n    p.add(fileName); \\n    add(p, BorderLayout.NORTH); \\n    ep.setContentType(\\\"text\\\"); \\n    save.setEnabled(false);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"bc301acbc3c05f94553287e805ac3d01\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      FileOpenService fs = null; \\n      try { \\n        fs = (FileOpenService)ServiceManager.lookup( \\n          \\\"javax.jnlp.FileOpenService\\\"); \\n      } catch(UnavailableServiceException use) { \\n        throw new RuntimeException(use); \\n      } \\n      if(fs != null) { \\n        try { \\n          fileContents = fs.openFileDialog(\\\".\\\", \\n            new String[]{\\\"txt\\\", \\\"*\\\"}); \\n          if(fileContents == null) \\n            return; \\n          fileName.setText(fileContents.getName()); \\n          ep.read(fileContents.getInputStream(), null); \\n        } catch(Exception exc) { \\n          throw new RuntimeException(exc); \\n        } \\n        save.setEnabled(true); \\n      } \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f9158f6f2e6e7d22da0823d2c011fa3c\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      FileSaveService fs = null; \\n      try { \\n        fs = (FileSaveService)ServiceManager.lookup( \\n          \\\"javax.jnlp.FileSaveService\\\"); \\n      } catch(UnavailableServiceException use) { \\n        throw new RuntimeException(use); \\n      } \\n      if(fs != null) { \\n        try { \\n          fileContents = fs.saveFileDialog(\\\".\\\", \\n            new String[]{\\\"txt\\\"}, \\n            new ByteArrayInputStream( \\n              ep.getText().getBytes()), \\n            fileContents.getName());\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"46385796b95aebe76fd6e1aedbbbf669\",\n        \"type\": \"source_code\",\n        \"text\": \"if(fileContents == null) \\n            return; \\n          fileName.setText(fileContents.getName()); \\n        } catch(Exception exc) { \\n          throw new RuntimeException(exc); \\n        } \\n      } \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f20e45e16f8ff14610872d5bbd63f1ea\",\n        \"type\": \"source_code\",\n        \"text\": \"JnlpFileChooser fc = new JnlpFileChooser(); \\n    fc.setSize(400, 300); \\n    fc.setVisible(true);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4f3d887236d4976f735c80aa478ff3e4\",\n        \"type\": \"source_code\",\n        \"text\": \"<title>FileChooser demo application</title> \\n    <vendor>Mindview Inc.</vendor> \\n    <description> \\n      Jnlp File chooser Application \\n    </description> \\n    <description kind=\\\"short\\\"> \\n      Demonstrates opening, reading and writing a text file \\n    </description> \\n    <icon href=\\\"mindview.gif\\\"/> \\n    <offline-allowed/>\",\n        \"programming_language\": \"XML\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"42380f4ea8e6d61bfdce8900a1b27237\",\n        \"type\": \"source_code\",\n        \"text\": \"<j2se version=\\\"1.3+\\\" \\n      href=\\\"http://java.sun.com/products/autodl/j2se\\\"/> \\n    <jar href=\\\"jnlpfilechooser.jar\\\" download=\\\"eager\\\"/>\",\n        \"programming_language\": \"GDScript\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"372aaf063df499d0095a03e94ec7b97d\",\n        \"type\": \"source_code\",\n        \"text\": \"main-class=\\\"gui.jnlp.JnlpFileChooser\\\"/>\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"210e2f63d75f29f4ef0fcfb4ccac6731\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Start Long Running Task\\\"), \\n    b2 = new JButton(\\\"End Long Running Task\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f0adca0d7149895befb627f25d5a22fb\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent evt) { \\n        try { \\n          TimeUnit.SECONDS.sleep(3); \\n        } catch(InterruptedException e) { \\n          System.out.println(\\\"Task interrupted\\\"); \\n          return; \\n        } \\n        System.out.println(\\\"Task completed\\\"); \\n      } \\n    }); \\n    b2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent evt) { \\n        // Interrupt yourself? \\n        Thread.currentThread().interrupt(); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b4a46ac20e084b97417267ed62ccf91a\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new LongRunningTask(), 200, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f892d671df56c71507ce4594602bf306\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(this + \\\" started\\\"); \\n    try { \\n      TimeUnit.SECONDS.sleep(3); \\n    } catch(InterruptedException e) { \\n      System.out.println(this + \\\" interrupted\\\"); \\n      return; \\n    } \\n    System.out.println(this + \\\" completed\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"210e2f63d75f29f4ef0fcfb4ccac6731\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Start Long Running Task\\\"), \\n    b2 = new JButton(\\\"End Long Running Task\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1023bf6a8e582f63e6e1546bd8b024c\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newSingleThreadExecutor();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"04f316aeac8bf510a20433382dba1e21\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        Task task = new Task(); \\n        executor.execute(task); \\n        System.out.println(task + \\\" added to the queue\\\"); \\n      } \\n    }); \\n    b2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        executor.shutdownNow(); // Heavy-handed \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6c48aae89c2c9dfcb1db478978e84a3a\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new InterruptableLongRunningTask(), 200, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f220879a0aa3e1435e1e3b4d4fcaa7ea\",\n        \"type\": \"source_code\",\n        \"text\": \"this.future = future; \\n    this.task = task;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c1023bf6a8e582f63e6e1546bd8b024c\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newSingleThreadExecutor();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0df9a57fc4cb3c617e5d0b6796900537\",\n        \"type\": \"source_code\",\n        \"text\": \"add(new TaskItem<R,C>(exec.submit(task),task));\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8d5b97fee302f4f5ebe40db6d5da1d07\",\n        \"type\": \"source_code\",\n        \"text\": \"Iterator<TaskItem<R,C>> items = iterator(); \\n    List<R> results = new ArrayList<R>(); \\n    while(items.hasNext()) { \\n      TaskItem<R,C> item = items.next(); \\n      if(item.future.isDone()) { \\n        try { \\n          results.add(item.future.get()); \\n        } catch(Exception e) { \\n          throw new RuntimeException(e); \\n        } \\n        items.remove(); \\n      } \\n    } \\n    return results;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ecff1c2c2f693319e5c845008ae366b6\",\n        \"type\": \"source_code\",\n        \"text\": \"Iterator<TaskItem<R,C>> items = iterator(); \\n    List<String> results = new ArrayList<String>(); \\n    while(items.hasNext()) { \\n      TaskItem<R,C> item = items.next(); \\n      // Leave completed tasks for results reporting: \\n      if(!item.future.isDone()) { \\n        results.add(\\\"Cancelling \\\" + item.task); \\n        item.future.cancel(true); // May interrupt \\n        items.remove(); \\n      } \\n    } \\n    return results;\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"da2cd2e94eefd7081eec0e3c54a120ab\",\n        \"type\": \"source_code\",\n        \"text\": \"run(); \\n    return \\\"Return value of \\\" + this;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ec8ca8e65e1f7973adb8a8e679bee009\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Start Long Running Task\\\"), \\n    b2 = new JButton(\\\"End Long Running Task\\\"), \\n    b3 = new JButton(\\\"Get results\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"86efe55a1ca8184fc4d5db4f58c3b80b\",\n        \"type\": \"source_code\",\n        \"text\": \"new TaskManager<String,CallableTask>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"87b037ccbbec545049c6fd6ff21fa4ff\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        CallableTask task = new CallableTask(); \\n        manager.add(task); \\n        System.out.println(task + \\\" added to the queue\\\"); \\n      } \\n    }); \\n    b2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        for(String result : manager.purge()) \\n          System.out.println(result);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ab4641d82835b5e9c8475599231a2962\",\n        \"type\": \"source_code\",\n        \"text\": \"} \\n    }); \\n    b3.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        // Sample call to a Task method: \\n        for(TaskItem<String,CallableTask> tt : \\n            manager) \\n          tt.task.id(); // No cast required \\n        for(String result : manager.getResults()) \\n          System.out.println(result); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2); \\n    add(b3);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a3203fc6cdb367e86016d842348eaf4e\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new InterruptableLongRunningCallable(), 200, 150);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"05719ac69f7e313c2ca2ff664fb8dd89\",\n        \"type\": \"source_code\",\n        \"text\": \"this.monitor = monitor; \\n    monitor.setNote(toString()); \\n    monitor.setMaximum(MAX - 1); \\n    monitor.setMillisToPopup(500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"92dec778f606e014919f6ece131a1b5d\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(this + \\\" started\\\"); \\n    try { \\n      for(int i = 0; i < MAX; i++) { \\n        TimeUnit.MILLISECONDS.sleep(500); \\n        if(monitor.isCanceled()) \\n          Thread.currentThread().interrupt();\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6557ff17fcac41c61d4d37ba895f74c4\",\n        \"type\": \"source_code\",\n        \"text\": \"final int progress = i; \\n        SwingUtilities.invokeLater( \\n          new Runnable() { \\n            public void run() { \\n              monitor.setProgress(progress); \\n            } \\n          } \\n        ); \\n      } \\n    } catch(InterruptedException e) { \\n      monitor.close(); \\n      System.out.println(this + \\\" interrupted\\\"); \\n      return \\\"Result: \\\" + this + \\\" interrupted\\\"; \\n    } \\n    System.out.println(this + \\\" completed\\\"); \\n    return \\\"Result: \\\" + this + \\\" completed\\\";\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ec8ca8e65e1f7973adb8a8e679bee009\",\n        \"type\": \"source_code\",\n        \"text\": \"b1 = new JButton(\\\"Start Long Running Task\\\"), \\n    b2 = new JButton(\\\"End Long Running Task\\\"), \\n    b3 = new JButton(\\\"Get results\\\");\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"890d1cbbfab7add00dc394bcd27985e5\",\n        \"type\": \"source_code\",\n        \"text\": \"new TaskManager<String,MonitoredCallable>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"849f4f98a1bb6f5b9c8afa033f04d73a\",\n        \"type\": \"source_code\",\n        \"text\": \"b1.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        MonitoredCallable task = new MonitoredCallable( \\n          new ProgressMonitor( \\n            MonitoredLongRunningCallable.this, \\n            \\\"Long-Running Task\\\", \\\"\\\", 0, 0) \\n        ); \\n        manager.add(task); \\n        System.out.println(task + \\\" added to the queue\\\"); \\n      } \\n    }); \\n    b2.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        for(String result : manager.purge()) \\n          System.out.println(result); \\n      } \\n    }); \\n    b3.addActionListener(new ActionListener() { \\n      public void actionPerformed(ActionEvent e) { \\n        for(String result : manager.getResults()) \\n          System.out.println(result); \\n      } \\n    }); \\n    setLayout(new FlowLayout()); \\n    add(b1); \\n    add(b2); \\n    add(b3);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"488054d189aba75697710bfd0aea8d46\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new MonitoredLongRunningCallable(), 200, 500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"455a868e60b52e1d24b50379d80911bd\",\n        \"type\": \"source_code\",\n        \"text\": \"g.setColor(color); \\n    Dimension s = getSize(); \\n    g.fillRect(0, 0, s.width, s.height);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"75eb06032be0c533b939a0842b4dbd05\",\n        \"type\": \"source_code\",\n        \"text\": \"try { \\n      while(!Thread.interrupted()) { \\n        color = new Color(rand.nextInt(0xFFFFFF)); \\n        repaint(); // Asynchronously request a paint() \\n        TimeUnit.MILLISECONDS.sleep(pause); \\n      } \\n    } catch(InterruptedException e) { \\n      // Acceptable way to exit \\n    }\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c23539246db1546d265aafaea3f738aa\",\n        \"type\": \"source_code\",\n        \"text\": \"Executors.newCachedThreadPool();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"a5f3645c2c8012baf46ec0520131ab27\",\n        \"type\": \"source_code\",\n        \"text\": \"setLayout(new GridLayout(grid, grid)); \\n    for(int i = 0; i < grid * grid; i++) { \\n      CBox cb = new CBox(pause); \\n      add(cb); \\n      exec.execute(cb); \\n    }\",\n        \"programming_language\": \"scdoc\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9dfe884102abe316daf3d822f1fb2969\",\n        \"type\": \"source_code\",\n        \"text\": \"ColorBoxes boxes = new ColorBoxes(); \\n    if(args.length > 0) \\n      boxes.grid = new Integer(args[0]); \\n    if(args.length > 1) \\n      boxes.pause = new Integer(args[1]); \\n    boxes.setUp(); \\n    run(boxes, 500, 400);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"93a9a0dd419805253c6fb2f58a6bb9ab\",\n        \"type\": \"source_code\",\n        \"text\": \"and JavaBeans\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7d7eea4a0102ae9df5c591370f9d7b0b\",\n        \"type\": \"source_code\",\n        \"text\": \"jumps = newJumps;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"6eed0067fd440a15608264c822280a5d\",\n        \"type\": \"source_code\",\n        \"text\": \"color = newColor;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"2ca81bdb25f3d42ec4c126f5240e3313\",\n        \"type\": \"source_code\",\n        \"text\": \"spots = newSpots;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"329527aecf585ceb2e5f3b36effd6fea\",\n        \"type\": \"source_code\",\n        \"text\": \"//...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8fe5a459b8cf7a79462d079c3b9164ba\",\n        \"type\": \"source_code\",\n        \"text\": \"// ...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8fe5a459b8cf7a79462d079c3b9164ba\",\n        \"type\": \"source_code\",\n        \"text\": \"// ...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"8fe5a459b8cf7a79462d079c3b9164ba\",\n        \"type\": \"source_code\",\n        \"text\": \"// ...\",\n        \"programming_language\": \"Scilab\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e2f96c9d7951f1a832f7b878177ab1dc\",\n        \"type\": \"source_code\",\n        \"text\": \"System.out.println(\\\"Ribbet!\\\");\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"f1a9d0da6c954452354529e3f773069a\",\n        \"type\": \"source_code\",\n        \"text\": \"results.setText(\\\"\\\"); \\n    BeanInfo bi = null; \\n    try { \\n      bi = Introspector.getBeanInfo(bean, Object.class); \\n    } catch(IntrospectionException e) { \\n      print(\\\"Couldn\\u2019t introspect \\\" +  bean.getName()); \\n      return; \\n    } \\n    for(PropertyDescriptor d: bi.getPropertyDescriptors()){ \\n      Class<?> p = d.getPropertyType(); \\n      if(p == null) continue; \\n      print(\\\"Property type:\\\\n  \\\" + p.getName() + \\n        \\\"Property name:\\\\n  \\\" + d.getName()); \\n      Method readMethod = d.getReadMethod(); \\n      if(readMethod != null) \\n        print(\\\"Read method:\\\\n  \\\" + readMethod); \\n      Method writeMethod = d.getWriteMethod(); \\n      if(writeMethod != null) \\n        print(\\\"Write method:\\\\n  \\\" + writeMethod); \\n      print(\\\"====================\\\"); \\n    } \\n    print(\\\"Public methods:\\\"); \\n    for(MethodDescriptor m : bi.getMethodDescriptors()) \\n      print(m.getMethod().toString()); \\n    print(\\\"======================\\\"); \\n    print(\\\"Event support:\\\"); \\n    for(EventSetDescriptor e: bi.getEventSetDescriptors()){ \\n      print(\\\"Listener type:\\\\n  \\\" + \\n        e.getListenerType().getName()); \\n      for(Method lm : e.getListenerMethods()) \\n        print(\\\"Listener method:\\\\n  \\\" + lm.getName()); \\n      for(MethodDescriptor lmd : \\n          e.getListenerMethodDescriptors() ) \\n        print(\\\"Method descriptor:\\\\n  \\\" + lmd.getMethod()); \\n      Method addListener= e.getAddListenerMethod(); \\n      print(\\\"Add Listener Method:\\\\n  \\\" + addListener); \\n      Method removeListener = e.getRemoveListenerMethod(); \\n      print(\\\"Remove Listener Method:\\\\n  \\\"+ removeListener); \\n      print(\\\"====================\\\");\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"cbb184dd8e05c9709e5dcaedaa0495cf\",\n        \"type\": \"source_code\",\n        \"text\": \"}\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1534c9f4b2c68a6116a9faa00b89c5ad\",\n        \"type\": \"source_code\",\n        \"text\": \"public void actionPerformed(ActionEvent e) { \\n      String name = query.getText(); \\n      Class<?> c = null; \\n      try { \\n        c = Class.forName(name); \\n      } catch(ClassNotFoundException ex) { \\n        results.setText(\\\"Couldn\\u2019t find \\\" + name); \\n        return; \\n      } \\n      dump(c); \\n    }\",\n        \"programming_language\": \"JavaScript+PHP\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3f8cbbf57e3ec1f21ccd4f085cadc0d6\",\n        \"type\": \"source_code\",\n        \"text\": \"JPanel p = new JPanel(); \\n    p.setLayout(new FlowLayout()); \\n    p.add(new JLabel(\\\"Qualified bean name:\\\")); \\n    p.add(query); \\n    add(BorderLayout.NORTH, p); \\n    add(new JScrollPane(results)); \\n    Dumper dmpr = new Dumper(); \\n    query.addActionListener(dmpr); \\n    query.setText(\\\"frogbean.Frog\\\"); \\n    // Force evaluation \\n    dmpr.actionPerformed(new ActionEvent(dmpr, 0, \\\"\\\"));\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"aa3a955ecb7b5abdfd15e1f69bd69404\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new BeanDumper(), 600, 500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"892940ca8752940426107e4cc2386c12\",\n        \"type\": \"source_code\",\n        \"text\": \"addMouseListener(new ML()); \\n    addMouseMotionListener(new MML());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e99551fda5dffe60ce6ca38613dc9086\",\n        \"type\": \"source_code\",\n        \"text\": \"cSize = newSize;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07ff35ad90fffbc6564cc1eb3beddf1b\",\n        \"type\": \"source_code\",\n        \"text\": \"text = newText;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09214a48f79a6d1e4743b176ea3f9cb8\",\n        \"type\": \"source_code\",\n        \"text\": \"fontSize = newSize;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1bdb02e7b703325e98d0c0465b2b0c93\",\n        \"type\": \"source_code\",\n        \"text\": \"tColor = newColor;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b522b4b6f6560ebe9173b305abab142\",\n        \"type\": \"source_code\",\n        \"text\": \"super.paintComponent(g); \\n    g.setColor(Color.BLACK); \\n    g.drawOval(xm - cSize/2, ym - cSize/2, cSize, cSize);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"b5c85031655bc300cd1cfc8339c5ed84\",\n        \"type\": \"source_code\",\n        \"text\": \"if(actionListener != null) \\n      throw new TooManyListenersException(); \\n    actionListener = l;\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"44abdafb318fb182e6169e0a3dd162d1\",\n        \"type\": \"source_code\",\n        \"text\": \"actionListener = null;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"51a3fdc3ffcd73f942d9bdde9cf58011\",\n        \"type\": \"source_code\",\n        \"text\": \"public void mousePressed(MouseEvent e) { \\n      Graphics g = getGraphics(); \\n      g.setColor(tColor); \\n      g.setFont( \\n        new Font(\\\"TimesRoman\\\", Font.BOLD, fontSize)); \\n      int width = g.getFontMetrics().stringWidth(text); \\n      g.drawString(text, (getSize().width - width) /2, \\n        getSize().height/2); \\n      g.dispose(); \\n      // Call the listener\\u2019s method: \\n      if(actionListener != null) \\n        actionListener.actionPerformed( \\n          new ActionEvent(BangBean.this, \\n            ActionEvent.ACTION_PERFORMED, null)); \\n    }\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"c4f7255d65eb7cf7ea5b5f7436307d25\",\n        \"type\": \"source_code\",\n        \"text\": \"public void mouseMoved(MouseEvent e) { \\n      xm = e.getX(); \\n      ym = e.getY();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9d3f0538eb3a8a1b3541ac30b7e4e459\",\n        \"type\": \"source_code\",\n        \"text\": \"repaint(); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"7525077d100e832c78c5a0adb8417592\",\n        \"type\": \"source_code\",\n        \"text\": \"return new Dimension(200, 200);\",\n        \"programming_language\": \"Tera Term macro\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"048704892935debe74cd49687e1e5e06\",\n        \"type\": \"source_code\",\n        \"text\": \"private int count = 0; \\n    public void actionPerformed(ActionEvent e) { \\n      txt.setText(\\\"BangBean action \\\"+ count++); \\n    }\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"ced142d411c585e569ed64d338a284a4\",\n        \"type\": \"source_code\",\n        \"text\": \"BangBean bb = new BangBean(); \\n    try { \\n      bb.addActionListener(new BBL()); \\n    } catch(TooManyListenersException e) { \\n      txt.setText(\\\"Too many listeners\\\"); \\n    } \\n    add(bb); \\n    add(BorderLayout.SOUTH, txt);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"0222c94a2ec2b56c51c45861ab557f67\",\n        \"type\": \"source_code\",\n        \"text\": \"run(new BangBeanTest(), 400, 500);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1800f5262668c3ad13482cba8cc511bc\",\n        \"type\": \"source_code\",\n        \"text\": \"new ArrayList<ActionListener>();\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"4ebf480df3fdb65f0b730879e40013c5\",\n        \"type\": \"source_code\",\n        \"text\": \"addMouseListener(new ML()); \\n    addMouseMotionListener(new MM());\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"e99551fda5dffe60ce6ca38613dc9086\",\n        \"type\": \"source_code\",\n        \"text\": \"cSize = newSize;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"07ff35ad90fffbc6564cc1eb3beddf1b\",\n        \"type\": \"source_code\",\n        \"text\": \"text = newText;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"09214a48f79a6d1e4743b176ea3f9cb8\",\n        \"type\": \"source_code\",\n        \"text\": \"fontSize = newSize;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"1bdb02e7b703325e98d0c0465b2b0c93\",\n        \"type\": \"source_code\",\n        \"text\": \"tColor = newColor;\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"9b522b4b6f6560ebe9173b305abab142\",\n        \"type\": \"source_code\",\n        \"text\": \"super.paintComponent(g); \\n    g.setColor(Color.BLACK); \\n    g.drawOval(xm - cSize/2, ym - cSize/2, cSize, cSize);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"43e4633e18984ddbefe6383f9f3e0d09\",\n        \"type\": \"source_code\",\n        \"text\": \"actionListeners.add(l);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"3419aa2a7f9b11826a01f978cf18de67\",\n        \"type\": \"source_code\",\n        \"text\": \"actionListeners.remove(l);\",\n        \"programming_language\": \"Text only\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"5fbada9b44d8431aa7b8f174c7d200d7\",\n        \"type\": \"source_code\",\n        \"text\": \"ActionEvent a = new ActionEvent(BangBean2.this, \\n      ActionEvent.ACTION_PERFORMED, null); \\n    ArrayList<ActionListener> lv = null; \\n    // Make a shallow copy of the List in case \\n    // someone adds a listener while we\\u2019re \\n    // calling listeners: \\n    synchronized(this) { \\n      lv = new ArrayList<ActionListener>(actionListeners); \\n    } \\n    // Call all the listener methods: \\n    for(ActionListener al : lv) \\n      al.actionPerformed(a);\",\n        \"programming_language\": \"CSS+Lasso\",\n        \"weight\": 0.0\n    },\n    {\n        \"id\": \"73256f600e5ad9918d00fe3a5b184794\",\n        \"type\": \"source_code\",\n        \"text\": \"public void mousePressed(MouseEvent e) { \\n      Graphics g = getGraphics(); \\n      g.setColor(tColor); \\n      g.setFont( \\n        new Font(\\\"TimesRoman\\\", Font.BOLD, fontSize)); \\n      int width = g.getFontMetrics().stringWidth(text); \\n      g.drawString(text, (getSize().width - width) /2, \\n        getSize().height/2)